импорт ПодборПерсонала
импорт ОбщиеСтандартные
импорт СтандартноеПриложение
импорт КонтрольДоступа
импорт ФизическиеЛица
импорт Уведомления
импорт УниверсальныеМеханизмы
импорт Компания
импорт Анкетирование
импорт Анкетирование::Обмен
импорт УправлениеПерсоналом

@ВПроекте конст ИД_РАЗДЕЛА_ВАКАНСИИ = "Вакансии"
@ВПроекте конст ИД_РАЗДЕЛА_ОБО_МНЕ = "ОбоМне"
@ВПроекте конст ИД_РАЗДЕЛА_МАТЕРИАЛЫ_КАНДИДАТОВ = "МатериалыКандидатов"
@ВПроекте конст ИД_РАЗДЕЛА_АНКЕТИРОВАНИЕ_И_ТЕСТИРОВАНИЕ = "АнкетированиеИТестирование"
@ВПроекте конст ИД_РАЗДЕЛА_СОБЕСЕДОВАНИЯ_КАНДИДАТА = "СобеседованияКандидата"
@ВПроекте конст ИД_РАЗДЕЛА_ОФФЕР = "Оффер"
@ВПроекте конст ИД_РАЗДЕЛА_ПОДПИСАНИЕ_СОГЛАСИЯ = "ПодписаниеСогласия"

@ВПроекте
конст ПОРЯДОК_РАЗДЕЛОВ = {
    ИД_РАЗДЕЛА_ПОДПИСАНИЕ_СОГЛАСИЯ: 0,
    ИД_РАЗДЕЛА_ВАКАНСИИ: 1,
    ИД_РАЗДЕЛА_ОБО_МНЕ: 2,
    ИД_РАЗДЕЛА_СОБЕСЕДОВАНИЯ_КАНДИДАТА: 3,
    ИД_РАЗДЕЛА_АНКЕТИРОВАНИЕ_И_ТЕСТИРОВАНИЕ: 4,
    ИД_РАЗДЕЛА_МАТЕРИАЛЫ_КАНДИДАТОВ: 5,
    ИД_РАЗДЕЛА_ОФФЕР: 6
}

@ВПроекте конст ИД_ПОДСИСТЕМЫ = "ЛичныеКабинетыКандидатов"
@ВПодсистеме конст ИМЯ_ПОДСИСТЕМЫ = "Личные кабинеты кандидатов"
@ВПодсистеме конст ОТКЛИК_КАНДИДАТА = "ОткликКандидата"

@ВПодсистеме
структура ДанныеСозданияПользователя
    обз пер Логин: Строка
    обз пер Телефон: Строка
    обз пер ЭлектроннаяПочта: Строка     
;

@ВПодсистеме
@НаКлиенте
метод ОткликнутьсяНаВакансию(Вакансия: Вакансии.Ссылка)
    если не АутентифицированныйПользователь()
        РегистрацияКандидата.Открыть(ВыбраннаяВакансия = Вакансия)
    иначе
        ЗаписатьОтклик(Вакансия)
        МенеджерГлобальныхКлиентскихСобытий.Оповестить(ОТКЛИК_КАНДИДАТА)
    ;    
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ЗаписатьОтклик(Вакансия: Вакансии.Ссылка): Отклики.Ссылка?
    
    знч ТекущийПользователь = Пользователи.ТекущийПользователь
    если ОткликиКандидатов.КандидатОткликалсяПоВакансии(ТекущийПользователь, Вакансия)
        возврат Неопределено
    ;
    
    знч КонтактнаяИнформацияПользователя = ПользователиСистемы.КонтактнаяИнформацияПользователя(ТекущийПользователь)
    
    исп КонтекстДоступа.Привилегированный()
    знч Анкета = РезюмеКандидатов.РезюмеКандидата(ТекущийПользователь).Анкета
    знч ДанныеАнкеты = АнкетыDto.ДанныеАнкет([Анкета])[Анкета]
    знч ДанныеЭлементаКонструктора = Анкетирование.ДанныеАнкеты(
            ДанныеАнкеты.Ссылка,
            ДанныеАнкеты.Статус,
            ДанныеАнкеты.Шаблон
        )
    
    знч ДанныеОтклика = новый Отклики.ДанныеОтклика(Вакансия, ИсточникиКандидатов.ВитринаВакансий)
    ПредопределенныеВопросыАнкеты.ЗаполнитьДанныеОткликаИзАнкеты(ДанныеОтклика, Анкетирование.ЗаполнитьСтуктуруОтветов(ДанныеЭлементаКонструктора))
    ДанныеОтклика.Наименование = "%{КонтактнаяИнформацияПользователя.Телефон}%{КонтактнаяИнформацияПользователя.ЭлектроннаяПочта}"
    ДанныеОтклика.АнкетаОСебе = Анкета
    
    если не КонтактнаяИнформацияПользователя.ЭлектроннаяПочта.Пусто()
        и не ДанныеОтклика.ЭлектроннаяПочта.Содержит(КонтактнаяИнформацияПользователя.ЭлектроннаяПочта)
        ДанныеОтклика.ЭлектроннаяПочта.Добавить(КонтактнаяИнформацияПользователя.ЭлектроннаяПочта)
    ;
    
    если не КонтактнаяИнформацияПользователя.Телефон.Пусто()
        и не ДанныеОтклика.Телефон.Содержит(КонтактнаяИнформацияПользователя.Телефон)
        ДанныеОтклика.Телефон.Добавить(КонтактнаяИнформацияПользователя.Телефон)
    ;
    
    знч НовыйОтклик = Отклики.СоздатьОтклик(ДанныеОтклика)
    ОткликиКандидатов.ЗаписатьОткликКандидата(ТекущийПользователь, Вакансия, НовыйОтклик)
    возврат НовыйОтклик
;

@НаСервере
метод ДанныеДляОтклика(СтруктураОтвета: Массив<Анкетирование.СтруктураОтвета>): ДанныеЗаполненияОтклика
    
    знч ДанныеДляОтклика: ДанныеЗаполненияОтклика
    знч ЗарплатныеОжидания: ОписаниеОплаты
    
    для Ответ из СтруктураОтвета
        выбор Ответ.ИдВопроса
        когда ПредопределенныеВопросыАнкеты.ИД_ВОПРОСА_ФАМИЛИЯ
            ДанныеДляОтклика.Фамилия = Ответ.Ответ.ЗначениеСтрока
        когда ПредопределенныеВопросыАнкеты.ИД_ВОПРОСА_ИМЯ
            ДанныеДляОтклика.Имя = Ответ.Ответ.ЗначениеСтрока
        когда ПредопределенныеВопросыАнкеты.ИД_ВОПРОСА_ОТЧЕСТВО
            ДанныеДляОтклика.Отчество = Ответ.Ответ.ЗначениеСтрока
        когда ПредопределенныеВопросыАнкеты.ИД_ВОПРОСА_ПОЛ
            если не Ответ.Ответ.ЗначенияПредопределенные.Пусто()
                для Пол из ПолФизическогоЛица.Элементы()
                    если Пол.Представление() == Ответ.Ответ.ЗначенияПредопределенные[0].Представление()
                        ДанныеДляОтклика.Пол = Пол
                    ;
                ;
            ;
        когда ПредопределенныеВопросыАнкеты.ИД_ВОПРОСА_ДАТА_РОЖДЕНИЯ
            ДанныеДляОтклика.ДатаРождения = Ответ.Ответ.ЗначениеДата
        когда ПредопределенныеВопросыАнкеты.ИД_ВОПРОСА_ЭЛЕКТРОННАЯ_ПОЧТА
            ДанныеДляОтклика.ЭлектроннаяПочта = Ответ.Ответ.ЗначениеСтрока
        когда ПредопределенныеВопросыАнкеты.ИД_ВОПРОСА_ТЕЛЕФОН
            ДанныеДляОтклика.Телефон = Ответ.Ответ.ЗначениеСтрока
        когда ПредопределенныеВопросыАнкеты.ИД_ВОПРОСА_ВАШ_ГОРОД
            если не Ответ.Ответ.ЗначенияПредопределенные.Пусто()
                ДанныеДляОтклика.НаселенныйПункт = НаселенныеПункты.ПолучитьСсылку(Ответ.Ответ.ЗначенияПредопределенные[0].Ид)
            ;
        когда ПредопределенныеВопросыАнкеты.ИД_ВОПРОСА_ФАЙЛ_РЕЗЮМЕ
            ДанныеДляОтклика.ФайлРезюме = Ответ.Ответ.ЗначениеФайл
        когда ПредопределенныеВопросыАнкеты.ИД_ВОПРОСА_ЗАРПЛАТА
            ЗарплатныеОжидания.СуммаОт = Ответ.Ответ.ЗначениеЧисло
            ЗарплатныеОжидания.СуммаДо = Ответ.Ответ.ЗначениеЧисло
        когда ПредопределенныеВопросыАнкеты.ИД_ВОПРОСА_ВАЛЮТА
            ЗарплатныеОжидания.Валюта = Валюты.ПолучитьСсылку(Ответ.Ответ.ЗначенияПредопределенные[0].Ид)
        когда ПредопределенныеВопросыАнкеты.ИД_ВОПРОСА_О_СЕБЕ
            ДанныеДляОтклика.ОСебе = Ответ.Ответ.ЗначениеСтрока
        ;
    ;
    ДанныеДляОтклика.ЗарплатныеОжидания = ЗарплатныеОжидания
    
    возврат ДанныеДляОтклика
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод АутентифицированныйПользователь(): Булево
    возврат Пользователи.ТекущийПользователь != Неопределено
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЕстьОткликПоВакансии(Вакансия: Вакансии.Ссылка): Булево
    если не АутентифицированныйПользователь()
        возврат Ложь
    ; 
    
    возврат ОткликиКандидатов.КандидатОткликалсяПоВакансии(
        Пользователи.ТекущийПользователь,
        Вакансия       
    )      
;

@ВПроекте
@НаСервере
метод ПользователиФизическихЛиц(ФизическиеЛица: ЧитаемоеМножество<ФизическиеЛица.Ссылка>): ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, Пользователи.Ссылка?>
    исп Результат = Запрос{
        ВЫБРАТЬ
            ФизическиеЛицаКандидатов.ФизическоеЛицо КАК ФизическоеЛицо,
            ФизическиеЛицаКандидатов.Кандидат КАК Кандидат
        ПОМЕСТИТЬ КандидатыФизическихЛиц
        ИЗ
            ФизическиеЛицаКандидатов КАК ФизическиеЛицаКандидатов
            
        ГДЕ
           ФизическиеЛицаКандидатов.ФизическоеЛицо В (%ФизическиеЛица)
        ;
        ВЫБРАТЬ
            КандидатыФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
            ПользователиКандидаты.Пользователь.ЗаменитьNull(Неопределено) КАК Пользователь
        ИЗ
            КандидатыФизическихЛиц КАК КандидатыФизическихЛиц
            ЛЕВОЕ СОЕДИНЕНИЕ
                ПользователиКандидаты КАК ПользователиКандидаты
                    ПО КандидатыФизическихЛиц.Кандидат == ПользователиКандидаты.Кандидат
        ГДЕ
            ПользователиКандидаты.Пользователь != Неопределено
        
    }.Выполнить()
    возврат Результат.ВСоответствие(Элемент-> Элемент.ФизическоеЛицо!, Элемент -> Элемент.Пользователь)
;

@ВПроекте
@НаСервере
метод ДанныеДляОформления(): ВитринаВакансий.ДанныеДляОформления
    
    исп КонтекстДоступа.Привилегированный()
    знч ОписаниеРаботодателя = ОписаниеРаботодателя.Получить().ЗагрузитьОбъект()!      
    знч НастройкаВитриныВакансий = НастройкиВитриныВакансий.Получить().ЗагрузитьОбъект()!
    
    пер ФоновоеИзображение: ДвоичныйОбъект.Ссылка?
    если НастройкаВитриныВакансий.ФоновоеИзображение != Неопределено
        ФоновоеИзображение = Файлы.ДвоичныеДанныеФайла(НастройкаВитриныВакансий.ФоновоеИзображение).Ссылка
    ;
    
    пер Логотип: ДвоичныйОбъект.Ссылка?
    если ОписаниеРаботодателя.Логотип != Неопределено
        Логотип = Файлы.ДвоичныеДанныеФайла(ОписаниеРаботодателя.Логотип).Ссылка
    ; 
    
    знч ДанныеДляОформления = новый ВитринаВакансий.ДанныеДляОформления(
        ФоновоеИзображение = ФоновоеИзображение,
        Логотип = Логотип,
        Заголовок = ОписаниеРаботодателя.Наименование,
        Описание = ОписаниеРаботодателя.Описание,
        Локация = ОписаниеРаботодателя.Локация,
        СайтКомпании = ОписаниеРаботодателя.СайтКомпании)
    возврат ДанныеДляОформления    
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод РассматриваемыеКандидатыСОфферами(): Массив<РассматриваемыеКандидаты.Ссылка>  
    исп КонтекстДоступа.Привилегированный()
    знч Кандидат = ПользователиКандидаты.КандидатПользователя()
    если Кандидат != Неопределено
        знч РассматриваемыеКандидаты = Кандидаты.РассматриваемыеКандидаты(Кандидат)
        знч Запрос = Запрос{
            Выбрать Различные
                Офферы.РассматриваемыйКандидат Как РассматриваемыйКандидат
            Из
                Офферы Как Офферы
                Соединение СтатусыОффера.СрезПоследних Как СтатусыОффера
                    По Офферы.Ссылка == СтатусыОффера.Оффер
            Где
                Офферы.РассматриваемыйКандидат В(%РассматриваемыеКандидаты)
                И СтатусыОффера.Статус В(%{[СтатусОффера.ОтправленКандидату, СтатусОффера.Принят]})
        }
        
        исп Результат = Запрос.Выполнить()
        знч КандидатыСОфферами: Массив<РассматриваемыеКандидаты.Ссылка>
        для Элемент из Результат
            КандидатыСОфферами.Добавить(Элемент.РассматриваемыйКандидат)
        ;
        возврат КандидатыСОфферами
    ;
    возврат []
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод РеспондентыТекущегоПользователя(): Массив<РеспондентАнкетирования.Ссылка>
    исп Привилегированный = КонтекстДоступа.Привилегированный()
    знч ТекущийПользователь = Пользователи.ТекущийПользователь
    знч РеспондентыКандидаты = РеспондентыКандидаты(ТекущийПользователь)
    знч Респонденты = новый Массив<РеспондентАнкетирования.Ссылка>()
    
    Респонденты.ДобавитьВсе(РеспондентыОтклики(ТекущийПользователь))
    Респонденты.ДобавитьВсе(РеспондентыКандидаты)
    Респонденты.ДобавитьВсе(РеспондентыРассматриваемыеКандидаты(РеспондентыКандидаты))
    
    Привилегированный.Закрыть()
    возврат Респонденты
;

@НаСервере
метод РеспондентыКандидаты(ТекущийПользователь: Пользователи.Ссылка): Массив<Кандидаты.Ссылка> 
    знч Запрос = Запрос{
        выбрать 
            Кандидат как Респондент
        из
            ПользователиКандидаты как ПользователиКандидаты
        где
            ПользователиКандидаты.Пользователь == %ТекущийПользователь
            и  ПользователиКандидаты.Кандидат != Неопределено
    }
    
    исп Результат = Запрос.Выполнить()
    знч Респонденты = новый Массив<Кандидаты.Ссылка>()
    для Элемент из Результат
        Респонденты.Добавить(Элемент.Респондент)
    ;
    возврат Респонденты
;

@НаСервере
метод РеспондентыРассматриваемыеКандидаты(Кандидаты: Массив<Кандидаты.Ссылка>): Массив<РассматриваемыеКандидаты.Ссылка> 
    знч Запрос = Запрос{
        выбрать 
            Ссылка как Респондент
        из
            РассматриваемыеКандидаты как РассматриваемыеКандидаты
        где
            РассматриваемыеКандидаты.Кандидат В (%Кандидаты)
    }
    
    исп Результат = Запрос.Выполнить()
    возврат Результат.Преобразовать(Элемент -> Элемент.Респондент)
;

@НаСервере
метод РеспондентыОтклики(ТекущийПользователь: Пользователи.Ссылка): Массив<Отклики.Ссылка> 
    знч Запрос = Запрос{
        выбрать
            ОткликиКандидатов.Отклик как Респондент
        из
            ОткликиКандидатов как ОткликиКандидатов
        где
            ОткликиКандидатов.Кандидат == %ТекущийПользователь
    }
    
    исп Результат = Запрос.Выполнить()
    знч Респонденты = новый Массив<Отклики.Ссылка>()
    для Элемент из Результат
        Респонденты.Добавить(Элемент.Респондент)
    ;
    возврат Респонденты
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ЕстьАнкетыКандидата(): Булево
    знч РеспондентыКандидаты = РеспондентыТекущегоПользователя() 
    знч Запрос = Запрос{
        Выбрать Первые 1
            Истина КАК ЕстьАнкеты
        Из 
            Анкеты 
        Где 
            Респондент В (%РеспондентыКандидаты)}
    исп РезультатЗапроса = Запрос.Выполнить()
    возврат РезультатЗапроса.ЕдинственныйИлиУмолчание()?.ЕстьАнкеты ?? Ложь
;

// Область СозданиеКабинетаКандидата

@ВПодсистеме
@НаСервере @НаКлиенте
перечисление ВариантЛогина
    ПоТелефону, 
    ПоЭлектроннойПочте    
;

@ВПодсистеме
@НаСервере @НаКлиенте
метод Логин(ЭлектроннаяПочта: Строка, Телефон: Строка): Строка
    выбор ВариантЛогина(ЭлектроннаяПочта, Телефон)
    когда ПоЭлектроннойПочте
        возврат ЭлектроннаяПочта.Удалить("+")
    когда ПоТелефону
        возврат Телефон.Удалить("+")
    ;  
;

@ВПодсистеме
@НаСервере @НаКлиенте
метод ВариантЛогина(ЭлектроннаяПочта: Строка, Телефон: Строка): ВариантЛогина
    возврат не ЭлектроннаяПочта.Пусто() ? ВариантЛогина.ПоЭлектроннойПочте : ВариантЛогина.ПоТелефону    
;

@ВПодсистеме
@НаСервере 
метод ПодготовитьКабинетКандидату(Кандидат: Кандидаты.Ссылка, Телефоны: Массив<Строка>, ПочтовыеАдреса: Массив<Строка>)
    
    исп КонтекстДоступа.Привилегированный()
    
    знч ПользовательКандидата = ПользовательКандидата(Телефоны, ПочтовыеАдреса)
    
    если ПользовательКандидата == Неопределено
        СоздатьКабинет(Кандидат, Телефоны, ПочтовыеАдреса)
    иначе
        ПользователиКандидаты.ПривязатьКандидатаКПользователю(ПользовательКандидата, Кандидат)
    ;
    
;

@ВПодсистеме
@НаСервере
метод ОтсутствуетКабинетКандидата(Кандидат: Кандидаты.Ссылка): Булево
    исп КонтекстДоступа.Привилегированный()
    возврат ПользователиКандидаты.ПользовательПоКандидату(Кандидат) == Неопределено
;

@НаСервере
метод ПользовательКандидата(Телефоны: Массив<Строка>, ПочтовыеАдреса: Массив<Строка>): Пользователи.Ссылка?
    
    пер ПользовательКандидата: Пользователи.Ссылка?
    
    знч ПользователиПоИдентификаторам = ПользователиСистемы.ПользователиПоИдентификаторам()
    знч ИспользованныеТелефоны = ПользователиСистемы.ИспользованныеТелефоны(ПользователиПоИдентификаторам)
    знч ИспользованныеЭлектронныеПочты = ПользователиСистемы.ИспользованныеАдресаЭлектроннойПочты(ПользователиПоИдентификаторам)
    
    если не Телефоны.Пусто()
        для СтрокаТелефон из Телефоны
            если не СтрокаТелефон.Пусто() и ИспользованныеТелефоны.СодержитКлюч(СтрокаТелефон)
                для ПользовательПоИдентификатору из ПользователиПоИдентификаторам 
                    если ПользовательПоИдентификатору.Значение.Телефон == СтрокаТелефон
                        ПользовательКандидата = Пользователи.Найти(ПользовательПоИдентификатору.Ключ)
                        возврат ПользовательКандидата    
                    ;   
                ;
            ;    
        ;
    ;
    
    если не ПочтовыеАдреса.Пусто()
        для СтрокаПочта из ПочтовыеАдреса
            если не СтрокаПочта.Пусто() и ИспользованныеЭлектронныеПочты.СодержитКлюч(СтрокаПочта)
                для ПользовательПоИдентификатору из ПользователиПоИдентификаторам 
                    если ПользовательПоИдентификатору.Значение.ЭлектроннаяПочта == СтрокаПочта
                        ПользовательКандидата = Пользователи.Найти(ПользовательПоИдентификатору.Ключ)
                        возврат ПользовательКандидата   
                    ;   
                ;
            ;    
        ;
    ;
    
    возврат Неопределено
;

@НаСервере
метод СоздатьКабинет(Кандидат:Кандидаты.Ссылка, Телефоны: Массив<Строка>, ПочтовыеАдреса: Массив<Строка>)
    знч Почта = ПочтовыеАдреса.Пусто() ? "" : ПочтовыеАдреса[0]
    знч Телефон = Телефоны.Пусто() ? "" : Телефоны[0]
    знч Логин = Логин(Почта, Телефон)
    пер АдресПриложения = "%{СтандартноеПриложение.НастройкиПриложения().АдресПриложения}/?login_hint=%Логин"
    знч ДанныеСозданияПользователя = новый ДанныеСозданияПользователя(
        Логин = Логин,
        Телефон = Телефон,
        ЭлектроннаяПочта = Почта
    )
    СоздатьКабинетКандидата(
        ДанныеСозданияПользователя,
        АдресПриложения,
        Кандидат)
;

@ВПодсистеме
@НаСервере 
метод ПодготовитьКабинетыКандидатам(Кандидаты: ЧитаемыйМассив<Кандидаты.Ссылка>)
    
    исп КонтекстДоступа = КонтекстДоступа.Привилегированный()
    
    знч КонтактыКандидатов = ЛичныеКонтакты.ПолучитьКонтакты(Кандидаты)
    знч ПользователиПоИдентификаторам = ПользователиСистемы.ПользователиПоИдентификаторам()
    знч ИспользованныеТелефоны = ПользователиСистемы.ИспользованныеТелефоны(ПользователиПоИдентификаторам)
    знч ИспользованныеЭлектронныеПочты = ПользователиСистемы.ИспользованныеАдресаЭлектроннойПочты(ПользователиПоИдентификаторам)
    
    КонтекстДоступа.Закрыть()
    
    для Кандидат из Кандидаты
        знч КонтактыКандидатаСсылка = КонтактыКандидатов[Кандидат]
        если КонтактыКандидатаСсылка == Неопределено
            НеобработанныеКандидаты.Добавить(Кандидат)
            продолжить
        ;
        
        знч КонтактыКандидата = КонтактыКандидатаСсылка.ЗагрузитьОбъект()
        пер Телефон: Строка
        пер ЭлектроннаяПочта: Строка
        пер ПользовательКандидата: Пользователи.Ссылка?
        если не КонтактыКандидата.МобильныйТелефон.Пусто()
            для СтрокаТелефон из КонтактыКандидата.МобильныйТелефон
                Телефон = СтрокаТелефон.Данные
                если не Телефон.Пусто() и ИспользованныеТелефоны.СодержитКлюч(Телефон)
                    для ПользовательПоИдентификатору из ПользователиПоИдентификаторам 
                        если ПользовательПоИдентификатору.Значение.Телефон == Телефон
                            ПользовательКандидата = Пользователи.Найти(ПользовательПоИдентификатору.Ключ)
                            прервать    
                        ;   
                    ;
                ;    
            ;
        ;
        
        если не КонтактыКандидата.ЭлектроннаяПочта.Пусто() и ПользовательКандидата == Неопределено
            для СтрокаЭлектроннаяПочта из КонтактыКандидата.ЭлектроннаяПочта
                ЭлектроннаяПочта = СтрокаЭлектроннаяПочта.Данные
                если не ЭлектроннаяПочта.Пусто() и ИспользованныеЭлектронныеПочты.СодержитКлюч(ЭлектроннаяПочта)
                    для ПользовательПоИдентификатору из ПользователиПоИдентификаторам
                        если ПользовательПоИдентификатору.Значение.ЭлектроннаяПочта == ЭлектроннаяПочта
                            ПользовательКандидата = Пользователи.Найти(ПользовательПоИдентификатору.Ключ)
                            прервать    
                        ;    
                    ;
                ;    
            ;
        ;
        
        если ПользовательКандидата == Неопределено
            знч Логин = Логин(ЭлектроннаяПочта, Телефон)
            пер АдресПриложения = "%{СтандартноеПриложение.НастройкиПриложения().АдресПриложения}/?login_hint=%Логин"
            знч ДанныеСозданияПользователя = новый ДанныеСозданияПользователя(
                Логин = Логин,
                Телефон = Телефон,
                ЭлектроннаяПочта = ЭлектроннаяПочта
            )
            СоздатьКабинетКандидата(
                ДанныеСозданияПользователя,
                АдресПриложения,
                Кандидат)
        иначе
            ПользователиКандидаты.ПривязатьКандидатаКПользователю(ПользовательКандидата, Кандидат)    
        ;
        
        НеобработанныеКандидаты.Удалить(Кандидат)
    ;
;

@НаСервере
структура СтрокиУведомления
    пер Смс: Строка
    пер Тема: Строка
    пер Текст: Строка
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод СоздатьКабинетКандидата(Данные: ДанныеСозданияПользователя, АдресПриложения: Строка, Кандидат: Кандидаты.Ссылка? = Неопределено, Вакансия: Вакансии.Ссылка? = Неопределено)
       
    исп Транзакция = Транзакции.Начать()
    исп КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч ВедетсяСборСогласий = НастройкиПерсональныхДанных.ВедетсяСборСогласий()
    пер НаправлятьУведомление: Булево
    попытка 
        пер СвойстваПользователя: КонтрольДоступа.СвойстваПользователя
        СвойстваПользователя.Представление = Данные.Логин
        СвойстваПользователя.ЛогинПользователя = Данные.Логин
        СвойстваПользователя.Телефон = Данные.Телефон
        СвойстваПользователя.ЭлектроннаяПочта = Данные.ЭлектроннаяПочта
        знч Пользователь = ПользователиСистемы.СоздатьПользователяБезПроверкиПравАдминистратора(СвойстваПользователя).Ссылка
        
        если Кандидат == Неопределено
            ПользователиКандидаты.ДобавитьПользователяКандидата(Пользователь, Вакансия)
            знч ИдПользователяСистемы = ПользователиСистемы.ИдПользователяСистемы(Пользователь)
            если ВедетсяСборСогласий
                СогласияНаОбработкуПдн.СформироватьСогласиеЕслиНеСоздано(Субъект = Неопределено, ИдПользователя = ИдПользователяСистемы, ПодписатьСразу = Истина)
            ;
        иначе
            знч Источник = МенеджерСущности.ЗначениеРеквизитаОбъекта(Кандидат, "Источник")
            НаправлятьУведомление = Источник != ИсточникиКандидатов.ВитринаВакансий
            ПользователиКандидаты.ПривязатьКандидатаКПользователю(Пользователь, Кандидат)
        ;
        
        Транзакция.Фиксировать()
    
    поймать Ошибка: Исключение
        Транзакция.Откатить()
        Журналирование.ЗарегистрироватьОшибку(Ошибка)
    ;
    
    знч ИменаРесурсов = [
                        ПРИГЛАШЕНИЕ_КАНДИДАТА_ТЕКСТ_SMS,
                        ПРИГЛАШЕНИЕ_КАНДИДАТА_ТЕМА_ПИСЬМА,
                        ПРИГЛАШЕНИЕ_КАНДИДАТА_ТЕКСТ_ПИСЬМА,
                        СФОРМИРОВАНО_СОГЛАСИЕ_ТЕМА_ПИСЬМА,
                        СФОРМИРОВАНО_СОГЛАСИЕ_ТЕКСТ_ПИСЬМА]
    знч ЗначенияРесурсов = УниверсальныеМеханизмы.ЗначенияРесурсовПодсистемы(
                            ГРУППА_РЕСУРСОВ_ЛК_КАНДИДАТОВ, 
                            ИменаРесурсов)
    
    знч СтроковыеРесурсыУведомления: СтрокиУведомления
    
    если ВедетсяСборСогласий
        СтроковыеРесурсыУведомления.Смс = ЗначенияРесурсов[ПРИГЛАШЕНИЕ_КАНДИДАТА_ТЕКСТ_SMS]
        СтроковыеРесурсыУведомления.Тема = ЗначенияРесурсов[СФОРМИРОВАНО_СОГЛАСИЕ_ТЕМА_ПИСЬМА]
        СтроковыеРесурсыУведомления.Текст = ЗначенияРесурсов[СФОРМИРОВАНО_СОГЛАСИЕ_ТЕКСТ_ПИСЬМА]
    иначе
        СтроковыеРесурсыУведомления.Смс = ЗначенияРесурсов[ПРИГЛАШЕНИЕ_КАНДИДАТА_ТЕКСТ_SMS]
        СтроковыеРесурсыУведомления.Тема = ЗначенияРесурсов[ПРИГЛАШЕНИЕ_КАНДИДАТА_ТЕМА_ПИСЬМА]
        СтроковыеРесурсыУведомления.Текст = ЗначенияРесурсов[ПРИГЛАШЕНИЕ_КАНДИДАТА_ТЕКСТ_ПИСЬМА]
    ;
    
    СтроковыеРесурсыУведомления.Смс = СтроковыеРесурсыУведомления.Смс.Заменить("АдресПриложения", АдресПриложения)
    СтроковыеРесурсыУведомления.Текст = СтроковыеРесурсыУведомления.Текст.Заменить("АдресПриложения", АдресПриложения)
    
    знч ОписаниеРаботодателя = ОписаниеРаботодателя.Получить().ЗагрузитьОбъект()
    пер НаименованиеКомпании = "HR отдела"
    если ОписаниеРаботодателя != Неопределено
       НаименованиеКомпании = ОписаниеРаботодателя.Наименование.Пусто() ? НаименованиеКомпании : ОписаниеРаботодателя.Наименование
    ;
    
    СтроковыеРесурсыУведомления.Текст = СтроковыеРесурсыУведомления.Текст.Заменить("НаименованиеКомпании", НаименованиеКомпании)
    
    если НаправлятьУведомление
        если не Данные.ЭлектроннаяПочта.Пусто() 
            пер Результат = Уведомления.ОтправитьEMail(
                Данные.Логин,
                Данные.ЭлектроннаяПочта,
                СтроковыеРесурсыУведомления.Тема,
                СтроковыеРесурсыУведомления.Текст)
            если Результат.Статус == Уведомления.СтатусыОтправкиСообщений.ОшибкаОтправки
                Журналирование.ЗарегистрироватьОшибку("ОшибкаОтправкиУведомления", Результат.ПредставлениеРезультата, Неопределено, ВажностьСобытияЖурналаСобытий.Высокая)
            ;
        ;
    ;
    
    КонтекстДоступа.Закрыть()
;

// Конец СозданиеКабинетаКандидата

@НаСервере
структура КонтактныеДанныеКандидата
    обз знч Логин : Строка
    обз знч АдресПриложения: Строка
    обз знч Телефон: Строка
    обз знч Почта: Строка
;

@ВПодсистеме
@НаСервере
метод КонтактыКандидата(Объект: Кандидаты.Ссылка): КонтактыКандидата
    
    исп КонтекстДоступа.Привилегированный()
    знч КонтактыКандидата: КонтактыКандидата
    КонтактыКандидата.Кандидат = Объект
    
    знч ЛичныеКонтактыКандидата = ЛичныеКонтакты.ПолучитьКонтакты(Объект)
    если ЛичныеКонтактыКандидата == Неопределено
        возврат КонтактыКандидата
    ;
    
    знч КонтактыКандидатаОбъект = ЛичныеКонтактыКандидата.ЗагрузитьОбъект()
    знч ТелефоныКандидата = КонтактыКандидатаОбъект.МобильныйТелефон
    знч ПочтовыеАдресаКандидата = КонтактыКандидатаОбъект.ЭлектроннаяПочта
    
    КонтактыКандидата.Телефоны = ТелефоныКандидата.Преобразовать(Элемент-> Элемент.Данные)
    КонтактыКандидата.ПочтовыеАдреса = ПочтовыеАдресаКандидата.Преобразовать(Элемент-> Элемент.Данные)
    
    возврат КонтактыКандидата
;

@НаСервере
структура КонтактыКандидата
    пер Кандидат: Кандидаты.Ссылка?
    пер Телефоны: Массив<Строка>
    пер ПочтовыеАдреса: Массив<Строка>
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СформироватьУведомлениеОПодписанииСогласия(Субъект: Кандидаты.Ссылка)

    исп КонтекстДоступа.Привилегированный()
    знч КонтактыКандидата = КонтактыКандидата(Субъект)
    
    знч Почта = КонтактыКандидата.ПочтовыеАдреса.Пусто() ? "" : КонтактыКандидата.ПочтовыеАдреса[0]
    знч Телефон = КонтактыКандидата.Телефоны.Пусто() ? "" : КонтактыКандидата.Телефоны[0]
    знч Логин = Логин(Почта, Телефон)
    
    знч ОписаниеРаботодателя = ОписаниеРаботодателя.Получить().ЗагрузитьОбъект()
    пер НаименованиеКомпании = "HR отдела"
    если ОписаниеРаботодателя != Неопределено
       НаименованиеКомпании = ОписаниеРаботодателя.Наименование.Пусто() ? НаименованиеКомпании : ОписаниеРаботодателя.Наименование
    ;
    
    если не Почта.Пусто()
        знч ЗначенияРесурсов = УниверсальныеМеханизмы.ЗначенияРесурсовПодсистемы(
                    ГРУППА_РЕСУРСОВ_ЛК_КАНДИДАТОВ, 
                    [ПОДПИСАНО_СОГЛАСИЕ_ТЕКСТ_ПИСЬМА,
                    ПОДПИСАНО_СОГЛАСИЕ_ТЕМА_ПИСЬМА]
            )
            знч ТемаПисьмаПодписаноСогласие = ЗначенияРесурсов[ПОДПИСАНО_СОГЛАСИЕ_ТЕМА_ПИСЬМА]
            знч ТекстПисьмаПодписаноСогласие = ЗначенияРесурсов[ПОДПИСАНО_СОГЛАСИЕ_ТЕКСТ_ПИСЬМА]

            пер Результат = Уведомления.ОтправитьEMail(
                Логин,
                Почта,
                ТемаПисьмаПодписаноСогласие,
                ТекстПисьмаПодписаноСогласие.Заменить("НаименованиеКомпании", НаименованиеКомпании)
            )
            если Результат.Статус == Уведомления.СтатусыОтправкиСообщений.ОшибкаОтправки
                Журналирование.ЗарегистрироватьОшибку("ОшибкаОтправкиУведомления", Результат.ПредставлениеРезультата, Неопределено, ВажностьСобытияЖурналаСобытий.Высокая)
            ;   
    ;

;

@НаСервере
метод КонтактныеДанныеКандидата(Кандидат: Кандидаты.Ссылка): КонтактныеДанныеКандидата?
    знч ПользовательКандидата = ПользователиКандидаты.ПользовательПоКандидату(Кандидат)
    если ПользовательКандидата == Неопределено
        Журналирование.ЗарегистрироватьОшибку("ОшибкаОтправкиУведомления", "Для кандидата не сформирован пользователь системы", Неопределено, ВажностьСобытияЖурналаСобытий.Высокая)
        возврат Неопределено
    ;
    
    знч СвойстваПользователя = ПользователиСистемы.СвойстваПользователя(ПользовательКандидата)
    знч Логин = СвойстваПользователя.ЛогинПользователя
    пер АдресПриложения = "%{СтандартноеПриложение.НастройкиПриложения().АдресПриложения}/?login_hint=%Логин"
    
    возврат новый КонтактныеДанныеКандидата(
        Логин,
        АдресПриложения,
        СвойстваПользователя.Телефон ?? "",
        СвойстваПользователя.ЭлектроннаяПочта ?? ""
    )
;

// Область ПараметрыСеанса

@ВПодсистеме
конст КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: Строка = "ЛичныеКабинетыКандидатов"

@ВПроекте
структура ПараметрыСеанса
    пер ЛичныйКабинетКандидата: Булево
    пер Кандидат: Кандидаты.Ссылка?
    пер ЗаполненоРезюме: Булево
    пер ЕстьОфферы: Булево
    пер ЕстьАнкеты: Булево
    пер ПолученоСогласие: Булево
    пер ШаблонАнкеты: ШаблоныАнкет.Ссылка?
;

@ВПроекте
@НаКлиенте
метод ПараметрыСеанса(): ПараметрыСеанса
    возврат ПараметрыСеансаСервис.ПолучитьСервис().ПараметрПоКлючу(КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА) как ПараметрыСеанса
;

// Конец ПараметрыСеанса

// Область СтроковыеРесурсы

@ВПроекте конст ГРУППА_РЕСУРСОВ_ЛК_КАНДИДАТОВ = "ЛичныеКабинетыКандидатов"

@ВПроекте конст ПРИГЛАШЕНИЕ_КАНДИДАТА_ТЕКСТ_ПИСЬМА = "ПриглашениеКандидатаТекстПисьма"
@ВПроекте конст ПРИГЛАШЕНИЕ_КАНДИДАТА_ТЕМА_ПИСЬМА = "ПриглашениеКандидатаТемаПисьма"
@ВПроекте конст ПРИГЛАШЕНИЕ_КАНДИДАТА_ТЕКСТ_SMS = "ПриглашениеКандидатаТекстSms"

@ВПроекте конст СФОРМИРОВАНО_СОГЛАСИЕ_ТЕКСТ_ПИСЬМА = "СформированоСогласиеТекстПисьма"
@ВПроекте конст СФОРМИРОВАНО_СОГЛАСИЕ_ТЕМА_ПИСЬМА = "СформированоСогласиеТемаПисьма"

@ВПроекте конст ПОДПИСАНО_СОГЛАСИЕ_ТЕКСТ_ПИСЬМА = "ПодписаноСогласиеТекстПисьма"
@ВПроекте конст ПОДПИСАНО_СОГЛАСИЕ_ТЕМА_ПИСЬМА = "ПодписаноСогласиеТемаПисьма"

@ВПроекте
@НаСервере
метод ОбновитьСтроковыеРесурсы()
    ПриглашениеКандидатаВКабинет()
    СформированоСогласиеНаОбработкуДанных()
    ПодписаноСогласиеНаОбработкуДанных()
;

@НаСервере
метод ПриглашениеКандидатаВКабинет()
    знч ПриглашениеТекстПисьма = Ресурс{ШаблоныУведомлений/ПриглашениеВКабинетТекст.html}.ОткрытьПотокЧтения().ПрочитатьКакСтроку()
    знч ПриглашениеТекстСмс = Ресурс{ШаблоныУведомлений/ПриглашениеВКабинетТекстСмс.txt}.ОткрытьПотокЧтения().ПрочитатьКакСтроку()
    
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(
        ГРУППА_РЕСУРСОВ_ЛК_КАНДИДАТОВ,
        ПРИГЛАШЕНИЕ_КАНДИДАТА_ТЕМА_ПИСЬМА,
        "Текст письма кандидату о создании кабинета",
        "Ваше резюме привлекло наше внимание"
    )
    
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(
        ГРУППА_РЕСУРСОВ_ЛК_КАНДИДАТОВ,
        ПРИГЛАШЕНИЕ_КАНДИДАТА_ТЕКСТ_SMS,
        "Приглашение кандидата в личный кабинет кандидата (Sms)",
        ПриглашениеТекстСмс,
        70
    )
    
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(
        ГРУППА_РЕСУРСОВ_ЛК_КАНДИДАТОВ,
        ПРИГЛАШЕНИЕ_КАНДИДАТА_ТЕКСТ_ПИСЬМА,
        "Приглашение кандидата в личный кабинет кандидата (Текст письма)",
        ПриглашениеТекстПисьма
    )
;

@НаСервере
метод СформированоСогласиеНаОбработкуДанных()
    
    знч СогласиеТекстПисьма = Ресурс{ШаблоныУведомлений/ПриглашениеВКабинетССогласиемТекст.html}.ОткрытьПотокЧтения().ПрочитатьКакСтроку()
    
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(
        ГРУППА_РЕСУРСОВ_ЛК_КАНДИДАТОВ,
        СФОРМИРОВАНО_СОГЛАСИЕ_ТЕМА_ПИСЬМА,
        "Текст письма кандидату о необходимости подписать согласие",
        "Ваше резюме привлекло наше внимание"
    )
    
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(
        ГРУППА_РЕСУРСОВ_ЛК_КАНДИДАТОВ,
        СФОРМИРОВАНО_СОГЛАСИЕ_ТЕКСТ_ПИСЬМА,
        "Текст письма кандидату о необходимости подписать согласие",
        СогласиеТекстПисьма
    )

;

@НаСервере
метод ПодписаноСогласиеНаОбработкуДанных()
    
    знч СогласиеПодписаноТекстПисьма = Ресурс{ШаблоныУведомлений/СогласиеПодписаноТекст.html}.ОткрытьПотокЧтения().ПрочитатьКакСтроку()
    
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(
        ГРУППА_РЕСУРСОВ_ЛК_КАНДИДАТОВ,
        ПОДПИСАНО_СОГЛАСИЕ_ТЕМА_ПИСЬМА,
        "Тема письма о подписанном согласии",
        "Согласие подписано"
    )
    
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(
        ГРУППА_РЕСУРСОВ_ЛК_КАНДИДАТОВ,
        ПОДПИСАНО_СОГЛАСИЕ_ТЕКСТ_ПИСЬМА,
        "Текст письма кандидату о подписанном согласии",
        СогласиеПодписаноТекстПисьма
    )
;

@ВПодсистеме
@НаСервере
метод ИнициализироватьНастройкиВитриныВакансий()
    исп Транзакции.Начать()
    знч НастройкаВитриныВакансий = НастройкиВитриныВакансий.Получить().ЗагрузитьОбъект()
    если НастройкаВитриныВакансий == Неопределено
        возврат    
    ;
    знч Запрос = Запрос{
        Выбрать Первые 1
            Ссылка 
        Из
            ОписаниеРаботодателя
    }
    знч ОписаниеРаботодателяСсылка = Запрос.Выполнить().ЕдинственныйИлиУмолчание()?.Ссылка
    если ОписаниеРаботодателяСсылка == Неопределено
        возврат
    ;
    знч ОписаниеРаботодателя = ОписаниеРаботодателяСсылка!.ЗагрузитьОбъект()
    если ОписаниеРаботодателя == Неопределено
        возврат
    ;
    если ОписаниеРаботодателя!.ФоновоеИзображениеУстарело == Неопределено
        возврат    
    ;
    если ОписаниеРаботодателя!.ФоновоеИзображениеУстарело!.ЗагрузитьОбъект() == Неопределено
        возврат
    ;
    НастройкаВитриныВакансий!.ФоновоеИзображение = Файлы.СкопироватьФайл(ОписаниеРаботодателя!.ФоновоеИзображениеУстарело!, НастройкаВитриныВакансий!.Ссылка)
    НастройкаВитриныВакансий!.Записать()
    Файлы.УдалитьФайл(ОписаниеРаботодателя!.ФоновоеИзображениеУстарело!)
    ОписаниеРаботодателя!.ФоновоеИзображениеУстарело = Неопределено
    ОписаниеРаботодателя!.Записать()
;

@ВПодсистеме
@НаСервере
метод СогласиеПолучено(Пользователь: Пользователи.Ссылка): Булево
    
    знч Кандидат = ПользователиКандидаты.КандидатПользователя()
    знч ТекущийПользователь = Пользователи.ТекущийПользователь
    знч ИдПользователя = ПользователиСистемы.ИдПользователяСистемы(ТекущийПользователь)
    
    возврат СогласияНаОбработкуПдн.СогласиеПодписано(Кандидат, ИдПользователя)

;

@НаСервере
метод ОткликПользователя(Пользователь: Пользователи.Ссылка): Отклики.Ссылка?
    исп КонтекстДоступа.Привилегированный()
    знч Запрос = Запрос {
        Выбрать Первые 1
        Отклик
        Из ОткликиКандидатов
        Где Кандидат == %Пользователь
    }
    
    исп РезультатЗапроса = Запрос.Выполнить()
    возврат РезультатЗапроса.ЕдинственныйИлиУмолчание()?.Отклик ?? Неопределено
;

@НаСервере
метод СодержимоеПисьмаПриглашения(): Строка
    знч ПисьмоПриглашение =
    "<html lang='ru-RU'>
    <head>
    <meta charset='utf-8'>
    </head>
    <body style='font-family:Arial;background:lightgrey: text-align: center'>
    <div style='min-width: 280px;max-width: 680px; margin: 0 auto'>
    <div style='height: 48px;background:whitesmoke;'>
    <p style='text-align: center;color:darkgray; padding: 16px;'><b>1С:Кабинет сотрудника</b></p>
    </div>
    <div style='background:white; padding: 8px 24px;'>
    <h2>\%ИмяОтчество\%!</h2>
    <p>Для вас создан личный кабинет сотрудника.<br>
    Ваше имя для входа в личный кабинет (логин): <b>\%ЛогинПользователя\%</b></p>
    <p>Чтобы войти в личный кабинет:</p>
    <ul>
    <li>Установите приложение <b>1С:Кабинет сотрудника</b> из Google Play, App Store, RuStore или AppGallery на ваш смартфон или планшет</li>
    </ul>
    <p style='text-align: center'>
    <a style='text-decoration: none' href='https://play.google.com/store/apps/details?id=com.e1c.mobile.ess'>
    <img style='height: 36px' src='\%КартинкаGooglePlay\%'>
    </a>
    &nbsp;&nbsp;
    <a style='text-decoration: none' href='https://apps.apple.com/ru/app/1\%D1\%81-\%D0\%BA\%D0\%B0\%D0\%B1\%D0\%B8\%D0\%BD\%D0\%B5\%D1\%82-\%D1\%81\%D0\%BE\%D1\%82\%D1\%80\%D1\%83\%D0\%B4\%D0\%BD\%D0\%B8\%D0\%BA\%D0\%B0/id1484765318'>
    <img style='height: 36px' src='\%КартинкаAppStore\%'>
    </a>
    &nbsp;&nbsp;
    <a style='text-decoration: none' href='https://www.rustore.ru/catalog/app/com.e1c.mobile.ess'>
    <img style='height: 36px' src='\%КартинкаRuStore\%'>
    </a>
    &nbsp;&nbsp;
    <a style='text-decoration: none' href='https://appgallery.huawei.com/#/app/C107652977'>
    <img style='height: 36px' src='\%КартинкаAppGallery\%'>
    </a></p>
    <ul>
    <li>Запустите приложение</li>
    </ul>
    <p style='text-align: center'>
    <img style='width: 80px' src='\%ЛоготипПриложения\%'></p>
    <ul>
    <li>Введите ключ активации</li>
    </ul>
    <p style='text-align: center; font-size: xx-large;'><b>\%КлючАктивации\%</b></p>
    <ul>
    <li>...или активируйте приложение при  помощи QR-кода</li>
    </ul>
    <p style='text-align: center'>
    <img style='height: 200px' src='\%QRКодАктивации\%'></p>
    </div>
    <div style='background:whitesmoke; padding: 8px 24px;'>
    <div style='float: left; width: 7%;'>
    <p><b>PS</b></p>
    </div>
    <div style='margin-left: 7%;'>
    <p style='font-size: small;'>Если Вы не хотите или не можете установить приложение на свое устройство, войдите в свой личный кабинет через браузер.</p>
    </div>
    <p style='text-align: center;' >
    <a style='text-decoration: none' href='\%СсылкаСЛогином\%'><b>ОТКРЫТЬ В БРАУЗЕРЕ</b></a></p>
    </div>
    </div>
    </body>
    </html>"
    
    возврат ПисьмоПриглашение
;

// Конец СтроковыеРесурсы

// Область КонтрольДоступа

конст ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ОТКЛИКОВ_КАНДИДАТА = "РедактированиеОткликовКандидата"
конст ПОЛНОМОЧИЕ_ЧТЕНИЕ_ОТКЛИКОВ_КАНДИДАТА = "ЧтениеОткликовКандидата"
конст ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ДАННЫХ_КАНДИДАТА = "РедактированиеДанныхКандидата"
конст ПОЛНОМОЧИЕ_ЧТЕНИЕ_ДАННЫХ_КАНДИДАТА = "ЧтениеДанныхКандидата"

@ВПроекте
@НаСервере
метод ПолномочиеРедактированиеОткликовКандидата(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ОТКЛИКОВ_КАНДИДАТА)
;

@ВПроекте
@НаСервере
метод ПолномочиеЧтениеОткликовКандидата(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_ЧТЕНИЕ_ОТКЛИКОВ_КАНДИДАТА)
;

@ВПроекте
@НаСервере
метод ПолномочиеРедактированиеДанныхКандидата(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ДАННЫХ_КАНДИДАТА)
;

@ВПроекте
@НаСервере
метод ПолномочиеЧтениеДанныхКандидата(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_ЧТЕНИЕ_ДАННЫХ_КАНДИДАТА)
;

@ВПодсистеме
@НаСервере
метод ДобавитьПолномочия()
    ДобавитьПолномочиеРедактированиеОткликовКандидата()
    ДобавитьПолномочиеЧтениеОткликовКандидата()
    ДобавитьПолномочиеРедактированиеДанныхКандидата()
    ДобавитьПолномочиеЧтениеДанныхКандидата()
;

@НаСервере
метод ДобавитьПолномочиеРедактированиеОткликовКандидата()
    КонтрольДоступа.ДобавитьПолномочие(
        "Редактирование откликов кандидата",
        ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ОТКЛИКОВ_КАНДИДАТА,
        "")    
;

@НаСервере
метод ДобавитьПолномочиеЧтениеОткликовКандидата()
    КонтрольДоступа.ДобавитьПолномочие(
        "Чтение откликов кандидата",
        ПОЛНОМОЧИЕ_ЧТЕНИЕ_ОТКЛИКОВ_КАНДИДАТА,
        ""
    )    
;

@НаСервере
метод ДобавитьПолномочиеРедактированиеДанныхКандидата()
    КонтрольДоступа.ДобавитьПолномочие(
        "Редактирование данных кандидата",
        ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ДАННЫХ_КАНДИДАТА,
        ""    
    )
;

@НаСервере
метод ДобавитьПолномочиеЧтениеДанныхКандидата()
    КонтрольДоступа.ДобавитьПолномочие(
        "Чтение данных кандидата",
        ПОЛНОМОЧИЕ_ЧТЕНИЕ_ДАННЫХ_КАНДИДАТА,
        ""
    )    
;
// Конец КонтрольДоступа

метод ОтправитПриглашениеКандидату()
;

метод ПараметрыШаблона()
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод РассматриваемыеКандидатыПользователя(): Массив<РассматриваемыеКандидаты.Ссылка>
    исп КонтекстДоступа.Привилегированный()
    знч Результат = новый Массив<РассматриваемыеКандидаты.Ссылка>()
    знч Кандидат = ПользователиКандидаты.КандидатПользователя()
    если Кандидат == Неопределено
        возврат Результат
    ;
    знч Запрос = Запрос{
            ВЫБРАТЬ
                    РассматриваемыеКандидаты.Ссылка
                Из
                    РассматриваемыеКандидаты КАК РассматриваемыеКандидаты
            ГДЕ
                РассматриваемыеКандидаты.Кандидат == %Кандидат
    } 
    для Элемент из Запрос.Выполнить()
        Результат.Добавить(Элемент.Ссылка)
    ;
    возврат Результат
;