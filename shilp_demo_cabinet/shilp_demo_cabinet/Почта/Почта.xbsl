импорт КонтрольДоступа
импорт УниверсальныеМеханизмы

@ВПроекте
конст ИД_ПОДСИСТЕМЫ = "Почта"

@ВПроекте
конст ИД_НАСТРОЙКА_ПОЧТЫ = "НастройкаПочты"

@ВПодсистеме
конст КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА = "ПочтаПараметрыСеанса" 

// КонтрольДоступа
конст ПОЛНОМОЧИЕ_ДОСТУП_К_ПОЧТЕ = "ДоступКПочте"
конст ПОЛНОМОЧИЕ_НАСТРОЙКА_ПОЧТЫ = "НастройкаПочты"

@ВПроекте
@НаСервере
исключение ИсключениеПодключенияКСерверуПочты
    обз пер Протокол: ПротоколыПочты?
;

@ВПроекте
@НаСервере
исключение ИсключениеОтуствуютПравилаФильтрыПочты
;

@ВПроекте
@НаСервере
метод ПолномочиеПочтаДоступна(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_ДОСТУП_К_ПОЧТЕ)
;
     
@ВПроекте
@НаСервере
метод ПолномочиеНастрокиПочтыДоступны(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_НАСТРОЙКА_ПОЧТЫ)
;

@ВПроекте
@НаСервере
метод ЗаполнитьЭлектронныйАдресПочты()
    пер УчетнаяЗапись = УчетныеЗаписиПочты.Подсистема(Почта.ИД_ПОДСИСТЕМЫ)
    если УчетнаяЗапись != Неопределено
        пер УчетнаяЗаписьОбъект = УчетнаяЗапись.ЗагрузитьОбъект()
        если УчетнаяЗаписьОбъект.АдресЭлектроннойПочты.Пусто()
            УчетнаяЗаписьОбъект.АдресЭлектроннойПочты = УчетнаяЗаписьОбъект.УчетнаяЗапись
            УчетнаяЗаписьОбъект.Записать()
        ;
    ;
;

@ВПодсистеме
@НаСервере
метод ДобавитьПолномочия()
    ДобавитьПолномочиеДоступаКПочте()
    ДобавитьПолномочиеДоступаКНастройкамПочты()
;

@НаСервере
метод ДобавитьПолномочиеДоступаКПочте()
    КонтрольДоступа.ДобавитьПолномочие(
        "Работа с почтой",
        ПОЛНОМОЧИЕ_ДОСТУП_К_ПОЧТЕ,
        "Получение доступа к почте")
;
@НаСервере
метод ДобавитьПолномочиеДоступаКНастройкамПочты()
    КонтрольДоступа.ДобавитьПолномочие(
        "Управление почтой (администрирование)",
        ПОЛНОМОЧИЕ_НАСТРОЙКА_ПОЧТЫ,
        "Получение доступа к настройкам почты")
;

// КонтрольДоступа

@ВПроекте
@НаСервере
метод СервисРассылки(Подключение: ПодключениеSmtp): РассылкаПочты
    пер СервисРассылки = новый РассылкаПисемSmtp()
    СервисРассылки.Подключение = Подключение
    возврат СервисРассылки
;

@ВПроекте
@НаСервере
метод СервисСбораПочты(Подключение: ПодключениеПочтовогоСервера): СборПисем
    пер СервисСбораПисем = новый СборПисем()
    СервисСбораПисем.Подключение = Подключение
    возврат СервисСбораПисем
;

@ВПроекте
@НаСервере
метод ОтправитьСообщение(Сообщение: ПочтовоеСообщение, Подключение: ПодключениеПочтовогоСервера): РезультатОтправки
    пер РассылкаПисем = СервисРассылки(Подключение как ПодключениеSmtp)
    если Сообщение.ОтправительПочта.Пусто()
        Сообщение.ОтправительПочта = РассылкаПисем.Подключение.АдресЭлектроннойПочты
    ;
    если Сообщение.ОтправительИмя.Пусто()
        Сообщение.ОтправительИмя = РассылкаПисем.Подключение.Наименование.Пусто() 
                                    ? РассылкаПисем.Подключение.АдресЭлектроннойПочты
                                    : РассылкаПисем.Подключение.Наименование
    ;
    РассылкаПисем.Отправить(Сообщение)
    возврат РассылкаПисем.Результаты.ПервыйИлиУмолчание()!
;

@ВПроекте
@НаСервере
метод ОтправитьСообщение(Сообщение: ПочтовоеСообщение): РезультатОтправки
    пер Подключение = УчетныеЗаписиПочты.ПодключениеПодсистемы(Почта.ИД_ПОДСИСТЕМЫ)
    если Подключение == Неопределено
        возврат новый РезультатОтправки(
            Статус = СтатусыОтправки.ПроверкаНеПройдена,
            Ошибка = ТипыОшибок.ОтсуствуютПараметрыПодключения
        )
    ;   
    возврат ОтправитьСообщение(Сообщение, Подключение)
;

@ВПроекте
@НаСервере
метод ОтправитьПисьмо(Письмо: ЭлектронноеПисьмо.Ссылка, Вложения: Массив<ПрисоединенныйФайл>? = Неопределено): РезультатОтправки
    пер Подключение = УчетныеЗаписиПочты.ПодключениеПодсистемы(Почта.ИД_ПОДСИСТЕМЫ)
    если Подключение == Неопределено
        возврат новый РезультатОтправки(
            Статус = СтатусыОтправки.ПроверкаНеПройдена,
            Ошибка = ТипыОшибок.ОтсуствуютПараметрыПодключения
        )
    ;
    возврат ОтправитьПисьмо(Подключение, Письмо, Вложения)
;

@ВПроекте
@НаСервере
метод ОтправитьПисьмо(Подключение: ПодключениеПочтовогоСервера, Письмо: ЭлектронноеПисьмо.Ссылка, 
        Вложения: Массив<ПрисоединенныйФайл>? = Неопределено): РезультатОтправки

    пер ПисьмоОбъект = Письмо.ЗагрузитьОбъект()
    ПисьмоОбъект.ЕстьВложения = не Вложения.Пусто()
    ПисьмоОбъект.Статус = СтатусыПисьма.Отправляется

    если ПисьмоОбъект.ЕстьВложения
        ПрисоединенныеФайлыМенеджер.Записать(
            новый ПрисоединенныеФайлы(Письмо, Вложения)
        )
    ;
    пер РассылкаПисем = СервисРассылки(Подключение как ПодключениеSmtp)
    РассылкаПисем.Отправить(ПисьмоОбъект)
    
    пер Результат = РассылкаПисем.Результаты[0]
    если Результат.Статус == СтатусыОтправки.Отправлено
        ПисьмоОбъект.ИдСообщения = Результат.ИдСообщения
        ПисьмоОбъект.ДатаОтправки = Результат.ДатаОтправки
        ПисьмоОбъект.Размер = Результат.РазмерПисьма
        ПисьмоОбъект.Статус = СтатусыПисьма.Отправлено
        ПисьмоОбъект.Записать()
    ;
    возврат Результат
;

@ВПроекте
@НаСервере
метод Содержание()
    СборЗаголовковПочты.ЗагрузкаВсехЗаголовков()
;

@ВПроекте
@НаСервере
метод ЗагрузитьВсеЗаголовки()
    СборЗаголовковПочты.ЗагрузкаВсехЗаголовков()
;

@ВПроекте
@НаСервере
метод ЗапуститьСборЗаголовков(Интервал: Число): Строка
    пер ЗаданиеСбораПочты = СборЗаголовковПочты.ЗапуститьПоРасписанию(Интервал)
    если ЗаданиеСбораПочты.Статус != СтатусЗадания.Выполняется
        ЗапланированныеЗадания.Возобновить(СборЗаголовковПочты.КЛЮЧ_ЗАДАНИЕ_СБОР_ПОЧТЫ)
    ;
    возврат СборЗаголовковПочты.КЛЮЧ_ЗАДАНИЕ_СБОР_ПОЧТЫ
;

@ВПроекте
@НаСервере
метод ОстановитьСборЗаголовков()
    СборЗаголовковПочты.Остановить()
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СостояниеСбора(): СтатусЗадания
    знч ЗаданиеСбораПочты = ЗапланированныеЗадания.ПолучитьПоКлючу(СборЗаголовковПочты.КЛЮЧ_ЗАДАНИЕ_СБОР_ПОЧТЫ)
    если ЗаданиеСбораПочты == Неопределено
        возврат СтатусЗадания.Отменено
    ;
    возврат ЗаданиеСбораПочты.Статус
;

@ВПроекте
@НаСервере
метод НастройкиШлюза(Подсистема: Строка = Почта.ИД_ПОДСИСТЕМЫ): ШлюзSmtp
    пер ДанныеПодключения = УчетныеЗаписиПочты.ПодключениеПодсистемы(Подсистема)
    возврат НастройкиШлюза(ДанныеПодключения!)
;

@ВПроекте
@НаСервере
метод НастройкиШлюза(ДанныеПодключения: ПодключениеПочтовогоСервера): ШлюзSmtp
    знч ШлюзSmtp = новый ШлюзSmtp(
        ДанныеПодключения.СерверПочты,
        ДанныеПодключения.ПортСервераПочты,
        новый АдресПочты(ДанныеПодключения.АдресЭлектроннойПочты, ДанныеПодключения.Наименование),
        ДанныеПодключения.УчетнаяЗапись,
        ДанныеПодключения.ПарольУчетнойЗаписи)
    ШлюзSmtp.ИспользоватьSsl = ДанныеПодключения.ИспользоватьЗащищенноеСоединение
    ШлюзSmtp.РазрешитьStartTls = ДанныеПодключения.РазрешитьStartTls
    возврат ШлюзSmtp
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ТекстОшибки(Вид: ТипыОшибок): Строка
    пер ТекстОшибки = ""
    выбор Вид
    когда ТипыОшибок.ОтсуствуютПараметрыПодключения
        ТекстОшибки = "Не созданы или неверно указаны настройки для отправки почты, обратитесь к администратору\н"
    когда ТипыОшибок.ОтправкаПрервана
        ТекстОшибки = "Сбой во время отправки, подробнее в Журнале событий."
    когда ТипыОшибок.НеВерныйФорматЭлектронногоАдреса
        ТекстОшибки = "Указан неверный формат электронной почты.\нПроверьте правильность написания электронного адреса."
    когда ТипыОшибок.УчетнаяЗаписьНеАктивна
        ТекстОшибки = "Учетная запись отключена администратором."
    когда ТипыОшибок.ОшибкаПодключения
        ТекстОшибки = "Ошибка подключения к почтовому серверу или истекло время для подключения."
    когда ТипыОшибок.НеЗаданОтправитель
        ТекстОшибки = "Значение отправителя письма не определено."
    когда ТипыОшибок.СоединениеНеУстановленоImap
        ТекстОшибки = "Соединение с Imap сервером не установлено."
    когда ТипыОшибок.СоединениеНеУстановленоPop3
        ТекстОшибки = "Соединение с Pop3 сервером не установлено."
    когда ТипыОшибок.НеВерныйФорматUid
        ТекстОшибки = "Использован неверный формат Uid для загрузки письма по протоколу Imap"
    когда ТипыОшибок.ОтсутствуютПравилаФильтра
        ТекстОшибки = "Отсутствуют правила отбора для сбора заголовков. Необходимо реализовать контракт."
    ;
    возврат ТекстОшибки
;

@ВПодсистеме
@НаСервере
метод ТекстОшибки(Вид: ТипыОшибок, ДопИнформация: Строка): Строка
    возврат ТекстОшибки(Вид) + "/n" + ДопИнформация
;