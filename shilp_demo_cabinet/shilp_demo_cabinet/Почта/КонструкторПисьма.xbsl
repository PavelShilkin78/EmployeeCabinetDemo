импорт Стд::ЭлектроннаяПочта
импорт УниверсальныеМеханизмы

@ВПодсистеме
метод СоздатьИзСообщения(Сообщение: ПочтовоеСообщение): Письмо
    пер Письмо = новый Письмо(
        Отправитель = новый АдресПочты(Сообщение.ОтправительПочта.Сократить(), Сообщение.ОтправительИмя),
        Тема = Сообщение.Тема
    )
    ДобавитьПолучателей(Письмо,
        Сообщение.ПолучателиПисьма,
        Сообщение.ПолучателиКопии,
        Сообщение.ПолучателиСкрытойКопии
    )
    если не Сообщение.ПолучателиОтвета.Пусто()
        Письмо.ДобавитьОбратныеАдреса(ПолучитьАдресаПочты(Сообщение.ПолучателиОтвета))
    ;
    Письмо.УстановитьТекстКакСтроку(
        Текст = Сообщение.ТекстПисьма,
        ВидТекста = ПолучитьТипСодержимого(Сообщение.ВидТекста)
    )
    если Сообщение.ВидТекста == ФорматыПочтовогоСообщения.Html
        Письмо.ДобавитьЗаголовок("Content-Type", "text/html; charset=utf-8")
    ;
    Письмо.Важность = Сообщение.Важность
    возврат Письмо
;

@ВПодсистеме
метод Создать(ПисьмоОбъект: ЭлектронноеПисьмо.Объект): Письмо
    пер Письмо = СоздатьПисьмоБезАдресатов(ПисьмоОбъект)
    ДобавитьПолучателей(Письмо,
        ПисьмоОбъект.Получатели,
        ПисьмоОбъект.ПолучателиКопии,
        ПисьмоОбъект.ПолучателиСкрытойКопии
    )
    если не ПисьмоОбъект.ПолучателиОтвета.Пусто()
        Письмо.ДобавитьОбратныеАдреса(ПолучитьАдресаПочты(ПисьмоОбъект.ПолучателиОтвета))
    ;
    возврат Письмо
;

метод ДобавитьПолучателей(ПисьмоОбъект: Письмо, Получатели: Массив<Строка>, ПолучателиКопии: Массив<Строка>, ПолучателиСкрытойКопии: Массив<Строка>)
    ПисьмоОбъект.ДобавитьПолучателей(ПолучитьАдресаПочты(Получатели))
    
    если не ПолучателиКопии.Пусто()
        ПисьмоОбъект.ДобавитьПолучателейКопии(ПолучитьАдресаПочты(ПолучателиКопии))
    ;
    если не ПолучателиСкрытойКопии.Пусто()
        ПисьмоОбъект.ДобавитьПолучателейСкрытойКопии(ПолучитьАдресаПочты(ПолучателиСкрытойКопии))
    ;
;

метод СоздатьПисьмоБезАдресатов(ПисьмоОбъект: ЭлектронноеПисьмо.Объект): Письмо
    пер Письмо = новый Письмо(
        Отправитель = ПисьмоОбъект.Отправитель.Сократить(),
        Тема = ПисьмоОбъект.Тема
    )
    Письмо.УстановитьТекстКакСтроку(
        Текст = ПисьмоОбъект.Содержание,
        ВидТекста = ПолучитьТипСодержимого(ПисьмоОбъект.ФорматСодержимого)
    )
    Письмо.Важность = ВажностьПисьма(ПисьмоОбъект.Важность)
    возврат Письмо
;

@ВПодсистеме
метод ИдИсходногоСобщения(Письмо: Письмо): Строка
    пер Заголовок_InReplyTo = Письмо.ПолучитьПервыйЗаголовок("In-Reply-To")
    если Заголовок_InReplyTo != Неопределено и не Заголовок_InReplyTo.Пусто()
        возврат Заголовок_InReplyTo
    ;
    возврат ""
;

@ВПодсистеме
метод ЦепочкаПереписки(Письмо: Письмо): Строка
    пер Заголовок_References = Письмо.ПолучитьПервыйЗаголовок("References")
    если Заголовок_References != Неопределено и не Заголовок_References.Пусто()
        возврат Заголовок_References
    ;
    возврат ""
;

@ВПодсистеме
метод ПолучитьТипСодержимого(ФорматСообщения: ФорматыПочтовогоСообщения?): ВидТекстаПисьма
    если ФорматСообщения == Неопределено
        возврат ВидТекстаПисьма.ПростойТекст 
    ;
    выбор ФорматСообщения
    когда ФорматыПочтовогоСообщения.Html
        возврат ВидТекстаПисьма.Html
    когда ФорматыПочтовогоСообщения.Rtf
        возврат ВидТекстаПисьма.РазмеченныйТекст
    иначе
        возврат ВидТекстаПисьма.ПростойТекст
    ;
;

@ВПодсистеме
метод ПолучитьФорматСодержимого(ТекстыПисьма: ЧастьТекстаПисьма?): ФорматыПочтовогоСообщения
    если ТекстыПисьма == Неопределено
        возврат ФорматыПочтовогоСообщения.Html
    ;
    если ТекстыПисьма.ВидТекста!.Содержит("text/html", Истина)
        возврат ФорматыПочтовогоСообщения.Html
    иначе если ТекстыПисьма.ВидТекста!.Содержит("text/riched", Истина)
        возврат ФорматыПочтовогоСообщения.Rtf
    иначе
        возврат ФорматыПочтовогоСообщения.ПростойТекст
    ;
;

@ВПодсистеме
метод ВажностьПисьма(Важность: СтепеньВажностиПисьма?): ВажностьПисьма
    если Важность == Неопределено
        возврат ВажностьПисьма.Обычная
    ;
    выбор Важность!
    когда Высокая
        возврат ВажностьПисьма.Высокая
    когда Низкая
        возврат ВажностьПисьма.Низкая
    иначе 
        возврат ВажностьПисьма.Обычная
    ;
;

@ВПодсистеме
метод СтепеньВажностиПисьма(Важность: ВажностьПисьма?): СтепеньВажностиПисьма
    если Важность == Неопределено
        возврат СтепеньВажностиПисьма.Обычная
    ;
    выбор Важность!
    когда Высокая
        возврат СтепеньВажностиПисьма.Высокая
    когда Низкая
        возврат СтепеньВажностиПисьма.Низкая
    иначе 
        возврат СтепеньВажностиПисьма.Обычная
    ;
;

@ВПодсистеме
метод ПолучитьАдресаПочты(Адресаты: Массив<Строка>): ЧитаемыйМассив<АдресПочты>
    пер АдресаПочты: Массив<АдресПочты>
    для Адресат из Адресаты
        АдресаПочты.Добавить(
            новый АдресПочты(Адресат)
        )                
    ;
    возврат новый ЧитаемыйМассив<АдресПочты>(АдресаПочты)
;

@ВПодсистеме
метод ПолучитьЭлектоннуюПочту(АдресаПочты: ЧитаемыйМассив<АдресПочты>, ВНижнийРегистр: Булево = Ложь): Массив<Строка>
    пер НовыеКонтакты: Массив<Строка>
    для Почта из АдресаПочты
        пер Адрес = Почта.Адрес.Сократить()
        если ВНижнийРегистр
            Адрес = Адрес.ВНижнийРегистр()
        ;
        НовыеКонтакты.Добавить(Почта.Адрес)
    ;
    возврат НовыеКонтакты
;

@ВПодсистеме
метод ДобавитьВложения(ПисьмоДокумент: ЭлектронноеПисьмо.Ссылка, Письмо: Письмо)
    пер Вложения = ПрисоединенныеФайлыМенеджер.ПрисоединенныеФайлы(ПисьмоДокумент).Файлы
    ПриложитьДанныеВПисьмо(Вложения, Письмо)
;

@ВПодсистеме
метод ДобавитьВложения(Сообщение: ПочтовоеСообщение, Письмо: Письмо)
    ПриложитьДанныеВПисьмо(Сообщение.Вложения, Письмо)
;

метод ПриложитьДанныеВПисьмо(Вложения: Массив<ПрисоединенныйФайл>, Письмо: Письмо)
    для ПрисоединенныйФайл из Вложения
        Письмо.ПриложитьДанные(
            Данные = ПрисоединенныйФайл.Содержимое(),
            Название = "%{ПрисоединенныйФайл.Наименование}.%{ПрисоединенныйФайл.Расширение}"
        )    
    ;  
;