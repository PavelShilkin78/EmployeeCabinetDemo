импорт Почта
импорт ИнтерфейсныеКомпонентыСтандартные
импорт ОбщиеСтандартные

// Блок инициализации

@Обработчик
метод ПослеСоздания()
    если УчетнаяЗаписьОбъект == Неопределено
        Инициализировать()
    ;
;

метод ИнициализироватьДанные()
    ИспользоватьЭлектроннуюПочту = ИспользоватьЭлектроннуюПочту()
    УчетнаяЗаписьОбъект.ВладелецПочтыПодсистема = ИдПодсистемы
;

// Конец инициализации

// Блок обработки событий клиента

метод ПереключитьИспользованиеЭлектроннойПочты(Источник: Флажок, Событие: СобытиеПриИзменении<Булево|Неопределено>)
    знч ЭлектроннаяПочта = УчетнаяЗаписьОбъект.АдресЭлектроннойПочты.ВСтроку()
    если ИспользоватьЭлектроннуюПочту и не ЭлектроннаяПочта.Пусто()
        УчетнаяЗаписьОбъект.УчетнаяЗапись = ЭлектроннаяПочта
    ;
;

метод ПриИзмененииТекстаРедактирования(Источник: ПолеВвода<Строка>, Событие: СобытиеСДанными<Строка>)
    если ИспользоватьЭлектроннуюПочту
        УчетнаяЗаписьОбъект.УчетнаяЗапись = Событие.Данные
    ;
;

// Конец обработки событий клиента

// Блок программного интерфейса
@ВПроекте
метод Инициализировать()
    УчетнаяЗаписьОбъект = УчетнаяЗапись(ИдПодсистемы)
    ИнициализироватьДанные()
;

@ВПроекте
метод Инициализировать(УчетнаяЗаписьПользователя: УчетныеЗаписиПочты.Ссылка?)
    УчетнаяЗаписьОбъект = УчетнаяЗапись(УчетнаяЗаписьПользователя)
    ИнициализироватьДанные()
;

@ВПроекте
метод УчетнаяЗаписьПользователя(УчетнаяЗаписьПользователя: УчетныеЗаписиПочты.Ссылка?): УчетныеЗаписиПочты.Объект
    Инициализировать(УчетнаяЗаписьПользователя)
    возврат УчетнаяЗаписьОбъект
;


@ВПроекте
метод Новая(): Булево
    возврат УчетнаяЗаписьОбъект.ЭтоНовый()
;

@ВПроекте
метод Записать(УчетнаяЗаписьПочты: УчетныеЗаписиПочты.Объект, ПроверкаЗаполнения: Булево = Истина): Булево
    знч ПроверкаПолейУспешна = ПроверкаЗаполенияПолей(УчетнаяЗаписьПочты)
    если ПроверкаПолейУспешна
        попытка
            УчетнаяЗаписьОбъект = ЗаписатьУчетнуюЗапись(УчетнаяЗаписьПочты)
        поймать Исключение: ПроверкаЗаполнения.ИсключениеПроверкиЗаполнения
            СтандартныеФормы.ПоказатьУведомление("Ошибка заполнения", Исключение.Описание)
        поймать Исключение: ИсключениеНедопустимыйАргумент
            СтандартныеФормы.ПоказатьУведомление("Неверное значение поля", Исключение.Описание)
        ;
    ;
    возврат ПроверкаПолейУспешна
;

@ВПроекте
метод ПроверкаЗаполенияПолей(УчетнаяЗаписьПочты: УчетныеЗаписиПочты.Объект): Булево
    возврат СтандартныеФормы.ПроверкаЗаполенияПолей(ПоляПроверки()) и АдресПочтыКорректен()
;

@ВПроекте
метод Записать(): Булево
   возврат Записать(УчетнаяЗаписьОбъект)
;

@ВПроекте
метод Удалить()
    УдалитьУчетнуюЗапись(УчетнаяЗаписьОбъект)
;


@ВПроекте
метод Заполнить(ДанныеПодключения: ПодключениеПочтовогоСервера)
    УчетнаяЗаписьОбъект.Наименование = ДанныеПодключения.Наименование
    УчетнаяЗаписьОбъект.ПортСервераПочты = ДанныеПодключения.ПортСервераПочты
    УчетнаяЗаписьОбъект.СерверПочты = ДанныеПодключения.СерверПочты
    УчетнаяЗаписьОбъект.ПарольУчетнойЗаписи = ДанныеПодключения.ПарольУчетнойЗаписи
    УчетнаяЗаписьОбъект.ИспользоватьЗащищенноеСоединение = ДанныеПодключения.ИспользоватьЗащищенноеСоединение
    УчетнаяЗаписьОбъект.РазрешитьStartTls = ДанныеПодключения.РазрешитьStartTls
    УчетнаяЗаписьОбъект.АдресЭлектроннойПочты = ДанныеПодключения.АдресЭлектроннойПочты
;

// Конец программного интерфейса

// Блок проверки данных

метод ПоляПроверки(): Множество<ПолеВвода<Строка>|ПолеВвода<Число>>
    возврат {
        Компоненты.ПолеНаименование, 
        Компоненты.ПолеПортСервераПочты,
        Компоненты.ПолеСерверПочты,
        Компоненты.ПолеУчетнаяЗапись,
        Компоненты.ПолеПарольУчетнойЗаписи
    }
;

метод АдресПочтыКорректен(): Булево
    пер АдресПочтыКорректен = АдресПочтыКорректен(УчетнаяЗаписьОбъект.АдресЭлектроннойПочты)
    Компоненты.ПолеЭлектроннаяПочта.РезультатПроверкиДанных = АдресПочтыКорректен ? РезультатПроверкиДанных.Отсутствует : РезультатПроверкиДанных.Предупреждение
    возврат АдресПочтыКорректен
;

// Конец проверки данных

// Блок служебные

метод ИспользоватьЭлектроннуюПочту(): Булево
    знч ЭлектроннаяПочта = УчетнаяЗаписьОбъект.АдресЭлектроннойПочты.ВСтроку()
    знч УчетнаяЗапись = УчетнаяЗаписьОбъект.УчетнаяЗапись.ВСтроку()
    возврат не ЭлектроннаяПочта.Пусто() и ЭлектроннаяПочта == УчетнаяЗапись
;

// Конец служебные

// Блок чтения и записи данных

@НаСервере @ДоступноСКлиента
статический метод УчетнаяЗапись(ИдПодсистемы: Строка): УчетныеЗаписиПочты.Объект?
    возврат УчетныеЗаписиПочты.Подсистема(ИдПодсистемы)?.ЗагрузитьОбъект() ?? новый УчетныеЗаписиПочты.Объект()
;

@НаСервере @ДоступноСКлиента
статический метод УчетнаяЗапись(УчетнаяЗаписьПользователя: УчетныеЗаписиПочты.Ссылка?): УчетныеЗаписиПочты.Объект
    возврат УчетнаяЗаписьПользователя?.ЗагрузитьОбъект() ?? новый УчетныеЗаписиПочты.Объект()
;

@НаСервере @ДоступноСКлиента
статический метод АдресПочтыКорректен(Адрес: Строка): Булево
    пер ПочтовыйАдрес: АдресПочты?
    попытка
        ПочтовыйАдрес = новый АдресПочты(Адрес, Адрес)
    поймать Ошибка: Исключение
        возврат Ложь
    ;
    возврат Истина
;

@НаСервере @ДоступноСКлиента
статический метод ЗаписатьУчетнуюЗапись(УчетнаяЗапись: УчетныеЗаписиПочты.Объект): УчетныеЗаписиПочты.Объект
    УчетнаяЗапись.Записать()
    возврат УчетнаяЗапись
;

@НаСервере @ДоступноСКлиента
статический метод УдалитьУчетнуюЗапись(УчетнаяЗапись: УчетныеЗаписиПочты.Объект)
    УчетнаяЗапись.Удалить()
;

// Конец чтения и записи данных