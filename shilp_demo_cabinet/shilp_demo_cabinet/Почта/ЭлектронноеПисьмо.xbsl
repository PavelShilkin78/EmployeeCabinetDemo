импорт ОбщиеСтандартные

//КонтрольДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат ПочтаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаИспользованиеПочты()
;

//Конец КонтрольДоступа

@ВПроекте
метод Создать(ФорматСодержимого: ФорматыПочтовогоСообщения? = Неопределено): ЭлектронноеПисьмо.Объект
    пер Письмо = новый ЭлектронноеПисьмо.Объект().Заполнить()
    Письмо.ФорматСодержимого = ФорматСодержимого
    возврат Письмо
;

@ВПодсистеме
метод Создать(Заголовок: ЗаголовкиПисьмаВСоединении): ЭлектронноеПисьмо.Объект
    пер Письмо = новый ЭлектронноеПисьмо.Объект().Заполнить()
    Письмо.Статус = СтатусыПисьма.ПолученЗаголовок
    Письмо.ИдСообщения = Заголовок.Заголовки.ИдСообщения
    Письмо.ДатаОтправки = Заголовок.Заголовки.ДатаОтправления
    Письмо.Важность = КонструкторПисьма.СтепеньВажностиПисьма(Заголовок.Заголовки.Важность)
    Письмо.Тема = Заголовок.Заголовки.Тема
    Письмо.ДатаПолучения = МенеджерДат.ТекущаяДатаВремя()
    Письмо.Отправитель = Заголовок.Заголовки.Отправитель.Адрес
    Письмо.Получатели.ДобавитьВсе(
        КонструкторПисьма.ПолучитьЭлектоннуюПочту(Заголовок.Заголовки.Получатели)
    )
    Письмо.ПолучателиКопии.ДобавитьВсе(
        КонструкторПисьма.ПолучитьЭлектоннуюПочту(Заголовок.Заголовки.ПолучателиКопии)
    )
    Письмо.ПолучателиСкрытойКопии.ДобавитьВсе(
        КонструкторПисьма.ПолучитьЭлектоннуюПочту(Заголовок.Заголовки.ПолучателиСкрытойКопии)
    )
    Письмо.ПолучателиОтвета.ДобавитьВсе(
        КонструкторПисьма.ПолучитьЭлектоннуюПочту(Заголовок.Заголовки.ОбратныеАдреса)
    )
    возврат Письмо
;

@ВПроекте
метод ФильтрПоСтатусу(Статус: СтатусыПисьма): Множество<ЭлектронноеПисьмо.Ссылка>
    знч Запрос = Запрос{
        Выбрать
            ЭлектронноеПисьмо.Ссылка как Ссылка
        Из
            ЭлектронноеПисьмо как ЭлектронноеПисьмо
        Где
            ЭлектронноеПисьмо.Статус == %Статус
        Упорядочить по
            ЭлектронноеПисьмо.ДатаОтправки Убыв}
    исп Результат = Запрос.Выполнить()
    пер СписокПисем = новый Множество<ЭлектронноеПисьмо.Ссылка>()
    для РезультатСтрока из Результат
        СписокПисем.Добавить(РезультатСтрока.Ссылка)
    ;    
    возврат СписокПисем
;

@ВПроекте
метод ФильтрПоИдСообщения(ИдСообщения: Строка, Статус: СтатусыПисьма): ЭлектронноеПисьмо.Ссылка?
    знч Запрос = Запрос{
        Выбрать
            ЭлектронноеПисьмо.Ссылка как Ссылка
        Из
            ЭлектронноеПисьмо как ЭлектронноеПисьмо
        Где
            ЭлектронноеПисьмо.ИдСообщения == %ИдСообщения}
    знч РезультатЗапроса = новый ЧитаемыйМассив(Запрос.Выполнить())
    если не РезультатЗапроса.Пусто()
        возврат РезультатЗапроса.Последний().Ссылка
    ;
    возврат Неопределено
;

@ВПроекте
метод ИдПисемСоСтатусом(Статус: СтатусыПисьма): Множество<Строка>
    знч Запрос = Запрос{
        Выбрать
            ЭлектронноеПисьмо.ИдСообщения как Ид
        Из
            ЭлектронноеПисьмо как ЭлектронноеПисьмо
        Где
            ЭлектронноеПисьмо.Статус == %Статус
        Упорядочить по
            ЭлектронноеПисьмо.ДатаОтправки Убыв}
    исп Результат = Запрос.Выполнить()
    пер СписокИд = новый Множество<Строка>()
    для РезультатСтрока из Результат
        СписокИд.Добавить(РезультатСтрока.Ид)
    ;    
    возврат СписокИд
;

@ВПроекте
метод ИдСообщенийОтправителя(ОтправительАдресПочты: Строка): Множество<Строка>
    знч Запрос = Запрос{
        Выбрать
            ЭлектронноеПисьмо.ИдСообщения как ИдСообщения
        Из
            ЭлектронноеПисьмо как ЭлектронноеПисьмо
        Где
            ЭлектронноеПисьмо.Статус == СтатусыПисьма.Отправлено
            И ЭлектронноеПисьмо.Отправитель == %ОтправительАдресПочты}

    исп Результат = Запрос.Выполнить()
    пер СписокПисем = новый Множество<Строка>()
    для РезультатСтрока из Результат
        СписокПисем.Добавить(РезультатСтрока.ИдСообщения)
    ;    
    возврат СписокПисем
;

@ВПроекте
метод ФильтрПоПолучателю(ПолучательАдресПочты: Строка): Множество<ЭлектронноеПисьмо.Ссылка>
    знч Запрос = Запрос{
        Выбрать
            ЭлектронноеПисьмо.Ссылка как Ссылка
        Из
            ЭлектронноеПисьмо как ЭлектронноеПисьмо
            Внутреннее Соединение ЭлектронноеПисьмо.Получатели как Получатели
            по ЭлектронноеПисьмо.Ссылка == Получатели.Владелец
        Где
            Получатели.Элемент == %ПолучательАдресПочты
            И ЭлектронноеПисьмо.Статус == СтатусыПисьма.ПолученЗаголовок}

    исп Результат = Запрос.Выполнить()
    пер СписокПисем = новый Множество<ЭлектронноеПисьмо.Ссылка>()
    для РезультатСтрока из Результат
        СписокПисем.Добавить(РезультатСтрока.Ссылка)
    ;    
    возврат СписокПисем
;

@ВПроекте
метод ИдСообщенийПолучателя(ПолучательАдресПочты: Строка, ДатаОтсечения: Момент): Множество<Строка>
    знч Запрос = Запрос{
        Выбрать
            ЭлектронноеПисьмо.ИдСообщения как ИдСообщения
        Из
            ЭлектронноеПисьмо как ЭлектронноеПисьмо
            Внутреннее Соединение ЭлектронноеПисьмо.Получатели как Получатели
            по ЭлектронноеПисьмо.Ссылка == Получатели.Владелец
        Где
            Получатели.Элемент == %ПолучательАдресПочты
            И ВЫРАЗИТЬ(ЭлектронноеПисьмо.ДатаОтправки как Момент) > %ДатаОтсечения
        УПОРЯДОЧИТЬ ПО
            ЭлектронноеПисьмо.ДатаОтправки Убыв}

    исп Результат = Запрос.Выполнить()
    пер СписокИд = новый Множество<Строка>()
    для РезультатСтрока из Результат
        СписокИд.Добавить(РезультатСтрока.ИдСообщения)
    ;    
    возврат СписокИд
;

@ВПроекте
метод МаксДатаОтправкиПисьмаПоПолучателю(ПолучательАдресПочты: Строка): Момент?
    знч Запрос = Запрос{
        Выбрать Первые 1
            ЭлектронноеПисьмо.ДатаОтправки как ДатаОтправки
        Из
            ЭлектронноеПисьмо как ЭлектронноеПисьмо
            Внутреннее Соединение ЭлектронноеПисьмо.Получатели как Получатели
            по ЭлектронноеПисьмо.Ссылка == Получатели.Владелец
        Где
            Получатели.Элемент == %ПолучательАдресПочты
        УПОРЯДОЧИТЬ ПО
            ЭлектронноеПисьмо.ДатаОтправки Убыв}
    знч Результат = новый ЧитаемыйМассив(Запрос.Выполнить())
    если не Результат.Пусто()
        возврат Результат[0].ДатаОтправки
    иначе
        возврат Неопределено
    ;
;