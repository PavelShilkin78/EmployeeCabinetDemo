импорт ОбщиеСтандартные


@ВПодсистеме
конст КЛЮЧ_ЗАДАНИЕ_СБОР_ПОЧТЫ = "СборПочтыПоРасписанию"
конст ИНТЕРВАЛ_ОТСЕЧЕНИЯ_ДЛЯ_СБОРА = 0д1ч

@ВПроекте
метод Запустить(ОкончаниеСбора: ()->ничто?)
    ЗагрузкаВсехЗаголовков()
    ОкончаниеСбора()
;

@ВПроекте
метод Запустить(Подключения: Соответствие<УчетныеЗаписиПочты.Ссылка, ПодключениеПочтовогоСервера>, ОкончаниеСбора: ()->ничто?)
    ЗагрузкаЗаголовков(Подключения)
    ОкончаниеСбора()
;

@ВПроекте
метод Остановить()
    ЗапланированныеЗадания.Приостановить(КЛЮЧ_ЗАДАНИЕ_СБОР_ПОЧТЫ)
;

@ВПроекте
метод ЗапуститьПоРасписанию(ПериодЗапуска: Число): ОписаниеЗадания?
    пер ПериодВыполнения = Длительность.ИзМинут(ПериодЗапуска)
    пер Расписание = [Расписание.Периодическое(ПериодВыполнения)]
    пер Задание: ОписаниеЗадания?
    исп КонтекстДоступа.Привилегированный()
    МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
    если ЗапланированныеЗадания.ПолучитьПоКлючу(КЛЮЧ_ЗАДАНИЕ_СБОР_ПОЧТЫ) == Неопределено
        Задание = ЗапланированныеЗадания.Создать(&ЗагрузкаВсехЗаголовков)
            .Настроить(
                Ключ = КЛЮЧ_ЗАДАНИЕ_СБОР_ПОЧТЫ,
                Расписание= Расписание)
            .Запланировать()
    иначе
        Задание = ЗапланированныеЗадания.Изменить(КЛЮЧ_ЗАДАНИЕ_СБОР_ПОЧТЫ)
            ?.Настроить(Расписание = Расписание)
            .Запланировать()
    ;
    возврат Задание
;

@ВПодсистеме
метод ЗагрузкаВсехЗаголовков()
    пер ПодключенияПоУчетнымЗаписям = УчетныеЗаписиПочты.ПодключенияПоПротоколам(
        [ПротоколыПочты.Imap, ПротоколыПочты.Pop3]
    )
    если не ПодключенияПоУчетнымЗаписям.Пусто()
        ЗагрузкаЗаголовков(ПодключенияПоУчетнымЗаписям)
    ;
;

@ВПодсистеме
метод ЗагрузкаЗаголовков(Подключения: Соответствие<УчетныеЗаписиПочты.Ссылка, ПодключениеПочтовогоСервера>)
    для УчетнаяЗапись из Подключения.Ключи()
        знч Подключение = Подключения[УчетнаяЗапись]
        
        пер Фильтр = новый ФильтрЗаголовков()
        Фильтр.Правила.ДобавитьВсе(
            ПравилаФильтраЗаголовков(Подключение)
        )
        знч СервисЗагрузки = ПолучитьАктуальныйЗагрузчик(Подключение)
        СервисЗагрузки.СинхронизироватьЗаголовки(Подключение, Фильтр)
    ;
;

метод ПравилаФильтраЗаголовков(Подключение: ПодключениеПочтовогоСервера): Массив<ПравилоФильтра>
    пер ПравилаФильтра = новый Массив<ПравилоФильтра>()
    знч МаксДатаОтправки = ЭлектронноеПисьмо.МаксДатаОтправкиПисьмаПоПолучателю(Подключение.УчетнаяЗапись)
    знч ЭтоПервичнаяЗагрузка = МаксДатаОтправки == Неопределено
    если не ЭтоПервичнаяЗагрузка
        знч ДатаОтчечения = МаксДатаОтправки! - ИНТЕРВАЛ_ОТСЕЧЕНИЯ_ДЛЯ_СБОРА
        ПравилаФильтра.Добавить(
            новый ПравилоФильтраПоДатеОтправления(
                МаксДатаОтправки = ДатаОтчечения,
                ФильтрЕслиБольше = Истина
            )
        )
        ПравилаФильтра.Добавить(
            новый ПравилоФильтраПоИдСообщения(
                ИдСообщений = ЭлектронноеПисьмо.ИдСообщенийПолучателя(Подключение.УчетнаяЗапись, ДатаОтчечения),
                ФильтрЕслиСодержит = Ложь
            )
        )
    ;
    для Сервис из ПочтаПоставщикПравилФильтра.ПолучитьСервисы()
        если ЭтоПервичнаяЗагрузка
            ПравилаФильтра.ДобавитьВсе(Сервис.ПравилаПервичнойЗагрузки(Подключение))
        иначе
            ПравилаФильтра.ДобавитьВсе(Сервис.ПравилаЗагрузки(Подключение))
        ;
    ;
    возврат ПравилаФильтра
;

метод ПолучитьАктуальныйЗагрузчик(Подключение: ПодключениеПочтовогоСервера): ЗагрузчикПисем
    для ЗагрузкаПочты из ЗагрузчикПисем.ПолучитьСервисы()
        если ЗагрузкаПочты.АктуальныйЗагрузчик(Подключение)
            возврат ЗагрузкаПочты
        ;
    ;
;