импорт ИнтерфейсныеКомпонентыСтандартные
импорт КонтрольДоступа
импорт КонтрольДоступаСтандартные
импорт СтандартноеПриложение

@Обработчик
метод ПослеСоздания()
    пер Настройки = НастройкиСозданияКабинетов()
    АдресСервиса = Настройки.АдресСервиса
    СоздаватьКабинетыАвтоматически = Настройки.СоздаватьКабинетыАвтоматически
    ОтправлятьПриглашенияАвтоматически = Настройки.ОтправлятьПриглашенияАвтоматически
    ЗапрашиватьЛогинПриАктивацииМобильногоПриложения = Настройки.ЗапрашиватьЛогинПриАктивацииМобильногоПриложения
    ЗапретПростыхПаролей = ЗапретПростыхПаролей()
;

метод СоздаватьКабинетыАвтоматическиПриИзмененииЗначения(Источник: ФлажокРасширенный, Событие: СобытиеПриИзменении<Булево?>)
    УстановитьНастройкиСозданияКабинетов()
;

метод ОтправлятьПриглашенияАвтоматическиПриИзмененииЗначения(Источник: ФлажокРасширенный, Событие: СобытиеПриИзменении<Булево?>)
    УстановитьНастройкиСозданияКабинетов()
;

метод ЗапрашиватьЛогинПриАктивацииМобильногоПриложенияПриИзмененииЗначения(Источник: ФлажокРасширенный, Событие: СобытиеПриИзменении<Булево?>)
    УстановитьНастройкиСозданияКабинетов()
;

метод УстановитьНастройкиСозданияКабинетов()
    пер Настройки: ЛичныеКабинетыПользователей.НастройкиЛичныхКабинетов
    Настройки.АдресСервиса = АдресСервиса
    Настройки.СоздаватьКабинетыАвтоматически = СоздаватьКабинетыАвтоматически
    Настройки.ОтправлятьПриглашенияАвтоматически = ОтправлятьПриглашенияАвтоматически
    Настройки.ЗапрашиватьЛогинПриАктивацииМобильногоПриложения = ЗапрашиватьЛогинПриАктивацииМобильногоПриложения
    
    УстановитьНастройкиСозданияКабинетов(Настройки)
;

метод ЗапретПростыхПаролейПриИзмененииЗначения(Источник: ФлажокРасширенный, Событие: СобытиеПриИзменении<Булево?>)
    ЗапретПростыхПаролей(Событие.НовоеЗначение)
;

@НаСервере @ДоступноСКлиента
статический метод ЗапретПростыхПаролей(Запрет: Булево)
    МенеджерПравДоступа.ПроверитьПраваАдминистратора()
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    пер СписокПользователей = СпискиПользователей.ПолучитьСписокПоУмолчанию()
    если Запрет
        знч Политика = новый ПолитикаПаролей(
            МинимальнаяДлина = 8,
            МаксимальнаяДлина = 24,
            ДолженСодержатьСимволыВВерхнемРегистре = Истина,
            ДолженСодержатьСимволыВНижнемРегистре = Истина,
            ДолженСодержатьЦифру = Истина)
        СписокПользователей = СписокПользователей.СПолитикойПаролей(Истина, Политика)
    ;
    СпискиПользователей.Изменить(СписокПользователей)
    ПривилегированныйРежим.Закрыть()
;

@НаСервере @ДоступноСКлиента
статический метод НастройкиСозданияКабинетов(): ЛичныеКабинетыПользователей.НастройкиЛичныхКабинетов
    возврат ЛичныеКабинетыПользователей.ТекущиеНастройкиСозданияУчетныхЗаписей()
;

@НаСервере @ДоступноСКлиента
статический метод УстановитьНастройкиСозданияКабинетов(Настройки: ЛичныеКабинетыПользователей.НастройкиЛичныхКабинетов)
    ЛичныеКабинетыПользователей.СохранитьНастройки(Настройки)
;

@НаСервере @ДоступноСКлиента
статический метод ЗапретПростыхПаролей(): Булево
    пер ЗапретПростыхПаролей: Булево
    МенеджерПравДоступа.ПроверитьПраваАдминистратора()
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч СписокПользователей = СпискиПользователей.ПолучитьСписокПоУмолчанию()
    ЗапретПростыхПаролей = СписокПользователей.ПолитикаПаролейВключена
    ПривилегированныйРежим.Закрыть()
    возврат ЗапретПростыхПаролей
;

метод УчетныеЗаписиADВидимость(): Булево
    возврат СтандартноеПриложение.ПараметрыСеанса().ТекущийПользовательИмеетПолныеПрава
;

метод ЗагрузитьУчетныеЗаписиПриИзменении(Источник: ВыборФайлов, Событие: СобытиеПриИзменении<ЧитаемыйМассив<ВыбранныйФайл>>)
    пер ВыбранныеФайлы: ЧитаемыйМассив<ВыбранныйФайл> = Событие.НовоеЗначение        
    если ВыбранныеФайлы.Первый().Расширение != "csv"
        СтандартныеФормы.ПоказатьУведомление(
            "Выполнено с ошибками",
            "Неправильный формат файла",
            ОценкаИнформации.Предупреждающая)
        возврат
    ;
    
    пер ЗагрузкаФайла: ЗагрузкаФайла = ЗагрузкаФайлов.НачатьЗагрузку(ВыбранныеФайлы.Первый())
    пер УчетныеЗаписи: ДвоичныйОбъект.Ссылка = ЗагрузкаФайла.ПолучитьРезультат()
    если ЗагрузитьУчетныеЗаписи(УчетныеЗаписи)
        СтандартныеФормы.ПоказатьУведомление("Выполнено", "Данные загружены")
    иначе
        СтандартныеФормы.ПоказатьУведомление("Выполнено с ошибками",
            "При выполнении операции были ошибки. Подробнее в журнале событий",
            ОценкаИнформации.Предупреждающая)
    ;
;

метод УчетныеЗаписиADПодсказкаЗаголовок(): Строка
    возврат 
        "Загрузите список учетных записей Active Directory, чтобы пользователи смогли входить в приложение под своей доменной учетной записью.
        Загружаемый файл должен быть в формате csv и кодировке UTF-8.
        Фамилия Имя Отчество; учетная запись
        
        Фамилия Имя Отчество в файле и в приложении должны совпадать. Учетная запись должна быть в формате DOMAIN\\userlogin или userlogin@domain
        Например:
        Фур Виктор Аркадьевич;MENTORS\\foorVA
        Фур Виктор Аркадьевич;foorVA@mentors"
;

@НаСервере
@ДоступноСКлиента
статический метод ЗагрузитьУчетныеЗаписи(УчетныеЗаписиДвоичныеДанные: ДвоичныйОбъект.Ссылка): Булево
    пер Ошибки: Массив<Строка>
    знч СписокПользователей = СпискиПользователей.ПолучитьСписокПоУмолчанию()

    // Заполнить список доменов
    знч ИменаДоменовПоВерхнемуРегистру = новый Соответствие<Строка, Строка>()
    новый Множество<НастройкиСервисаУчетныхЗаписей>(СписокПользователей.НастройкиСервисовУчетныхЗаписей).Фильтровать(
        Настройки -> Настройки.Сервис.Вид == ВидСервисаУчетныхЗаписей.ActiveDirectory)
        .ДляКаждого(Настройки -> ИменаДоменовПоВерхнемуРегистру.Вставить(Настройки.Сервис.Ид.ВВерхнийРегистр(), Настройки.Сервис.Ид))

    исп ПотокЧтения = УчетныеЗаписиДвоичныеДанные.Загрузить().ОткрытьПотокЧтения()

    для ОписаниеУчетнойЗаписиДомена из ПотокЧтения.ПрочитатьКакСтроку().ПолучитьСтроки()
            .Преобразовать(&ОписаниеУчетнойЗаписиДоменаИзСтроки)
            .Фильтровать(ОписаниеУчетнойЗаписиДомена -> не ОписаниеУчетнойЗаписиДомена == Неопределено)

        // Проверить наличие пользователя владельца кабинета
        знч Пользователь = ПользовательПоФИО(ОписаниеУчетнойЗаписиДомена.ФИО)
        если Пользователь == Неопределено
            знч Ошибка = "Для физического лица $(ОписаниеУчетнойЗаписиДомена.ФИО) не найден личный кабинет сотрудника"
            Журналирование.ЗарегистрироватьОшибку(Ошибка)
            Ошибки.Добавить(Ошибка)
            продолжить
        ;

        // Проверить наличие пользовтеля сервиса
        знч ОписаниеПользователяСервиса = ПользователиСервиса.Найти(Пользователь.ЗагрузитьОбъект().Ид)
        если ОписаниеПользователяСервиса == Неопределено
            знч Ошибка = "Для пользователя $Пользователь не создан пользователь сервиса"
            Журналирование.ЗарегистрироватьОшибку(Ошибка)
            Ошибки.Добавить(Ошибка)
            продолжить
        ;

        // Проверить наличие сервиса Active Directory 
        // и зарегистрировать при отсутствии
        знч ИмяДомена = ОписаниеУчетнойЗаписиДомена.ИмяДомена
        знч ИмяПользователя = ОписаниеУчетнойЗаписиДомена.ИмяПользователя
        знч ЗарегистрированноеИмяДомена = ИменаДоменовПоВерхнемуРегистру.ПолучитьИлиУмолчание(ИмяДомена.ВВерхнийРегистр())
        если ЗарегистрированноеИмяДомена == Неопределено
            ДобавитьСервисActiveDirectoryВСписокПользователей(СписокПользователей, ИмяДомена)
            ИменаДоменовПоВерхнемуРегистру.Вставить(ИмяДомена.ВВерхнийРегистр(), ОписаниеУчетнойЗаписиДомена.ИмяДомена)
        ;

        // Проверить наличие учетной записи домена пользователя сервиса
        // и создать при отсутствии
        знч УчетнаяЗаписьДомена = ОписаниеПользователяСервиса.УчетныеЗаписи
            .Фильтровать(УчетнаяЗапись -> УчетнаяЗапись.Сервис.Вид == ВидСервисаУчетныхЗаписей.ActiveDirectory
                и УчетнаяЗапись.Сервис.Ид.ВВерхнийРегистр() == ИмяДомена.ВВерхнийРегистр() и УчетнаяЗапись.Ид
                == ИмяПользователя)
            .ЕдинственныйИлиУмолчание()

        если УчетнаяЗаписьДомена == Неопределено
            знч СервисActiveDirectory = новый СервисУчетныхЗаписей(ВидСервисаУчетныхЗаписей.ActiveDirectory,
                ИменаДоменовПоВерхнемуРегистру.Получить(ИмяДомена.ВВерхнийРегистр()))
            знч НоваяУчетнаяЗапись = новый УчетнаяЗапись(ИмяПользователя, СервисActiveDirectory)
            знч УчетныеЗаписи = ОписаниеПользователяСервиса.УчетныеЗаписи
                .Фильтровать(УчетнаяЗапись -> УчетнаяЗапись.Сервис.Вид != ВидСервисаУчетныхЗаписей.ActiveDirectory
                    и УчетнаяЗапись.Сервис.Ид.ВВерхнийРегистр() != ИмяДомена.ВВерхнийРегистр())
                .ВоМножество()
            УчетныеЗаписи.Добавить(НоваяУчетнаяЗапись)

            попытка
                ПользователиСервиса.Изменить(ОписаниеПользователяСервиса.СУчетнымиЗаписями(УчетныеЗаписи))
            поймать Ошибка: Исключение
                Журналирование.ЗарегистрироватьОшибку(Ошибка)
                Ошибки.Добавить(Ошибка.Описание)
            ;
        ;
    ;
    возврат Ошибки.Пусто()
;

@НаСервере
статический метод ПользовательПоФИО(ФИО: Строка): Пользователи.Ссылка?
    знч Запрос = Запрос{
        ВЫБРАТЬ ПЕРВЫЕ 1
            Пользователи.Пользователь
        ИЗ
            ПользователиВладельцевКабинетов КАК Пользователи
        ГДЕ
            Пользователи.ФизическоеЛицо.Наименование == %ФИО
    }
    возврат Запрос.Выполнить().ЕдинственныйИлиУмолчание()?.Пользователь
;

@НаСервере
статический метод ДобавитьСервисActiveDirectoryВСписокПользователей(СписокПользователей: СписокПользователей,
    ИмяДомена: Строка)
    знч СервисActiveDirectory = новый СервисУчетныхЗаписей(ВидСервисаУчетныхЗаписей.ActiveDirectory, ИмяДомена)
    знч НастройкиActiveDirectory = новый НастройкиСервисаУчетныхЗаписей(СервисActiveDirectory)
    знч НастройкиСервисовУчетныхЗаписей =
        новый Множество<НастройкиСервисаУчетныхЗаписей>(СписокПользователей.НастройкиСервисовУчетныхЗаписей)
    если не НастройкиСервисовУчетныхЗаписей.Содержит(НастройкиActiveDirectory)
        НастройкиСервисовУчетныхЗаписей.Добавить(НастройкиActiveDirectory)
        знч НовыйСписокПользователей =
            СписокПользователей.СНастройкамиСервисовУчетныхЗаписей(НастройкиСервисовУчетныхЗаписей)
        СпискиПользователей.Изменить(НовыйСписокПользователей)
    ;
;

/**
 * Описание: Формирует регулярное выражение проверки имени домена
 * Источник правил: https://learn.microsoft.com/en-us/troubleshoot/windows-server/active-directory/naming-conventions-for-computer-domain-site-ou#domain-names
 * - `(?=.{1,255}$)` — ограничивает общую длину строки от 1 до 255 символов.
 * - `(?![0-9]+$)` — запрещает домену состоять только из цифр.
 * - `([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)` — соответствует поддоменам, длиной от 1 до 63 символов.
 * - (\.поддомен)* - разрешает использование поддоменов
 * Примеры:
 * Подходящие строки:
 * - `DOMAIN`
 * - `subdomain.domain`
 * Замечания: Не поддерижвается UNICODE
 */
@НаСервере
статический метод ОбразецИмениДомена(): Образец
    возврат новый Образец("^(?=.{1,255}$)(?![0-9]+$)([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)(\\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$")
;

/**
 * Описание: Формирует регулярное выражение проверки разделитеяимени пользователя и домена
 * - `^[^@\\]+[@\\][^@\\]+$)` — ровно один символ `@` или `\` должен присутствовать в строке
 * Примеры:
 * Подходящие строки:
 * - `DOMAIN\username`
 * - `username@DOMAIN`
 */
@НаСервере
статический метод ОбразецРазделитеяИмениПользователяИДомена(): Образец
    возврат новый Образец("^[^@\\\\]+[@\\\\][^@\\\\]+$")
;

/**
 * Описание: Проверяет строку на сооответствие формату
 * Возвращает: Неопределено, если проверка не прошла, иначе - заполненную структуру
 * Примеры:
 * Подходящие строки:
 * - Фамилия Имя Отчество;user@example.com
 * - Фамилия Имя Отчество;DOMAIN\username
 */
@НаСервере
статический метод ОписаниеУчетнойЗаписиДоменаИзСтроки(Строка: Строка): ОписаниеУчетнойЗаписиДомена?
    знч ЧастиСтроки = Строка.Разделить(";")
    если не ЧастиСтроки.Размер() == 2
        возврат Неопределено
    ;

    знч ФИО = ЧастиСтроки[0].Сократить()

    если не ЧастиСтроки[1].Содержит(ОбразецРазделитеяИмениПользователяИДомена())
           возврат Неопределено
    ;

    знч ИспользуетсяРазделительОбратныйСлэш = ЧастиСтроки[1].Содержит("\\")
    знч ИмяДомена = ИспользуетсяРазделительОбратныйСлэш ? ЧастиСтроки[1].Разделить("\\")[0].Сократить() : ЧастиСтроки[1]
        .Разделить("@")[1].Сократить()

    если не ИмяДомена.Содержит(ОбразецИмениДомена())
        возврат Неопределено
    ;

    знч ИмяПользователя =
        ИспользуетсяРазделительОбратныйСлэш ? ЧастиСтроки[1].Разделить("\\")[1].Сократить() : ЧастиСтроки[1]
        .Разделить("@")[0].Сократить()

    возврат новый ОписаниеУчетнойЗаписиДомена(ФИО, ИмяДомена, ИмяПользователя)
;


@НаСервере
структура ОписаниеУчетнойЗаписиДомена
    знч ФИО: Строка
    знч ИмяДомена: Строка
    знч ИмяПользователя: Строка
;