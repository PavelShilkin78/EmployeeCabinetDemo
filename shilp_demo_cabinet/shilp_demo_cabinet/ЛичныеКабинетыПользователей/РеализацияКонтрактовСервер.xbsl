импорт СтандартноеПриложение
импорт ФизическиеЛица
импорт КонтрольДоступа
импорт КонтрольДоступаСтандартные
импорт ВебApi
импорт УниверсальныеМеханизмы
импорт ОбменДанными
импорт Уведомления
импорт Компания

// Контракт ПараметрыСеансаПоставщик
@ВПроекте
@Реализация
метод КоллекцияПараметровСеанса(МобильныйИнтерфейс: Булево): Соответствие<Строка, Объект>
    пер ПараметрыСеанса = новый ЛичныеКабинетыПользователей.ПараметрыСеанса()
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка? = ПользователиСистемы.ТекущееФизическоеЛицо()
    если ФизическоеЛицо != Неопределено
        ПараметрыСеанса.ДоступностьКабинета = ДоступностьКабинета(ФизическоеЛицо) или МенеджерПравДоступа.ЭтоАдминистратор()
        ПараметрыСеанса.ТекущееФизическоеЛицо = ФизическоеЛицо
    ;
    возврат {ЛичныеКабинетыПользователей.КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: ПараметрыСеанса}
;
// Конец ПараметрыСеансаПоставщик

// Контракт ПодсистемаПриложения

@ВПроекте
@Реализация
метод ОписаниеПодсистемы(): СтандартноеПриложение.ОписаниеПодсистемы
    возврат новый СтандартноеПриложение.ОписаниеПодсистемы(
        ЛичныеКабинетыПользователей.ИД_ПОДСИСТЕМЫ,
        {
            КонтрольДоступа.ИД_ПОДСИСТЕМЫ, 
            ФизЛица.ИД_ПОДСИСТЕМЫ,
            ОбменДанными.ИД_ПОДСИСТЕМЫ,
            Уведомления.ИД_ПОДСИСТЕМЫ,
            Компания.ИД_ПОДСИСТЕМЫ,
            УниверсальныеМеханизмы.ИД_ПОДСИСТЕМЫ
        }
    )
;

// Конец ПодсистемаПриложения

// Контракт ОбновляемаяПодсистема

@ВПроекте
@Реализация
метод ОбработчикиЗаполнения(): Массив<СтандартноеПриложение.ОписаниеОбработчикаЗаполнения>
    возврат [новый СтандартноеПриложение.ОписаниеОбработчикаЗаполнения(
                    ЛичныеКабинетыПользователей.ИД_ПОДСИСТЕМЫ, 
                    "ЛичныеКабинетыПользователейОбновитьСтроковыеРесурсы", 
                    &ЛичныеКабинетыПользователей.ОбновитьСтроковыеРесурсы()
                )
            ]
;

@ВПроекте
@Реализация
метод ОбработчикиОбновления(): Массив<СтандартноеПриложение.ОписаниеОбработчикаОбновления>
    пер Обработчики: Массив<СтандартноеПриложение.ОписаниеОбработчикаОбновления>
    пер Сервис = ЛичныеКабинетыПользователейПоставщикВерсииПриложения.ПолучитьСервис()
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаОбновления(
                ЛичныеКабинетыПользователей.ИД_ПОДСИСТЕМЫ, 
                "ЛичныеКабинетыПользователейОбновитьСтроковыеРесурсы", 
                &ЛичныеКабинетыПользователей.ОбновитьСтроковыеРесурсы(), 
                Сервис.ЛичныеКабинетыПользователейОбновитьСтроковыеРесурсы()))
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаОбновления(
                ЛичныеКабинетыПользователей.ИД_ПОДСИСТЕМЫ, 
                "ПереносАдресаПриложения", 
                &ПереносАдресаПриложения(), 
                Сервис.ПереносАдресаПриложения()))
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаОбновления(
                ЛичныеКабинетыПользователей.ИД_ПОДСИСТЕМЫ, 
                "ИнформационныеСистемыФизическихЛицЗаполнитьРазделителиВыгружаемыхДанных", 
                &ИнформационныеСистемыФизическихЛиц.ЗаполнитьРазделителиВыгружаемыхДанных(), 
                Сервис.ИнформационныеСистемыФизическихЛицЗаполнитьРазделителиВыгружаемыхДанных()))
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаОбновления(
                ЛичныеКабинетыПользователей.ИД_ПОДСИСТЕМЫ, 
                "ЛичныеКабинетыОтключитьКабинетыДеактивированныхФизическихЛиц", 
                &ЛичныеКабинеты.ОтключитьКабинетыДеактивированныхФизическихЛиц(), 
                Сервис.ЛичныеКабинетыОтключитьКабинетыДеактивированныхФизическихЛиц()))
    возврат Обработчики
;

// Конец ОбновляемаяПодсистема


// Контракт ФизическиеЛицаОбработчикСобытий
@ВПроекте
@Реализация
метод ПередУдалениемФизлица(ФизическоеЛицо: ФизическиеЛица.Ссылка)
;
    
@ВПроекте
@Реализация
метод ПослеЗаписиФизлицПриЗагрузке(Физлица: ЧитаемыйМассив<ФизическиеЛица.Ссылка>)
    для ФизическоеЛицо из Физлица
        ЛичныеКабинетыПользователей.СоздатьЛичныйКабинетЕслиВозможно(ФизическоеЛицо)
    ;
;

@ВПроекте
@Реализация
метод ПослеДеактивацииФизлица(Физлица: Массив<ФизическиеЛица.Ссылка>)
    ЛичныеКабинетыПользователей.УдалитьЛичныеКабинеты(Физлица)
;

@ВПроекте
@Реализация
метод ПослеЗаписиГруппыОбъектов(ФизическоеЛицо: ФизическиеЛица.Ссылка, Отправитель: ВходящиеДанные.Ссылка)
    ЛичныеКабинетыПользователей.ОбновитьИнформационнуюСистемуФизическогоЛица(ФизическоеЛицо, Отправитель)
;

// Конец ФизическиеЛицаОбработчикСобытий

// Контракт ЛичныеДанныеОбработчикСобытий

@ВПроекте
@Реализация
метод ПослеЗаписиЛичныхДанных(ТекущееЗначение: ЛичныеДанныеФизическихЛиц.Объект, ПредыдущееЗначение: ЛичныеДанныеФизическихЛиц.Данные)
    ЛичныеКабинетыПользователей.СоздатьЛичныйКабинетЕслиВозможно(ТекущееЗначение.Владелец)
;

// Конец ЛичныеДанныеОбработчикСобытий

// Контракт РабочиеКонтактыОбработчикСобытий

@ВПроекте
@Реализация
метод ПослеЗаписиРабочихКонтактов(ТекущееЗначение: РабочиеКонтактыФизическихЛиц.Объект, ПредыдущееЗначение: РабочиеКонтактыФизическихЛиц.Данные)
    ЛичныеКабинетыПользователей.СоздатьЛичныйКабинетЕслиВозможно(ТекущееЗначение.Владелец)
;
// Конец РабочиеКонтактыОбработчикСобытий

//Контракт ДанныеApi
@ВПроекте
@Реализация
метод МассивТипов(Получатель: ВидПриложения?, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>
    возврат Типы
;

@ВПроекте
@Реализация
метод ТипДанныхJson(ТипОбъекта: Тип, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>
    выбор ТипОбъекта
    когда Тип<УчетныеЗаписиADСервиса.Ссылка>
        Типы.Добавить(УчетныеЗаписиADСервиса.ТипДанныхJson(ВерсияФорматаОбмена))
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод ТипКоллекцииДанныхJson(ТипОбъекта: Тип, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>
    выбор ТипОбъекта
    когда Тип<УчетныеЗаписиADСервиса.Ссылка>
        Типы.Добавить(УчетныеЗаписиADСервиса.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод ИнструментыМенеджераОбъекта(ТипОбъекта: Тип): Массив<ВебApiСервер.ИнструментыМенеджераОбъекта>
    пер НаборИнструментыМенеджераОбъекта: Массив<ВебApiСервер.ИнструментыМенеджераОбъекта>
    пер ИнструментыМенеджераОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта
    выбор ТипОбъекта
    когда Тип<УчетныеЗаписиADСервиса.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как УчетныеЗаписиADСервиса.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    ;
    возврат НаборИнструментыМенеджераОбъекта
;

@ВПроекте
@Реализация
метод ПолучитьДанныеJson(ТипОбъекта: Тип, Ссылка: ВходящиеДанные.Ссылка|ИсходящиеДанные.Ссылка, 
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<Объект?>
    
    пер ДанныеJson: Массив<Объект?>
    возврат ДанныеJson
;

@ВПроекте
@Реализация
метод МассивСсылокПоФильтру(ТипОбъекта: Тип, Фильтр: () -> ЧитаемыйМассив<Справочник.Ссылка>): Массив<ЧитаемыйМассив<Справочник.Ссылка>>
    пер МассивСсылок: Массив<ЧитаемыйМассив<Справочник.Ссылка>>
    возврат МассивСсылок
;

@ВПроекте
@Реализация
метод УдалитьОбъекты(ТипОбъекта: Тип, ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>, Сервисы: ВебApiСервер.СервисыУдаленияОбъектов)
;

@ВПроекте
@Реализация
метод ТипОбъектаJson(ТипОбъекта: Тип): Массив<Строка>
    пер ТипОбъектаJson: Массив<Строка>
    выбор ТипОбъекта
    когда Тип<УчетныеЗаписиADСервиса.Ссылка>
        ТипОбъектаJson.Добавить(УчетныеЗаписиADСервиса.ТипОбъектаJson())
    ;
    возврат ТипОбъектаJson
;

@ВПроекте
@Реализация
метод ЗагрузитьОбъектИзJson(ТипОбъекта: Тип, ТипДанных: Тип, ДанныеJson: Объект?, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    выбор ТипОбъекта
    когда Тип<УчетныеЗаписиADСервиса.Ссылка>
        выбор ТипДанных
        когда Тип<УчетныеЗаписиADСервиса.ДанныеУчетнойЗаписиADСервиса_V1_0>
            УчетныеЗаписиADСервиса.ЗагрузитьОбъектИзJson(ДанныеJson как УчетныеЗаписиADСервиса.ДанныеУчетнойЗаписиADСервиса_V1_0, Сервисы)
        ;
    ;
;

@ВПроекте
@Реализация
метод ПослеЗаписиГруппыОбъектов(ТипОбъекта: Тип, МассивОбъектовОтложенногоОбновления: Массив<ВебApiСервер.ОбъектОтложенногоОбновления>)
;

@ВПроекте
@Реализация
метод ИзменитьОбъектИзJson(ТипОбъекта: Тип, ДанныеJson: Объект, Сервисы: ВебApiСервер.СервисыЗагрузкиJson, ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации)
;

@ВПроекте
@Реализация
метод ЗавершитьИзменениеОбъектИзJson(ТипОбъекта: Тип, МассивСсылок: ЧитаемыйМассив<ВходящиеДанные.Ссылка>, ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации)
;

@ВПроекте
@Реализация
метод ГруппаИзмененийВJson(ТипОбъекта: Тип, Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<ЧитаемоеСоответствие<Строка, Массив<Объект?>>>
    
    пер ДанныеJson: Массив<ЧитаемоеСоответствие<Строка, Массив<Объект?>>>
    возврат ДанныеJson
;

//Конец ДанныеApi

// Контракт ОписаниеПользователяПоставщик
@ВПроекте
@Реализация
метод ОбновитьОписаниеПользователя(ФизическоеЛицо: ФизическиеЛица.Ссылка?, ОписаниеПользователя: ОписаниеПользователя): ПользователиСистемы.РезультатИзмененияОписанияПользователя
    возврат ЛичныеКабинетыПользователей.ОбновитьОписаниеПользователя(ФизическоеЛицо, ОписаниеПользователя)
;
// Конец ОписаниеПользователяПоставщик

метод ДоступностьКабинета(ФизическоеЛицо: ФизическиеЛица.Ссылка): Булево
    пер ДоступностьКабинета: Булево
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч СведенияОЛичныхКабинетах: ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, ЛичныеКабинетыПользователей.СведенияОЛичномКабинете>
        = ЛичныеКабинетыПользователей.СведенияОЛичныхКабинетах([ФизическоеЛицо])
        
    ПривилегированныйРежим.Закрыть()
    если не СведенияОЛичныхКабинетах.Пусто()
        ДоступностьКабинета = (СведенияОЛичныхКабинетах[ФизическоеЛицо].Доступность == ДоступностьЛичногоКабинета.Включен)
    ;
    возврат ДоступностьКабинета
;

// Контаркт ДвоичныеДанныеПоставщик

@ВПроекте
@Реализация
метод ПолучитьРесурс(ИмяРесурса: Строка): УниверсальныеМеханизмы.ДанныеРесурса?
    пер ДанныеРесурса: УниверсальныеМеханизмы.ДанныеРесурса?
    если ИмяРесурса == "GP.png"
        ДанныеРесурса = новый УниверсальныеМеханизмы.ДанныеРесурса(Ресурс{GP.png}.Ссылка, "image/png")
    иначе если ИмяРесурса == "AS.png"
        ДанныеРесурса = новый УниверсальныеМеханизмы.ДанныеРесурса(Ресурс{AS.png}.Ссылка, "image/png")
    иначе если ИмяРесурса == "RS.png"
        ДанныеРесурса = новый УниверсальныеМеханизмы.ДанныеРесурса(Ресурс{RS.png}.Ссылка, "image/png")
    иначе если ИмяРесурса == "AG.png"
        ДанныеРесурса = новый УниверсальныеМеханизмы.ДанныеРесурса(Ресурс{AG.png}.Ссылка, "image/png")
    ;
    возврат ДанныеРесурса
;

// Конец ДвоичныеДанныеПоставщик

// Контракт ВторичныеДанные

@ВПроекте
@Реализация
метод Пересчитать()
    ЛичныеКабинетыПользователей.ОбновитьСтроковыеРесурсы()
;

// Конец ВторичныеДанные

метод ПереносАдресаПриложения()
    знч Запрос = Запрос{
        Выбрать Первые 1
            УдалитьАдресСервиса
        из НастройкиСозданияКабинетов}
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        СтандартноеПриложение.ЗаписатьНастройкиПриложения(новый СтандартноеПриложение.НастройкиПриложения(СтрокаРезультата.УдалитьАдресСервиса))
        прервать
    ;
;