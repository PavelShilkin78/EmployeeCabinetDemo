импорт ВебApi
импорт Компания
импорт КонтрольДоступа
импорт ОбменДанными
импорт ОбщиеСтандартные
импорт СтандартноеПриложение
импорт Уведомления
импорт УниверсальныеМеханизмы
импорт ФизическиеЛица

@ВПроекте
@НаКлиенте
конст ИЗМЕНЕНЫ_ДАННЫЕ_ЛИЧНЫХ_КАБИНЕТОВ = "ИзмененыДанныеЛичныхКабинетов"

конст ИМЯ_ФАЙЛА_QR_КОДА_ВХОДА_В_ЛИЧНЫЙ_КАБИНЕТ = "QR-код активации"

@ВПодсистеме
конст КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: Строка = "АдминистрированиеПараметрыСеанса" 

@ВПроекте
конст ИД_ПОДСИСТЕМЫ = "ЛичныеКабинетыПользователей"

@ВПроекте
конст СЕРВЕР_WELCOME = "https://welcome.1c-cabinet.ru"

@ВПроекте
конст ПРИЛОЖЕНИЕ_WELCOME = "esscurl"

@ВПроекте
структура ПараметрыСеанса
    пер ДоступностьКабинета: Булево
    пер ТекущееФизическоеЛицо: ФизическиеЛица.Ссылка?
;

@ВПроекте
структура НастройкиЛичныхКабинетов
    пер Ссылка: НастройкиСозданияКабинетов.Ссылка?
    пер АдресСервиса: Строка
    пер СоздаватьКабинетыАвтоматически: Булево
    пер ОтправлятьПриглашенияАвтоматически: Булево
    пер ЗапрашиватьЛогинПриАктивацииМобильногоПриложения: Булево
;

структура НастройкиСозданияКабинетов
    пер ИдEssWelcome: Строка
    пер АдресСервиса: Строка
    пер ТемаПисьмаПриглашения: Строка
    пер ТекстПисьмаПриглашения: Строка
    пер ТекстСообщенияПриглашения: Строка
    пер ТемаПисьмаПодключения: Строка
    пер ТекстПисьмаПодключения: Строка
    пер ЗапрашиватьЛогинПриАктивацииМобильногоПриложения: Булево
;

@ВПроекте
структура СведенияОЛичномКабинете
    пер Ссылка: ЛичныеКабинеты.Ссылка? 
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка?
    пер ИдПользователя: Ууид 
    пер ЛогинПользователя: Строка
    пер Состояние: СостоянияЛичногоКабинета
    пер Доступность: ДоступностьЛичногоКабинета
    пер ОшибкаПриСозданииЛичногоКабинета: Строка
    пер ДатаОтправкиПриглашения: Момент?
    пер ОшибкаПриОтправкеПриглашения: Строка
    пер ПриглашениеУспешноОтправлено: Булево
;

@ВПодсистеме
перечисление СпособыОтправкиПриглашений
    ЭлектроннаяПочта,
    СообщениеSMS,
    СпособПоУмолчанию умолчание
;

@ВПодсистеме
исключение ИсключениеНеуникальныйЛичныйКабинет
;

@ВПроекте
структура ДанныеСозданияЛичногоКабинета
    обз знч ФизическоеЛицо: ФизическиеЛица.Ссылка?
    пер ЛогинПользователя: Строка
    пер ДанныеФизическогоЛица: ФизЛица.ДанныеФизлица?
    пер ЭтоАдминистратор: Булево = Ложь
    пер Ссылка: ЛичныеКабинеты.Ссылка?
    пер Пользователь: Пользователи.Ссылка?
;

@ВПроекте
@НаКлиенте
метод ПараметрыСеанса(): ПараметрыСеанса
    возврат ПараметрыСеансаСервис.ПолучитьСервис().ПараметрПоКлючу(КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА) как ПараметрыСеанса
;

@ВПроекте
@НаСервере
метод СоздатьЛичныйКабинетАдминистратора(ДанныеСозданияЛичногоКабинета: ДанныеСозданияЛичногоКабинета)
    ДанныеСозданияЛичногоКабинета.ЭтоАдминистратор = Истина
    ПользователиСистемы.ПроверитьПраваАдминистратора()
    знч ПользователиПоИдентификаторам = ПользователиСистемы.ПользователиПоИдентификаторам()
    знч ЛогиныПользователей = новый Соответствие<Строка, Строка>(ПользователиСистемы.ИспользованныеЛогины(ПользователиПоИдентификаторам))
    СоздатьЛичныйКабинет(ДанныеСозданияЛичногоКабинета, ЛогиныПользователей, Истина)
    ЛичныеКабинетыОбработчикСобытий.ПолучитьСервисы().ДляКаждого(
        Сервис -> Сервис.ПослеСозданияЛичногоКабинетаАдминистратора(ДанныеСозданияЛичногоКабинета))
    
;

@ВПроекте
@НаСервере
метод СоздатьЛичныйКабинетЕслиВозможно(ФизическоеЛицо: ФизическиеЛица.Ссылка)
    знч ТекущиеНастройки = ТекущиеНастройкиСозданияУчетныхЗаписей()
    если не ТекущиеНастройки.СоздаватьКабинетыАвтоматически
        возврат
    ;
    
    знч ДанныеФизическогоЛица = ФизЛица.ДанныеФизическогоЛица(ФизическоеЛицо, ЗапрашиваемыеДанныеФизическогоЛицаДляСозданияКабинета())
    
    если ДанныеФизическогоЛица.РабочаяКонтактнаяИнформация.ЭлектроннаяПочта.Пусто()
        и ДанныеФизическогоЛица.РабочаяКонтактнаяИнформация.МобильныйТелефон.Пусто()
        
        возврат
    ;
    
    если (ДанныеФизическогоЛица.ЛичныеДанные.ФИО.Фамилия
        + ДанныеФизическогоЛица.ЛичныеДанные.ФИО.Имя
        + ДанныеФизическогоЛица.ЛичныеДанные.ФИО.Отчество).Пусто()
    
        возврат
    ;
    
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч Пользователь =
        ПользователиСистемы.ПользователиФизическихЛиц(новый ЧитаемоеМножество<ФизическиеЛица.Ссылка>([ФизическоеЛицо]))
            .ПолучитьИлиУмолчание(ФизическоеЛицо)
    если Пользователь != Неопределено
        возврат
    ;
    
    знч ЛичныйКабинет = ЛичныеКабинеты.ЛичныйКабинетФизлица(ФизическоеЛицо)
    ПривилегированныйРежим.Закрыть()
    если ЛичныйКабинет != Неопределено
        возврат
    ; 
    
    ПользователиСистемы.ПроверитьПраваАдминистратора()
    знч ПользователиПоИдентификаторам: ЧитаемоеСоответствие<ИдПользователя, ОписаниеПользователя>
        = ПользователиСистемы.ПользователиПоИдентификаторам()
        
    знч Логины = новый Соответствие<Строка, Строка>(ПользователиСистемы.ИспользованныеЛогины(ПользователиПоИдентификаторам))
    
    знч ДанныеСозданияЛичногоКабинета = новый ДанныеСозданияЛичногоКабинета(ФизическоеЛицо)
    ДанныеСозданияЛичногоКабинета.ДанныеФизическогоЛица = ДанныеФизическогоЛица
    ДанныеСозданияЛичногоКабинета.ЛогинПользователя = ИмяУчетнойЗаписиПоУмолчанию(ДанныеФизическогоЛица, Логины)
    СоздатьЛичныйКабинетПриватная(ДанныеСозданияЛичногоКабинета, Ложь)
;

@НаСервере
метод СоздатьЛичныйКабинет(ДанныеСозданияЛичногоКабинета: ДанныеСозданияЛичногоКабинета, 
        ЛогиныПользователей: ЧитаемоеСоответствие<Строка, Строка>, ВыбрасыватьИсключение: Булево = Ложь)
    
    знч ДанныеФизическогоЛица = ФизЛица.ДанныеФизическогоЛица(ДанныеСозданияЛичногоКабинета.ФизическоеЛицо, ЗапрашиваемыеДанныеФизическогоЛицаДляСозданияКабинета())
    ДанныеСозданияЛичногоКабинета.ДанныеФизическогоЛица = ДанныеФизическогоЛица
    ДанныеСозданияЛичногоКабинета.Пользователь =
        ПользователиСистемы.ПользователиФизическихЛиц(новый ЧитаемоеМножество<ФизическиеЛица.Ссылка>([ДанныеСозданияЛичногоКабинета.ФизическоеЛицо]))
            .ПолучитьИлиУмолчание(ДанныеСозданияЛичногоКабинета.ФизическоеЛицо)
    если ДанныеСозданияЛичногоКабинета.ЛогинПользователя.Пусто()
        ДанныеСозданияЛичногоКабинета.ЛогинПользователя = ИмяУчетнойЗаписиПоУмолчанию(ДанныеФизическогоЛица, ЛогиныПользователей)
    ;
    
    ДанныеСозданияЛичногоКабинета.Ссылка = ЛичныеКабинеты.ЛичныйКабинетФизлица(ДанныеСозданияЛичногоКабинета.ФизическоеЛицо)
    
    СоздатьЛичныйКабинетПриватная(ДанныеСозданияЛичногоКабинета, ВыбрасыватьИсключение)
;

@ВПодсистеме
@НаСервере
метод СоздатьЛичныеКабинеты(СсылкиФизическихЛиц: ЧитаемоеМножество<ФизическиеЛица.Ссылка>, ЛогиныПользователей: Соответствие<Строка, Строка>): 
    ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, КонтрольДоступа.СтроковыеИдентификаторыПользователя>
    
    знч СведенияОПользователях: Соответствие<ФизическиеЛица.Ссылка, КонтрольДоступа.СтроковыеИдентификаторыПользователя>
    знч СведенияОЛичныхКабинетах = СведенияОЛичныхКабинетах(СсылкиФизическихЛиц)
    знч ДанныеФизическихЛиц = ФизЛица.ДанныеФизическихЛиц(СсылкиФизическихЛиц, ЗапрашиваемыеДанныеФизическогоЛицаДляСозданияКабинета())
    знч ПользователиФизическихЛиц = ПользователиСистемы.ПользователиФизическихЛиц(СсылкиФизическихЛиц)
        
    для ФизическоеЛицо из СсылкиФизическихЛиц
        знч ДанныеФизическогоЛица = ДанныеФизическихЛиц[ФизическоеЛицо]
        знч СведенияОЛичномКабинете = СведенияОЛичныхКабинетах.ПолучитьИлиУмолчание(ФизическоеЛицо)
        знч ЛичныйКабинетФизлица = СведенияОЛичномКабинете?.Ссылка
        знч ЭтоАдминистратор = ПользователиСистемы.ТекущееФизическоеЛицо() == ФизическоеЛицо
        пер ЛогинПользователя: Строка
        если СведенияОЛичномКабинете != Неопределено
            ЛогинПользователя = СведенияОЛичномКабинете!.ЛогинПользователя
        ;
        если ЛогинПользователя.Пусто()
            ЛогинПользователя = ИмяУчетнойЗаписиПоУмолчанию(ДанныеФизическогоЛица, ЛогиныПользователей)
        ;
        
        знч ДанныеСозданияЛичногоКабинета = новый ДанныеСозданияЛичногоКабинета(ФизическоеЛицо)
        ДанныеСозданияЛичногоКабинета.ЭтоАдминистратор = ЭтоАдминистратор
        ДанныеСозданияЛичногоКабинета.Ссылка = ЛичныйКабинетФизлица
        ДанныеСозданияЛичногоКабинета.ЛогинПользователя = ЛогинПользователя
        ДанныеСозданияЛичногоКабинета.Пользователь = ПользователиФизическихЛиц.ПолучитьИлиУмолчание(ФизическоеЛицо)
        ДанныеСозданияЛичногоКабинета.ДанныеФизическогоЛица = ДанныеФизическогоЛица    
        знч СведенияОПользователе = СоздатьЛичныйКабинетПриватная(ДанныеСозданияЛичногоКабинета, Ложь) 
        СведенияОПользователях.Вставить(ФизическоеЛицо, СведенияОПользователе)
        ЛогиныПользователей.Вставить(СведенияОПользователе.Логин, СведенияОПользователе.Логин)
    ;
    возврат СведенияОПользователях
;

@НаСервере
метод СоздатьЛичныйКабинетПриватная(ДанныеСозданияЛичногоКабинета: ДанныеСозданияЛичногоКабинета, ВыбрасыватьИсключение: Булево): КонтрольДоступа.СтроковыеИдентификаторыПользователя
        
    знч СтроковыеИдентификаторыПользователя: КонтрольДоступа.СтроковыеИдентификаторыПользователя
    пер ПользовательСсылка: Пользователи.Ссылка?
    пер СоздатьПользователя: Булево
    пер ЛичныйКабинет: ЛичныеКабинеты.Объект?
    знч ЛогинПользователя: Строка = ДанныеСозданияЛичногоКабинета.ЛогинПользователя
    знч ДанныеФизическогоЛица = ДанныеСозданияЛичногоКабинета.ДанныеФизическогоЛица
    знч ЭлектроннаяПочта: Строка = ДанныеФизическогоЛица.РабочаяКонтактнаяИнформация.ЭлектроннаяПочта
    пер МобильныйТелефон: Строка = ДанныеФизическогоЛица.РабочаяКонтактнаяИнформация.МобильныйТелефон
    пер ЗаписатьЛичныйКабинет: Булево
    
    исп Транзакции.Начать()
    
    если ДанныеСозданияЛичногоКабинета.Ссылка == Неопределено 
        ЛичныйКабинет = новый ЛичныеКабинеты.Объект()
        ЛичныйКабинет!.ФизическоеЛицо = ДанныеСозданияЛичногоКабинета.ФизическоеЛицо
        ЛичныйКабинет!.ЛогинПользователя = ДанныеСозданияЛичногоКабинета.ЛогинПользователя
    иначе
        // Читаем с блокировкой для корректной обработки состояния ЛК
        ЛичныйКабинет = ДанныеСозданияЛичногоКабинета.Ссылка!.ЗагрузитьОбъект(Истина)
        ЛичныйКабинет.Доступность = ДоступностьЛичногоКабинета.Включен
        если ЛичныйКабинет!.ЛогинПользователя != ДанныеСозданияЛичногоКабинета.ЛогинПользователя
            ЛичныйКабинет!.ЛогинПользователя = ДанныеСозданияЛичногоКабинета.ЛогинПользователя
        ;
    ;

    если ДанныеСозданияЛичногоКабинета.Пользователь != Неопределено
        ПользователиСистемы.ПроверитьПраваАдминистратора()
        исп ПривилегированныйРежим = КонтекстДоступа.Привилегированный()
        если не КонтрольДоступа.ПользовательСуществует(ДанныеСозданияЛичногоКабинета.Пользователь!) 
                или не ПользователиСистемы.ПользовательСервисаСуществует(ДанныеСозданияЛичногоКабинета.Пользователь!)
            СоздатьПользователя = Истина
        иначе
            ПользовательСсылка = ДанныеСозданияЛичногоКабинета.Пользователь
        ;
        ПривилегированныйРежим.Закрыть()
    иначе
        СоздатьПользователя = Истина
    ;
     
    знч РезультатПроверок = ПолучитьРезультатПроверокПриСозданииЛичногоКабинета( 
        новый ПараметрыПроверокДанныхЛичногоКабинета(
            ЛичныйКабинет = ЛичныйКабинет!,
            ЛогинПользователя = ЛогинПользователя,
            МобильныйТелефон = МобильныйТелефон,
            ЭлектроннаяПочта = ЭлектроннаяПочта,
            СоздатьПользователя = СоздатьПользователя,
            ВыбрасыватьИсключение = ВыбрасыватьИсключение))
    
    // Записываем личный кабинет не смотря на то, что, возможно, в него помещена еще не вся информация
    // Для того, чтобы избежать повторого создания при записи физического лица
    ЛичныйКабинет!.Записать()
    ЗаписатьЛичныйКабинет = Ложь
    
    если не РезультатПроверок.СодержитОшибки    
        // Приводим к канонической форме, если проверки пройдены
        МобильныйТелефон = МенеджерСтрок.КанонизированныйНомерТелефона(МобильныйТелефон)
    ;
    
    знч СвойстваПользователя = новый КонтрольДоступа.СвойстваПользователя(ДанныеСозданияЛичногоКабинета.ФизическоеЛицо, ЛогинПользователя)
    если ДанныеСозданияЛичногоКабинета.ЭтоАдминистратор
        СвойстваПользователя.РолиДоступа.Добавить(РолиДоступа.АдминистраторАбонента)
    ;
    СвойстваПользователя.ЛогинПользователя = ДанныеСозданияЛичногоКабинета.ЛогинПользователя
    СвойстваПользователя.Представление = ДанныеСозданияЛичногоКабинета.ЛогинПользователя
    СвойстваПользователя.ФизическоеЛицо = ДанныеСозданияЛичногоКабинета.ФизическоеЛицо
    если не ЭлектроннаяПочта.Пусто()
        СвойстваПользователя.ЭлектроннаяПочта = ЭлектроннаяПочта
    ; 
    если не МобильныйТелефон.Пусто()
        СвойстваПользователя.Телефон = МобильныйТелефон
    ; 
    если ПользовательСсылка != Неопределено
        СвойстваПользователя.Ссылка = ПользовательСсылка
    ;

    знч ОбработатьОшибкуВДанныхЛичногоКабинета = метод(Ошибка: Исключение) ->
        Журналирование.ЗарегистрироватьОшибку(Ошибка)
        ЛичныйКабинет.Состояние = СостоянияЛичногоКабинета.ОшибкаСоздания
        ЛичныйКабинет.ОшибкаПриСозданииЛичногоКабинета = Ошибка.Описание
        если ВыбрасыватьИсключение
            ЛичныйКабинет.Записать()
            выбросить Ошибка
        ;
    ;
    
    если не РезультатПроверок.СодержитОшибки
        попытка
            если СоздатьПользователя
                знч ЭтоРуководитель: Булево = не ОрганизационнаяСтруктура.ПодразделенияРуководителя(ДанныеСозданияЛичногоКабинета.ФизическоеЛицо).Пусто()
                СвойстваПользователя.ЭтоРуководитель = ЭтоРуководитель
                ПользовательСсылка = ПользователиСистемы.СоздатьПользователя(СвойстваПользователя).Ссылка
                ДанныеСозданияЛичногоКабинета.Пользователь = ПользовательСсылка
            иначе
                ПользователиСистемы.ИзменитьПользователя(СвойстваПользователя)
            ;
            ПользователиСистемы.ПроверитьПраваАдминистратора()
            исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
            знч ПользовательОбъект: Пользователи.Объект? = ПользовательСсылка!.ЗагрузитьОбъект()
            знч ОписаниеПользователя: ОписаниеПользователя = ПользователиСервиса.Найти(ПользовательОбъект!.Ид)!
            ПривилегированныйРежим.Закрыть()
            
            знч Состояние: СостоянияЛичногоКабинета = СостояниеЛичногоКабинета(ОписаниеПользователя, ЛичныйКабинет!.ПриглашениеУспешноОтправлено, ПользовательОбъект!.БылУспешныйВход)            
            ЛичныйКабинет.Состояние = Состояние
            ЛичныйКабинет.ОшибкаПриСозданииЛичногоКабинета = ""
            ЛичныйКабинет.ИдПользователя = ОписаниеПользователя.Ид.Ид
            ЗаписатьЛичныйКабинет = Истина
            СтроковыеИдентификаторыПользователя.Логин = ДанныеСозданияЛичногоКабинета.ЛогинПользователя
            СтроковыеИдентификаторыПользователя.Телефон = МобильныйТелефон
            СтроковыеИдентификаторыПользователя.ЭлектроннаяПочта = ЭлектроннаяПочта
            
        поймать Ошибка: ИсключениеPaas           
            // Оборачиваем исключение паас в понятное пользователю
            знч ОшибкаPaas = новый ИсключениеВыполнения("Не удалось создать пользователя %{СвойстваПользователя.ЛогинПользователя}. Обратитесь к администратору.", Ошибка)
            ОбработатьОшибкуВДанныхЛичногоКабинета(ОшибкаPaas)
            ЗаписатьЛичныйКабинет = Истина
            
        поймать Ошибка: Исключение
            ОбработатьОшибкуВДанныхЛичногоКабинета(Ошибка)
            ЗаписатьЛичныйКабинет = Истина
            
        вконце
            если ЗаписатьЛичныйКабинет
                ЛичныйКабинет!.Записать()
                ЗаписатьЛичныйКабинет = Ложь
            ;
        ;
    ;
    
    ЗапланироватьОтправкуПриглашения(ДанныеСозданияЛичногоКабинета.ФизическоеЛицо)
    возврат СтроковыеИдентификаторыПользователя
;
    
@Локально
структура ПараметрыПроверокДанныхЛичногоКабинета
    обз знч ЛичныйКабинет: ЛичныеКабинеты.Объект
    обз знч ЛогинПользователя: Строка
    обз знч МобильныйТелефон: Строка
    обз знч ЭлектроннаяПочта: Строка
    обз знч СоздатьПользователя: Булево
    обз знч ВыбрасыватьИсключение: Булево
;    

@Локально
структура РезультатПроверкиУчетныхДанных
    обз знч СодержитОшибки: Булево
    обз знч Ошибка: Исключение | Неопределено
;    

@НаСервере
@Локально
метод ПолучитьРезультатПроверокПриСозданииЛичногоКабинета( Параметры: ПараметрыПроверокДанныхЛичногоКабинета): РезультатПроверкиУчетныхДанных

    знч ПользователиПоИдентификаторам = ПользователиСистемы.ПользователиПоИдентификаторам()
    знч АдресаЭлектроннойПочтыПользователей = ПользователиСистемы.ИспользованныеАдресаЭлектроннойПочты(ПользователиПоИдентификаторам)
    знч ЛогиныПользователей = ПользователиСистемы.ИспользованныеЛогины(ПользователиПоИдентификаторам)
    знч ТелефоныПользователей = ПользователиСистемы.ИспользованныеТелефоны(ПользователиПоИдентификаторам)

    знч Ошибки = <РезультатПроверкиУчетныхДанных>[]
                
    // Пользуемся замыканием, для того, чтобы Актуализировать контекст ЛК и результатов проверки
    знч ОбработатьОшибкуВДанныхЛичногоКабинета = метод(Ошибка: Исключение) ->
        Журналирование.ЗарегистрироватьОшибку(Ошибка)
        Параметры.ЛичныйКабинет.Состояние = СостоянияЛичногоКабинета.ОшибкаСоздания
        Параметры.ЛичныйКабинет.ОшибкаПриСозданииЛичногоКабинета = Ошибка.Описание
        если Параметры.ВыбрасыватьИсключение
            Параметры.ЛичныйКабинет.Записать()
            выбросить Ошибка
        ;
        
        Ошибки.Добавить(новый РезультатПроверкиУчетныхДанных(СодержитОшибки = Истина, Ошибка = Ошибка))
    ;
    
    // Блок проверок        
    если Параметры.СоздатьПользователя 
        и не Параметры.ЛогинПользователя.Пусто() и ЛогиныПользователей.СодержитКлюч(Параметры.ЛогинПользователя)
        // Учетная запись не уникальна
        знч Ошибка = новый ИсключениеВалидации(
            Описание = "Пользователь с таким логином уже существует (логин - %{Параметры.ЛогинПользователя})")
        ОбработатьОшибкуВДанныхЛичногоКабинета(Ошибка)                
    ;   

    если не Параметры.МобильныйТелефон.Пусто()
        попытка
            знч МобильныйТелефон = МенеджерСтрок.КанонизированныйНомерТелефона(Параметры.МобильныйТелефон)
            если Параметры.СоздатьПользователя и ТелефоныПользователей.СодержитКлюч(МобильныйТелефон)
                // Такой телефон уже присвоен
                знч ПредставлениеПользователя: Строка = ТелефоныПользователей.Получить(МобильныйТелефон)
                знч Ошибка = новый ИсключениеВалидации(
                    Описание = "Пользователь с таким телефоном (%{МобильныйТелефон}) уже существует (логин - %{ПредставлениеПользователя})")
                ОбработатьОшибкуВДанныхЛичногоКабинета(Ошибка)    
            ;                            
        поймать Ошибка: МенеджерСтрок.ИсключениеНедопустимыеСимволыНомераТелефона|МенеджерСтрок.ИсключениеНеверныйФорматНомераТелефона
            // Телефон не может быть приведен к какноническому виду
            ОбработатьОшибкуВДанныхЛичногоКабинета(Ошибка)
        ;
    ;   

    если Параметры.СоздатьПользователя 
        и не Параметры.ЭлектроннаяПочта.Пусто() и АдресаЭлектроннойПочтыПользователей.СодержитКлюч(Параметры.ЭлектроннаяПочта)
        // Такой e-mail уже присвоен
        знч ПредставлениеПользователя = АдресаЭлектроннойПочтыПользователей.Получить(Параметры.ЭлектроннаяПочта)
        знч Ошибка = новый ИсключениеВалидации(
            Описание = "Пользователь с такой электронной почтой (%{Параметры.ЭлектроннаяПочта}) уже существует (логин - %{ПредставлениеПользователя})")
        ОбработатьОшибкуВДанныхЛичногоКабинета(Ошибка)
    ;   
            
    возврат Ошибки.ПервыйИлиУмолчание() ?? новый РезультатПроверкиУчетныхДанных(СодержитОшибки = Ложь, Ошибка = Неопределено)   
;

@ВПодсистеме
метод ЗапрашиваемыеДанныеФизическогоЛицаДляСозданияКабинета(): ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц
    знч ЗапрашиваемыеДанные: ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц
    ЗапрашиваемыеДанные.РабочаяКонтактнаяИнформация = Истина
    ЗапрашиваемыеДанные.ЛичныеДанные = Истина
    возврат ЗапрашиваемыеДанные
;

@ВПроекте
@НаСервере
метод ТекущиеНастройкиСозданияУчетныхЗаписей(): НастройкиЛичныхКабинетов
    знч ТекущиеНастройки: НастройкиЛичныхКабинетов
    знч Запрос = Запрос{
        Выбрать 
            Ссылка, 
            СоздаватьКабинетыАвтоматически, 
            ОтправлятьПриглашенияАвтоматически,
            ЗапрашиватьЛогинПриАктивацииМобильногоПриложения
         Из 
            НастройкиСозданияКабинетов}
        
    исп РезультатЗапроса = Запрос.Выполнить()
    для РезульатСтрока из РезультатЗапроса
        ТекущиеНастройки.Ссылка = РезульатСтрока.Ссылка
        ТекущиеНастройки.СоздаватьКабинетыАвтоматически = РезульатСтрока.СоздаватьКабинетыАвтоматически
        ТекущиеНастройки.ОтправлятьПриглашенияАвтоматически = РезульатСтрока.ОтправлятьПриглашенияАвтоматически
        ТекущиеНастройки.ЗапрашиватьЛогинПриАктивацииМобильногоПриложения = РезульатСтрока.ЗапрашиватьЛогинПриАктивацииМобильногоПриложения
        прервать
    ;
    
    ТекущиеНастройки.АдресСервиса = СтандартноеПриложение.НастройкиПриложения().АдресПриложения
    
    возврат ТекущиеНастройки
;

@ВПроекте
@НаСервере
метод СохранитьНастройки(Настройки: НастройкиЛичныхКабинетов)
    знч ЭлементНастроек = НастройкиСозданияКабинетов.ЭлементНастроекСозданияУчетныхЗаписей()
    знч НастройкиОбъект = ЭлементНастроек.ЗагрузитьОбъект()
    НастройкиОбъект!.СоздаватьКабинетыАвтоматически = Настройки.СоздаватьКабинетыАвтоматически
    НастройкиОбъект!.ОтправлятьПриглашенияАвтоматически = Настройки.ОтправлятьПриглашенияАвтоматически
    НастройкиОбъект!.ЗапрашиватьЛогинПриАктивацииМобильногоПриложения = Настройки.ЗапрашиватьЛогинПриАктивацииМобильногоПриложения
    НастройкиОбъект!.Записать()
;

@ВПроекте
метод СсылкаСЛогином(АдресСервиса: Строка, ЛогинПользователя: Строка): Строка
    возврат АдресСервиса + "?login_hint=%ЛогинПользователя" 
; 
 
@НаСервере
метод ИмяУчетнойЗаписиПоУмолчанию(ДанныеФизическогоЛица: ФизЛица.ДанныеФизлица, ЛогиныПользователей: ЧитаемоеСоответствие<Строка, Строка>): Строка
    пер ИмяУчетнойЗаписиПоУмолчанию: Строка
    пер Стратегия: СтратегияФормированияИмениУчетнойЗаписи
    выбор Стратегия
    когда ФамилияИО
        знч ВариантыПредставления = 
            [
                ФизЛица.ВариантПредставленияИмени.ФамилияИОСлитно,
                ФизЛица.ВариантПредставленияИмени.Фамилия_ИО,
                ФизЛица.ВариантПредставленияИмени.Фамилия_И_О
            ]
        пер НомерПопытки: Число
        пока НомерПопытки < ВариантыПредставления.Размер()
            ИмяУчетнойЗаписиПоУмолчанию = ДанныеФизическогоЛица.ЛичныеДанные.ФИО.ПредставлениеИмени(ВариантыПредставления[НомерПопытки])
            ИмяУчетнойЗаписиПоУмолчанию = ИмяУчетнойЗаписиПоУмолчанию.Заменить(" ", "")
            если не ЛогиныПользователей.СодержитКлюч(ИмяУчетнойЗаписиПоУмолчанию)
                прервать    
            ;
            НомерПопытки += 1
        ;
    ;
    возврат ИмяУчетнойЗаписиПоУмолчанию
;

@ВПроекте
@НаСервере
метод СведенияОЛичныхКабинетах(СсылкиФизическихЛиц: ЧитаемаяКоллекция<ФизическиеЛица.Ссылка>): ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, СведенияОЛичномКабинете>
    
    знч СведенияОЛичныхКабинетах: Соответствие<ФизическиеЛица.Ссылка, СведенияОЛичномКабинете>
    знч Запрос = Запрос{
        Выбрать
            Ссылка, 
            ФизическоеЛицо,
            ИдПользователя,
            ЛогинПользователя,
            Состояние,
            Доступность,
            ОшибкаПриСозданииЛичногоКабинета,
            ДатаОтправкиПриглашения,
            ОшибкаПриОтправкеПриглашения,
            ПриглашениеУспешноОтправлено
        Из 
            ЛичныеКабинеты 
        Где 
            ФизическоеЛицо В(%СсылкиФизическихЛиц)}
    исп РезультатЗапроса = Запрос.Выполнить() 
    для РезультатЗапросаСтрока из РезультатЗапроса
        знч СведенияОЛичномКабинете: СведенияОЛичномКабинете = новый СведенияОЛичномКабинете()
        СведенияОЛичномКабинете.Ссылка = РезультатЗапросаСтрока.Ссылка
        СведенияОЛичномКабинете.ФизическоеЛицо = РезультатЗапросаСтрока.ФизическоеЛицо
        СведенияОЛичномКабинете.ИдПользователя = РезультатЗапросаСтрока.ИдПользователя
        СведенияОЛичномКабинете.ЛогинПользователя = РезультатЗапросаСтрока.ЛогинПользователя
        СведенияОЛичномКабинете.Состояние = РезультатЗапросаСтрока.Состояние
        СведенияОЛичномКабинете.Доступность = РезультатЗапросаСтрока.Доступность
        СведенияОЛичномКабинете.ОшибкаПриСозданииЛичногоКабинета = РезультатЗапросаСтрока.ОшибкаПриСозданииЛичногоКабинета
        СведенияОЛичномКабинете.ДатаОтправкиПриглашения = РезультатЗапросаСтрока.ДатаОтправкиПриглашения
        СведенияОЛичномКабинете.ОшибкаПриОтправкеПриглашения = РезультатЗапросаСтрока.ОшибкаПриОтправкеПриглашения
        СведенияОЛичномКабинете.ПриглашениеУспешноОтправлено = РезультатЗапросаСтрока.ПриглашениеУспешноОтправлено
        СведенияОЛичныхКабинетах.Вставить(РезультатЗапросаСтрока.ФизическоеЛицо, СведенияОЛичномКабинете)
    ;
    возврат СведенияОЛичныхКабинетах
;

@ВПодсистеме
@НаСервере @НаКлиенте
структура РезультатОтправкиПриглашений
    пер ЕстьНеотправленныеПриглашенияУволенным: Булево = Ложь    
    пер ЕстьНеотправленныеПриглашенияВременноОтключенным: Булево = Ложь
;

@ВПодсистеме
@НаСервере
метод ОтправитьПриглашения(ВыбранныеФизическиеЛица: ЧитаемоеМножество<ФизическиеЛица.Ссылка>, СпособОтправкиПриглашения: СпособыОтправкиПриглашений): РезультатОтправкиПриглашений
    
    знч СведенияОЛичныхКабинетах = СведенияОЛичныхКабинетах(ВыбранныеФизическиеЛица)
    знч ДанныеФизическихЛиц = ФизЛица.ДанныеФизическихЛиц(ВыбранныеФизическиеЛица, ЗапрашиваемыеДанныеФизическогоЛицаДляСозданияКабинета())
    
    знч РезультатОтправкиПриглашений = новый РезультатОтправкиПриглашений()
    
    для ФизическоеЛицо из ВыбранныеФизическиеЛица
        знч ДанныеФизическогоЛица = ДанныеФизическихЛиц.Получить(ФизическоеЛицо)
        пер СпособОтправки = СпособОтправкиПриглашения
       
        если СпособОтправки == СпособыОтправкиПриглашений.СпособПоУмолчанию
            СпособОтправки = ДанныеФизическогоЛица.РабочаяКонтактнаяИнформация.МобильныйТелефон.Пусто() ? СпособыОтправкиПриглашений.ЭлектроннаяПочта : СпособыОтправкиПриглашений.СообщениеSMS
        ;
        если не СведенияОЛичныхКабинетах.СодержитКлюч(ФизическоеЛицо)
            СохранитьСведенияОбОтправке(Неопределено, ФизическоеЛицо, "Не создан личный кабинет", СпособОтправки)
            продолжить
        ;
        знч СведенияОЛичномКабинете = СведенияОЛичныхКабинетах[ФизическоеЛицо]
        если не ЛичныйКабинетСуществует(СведенияОЛичномКабинете.Состояние) 
            СохранитьСведенияОбОтправке(СведенияОЛичномКабинете, ФизическоеЛицо, "Не создан личный кабинет", СпособОтправки)
            продолжить
        ;
        если ДанныеФизическогоЛица.РабочаяКонтактнаяИнформация.ЭлектроннаяПочта.Пусто() и ДанныеФизическогоЛица.РабочаяКонтактнаяИнформация.МобильныйТелефон.Пусто()
            СохранитьСведенияОбОтправке(СведенияОЛичномКабинете, ФизическоеЛицо, "Не заполнена контактная информация сотрудника", СпособОтправки)
            продолжить
        ;
        если СведенияОЛичномКабинете.Доступность == ДоступностьЛичногоКабинета.ВременноОтключен
            СохранитьСведенияОбОтправке(СведенияОЛичномКабинете, ФизическоеЛицо, "Личный кабинет временно отключен", СпособОтправки)
            РезультатОтправкиПриглашений.ЕстьНеотправленныеПриглашенияВременноОтключенным = Истина
            продолжить
        ;        
        если Сотрудники.ЭтоУволенныйСотрудник(ФизическоеЛицо)
            СохранитьСведенияОбОтправке(СведенияОЛичномКабинете, ФизическоеЛицо, "Сотрудник уволен", СпособОтправки)
            РезультатОтправкиПриглашений.ЕстьНеотправленныеПриглашенияУволенным = Истина
            продолжить
        ;
        знч НастройкиСозданияКабинетов: НастройкиСозданияКабинетов = НастройкиСозданияКабинетов(Ложь)
        пер КлючАктивации: Строка = ПолучитьКлючАктивации(ФизическоеЛицо, СведенияОЛичномКабинете, НастройкиСозданияКабинетов, СпособОтправки)
        если КлючАктивации.Пусто()
            продолжить
        ;
        пер РезультатОтправки: Уведомления.РезультатОтправкиСообщения?
        если СпособОтправки == СпособыОтправкиПриглашений.ЭлектроннаяПочта
            РезультатОтправки = РезультатОтправкиПоЭлектроннойПочте(ДанныеФизическогоЛица, НастройкиСозданияКабинетов, СведенияОЛичномКабинете, КлючАктивации)
        иначе если СпособОтправки == СпособыОтправкиПриглашений.СообщениеSMS
            РезультатОтправки = РезультатОтправкиПоSMS(ДанныеФизическогоЛица, НастройкиСозданияКабинетов, СведенияОЛичномКабинете, КлючАктивации)
        иначе
            выбросить новый ИсключениеВыполнения("Способ отправки не определен")
        ;
        знч ТекстОшибки: Строка = (РезультатОтправки!.Статус == Уведомления.СтатусыОтправкиСообщений.ОшибкаОтправки) ? РезультатОтправки!.ПредставлениеРезультата : ""
        СохранитьСведенияОбОтправке(СведенияОЛичномКабинете, ФизическоеЛицо, ТекстОшибки, СпособОтправки, РезультатОтправки!.ДатаОтправки)    
    ;
    возврат РезультатОтправкиПриглашений
;

@НаСервере
метод СохранитьСведенияОбОтправке(СведенияОЛичномКабинете: СведенияОЛичномКабинете?, ФизическоеЛицо: ФизическиеЛица.Ссылка,
    ТекстОшибки: Строка, СпособОтправки: СпособыОтправкиПриглашений, ДатаОтправки: Момент? = Неопределено)
    
    пер ЛичныйКабинет: ЛичныеКабинеты.Объект?
    если СведенияОЛичномКабинете != Неопределено
        ЛичныйКабинет = СведенияОЛичномКабинете!.Ссылка!.ЗагрузитьОбъект()
    иначе
        ЛичныйКабинет = новый ЛичныеКабинеты.Объект()
        ЛичныйКабинет!.ФизическоеЛицо = ФизическоеЛицо
    ;
    ЛичныйКабинет!.ДатаОтправкиПриглашения = ДатаОтправки
    если не ТекстОшибки.Пусто()
        ЛичныйКабинет!.ОшибкаПриОтправкеПриглашения = "Ошибка при отправке приглашения: %ТекстОшибки" 
        если ЛичныйКабинетСуществует(ЛичныйКабинет!.Состояние)
            если СпособОтправки == СпособыОтправкиПриглашений.ЭлектроннаяПочта
                ЛичныйКабинет!.Состояние = СостоянияЛичногоКабинета.ОшибкаОтправкиПисьма
            иначе
                ЛичныйКабинет!.Состояние = СостоянияЛичногоКабинета.ОшибкаОтправкиSMS
            ;
        ;
    иначе
        ЛичныйКабинет!.ОшибкаПриОтправкеПриглашения = ""
        если ЛичныйКабинетСуществует(ЛичныйКабинет!.Состояние) и ЛичныйКабинет!.Состояние != СостоянияЛичногоКабинета.Активирован
            ЛичныйКабинет!.Состояние = СостоянияЛичногоКабинета.НеАктивирован
        ;
    ;
    ЛичныйКабинет!.Записать()
;

@НаСервере
метод РезультатОтправкиПоЭлектроннойПочте(
        ДанныеФизическогоЛица: ФизЛица.ДанныеФизлица, 
        НастройкиСозданияКабинетов: НастройкиСозданияКабинетов,
        СведенияОЛичномКабинете: СведенияОЛичномКабинете, 
        КлючАктивации: Строка): Уведомления.РезультатОтправкиСообщения
    
    знч ПараметрыШаблона = ПараметрыШаблона(ДанныеФизическогоЛица, СведенияОЛичномКабинете.ЛогинПользователя, НастройкиСозданияКабинетов, КлючАктивации)
    знч ТекстСообщения = ТекстПриглашенияПоШаблону(НастройкиСозданияКабинетов.ТекстПисьмаПриглашения, ПараметрыШаблона)
    
    пер Результат = Уведомления.ОтправитьEMail(
        ДанныеФизическогоЛица.ЛичныеДанные.ФИО.ПредставлениеИмени(ФизЛица.ВариантПредставленияИмени.ФамилияИмяОтчество),
        ДанныеФизическогоЛица.РабочаяКонтактнаяИнформация.ЭлектроннаяПочта,
        НастройкиСозданияКабинетов.ТемаПисьмаПриглашения,
        ТекстСообщения
    )
    возврат Результат
;

@НаСервере
метод РезультатОтправкиПоSMS(
        ДанныеФизическогоЛица: ФизЛица.ДанныеФизлица, 
        НастройкиСозданияКабинетов: НастройкиСозданияКабинетов,
        СведенияОЛичномКабинете: СведенияОЛичномКабинете,
        КлючАктивации: Строка): Уведомления.РезультатОтправкиСообщения

    знч ПараметрыШаблона = ПараметрыШаблона(ДанныеФизическогоЛица, СведенияОЛичномКабинете.ЛогинПользователя, НастройкиСозданияКабинетов, КлючАктивации) 
    знч ТекстСообщения = ТекстПриглашенияПоШаблону(НастройкиСозданияКабинетов.ТекстСообщенияПриглашения, ПараметрыШаблона)
    возврат Уведомления.ОтправитьSMS(ДанныеФизическогоЛица.РабочаяКонтактнаяИнформация.МобильныйТелефон, ТекстСообщения)
;

@ВПроекте
@НаСервере
метод ОтправитьУведомлениеОПодключенииКСервису(ДанныеФизическогоЛица: ФизЛица.ДанныеФизлица, ЛогинПользователя: Строка)
    знч НастройкиСозданияКабинетов: НастройкиСозданияКабинетов = НастройкиСозданияКабинетов()
    знч ПараметрыШаблона = ПараметрыШаблона(ДанныеФизическогоЛица, ЛогинПользователя, НастройкиСозданияКабинетов)
    знч ТекстСообщения = ТекстПриглашенияПоШаблону(НастройкиСозданияКабинетов.ТекстПисьмаПодключения, ПараметрыШаблона)
    
    Уведомления.ОтправитьEMail(
        ДанныеФизическогоЛица.ЛичныеДанные.ФИО.ПредставлениеИмени(ФизЛица.ВариантПредставленияИмени.ФамилияИмяОтчество),
        ДанныеФизическогоЛица.РабочаяКонтактнаяИнформация.ЭлектроннаяПочта,
        НастройкиСозданияКабинетов.ТемаПисьмаПриглашения,
        ТекстСообщения
    )
;

метод ТекстПриглашенияПоШаблону(Шаблон: Строка, ЗначенияПараметров: ЧитаемоеСоответствие<Строка, Строка>): Строка
    пер ТекстПриглашения = Шаблон
    для КлючИЗначение из ЗначенияПараметров    
        ТекстПриглашения = ТекстПриглашения.Заменить("\%" + КлючИЗначение.Ключ + "\%", КлючИЗначение.Значение)
    ;
    возврат ТекстПриглашения
;

@НаСервере
метод ПараметрыШаблона(
        ДанныеФизическогоЛица: ФизЛица.ДанныеФизлица, 
        ЛогинПользователя: Строка,
        НастройкиСозданияКабинетов: НастройкиСозданияКабинетов,
        КлючАктивации: Строка = ""): ЧитаемоеСоответствие<Строка, Строка>
    
    знч ПараметрыШаблона: Соответствие<Строка, Строка>
    знч АдресПриложения = СтандартноеПриложение.НастройкиПриложения().АдресПриложения
    ПараметрыШаблона.Вставить("Имя", ДанныеФизическогоЛица.ЛичныеДанные.ФИО.Имя.Сократить())
    ПараметрыШаблона.Вставить("ИмяОтчество", ("%{ДанныеФизическогоЛица.ЛичныеДанные.ФИО.Имя} %{ДанныеФизическогоЛица.ЛичныеДанные.ФИО.Отчество}").Сократить())
    ПараметрыШаблона.Вставить("Фамилия", ДанныеФизическогоЛица.ЛичныеДанные.ФИО.Фамилия.Сократить())
    ПараметрыШаблона.Вставить("ЛогинПользователя", ЛогинПользователя)
    ПараметрыШаблона.Вставить("КодАктивации", КлючАктивации)
    ПараметрыШаблона.Вставить("КлючАктивации", КлючАктивации)
    ПараметрыШаблона.Вставить("Ссылка", НастройкиСозданияКабинетов.АдресСервиса) 
    ПараметрыШаблона.Вставить("СсылкаСЛогином", СсылкаСЛогином(НастройкиСозданияКабинетов.АдресСервиса, ЛогинПользователя))
    ПараметрыШаблона.Вставить("ЛоготипПриложения",
        УниверсальныеМеханизмы.СсылкаНаРесурс(АдресПриложения, "app-logo.png"))
    ПараметрыШаблона.Вставить("КартинкаGooglePlay",
        УниверсальныеМеханизмы.СсылкаНаРесурс(АдресПриложения, "GP.png"))
    ПараметрыШаблона.Вставить("КартинкаAppStore",
        УниверсальныеМеханизмы.СсылкаНаРесурс(АдресПриложения, "AS.png"))
    ПараметрыШаблона.Вставить("КартинкаRuStore",
        УниверсальныеМеханизмы.СсылкаНаРесурс(АдресПриложения, "RS.png"))
    ПараметрыШаблона.Вставить("КартинкаAppGallery",
        УниверсальныеМеханизмы.СсылкаНаРесурс(АдресПриложения, "AG.png"))
    ПараметрыШаблона.Вставить("QRКодАктивации",
        СсылкаНаQRКодАктивации(ДанныеФизическогоЛица.ФизическоеЛицо))
    возврат ПараметрыШаблона
;

@НаСервере
метод СсылкаНаQRКодАктивации(ФизическоеЛицо: ФизическиеЛица.Ссылка): Строка
    знч АдресПриложения = СтандартноеПриложение.НастройкиПриложения().АдресПриложения
    возврат "%{МенеджерСтрок.ДобавитьКонечныйСимвол(АдресПриложения)}api/v2.0/activation-qr-code/%{ФизическоеЛицо.Ид.ВСтроку()}/qr.png"
;

@НаСервере
метод ЗапланироватьОтправкуПриглашения(ФизическоеЛицо: ФизическиеЛица.Ссылка)
    пер ТекущиеНастройки = ТекущиеНастройкиСозданияУчетныхЗаписей()
    если не ТекущиеНастройки.ОтправлятьПриглашенияАвтоматически
        возврат
    ;
    МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
    ЗапланированныеЗадания.Создать(&ОтправитьПриглашение, ФизическоеЛицо)
        .Настроить(Ключ = МенеджерЗаданий.КлючЗаданияПоСсылке(ФизическоеЛицо, "ПриглПоИд"))
        .Запланировать()
;

@ВПроекте
@НаСервере
метод ОтправитьПриглашение(ФизическоеЛицо: ФизическиеЛица.Ссылка)
    знч ПараметрыПолученияУведомлений = Уведомления.НастройкиУведомленийФизическогоЛица(ФизическоеЛицо)
    пер СпособОтправкиПриглашений: СпособыОтправкиПриглашений
    пер СпособУведомления: СпособыУведомления?
    знч ЗапрашиваемыеДанныеФизическихЛиц =
        новый ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц(РабочаяКонтактнаяИнформация = Истина)

    знч ДанныеФизлица = ФизЛица.ДанныеФизическихЛиц(
        {ФизическоеЛицо},
        ЗапрашиваемыеДанныеФизическихЛиц).ПолучитьИлиУмолчание(ФизическоеЛицо)
    если ДанныеФизлица == Неопределено
        ОтправитьПриглашения({ФизическоеЛицо}, СпособыОтправкиПриглашений.СпособПоУмолчанию)
        возврат
    ;

    знч НедоступныеСпособыУведомлений = <СпособыУведомления>{СпособыУведомления.Push}
    если ДанныеФизлица.РабочаяКонтактнаяИнформация.МобильныйТелефон.Пусто()
        НедоступныеСпособыУведомлений.Добавить(СпособыУведомления.Sms)
    ;

    если ДанныеФизлица.РабочаяКонтактнаяИнформация.ЭлектроннаяПочта.Пусто()
        НедоступныеСпособыУведомлений.Добавить(СпособыУведомления.EMail)
    ;
    знч ДоступныеСпособыУведомлений = Уведомления.НастройкиУведомлений()
        .Ключи()
        .Разность(НедоступныеСпособыУведомлений)
        .Сортировать((А, Б) -> А.Индекс - Б.Индекс)

    если ПараметрыПолученияУведомлений != Неопределено и ДоступныеСпособыУведомлений.Содержит(
            ПараметрыПолученияУведомлений.ПредпочтительныйСпособУведомления)
        СпособУведомления = ПараметрыПолученияУведомлений.ПредпочтительныйСпособУведомления
    иначе
        СпособУведомления = ДоступныеСпособыУведомлений.ПервыйИлиУмолчание()
    ;

    выбор СпособУведомления
    когда СпособыУведомления.Sms
        СпособОтправкиПриглашений = СпособыОтправкиПриглашений.СообщениеSMS
    когда СпособыУведомления.EMail
        СпособОтправкиПриглашений = СпособыОтправкиПриглашений.ЭлектроннаяПочта
    иначе
        СпособОтправкиПриглашений = СпособыОтправкиПриглашений.СпособПоУмолчанию
    ;
    
    ОтправитьПриглашения({ФизическоеЛицо}, СпособОтправкиПриглашений)
;

@ВПроекте
@НаСервере
метод КлючАктивации(ЛогинПользователя: Строка): Строка
    знч Настройки = НастройкиСозданияКабинетов(Ложь)
    возврат КлючАктивации(Настройки, ЛогинПользователя)
;

конст ВЕРСИИ_WELCOME = ["v3"]

@НаСервере
структура ДанныеОКлюче
    @JsonСвойство("url")
    обз пер Адрес: Строка
    @JsonСвойство("login")
    обз пер Логин: Строка
    @JsonСвойство("hidedLogin")
    обз пер СкрытыйЛогин: Булево
    @JsonСвойство("key")
    обз знч КлючАктивации: Строка
;

@НаСервере
структура ДанныеОВерсии
    @JsonСвойство("version")
    обз знч Версия: Строка
;

@НаСервере
структура ДанныеРегистрации
    @JsonСвойство("appId")
    обз пер ИдПриложения: Строка
    @JsonСвойство("connectionInfo")
    обз пер ДанныеПодключения: ДанныеПодключения
;

@НаСервере
структура ДанныеПодключения
    @JsonСвойство("url")
    обз пер Адрес: Строка
    @JsonСвойство("login")
    обз пер Логин: Строка
    @JsonСвойство("hidedLogin")
    обз пер СкрытыйЛогин: Булево
;

@НаСервере
метод КлючАктивации(НастройкиСозданияКабинетов: НастройкиСозданияКабинетов, ЛогинПользователя: Строка): Строка
    пер КлючАктивации: Строка
    знч ДанныеРегистрации = новый ДанныеРегистрации(
        НастройкиСозданияКабинетов.ИдEssWelcome,
        новый ДанныеПодключения(
            НастройкиСозданияКабинетов.АдресСервиса,
            ЛогинПользователя,
            НастройкиСозданияКабинетов.ЗапрашиватьЛогинПриАктивацииМобильногоПриложения
            )
        )
    знч Настройки = СервисыHttp.НастройкиЧтенияОбъектовJson()
    пер КлиентСоединения = СоединениеHttp.Клиент()
    пер Версия = ВерсияСервисаWelcome(КлиентСоединения)
    пер Запрос = КлиентСоединения.СБазовымUrl("%СЕРВЕР_WELCOME/applications/%ПРИЛОЖЕНИЕ_WELCOME/api/%Версия/")     
        .ЗапросPost("connections-info")
        .УстановитьТело(СервисыHttp.ДанныеJsonВСтроку(ДанныеРегистрации))
    пер КоличествоПопыток = 0
    пока КоличествоПопыток < 3
        КоличествоПопыток += 1
        исп Ответ = Запрос.Выполнить()
        если Ответ.КодСостояния == 200
            знч ДанныеОтвета = СериализацияJson.ПрочитатьОбъект(Ответ.Тело, Тип<ДанныеОКлюче>, Настройки)
            КлючАктивации = ДанныеОтвета.КлючАктивации
            прервать
        ;
        Пауза(Длительность.ИзСекунд(1))
    ;
    возврат КлючАктивации
;

@НаСервере
метод ПолучитьКлючАктивации(
        ФизическоеЛицо: ФизическиеЛица.Ссылка, 
        СведенияОЛичномКабинете: СведенияОЛичномКабинете,
        НастройкиСозданияКабинетов: НастройкиСозданияКабинетов, 
        СпособОтправки: СпособыОтправкиПриглашений): Строка
    
    пер КлючАктивации: Строка
    исп ПривилегированныйРежим = КонтекстДоступа.Привилегированный()
    
    исп Транзакции.Начать()
    Блокировки.Заблокировать(новый КлючиАктивации.Блокировки.КлючЗаписи(
        ФизическоеЛицо = ФизическоеЛицо))
        
    знч ЗапомненныйКлючАктивации = КлючиАктивации.КлючАктивацииФизическогоЛица(ФизическоеЛицо)
    если ЗапомненныйКлючАктивации == Неопределено
        или ЗапомненныйКлючАктивации.Длина() < 9
        
        если НастройкиСозданияКабинетов.АдресСервиса.Пусто()
            СохранитьСведенияОбОтправке(СведенияОЛичномКабинете, ФизическоеЛицо, "Не указан адрес сервиса.", СпособОтправки)
        иначе
            КлючАктивации = КлючАктивации(НастройкиСозданияКабинетов, СведенияОЛичномКабинете.ЛогинПользователя)
            если КлючАктивации.Пусто()
                СохранитьСведенияОбОтправке(СведенияОЛичномКабинете, ФизическоеЛицо, "Ключ активации не получен", СпособОтправки)
            иначе
                КлючиАктивации.ДобавитьКлючАктивации(ФизическоеЛицо, КлючАктивации)
            ;
        ;
    иначе
        КлючАктивации = ЗапомненныйКлючАктивации
        ОбновитьАдресСервиса(НастройкиСозданияКабинетов, СведенияОЛичномКабинете.ЛогинПользователя, КлючАктивации)
    ;
    ПривилегированныйРежим.Закрыть()
    возврат КлючАктивации
;

@ВПроекте
@НаСервере
метод ФайлQrКода(ФизическоеЛицо: ФизическиеЛица.Ссылка): Файлы.Ссылка?
    возврат ФайлыQrКодов([ФизическоеЛицо]).ПолучитьИлиУмолчание(ФизическоеЛицо, Неопределено)
;

@НаСервере
метод ФайлыQrКодов(ФизическиеЛица: Массив<ФизическиеЛица.Ссылка>): Соответствие<ФизическиеЛица.Ссылка, Файлы.Ссылка>
    пер QrКоды = новый Соответствие<ФизическиеЛица.Ссылка, Файлы.Ссылка>()
    знч СведенияОКабинетах = СведенияОЛичныхКабинетах(ФизическиеЛица)
    пер Кабинеты = новый Массив<ВладелецФайлы.Ссылка>()
    пер ФизическиеЛицаЛичныхКабинетов = новый Соответствие<ЛичныеКабинеты.Ссылка, ФизическиеЛица.Ссылка>()
    для СведенияОКабинете из СведенияОКабинетах
        если СведенияОКабинете.Значение.Ссылка != Неопределено
            Кабинеты.Добавить(СведенияОКабинете.Значение.Ссылка)
        ;
        ФизическиеЛицаЛичныхКабинетов.Вставить(СведенияОКабинете.Значение.Ссылка, СведенияОКабинете.Ключ)
    ;
    знч ФайлыОбъектов = Файлы.ФайлыВладельцев(Кабинеты)
    для СведенияОКабинете из СведенияОКабинетах
        пер ФайлQrКода: Файлы.Ссылка?
        знч ФайлыОбъекта = ФайлыОбъектов.ПолучитьИлиУмолчание(СведенияОКабинете.Значение.Ссылка, Неопределено)
        если ФайлыОбъекта != Неопределено
            для ФайлОбъекта из ФайлыОбъекта
                если ФайлОбъекта.Наименование.НачинаетсяС(ИМЯ_ФАЙЛА_QR_КОДА_ВХОДА_В_ЛИЧНЫЙ_КАБИНЕТ)
                    ФайлQrКода = ФайлОбъекта.Ссылка
                    прервать
                ;
            ;
        ;
        если ФайлQrКода == Неопределено
            ФайлQrКода = ФайлQrКодаАктивации(
                СведенияОКабинете.Значение.Ссылка, СведенияОКабинете.Значение.ЛогинПользователя)
        ;
        если ФайлQrКода != Неопределено
            знч ФизическоеЛицо = ФизическиеЛицаЛичныхКабинетов.ПолучитьИлиУмолчание(
                СведенияОКабинете.Значение.Ссылка, Неопределено)
            если ФизическоеЛицо != Неопределено
                QrКоды.Вставить(ФизическоеЛицо, ФайлQrКода)
            ;
        ;
    ;
    возврат QrКоды
;

@НаСервере
метод ФайлQrКодаАктивации(Кабинет: ЛичныеКабинеты.Ссылка, ЛогинПользователя: Строка): Файлы.Ссылка
    знч АдресСервиса = НастройкиСозданияКабинетов(Ложь).АдресСервиса
    пер UrlВходаВЛичныйКабинет = "ess:%{СсылкаСЛогином(АдресСервиса, ЛогинПользователя)}"
    знч Генератор = новый ГенераторQrКода(200, 200, УровеньКоррекцииQrКода.Низкий, ФорматИзображения.Png, Истина)
    знч БайтыКартинки = Генератор.КодироватьТекст(UrlВходаВЛичныйКабинет)
    пер ФайлОбъект = Файлы.НовыйФайл(ОбъектноеХранилище.ЗагрузитьИзБайт(БайтыКартинки))
    ФайлОбъект.Владелец = Кабинет
    ФайлОбъект.Наименование = "%ИМЯ_ФАЙЛА_QR_КОДА_ВХОДА_В_ЛИЧНЫЙ_КАБИНЕТ (%ЛогинПользователя)"
    ФайлОбъект.Расширение = "png"
    ФайлОбъект.Записать()
    возврат ФайлОбъект.Ссылка
;

//КонецОбласти

перечисление СтратегияФормированияИмениУчетнойЗаписи
    ФамилияИО умолчание
;

@ВПодсистеме
метод СостояниеЛичногоКабинета(ОписаниеПользователя: ОписаниеПользователя?, ПриглашениеОтправлено: Булево, БылУспешныйВход: Булево): СостоянияЛичногоКабинета
    пер СостояниеЛичногоКабинета: СостоянияЛичногоКабинета
    выбор 
    когда ОписаниеПользователя == Неопределено 
        СостояниеЛичногоКабинета = СостоянияЛичногоКабинета.НеСоздан
    когда БылУспешныйВход
        СостояниеЛичногоКабинета = СостоянияЛичногоКабинета.Активирован
    когда ПриглашениеОтправлено
        СостояниеЛичногоКабинета = СостоянияЛичногоКабинета.НеАктивирован
    когда не ОписаниеПользователя!.Телефон.Пусто()
        СостояниеЛичногоКабинета = СостоянияЛичногоКабинета.НеОтправлялосьSMS
    когда не ОписаниеПользователя!.ЭлектроннаяПочта.Пусто()
        СостояниеЛичногоКабинета = СостоянияЛичногоКабинета.НеОтправлялосьПисьмо
    ;
    возврат СостояниеЛичногоКабинета
;

@ВПроекте конст ГРУППА_РЕСУРСОВ_ЛК = "ЛичныеКабинеты"

@ВПроекте
конст СОЗДАН_КАБИНЕТ_EMAIL = "СозданКабинетEmail"

@ВПроекте
конст СОЗДАН_КАБИНЕТ_SMS = "СозданКабинетSms"

@ВПроекте
конст СОЗДАН_КАБИНЕТ_ЗАГОЛОВОК = "СозданКабинетЗаголовок"

@ВПроекте
конст ПОДКЛЮЧЕН_СЕРВИС_ЗАГОЛОВОК = "ПодключенСервисЗаголовок"

@ВПроекте
конст ПОДКЛЮЧЕН_СЕРВИС_EMAIL = "ПодключенСервисEmail"

@НаСервере
метод НастройкиСозданияКабинетов(ПроверятьАдминистратора: Булево = Истина): НастройкиСозданияКабинетов
    пер Настройки: НастройкиСозданияКабинетов
    знч ТекущиеНастройки = ТекущиеНастройкиСозданияУчетныхЗаписей()
    если ПроверятьАдминистратора
        ПользователиСистемы.ПроверитьПраваАдминистратора()
    ;
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    
    знч ТекстыУведомлений = УниверсальныеМеханизмы.ЗначенияРесурсовПодсистемы(ГРУППА_РЕСУРСОВ_ЛК,
        [СОЗДАН_КАБИНЕТ_EMAIL,
        СОЗДАН_КАБИНЕТ_SMS,
        СОЗДАН_КАБИНЕТ_ЗАГОЛОВОК,
        ПОДКЛЮЧЕН_СЕРВИС_ЗАГОЛОВОК,
        ПОДКЛЮЧЕН_СЕРВИС_EMAIL])
    ПривилегированныйРежим.Закрыть()
    Настройки.АдресСервиса = ТекущиеНастройки.АдресСервиса
    Настройки.ИдEssWelcome = ЛичныеКабинетыПоставщик.ПолучитьСервис().ИдEssWelcome()
    Настройки.ТекстПисьмаПриглашения = ТекстыУведомлений.ПолучитьИлиУмолчание(СОЗДАН_КАБИНЕТ_EMAIL, "")
    Настройки.ТекстСообщенияПриглашения = ТекстыУведомлений.ПолучитьИлиУмолчание(СОЗДАН_КАБИНЕТ_SMS, "")
    Настройки.ТемаПисьмаПриглашения = ТекстыУведомлений.ПолучитьИлиУмолчание(СОЗДАН_КАБИНЕТ_ЗАГОЛОВОК, "")
    Настройки.ТемаПисьмаПодключения = ТекстыУведомлений.ПолучитьИлиУмолчание(ПОДКЛЮЧЕН_СЕРВИС_ЗАГОЛОВОК, "")
    Настройки.ТекстПисьмаПодключения = ТекстыУведомлений.ПолучитьИлиУмолчание(ПОДКЛЮЧЕН_СЕРВИС_EMAIL, "")
    Настройки.ЗапрашиватьЛогинПриАктивацииМобильногоПриложения = ТекущиеНастройки.ЗапрашиватьЛогинПриАктивацииМобильногоПриложения
    возврат Настройки 
;

@ВПроекте
@НаСервере
метод УдалитьЛичныеКабинеты(ФизическиеЛица: ЧитаемыйМассив<ФизическиеЛица.Ссылка>)
    ЛичныеКабинеты.УдалитьКабинетыФизическихЛиц(ФизическиеЛица)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ОтображаемыеФизическиеЛица(Фильтр: ГруппаЭлементовФильтра): Множество<ФизическиеЛица.Ссылка>
    пер Запрос = новый ПроизвольныйЗапрос()
    Запрос.Текст = 
        "Выбрать 
            ФизическиеЛица.Ссылка Как Ссылка
        Из 
            ФизическиеЛица Как ФизическиеЛица
            Левое Соединение ЛичныеКабинеты Как ЛичныеКабинеты
                По ФизическиеЛица.Ссылка == ЛичныеКабинеты.ФизическоеЛицо
            Левое Соединение ЛичныеДанныеФизическихЛиц Как ЛичныеДанныеФизическихЛиц
                По ЛичныеДанныеФизическихЛиц.Владелец == ФизическиеЛица.Ссылка
            Левое Соединение ПодразделенияИСотрудники Как ПодразделенияИСотрудники
                По ФизическиеЛица.Ссылка == ПодразделенияИСотрудники.ФизическоеЛицо
                    И ПодразделенияИСотрудники.ОсновноеМестоРаботы == Истина
            Левое Соединение Сотрудники Как Сотрудники
                По ПодразделенияИСотрудники.Объект == Сотрудники.Ссылка
        Где
            ФизическиеЛица.Активен"
    
    МенеджерЗапросов.ДополнитьЗапросФильтрами(Запрос, Фильтр)
    
    знч СписокФизическихЛиц: Множество<ФизическиеЛица.Ссылка>
    исп РезультатЗапроса = Запрос.Выполнить()
    для РезультатЗапросаСтрока из РезультатЗапроса
        СписокФизическихЛиц.Добавить(РезультатЗапросаСтрока.Ссылка)
    ;
    возврат СписокФизическихЛиц
;

@ВПодсистеме
метод ЛичныйКабинетСуществует(Состояние: СостоянияЛичногоКабинета): Булево
    знч Состояния: Массив<СостоянияЛичногоКабинета>
    Состояния.Добавить(СостоянияЛичногоКабинета.Активирован)
    Состояния.Добавить(СостоянияЛичногоКабинета.НеАктивирован)
    Состояния.Добавить(СостоянияЛичногоКабинета.НеОтправлялосьSMS)
    Состояния.Добавить(СостоянияЛичногоКабинета.ОшибкаОтправкиSMS)
    Состояния.Добавить(СостоянияЛичногоКабинета.НеОтправлялосьПисьмо)
    Состояния.Добавить(СостоянияЛичногоКабинета.ОшибкаОтправкиПисьма)
    возврат Состояния.Содержит(Состояние)
;

@ВПроекте
@НаСервере
метод ОбновитьADУчетнуюЗапись(УчетнаяЗаписьADСервиса: УчетныеЗаписиADСервиса.Объект, ФизическоеЛицо: ФизическиеЛица.Ссылка)

    знч Запрос = Запрос{
        Выбрать
            Пользователь
        Из
            ПользователиВладельцевКабинетов Как Пользователи
        Где
            Пользователи.ФизическоеЛицо == %ФизическоеЛицо}
    исп Результат = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если не РезультатСтроки.Пусто()
        пер Пользователь = РезультатСтроки[0].Пользователь
        знч ОписаниеПользователя = ПользователиСервиса.Найти(Пользователь.ЗагрузитьОбъект().Ид)
        знч РезультатИзмененияОписанияПользователя = ОбновитьОписаниеПользователя(УчетнаяЗаписьADСервиса, ОписаниеПользователя)
        если РезультатИзмененияОписанияПользователя.ЕстьИзменения
            ПользователиСервиса.Изменить(РезультатИзмененияОписанияПользователя.ОписаниеПользователя)
        ;
    ;
;

@ВПроекте
@НаСервере
метод ОбновитьОписаниеПользователя(ФизическоеЛицо: ФизическиеЛица.Ссылка?, ОписаниеПользователя: ОписаниеПользователя): ПользователиСистемы.РезультатИзмененияОписанияПользователя
    пер Результат = новый ПользователиСистемы.РезультатИзмененияОписанияПользователя(Ложь)
    знч УчетнаяЗаписьADСервиса = УчетныеЗаписиADСервиса.ДанныеУчетнойЗаписиADСервиса(ФизическоеЛицо)
    если УчетнаяЗаписьADСервиса != Неопределено
            Результат = ОбновитьОписаниеПользователя(УчетнаяЗаписьADСервиса!.ЗагрузитьОбъект(), ОписаниеПользователя)
    ;
    возврат Результат
;

@ВПроекте
@НаСервере
метод ОбновитьОписаниеПользователя(УчетнаяЗаписьADСервиса: УчетныеЗаписиADСервиса.Объект, ОписаниеПользователя: ОписаниеПользователя): ПользователиСистемы.РезультатИзмененияОписанияПользователя
    пер РезультатИзмененияОписанияПользователя = новый ПользователиСистемы.РезультатИзмененияОписанияПользователя(Ложь)
    знч СписокПользователей = СпискиПользователей.ПолучитьСписокПоУмолчанию()
    пер НастройкиВНижнемРегистре: Массив<НастройкиСервисаУчетныхЗаписей>
    для НастройкаСервисаУчетныхЗаписей из СписокПользователей.НастройкиСервисовУчетныхЗаписей
        НастройкиВНижнемРегистре.Добавить(новый НастройкиСервисаУчетныхЗаписей(
            новый СервисУчетныхЗаписей(НастройкаСервисаУчетныхЗаписей.Сервис.Вид, НастройкаСервисаУчетныхЗаписей.Сервис.Ид.ВНижнийРегистр())))
    ;
    
    знч СервисУчетныхЗаписей = новый СервисУчетныхЗаписей(ВидСервисаУчетныхЗаписей.ActiveDirectory, УчетнаяЗаписьADСервиса.ИмяСервиса)
    знч НастройкиСервисаУчетныхЗаписей = новый НастройкиСервисаУчетныхЗаписей(СервисУчетныхЗаписей)
    если не НастройкиВНижнемРегистре.Содержит(НастройкиСервисаУчетныхЗаписей)
        знч НастройкиСервисовУчетныхЗаписей = новый Множество(СписокПользователей.НастройкиСервисовУчетныхЗаписей)
        НастройкиСервисовУчетныхЗаписей.Добавить(НастройкиСервисаУчетныхЗаписей)
        СпискиПользователей.Изменить(
            СписокПользователей.СНастройкамиСервисовУчетныхЗаписей(НастройкиСервисовУчетныхЗаписей))
    ;
    
    знч УчетнаяЗаписьПользователя = новый УчетнаяЗапись(УчетнаяЗаписьADСервиса.ИмяУчетнойЗаписи, СервисУчетныхЗаписей)
    если не ОписаниеПользователя.УчетныеЗаписи.Содержит(УчетнаяЗаписьПользователя)
        знч УчетныеЗаписиПользователя = новый Множество(ОписаниеПользователя.УчетныеЗаписи)
        УчетныеЗаписиПользователя.Добавить(УчетнаяЗаписьПользователя)
        РезультатИзмененияОписанияПользователя.ОписаниеПользователя = ОписаниеПользователя.СУчетнымиЗаписями(УчетныеЗаписиПользователя)
        РезультатИзмененияОписанияПользователя.ЕстьИзменения = Истина
    ;
    возврат РезультатИзмененияОписанияПользователя
;

@ВПроекте
@НаСервере
метод ОбновитьСтроковыеРесурсы()
    ЛичныеКабинетыПоставщик.ПолучитьСервис().ОбновитьСтроковыеРесурсы()
;

@ВПроекте
@НаСервере
метод ИнформационныеСистемыФизическогоЛица(ФизическоеЛицо: ФизическиеЛица.Ссылка): Массив<ИнформационныеСистемы.Ссылка>
    возврат ИнформационныеСистемыФизическихЛиц.ИнформационныеСистемыФизическогоЛица(ФизическоеЛицо)
;

@ВПроекте
@НаСервере
метод ОбновитьИнформационнуюСистемуФизическогоЛица(ФизическоеЛицо: ФизическиеЛица.Ссылка, ИнформационнаяСистема: Объект)
    ИнформационныеСистемыФизическихЛиц.ОбновитьИнформационнуюСистемуФизическогоЛица(ФизическоеЛицо, ИнформационнаяСистема как ИнформационныеСистемы.Ссылка)
;

@ВПроекте
@НаСервере
метод ОбновитьАдресСервиса(ЛогинПользователя: Строка, КлючАктивации: Строка)
    знч Настройки = НастройкиСозданияКабинетов(Ложь)
    ОбновитьАдресСервиса(Настройки, ЛогинПользователя, КлючАктивации)
;

@НаСервере
метод ОбновитьАдресСервиса(НастройкиСозданияКабинетов: НастройкиСозданияКабинетов, ЛогинПользователя: Строка, КлючАктивации: Строка)
    пер КлиентСоединения = СоединениеHttp.Клиент()
    пер Версия = ВерсияСервисаWelcome(КлиентСоединения)
    если Версия == "v3"
        пер Запрос = КлиентСоединения.СБазовымUrl("%СЕРВЕР_WELCOME/applications/%ПРИЛОЖЕНИЕ_WELCOME/api/%Версия/")
            .ЗапросPut("connections-info/%КлючАктивации")
            .УстановитьТело(СервисыHttp.ДанныеJsonВСтроку(
                новый ДанныеРегистрации(
                    НастройкиСозданияКабинетов.ИдEssWelcome,
                    новый ДанныеПодключения(
                        НастройкиСозданияКабинетов.АдресСервиса,
                        ЛогинПользователя,
                        НастройкиСозданияКабинетов.ЗапрашиватьЛогинПриАктивацииМобильногоПриложения
                        )
                    )))
        исп Ответ = Запрос.Выполнить()
        если Ответ.КодСостояния != 200
            Журналирование.ЗарегистрироватьОшибку("ОбновлениеКлючаАктивации", 
                "Не обновился КлючАктивации для пользователя - %{ЛогинПользователя}",
                Важность = ВажностьСобытияЖурналаСобытий.Высокая)
        ;
    ;
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СервисWelcomeДоступен(): Булево
    знч ВерсияСервиса = ВерсияСервисаWelcome(СоединениеHttp.Клиент())
    возврат не ВерсияСервиса.Пусто()
;

@НаСервере
метод ВерсияСервисаWelcome(КлиентСоединения: КлиентHttp): Строка
    пер Версия = ""
    пер Запрос = КлиентСоединения.СБазовымUrl("%СЕРВЕР_WELCOME/applications/%ПРИЛОЖЕНИЕ_WELCOME/api/")
        .ЗапросGet("version")
    
    пер КоличествоПопыток: Число
    пер КодСостояния: Число
    пер ОтветСтрокой = ""
    пока КоличествоПопыток < 3
        КоличествоПопыток += 1
        исп Ответ = Запрос.Выполнить()
        КодСостояния = Ответ.КодСостояния
        если Ответ.КодСостояния == 200
            знч Настройки = СервисыHttp.НастройкиЧтенияОбъектовJson()
            знч ДанныеОтвета = СериализацияJson.ПрочитатьОбъект(Ответ.Тело, Тип<ДанныеОВерсии>, Настройки)
            Версия = ДанныеОтвета.Версия
            прервать
        иначе
            ОтветСтрокой = Ответ.Тело.ПрочитатьКакСтроку()
        ;
        Пауза(Длительность.ИзСекунд(1))
    ;
    если КодСостояния != 200
        пер ТекстОшибки = "Ошибка обращения к сервису Welcome, получен код состояния %{КодСостояния}\нОтвет от сервиса: ${ОтветСтрокой}"
        Журналирование.ЗарегистрироватьОшибку("ДоступКВнешнимСервисам", Описание = ТекстОшибки, Важность = ВажностьСобытияЖурналаСобытий.Высокая)
    ;
    если ВЕРСИИ_WELCOME.Содержит(Версия)
        возврат Версия
    иначе
        возврат ВЕРСИИ_WELCOME.Последний()
    ;
;
