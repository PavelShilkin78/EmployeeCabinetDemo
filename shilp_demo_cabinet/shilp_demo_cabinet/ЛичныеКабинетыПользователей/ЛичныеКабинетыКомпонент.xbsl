импорт ИнтерфейсныеКомпонентыСтандартные
импорт Компания
импорт КонтрольДоступа
импорт КонтрольДоступаСтандартные
импорт ОбщиеСтандартные
импорт СтандартноеПриложение
импорт ФизическиеЛица

@ВПодсистеме
метод СтрокаПоискаВыполнитьПоиск(Источник: СтрокаПоиска, Событие: СобытиеСДанными<Строка?>)
    СтрокаПоиска = Событие.Данные
    УстановитьФильтрСписка()
;

@Обработчик
метод ПослеСоздания()
    ИконкиСостояния.ВставитьВсе(ИконкиПоСостояниюЛичногоКабинета())
    знч ДанныеЛичныхКабинетов: ДанныеЛичныхКабинетов = ОбновитьСостоянияКабинетовИПолучитьДанные()
    ЛогиныПользователей = новый Соответствие<Строка, Строка>(ДанныеЛичныхКабинетов.ЛогиныПользователей!)
    ТелефоныПользователей = ДанныеЛичныхКабинетов.ТелефоныПользователей
    АдресаЭлектроннойПочтыПользователей = ДанныеЛичныхКабинетов.АдресаЭлектроннойПочтыПользователей
    СведенияОПользователяхПоФизлицам = ДанныеЛичныхКабинетов.СведенияОПользователяхПоФизлицам
    ФизическиеЛицаАдминистраторыАбонента = ДанныеЛичныхКабинетов.ФизическиеЛицаАдминистраторыАбонента
    
    УстановитьФильтрСписка()
    МенеджерГлобальныхКлиентскихСобытий.ПодключитьОбработчик(метод (Источник, Параметры) ->
        выбор Источник
        когда ЛичныеКабинетыПользователей.ИЗМЕНЕНЫ_ДАННЫЕ_ЛИЧНЫХ_КАБИНЕТОВ
            ОбновитьСписок()
        когда Компания.ВЫБОР_ПОДРАЗДЕЛЕНИЙ_ЗАВЕРШЕН
            ОбработатьФильтрПодразделений(Параметры)
        ;
        возврат
    ;)
    ЗагрузкаЗавершена = Истина
;

метод ОтметитьВсехОбработчик(Команда: КомандаСПараметром<Массив<Сущность.Ключ>>, Параметр: Массив<Сущность.Ключ>)
    знч ИсточникДанных: ДинамическийСписок = ЛичныеКабинетыИсточник()
    знч ОтображаемыеФизическиеЛица = ЛичныеКабинетыПользователей.ОтображаемыеФизическиеЛица(ИсточникДанных.Фильтр)
    для ФизическоеЛицо из ОтображаемыеФизическиеЛица
        Компоненты.ЛичныеКабинеты.ОтметитьСтроку(ФизическоеЛицо)
    ;
;

метод СоздатьКабинетОбработчик(Команда: КомандаСПараметром<Массив<Сущность.Ключ>>, Параметр: Массив<Сущность.Ключ>)
    СозданиеКабинетовДоступно = Ложь
    
    знч ВыбранныеФизическиеЛица: Множество<ФизическиеЛица.Ссылка>
    для Элемент из Параметр
        ВыбранныеФизическиеЛица.Добавить(Элемент как ФизическиеЛица.Ссылка)
    ;
    
    СоздатьКабинеты(ВыбранныеФизическиеЛица)
    СозданиеКабинетовДоступно = Истина
;

метод СообщениеSMSОбработчик(Команда: КомандаСПараметром<Массив<Сущность.Ключ>>, Параметр: Массив<Сущность.Ключ>)
    знч ВыбранныеФизическиеЛица: Множество<ФизическиеЛица.Ссылка>
    для Элемент из Параметр
        ВыбранныеФизическиеЛица.Добавить(Элемент как ФизическиеЛица.Ссылка)
    ;
    знч РезультатОтправки = ОтправитьПриглашенияSms(ВыбранныеФизическиеЛица)
    ОбновитьСписок()
    СообщитьОРезультатеОтправки(РезультатОтправки)
;

метод ЭлектроннаяПочтаОбработчик(Команда: КомандаСПараметром<Массив<Сущность.Ключ>>, Параметр: Массив<Сущность.Ключ>)
    знч ВыбранныеФизическиеЛица: Множество<ФизическиеЛица.Ссылка>
    для Элемент из Параметр
        ВыбранныеФизическиеЛица.Добавить(Элемент как ФизическиеЛица.Ссылка)
    ;
    знч РезультатОтправки = ОтправитьПриглашенияПоПочте(ВыбранныеФизическиеЛица)
    ОбновитьСписок()
    СообщитьОРезультатеОтправки(РезультатОтправки)
;

метод УстановитьРазовыйПарольОбработчик(Команда: КомандаСПараметром<Сущность.Ключ>, Параметр: Сущность.Ключ)
    знч ФизическоеЛицо = Параметр как ФизическиеЛица.Ссылка
    пер ВременныйПароль = РазовыйПарольПользователя.ОткрытьВМодальномОкне(ФизическоеЛицо = ФизическоеЛицо)
    если ВременныйПароль != Неопределено
        СброситьПароль(ФизическоеЛицо, ВременныйПароль)
        СтандартныеФормы.ПоказатьУведомление("Успешно", "Изменен пароль пользователя %{ФизическоеЛицо.Представление()}")
    ;
;

метод ВременноОтключитьДоступОбработчик(Команда: КомандаСПараметром<Массив<Сущность.Ключ>>, Параметр: Массив<Сущность.Ключ>)
    знч ВыбранныеФизическиеЛица: Множество<ФизическиеЛица.Ссылка>
    для Элемент из Параметр
        ВыбранныеФизическиеЛица.Добавить(Элемент как ФизическиеЛица.Ссылка)
    ;
    ВременноОтключитьДоступ(ВыбранныеФизическиеЛица)
    ОбновитьСписок()
;

метод ВернутьДоступОбработчик(Команда: КомандаСПараметром<Массив<Сущность.Ключ>>, Параметр: Массив<Сущность.Ключ>)
    знч ВыбранныеФизическиеЛица: Множество<ФизическиеЛица.Ссылка>
    для Элемент из Параметр
        ВыбранныеФизическиеЛица.Добавить(Элемент как ФизическиеЛица.Ссылка)
    ;
    ВернутьДоступ(ВыбранныеФизическиеЛица)
    ОбновитьСписок()
;

метод УдалитьКабинетОбработчик(Команда: КомандаСПараметром<Массив<Сущность.Ключ>>, Параметр: Массив<Сущность.Ключ>)
    знч ВыбранныеФизическиеЛица: Множество<ФизическиеЛица.Ссылка>
    для Элемент из Параметр
        ВыбранныеФизическиеЛица.Добавить(Элемент как ФизическиеЛица.Ссылка)
    ;
    УдалитьКабинеты(ВыбранныеФизическиеЛица)
;

метод СоздатьКабинеты(ВыбранныеФизическиеЛица: Множество<ФизическиеЛица.Ссылка>)
    знч СозданныеКабинетыИнфо = СоздатьЛичныеКабинеты(ВыбранныеФизическиеЛица, ЛогиныПользователей)
    для Инфо из СозданныеКабинетыИнфо.УчетныеДанные
        знч СтроковыеИдентификаторы: КонтрольДоступа.СтроковыеИдентификаторыПользователя = Инфо.Значение 
        СведенияОПользователяхПоФизлицам[Инфо.Ключ] = СтроковыеИдентификаторы
        ЛогиныПользователей[СтроковыеИдентификаторы.Логин] = СтроковыеИдентификаторы.Логин
        ТелефоныПользователей[СтроковыеИдентификаторы.Телефон] = СтроковыеИдентификаторы.Телефон
        АдресаЭлектроннойПочтыПользователей[СтроковыеИдентификаторы.ЭлектроннаяПочта] = СтроковыеИдентификаторы.ЭлектроннаяПочта
    ;

    если не СозданныеКабинетыИнфо.Ошибки.Пусто()
        знч Уведомление = новый Уведомление(
            Заголовок = "Ошибка:", 
            Текст = СозданныеКабинетыИнфо.Ошибки.Свернуть((Результат: Строка, Ошибка: Строка) -> "%{Результат}\н\н%{Ошибка}"))

        Уведомление.ОценкаИнформации = ОценкаИнформации.Отрицательная
        Уведомление.Показать()
    ;
    
    ОбновитьСписок()
;

метод УдалитьКабинеты(ВыбранныеФизическиеЛица: Множество<ФизическиеЛица.Ссылка>)
    УдалитьКабинеты(ВыбранныеФизическиеЛица, ТекущееФизическоеЛицо)
    для Физлицо из ВыбранныеФизическиеЛица
        если не СведенияОПользователяхПоФизлицам.СодержитКлюч(Физлицо)
            продолжить
        ;
        если Физлицо == ТекущееФизическоеЛицо
            СтандартныеФормы.ПоказатьУведомление("Внимание", 
                "Вы пометили к удалению свой кабинет, но он не удален", 
                ОценкаИнформации.Предупреждающая)
            продолжить
        ;
        знч СтроковыеИдентификаторы: КонтрольДоступа.СтроковыеИдентификаторыПользователя = СведенияОПользователяхПоФизлицам[Физлицо]
        ЛогиныПользователей.Удалить(СтроковыеИдентификаторы.Логин)
        ТелефоныПользователей.Удалить(СтроковыеИдентификаторы.Телефон)
        АдресаЭлектроннойПочтыПользователей.Удалить(СтроковыеИдентификаторы.ЭлектроннаяПочта)
        СведенияОПользователяхПоФизлицам.Удалить(Физлицо) 
    ;
    ОбновитьСписок()    
;

метод СообщитьОРезультатеОтправки(РезультатОтправки: ЛичныеКабинетыПользователей.РезультатОтправкиПриглашений)
    если РезультатОтправки.ЕстьНеотправленныеПриглашенияВременноОтключенным и РезультатОтправки.ЕстьНеотправленныеПриглашенияУволенным
        Сообщить("Приглашения не были отправлены уволенным сотрудникам и сотрудникам с временно отключенными личными кабинетами")    
    иначе если РезультатОтправки.ЕстьНеотправленныеПриглашенияВременноОтключенным
        Сообщить("Приглашения не были отправлены сотрудникам с временно отключенными личными кабинетами")    
    иначе если РезультатОтправки.ЕстьНеотправленныеПриглашенияУволенным
        Сообщить("Приглашения не были отправлены уволенным сотрудникам")    
    ;
;

метод ИконкаИзображение(ДанныеЭлемента: СтрокаДинамическогоСписка): ДвоичныйОбъект.Ссылка
    пер Состояние: СостоянияЛичногоКабинета = Состояние(ДанныеЭлемента)
    возврат АдресКартинкиПоСостоянию(Состояние)
;

метод ИконкаЦвет(ДанныеЭлемента: СтрокаДинамическогоСписка): Цвет | Авто
    пер Состояние: СостоянияЛичногоКабинета = Состояние(ДанныеЭлемента)
    возврат ЦветПоСостоянию(Состояние) 
;

метод Состояние(ДанныеЭлемента: СтрокаДинамическогоСписка): СостоянияЛичногоКабинета
    пер Состояние: СостоянияЛичногоКабинета|Null = ДанныеЭлемента.Данные["Состояние"] как СостоянияЛичногоКабинета|Null
    если ДанныеЭлемента.Данные["Доступность"] == ДоступностьЛичногоКабинета.ВременноОтключен
        Состояние = СостоянияЛичногоКабинета.ВременноОтключен
    иначе если Состояние == Null
        Состояние = СостоянияЛичногоКабинета.НеСоздан
    ;
    возврат Состояние как СостоянияЛичногоКабинета
;

метод УстановитьФильтрСписка()

    знч ИсточникДанныхФильтр = ЛичныеКабинетыИсточник().Фильтр
    
    пер ЭлементФильтра: неизвестно
    ЭлементФильтра = ИсточникДанныхФильтр.Элементы[0] как ЭлементФильтра
    ЭлементФильтра.Значение = СтрокаПоиска
    ЭлементФильтра.Использовать = не СтрокаПоиска.Пусто()
    
    ЭлементФильтра = ИсточникДанныхФильтр.Элементы[1] как ГруппаЭлементовФильтра
    ЭлементФильтра.Использовать = ВариантОтображения == СостоянияЛичногоКабинета.НеСоздан
    
    ЭлементФильтра = ИсточникДанныхФильтр.Элементы[2] как ЭлементФильтра
    ЭлементФильтра.Использовать = ВариантОтображения == СостоянияЛичногоКабинета.Активирован
    
    ЭлементФильтра = ИсточникДанныхФильтр.Элементы[3] как ЭлементФильтра
    ЭлементФильтра.Использовать = ВариантОтображения == СостоянияЛичногоКабинета.НеАктивирован
    
    ЭлементФильтра = ИсточникДанныхФильтр.Элементы[4] как ЭлементФильтра
    ЭлементФильтра.Использовать = ВариантОтображения == СостоянияЛичногоКабинета.ОшибкаСоздания и ДостаточнаяШирина()
    
    ЭлементФильтра = ИсточникДанныхФильтр.Элементы[5] как ЭлементФильтра
    ЭлементФильтра.Использовать = ВариантОтображения == СостоянияЛичногоКабинета.НеОтправлялосьSMS и ДостаточнаяШирина()
    
    ЭлементФильтра = ИсточникДанныхФильтр.Элементы[6] как ЭлементФильтра
    ЭлементФильтра.Использовать = ВариантОтображения == СостоянияЛичногоКабинета.НеОтправлялосьПисьмо и ДостаточнаяШирина()
    
    ЭлементФильтра = ИсточникДанныхФильтр.Элементы[7] как ЭлементФильтра
    ЭлементФильтра.Использовать = ВариантОтображения == СостоянияЛичногоКабинета.ОшибкаОтправкиSMS и ДостаточнаяШирина()
    
    ЭлементФильтра = ИсточникДанныхФильтр.Элементы[8] как ЭлементФильтра
    ЭлементФильтра.Использовать = ВариантОтображения == СостоянияЛичногоКабинета.ОшибкаОтправкиПисьма и ДостаточнаяШирина()
    
    ЭлементФильтра = ИсточникДанныхФильтр.Элементы[9] как ГруппаЭлементовФильтра
    ЭлементФильтра.Использовать = ВариантОтображения == СостоянияЛичногоКабинета.НеОтправлялосьSMS и не ДостаточнаяШирина()
    
    ЭлементФильтра = ИсточникДанныхФильтр.Элементы[10] как ГруппаЭлементовФильтра
    ЭлементФильтра.Использовать = ВариантОтображения == СостоянияЛичногоКабинета.ОшибкаСоздания и не ДостаточнаяШирина()
    
    ЭлементФильтра = ИсточникДанныхФильтр.Элементы[11] как ЭлементФильтра
    ЭлементФильтра.Значение = ФизическиеЛицаПодразделений
    ЭлементФильтра.Использовать = не ВыбранныеПодразделения.Пусто()
    
    ЭлементФильтра = ИсточникДанныхФильтр.Элементы[12] как ЭлементФильтра
    ЭлементФильтра.Использовать = ВариантОтображения == СостоянияЛичногоКабинета.ВременноОтключен и ДостаточнаяШирина()
    
    ЭлементФильтра = ИсточникДанныхФильтр.Элементы[13] как ГруппаЭлементовФильтра
    ЭлементФильтра.Использовать = ВариантОтображения == СостоянияЛичногоКабинета.ВременноОтключен и не ДостаточнаяШирина()
    
    ЭлементФильтра = ИсточникДанныхФильтр.Элементы[14] как ЭлементФильтра
    ЭлементФильтра.Использовать = ВариантОтображения != СостоянияЛичногоКабинета.ВременноОтключен и ВариантОтображения != Неопределено
    
    если КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Компьютер
        знч ИсточникДанных: ДинамическийСписок = ЛичныеКабинетыИсточник()
        знч ДанныеОКоличестве = ДанныеОКоличествеФизическихЛиц(ИсточникДанных.Фильтр)
        КоличествоФизическихЛиц = ДанныеОКоличестве.Количество
        КоличествоОтображаемыхФизическихЛиц = ДанныеОКоличестве.КоличествоОтображаемых
    ;
;

метод ОбновитьСписок()
    Компоненты.ЛичныеКабинеты.Обновить()
    Компоненты.ЛичныеКабинеты.ОчиститьОтмеченныеСтроки()
;

метод ВсеСотрудникиАктивность(): Булево
    возврат ВариантОтображения == Неопределено
;

метод КабинетНеСозданАктивность(): Булево
    возврат ВариантОтображения == СостоянияЛичногоКабинета.НеСоздан
;

метод НеОтправлялосьПисьмоАктивность(): Булево
    возврат ВариантОтображения == СостоянияЛичногоКабинета.НеОтправлялосьПисьмо
;

метод ПриглашениеНеОтправленоАктивность(): Булево
    возврат ВариантОтображения == СостоянияЛичногоКабинета.НеОтправлялосьSMS
;

метод ОшибкаПриСозданииЛичногоКабинетаАктивность(): Булево
    возврат ВариантОтображения == СостоянияЛичногоКабинета.ОшибкаСоздания
;

метод ОшибкаОтправкиПисьмаАктивность(): Булево
    возврат ВариантОтображения == СостоянияЛичногоКабинета.ОшибкаОтправкиПисьма
;

метод ОшибкаОтправкиSMSАктивность(): Булево
    возврат ВариантОтображения == СостоянияЛичногоКабинета.ОшибкаОтправкиSMS
;

метод СотрудникНеПодключенАктивность(): Булево
    возврат ВариантОтображения == СостоянияЛичногоКабинета.НеАктивирован
;

метод СотрудникПодключенАктивность(): Булево
    возврат ВариантОтображения == СостоянияЛичногоКабинета.Активирован
;

метод КабинетОтключенАктивность(): Булево
    возврат ВариантОтображения == СостоянияЛичногоКабинета.ВременноОтключен
;

метод БыстрыйФильтрПриНажатии(Источник: КомпонентВыбора, Событие: СобытиеПриНажатии)
    пер Компонент:  КомпонентВыбора = Источник
    ВариантОтображения = Компонент.ДополнительныеДанные как СостоянияЛичногоКабинета?
    УстановитьФильтрСписка()
;

метод ТолькоУволенныеПриНажатии(Источник: КомпонентВыбора, Событие: СобытиеПриНажатии)
    ТолькоУволенные = не ТолькоУволенные
    УстановитьФильтрСписка()    
;

метод ТолькоАдминистраторыАбонентаПриНажатии(Источник: КомпонентВыбора, Событие: СобытиеПриНажатии)
    ТолькоАдминистраторыАбонента = не ТолькоАдминистраторыАбонента
    УстановитьФильтрСписка()    
;

метод АдресКартинкиПоСостоянию(Состояние: СостоянияЛичногоКабинета): ДвоичныйОбъект.Ссылка?
    пер АдресКартинкиПоСостоянию: ДвоичныйОбъект.Ссылка?
    если не ИконкиСостояния.Пусто()
        АдресКартинкиПоСостоянию = ИконкиСостояния.Получить(Состояние)
    ;
    возврат АдресКартинкиПоСостоянию
;

метод ЦветПоСостоянию(Состояние: СостоянияЛичногоКабинета): Цвет | Авто
    выбор Состояние
    когда Активирован
        возврат БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Зеленый)
    когда ВременноОтключен 
        возврат БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.НеактивныйЭлемент)
    когда НеАктивирован,НеОтправлялосьSMS,НеОтправлялосьПисьмо
        возврат БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Оранжевый)
    когда ОшибкаОтправкиSMS,ОшибкаОтправкиПисьма, ОшибкаСоздания 
        возврат БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Красный)
    когда НеСоздан
        возврат БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Серый)
    ;
;

метод КабинетНеСозданАдресКартинки(): ДвоичныйОбъект.Ссылка?
    возврат АдресКартинкиПоСостоянию(СостоянияЛичногоКабинета.НеСоздан)
;

метод КабинетНеСозданЦвет(): Цвет | Авто
    возврат ЦветПоСостоянию(СостоянияЛичногоКабинета.НеСоздан)
;

метод НеОтправлялосьПисьмоАдресКартинки(): ДвоичныйОбъект.Ссылка?
    возврат АдресКартинкиПоСостоянию(СостоянияЛичногоКабинета.НеОтправлялосьПисьмо)
;

метод НеОтправлялосьПисьмоЦвет(): Цвет | Авто
    возврат ЦветПоСостоянию(СостоянияЛичногоКабинета.НеОтправлялосьПисьмо)
;

метод НеОтправлялосьSMSАдресКартинки(): ДвоичныйОбъект.Ссылка?
    возврат АдресКартинкиПоСостоянию(СостоянияЛичногоКабинета.НеОтправлялосьSMS)
;

метод НеОтправлялосьSMSЦвет(): Цвет | Авто
    возврат ЦветПоСостоянию(СостоянияЛичногоКабинета.НеОтправлялосьSMS)
;

метод ОшибкаПриСозданииЛичногоКабинетаАдресКартинки(): ДвоичныйОбъект.Ссылка?
    возврат АдресКартинкиПоСостоянию(СостоянияЛичногоКабинета.ОшибкаСоздания)
;

метод ОшибкаПриСозданииЛичногоКабинетаЦвет(): Цвет | Авто
    возврат ЦветПоСостоянию(СостоянияЛичногоКабинета.ОшибкаСоздания)
;

метод ОшибкаОтправкиПисьмаАдресКартинки(): ДвоичныйОбъект.Ссылка?
    возврат АдресКартинкиПоСостоянию(СостоянияЛичногоКабинета.ОшибкаОтправкиПисьма)
;

метод ОшибкаОтправкиПисьмаЦвет(): Цвет | Авто
    возврат ЦветПоСостоянию(СостоянияЛичногоКабинета.ОшибкаОтправкиПисьма)
;

метод ОшибкаОтправкиSMSАдресКартинки(): ДвоичныйОбъект.Ссылка?
    возврат АдресКартинкиПоСостоянию(СостоянияЛичногоКабинета.ОшибкаОтправкиSMS)
;

метод ОшибкаОтправкиSMSЦвет(): Цвет | Авто
    возврат ЦветПоСостоянию(СостоянияЛичногоКабинета.ОшибкаОтправкиSMS)
;

метод СотрудникНеПодключенАдресКартинки(): ДвоичныйОбъект.Ссылка?
    возврат АдресКартинкиПоСостоянию(СостоянияЛичногоКабинета.НеАктивирован)
;

метод СотрудникНеПодключенЦвет(): Цвет | Авто
    возврат ЦветПоСостоянию(СостоянияЛичногоКабинета.НеАктивирован)
;

метод СотрудникПодключенАдресКартинки(): ДвоичныйОбъект.Ссылка?
    возврат АдресКартинкиПоСостоянию(СостоянияЛичногоКабинета.Активирован)
;

метод СотрудникПодключенЦвет(): Цвет | Авто
    возврат ЦветПоСостоянию(СостоянияЛичногоКабинета.Активирован)
;

метод КабинетОтключенАдресКартинки(): ДвоичныйОбъект.Ссылка?
    возврат АдресКартинкиПоСостоянию(СостоянияЛичногоКабинета.ВременноОтключен)
;

метод КабинетОтключенЦвет(): Цвет | Авто
    возврат ЦветПоСостоянию(СостоянияЛичногоКабинета.ВременноОтключен)
;

метод КомандыГруппаВидимость(): Булево
    возврат КлиентскоеУстройство.ВидИнтерфейса != ВидИнтерфейса.Телефон
;

метод ПоказатьСтрокуПоискаПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ПоказыватьСтрокуПоиска = Истина
;

метод СкрытьСтрокуПоискаПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ПоказыватьСтрокуПоиска = Ложь
;

метод ПоискМобильныйВидимость(): Булево
    возврат КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон и ПоказыватьСтрокуПоиска
;

метод КомандыГруппаМобильныйВидимость(): Булево
    возврат КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон и не ПоказыватьСтрокуПоиска
;

метод ЛичныеКабинетыПриНажатииЭлемента(Источник: Список<ДинамическийСписок>, Событие: СобытиеСДанными<СтрокаСписка<СтрокаДинамическогоСписка>>)
    пер ЛичныйКабинетСсылка: ЛичныеКабинеты.Ссылка?
    если не Событие.Данные.ДанныеСтроки.Данные["ЛичныеКабинеты_Ссылка"] == Null
        ЛичныйКабинетСсылка = Событие.Данные.ДанныеСтроки.Данные["ЛичныеКабинеты_Ссылка"] как ЛичныеКабинеты.Ссылка?
    ;
    ЛичныеКабинетыКарточка.ОткрытьВМодальномОкне(
        ТекущееФизическоеЛицо               = ТекущееФизическоеЛицо,
        КлючОбъекта                         = ЛичныйКабинетСсылка,
        ФизическоеЛицо                      = Событие.Данные.ДанныеСтроки.Данные["ФизическиеЛица_Ссылка"] как ФизическиеЛица.Ссылка?,
        ЛогиныПользователей                 = ЛогиныПользователей,
        ТелефоныПользователей               = ТелефоныПользователей,
        АдресаЭлектроннойПочтыПользователей = АдресаЭлектроннойПочтыПользователей)
;

метод ЛичныеКабинетыИсточник(): ДинамическийСписок
    возврат Компоненты.ЛичныеКабинеты.Источник
;

метод ДостаточнаяШирина(): Булево
    возврат КлиентскоеУстройство.ВидИнтерфейса != ВидИнтерфейса.Телефон
;

метод УстановитьФильтрОбработчик(Команда: ОбычнаяКоманда)
    пер ФормаВыбораПодразделений = новый СтруктураПредприятияФормаВыбора(ВыбранныеПодразделения = ВыбранныеПодразделения)
    ФормаВыбораПодразделений.Инициализировать()
    ФормаВыбораПодразделений.ОткрытьВМодальномОкне()
;

метод ОбработатьФильтрПодразделений(ВыбранныеЗначения: Множество<СтруктураПредприятия.Ссылка>)
    ВыбранныеПодразделения.Очистить()
    ВыбранныеПодразделения.ДобавитьВсе(ВыбранныеЗначения)
    ОбновитьДанныеФильтраПоПодразделениям()
;

метод ОбновитьДанныеФильтраПоПодразделениям()
    ФизическиеЛицаПодразделений.Очистить()
    пер ГруппаВыбранныеПодразделения = Компоненты.ВыбранныеПодразделения
    ГруппаВыбранныеПодразделения.Содержимое.Очистить()
    если не ВыбранныеПодразделения.Пусто()
        пер ДанныеФильтра = ДанныеФильтраПоПодразделениям(ВыбранныеПодразделения)
        ФизическиеЛицаПодразделений.ДобавитьВсе(ДанныеФильтра.ФизическиеЛица)
        пер КомпонентПодразделения = новый КомпонентВыбора()
        КомпонентПодразделения.Заголовок = ДанныеФильтра.Представление
        КомпонентПодразделения.Закрываемый = Истина
        КомпонентПодразделения.ПриНажатииЗакрытия = (КомпонентВыбора, СобытиеКомпонента) -> ВыбранныеПодразделенияПриВызовеЗакрытия()
        ГруппаВыбранныеПодразделения.Содержимое.Добавить(КомпонентПодразделения)
    ;
    УстановитьФильтрСписка()
;

метод ВыбранныеПодразделенияПриВызовеЗакрытия()
    ВыбранныеПодразделения.Очистить()
    ОбновитьДанныеФильтраПоПодразделениям()
;

метод ВыбранныеПодразделенияВидимость(): Булево
    возврат КлиентскоеУстройство.ВидИнтерфейса != ВидИнтерфейса.Телефон
;

метод ВсеСотрудникиЗаголовок(): Строка
    возврат БыстрыйФильтрЗаголовок("Все", Неопределено)
;

метод КабинетНеСозданЗаголовок(): Строка
    возврат БыстрыйФильтрЗаголовок("", СостоянияЛичногоКабинета.НеСоздан)
;

метод НеОтправлялосьПисьмоЗаголовок(): Строка
    возврат БыстрыйФильтрЗаголовок("", СостоянияЛичногоКабинета.НеОтправлялосьПисьмо)
;

метод НеОтправлялосьSMSЗаголовок(): Строка
    возврат БыстрыйФильтрЗаголовок("", СостоянияЛичногоКабинета.НеОтправлялосьSMS)
;

метод ОшибкаПриСозданииЛичногоКабинетаЗаголовок(): Строка
    возврат БыстрыйФильтрЗаголовок("", СостоянияЛичногоКабинета.ОшибкаСоздания)
;

метод ОшибкаОтправкиПисьмаЗаголовок(): Строка
    возврат БыстрыйФильтрЗаголовок("", СостоянияЛичногоКабинета.ОшибкаОтправкиПисьма)
;

метод ОшибкаОтправкиSMSЗаголовок(): Строка
    возврат БыстрыйФильтрЗаголовок("", СостоянияЛичногоКабинета.ОшибкаОтправкиSMS)
;

метод СотрудникНеПодключенЗаголовок(): Строка
    возврат БыстрыйФильтрЗаголовок("", СостоянияЛичногоКабинета.НеАктивирован)
;

метод СотрудникПодключенЗаголовок(): Строка
    возврат БыстрыйФильтрЗаголовок("", СостоянияЛичногоКабинета.Активирован)
;

метод КабинетОтключенЗаголовок(): Строка
    возврат БыстрыйФильтрЗаголовок("", СостоянияЛичногоКабинета.ВременноОтключен)
;

метод БыстрыйФильтрЗаголовок(Заголовок: Строка, Состояние: СостоянияЛичногоКабинета?): Строка
    если КлиентскоеУстройство.ВидИнтерфейса != ВидИнтерфейса.Компьютер
        или Состояние != ВариантОтображения
        возврат Заголовок
    ;
    пер ПредставлениеКоличества = "%КоличествоОтображаемыхФизическихЛиц из %КоличествоФизическихЛиц"
    если Заголовок.Пусто()
        возврат ПредставлениеКоличества
    ;
    возврат "%Заголовок %ПредставлениеКоличества"
;

метод ВыгрузитьОтчетОбработчик(Команда: ОбычнаяКоманда)
    знч ИсточникДанных: ДинамическийСписок = ЛичныеКабинетыИсточник()
    знч ДанныеФайлаЛиста = ДанныеФайлаСостоянияЛичныхКабинетовВПривилегированном(ИсточникДанных.Фильтр)
    ВыгрузкаФайлов.НачатьВыгрузку(ДанныеФайлаЛиста, "СостоянияЛичныхКабинетов.csv")
;

метод ВыгрузитьОтчетПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    знч ИсточникДанных: ДинамическийСписок = ЛичныеКабинетыИсточник()
    знч ДанныеФайлаЛиста = ДанныеФайлаСостоянияЛичныхКабинетовВПривилегированном(ИсточникДанных.Фильтр)
    ВыгрузкаФайлов.НачатьВыгрузку(ДанныеФайлаЛиста, "СостоянияЛичныхКабинетов.csv")
;

метод УчетнаяЗаписьЗаголовок(ДанныеЭлемента: СтрокаДинамическогоСписка): Строка
    пер УчетнаяЗаписьЗаголовок: Строка
    если ДанныеЭлемента.Данные["ЛогинПользователя"] != Null
        УчетнаяЗаписьЗаголовок = ДанныеЭлемента.Данные["ЛогинПользователя"] как Строка
    ;
    пер РазмерПолуинтервала: Число = Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА
    пер КоличествоСимволов: Число = (КлиентскоеУстройство.ШиринаОкнаПриложения - 21 * РазмерПолуинтервала) / РазмерПолуинтервала
    если УчетнаяЗаписьЗаголовок.Длина() > КоличествоСимволов
        УчетнаяЗаписьЗаголовок = УчетнаяЗаписьЗаголовок.ПодстрокаСНачала(КоличествоСимволов - 2) + "..."
    ;
    возврат УчетнаяЗаписьЗаголовок
;

метод ПредставлениеДатыОтправкиСообщения(ДанныеЭлемента: СтрокаДинамическогоСписка): Строка
    если ДанныеЭлемента.Данные["ДатаОтправкиПриглашения"] == Null 
        или ДанныеЭлемента.Данные["ДатаОтправкиПриглашения"] == Неопределено
        или ДанныеЭлемента.Данные["ОшибкаПриОтправкеПриглашения"] != ""
        возврат ""
    ;
    возврат МенеджерДат.ФорматМомента(ДанныеЭлемента.Данные["ДатаОтправкиПриглашения"] как Момент?, "дд.ММ.гггг")
;

метод ОсновныеДанныеГруппировка(): ОриентацияСодержимого
    возврат (КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон ? ОриентацияСодержимого.Вертикальная : ОриентацияСодержимого.Горизонтальная)
;

/*метод ОсновнаяГруппаСтрокиВысотаСтроки(): Число
    возврат (КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон ? 48 : 32)
;*/

@НаСервере @НаКлиенте
структура ДанныеЛичныхКабинетов
    пер ПользователиПоИдентификаторам: Соответствие<ИдПользователя, ОписаниеПользователя>
    пер ЛогиныПользователей: ЧитаемоеСоответствие<Строка, Строка>?
    пер ТелефоныПользователей: Соответствие<Строка, Строка>
    пер АдресаЭлектроннойПочтыПользователей: Соответствие<Строка, Строка>
    пер СведенияОПользователяхПоФизлицам: Соответствие<ФизическиеЛица.Ссылка, КонтрольДоступа.СтроковыеИдентификаторыПользователя>
    пер ФизическиеЛицаАдминистраторыАбонента: Множество<ФизическиеЛица.Ссылка>
;

@НаСервере @НаКлиенте
структура ДанныеВыбранныхПодразделений
    обз пер ФизическиеЛица: ЧитаемоеМножество<ФизическиеЛица.Ссылка>
    обз пер Представление: Строка
;

@НаСервере @НаКлиенте
структура КоличествоФизическихЛиц
    пер Количество: Число
    пер КоличествоОтображаемых: Число
;

 @НаСервере @НаКлиенте
 структура РезультатСозданияЛичныхКабинетов
    обз знч УчетныеДанные: ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, КонтрольДоступа.СтроковыеИдентификаторыПользователя>
    обз знч Ошибки: ЧитаемаяКоллекция<Строка>
;

@НаСервере @ДоступноСКлиента
статический метод СоздатьЛичныеКабинеты(
    ВыбранныеФизическиеЛица: ЧитаемоеМножество<ФизическиеЛица.Ссылка>,
    ЛогиныПользователей: Соответствие<Строка, Строка>): РезультатСозданияЛичныхКабинетов

    исп новый ОперацияСозданияЛичныхКабинетовПользователей().ЗаписатьНачало()
        
    знч УчетныеДанные = ЛичныеКабинетыПользователей.СоздатьЛичныеКабинеты(ВыбранныеФизическиеЛица, ЛогиныПользователей)        
    знч СведенияОЛичныхКабинетах = ЛичныеКабинетыПользователей.СведенияОЛичныхКабинетах(ВыбранныеФизическиеЛица)
    
    знч Ошибки: Массив<Строка> = []
    для Запись из УчетныеДанные
        знч ОшибкаПриСозданииЛичногоКабинета = СведенияОЛичныхКабинетах.ПолучитьИлиУмолчание(Запись.Ключ)?.ОшибкаПриСозданииЛичногоКабинета ?? ""
        если не ОшибкаПриСозданииЛичногоКабинета.Пусто()
            Ошибки.Добавить(ОшибкаПриСозданииЛичногоКабинета)
        ;
    ;                    
    
    возврат новый РезультатСозданияЛичныхКабинетов( 
        УчетныеДанные = УчетныеДанные,
        Ошибки = Ошибки
    )                
;

@НаСервере @ДоступноСКлиента
статический метод УдалитьКабинеты(ВыбранныеФизическиеЛица: ЧитаемаяКоллекция<ФизическиеЛица.Ссылка>, ТекущееФизическоеЛицо: ФизическиеЛица.Ссылка?)
    
    знч ФизическиеЛицаКУдалению = новый Массив<ФизическиеЛица.Ссылка>(ВыбранныеФизическиеЛица)
    если ТекущееФизическоеЛицо != Неопределено и ФизическиеЛицаКУдалению.Содержит(ТекущееФизическоеЛицо!)
        ФизическиеЛицаКУдалению.Удалить(ТекущееФизическоеЛицо!)
    ;
    ЛичныеКабинеты.УдалитьКабинетыФизическихЛиц(ФизическиеЛицаКУдалению)
;

@НаСервере @ДоступноСКлиента
статический метод ОтправитьПриглашенияПоПочте(ВыбранныеФизическиеЛица: ЧитаемоеМножество<ФизическиеЛица.Ссылка>): ЛичныеКабинетыПользователей.РезультатОтправкиПриглашений
    возврат ЛичныеКабинетыПользователей.ОтправитьПриглашения(ВыбранныеФизическиеЛица, ЛичныеКабинетыПользователей.СпособыОтправкиПриглашений.ЭлектроннаяПочта)
;

@НаСервере @ДоступноСКлиента
статический метод ОтправитьПриглашенияSms(ВыбранныеФизическиеЛица: ЧитаемоеМножество<ФизическиеЛица.Ссылка>): ЛичныеКабинетыПользователей.РезультатОтправкиПриглашений
    возврат ЛичныеКабинетыПользователей.ОтправитьПриглашения(ВыбранныеФизическиеЛица, ЛичныеКабинетыПользователей.СпособыОтправкиПриглашений.СообщениеSMS)
;

@НаСервере @ДоступноСКлиента
статический метод ОбновитьСостоянияКабинетовИПолучитьДанные(): ДанныеЛичныхКабинетов
    
    знч ДанныеЛичныхКабинетов: ДанныеЛичныхКабинетов
    МенеджерПравДоступа.ПроверитьПраваАдминистратора()
    знч ПользователиПоИдентификаторам: ЧитаемоеСоответствие<ИдПользователя, ОписаниеПользователя> =
        ПользователиСистемы.ПользователиПоИдентификаторам()
        
    знч ИдентификаторыПользователейПоФизлицам = КонтрольДоступа.ИдентификаторыПользователейПоФизлицам()
    знч СведенияОПользователяхПоФизлицам: Соответствие<ФизическиеЛица.Ссылка, КонтрольДоступа.СтроковыеИдентификаторыПользователя>
    для Элемент из ИдентификаторыПользователейПоФизлицам
        если не ПользователиПоИдентификаторам.СодержитКлюч(Элемент.Значение)
            продолжить
        ;
        знч ОписаниеПользователя: ОписаниеПользователя? = ПользователиПоИдентификаторам[Элемент.Значение]
        если ОписаниеПользователя == Неопределено
            продолжить
        ;
        знч Идентификаторы: КонтрольДоступа.СтроковыеИдентификаторыПользователя
        Идентификаторы.Логин = ОписаниеПользователя!.Логин
        Идентификаторы.Телефон = ОписаниеПользователя!.Телефон
        Идентификаторы.ЭлектроннаяПочта = ОписаниеПользователя!.ЭлектроннаяПочта
        СведенияОПользователяхПоФизлицам[Элемент.Ключ] = Идентификаторы
    ;
    попытка 
        ЛичныеКабинеты.ОбновитьСостояниеЛичныхКабинетов(ПользователиПоИдентификаторам)
    поймать Ошибка: Исключение
        Журналирование.ЗарегистрироватьОшибку(Ошибка)    
    ;
    
    ПользователиСистемы.СинхронизироватьПользователей()
    
    ДанныеЛичныхКабинетов.АдресаЭлектроннойПочтыПользователей = ПользователиСистемы.ИспользованныеАдресаЭлектроннойПочты(ПользователиПоИдентификаторам)
    ДанныеЛичныхКабинетов.ЛогиныПользователей = ПользователиСистемы.ИспользованныеЛогины(ПользователиПоИдентификаторам)
    ДанныеЛичныхКабинетов.ТелефоныПользователей = ПользователиСистемы.ИспользованныеТелефоны(ПользователиПоИдентификаторам)
    ДанныеЛичныхКабинетов.СведенияОПользователяхПоФизлицам = СведенияОПользователяхПоФизлицам
    ДанныеЛичныхКабинетов.ФизическиеЛицаАдминистраторыАбонента = КонтрольДоступа.ФизическиеЛицаАдминистраторыАбонента()
    возврат ДанныеЛичныхКабинетов
;

@НаСервере @ДоступноСКлиента
статический метод ВременноОтключитьДоступ(ВыбранныеФизическиеЛица: ЧитаемаяКоллекция<ФизическиеЛица.Ссылка>)
    ЛичныеКабинеты.УстановитьСостояние(ВыбранныеФизическиеЛица, ДоступностьЛичногоКабинета.ВременноОтключен)
;

@НаСервере @ДоступноСКлиента
статический метод ВернутьДоступ(ВыбранныеФизическиеЛица: ЧитаемаяКоллекция<ФизическиеЛица.Ссылка>)
    ЛичныеКабинеты.УстановитьСостояние(ВыбранныеФизическиеЛица, ДоступностьЛичногоКабинета.Включен)
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеФильтраПоПодразделениям(ВыбранныеПодразделения: Множество<СтруктураПредприятия.Ссылка>): ДанныеВыбранныхПодразделений
    
    пер Подразделения: Множество<СтруктураПредприятия.Ссылка>
    Подразделения.ДобавитьВсе(ВыбранныеПодразделения)
    знч ПодчиненныеПодразделения = СтруктураПредприятия.ПодчиненныеПодразделения(ВыбранныеПодразделения)
    для КлючИЗначение из ПодчиненныеПодразделения
        для ПодчиненноеПодразделение из КлючИЗначение.Значение
            если не Подразделения.Содержит(ПодчиненноеПодразделение)
                Подразделения.Добавить(ПодчиненноеПодразделение)
            ;
        ;
    ;
    пер ПредставлениеПодразделений: Строка
    если Подразделения.Размер() == 1
        ПредставлениеПодразделений = Подразделения.Единственный().Представление()
    иначе если Подразделения.Размер() > 1
        ПредставлениеПодразделений = Подразделения.Размер().ВСтроку() + " " +  МенеджерСтрок.ТекстПоКоличеству("подразделение", Подразделения.Размер())
    ;
    пер СсылкиФизическихЛиц: ЧитаемоеМножество<ФизическиеЛица.Ссылка> = ОрганизационнаяСтруктура.ФизическиеЛицаПодразделений(Подразделения)
    возврат новый ДанныеВыбранныхПодразделений(СсылкиФизическихЛиц, ПредставлениеПодразделений)
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеОКоличествеФизическихЛиц(Фильтр: ГруппаЭлементовФильтра): КоличествоФизическихЛиц
    знч ДанныеОКоличестве: КоличествоФизическихЛиц
    ДанныеОКоличестве.КоличествоОтображаемых = ЛичныеКабинетыПользователей.ОтображаемыеФизическиеЛица(Фильтр).Размер()
    знч Запрос = Запрос{
        Выбрать 
           Количество(ФизическиеЛица.Ссылка) Как Количество
        Из 
           ФизическиеЛица Как ФизическиеЛица
        где 
           ФизическиеЛица.Активен}
    
    исп РезультатЗапроса = Запрос.Выполнить() 
    знч РезультатЗапросаСтроки = новый ЧитаемыйМассив(РезультатЗапроса)
    если (не РезультатЗапросаСтроки.Пусто())
        ДанныеОКоличестве.Количество = РезультатЗапросаСтроки[0].Количество
    ;
    возврат ДанныеОКоличестве
;

@НаСервере
@ВПодсистеме
структура СтрокаФайлаСостоянияЛичныхКабинетов
    пер ФизическоеЛицоСсылка: ФизическиеЛица.Ссылка?
    пер ФизическоеЛицо: Строка
    пер Организация: Строка
    пер Подразделение: Строка
    пер Руководитель: Строка
    пер Активирован: Строка
    пер ActiveDirectory: Строка
    пер Есиа: Строка
    пер Cas: Строка
 
    статический метод Заголовок(Разделитель: Строка): Строка
        пер Заголовки = <Строка>[]
        Заголовки.Добавить("Сотрудник")
        Заголовки.Добавить("Организация")
        Заголовки.Добавить("Подразделение")
        Заголовки.Добавить("Руководитель")
        Заголовки.Добавить("Активирован")
        Заголовки.Добавить("Active Directory")
        Заголовки.Добавить("ЕСИА")
        Заголовки.Добавить("CAS")
        возврат Заголовки.Соединить(Разделитель)
    ;
    
     метод ВСтроку(Разделитель: Строка): Строка
        пер Столбцы = <Строка>[]
        Столбцы.Добавить(ФизическоеЛицо)
        Столбцы.Добавить(Организация)
        Столбцы.Добавить(Подразделение)
        Столбцы.Добавить(Руководитель)
        Столбцы.Добавить(Активирован)
        Столбцы.Добавить(ActiveDirectory)
        Столбцы.Добавить(Есиа)
        Столбцы.Добавить(Cas)

        возврат Столбцы.Соединить(Разделитель)
    ;
    
    метод ЗаполнитьВнешниеУчетныеЗаписи(УчетныеЗаписи: ЧитаемоеМножество<УчетнаяЗапись>?)
        если УчетныеЗаписи == Неопределено
            возврат
        ;
        
        для КлючИЗначение из УчетныеЗаписи.ГруппироватьПо(УчетнаяЗапись -> УчетнаяЗапись.Сервис.Вид)
            знч Представление = КлючИЗначение.Значение
                .Преобразовать(УчетнаяЗапись -> ПользователиСистемы.ПредставлениеВнешнейУчетнойЗаписи(УчетнаяЗапись))
                .Соединить(" ")
            выбор КлючИЗначение.Ключ
            когда ВидСервисаУчетныхЗаписей.ActiveDirectory
                ActiveDirectory = Представление
            когда ВидСервисаУчетныхЗаписей.Есиа
                Есиа = Представление
            когда ВидСервисаУчетныхЗаписей.Cas
                Cas = Представление
            ;
        ;
    ;
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеФайлаСостоянияЛичныхКабинетовВПривилегированном(Фильтр: ГруппаЭлементовФильтра): ДвоичныйОбъект.Ссылка
    МенеджерПравДоступа.ПроверитьПраваАдминистратора()
    если МенеджерПравДоступа.ЭтоАдминистраторАбонента()
        исп КонтекстДоступа.Привилегированный()
        возврат ДанныеФайлаСостоянияЛичныхКабинетов(Фильтр)
    иначе
        возврат ДанныеФайлаСостоянияЛичныхКабинетов(Фильтр)
    ;
;

@НаСервере
статический метод ДанныеФайлаСостоянияЛичныхКабинетов(Фильтр: ГруппаЭлементовФильтра): ДвоичныйОбъект.Ссылка
    
    знч ОтображаемыеФизическиеЛица =
        новый ЧитаемоеМножество(ЛичныеКабинетыПользователей.ОтображаемыеФизическиеЛица(Фильтр))

    знч УчетныеЗаписиПоФизическомуЛицу = новый Соответствие<ФизическиеЛица.Ссылка, ЧитаемоеМножество<УчетнаяЗапись>>()
    для КлючИЗначение из ПользователиСистемы.ПользователиФизическихЛиц(ОтображаемыеФизическиеЛица)
        УчетныеЗаписиПоФизическомуЛицу.Вставить(КлючИЗначение.Ключ, ПользователиСистемы.ВнешниеУчетныеЗаписи(
                КлючИЗначение.Значение))
    ;

    знч Запрос = Запрос{
        ВЫБРАТЬ
            ФизическиеЛица.Ссылка КАК ФизическоеЛицоСсылка,
            ФизическиеЛица.Представление КАК ФизическоеЛицо,
            Сотрудники.Организация.Представление.ЗаменитьNull("") КАК Организация,
            Сотрудники.МестоВСтруктуреПредприятия.Представление.ЗаменитьNull("") КАК Подразделение,
            Сотрудники.МестоВСтруктуреПредприятия.Руководитель.Представление.ЗаменитьNull("") КАК Руководитель,
            ВЫБОР
                КОГДА ЛичныеКабинеты.Состояние.ЗаменитьNull(СостоянияЛичногоКабинета.НеСоздан) == СостоянияЛичногоКабинета.Активирован
                    ТОГДА "Да"
                ИНАЧЕ "Нет"
            КОНЕЦ КАК Активирован
        ЗАПОЛНИТЬ
            СтрокаФайлаСостоянияЛичныхКабинетов
        ИЗ
            ФизическиеЛица КАК ФизическиеЛица
                ЛЕВОЕ СОЕДИНЕНИЕ ЛичныеКабинеты КАК ЛичныеКабинеты
                ПО ФизическиеЛица.Ссылка == ЛичныеКабинеты.ФизическоеЛицо
                ЛЕВОЕ СОЕДИНЕНИЕ Сотрудники КАК Сотрудники
                ПО ФизическиеЛица.Ссылка == Сотрудники.ФизическоеЛицо
                 И Сотрудники.ВидЗанятости НЕ В (ВидыЗанятостиСотрудников.ВнутреннийСовместитель, ВидыЗанятостиСотрудников.Подработка)
        ГДЕ
            ФизическиеЛица.Активен
             И ФизическиеЛица.Ссылка В (%ОтображаемыеФизическиеЛица)
    }

    исп ПотокЗаписи = новый ВременныйПотокЗаписи()
    знч НастройкиЗаписи = новый НастройкиЗаписиДанных()
    НастройкиЗаписи.Кодировка = "windows-1251"
    знч ЗаписьДанных = новый ЗаписьДанных(ПотокЗаписи, НастройкиЗаписи)

    ЗаписьДанных.ЗаписатьСтроку(СтрокаФайлаСостоянияЛичныхКабинетов.Заголовок(";"))

    для Структура из Запрос.Выполнить()
        Структура.ЗаполнитьВнешниеУчетныеЗаписи(
            УчетныеЗаписиПоФизическомуЛицу.ПолучитьИлиУмолчание(Структура.ФизическоеЛицоСсылка))
        ЗаписьДанных.ЗаписатьСтроку(Структура.ВСтроку(";"))
    ;

    ПотокЗаписи.СброситьБуферы()
    исп ПотокЧтения = ПотокЗаписи.ОткрытьПотокЧтения()

    возврат ОбъектноеХранилище.Загрузить(ПотокЧтения, ПотокЗаписи.Размер()).Ссылка
;

@НаСервере @ДоступноСКлиента
статический метод ИконкиПоСостояниюЛичногоКабинета(): ЧитаемоеСоответствие<СостоянияЛичногоКабинета, ДвоичныйОбъект.Ссылка>
    знч ИконкиПоСостояниюЛичногоКабинета: Соответствие<СостоянияЛичногоКабинета, ДвоичныйОбъект.Ссылка>
    для Состояние из СостоянияЛичногоКабинета.Элементы()
        ИконкиПоСостояниюЛичногоКабинета.Вставить(Состояние, ИконкаПоСостояниюЛичногоКабинета(Состояние))
    ;
    возврат новый ЧитаемоеСоответствие<СостоянияЛичногоКабинета, ДвоичныйОбъект.Ссылка>(ИконкиПоСостояниюЛичногоКабинета)
;

@НаСервере
статический метод ИконкаПоСостояниюЛичногоКабинета(Состояние: СостоянияЛичногоКабинета): ДвоичныйОбъект.Ссылка
    выбор Состояние
    когда Активирован, ВременноОтключен, НеАктивирован, ОшибкаСоздания, НеСоздан
        возврат Ресурс{Аккаунт.svg}.Ссылка
    когда НеОтправлялосьSMS, ОшибкаОтправкиSMS
        возврат Ресурс{Чат.svg}.Ссылка
    когда НеОтправлялосьПисьмо, ОшибкаОтправкиПисьма
        возврат Ресурс{Письмо.svg}.Ссылка
    ;
;


@НаСервере @ДоступноСКлиента
статический метод СброситьПароль(ФизическоеЛицо: ФизическиеЛица.Ссылка, ВременныйПароль: Строка)
    знч ФизическиеЛица = новый ЧитаемоеМножество<ФизическиеЛица.Ссылка>([ФизическоеЛицо])
    знч ПользовательСсылка = ПользователиСистемы.ПользователиФизическихЛиц(ФизическиеЛица).ПолучитьИлиУмолчание(ФизическоеЛицо)
    если ПользовательСсылка == Неопределено
        возврат
    ;
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч ПользовательОбъект: Пользователи.Объект? = ПользовательСсылка.ЗагрузитьОбъект()
    ПользователиСервиса.СброситьПароль(ПользовательОбъект.Ид, ВременныйПароль)
    ПривилегированныйРежим.Закрыть()
;