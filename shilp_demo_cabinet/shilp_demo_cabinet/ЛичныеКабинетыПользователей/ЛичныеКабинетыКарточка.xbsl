импорт ИнтерфейсныеКомпонентыСтандартные
импорт КонтрольДоступа
импорт КонтрольДоступаСтандартные
импорт ОбщиеСтандартные
импорт СтандартноеПриложение
импорт ФизическиеЛица

@Обработчик
метод ПослеЧтения()
    если Объект.ФизическоеЛицо == Неопределено
        Объект.ФизическоеЛицо = ФизическоеЛицо
    ;
    ПрочитатьДополнительныеДанные()
    СобственнаяМодифицированность = Ложь
    ЧтениеДанныхЗавершено = Истина

    ЗаполнитьВнешниеУчетныеЗаписи()
;

метод ЗаполнитьВнешниеУчетныеЗаписи()
    для УчетнаяЗапись из ДанныеКарточки.ВнешниеУчетныеЗаписи
        знч НадписьРасширенная = новый НадписьРасширенная()
        НадписьРасширенная.ЗаголовокПоля = УчетнаяЗапись.Сервис.Вид.ВСтроку()
        НадписьРасширенная.Значение = "%{УчетнаяЗапись.Сервис.Ид}\\%{УчетнаяЗапись.Ид}" 
        Компоненты.ВнешниеУчетныеЗаписи.Содержимое.Добавить(НадписьРасширенная)
    ;
;

метод СохранитьДоступность(): Булево
    возврат РассчитаннаяМодифицированность
;

метод ПрочитатьДополнительныеДанные()
    ДанныеКарточки = ДанныеКарточки(Объект.ФизическоеЛицо)
    БылоЛогинПользователя = Объект.ЛогинПользователя
    БылоЭтоАдминистраторАбонента = ДанныеКарточки.ЭтоАдминистраторАбонента
;

метод ОтправкаПриглашенияЗаголовок(): Строка
    если Объект.ОшибкаПриОтправкеПриглашения != ""
        возврат Объект.ОшибкаПриОтправкеПриглашения
    ;
    если Объект.ДатаОтправкиПриглашения != Неопределено
        пер Формат = "дд.ММ.гггг ЧЧ:мм"
        пер ДатаОтправки = МенеджерДат.ФорматМомента(Объект.ДатаОтправкиПриглашения, Формат)
        возврат "Приглашение отправлено %ДатаОтправки" 
    ;
    возврат "Приглашение еще не отправлялось"
;

метод ОтправитьПриглашениеПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    если Объект.ФизическоеЛицо == Неопределено
        возврат
    ;
    Сохранить()
    ОтправитьПриглашения(Объект.ФизическоеЛицо)
    ОбновитьФорму()
;

метод ОбновитьФорму()
    Прочитать()
    МенеджерГлобальныхКлиентскихСобытий.Оповестить(ЛичныеКабинетыПользователей.ИЗМЕНЕНЫ_ДАННЫЕ_ЛИЧНЫХ_КАБИНЕТОВ)
;

метод УчетнаяЗаписьСуществуетЗаголовок(): Строка
    пер УчетнаяЗаписьСуществуетЗаголовок: Строка
    если ЧтениеДанныхЗавершено и не ДанныеКарточки.ПользовательПодключен
        пер ЛогинПользователя: Строка = Объект.ЛогинПользователя
        если не ЛогинПользователя.Пусто() и ЛогиныПользователей.СодержитКлюч(ЛогинПользователя)
            УчетнаяЗаписьСуществуетЗаголовок = "Пользователь с таким логином уже существует"
        ;
        если не ДанныеКарточки.МобильныйТелефон.Пусто() 
            попытка
                пер КанонизированныйНомерТелефона: Строка = МенеджерСтрок.КанонизированныйНомерТелефона(ДанныеКарточки.МобильныйТелефон)
                если ТелефоныПользователей.СодержитКлюч(КанонизированныйНомерТелефона)
                    знч ПредставлениеПользователя: Строка = ТелефоныПользователей.Получить(КанонизированныйНомерТелефона)
                    УчетнаяЗаписьСуществуетЗаголовок = "Пользователь с таким телефоном уже существует (логин - %ПредставлениеПользователя)"
                ;
            поймать Ошибка: МенеджерСтрок.ИсключениеНедопустимыеСимволыНомераТелефона|МенеджерСтрок.ИсключениеНеверныйФорматНомераТелефона
                УчетнаяЗаписьСуществуетЗаголовок = Ошибка.Описание
            ;
        ;
        если не ДанныеКарточки.ЭлектроннаяПочта.Пусто() и АдресаЭлектроннойПочтыПользователей.СодержитКлюч(ДанныеКарточки.ЭлектроннаяПочта)
            знч ПредставлениеПользователя: Строка = АдресаЭлектроннойПочтыПользователей.Получить(ДанныеКарточки.ЭлектроннаяПочта)
            УчетнаяЗаписьСуществуетЗаголовок = "Пользователь с такой электронной почтой уже существует (логин - %ПредставлениеПользователя)"
        ;
    ;
    возврат УчетнаяЗаписьСуществуетЗаголовок
;

метод СохранитьПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    Сохранить()
    Закрыть()
;

метод Сохранить()
    если БылоЛогинПользователя != Объект.ЛогинПользователя
        МенеджерГлобальныхКлиентскихСобытий.Оповестить(ЛичныеКабинетыПользователей.ИЗМЕНЕНЫ_ДАННЫЕ_ЛИЧНЫХ_КАБИНЕТОВ)
        Записать()
    ;
    если БылоЭтоАдминистраторАбонента != ДанныеКарточки.ЭтоАдминистраторАбонента
        ИзменитьПользователя(ДанныеКарточки.Пользователь!, ДанныеКарточки.ЭтоАдминистраторАбонента)
        СобственнаяМодифицированность = Ложь
    ;
;

метод ЛичныеКабинетыКарточкаМаксимальнаяШирина(): Число
    возврат ОсновнойИнтерфейс.МаксимальнаяШиринаФормыДокумента()
;

метод ЛичныеКабинетыКарточкаМинимальнаяШирина(): Число
    возврат ОсновнойИнтерфейс.МинимальнаяШиринаФормыДокумента()
;

метод ЛичныеКабинетыКарточкаВысота(): Число
    возврат ОсновнойИнтерфейс.ВысотаФормыДокумента(70)
;

метод АдминистраторАбонентаДоступность(): Булево
    возврат ДанныеКарточки.ПользовательПодключен и (ФизическоеЛицо != ТекущееФизическоеЛицо или не ДанныеКарточки.ЭтоАдминистраторАбонента)
;

метод АдминистраторАбонентаПриИзменении(Источник: Флажок, Событие: СобытиеПриИзменении<Булево?>)
    СобственнаяМодифицированность = Истина
;

@ВПодсистеме 
@НаСервере @НаКлиенте
структура ДанныеКарточки
    пер ЭлектроннаяПочта: Строка
    пер МобильныйТелефон: Строка
    пер Пользователь: Пользователи.Ссылка?
    пер ЭтоАдминистраторАбонента: Булево
    пер ПользовательПодключен: Булево
    пер ВнешниеУчетныеЗаписи: ЧитаемоеМножество<УчетнаяЗапись> = {}
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеКарточки(ФизическоеЛицо: ФизическиеЛица.Ссылка): ДанныеКарточки
    знч ДанныеКарточки = новый ДанныеКарточки()

    знч ДанныеФизическогоЛица =
        ФизЛица.ДанныеФизическогоЛица(ФизическоеЛицо, ЛичныеКабинетыПользователей
            .ЗапрашиваемыеДанныеФизическогоЛицаДляСозданияКабинета())
    ДанныеКарточки.ЭлектроннаяПочта = ДанныеФизическогоЛица.РабочаяКонтактнаяИнформация.ЭлектроннаяПочта
    ДанныеКарточки.МобильныйТелефон = ДанныеФизическогоЛица.РабочаяКонтактнаяИнформация.МобильныйТелефон
    ДанныеКарточки.Пользователь = ПользователиСистемы.ПользователиФизическихЛиц(
        новый ЧитаемоеМножество<ФизическиеЛица.Ссылка>([ФизическоеЛицо]))
        .ПолучитьИлиУмолчание(ФизическоеЛицо)

    знч СвойстваПользователя = ПользователиСистемы.СвойстваПользователя(ДанныеКарточки.Пользователь)
    ДанныеКарточки.ЭтоАдминистраторАбонента = СвойстваПользователя.РолиДоступа.Содержит(РолиДоступа.АдминистраторАбонента)
    ДанныеКарточки.ПользовательПодключен = не СвойстваПользователя.ЛогинПользователя.Пусто()
    
    если МенеджерПравДоступа.ЭтоАдминистраторПриложения()
        ДанныеКарточки.ВнешниеУчетныеЗаписи = ПользователиСистемы.ВнешниеУчетныеЗаписи(ДанныеКарточки.Пользователь)
    иначе если МенеджерПравДоступа.ЭтоАдминистраторАбонента()
        исп ПривилегированныйРежим = КонтекстДоступа.Привилегированный()
        ДанныеКарточки.ВнешниеУчетныеЗаписи = ПользователиСистемы.ВнешниеУчетныеЗаписи(ДанныеКарточки.Пользователь)
        ПривилегированныйРежим.Закрыть()
    ;
    
    возврат ДанныеКарточки
;

@НаСервере @ДоступноСКлиента
статический метод ОтправитьПриглашения(ФизическоеЛицо: ФизическиеЛица.Ссылка)
    ЛичныеКабинетыПользователей.ОтправитьПриглашение(ФизическоеЛицо)
;

@НаСервере @ДоступноСКлиента
статический метод ИзменитьПользователя(Пользователь: Пользователи.Ссылка, ЭтоАдминистраторАбонента: Булево)
    пер СвойстваПользователя = ПользователиСистемы.СвойстваПользователя(Пользователь)
    если ЭтоАдминистраторАбонента
        СвойстваПользователя.РолиДоступа.Добавить(РолиДоступа.АдминистраторАбонента)
    иначе
        СвойстваПользователя.РолиДоступа.Удалить(РолиДоступа.АдминистраторАбонента)
    ;
    ПользователиСистемы.ИзменитьПользователя(СвойстваПользователя)
;