импорт КонтрольДоступа


// КонтрольДоступа
@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат КонтрольДоступа.РазрешенияДоступаТаблицыРегистраСведений()
;

@Обработчик
метод ВычислитьКлючиДоступаДляЧтения(Ключи: ЧитаемыйМассив<СтатусыВакансии.КлючРазрешенийИзмерений>): ЧитаемоеСоответствие<СтатусыВакансии.КлючРазрешенийИзмерений, ЧитаемаяКоллекция<КлючДоступа.Объект>>
    возврат ПодборПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьКлючиДоступаДляЧтенияСтатусовВакансии(Ключи)
;

@Обработчик
метод ВычислитьКлючиДоступаДляИзменения(Записи: ЧитаемыйМассив<СтатусыВакансии.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<СтатусыВакансии.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<КлючДоступа.Объект>>
    возврат ПодборПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьКлючиДоступаДляИзмененияСтатусовВакансии(Записи)
;
// КонтрольДоступа

@ВПроекте
@НаСервере @ДоступноСКлиента
метод Установить(Вакансия: Вакансии.Ссылка, Статус: СтатусВакансии)
    знч Запись = новый СтатусыВакансии.Запись(
        Период = Момент.Сейчас(),
        Вакансия = Вакансия,
        Статус = Статус)
    Записать(Запись)
    если Статус == СтатусВакансии.Закрыта
        ОпубликованныеВакансии.СнятьПризнакПубликации(Вакансия)
    ;
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод Установить(Вакансии: Массив<Вакансии.Ссылка>, Статус: СтатусВакансии)
    для Вакансия из Вакансии
        Установить(Вакансия, Статус)
    ;
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод Получить(Вакансия: Вакансии.Ссылка): СтатусВакансии?
    знч Запрос = Запрос{
        ВЫБРАТЬ
            СтатусыВакансии.Статус
        ИЗ
            СтатусыВакансии.СрезПоследних КАК СтатусыВакансии
        ГДЕ
            СтатусыВакансии.Вакансия == %Вакансия
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса
        возврат Элемент.Статус
    ;
    возврат Неопределено
;

// JSON
@ВПодсистеме
перечисление СтатусВакансииJson
    open,
    close    
;

конст СООТВЕТСТВИЕ_СТАТУС_ВАКАНСИИ_JSON = {
    СтатусВакансииJson.open: СтатусВакансии.Открыта,
    СтатусВакансииJson.close: СтатусВакансии.Закрыта
}

@ВПодсистеме
метод СтатусВакансииВJson(СтатусВакансии: СтатусВакансии): СтатусВакансииJson
    для КлючИЗначение из СООТВЕТСТВИЕ_СТАТУС_ВАКАНСИИ_JSON
        если КлючИЗначение.Значение == СтатусВакансии
            возврат КлючИЗначение.Ключ
        ;    
    ;       
;

@ВПодсистеме
метод СтатусВакансииИзJson(СтатусВакансииJson: СтатусВакансииJson): СтатусВакансии
    возврат СООТВЕТСТВИЕ_СТАТУС_ВАКАНСИИ_JSON[СтатусВакансииJson]    
;

@ВПодсистеме
структура СтатусВакансии_2_0
    @JsonСвойство(Имя = "status")
    обз знч Статус: СтатусВакансииJson?
    @JsonСвойство(Имя = "period")
    обз знч Период: Момент    
;

@ВПодсистеме
метод СтатусыВJson_V2_0(Вакансия: Вакансии.Ссылка?): Массив<СтатусВакансии_2_0>
    знч Запрос = Запрос{
        выбрать
            СтатусыВакансии.Период как Период,
            СтатусыВакансии.Статус как Статус
        из
            СтатусыВакансии как СтатусыВакансии
        где
            СтатусыВакансии.Вакансия == %Вакансия
        упорядочить по
            СтатусыВакансии.Период  
    }
    знч Статусы = новый Массив<СтатусВакансии_2_0>()
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса
        Статусы.Добавить(новый СтатусВакансии_2_0(
           Статус = СтатусВакансииВJson(Элемент.Статус),
           Период = Элемент.Период
        ))
    ;
    возврат Статусы
;

@ВПодсистеме
метод ЗаписатьСтатусыJson_V2_0(Вакансия: Вакансии.Ссылка, Данные: Массив<СтатусВакансии_2_0>)
    знч НаборЗаписей = новый СтатусыВакансии.НаборЗаписей()
    НаборЗаписей.Фильтр.Вакансия.Установить(Вакансия)
    для Элемент из Данные
        НаборЗаписей.Добавить(
            новый СтатусыВакансии.Запись(
                Вакансия = Вакансия,
                Статус = СтатусВакансииИзJson(Элемент.Статус),
                Период = Элемент.Период))
    ;
    НаборЗаписей.Записать(Истина)
;
// JSON