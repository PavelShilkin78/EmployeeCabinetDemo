импорт ФизическиеЛица
импорт ОбщиеСтандартные


@НаКлиенте @НаСервере
структура СтатистикаОтказов
    знч КандидатовОтсеяно: Соответствие<ВидыПрекращенияРассмотрения, СтатистикаПоВидам>
    знч КандидатовНаЭтапе: Массив<СтатистикаЭтапа>
    пер ВсегоКандидатов: Число
    
    метод ПоВидам(Вид: ВидыПрекращенияРассмотрения): СтатистикаПоВидам?
        пер ОтказыПоВиду: СтатистикаПоВидам?
        если Вид == ВидыПрекращенияРассмотрения.ОтклонениеКандидата или Вид == ВидыПрекращенияРассмотрения.ОтказКандидата
            ОтказыПоВиду = новый СтатистикаПоВидам({:}, {:}, {:})
            если не КандидатовОтсеяно.СодержитКлюч(Вид)
                КандидатовОтсеяно.Вставить(Вид, ОтказыПоВиду)
            иначе
                ОтказыПоВиду = КандидатовОтсеяно[Вид]
            ;
        ;
        возврат ОтказыПоВиду
    ;
    
    метод ДобавитьКандидатовЭтапа(Этап: СтатистикаЭтапа)
        КандидатовНаЭтапе.Добавить(Этап.Копия())
        если ВсегоКандидатов == 0
            ВсегоКандидатов = Этап.КоличествоКандидатов
        ;
    ;
    
    метод Конверсия(): Число
        пер Количество = 0 
        для СтатистикаПоВидам из КандидатовОтсеяно.Значения()
            Количество += СтатистикаПоВидам.КоличествоКандидатов
        ;
        возврат ВсегоКандидатов != 0 ? (Количество/ВсегоКандидатов * 100).Округлить() : 0
    ;
    
    метод Конверсия(ПорядокЭтапа: Число, ВсегоНаЭтапе: Число): Число
        пер Количество = 0 
        для СтатистикаПоВидам из КандидатовОтсеяно.Значения()
            Количество += СтатистикаПоВидам.Итоги[ПорядокЭтапа].КоличествоКандидатов
        ;
        возврат (Количество/ВсегоНаЭтапе * 100).Округлить()
    ;
;

@НаКлиенте @НаСервере
структура СтатистикаПоВидам
    обз знч Причины: Соответствие<ПричиныОтказа.Ссылка|ПричиныОтклонения.Ссылка, Массив<СтатистикаЭтапа>>?
    обз знч ПричиныНаименование: Соответствие<ПричиныОтказа.Ссылка|ПричиныОтклонения.Ссылка, Строка>?
    обз знч Итоги: Соответствие<Число, СтатистикаЭтапа>
    пер КоличествоКандидатов: Число
    
    метод ДобавитьПричину(Причина: ПричиныОтказа.Ссылка|ПричиныОтклонения.Ссылка, НаименованиеПричины: Строка, Статистика: СтатистикаЭтапа)
        если Причины.СодержитКлюч(Причина)
            Причины[Причина].Добавить(Статистика)
        иначе
            Причины.Вставить(Причина, [Статистика])
            ПричиныНаименование.Вставить(Причина, НаименованиеПричины)
        ;
        если Итоги.СодержитКлюч(Статистика.Порядок)
            Итоги[Статистика.Порядок].КоличествоКандидатов += Статистика.КоличествоКандидатов
        иначе
            Итоги.Вставить(Статистика.Порядок, Статистика.Копия())
        ;
        КоличествоКандидатов += Статистика.КоличествоКандидатов
    ;
    
    метод КоличествоКандидатовПричины(Причина: ПричиныОтказа.Ссылка|ПричиныОтклонения.Ссылка): Число
        пер ИтогКоличество = 0
        для СтатистикаЭтап из Причины.Получить(Причина)
            ИтогКоличество += СтатистикаЭтап.КоличествоКандидатов
        ;
        возврат ИтогКоличество
    ;
    
    метод ДобавитьПустойЭтап(СтатистикаЭтапа: СтатистикаЭтапа)
        СтатистикаЭтапа.КоличествоКандидатов = 0
        для Причина из Причины.Ключи()
            если не Причины[Причина].ЕстьСоответствия((Статистика) -> Статистика.Порядок == СтатистикаЭтапа.Порядок)
                Причины[Причина].Добавить(СтатистикаЭтапа)
            ;
        ;
        если не Итоги.СодержитКлюч(СтатистикаЭтапа.Порядок)
            Итоги.Вставить(СтатистикаЭтапа.Порядок, СтатистикаЭтапа)
        ;
    ;
    
    метод Конверсия(ВсегоКандидатов: Число): Число
        возврат (КоличествоКандидатов/ВсегоКандидатов * 100).Округлить()
    ;
    
    метод Конверсия(Причина: ПричиныОтказа.Ссылка|ПричиныОтклонения.Ссылка): Число
        возврат (КоличествоКандидатовПричины(Причина)/КоличествоКандидатов * 100).Округлить()
    ;
;

@НаКлиенте @НаСервере
структура СтатистикаЭтапа
    обз знч Наименование: Строка
    обз знч Порядок: Число
    пер КоличествоКандидатов: Число
    
    метод Копия(): СтатистикаЭтапа
        возврат новый СтатистикаЭтапа(
            Наименование = этот.Наименование,
            Порядок = этот.Порядок,
            КоличествоКандидатов = этот.КоличествоКандидатов
        )
    ;
;

метод КомпонентыОтчетов(): Множество<ПросмотрОтчета>
    знч ПанельОтчетов = новый Множество<ПросмотрОтчета>()
    ПанельОтчетов.Добавить(Компоненты.ДиаграммаКоличествоОтказов)
    ПанельОтчетов.Добавить(Компоненты.ДиаграммаПричиныОтказов)
    ПанельОтчетов.Добавить(Компоненты.СводныйОтказыПоЭтапамВоронки)
    ПанельОтчетов.Добавить(Компоненты.СводныйПричиныОтказа)
    возврат ПанельОтчетов
;

метод КомандаВыгрузитьОтчет(Команда: ОбычнаяКоманда)
    знч Фильтр = Компоненты.КомпонетФильтрОтчетов
    знч ОтборОт = (Фильтр.ПериодОтбора == Неопределено) ? Неопределено : Фильтр.ПериодОтбора.От
    знч ОтборДо = (Фильтр.ПериодОтбора == Неопределено) ? Неопределено : Фильтр.ПериодОтбора.До

    знч ФайлВыгрузки = ВыгрузитьВФормате(Фильтр.Рекрутер, Фильтр.Вакансия, ОтборОт, ОтборДо)
    ВыгрузкаФайлов.НачатьВыгрузку(ФайлВыгрузки, "ПричиныОтказа${Дата.Сейчас()}.xls") 
;


@НаСервере @ДоступноСКлиента
статический метод ВыгрузитьВФормате(Рекрутер: ФизическиеЛица.Ссылка?, Вакансия: Вакансии.Ссылка?, ПериодОт: Дата?, ПериодДо: Дата?): ДвоичныйОбъект.Ссылка
    пер БайтыТаблицы = СформироватьОтчет(Рекрутер, Вакансия, ПериодОт, ПериодДо).ЭкспортироватьВБайты(ФорматЭкспортаТабличногоДокумента.Xls)
    
    пер СвойстваДвоичногоОбъекта = новый ДвоичныйОбъект.Свойства("ПричиныОтказа").Временные()
    знч Результат = ОбъектноеХранилище.ЗагрузитьИзБайт(Байты = БайтыТаблицы, Свойства = СвойстваДвоичногоОбъекта)
    возврат Результат.Ссылка
;

@НаСервере
статический метод СформироватьОтчет(Рекрутер: ФизическиеЛица.Ссылка?, Вакансия: Вакансии.Ссылка?, ПериодОт: Дата?, ПериодДо: Дата?): ТабличныйДокумент
    знч СтатистикаОтказов = СтатистикаОтказов(Рекрутер, Вакансия, ПериодОт, ПериодДо)
    исп МакетДанные = Ресурс{МакетСтатистикаПоОтказам.mxl}.ОткрытьПотокЧтения()
    знч Макет = ТабличныйДокумент.Прочитать(МакетДанные)

    знч ШапкаОбщиеПоказатели = Макет.ПолучитьОбласть("ШапкаОбщиеПоказатели")
    знч ШапкаЭтапПодбора = Макет.ПолучитьОбласть("ШапкаЭтапПодбора")
    знч Шапка = Макет.ПолучитьОбласть("Шапка")
    знч СтрокаВидОтказа = Макет.ПолучитьОбласть("СтрокаВидОтказа")
    знч СтрокаВидОтказаЭтап = Макет.ПолучитьОбласть("СтрокаВидОтказаЭтап")
    знч СтрокаПричиныОтказа = Макет.ПолучитьОбласть("СтрокаПричиныОтказа")
    знч СтрокаПричиныОтказаЭтап = Макет.ПолучитьОбласть("СтрокаПричиныОтказаЭтап")
    знч СтрокаИтоги = Макет.ПолучитьОбласть("СтрокаИтоги")
    знч СтрокаИтогиЭтап = Макет.ПолучитьОбласть("СтрокаИтогиЭтап")
    знч СтрокаИтогиПроцент = Макет.ПолучитьОбласть("СтрокаИтогиПроцент")
    знч СтрокаИтогиПроцентЭтап = Макет.ПолучитьОбласть("СтрокаИтогиПроцентЭтап")
    
    пер ТабличныйДокумент = новый ТабличныйДокумент()
    знч Писатель = ТабличныйДокумент.Запись
    знч ВакансииЗаголовок: Строка = (Вакансия == Неопределено) ? "Все" : МенеджерСущности.ЗначениеРеквизитаОбъекта(Вакансия,"Наименование")
    Писатель.ВывестиВертикально(
        Шапка.ВВыводимуюОбласть().ЗаполнитьПараметры({"ДатаВремя": ДатаВремя.Сейчас().Представление()})
        .ЗаполнитьПараметры({"Вакансия": ВакансииЗаголовок})
    )
    Писатель.ВывестиГоризонтально(ШапкаОбщиеПоказатели.ВВыводимуюОбласть())

    для ДанныеЭтапа из СтатистикаОтказов.КандидатовНаЭтапе
        Писатель.ВывестиГоризонтально(ШапкаЭтапПодбора.ВВыводимуюОбласть().ЗаполнитьПараметры({"НаименованиеЭтапа": ДанныеЭтапа.Наименование}))    
    ;
    Писатель.ВывестиВертикально(
        СтрокаИтоги.ВВыводимуюОбласть().ЗаполнитьПараметры({"Количество": СтатистикаОтказов.ВсегоКандидатов})
    )
    СтатистикаЭтапов(СтатистикаОтказов.КандидатовНаЭтапе, Писатель, СтрокаИтогиЭтап)
    
    для ВидОтказа из СтатистикаОтказов.КандидатовОтсеяно.Ключи()
        знч Статистика = СтатистикаОтказов.КандидатовОтсеяно[ВидОтказа]
        знч КоличествоСКонверсией = "${Статистика.КоличествоКандидатов} (${Статистика.Конверсия(СтатистикаОтказов.ВсегоКандидатов)}%)"
        Писатель.ВывестиВертикально(
            СтрокаВидОтказа.ВВыводимуюОбласть().ЗаполнитьПараметры({"ВидОтказа": ВидОтказа.Представление()})
            .ЗаполнитьПараметры({"ОбщееКолКандидатов": КоличествоСКонверсией})
        )
        знч Итоги = Статистика.Итоги.Значения().ВМассив().СортироватьПо(Этап -> Этап.Порядок)
        СтатистикаЭтапов(Итоги, Писатель, СтрокаВидОтказаЭтап)
        
        для Причина из Статистика.Причины.Ключи()
            знч КоличествоСКонверсиейПричины = "${Статистика.КоличествоКандидатовПричины(Причина)} (${Статистика.Конверсия(Причина)}%)"
            Писатель.ВывестиВертикально(
                СтрокаПричиныОтказа.ВВыводимуюОбласть().ЗаполнитьПараметры({"ПричинаОтказа": Статистика.ПричиныНаименование[Причина]})
                .ЗаполнитьПараметры({"ОбщееКолКандидатов": КоличествоСКонверсиейПричины})
            )
            знч Этапы = Статистика.Причины[Причина].СортироватьПо(Этап -> Этап.Порядок)
            СтатистикаЭтапов(Этапы, Писатель, СтрокаПричиныОтказаЭтап)
        ;
    ;
    Писатель.ВывестиВертикально(
        СтрокаИтогиПроцент.ВВыводимуюОбласть().ЗаполнитьПараметры({"Конверсия": СтатистикаОтказов.Конверсия()})
    )
    для ДанныеЭтапа из СтатистикаОтказов.КандидатовНаЭтапе
        Писатель.ВывестиГоризонтально(СтрокаИтогиПроцентЭтап.ВВыводимуюОбласть()
            .ЗаполнитьПараметры({"Конверсия": СтатистикаОтказов.Конверсия(ДанныеЭтапа.Порядок, ДанныеЭтапа.КоличествоКандидатов)}))
    ;    
    возврат ТабличныйДокумент
;

@НаСервере
статический метод СтатистикаЭтапов(Этапы: Массив<СтатистикаЭтапа>, Писатель: ЗаписьТабличногоДокумента, Область: ОбластьТабличногоДокумента)
    для Этап из Этапы
        Писатель.ВывестиГоризонтально(
            Область.ВВыводимуюОбласть().ЗаполнитьПараметры({"КолКандидатов": Этап.КоличествоКандидатов})
        )
    ;
;

@НаСервере
статический метод СтатистикаПоВидамОтказов(Рекрутер: ФизическиеЛица.Ссылка?, Вакансия: Вакансии.Ссылка?, ПериодОт: Дата?, ПериодДо: Дата?): СтатистикаОтказов
    знч Запрос = Запрос{
        Выбрать
            Количество(ПричиныОтказа.Кандидат) как КоличествоКандидатов,
            ПричиныОтказа.ПричинаОтсева.ЗаменитьNull(Неопределено) как ПричинаОтказа,
            ПричиныОтказа.ПричинаОтсева.Наименование.ЗаменитьNull("") как НаименованиеПричиныОтсева,
            ПричиныОтказа.ВидПрекращенияРассмотрения.ЗаменитьNull(Неопределено) как ВидПрекращенияРассмотрения,
            ПричиныОтказа.ЭтапПрекращенияРассмотрения.Наименование.ЗаменитьNull("") как НаименованиеЭтапа,
            ПричиныОтказа.ПорядокЭтапа.ЗаменитьNull(0) как ПорядокВоронки
        Из
            СтатистикаПричиныОтказа(%Рекрутер, %Вакансия, Неопределено, %ПериодОт, %ПериодДо)  Как ПричиныОтказа
        Где
            ПричиныОтказа.ПричинаОтсева != Неопределено
        Сгруппировать По
            ПричиныОтказа.ПричинаОтсева,
            ПричиныОтказа.ПричинаОтсева.Наименование,
            ПричиныОтказа.ВидПрекращенияРассмотрения,
            ПричиныОтказа.ЭтапПрекращенияРассмотрения,
            ПричиныОтказа.ЭтапПрекращенияРассмотрения.Наименование,
            ПричиныОтказа.ПорядокЭтапа
    }
    исп Результат = Запрос.Выполнить()
    знч СтатистикаОтказов = новый СтатистикаОтказов()
    для СтрокаРезультата из Результат
        знч СтатистикаЭтапа = новый СтатистикаЭтапа(
            Наименование = СтрокаРезультата.НаименованиеЭтапа, 
            Порядок = СтрокаРезультата.ПорядокВоронки,
            КоличествоКандидатов = СтрокаРезультата.КоличествоКандидатов
        )
        знч СтатистикаПоВидам = СтатистикаОтказов.ПоВидам(СтрокаРезультата.ВидПрекращенияРассмотрения!)
        если СтатистикаПоВидам != Неопределено
            СтатистикаПоВидам.ДобавитьПричину(СтрокаРезультата.ПричинаОтказа!, СтрокаРезультата.НаименованиеПричиныОтсева, СтатистикаЭтапа)
        ;
    ;
    возврат СтатистикаОтказов
;

@НаСервере
статический метод СтатистикаОтказов(Рекрутер: ФизическиеЛица.Ссылка?, Вакансия: Вакансии.Ссылка?, ПериодОт: Дата?, ПериодДо: Дата?): СтатистикаОтказов
    
    знч СтатистикаОтказов = СтатистикаПоВидамОтказов(Рекрутер, Вакансия, ПериодОт, ПериодДо)
    знч Запрос = Запрос{
        Выбрать
            ДанныеЭтапов.ПорядокВоронки как ПорядокВоронки,
            ДанныеЭтапов.ЭтапВоронки.Наименование.ЗаменитьNull("") как ЭтапВоронкиНаименование,
            Количество(ДанныеЭтапов.РассматриваемыйКандидат) как КоличествоКандидатов
        Из
            СтатистикаЭтаповПодбора(%Рекрутер, %Вакансия, Неопределено, %ПериодОт, %ПериодДо) как ДанныеЭтапов
        Сгруппировать По
            ДанныеЭтапов.ПорядокВоронки,
            ДанныеЭтапов.ЭтапВоронки
        Упорядочить По
            ДанныеЭтапов.ПорядокВоронки
    }
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        знч СтатистикаЭтапа = новый СтатистикаЭтапа(
            Наименование = СтрокаРезультата.ЭтапВоронкиНаименование, 
            Порядок = СтрокаРезультата.ПорядокВоронки,
            КоличествоКандидатов = СтрокаРезультата.КоличествоКандидатов
        )
        СтатистикаОтказов.ДобавитьКандидатовЭтапа(СтатистикаЭтапа)
        
        СтатистикаЭтапа.КоличествоКандидатов = 0
        для Причина из СтатистикаОтказов.КандидатовОтсеяно.Значения()
            Причина.ДобавитьПустойЭтап(СтатистикаЭтапа)
        ;
    ;
    возврат СтатистикаОтказов
;