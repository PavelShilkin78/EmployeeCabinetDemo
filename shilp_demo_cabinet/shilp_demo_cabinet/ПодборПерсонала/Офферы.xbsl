импорт ОбщиеСтандартные
импорт УправлениеПерсоналом
импорт ФизическиеЛица
импорт Компания
импорт ВебApi
импорт КонтрольДоступа
импорт ОбменДанными
импорт УниверсальныеМеханизмы

// КонтрольДоступа
@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат КонтрольДоступа.РазрешенияДоступаТаблицыБезПраваУдаления()
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Объекты: ЧитаемыйМассив<Офферы.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<Офферы.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    возврат ПодборПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаОфферы(Объекты)
;
// КонтрольДоступа

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ДанныеАктивногоОффера(РассматриваемыйКандидат: РассматриваемыеКандидаты.Ссылка): ДанныеАктивногоОффера?
    исп КонтекстДоступа.Привилегированный()
    знч Запрос = Запрос{
        ВЫБРАТЬ ПЕРВЫЕ 1
            Офферы.Ссылка как Оффер,
            СтатусыОффера.Статус как Статус
        ПОРОДИТЬ
            ДанныеАктивногоОффера
        ИЗ
            Офферы КАК Офферы
            Внутреннее Соединение СтатусыОффера.СрезПоследних как СтатусыОффера
                По СтатусыОффера.Оффер == Офферы.Ссылка
        ГДЕ
            Офферы.РассматриваемыйКандидат == %РассматриваемыйКандидат
        УПОРЯДОЧИТЬ ПО
            СтатусыОффера.Период УБЫВ
    }
    возврат Запрос.Выполнить().ЕдинственныйИлиУмолчание()
;

@ВПроекте
@НаСервере
метод СкопироватьОффер(Оффер: Офферы.Ссылка): Офферы.Ссылка
    исп Транзакции.Начать()
    знч БазовыйОффер = Оффер.ЗагрузитьОбъект()
    знч НовыйОффер = БазовыйОффер.СоздатьКопию()
    НовыйОффер.ЗаписатьБезПроверкиЗаполнения()
    СделатьЧерновиком(НовыйОффер.Ссылка)
    возврат НовыйОффер.Ссылка
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СоздатьОфферПовторно(Оффер: Офферы.Ссылка): Офферы.Ссылка
    знч Кандидат = РассматриваемыйКандидат(Оффер)
    знч ПричинаПрекращения = ПричиныПрекращенияРассмотрения.Получить(Кандидат)
    если ПричинаПрекращения != Неопределено
        ПричиныПрекращенияРассмотрения.Удалить(
            новый ПричиныПрекращенияРассмотрения.КлючЗаписи(Кандидат = Кандидат)
        )
    ;
    возврат СкопироватьОффер(Оффер)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СоздатьОффер(РассматриваемыйКандидат: РассматриваемыеКандидаты.Ссылка): Офферы.Ссылка
    исп Транзакции.Начать()
    
    знч Запрос = Запрос{
        Выбрать
            ЗаявкиНаПодбор.Должность.ЗаменитьNull(Неопределено) как Должность,
            ЗаявкиНаПодбор.Подразделение.ЗаменитьNull(Неопределено) как Подразделение,
            ЗаявкиНаПодбор.Инициатор.ЗаменитьNull(Неопределено) как Руководитель
            
        из
            РассматриваемыеКандидаты как РассматриваемыеКандидаты
            внутреннее соединение ЗаявкиНаПодбор как ЗаявкиНаПодбор
            по 
                РассматриваемыеКандидаты.Вакансия.ЗаявкаНаПодбор == ЗаявкиНаПодбор.Ссылка
    }
    
    знч РеквизитыЗаявки = Запрос.Выполнить().ПервыйИлиУмолчание()
    
    знч ОфферОбъект = новый Офферы.Объект(
        Дата = Дата.Сейчас(),
        РассматриваемыйКандидат = РассматриваемыйКандидат,
        СрокПринятия = Дата.Сейчас(),
        ЗаработнаяПлата = РассматриваемыйКандидат.ЗагрузитьОбъект()!.ЗарплатныеОжидания,
        Должность = РеквизитыЗаявки?.Должность,
        Подразделение = РеквизитыЗаявки?.Подразделение,
        Руководитель = РеквизитыЗаявки?.Руководитель
    )
    ОфферОбъект.Записать()
    СделатьЧерновиком(ОфферОбъект.Ссылка)
    возврат ОфферОбъект.Ссылка
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СделатьЧерновиком(Оффер: Офферы.Ссылка)
    исп Транзакции.Начать()
    знч Запись = новый СтатусыОффера.Запись(
        Период = Момент.Сейчас(),
        Оффер = Оффер, 
        Статус = СтатусОффера.Черновик
    )
    СтатусыОффера.Записать(Запись)
    Файлы.УдалитьФайлыПоВладельцу(Оффер)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ОтправитьКандидату(Оффер: Офферы.Ссылка)
    исп Транзакции.Начать()
    знч Запись = новый СтатусыОффера.Запись(
        Период = Момент.Сейчас(),
        Оффер = Оффер, 
        Статус = СтатусОффера.ОтправленКандидату
    )
    СтатусыОффера.Записать(Запись)
    СтатусыРассматриваемыхКандидатов.УстановитьПоТриггеру(
        РассматриваемыйКандидат(Оффер),
        ТриггерыПодбораПерсонала.ПриОтправкеОффера)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод Отозвать(Оффер: Офферы.Ссылка)
    исп КонтекстДоступа.Привилегированный()
    исп Транзакции.Начать()
    знч Запись = новый СтатусыОффера.Запись(
        Период = Момент.Сейчас(),
        Оффер = Оффер, 
        Статус = СтатусОффера.Отозван
    )
    СтатусыОффера.Записать(Запись)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод Принять(Оффер: Офферы.Ссылка)
    исп КонтекстДоступа.Привилегированный()    
    исп Транзакции.Начать()
    знч ОфферОбъект = Оффер.ЗагрузитьОбъект()!
    ОфферОбъект.ДатаПринятия = Дата.Сейчас()
    ОфферОбъект.ЗаписатьБезПроверкиЗаполнения()
    знч Запись = новый СтатусыОффера.Запись(
        Период = Момент.Сейчас(),
        Оффер = Оффер, 
        Статус = СтатусОффера.Принят
    )
    СтатусыОффера.Записать(Запись)
    СтатусыРассматриваемыхКандидатов.УстановитьПоТриггеру(
        РассматриваемыйКандидат(Оффер),
        ТриггерыПодбораПерсонала.ПриПринятииОффера)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод Отклонить(Оффер: Офферы.Ссылка, Причина: ПричиныОтказа.Ссылка|ПричиныОтклонения.Ссылка?, Комментарий: Строка)
    исп Транзакции.Начать()
    исп КонтекстДоступа.Привилегированный()
    знч Запись = новый СтатусыОффера.Запись(
        Период = Момент.Сейчас(),
        Оффер = Оффер, 
        Статус = СтатусОффера.Отклонен
    )
    СтатусыОффера.Записать(Запись)
    
    знч Кандидат = РассматриваемыйКандидат(Оффер)
    ПричиныПрекращенияРассмотрения.Установить(
            Кандидат = Кандидат, 
            Вид = ВидыПрекращенияРассмотрения.ОтказКандидата, 
            Причина = Причина,
            Комментарий = Комментарий,
            Сотрудник = ПользователиСистемы.ТекущееФизическоеЛицо())
    СтатусыРассматриваемыхКандидатов.УстановитьПоТриггеру(Кандидат, ТриггерыПодбораПерсонала.ПриОтклоненииОффера)
;

@ВПроекте
метод ЗаполнитьПараметрыОффераВСообщении(ТекстыСообщений: Соответствие<Строка, Строка>, Оффер:Офферы.Ссылка): Соответствие<Строка, Строка>
    знч ДанныеВакансии = МенеджерСущности.ЗначенияРеквизитовОбъекта(Оффер, ["Должность", "ДатаВыходаНаРаботу"])
    пер Тексты: Соответствие<Строка, Строка>
    для КлючИЗначение из ТекстыСообщений
        пер Текст = КлючИЗначение.Значение.Заменить("\%КМНаименованиеДолжности\%", ДанныеВакансии.Получить("Должность").Представление())
        Текст = Текст.Заменить("\%ДатаВыходаНаРаботу\%", МенеджерДат.ФорматДаты(ДанныеВакансии.Получить("ДатаВыходаНаРаботу") как Дата))
        Тексты.Вставить(КлючИЗначение.Ключ, Текст)
    ;
    возврат Тексты
;

@ВПроекте
@НаСервере
метод СформироватьPdfПредставление(Оффер: Офферы.Ссылка): ДвоичныйОбъект
    знч ПечатныйОффер = МенеджерТабличныхДокументов.ИзРесурса(Ресурс{ШаблонОффера.mxl})
    знч Данные = ДанныеПечатногоОффера(Оффер)
    ЗаполнитьШаблонОффераДанными(ПечатныйОффер, Данные)
    возврат МенеджерТабличныхДокументов.ВPdf(ПечатныйОффер)
;

@ВПроекте
@НаСервере
метод СохранитьPdfПредставление(Оффер: Офферы.Ссылка, ОфферPdf: ДвоичныйОбъект): Файлы.Ссылка
    знч ФайлНаУдаление = Файлы.ФайлыПоВладельцу(
        ВладелецФайлов = Оффер, 
        ВидыФайлов = [ВидыФайла.ДополнительноеПредставлениеЭлектронногоДокумента]
    ).ЕдинственныйИлиУмолчание()
    если ФайлНаУдаление != Неопределено
        Файлы.УдалитьФайл(ФайлНаУдаление.Ссылка)
    ;
    знч ФайлОфферPdf = Файлы.НовыйФайл(ОфферPdf)
    ФайлОфферPdf.Владелец = Оффер
    ФайлОфферPdf.Наименование = ПолучитьФИОКандидата(Оффер).ПредставлениеИмени(ФизЛица.ВариантПредставленияИмени.ФамилияИОСлитно)
    ФайлОфферPdf.Расширение = "pdf"
    ФайлОфферPdf.ВидФайла = ВидыФайла.ДополнительноеПредставлениеЭлектронногоДокумента
    ФайлОфферPdf.Записать()
    возврат ФайлОфферPdf.Ссылка
;

@НаСервере
метод ПолучитьФИОКандидата(Оффер: Офферы.Ссылка): ФизЛица.ФИО
    знч Запрос = Запрос{
        Выбрать
            РассматриваемыйКандидат.Кандидат.Фамилия.ЗаменитьNull("") Как Фамилия,
            РассматриваемыйКандидат.Кандидат.Имя.ЗаменитьNull("") Как Имя,
            РассматриваемыйКандидат.Кандидат.Отчество.ЗаменитьNull("") Как Отчество
        Из
            Офферы Как Офферы
        Где
            Ссылка == %Оффер
    }
    знч Кандидат = Запрос.Выполнить().Единственный()
    возврат ФизЛица.ФИОПоЧастям(Кандидат.Фамилия, Кандидат.Имя, Кандидат.Отчество)
;

@НаСервере
метод ЗаполнитьШаблонОффераДанными(ШаблонОффера: ТабличныйДокумент, Данные: ДанныеПечатногоОффера)
    если Данные.Логотип != Неопределено
        знч Логотип = ШаблонОффера.Рисунки.ПолучитьРисунок("Логотип") как ИзображениеТабличногоДокумента
        Логотип.УстановитьИзображение(Данные.Логотип!.Загрузить().ПолучитьБайты())
    ;
    ЗаполнитьПараметрыОбласти(ШаблонОффера.ПолучитьОбласть("Приветствие"), {
        "[Обращение]": Данные.Пол == ПолФизическогоЛица.Мужской ? "Уважаемый" : "Уважаемая",
        "[ИмяОтчество]": Данные.ИмяОтчество
    })
    ЗаполнитьПараметрыОбласти(ШаблонОффера.ПолучитьОбласть("МестоРаботы"), {
        "[Компания]": Данные.Компания,
        "[Должность]": Данные.Должность,
        "[Подразделение]": Данные.Подразделение
    })
    ЗаполнитьПараметрыОбласти(ШаблонОффера.ПолучитьОбласть("ДатаВыходаНаРаботу"), {
        "[ДатаВыходаНаРаботу]": "${Данные.ДатаВыходаНаРаботу}"
    })       
    ЗаполнитьПараметрыОбласти(ШаблонОффера.ПолучитьОбласть("ИспытательныйСрок"), {
        "[ИспытательныйСрок]": Данные.ИспытательныйСрок
    })       
    ЗаполнитьПараметрыОбласти(ШаблонОффера.ПолучитьОбласть("ЗаработнаяПлата"), {
        "[ЗаработнаяПлата]": Данные.ЗаработнаяПлата
    })       
    ЗаполнитьПараметрыОбласти(ШаблонОффера.ПолучитьОбласть("РежимРаботы"), {
        "[РежимРаботы]": Данные.РежимРаботы
    })       
;

@НаСервере
структура ДанныеПечатногоОффера
    обз знч Логотип: ДвоичныйОбъект.Ссылка?
    обз знч ИмяОтчество: Строка
    обз знч Пол: ПолФизическогоЛица
    обз знч Компания: Строка
    обз знч Должность: Строка
    обз знч Подразделение: Строка
    обз знч ДатаВыходаНаРаботу: Дата
    обз знч ИспытательныйСрок: Строка
    обз знч ЗаработнаяПлата: Строка
    обз знч РежимРаботы: Строка
;

@НаСервере
метод ДанныеПечатногоОффера(Оффер: Офферы.Ссылка): ДанныеПечатногоОффера
    знч Запрос = Запрос{
        Выбрать
            Офферы.РассматриваемыйКандидат.Кандидат.Фамилия.ЗаменитьNull("") Как Фамилия,
            Офферы.РассматриваемыйКандидат.Кандидат.Имя.ЗаменитьNull("") Как Имя,
            Офферы.РассматриваемыйКандидат.Кандидат.Отчество.ЗаменитьNull("") Как Отчество,
            Офферы.РассматриваемыйКандидат.Кандидат.Пол Как Пол,
            Офферы.Подразделение.Представление.ЗаменитьNull("") Как Подразделение,
            Офферы.Должность.Представление.ЗаменитьNull("") Как Должность,
            Офферы.ДатаВыходаНаРаботу Как ДатаВыходаНаРаботу,
            Офферы.ЗаработнаяПлата Как ЗаработнаяПлата,
            Офферы.ИспытательныйСрок Как ИспытательныйСрок,
            Офферы.РежимРаботы Как РежимРаботы
        Из
            Офферы Как Офферы
        Где
            Офферы.Ссылка == %Оффер
    }
    знч ДанныеОффера = Запрос.Выполнить().Единственный()
    знч ФИО = новый ФизЛица.ФИО(ДанныеОффера.Фамилия, ДанныеОффера.Имя, ДанныеОффера.Отчество, "")
    знч ОписаниеРаботодателя = ОписаниеРаботодателя.Получить().ЗагрузитьОбъект()!
    возврат новый ДанныеПечатногоОффера(
        Логотип = ОписаниеРаботодателя.Логотип?.ЗагрузитьОбъект()!.Хранилище,
        ИмяОтчество = ФИО.ПредставлениеИмени(ФизЛица.ВариантПредставленияИмени.ИмяОтчество),
        Пол = (ДанныеОффера.Пол это ПолФизическогоЛица) ? (ДанныеОффера.Пол как ПолФизическогоЛица): ПолФизическогоЛица.Мужской,
        Компания = ОписаниеРаботодателя.Наименование,
        Должность = ДанныеОффера.Должность,
        Подразделение = ДанныеОффера.Подразделение,
        ДатаВыходаНаРаботу = ДанныеОффера.ДатаВыходаНаРаботу!,
        ИспытательныйСрок = ПредставлениеИспытательногоСрока(ДанныеОффера.ИспытательныйСрок),
        ЗаработнаяПлата = ДанныеОффера.ЗаработнаяПлата.ПредставлениеОплаты(УказыватьНеттоГросс = Истина, ПредставлениеНеУказана = "Не указана"),
        РежимРаботы = "${ДанныеОффера.РежимРаботы}"
    )
;

@НаСервере
метод РассматриваемыйКандидат(Оффер: Офферы.Ссылка): РассматриваемыеКандидаты.Ссылка
    знч Запрос = Запрос{
        Выбрать 
            РассматриваемыйКандидат
        Из 
            Офферы 
        Где 
            Ссылка == %Оффер
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    возврат РезультатЗапроса.Единственный().РассматриваемыйКандидат
;

@НаСервере
метод ЗаполнитьПараметрыОбласти(Область: ОбластьТабличногоДокумента, Параметры: ЧитаемоеСоответствие<Строка, Строка>)
    МенеджерТабличныхДокументов.ЗаполнитьПараметрыОбласти(Область, Параметры)
;

@ВПодсистеме
@НаСервере @НаКлиенте
метод ПредставлениеИспытательногоСрока(ИспытательныйСрок: СмещениеДатыВремени?): Строка
    возврат ИспытательныйСрок?.ПредставлениеСмещения() ?? "Отсутствует"    
;

// JSON

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "offer"
;

@ВПроекте
структура Оффер_2_0
    @JsonСвойство(Имя = "ID")
    обз знч Идентификатор: Строка
    @JsonСвойство(Имя = "candidateInWork")
    обз знч РассматриваемыйКандидат: Строка
    @JsonСвойство(Имя = "division")
    обз знч Подразделение: Строка
    @JsonСвойство(Имя = "position")
    обз знч Должность: Строка
    @JsonСвойство(Имя = "date")
    пер Дата: Дата
    @JsonСвойство(Имя = "acceptancePeriod")
    пер СрокПринятия: Дата?
    @JsonСвойство(Имя = "acceptedDate")
    пер ДатаПринятия: Дата?
    @JsonСвойство(Имя = "head")
    пер Руководитель: Строка?
    @JsonСвойство(Имя = "startDate")
    пер ДатаВыходаНаРаботу: Дата?
    @JsonСвойство(Имя = "person")
    пер ФизическоеЛицо: Строка?
    @JsonСвойство(Имя = "salary")
    пер ЗаработнаяПлата: ОписаниеОплаты.ДанныеJson_V2_0
    @JsonСвойство(Имя = "probation")
    пер ИспытательныйСрок: СмещениеДатыВремени.ДанныеJson_V2_0?
    @JsonСвойство(Имя = "shedule")
    пер РежимРаботы: Строка
    @JsonСвойство(Имя = "status")
    пер Статус: СтатусыОффера.СтатусОффераJson?
    @JsonСвойство(Имя = "stafflistPosition")
    пер ПозицияШтатногоРасписания: Строка?
    @JsonСвойство(Имя = "version")
    пер Версия: Число? 
    @JsonСвойство(Имя = "attachedFiles")
    пер ПрисоединенныеФайлы: Массив<МенеджерФайлов.ДанныеФайлаJson>?
;

@ВПроекте
структура Оффер_2_5
    @JsonСвойство(Имя = "ID")
    обз знч Идентификатор: Строка
    @JsonСвойство(Имя = "candidateInWork")
    обз знч РассматриваемыйКандидат: Строка
    @JsonСвойство(Имя = "division")
    обз знч Подразделение: Строка
    @JsonСвойство(Имя = "position")
    обз знч Должность: Строка
    @JsonСвойство(Имя = "date")
    пер Дата: Дата
    @JsonСвойство(Имя = "acceptancePeriod")
    пер СрокПринятия: Дата?
    @JsonСвойство(Имя = "acceptedDate")
    пер ДатаПринятия: Дата?
    @JsonСвойство(Имя = "head")
    пер Руководитель: Строка?
    @JsonСвойство(Имя = "startDate")
    пер ДатаВыходаНаРаботу: Дата?
    @JsonСвойство(Имя = "person")
    пер ФизическоеЛицо: Строка?
    @JsonСвойство(Имя = "salary")
    пер ЗаработнаяПлата: ОписаниеОплаты.ДанныеJson_V2_0
    @JsonСвойство(Имя = "probation")
    пер ИспытательныйСрок: СмещениеДатыВремени.ДанныеJson_V2_0?
    @JsonСвойство(Имя = "shedule")
    пер РежимРаботы: Строка
    @JsonСвойство(Имя = "statuses")
    пер Статусы: Массив<СтатусыОффера.СтатусОффера_2_5>
    @JsonСвойство(Имя = "stafflistPosition")
    пер ПозицияШтатногоРасписания: Строка?
    @JsonСвойство(Имя = "version")
    пер Версия: Число? 
    @JsonСвойство(Имя = "attachedFiles")
    пер ПрисоединенныеФайлы: Массив<МенеджерФайлов.ДанныеФайлаJson>?
;

@ВПодсистеме
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{2.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    если ВерсияФорматаОбмена >= Версия{2.5}
        возврат Тип<Оффер_2_5>
    иначе если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<Оффер_2_0>
    ;
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(Оффер: Оффер_2_5, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать()
    знч ЗагружаемыйОбъект = Сервисы.ПрочитатьОбъект(
        Оффер.Идентификатор, &Офферы.Объект.новый(Ууид), Тип<Офферы.Ссылка>) как Офферы.Объект
    ЗагружаемыйОбъект.РассматриваемыйКандидат = Сервисы.ПолучитьСсылку(
        РассматриваемыеКандидаты.ВнешняяСсылка(Оффер.РассматриваемыйКандидат)) как РассматриваемыеКандидаты.Ссылка
    ЗагружаемыйОбъект.Подразделение = Сервисы.ПолучитьСсылку(
        СтруктураПредприятия.ВнешняяСсылка(Оффер.Подразделение)) как СтруктураПредприятия.Ссылка
    ЗагружаемыйОбъект.Должность = Сервисы.ПолучитьСсылку(
        Должности.ВнешняяСсылка(Оффер.Должность)) как Должности.Ссылка
    ЗагружаемыйОбъект.Дата = Оффер.Дата
    ЗагружаемыйОбъект.СрокПринятия = Оффер.СрокПринятия
    ЗагружаемыйОбъект.ДатаВыходаНаРаботу = Оффер.ДатаВыходаНаРаботу
    ЗагружаемыйОбъект.ДатаПринятия = Оффер.ДатаПринятия
    
    ЗагружаемыйОбъект.ЗаработнаяПлата.ЗаполнитьПоJson(Оффер.ЗаработнаяПлата)
    
    если Оффер.ИспытательныйСрок != Неопределено
        знч ИспытательныйСрок = новый СмещениеДатыВремени()
        ИспытательныйСрок.ЗаполнитьПоJson(Оффер.ИспытательныйСрок)
        ЗагружаемыйОбъект.ИспытательныйСрок = ИспытательныйСрок
    ;
    
    ЗагружаемыйОбъект.РежимРаботы = Оффер.РежимРаботы
    
    если Оффер.Руководитель != Неопределено
        ЗагружаемыйОбъект.Руководитель = Сервисы.ПолучитьСсылку(
            ФизическиеЛица.ВнешняяСсылка(Оффер.Руководитель)) как ФизическиеЛица.Ссылка    
    ;
    если Оффер.ПозицияШтатногоРасписания != Неопределено
        ЗагружаемыйОбъект.ПозицияШтатногоРасписания = Сервисы.ПолучитьСсылку(
            ФизическиеЛица.ВнешняяСсылка(Оффер.ПозицияШтатногоРасписания)) как ШтатноеРасписание.Ссылка
    ;    
    знч Кандидат = Запрос{выбрать Кандидат из РассматриваемыеКандидаты где Ссылка == %{ЗагружаемыйОбъект.РассматриваемыйКандидат}}
        .Выполнить().ЕдинственныйИлиУмолчание()?.Кандидат
    исп Привилегированный = КонтекстДоступа.Привилегированный()
    если Оффер.ФизическоеЛицо == Неопределено
        ФизическиеЛицаКандидатов.УдалитьЗапись(Кандидат)
    иначе
        ФизическиеЛицаКандидатов.Установить(
            Кандидат, Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(Оффер.ФизическоеЛицо)) как ФизическиеЛица.Ссылка)
    ;
    Привилегированный.Закрыть()

    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ЗагружаемыйОбъект, Оффер.Идентификатор), Сервисы.ИнструментыМенеджераОбъекта) 
    если Оффер.ПрисоединенныеФайлы != Неопределено
        знч ВложенныеФайлы = Файлы.ВложенияИзJson(Оффер.ПрисоединенныеФайлы, Сервисы, ЗагружаемыйОбъект.Ссылка)
        Файлы.ЗаписатьФайлыПоВладельцу(ВложенныеФайлы, ЗагружаемыйОбъект.Ссылка)
    иначе
        Файлы.УдалитьФайлыПоВладельцу(ЗагружаемыйОбъект.Ссылка)
    ;
    если не Оффер.Статусы.Пусто()
        СтатусыОффера.ЗаписатьСтатусыJson_V2_5(ЗагружаемыйОбъект.Ссылка, Оффер.Статусы)
    ; 
;

@ВПодсистеме
метод ПолучитьДанныеJson(Ссылка: Офферы.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Объект?
    если Ссылка == Неопределено 
        возврат Неопределено
    ;
    возврат ГруппаИзмененийВJson([Ссылка], Сервисы)["offers"][0]
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"offers": ИсходящиеДанныеВJson(Ссылки, Сервисы)}
;

метод ИсходящиеДанныеВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеОбъектов(Ссылки)
        Данные.Добавить(ДанныеОбъектаВJson_V2_5(КлючИЗначение.Значение, Сервисы))
    ;
    возврат Данные
;

метод ДанныеОбъектов(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<Офферы.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Данные: Соответствие<Офферы.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>> 
    если Ссылки.Пусто()
        возврат Данные
    ;
    знч Запрос = Запрос{
        Выбрать
            Офферы.Ссылка Как Ссылка,
            Офферы.Дата Как Дата,
            Офферы.РассматриваемыйКандидат Как РассматриваемыйКандидат,
            Офферы.СрокПринятия Как СрокПринятия,
            Офферы.ДатаПринятия Как ДатаПринятия,
            Офферы.ЗаработнаяПлата как ЗаработнаяПлата,
            Офферы.Подразделение Как Подразделение,
            Офферы.Должность Как Должность,
            Офферы.Руководитель Как Руководитель,
            Офферы.ДатаВыходаНаРаботу Как ДатаВыходаНаРаботу,
            Офферы.ПозицияШтатногоРасписания как ПозицияШтатногоРасписания,
            Офферы.ИспытательныйСрок как ИспытательныйСрок,
            Офферы.РежимРаботы как РежимРаботы,
            ФизическиеЛицаКандидатов.ФизическоеЛицо.ЗаменитьNull(Неопределено) как ФизическоеЛицо
        Из
            Офферы Как Офферы
            Левое Соединение ФизическиеЛицаКандидатов Как ФизическиеЛицаКандидатов
                По Офферы.РассматриваемыйКандидат.Кандидат == ФизическиеЛицаКандидатов.Кандидат
        Где
            Ссылка В (%Ссылки)        
    }
    исп Результат = Запрос.Выполнить() 
    для СтрокаРезультата из Результат
        знч ДанныеОбъекта = новый Соответствие<Строка, Объект?>()
        ДанныеОбъекта.ВставитьВсе(МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(СтрокаРезультата, Результат))
        Данные.Вставить(
            СтрокаРезультата.Ссылка,
            ДанныеОбъекта
        )
    ;
    
    возврат Данные    
;

метод ДанныеОбъектаВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Оффер_2_0
    знч ОфферСсылка = ДанныеОбъекта["Ссылка"] как Офферы.Ссылка
    знч Оффер = новый Оффер_2_0(
        Сервисы.ПолучитьИдентификатор(ОфферСсылка),
        Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["РассматриваемыйКандидат"] как РассматриваемыеКандидаты.Ссылка),
        Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Подразделение"] как СтруктураПредприятия.Ссылка),
        Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Должность"] как Должности.Ссылка))

    Оффер.Дата = ДанныеОбъекта["Дата"] как Дата
    Оффер.СрокПринятия = ДанныеОбъекта["СрокПринятия"] как Дата?
    Оффер.ДатаПринятия = ДанныеОбъекта["ДатаПринятия"] как Дата?
    
    Оффер.ЗаработнаяПлата = (ДанныеОбъекта["ЗаработнаяПлата"] как ОписаниеОплаты).ПолучитьJson_V2_0()
    
    если ДанныеОбъекта["ИспытательныйСрок"] != Неопределено
        Оффер.ИспытательныйСрок = (ДанныеОбъекта["ИспытательныйСрок"] как СмещениеДатыВремени).ПолучитьJson_V2_0()
    ;
    Оффер.РежимРаботы = (ДанныеОбъекта["РежимРаботы"] как Строка)
    
    если ДанныеОбъекта["Руководитель"]  != Неопределено
        Оффер.Руководитель = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Руководитель"] как ФизическиеЛица.Ссылка)
    ;
    если ДанныеОбъекта["ФизическоеЛицо"] != Неопределено
        знч ИдентификаторФизическогоЛица = ОбменДанными.ВнешниеИдентификаторыПоВнутреннимСсылкам(
            [ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка]).ПервыйИлиУмолчание()?.Значение
        если ИдентификаторФизическогоЛица != Неопределено
            Оффер.ФизическоеЛицо = ИдентификаторФизическогоЛица
        иначе
            Оффер.ФизическоеЛицо = (ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка).Ид.ВСтроку()
        ;         
    ;
    Оффер.ДатаВыходаНаРаботу = ДанныеОбъекта["ДатаВыходаНаРаботу"] как Дата?
    если ДанныеОбъекта["ПозицияШтатногоРасписания"] != Неопределено
        Оффер.ПозицияШтатногоРасписания = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ПозицияШтатногоРасписания"] как ШтатноеРасписание.Ссылка)
    ;
    Оффер.Статус = СтатусыОффера.СтатусыВJson_V2_0(ОфферСсылка)
    
    если Сервисы.ПолучитьВерсию != Неопределено
        Оффер.Версия = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как Офферы.Ссылка))
    ;
    знч ПрисоединенныеФайлыДляВыгрузки = ПрисоединенныеФайлыМенеджер.ПрисоединенныеФайлы(ОфферСсылка)
    если не ПрисоединенныеФайлыДляВыгрузки.Файлы.Пусто()
        знч ПрисоединенныеФайлыДанные = новый Массив<МенеджерФайлов.ДанныеФайлаJson>()
        для ФайлДляВыгрузки из ПрисоединенныеФайлыДляВыгрузки.Файлы
            ПрисоединенныеФайлыДанные.Добавить(
                Файлы.ДанныеФайлаJson(ФайлДляВыгрузки.Ссылка, Сервисы)    
            )
        ;
        Оффер.ПрисоединенныеФайлы = ПрисоединенныеФайлыДанные
    ;
    возврат Оффер        
;

метод ДанныеОбъектаВJson_V2_5(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Оффер_2_5
    знч ОфферСсылка = ДанныеОбъекта["Ссылка"] как Офферы.Ссылка
    знч Оффер = новый Оффер_2_5(
        Сервисы.ПолучитьИдентификатор(ОфферСсылка),
        Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["РассматриваемыйКандидат"] как РассматриваемыеКандидаты.Ссылка),
        Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Подразделение"] как СтруктураПредприятия.Ссылка),
        Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Должность"] как Должности.Ссылка))

    Оффер.Дата = ДанныеОбъекта["Дата"] как Дата
    Оффер.СрокПринятия = ДанныеОбъекта["СрокПринятия"] как Дата?
    Оффер.ДатаПринятия = ДанныеОбъекта["ДатаПринятия"] как Дата?
    
    Оффер.ЗаработнаяПлата = (ДанныеОбъекта["ЗаработнаяПлата"] как ОписаниеОплаты).ПолучитьJson_V2_0()
    
    если ДанныеОбъекта["ИспытательныйСрок"] != Неопределено
        Оффер.ИспытательныйСрок = (ДанныеОбъекта["ИспытательныйСрок"] как СмещениеДатыВремени).ПолучитьJson_V2_0()
    ;
    Оффер.РежимРаботы = (ДанныеОбъекта["РежимРаботы"] как Строка)
    
    если ДанныеОбъекта["Руководитель"]  != Неопределено
        Оффер.Руководитель = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Руководитель"] как ФизическиеЛица.Ссылка)
    ;
    если ДанныеОбъекта["ФизическоеЛицо"] != Неопределено
        знч ИдентификаторФизическогоЛица = ОбменДанными.ВнешниеИдентификаторыПоВнутреннимСсылкам(
            [ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка]).ПервыйИлиУмолчание()?.Значение
        если ИдентификаторФизическогоЛица != Неопределено
            Оффер.ФизическоеЛицо = ИдентификаторФизическогоЛица
        иначе
            Оффер.ФизическоеЛицо = (ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка).Ид.ВСтроку()
        ;         
    ;
    Оффер.ДатаВыходаНаРаботу = ДанныеОбъекта["ДатаВыходаНаРаботу"] как Дата?
    если ДанныеОбъекта["ПозицияШтатногоРасписания"] != Неопределено
        Оффер.ПозицияШтатногоРасписания = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ПозицияШтатногоРасписания"] как ШтатноеРасписание.Ссылка)
    ;
    Оффер.Статусы = СтатусыОффера.СтатусыВJson_V2_5(ОфферСсылка) 
    
    если Сервисы.ПолучитьВерсию != Неопределено
        Оффер.Версия = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как Офферы.Ссылка))
    ;
    знч ПрисоединенныеФайлыДляВыгрузки = ПрисоединенныеФайлыМенеджер.ПрисоединенныеФайлы(ОфферСсылка)
    если не ПрисоединенныеФайлыДляВыгрузки.Файлы.Пусто()
        знч ПрисоединенныеФайлыДанные = новый Массив<МенеджерФайлов.ДанныеФайлаJson>()
        для ФайлДляВыгрузки из ПрисоединенныеФайлыДляВыгрузки.Файлы
            ПрисоединенныеФайлыДанные.Добавить(
                Файлы.ДанныеФайлаJson(ФайлДляВыгрузки.Ссылка, Сервисы)    
            )
        ;
        Оффер.ПрисоединенныеФайлы = ПрисоединенныеФайлыДанные
    ;
    возврат Оффер        
;

// Конец JSON

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: Офферы.Ссылка, ПараметрыЗаписи: Офферы.ПараметрыЗаписи)
    если не ПараметрыЗаписи.РежимЗагрузкиДанных 
        знч РассматриваемыйКандидат = Запрос{выбрать РассматриваемыйКандидат из Офферы где Ссылка == %Ссылка}
            .Выполнить().ЕдинственныйИлиУмолчание()?.РассматриваемыйКандидат
            
        если РассматриваемыйКандидат != Неопределено
            ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(РассматриваемыйКандидат, Истина)
            РегистрацияИзменений.ЗарегистрироватьИзменение(РассматриваемыйКандидат, Неопределено, ХарактерыИзменений.Изменение)
        ;        
    ;
    ЗарегистрироватьИзменение(Ссылка, ПараметрыЗаписи.РежимЗагрузкиДанных)
;

@ВПодсистеме
метод ПослеУдаленияДополнение(Ссылка: Офферы.Ссылка, ПараметрыУдаления: Офферы.ПараметрыУдаления)
    если не ПараметрыУдаления.РежимЗагрузкиДанных
        РегистрацияИзменений.ЗарегистрироватьУдаление(Ссылка)
    ;
;

метод ЗарегистрироватьИзменение(Оффер: Офферы.Ссылка, РежимЗагрузкиДанных: Булево = Ложь)
    знч СтатусОффера = СтатусыОффера.Получить(Оффер)
    знч СервисРегистрацииИзменений = ПодборПерсоналаРегистрацияИзменений.ПолучитьСервис()
    если СервисРегистрацииИзменений.ОфферыТребуетсяРегистрация(СтатусОффера, РежимЗагрузкиДанных)
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Оффер, Истина)
        для Разделитель из СервисРегистрацииИзменений.ОфферыРазделителиДанных(СтатусОффера)
            РегистрацияИзменений.ЗарегистрироватьИзменение(Оффер, Разделитель)
        ;    
    ;             
;