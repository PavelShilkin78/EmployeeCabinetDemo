импорт Анкетирование::Обмен
импорт ОбменДанными

@ВПроекте
@НаСервере @НаКлиенте
исключение НастройкиПодбораПерсоналаУжеОпределены   
;

@ВПроекте
@НаСервере @НаКлиенте
перечисление ОшибкиПроверкиЗаполнения
    ТриггерНеЗаполнен,
    ОдномуТриггеруНазначеноБолееОдногоСтатуса,
    СтатусНеЗаполнен,
    СтатусИспользованБолееОдногоРаза
;

@ВПроекте
@НаСервере @НаКлиенте
исключение ИсключениеПроверкиЗаполнения
    обз знч Ошибки: ЧитаемоеМножество<ОшибкиПроверкиЗаполнения>
;

метод ПроверитьОтсутствиеНастроек()
    если ЭтоНовый()
        исп Результат = Запрос{
            ВЫБРАТЬ
                НастройкиПодбораПерсонала.Ссылка КАК Ссылка
            ИЗ
                НастройкиПодбораПерсонала КАК НастройкиПодбораПерсонала
        }.Выполнить()
        если не Результат.Пусто()
            выбросить новый НастройкиПодбораПерсоналаУжеОпределены(
                "Невозможно создать новый элемент справочника настройки подбора персонала. Он может существовать только в единственном экземпляре.")
        ;
    ;
;

метод ПроверитьЗаполнение()
    знч Ошибки: Множество<ОшибкиПроверкиЗаполнения>
    
    
    для Элемент из СтатусыРассматриваемыхКандидатов
        если Элемент.Статус == Неопределено
            Ошибки.Добавить(ОшибкиПроверкиЗаполнения.СтатусНеЗаполнен)
        ;
        если Элемент.Триггер == Неопределено
            Ошибки.Добавить(ОшибкиПроверкиЗаполнения.ТриггерНеЗаполнен)
        ;
    ;
    
    знч Статусы = СтатусыРассматриваемыхКандидатов.ГруппироватьПо(Элемент -> Элемент.Статус)
    для Элемент из Статусы
        если Элемент.Значение.Размер() > 1
            Ошибки.Добавить(ОшибкиПроверкиЗаполнения.СтатусИспользованБолееОдногоРаза)
        ;
    ;
    
    знч Триггеры = СтатусыРассматриваемыхКандидатов.ГруппироватьПо(Элемент -> Элемент.Триггер)
    для Элемент из Триггеры
        если Элемент.Значение.Размер() > 1
            Ошибки.Добавить(ОшибкиПроверкиЗаполнения.ОдномуТриггеруНазначеноБолееОдногоСтатуса)
        ;
    ;
    
    если Ошибки.Размер() > 0
        выбросить новый ИсключениеПроверкиЗаполнения(
            Описание = "При проверке заполнения выявлены ошибки",
            Ошибки = Ошибки)       
    ; 
;

@Обработчик
метод ПередЗаписью(До: НастройкиПодбораПерсонала.Данные, ПараметрыЗаписи: НастройкиПодбораПерсонала.ПараметрыЗаписи)
    ПроверитьОтсутствиеНастроек()
    ПроверитьЗаполнение()
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПослеЗаписи(До: НастройкиПодбораПерсонала.Данные, ПараметрыЗаписи: НастройкиПодбораПерсонала.ПараметрыЗаписи)
    исп КонтекстДоступа.Привилегированный()
    знч СервисРегистрацииИзменений = ПодборПерсоналаРегистрацияИзменений.ПолучитьСервис()
    если СервисРегистрацииИзменений.НастройкиПодбораПерсоналаТребуетсяРегистрация()
        для Элемент из СтатусыРассматриваемыхКандидатов
            если Элемент.Статус != Неопределено
                ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Элемент.Статус, Истина)
                РегистрацияИзменений.ЗарегистрироватьИзменение(Элемент.Статус, Неопределено, ХарактерыИзменений.Изменение)  
            ;
        ;
        
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Ссылка, Истина)
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, Неопределено, ХарактерыИзменений.Изменение)
        
        если АнкетаКандидата != Неопределено
            АнкетированиеРегистрацияОбъектовКОбмену.ЗарегистрироватьШаблон(АнкетаКандидата)
        ;
    ;
;
