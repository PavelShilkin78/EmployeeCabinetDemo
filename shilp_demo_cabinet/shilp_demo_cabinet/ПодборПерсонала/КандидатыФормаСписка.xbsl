импорт СтандартноеПриложение
импорт ИнтерфейсныеКомпонентыСтандартные
импорт ОбщиеСтандартные


@Обработчик
метод ПослеСоздания()
    ИнтерфейсныеКомпоненты.ИнициализироватьПодчиненныеКомпоненты(Компоненты)
;

@ВПроекте
@Реализация
метод Заголовок(): Строка
    возврат "Кандидаты"
;

@ВПроекте
@Реализация
метод КомандыСоздания(): Команда|ГруппаКомандногоИнтерфейса<Команда>|Неопределено
    возврат КомандыСозданияФормы
;

@ВПроекте
@Реализация
метод ДополнительныеКоманды(): ФрагментКомандногоИнтерфейса<Команда>?
    возврат Неопределено
;

@ВПроекте
@Реализация
метод ОсновнаяКоманда(): Команда?
    возврат Неопределено
;

@ВПроекте
@Реализация
метод ОбычныеКоманды(): ФрагментКомандногоИнтерфейса<Команда>?
    возврат Неопределено
;

метод ПриНажатииСтроки(Источник: Список<ДинамическийСписок>, Событие: СобытиеСДанными<СтрокаСписка<СтрокаДинамическогоСписка>>)
    знч ФормаОбъекта = новый КарточкаКандидата()
    ФормаОбъекта.Прочитать(Событие.Данные.ДанныеСтроки.Ключ как Кандидаты.Ссылка)
    ИнтерфейсныеКомпоненты.ОткрытьЗамещающуюФорму(этот, ФормаОбъекта)
;

метод ВыгрузкаПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    пер ДинамическийСписок = Компоненты.ОсновнаяТаблица.Источник
    знч ФайлВыгрузки = СформироватьФайлВыгрузки(ДинамическийСписок.Фильтр)
    ВыгрузкаФайлов.НачатьВыгрузку(ФайлВыгрузки, "СписокКандидатов${Дата.Сейчас()}.xls") 
;

@НаСервере @ДоступноСКлиента
статический метод СформироватьФайлВыгрузки(Фильтр: ГруппаЭлементовФильтра): ДвоичныйОбъект.Ссылка

    знч ДанныеДляВыгрузки = ДанныеДляВыгрузки(Фильтр)
    знч ТабличныйДокумент = ЗаполнитьТабличныйДокумент(ДанныеДляВыгрузки)
    возврат ВыгрузитьВФормате(ТабличныйДокумент, ФорматЭкспортаТабличногоДокумента.Xls)
    
;
    
@НаСервере   
статический метод ДанныеДляВыгрузки(Фильтр: ГруппаЭлементовФильтра): Массив<Соответствие<Строка, Объект>>
    
    пер ДанныеДляВыгрузки: Массив<Соответствие<Строка, Объект>>
    
    знч Сейчас = Дата.Сейчас().Представление("гггг-ММ-дд")
    пер Запрос = новый ПроизвольныйЗапрос()
    Запрос.Текст =
        "Выбрать
            Кандидаты.Ссылка Как Ссылка,
            Кандидаты.Наименование Как Наименование,
            Кандидаты.НаселенныйПункт Как Город,
            Выбор 
                Когда Кандидаты.ДатаРождения == Дата{} 
                    Тогда Неопределено
                Когда Кандидаты.ДатаРождения.Месяц > Дата{%Сейчас}.Месяц Или (Кандидаты.ДатаРождения.Месяц == Дата{%Сейчас}.Месяц И Кандидаты.ДатаРождения.День > Дата{%Сейчас}.День)
                    Тогда Дата{%Сейчас}.Год - Кандидаты.ДатаРождения.Год - 1
                Иначе Дата{%Сейчас}.Год - Кандидаты.ДатаРождения.Год
            Конец Как Возраст,
            Кандидаты.ПредставлениеОпытаРаботы Как ПредставлениеОпытаРаботы,
            СтатусыКандидатов.Статус Как Статус,
            Кандидаты.Пол Как Пол,
            Выбор
                Когда Кандидаты.ДатаРождения == Дата{}
                    Тогда Неопределено
                Иначе Кандидаты.ДатаРождения
            Конец Как ДатаРождения,
            Кандидаты.Гражданство Как Гражданство,
            Кандидаты.Должность Как Должность,
            Кандидаты.ОСебе Как ОСебе            
        Из Кандидаты Как Кандидаты
        Левое Соединение СтатусыКандидатов КАК СтатусыКандидатов
            ПО Кандидаты.Ссылка == СтатусыКандидатов.Кандидат
        Где Истина"        
    МенеджерЗапросов.ДополнитьЗапросФильтрами(Запрос, Фильтр)
    Запрос.Текст += " Упорядочить По Ссылка"
    
    пер СписокПараметровКандидатов = Запрос.Выполнить()
    
    для ПараметрыКандидата из СписокПараметровКандидатов
        пер ЭлементМассива: Соответствие<Строка, Объект> = {
            "ФИО": ПараметрыКандидата.Наименование,
            "Город": ПараметрыКандидата.Город.Представление(),
            "Возраст": ПараметрыКандидата.Возраст.Представление(),
            "ОпытРаботы": ПараметрыКандидата.ПредставлениеОпытаРаботы,
            "Статус": ПараметрыКандидата.Статус.Представление(),
            "Пол": ПараметрыКандидата.Пол.Представление(),
            "ДатаРождения": ПараметрыКандидата.ДатаРождения.Представление(),
            "Гражданство": ПараметрыКандидата.Гражданство.Представление(),            
            "Должность": ПараметрыКандидата.Должность.Представление(),
            "ОСебе": ПараметрыКандидата.ОСебе
        }
        ДанныеДляВыгрузки.Добавить(ЭлементМассива)
    ;
    
    возврат ДанныеДляВыгрузки
    
;

@НаСервере
статический метод ЗаполнитьТабличныйДокумент(ДанныеДляВыгрузки: Массив<Соответствие<Строка, Объект>>): ТабличныйДокумент
    исп МакетДанные = Ресурс{МакетВыгрузкиКандидатов.mxl}.ОткрытьПотокЧтения()
    пер Макет = ТабличныйДокумент.Прочитать(МакетДанные)
    пер Шапка = Макет.ПолучитьОбласть("Шапка")
    пер Описание = Макет.ПолучитьОбласть("Описание")
    пер ШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы")
    пер СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы")
    
    пер ТабличныйДокумент = новый ТабличныйДокумент()
    пер Писатель = ТабличныйДокумент.Запись
    Писатель.ВывестиВертикально(Шапка)
    Писатель.ВывестиВертикально(
        Описание.ВВыводимуюОбласть()
            .ЗаполнитьПараметры({"ДатаВремя": ДатаВремя.Сейчас().Представление()})
    )
    Писатель.ВывестиВертикально(ШапкаТаблицы)
    
    для ЭлементДанных из ДанныеДляВыгрузки
        пер ОбластьСтроки = СтрокаТаблицы.ВВыводимуюОбласть()
        ОбластьСтроки.ЗаполнитьПараметры(ЭлементДанных)
        Писатель.ВывестиВертикально(ОбластьСтроки)
    ;
    
    возврат ТабличныйДокумент
;

@НаСервере
статический метод ВыгрузитьВФормате(ТабличныйДокумент: ТабличныйДокумент, Формат: ФорматЭкспортаТабличногоДокумента): ДвоичныйОбъект.Ссылка
    пер БайтыТаблицы = ТабличныйДокумент.ЭкспортироватьВБайты(ФорматЭкспортаТабличногоДокумента.Xls)
    пер СвойстваДвоичногоОбъекта = новый ДвоичныйОбъект.Свойства("ВыгрузкаКандидатов")
        .Временные()
    знч Результат = ОбъектноеХранилище.ЗагрузитьИзБайт(Байты = БайтыТаблицы, Свойства = СвойстваДвоичногоОбъекта)
    возврат Результат.Ссылка
;

метод СоздатьПриНажатии(Команда: ОбычнаяКоманда)
    знч ФормаОбъекта = новый КандидатыФормаОбъекта()
    ИнтерфейсныеКомпоненты.ОткрытьЗамещающуюФорму(этот, ФормаОбъекта)
;

метод ФотографияКандидата(ДанныеСтроки: СтрокаДинамическогоСписка): ДвоичныйОбъект.Ссылка?
    пер Фотография = ДанныеСтроки.Данные["Фотография"] как ДвоичныйОбъект.Ссылка?
    если Фотография == Неопределено
         Фотография = СтандартноеПриложение.ПараметрыСеанса().АватарПоУмолчанию   
    ;
    возврат Фотография
;

метод Возраст(ДанныеСтроки: СтрокаДинамическогоСписка): Строка
    знч Возраст = ДанныеСтроки.Данные["Возраст"] как Число?
    если Возраст == Неопределено
        возврат "Не указан"
    иначе
        возврат "$Возраст"
    ;
;

метод Наименование(ДанныеСтроки: СтрокаДинамическогоСписка): Строка
    возврат ДанныеСтроки.Данные["Наименование"] как Строка
;

метод ЦветСтатуса(ДанныеСтроки: СтрокаДинамическогоСписка): Цвет | Авто
    возврат БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Серый)
;

метод ИзменитьСтатусОбработчик(Команда: КомандаСПараметром<Массив<Сущность.Ключ>>, Параметр: Массив<Сущность.Ключ>)
    знч Статус = ФормаВыбораСтатуса.ОткрытьВМодальномОкне(
        ОжидатьЗакрытия = Истина,
        ЗначениеПоУмолчанию = СтатусыКандидата.Зарегистрирован,
        ДопустимыеТипы = {Тип<Неопределено>, Тип<СтатусыКандидата>})
    если Статус != Неопределено
        знч Кандидаты = новый Массив<Кандидаты.Ссылка>()
        для Элемент из Параметр
            Кандидаты.Добавить(Элемент как Кандидаты.Ссылка)
        ;
        СтатусыКандидатов.Установить(Кандидаты, Статус как СтатусыКандидата)
        ОбновитьТаблицу()
    ;
    Компоненты.ОсновнаяТаблица.ОчиститьОтмеченныеСтроки()
;
 
метод ДобавитьВВакансиюОбработчик(Команда: КомандаСПараметром<Массив<Сущность.Ключ>>, Параметр: Массив<Сущность.Ключ>)
    знч ДобавляемыеКандидаты = новый Множество<Кандидаты.Ссылка>()
    для Элемент из Параметр
        ДобавляемыеКандидаты.Добавить(Элемент как Кандидаты.Ссылка)
    ;
    Кандидаты.ДобавитьВВакансию(ДобавляемыеКандидаты)
    ОбновитьТаблицу()
;

метод ВыражениеВозраст(): Строка
    знч Сейчас = Дата.Сейчас().Представление("гггг-ММ-дд")
    возврат 
    "выбор 
        когда ДатаРождения == Дата{}
            тогда Неопределено
        когда ДатаРождения.Месяц > Дата{%Сейчас}.Месяц или (ДатаРождения.Месяц == Дата{%Сейчас}.Месяц и ДатаРождения.День > Дата{%Сейчас}.День)
            тогда Дата{%Сейчас}.Год - ДатаРождения.Год - 1
        иначе Дата{%Сейчас}.Год - ДатаРождения.Год
    конец"
;
