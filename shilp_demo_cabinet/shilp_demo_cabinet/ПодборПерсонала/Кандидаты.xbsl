импорт ВебApi
импорт ФизическиеЛица
импорт УправлениеПерсоналом
импорт ОбщиеСтандартные
импорт КонтрольДоступа
импорт УниверсальныеМеханизмы
импорт ОбменДанными
импорт Анкетирование


@ВПодсистеме
@НаСервере @НаКлиенте
структура ДополнительныеСвойства
    пер ЗагружаемаяФотографияСсылка: Файлы.Ссылка?
;

@ВПроекте
@НаСервере @НаКлиенте
структура ОсновныеДанные
    обз знч Фио: ФизЛица.ФИО
    обз знч ДатаРождения: Дата?
    обз знч Пол: ПолФизическогоЛица?
;

@ВПроекте
метод Прочитать(Кандидат: Кандидаты.Ссылка): ОсновныеДанные
    знч Запрос = Запрос{
        Выбрать
            Фамилия Как Фамилия,
            Имя Как Имя,
            Отчество Как Отчество,
            ДатаРождения Как ДатаРождения,
            Пол Как Пол
        Из
            Кандидаты
        Где
            Ссылка == %Кандидат
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    знч ДанныеКандидата = РезультатЗапроса.Единственный()
    возврат новый ОсновныеДанные(
        Фио = ФизЛица.ФИОПоЧастям(
            Фамилия = ДанныеКандидата.Фамилия,
            Имя = ДанныеКандидата.Имя,
            Отчество = ДанныеКандидата.Отчество
        ),
        ДатаРождения = ДанныеКандидата.ДатаРождения == Дата{} ? Неопределено : ДанныеКандидата.ДатаРождения,
        Пол = ДанныеКандидата.Пол
    )
;

//КонтрольДоступа

конст ТИП_АТРИБУТА_ДОСТУПА_КАНДИДАТЫ= "Кандидаты"

@ВПодсистеме
@НаСервере
метод ДобавитьТипАтрибутаДоступаКандидаты()
    КонтрольДоступа.ДобавитьТипАтрибута(
        "Кандидаты",
        ТИП_АТРИБУТА_ДОСТУПА_КАНДИДАТЫ
    )
;

@ВПроекте
@НаСервере
метод ТипАтрибутаДоступаКандидаты(): ТипыАтрибутов.Ссылка?
    возврат КонтрольДоступа.ТипАтрибута(ТИП_АТРИБУТА_ДОСТУПА_КАНДИДАТЫ)
;

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат КонтрольДоступа.РазрешенияДоступаТаблицыБезПраваУдаления()
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Объекты: ЧитаемыйМассив<Кандидаты.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<Кандидаты.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    возврат ПодборПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаДляКандидатов(Объекты)
;

@ВПодсистеме
метод ПересчитатьРазрешенияДоступа(ДанныеРасчетаРазрешений: Обходимое<Кандидаты.ДанныеРасчетаРазрешений>)
    ПересчитатьРазрешенияДоступаДляОбъектов(ДанныеРасчетаРазрешений)
    ПересчитатьРазрешенияЗависимыхОбъектов(ДанныеРасчетаРазрешений)
;

@ВПодсистеме
метод ПересчитатьРазрешенияЗависимыхОбъектов(ДанныеРасчетаРазрешений: Обходимое<Кандидаты.ДанныеРасчетаРазрешений>)
    знч ДанныеРасчетаСертификаты: Массив<СертификатыРезюме.ДанныеРасчетаРазрешений>
    знч ДанныеРасчетаПортфолио: Массив<ПортфолиоРезюме.ДанныеРасчетаРазрешений>
    
    для Элемент из ДанныеРасчетаРазрешений
        ДанныеРасчетаСертификаты.Добавить(новый СертификатыРезюме.ДанныеРасчетаРазрешений(Владелец = Элемент.Ссылка))
        ДанныеРасчетаПортфолио.Добавить(новый ПортфолиоРезюме.ДанныеРасчетаРазрешений(Владелец = Элемент.Ссылка))
    ;
    
    если не ДанныеРасчетаСертификаты.Пусто()
        СертификатыРезюме.ПересчитатьРазрешенияДоступаДляОбъектов(ДанныеРасчетаСертификаты)
    ;
    если не ДанныеРасчетаПортфолио.Пусто() 
        ПортфолиоРезюме.ПересчитатьРазрешенияДоступаДляОбъектов(ДанныеРасчетаПортфолио)
    ;
;

@ВПроекте
@НаСервере
метод ФизическиеЛицаСПравомЧтения(Кандидат: Кандидаты.Ссылка): Множество<ФизическиеЛица.Ссылка>
    знч ФизическиеЛицаЧтение = новый Множество<ФизическиеЛица.Ссылка>()
    знч Запрос = Запрос{
        выбрать
            РассматриваемыеКандидаты.Ссылка
        из
            РассматриваемыеКандидаты как РассматриваемыеКандидаты
        где 
            РассматриваемыеКандидаты.Кандидат == %Кандидат
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса
        ФизическиеЛицаЧтение.ДобавитьВсе(РассматриваемыеКандидаты.ФизическиеЛицаСПравомЧтения(Элемент.Ссылка))
    ;
    возврат ФизическиеЛицаЧтение
;

//КонтрольДоступа

//Область JSON

@ВПроекте
структура Кандидат_2_0
    @JsonСвойство(Имя = "ID")
    обз знч Идентификатор: Строка
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка
    @JsonСвойство(Имя = "firstName")
    пер Имя: Строка?
    @JsonСвойство(Имя = "lastName")
    пер Фамилия: Строка?
    @JsonСвойство(Имя = "patronymic")
    пер Отчество: Строка?
    @JsonСвойство(Имя = "birthDate")
    пер ДатаРождения: Дата?
    @JsonСвойство(Имя = "gender")
    пер Пол: ФизическиеЛица.ПолJson?
    @JsonСвойство(Имя = "education")
    пер Образование: Массив<ОписаниеОбразования.ДанныеJson_V2_0>
    @JsonСвойство(Имя = "sertificates")
    пер Сертификаты: Массив<СертификатыРезюме.ДанныеJson_V2_0>
    @JsonСвойство(Имя = "portfolios")
    пер Портфолио: Массив<ПортфолиоРезюме.ДанныеJson_V2_0>
    @JsonСвойство(Имя = "courses")
    пер Курсы: Массив<ОписаниеКурсов.ДанныеJson_V2_0>
    @JsonСвойство(Имя = "picture")
    пер Фотография: МенеджерФайлов.ДанныеФайлаJson? 
    @JsonСвойство(Имя = "experience")
    пер ОпытРаботы: Массив<ОписаниеМестаРаботы.ДанныеJson_V2_0>
    @JsonСвойство(Имя = "driveExperience")
    пер ВодительскийСтаж: Дата?
    @JsonСвойство(Имя = "driveCategories")
    пер ВодительскиеКатегории: Массив<ВодительскиеКатегории>
    @JsonСвойство(Имя = "source")
    пер Источник: ПодборПерсонала.ИсточникиКандидатовJson?
    @JsonСвойство(Имя = "localityID")
    пер НаселенныйПункт: Строка?
    @JsonСвойство(Имя = "attachedFiles")
    пер ПрисоединенныеФайлы: Массив<МенеджерФайлов.ДанныеФайлаJson>
    @JsonСвойство(Имя = "personalContacts")
    пер ЛичныеКонтакты: ЛичныеКонтакты.ДанныеJson_V2_0?
    @JsonСвойство(Имя = "selfDescription")
    пер ОСебе: Строка
    @JsonСвойство(Имя = "applicantQuestionnaireID")
    пер АнкетаОСебе: Строка?
;

@ВПодсистеме
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{2.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    
    если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<Кандидат_2_0>
    ;
;

@ВПодсистеме
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{2.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    
    если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<Массив<Кандидат_2_0>>
    ;
;

@ВПодсистеме
метод ТипОбъектаJson(): Строка
    возврат "candidate"
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(Кандидат: Кандидат_2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать()
    знч ЗагружаемыйОбъект = Сервисы.ПрочитатьОбъект(Кандидат.Идентификатор, &Кандидаты.Объект.новый(Ууид), Тип<Кандидаты.Ссылка>) как Кандидаты.Объект 
    ЗагружаемыйОбъект.Наименование = Кандидат.Наименование
    ЗагружаемыйОбъект.Имя = Кандидат.Имя ?? ""
    ЗагружаемыйОбъект.Фамилия = Кандидат.Фамилия ?? ""
    ЗагружаемыйОбъект.Отчество = Кандидат.Отчество ?? ""
    если Кандидат.ДатаРождения != Неопределено
        ЗагружаемыйОбъект.ДатаРождения = Кандидат.ДатаРождения
    ;
    если Кандидат.Пол != Неопределено
        ЗагружаемыйОбъект.Пол = ФизическиеЛица.ПолФизическогоЛицаИзJson(Кандидат.Пол)
    ;

    ЗагружаемыйОбъект.Образование.Очистить()
    для МестоОбучения из Кандидат.Образование
        знч НовоеОписаниеОбразования: ОписаниеОбразования
        НовоеОписаниеОбразования.ЗаполнитьПоJson(МестоОбучения)
        ЗагружаемыйОбъект.Образование.Добавить(НовоеОписаниеОбразования)    
    ;  
    
    ЗагружаемыйОбъект.Курсы.Очистить()
    для Курс из Кандидат.Курсы
        знч НовоеОписаниеКурсов: ОписаниеКурсов
        НовоеОписаниеКурсов.ЗаполнитьПоJson(Курс)
        ЗагружаемыйОбъект.Курсы.Добавить(НовоеОписаниеКурсов)
    ;

    ЗагружаемыйОбъект.ОпытРаботы.Очистить()
    для МестоРаботы из Кандидат.ОпытРаботы
        знч НовоеОписаниеМестаРаботы: ОписаниеМестаРаботы
        НовоеОписаниеМестаРаботы.ЗаполнитьПоJson(МестоРаботы)
        ЗагружаемыйОбъект.ОпытРаботы.Добавить(НовоеОписаниеМестаРаботы)    
    ;    

    если Кандидат.ВодительскийСтаж != Неопределено
        ЗагружаемыйОбъект.ВодительскийСтаж = Кандидат.ВодительскийСтаж
    ;
  
    ЗагружаемыйОбъект.ВодительскиеКатегории.Очистить()
    ЗагружаемыйОбъект.ВодительскиеКатегории.ДобавитьВсе(Кандидат.ВодительскиеКатегории)
    
    если Кандидат.Источник != Неопределено
        ЗагружаемыйОбъект.Источник = ПодборПерсонала.ИсточникКандидатовИзJson(Кандидат.Источник)   
    ;
    если Кандидат.НаселенныйПункт != Неопределено
        ЗагружаемыйОбъект.НаселенныйПункт = НаселенныеПункты.ПолучитьСсылку(новый Ууид(Кандидат.НаселенныйПункт))  
    ;
    
    ЗагружаемыйОбъект.ОСебе = Кандидат.ОСебе

    если Кандидат.АнкетаОСебе != Неопределено
        ЗагружаемыйОбъект.АнкетаОСебе = ОбменДанными.ИдентификаторыЛокальныхОбъектов([Кандидат.АнкетаОСебе])
            .ПолучитьИлиУмолчание(Кандидат.АнкетаОСебе) как Анкеты.Ссылка? 
    ;
    
    пер ВложенныеФайлы = новый Массив<Файлы.Объект>()
    если Кандидат.Фотография != Неопределено
        пер ФайлФотография = Файлы.ВложенияИзJson([Кандидат.Фотография], Сервисы, ЗагружаемыйОбъект.Ссылка)[0]
        ЗагружаемыйОбъект.Фотография = ФайлФотография.Ссылка
        ВложенныеФайлы.Добавить(ФайлФотография)
    ;
    
    ВложенныеФайлы.ДобавитьВсе(Файлы.ВложенияИзJson(Кандидат.ПрисоединенныеФайлы, Сервисы, ЗагружаемыйОбъект.Ссылка))
    
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ЗагружаемыйОбъект, Кандидат.Идентификатор), Сервисы.ИнструментыМенеджераОбъекта)
    
    если Кандидат.ЛичныеКонтакты != Неопределено
        ЛичныеКонтакты.ОбновитьПоJson(ЗагружаемыйОбъект.Ссылка, Кандидат.ЛичныеКонтакты)
    ;

    Файлы.ЗаписатьФайлыПоВладельцу(ВложенныеФайлы, ЗагружаемыйОбъект.Ссылка)
    СертификатыРезюме.ЗаписатьСертификатыИзДанныеJson(Кандидат.Сертификаты, ЗагружаемыйОбъект.Ссылка, Сервисы)
    ПортфолиоРезюме.ЗаписатьПортфолиоИзДанныеJson(Кандидат.Портфолио, ЗагружаемыйОбъект.Ссылка, Сервисы)

;

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> Кандидаты.ПолучитьСсылку(Ууид))
;

@ВПодсистеме
метод ПослеЗаписиГруппыОбъектов(МассивОбъектовОтложенногоОбновления: Массив<ВебApiСервер.ОбъектОтложенногоОбновления>)
    знч Сервисы = СобытияКандидаты.ПолучитьСервисы()
    знч Кандидаты = новый Массив<Кандидаты.Ссылка>()
    для ОбъектОтложенногоОбновления из МассивОбъектовОтложенногоОбновления
        Кандидаты.Добавить(ОбъектОтложенногоОбновления.ОбновляемыйОбъект как Кандидаты.Ссылка)
    ;
    для Сервис из Сервисы
        Сервис.ОкончаниеЗаписиГруппыОбъектов(Кандидаты)
    ;
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"candidates": ИсходящиеДанныеВJson(Ссылки, Сервисы)}
;

метод ИсходящиеДанныеВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеОбъектов(Ссылки)
        Данные.Добавить(ДанныеОбъектаВJson_V2_0(КлючИЗначение.Значение, Сервисы))
    ;
    возврат Данные
;

метод ДанныеОбъектов(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<Кандидаты.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Данные: Соответствие<Кандидаты.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>> 
    если Ссылки.Размер() == 0
        возврат Данные
    ;
    
    знч Образование = МенеджерСущности.ЗначениеМножественногоРеквизитаОбъектов(Ссылки, "Образование")
    знч Курсы = МенеджерСущности.ЗначениеМножественногоРеквизитаОбъектов(Ссылки, "Курсы")
    знч ОпытРаботы = МенеджерСущности.ЗначениеМножественногоРеквизитаОбъектов(Ссылки, "ОпытРаботы")
    знч ВодительскиеКатегории = МенеджерСущности.ЗначениеМножественногоРеквизитаОбъектов(Ссылки, "ВодительскиеКатегории")
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Наименование,
            Фамилия,
            Имя,
            Отчество,
            ДатаРождения,
            Пол,
            Фотография,
            ПредставлениеОпытаРаботы,
            ВодительскийСтаж,
            Источник,
            НаселенныйПункт,
            ОСебе,
            АнкетаОСебе
        Из
            Кандидаты
        Где
            Ссылка В (%Ссылки)        
    }
    исп Результат = Запрос.Выполнить() 
    для СтрокаРезультата из Результат
        знч ДанныеОбъекта = новый Соответствие<Строка, Объект?>()
        ДанныеОбъекта.ВставитьВсе(МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(СтрокаРезультата, Результат))
        ДанныеОбъекта.Вставить("Образование", Образование.ПолучитьИлиУмолчание(СтрокаРезультата.Ссылка, новый Массив<ОписаниеОбразования>()))
        ДанныеОбъекта.Вставить("Курсы", Курсы.ПолучитьИлиУмолчание(СтрокаРезультата.Ссылка, новый Массив<ОписаниеКурсов>()))
        ДанныеОбъекта.Вставить("ОпытРаботы", ОпытРаботы.ПолучитьИлиУмолчание(СтрокаРезультата.Ссылка, новый Массив<ОписаниеМестаРаботы>()))
        ДанныеОбъекта.Вставить("ВодительскиеКатегории", ВодительскиеКатегории.ПолучитьИлиУмолчание(СтрокаРезультата.Ссылка, новый Массив<ВодительскиеКатегории>()))
        Данные.Вставить(
            СтрокаРезультата.Ссылка,
            ДанныеОбъекта
        )
    ;
    возврат Данные    
;

метод ДанныеОбъектаВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Кандидат_2_0
    пер КандидатСсылка = ДанныеОбъекта["Ссылка"] как Кандидаты.Ссылка
    пер ДанныеJson = новый Кандидат_2_0(Сервисы.ПолучитьИдентификатор(КандидатСсылка), ДанныеОбъекта["Наименование"] как Строка)
            
    ДанныеJson.Имя = ДанныеОбъекта["Имя"] как Строка
    ДанныеJson.Фамилия = ДанныеОбъекта["Фамилия"] как Строка
    ДанныеJson.Отчество = ДанныеОбъекта["Отчество"] как Строка
    ДанныеJson.ДатаРождения = ДанныеОбъекта["ДатаРождения"] как Дата
    если ДанныеОбъекта["Пол"] != Неопределено
        ДанныеJson.Пол = ФизическиеЛица.ПолФизическогоЛицаВJson(ДанныеОбъекта["Пол"] как ПолФизическогоЛица)
    ;
    
    для Значение из ДанныеОбъекта["Образование"] как ЧитаемыйМассив<Объект>
       ДанныеJson.Образование.Добавить((Значение как ОписаниеОбразования).ПолучитьJson_V2_0()) 
    ;

    ДанныеJson.Сертификаты = новый Массив<СертификатыРезюме.ДанныеJson_V2_0>(СертификатыРезюме.СертификатыВладельцаВДанныеJson(КандидатСсылка, Сервисы))
    ДанныеJson.Портфолио = новый Массив<ПортфолиоРезюме.ДанныеJson_V2_0>(ПортфолиоРезюме.ПортфолиоВладельцаВДанныеJson(КандидатСсылка, Сервисы))

    для Значение из ДанныеОбъекта["Курсы"] как ЧитаемыйМассив<Объект>
       ДанныеJson.Курсы.Добавить((Значение как ОписаниеКурсов).ПолучитьJson_V2_0()) 
    ;
    для Значение из ДанныеОбъекта["ОпытРаботы"] как ЧитаемыйМассив<Объект>
       ДанныеJson.ОпытРаботы.Добавить((Значение как ОписаниеМестаРаботы).ПолучитьJson_V2_0()) 
    ;
    если ДанныеОбъекта["Фотография"] != Неопределено
        знч ФотографияСсылка = ДанныеОбъекта["Фотография"] как Файлы.Ссылка
        если МенеджерСущности.СсылкаСуществует(ФотографияСсылка)
            ДанныеJson.Фотография = Файлы.ДанныеФайлаJson(ФотографияСсылка, Сервисы)
        ;
    ;
    если ДанныеОбъекта["ВодительскийСтаж"] != Неопределено
        ДанныеJson.ВодительскийСтаж = ДанныеОбъекта["ВодительскийСтаж"] как Дата
    ;
    для Значение из ДанныеОбъекта["ВодительскиеКатегории"] как ЧитаемыйМассив<Объект>
       ДанныеJson.ВодительскиеКатегории.Добавить(Значение как ВодительскиеКатегории) 
    ;
    если ДанныеОбъекта["Источник"] != Неопределено
        ДанныеJson.Источник = ПодборПерсонала.ИсточникКандидатаВJson(ДанныеОбъекта["Источник"] как ИсточникиКандидатов) 
    ;
    если ДанныеОбъекта["НаселенныйПункт"] != Неопределено
        ДанныеJson.НаселенныйПункт = (ДанныеОбъекта["НаселенныйПункт"] как НаселенныеПункты.Ссылка).Ид.ВСтроку()
    ;   
    
    ДанныеJson.ОСебе = ДанныеОбъекта["ОСебе"] как Строка

    если ДанныеОбъекта["АнкетаОСебе"] != Неопределено
        ДанныеJson.АнкетаОСебе = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["АнкетаОСебе"] как Анкеты.Ссылка)
    ;
     
    пер ПрисоединенныеФайлыДляВыгрузки = ПрисоединенныеФайлыМенеджер.ПрисоединенныеФайлы(КандидатСсылка)
    если не ПрисоединенныеФайлыДляВыгрузки.Файлы.Пусто()
        пер ПрисоединенныеФайлыДанные = новый Массив<МенеджерФайлов.ДанныеФайлаJson>()
        для ФайлДляВыгрузки из ПрисоединенныеФайлыДляВыгрузки.Файлы
            если ФайлДляВыгрузки.Ссылка != ДанныеОбъекта["Фотография"]
                ПрисоединенныеФайлыДанные.Добавить(
                    Файлы.ДанныеФайлаJson(ФайлДляВыгрузки.Ссылка, Сервисы)    
                )
            ;
        ;
        ДанныеJson.ПрисоединенныеФайлы = ПрисоединенныеФайлыДанные
    ;
    пер ЛичныеКонтактыСсылка = ЛичныеКонтакты.ПолучитьКонтакты(КандидатСсылка)
    если ЛичныеКонтактыСсылка != Неопределено
        ДанныеJson.ЛичныеКонтакты = ЛичныеКонтакты.ПолучитьJson_V2_0(ЛичныеКонтактыСсылка.ЗагрузитьОбъект())
    ;
    возврат ДанныеJson        
;
// Конец JSON

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: Кандидаты.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Ссылка, Истина)
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, Неопределено)
    ;
;

@ВПодсистеме
метод ПослеУдаленияДополнение(Ссылка: Кандидаты.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьУдаление(Ссылка)
    ;
;

@ВПроекте
@НаСервере @ДоступноСКлиента
статический метод ОбработатьФотографию(ДанныеЗагруженногоФайла: ДвоичныйОбъект.Ссылка): ДвоичныйОбъект.Ссылка
    пер Настройки = ФизическиеЛица.НастройкиСжатияФотографииПриЗагрузке()
    возврат МенеджерФайлов.ОбработатьИзображение(ДанныеЗагруженногоФайла.Загрузить(), Настройки).Ссылка
;

@ВПроекте
метод РассматриваемыеКандидаты(Кандидат: Кандидаты.Ссылка): Массив<РассматриваемыеКандидаты.Ссылка>
    знч Запрос = Запрос{
        ВЫБРАТЬ
            РассматриваемыеКандидаты.Ссылка
        ИЗ
            РассматриваемыеКандидаты КАК РассматриваемыеКандидаты
        ГДЕ
            РассматриваемыеКандидаты.Кандидат == %Кандидат
    }  
    знч Результат = новый Массив<РассматриваемыеКандидаты.Ссылка>() 
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса
        Результат.Добавить(Элемент.Ссылка)
    ;
    возврат Результат
;

@ВПроекте
метод КандидатыВакансии(Вакансии: Массив<Вакансии.Ссылка>): Массив<Кандидаты.Ссылка>
    знч Кандидаты = новый Массив<Кандидаты.Ссылка>()
    знч Запрос = Запрос{
            выбрать различные
                РассматриваемыеКандидаты.Кандидат как Ссылка
            из
                РассматриваемыеКандидаты как РассматриваемыеКандидаты
            где
                РассматриваемыеКандидаты.Вакансия в(%Вакансии)            
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса 
        Кандидаты.Добавить(Элемент.Ссылка)
    ;
    возврат Кандидаты
;

@ВПроекте
@НаКлиенте
метод ДобавитьВВакансию(Кандидаты: Множество<Кандидаты.Ссылка>)
    знч Форма = новый ВакансииФормаВыбора(
        ФильтрыСписка = новый ГруппаЭлементовФильтра(
            Элементы = [
                новый ЭлементФильтра(
                    Поле = "Ссылка",
                    ВидСравнения = ВидСравнения.НеВСписке,
                    Значение = Вакансии.ВакансииКандидатов(Кандидаты),
                    Использовать = Истина
                ),
                новый ЭлементФильтра(
                    Поле = "Статус",
                    ВидСравнения = ВидСравнения.Равно,
                    Значение = СтатусВакансии.Открыта,
                    Использовать = Истина
                )
            ]))
    
    знч ВыбраннаяВакансия = Форма.ОткрытьВМодальномОкне(ОжидатьЗакрытия = Истина)
    если ВыбраннаяВакансия != Неопределено
        для Кандидат из Кандидаты
            ПодборПерсонала.СоздатьРассматриваемогоКандидата(Кандидат, ВыбраннаяВакансия, Неопределено)
        ;
        если Кандидаты.Размер() == 1
            Диалог.Вопрос(
                Текст = "Кандидат успешно добавлен в вакансию",
                Кнопки = [КнопкаДиалога.Ок])
        иначе
            знч ПредставлениеКандидатов = МенеджерСтрок.ТекстПоКоличеству("кандидат", Кандидаты.Размер())
            Диалог.Вопрос(
                Текст = "%{Кандидаты.Размер()} %ПредставлениеКандидатов добавлено в вакансию",
                Кнопки = [КнопкаДиалога.Ок])   
        ;
    ;
;

@ВПроекте
метод Найти(Фамилия: Строка, Имя: Строка, Отчество: Строка, Телефоны: Коллекция<Строка>, ЭлектроннаяПочта: Коллекция<Строка>): ЧитаемыйМассив<Кандидаты.Ссылка>
    
    знч ФильтрОтчество = Отчество.Пусто() == Ложь
    
    знч ЗначенияОтбораТелефон: Множество<Строка>
    для Элемент из Телефоны
        если не Элемент.Заменить(" ","").Пусто()
            ЗначенияОтбораТелефон.Добавить(Элемент)
        ;
    ;
    знч ОтборТелефон = ЗначенияОтбораТелефон.Размер() > 0
    
    знч ЗначенияОтбораЭлектроннаяПочта: Множество<Строка>
    для Элемент из ЭлектроннаяПочта
        если не Элемент.Заменить(" ","").Пусто()
            ЗначенияОтбораЭлектроннаяПочта.Добавить(Элемент)
        ;
    ;
    
    знч ОтборЭлектроннаяПочта = ЗначенияОтбораЭлектроннаяПочта.Размер() > 0 
    знч Запрос = Запрос{
        выбрать
            Ссылка как Ссылка
        из
            Кандидаты
        где
            не %ФильтрОтчество
            и Фамилия == %Фамилия
            и Имя == %Имя
           
        объединить
        
        выбрать
            Ссылка как Ссылка
        из
            Кандидаты
        где
            %ФильтрОтчество
            и Фамилия == %Фамилия
            и Имя == %Имя
            и Отчество == %Отчество
           
        объединить
        
        выбрать 
            Владелец как Ссылка
        из
            ЛичныеКонтакты
        где
            %ОтборТелефон
            и ДомашнийТелефон в (%ЗначенияОтбораТелефон)
            и Владелец.ПолучитьТип() == Тип<Кандидаты.Ссылка> 
            
        объединить
        
        выбрать
            МобильныеТелефоны.Владелец.Владелец.ЗаменитьNull(Неопределено) как Ссылка
        из
            ЛичныеКонтакты.МобильныйТелефон как МобильныеТелефоны
        где
            %ОтборТелефон
            и МобильныеТелефоны.Элемент.Данные в (%ЗначенияОтбораТелефон)
            и МобильныеТелефоны.Владелец.Владелец.ПолучитьТип() == Тип<Кандидаты.Ссылка> 
        
        объединить
        
        выбрать
            ЭлектроннаяПочта.Владелец.Владелец.ЗаменитьNull(Неопределено)  как Ссылка
        из
            ЛичныеКонтакты.ЭлектроннаяПочта как ЭлектроннаяПочта
        где
            %ОтборЭлектроннаяПочта
            и ЭлектроннаяПочта.Элемент.Данные в (%ЗначенияОтбораЭлектроннаяПочта)
            и ЭлектроннаяПочта.Владелец.Владелец.ПолучитьТип() == Тип<Кандидаты.Ссылка>
    }
    
    знч Кандидаты = новый Массив<Кандидаты.Ссылка>()
    исп Результат = Запрос.Выполнить()
    для Элемент из Результат
        Кандидаты.Добавить(Элемент.Ссылка как Кандидаты.Ссылка)
    ;
    возврат Кандидаты
;

@ВПроекте
метод ИсточникКандидата(Кандидат: Кандидаты.Ссылка?): ИсточникиКандидатов
    знч Запрос = Запрос{
        Выбрать первые 1
            Источник
        Из
            Кандидаты
        Где
            Ссылка == %Кандидат
    }
    исп Результат = Запрос.Выполнить()
    пер ИсточникКандидата = Результат.ЕдинственныйИлиУмолчание()?.Источник
    если ИсточникКандидата == Неопределено
        ИсточникКандидата = ИсточникиКандидатов.ВитринаВакансий
    ;
    
    возврат ИсточникКандидата
;

@ВПроекте
@НаСервере
@ПроверятьИспользованиеЗначения
метод ЗаполнитьПараметрыПолучателяВСообщении(ТекстыСообщений: Соответствие<Строка, Строка>, Получатель: Кандидаты.Ссылка): Соответствие<Строка, Строка>
    знч ДанныеКандидата = Получатель.ЗагрузитьОбъект()
    знч ПолноеИмя = "%{ДанныеКандидата.Фамилия} %{ДанныеКандидата.Имя} %{ДанныеКандидата.Отчество}"
    
    пер Тексты: Соответствие<Строка, Строка>
    для КлючИЗначение из ТекстыСообщений
        пер Текст = КлючИЗначение.Значение.Заменить("\%КМПолноеИмяКандидата\%", ПолноеИмя)
        Текст = Текст.Заменить("\%КМФамилияКандидата\%", "%{ДанныеКандидата.Фамилия}")
        Текст = Текст.Заменить("\%КМИмяКандидата\%", "%{ДанныеКандидата.Имя}")
        Текст = Текст.Заменить("\%КМОтчествоКандидата\%", "%{ДанныеКандидата.Отчество}")
        Тексты.Вставить(КлючИЗначение.Ключ, Текст)
    ;
    возврат Тексты
;
