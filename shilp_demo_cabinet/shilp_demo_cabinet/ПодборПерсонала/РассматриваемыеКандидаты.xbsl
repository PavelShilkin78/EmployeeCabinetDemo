импорт ОбщиеСтандартные
импорт СтандартноеПриложение
импорт УправлениеПерсоналом
импорт ВебApi
импорт ОбменДанными
импорт ФизическиеЛица
импорт КонтрольДоступа
импорт УниверсальныеМеханизмы

@ВПодсистеме
структура ДанныеЗаписи
    обз знч Ссылка: РассматриваемыеКандидаты.Ссылка?
    обз знч Кандидат: Кандидаты.Ссылка?
    обз знч Вакансия: Вакансии.Ссылка?
;

// КонтрольДоступа
@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат КонтрольДоступа.РазрешенияДоступаТаблицыБезПраваУдаления()
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Объекты: ЧитаемыйМассив<РассматриваемыеКандидаты.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<РассматриваемыеКандидаты.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    возврат ПодборПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаДляРассматриваемыхКандидатов(Объекты)
;

@ВПодсистеме
метод ПересчитатьРазрешенияДоступа(ДанныеРасчетаРазрешений: Обходимое<РассматриваемыеКандидаты.ДанныеРасчетаРазрешений>)
    ПересчитатьРазрешенияДоступаДляОбъектов(ДанныеРасчетаРазрешений)
    ПересчитатьРазрешенияЗависимыхОбъектов(ДанныеРасчетаРазрешений)
;

@ВПодсистеме
метод ПересчитатьРазрешенияЗависимыхОбъектов(ДанныеРасчетаРазрешений: Обходимое<РассматриваемыеКандидаты.ДанныеРасчетаРазрешений>)
    знч РассматриваемыеКандидаты = ДанныеРасчетаРазрешений.Преобразовать(Элемент -> Элемент.Ссылка)
    исп ПодчиненныеОбъекты = Запрос{
        ВЫБРАТЬ РАЗЛИЧНЫЕ
            РассматриваемыеКандидаты.Кандидат КАК Кандидат
        ИЗ
            РассматриваемыеКандидаты КАК РассматриваемыеКандидаты
        ГДЕ
            РассматриваемыеКандидаты.Ссылка В(%РассматриваемыеКандидаты) 
    }.Выполнить()
    
    знч КандидатыДанныеРасчетаРазрешений: Массив<Кандидаты.ДанныеРасчетаРазрешений>
    для Элемент из ПодчиненныеОбъекты
        КандидатыДанныеРасчетаРазрешений.Добавить(новый Кандидаты.ДанныеРасчетаРазрешений(Элемент.Кандидат))
    ;
    Кандидаты.ПересчитатьРазрешенияДоступа(КандидатыДанныеРасчетаРазрешений)
;

@ВПроекте
@НаСервере
метод ФизическиеЛицаСПравомЧтения(Кандидат: РассматриваемыеКандидаты.Ссылка): Множество<ФизическиеЛица.Ссылка>
    знч Запрос = Запрос{
        выбрать
            РассматриваемыеКандидаты.Вакансия.Инициатор.ЗаменитьNull(Неопределено) как Инициатор,
            РассматриваемыеКандидаты.Вакансия.ЗаявкаНаПодбор.ЗаменитьNull(Неопределено) как ЗаявкаНаПодбор
        из
            РассматриваемыеКандидаты как РассматриваемыеКандидаты
        где 
            РассматриваемыеКандидаты.Ссылка == %Кандидат
    }
    знч РеквизитыВакансии = Запрос.Выполнить().Единственный()
    возврат Вакансии.ФизическиеЛицаСПравомЧтения(РеквизитыВакансии.Инициатор, РеквизитыВакансии.ЗаявкаНаПодбор)
;
// КонтрольДоступа

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЗаголовокФормы(Ссылка: РассматриваемыеКандидаты.Ссылка?): Строка
    если Ссылка == Неопределено
        возврат "Новый рассматриваемый кандидат"
    иначе
        
        знч Запрос = Запрос{
            выбрать первые 1 
                РассматриваемыеКандидаты.Вакансия.Наименование.ЗаменитьNull("") как ПредставлениеВакансии
            из
                РассматриваемыеКандидаты как РассматриваемыеКандидаты
            где
                РассматриваемыеКандидаты.Ссылка == %Ссылка
        }
        
        исп Результат = Запрос.Выполнить()
        знч ПредставлениеВакансии = Результат.ЕдинственныйИлиУмолчание()?.ПредставлениеВакансии ?? ""  
        возврат "Кандидат на вакансию - %ПредставлениеВакансии"    
    ;
;


@ВПроекте
@НаСервере @ДоступноСКлиента
метод Найти(Кандидат: Кандидаты.Ссылка, Вакансия: Вакансии.Ссылка): РассматриваемыеКандидаты.Ссылка?
    
    знч Запрос = Запрос{
        ВЫБРАТЬ ПЕРВЫЕ 1
            РассматриваемыеКандидаты.Ссылка КАК Ссылка
        ИЗ 
            РассматриваемыеКандидаты КАК РассматриваемыеКандидаты
        ГДЕ
            РассматриваемыеКандидаты.Кандидат == %Кандидат
            И РассматриваемыеКандидаты.Вакансия == %Вакансия
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса
        возврат Элемент.Ссылка
    ;
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод Создать(Кандидат: Кандидаты.Ссылка, Вакансия: Вакансии.Ссылка, ЗарплатныеОжидания: ОписаниеОплаты? = Неопределено): РассматриваемыеКандидаты.Ссылка 
    знч НовыйЭлемент = новый РассматриваемыеКандидаты.Объект()
    НовыйЭлемент.Кандидат = Кандидат
    НовыйЭлемент.Вакансия = Вакансия
    если ЗарплатныеОжидания != Неопределено
        НовыйЭлемент.ЗарплатныеОжидания = ЗарплатныеОжидания
    ;
    НовыйЭлемент.Записать()
    возврат НовыйЭлемент.Ссылка
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод Создать(Кандидаты: Массив<Кандидаты.Ссылка>, Вакансия: Вакансии.Ссылка, ЗарплатныеОжидания: ОписаниеОплаты? = Неопределено)
    для Кандидат из Кандидаты
        Создать(Кандидат, Вакансия, ЗарплатныеОжидания)
    ;
;

@ВПроекте
метод Кандидат(РассматриваемыйКандидат: РассматриваемыеКандидаты.Ссылка): Кандидаты.Ссылка
    возврат Запрос{
        ВЫБРАТЬ 
            Кандидат 
        ИЗ РассматриваемыеКандидаты 
        ГДЕ 
            Ссылка == %РассматриваемыйКандидат
    }.Выполнить().Единственный().Кандидат
;

@ВПроекте
@ИменованныеПараметры
метод СоздатьВТДетальнаяИнформация(
    Вакансии: Массив<Вакансии.Ссылка>? = Неопределено, 
    Кандидаты: Массив<Кандидаты.Ссылка>? = Неопределено,
    РассматриваемыеКандидаты: Массив<РассматриваемыеКандидаты.Ссылка>? = Неопределено,
    ТолькоНаРассмотрении: Булево = Ложь)
    
    знч ФильтрПоВакансииям = Вакансии != Неопределено
    знч ФильтрПоКандидатам = Кандидаты != Неопределено
    знч ФильтрПоРассматриваемымКандидатам = РассматриваемыеКандидаты != Неопределено
    
    знч Запрос = Запрос{
        ВЫБРАТЬ 
            РассматриваемыеКандидаты.Ссылка КАК Ссылка,
            РассматриваемыеКандидаты.Наименование КАК Наименование,
            РассматриваемыеКандидаты.Вакансия КАК Вакансия,
            РассматриваемыеКандидаты.Кандидат КАК Кандидат,
            РассматриваемыеКандидаты.ЗарплатныеОжидания КАК ЗарплатныеОжидания,
            СтатусыРассматриваемыхКандидатов.Статус.ЗаменитьNull(Неопределено) КАК Статус,
            ПричиныПрекращенияРассмотрения.Вид.ЗаменитьNull(Неопределено) КАК ВидПричиныОкончанияРассмотрения,
            (ПричиныПрекращенияРассмотрения.Вид ЕСТЬ NULL) КАК Рассматривается,
            ПричиныПрекращенияРассмотрения.Причина.ЗаменитьNull("") КАК ПричинаОкончанияРассмотрения
        ПОМЕСТИТЬ
                ДетальнаяИнформация
        ИЗ
            РассматриваемыеКандидаты КАК РассматриваемыеКандидаты
            ЛЕВОЕ СОЕДИНЕНИЕ СтатусыРассматриваемыхКандидатов.СрезПоследних КАК СтатусыРассматриваемыхКандидатов
            ПО 
                СтатусыРассматриваемыхКандидатов.Кандидат == РассматриваемыеКандидаты.Ссылка
            ЛЕВОЕ СОЕДИНЕНИЕ ПричиныПрекращенияРассмотрения КАК ПричиныПрекращенияРассмотрения
            ПО 
                ПричиныПрекращенияРассмотрения.Кандидат == РассматриваемыеКандидаты.Ссылка
        ГДЕ
            (НЕ %ТолькоНаРассмотрении ИЛИ ПричиныПрекращенияРассмотрения.Вид ЕСТЬ NULL)
            И (НЕ %ФильтрПоВакансииям ИЛИ РассматриваемыеКандидаты.Вакансия В (%Вакансии))
            И (НЕ %ФильтрПоКандидатам ИЛИ РассматриваемыеКандидаты.Кандидат В (%Кандидаты))
            И (НЕ %ФильтрПоРассматриваемымКандидатам ИЛИ РассматриваемыеКандидаты.Ссылка В (%РассматриваемыеКандидаты))
        ИНДЕКСИРОВАТЬ ПО
            Кандидат, Статус
    }
    Запрос.Выполнить()  
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод РассматриваемыеКандидатыВакансии(Вакансии: Массив<Вакансии.Ссылка>): Массив<РассматриваемыеКандидаты.Ссылка>
    возврат РассматриваемыеКандидатыВакансии(Вакансии, Неопределено)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод РассматриваемыеКандидатыВакансии(Вакансии: Массив<Вакансии.Ссылка>, Статус: СтатусыВоронки.Ссылка?): Массив<РассматриваемыеКандидаты.Ссылка>
    знч Кандидаты = новый Массив<РассматриваемыеКандидаты.Ссылка>()
    знч Запрос = Запрос{
            ВЫБРАТЬ 
                РассматриваемыеКандидаты.Ссылка КАК Ссылка
            ИЗ
                РассматриваемыеКандидаты КАК РассматриваемыеКандидаты
                внутреннее соединение СтатусыРассматриваемыхКандидатов.СрезПоследних как СтатусыРассматриваемыхКандидатов
                по
                    РассматриваемыеКандидаты.Вакансия в(%Вакансии)
                    и СтатусыРассматриваемыхКандидатов.Кандидат == РассматриваемыеКандидаты.Ссылка
                    и (%Статус == Неопределено или СтатусыРассматриваемыхКандидатов.Статус == %Статус)
                
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса
        Кандидаты.Добавить(Элемент.Ссылка)
    ;
    возврат Кандидаты
;

@ВПроекте
метод ЗаполнитьПараметрыРассматриваемогоКандидатаВСообщении(ТекстыСообщений: Соответствие<Строка, Строка>, Кандидат: РассматриваемыеКандидаты.Ссылка): Соответствие<Строка, Строка>
    знч ДанныеКандидата = МенеджерСущности.ЗначенияРеквизитовОбъекта(Кандидат, ["Наименование"])
    пер Тексты: Соответствие<Строка, Строка>
    для КлючИЗначение из ТекстыСообщений
        пер Текст = КлючИЗначение.Значение.Заменить("\%КМПолноеИмяКандидата\%", ДанныеКандидата.Получить("Наименование"))
        Текст = Текст.Заменить("\%КМСписокКандидатов\%", СтандартноеПриложение.СсылкаПереходаКОбъекту(Кандидат))
        Тексты.Вставить(КлючИЗначение.Ключ, Текст)
    ;
    возврат Тексты
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ОтобратьСВозможностьюИзмененияСтатуса(Кандидаты: Массив<РассматриваемыеКандидаты.Ссылка>, Статус: СтатусыВоронки.Ссылка): Массив<РассматриваемыеКандидаты.Ссылка> 
    
    исп Область = ОбластьВидимостиВременныхТаблиц.Открыть()
    СоздатьВТДетальнаяИнформация(РассматриваемыеКандидаты = Кандидаты, ТолькоНаРассмотрении = Истина)
    исп Результат = Запрос{
        ВЫБРАТЬ
            ДетальнаяИнформация.Ссылка
        ИЗ
            ДетальнаяИнформация как ДетальнаяИнформация
        ГДЕ
            ДетальнаяИнформация.Статус != %Статус
        
    }.Выполнить()
    Область.Закрыть()
    
    возврат Результат.Преобразовать(Элемент->Элемент.Ссылка)
;

// JSON

@ВПроекте
структура РассматриваемыйКандидат_2_0
    @JsonСвойство(Имя = "ID")
    обз знч Идентификатор: Строка
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка
    @JsonСвойство(Имя = "vacancy")
    пер Вакансия: Строка
    @JsonСвойство(Имя = "candidate")
    пер Кандидат: Строка
    @JsonСвойство(Имя = "prefferedSalary")
    пер ЗарплатныеОжидания: ОписаниеОплаты.ДанныеJson_V2_0?
    @JsonСвойство(Имя = "comment")
    пер Комментарий: Строка?
    @JsonСвойство(Имя = "statuses")
    пер Статусы: Массив<СтатусыРассматриваемыхКандидатов.СтатусРассматриваемогоКандидата_2_0>
    @JsonСвойство(Имя = "attachedFiles")
    пер ПрисоединенныеФайлы: Массив<МенеджерФайлов.ДанныеФайлаJson>?
    @JsonСвойство(Имя = "processingTerminationState")
    пер ПричинаПрекращенияРассмотрения: ПричиныПрекращенияРассмотрения.ПричинаПрекращенияРассмотрения_2_0?
;

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "candidateInWork"
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{2.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    
    если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<РассматриваемыйКандидат_2_0>
    ;
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(РассматриваемыйКандидат: РассматриваемыйКандидат_2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать()
    знч ЗагружаемыйОбъект = Сервисы.ПрочитатьОбъект(РассматриваемыйКандидат.Идентификатор,
        &РассматриваемыеКандидаты.Объект.новый(Ууид), Тип<РассматриваемыеКандидаты.Ссылка>) как РассматриваемыеКандидаты.Объект 
    ЗагружаемыйОбъект.Наименование = РассматриваемыйКандидат.Наименование
    ЗагружаемыйОбъект.Комментарий = РассматриваемыйКандидат.Комментарий
    ЗагружаемыйОбъект.Вакансия = Сервисы.ПолучитьСсылку(Вакансии.ВнешняяСсылка(РассматриваемыйКандидат.Вакансия)) как Вакансии.Ссылка  
    ЗагружаемыйОбъект.Кандидат = Сервисы.ПолучитьСсылку(Кандидаты.ВнешняяСсылка(РассматриваемыйКандидат.Кандидат)) как Кандидаты.Ссылка
    ЗагрузитьОписаниеОплаты(ЗагружаемыйОбъект, РассматриваемыйКандидат.ЗарплатныеОжидания)
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ЗагружаемыйОбъект, РассматриваемыйКандидат.Идентификатор), Сервисы.ИнструментыМенеджераОбъекта)
    ЗагрузитьВложения(ЗагружаемыйОбъект, РассматриваемыйКандидат.ПрисоединенныеФайлы, Сервисы)
    СтатусыРассматриваемыхКандидатов.ЗаписатьСтатусыJson_V2_0(ЗагружаемыйОбъект.Ссылка, РассматриваемыйКандидат.Статусы, Сервисы)
    ПричиныПрекращенияРассмотрения.ЗаписатьСтатусыJson_V2_0(ЗагружаемыйОбъект.Ссылка, РассматриваемыйКандидат.ПричинаПрекращенияРассмотрения, Сервисы) 
    
    знч СервисыКандидатов = СобытияКандидаты.ПолучитьСервисы()
    для Сервис из СервисыКандидатов
        Сервис.ОкончаниеЗаписиОбъекта(ЗагружаемыйОбъект.Кандидат)
    ;
    область
        исп КонтекстДоступа.Привилегированный()
        Вакансии.ПересчитатьРазрешенияДоступаДляОбъектов([ЗагружаемыйОбъект.Вакансия.ЗагрузитьОбъект()!])
        Кандидаты.ПересчитатьРазрешенияДоступаДляОбъектов([ЗагружаемыйОбъект.Кандидат.ЗагрузитьОбъект()!])
    ;
;

метод ЗагрузитьОписаниеОплаты(РассматриваемыйКандидат: РассматриваемыеКандидаты.Объект, ОписаниеОплаты: ОписаниеОплаты.ДанныеJson_V2_0?)
    знч ЗарплатныеОжидания: ОписаниеОплаты
    если ОписаниеОплаты != Неопределено
        ЗарплатныеОжидания.ЗаполнитьПоJson(ОписаниеОплаты!)
    ;    
    РассматриваемыйКандидат.ЗарплатныеОжидания = ЗарплатныеОжидания
;

метод ЗагрузитьВложения(РассматриваемыйКандидат: РассматриваемыеКандидаты.Объект, ПрисоединенныеФайлы: Массив<МенеджерФайлов.ДанныеФайлаJson>?, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    если ПрисоединенныеФайлы != Неопределено
        пер ВложенныеФайлы = Файлы.ВложенияИзJson(ПрисоединенныеФайлы!, Сервисы, РассматриваемыйКандидат.Ссылка)
        Файлы.ЗаписатьФайлыПоВладельцу(ВложенныеФайлы, РассматриваемыйКандидат.Ссылка)
    иначе
        Файлы.УдалитьФайлыПоВладельцу(РассматриваемыйКандидат.Ссылка)
    ;    
;    

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> РассматриваемыеКандидаты.ПолучитьСсылку(Ууид))
;

@ВПроекте
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"candidatesInWork": ИсходящиеДанныеВJson(Ссылки, Сервисы)}
;

метод ИсходящиеДанныеВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеОбъектов(Ссылки)
        Данные.Добавить(ДанныеОбъектаВJson_V2_0(КлючИЗначение.Значение, Сервисы))
    ;
    возврат Данные
;

метод ДанныеОбъектов(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<РассматриваемыеКандидаты.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Данные: Соответствие<РассматриваемыеКандидаты.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>> 
    если Ссылки.Размер() == 0
        возврат Данные
    ;
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Наименование,
            Вакансия,
            Кандидат,
            ЗарплатныеОжидания,
            Комментарий
        Из
            РассматриваемыеКандидаты
        Где
            Ссылка В (%Ссылки)        
    }
    исп Результат = Запрос.Выполнить() 
    для СтрокаРезультата из Результат
        знч ДанныеОбъекта = новый Соответствие<Строка, Объект?>()
        ДанныеОбъекта.ВставитьВсе(МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(СтрокаРезультата, Результат))
        Данные.Вставить(
            СтрокаРезультата.Ссылка,
            ДанныеОбъекта
        )
    ;
    возврат Данные    
;

метод ДанныеОбъектаВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): РассматриваемыйКандидат_2_0
    знч РассматриваемыйКандидатСсылка = ДанныеОбъекта["Ссылка"] как РассматриваемыеКандидаты.Ссылка
    знч РассматриваемыйКандидат = новый РассматриваемыйКандидат_2_0(
            Сервисы.ПолучитьИдентификатор(РассматриваемыйКандидатСсылка),
            ДанныеОбъекта["Наименование"] как Строка)            
    если ДанныеОбъекта["Вакансия"] != Неопределено
        РассматриваемыйКандидат.Вакансия = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Вакансия"] как Вакансии.Ссылка)
    ;
    если ДанныеОбъекта["Кандидат"] != Неопределено
        РассматриваемыйКандидат.Кандидат = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Кандидат"] как Кандидаты.Ссылка)
    ;
    знч ПрисоединенныеФайлыДляВыгрузки = ПрисоединенныеФайлыМенеджер.ПрисоединенныеФайлы(РассматриваемыйКандидатСсылка)
    если не ПрисоединенныеФайлыДляВыгрузки.Файлы.Пусто()
        знч ПрисоединенныеФайлыДанные = новый Массив<МенеджерФайлов.ДанныеФайлаJson>()
        для ФайлДляВыгрузки из ПрисоединенныеФайлыДляВыгрузки.Файлы
            ПрисоединенныеФайлыДанные.Добавить(
                Файлы.ДанныеФайлаJson(ФайлДляВыгрузки.Ссылка, Сервисы)    
            )
        ;
        РассматриваемыйКандидат.ПрисоединенныеФайлы = ПрисоединенныеФайлыДанные
    ;
    РассматриваемыйКандидат.ЗарплатныеОжидания = (ДанныеОбъекта["ЗарплатныеОжидания"] как ОписаниеОплаты).ПолучитьJson_V2_0()
    РассматриваемыйКандидат.Комментарий = ДанныеОбъекта["Комментарий"] как Строка
    РассматриваемыйКандидат.Статусы = СтатусыРассматриваемыхКандидатов.СтатусыВJson_V2_0(РассматриваемыйКандидатСсылка, Сервисы) 
    РассматриваемыйКандидат.ПричинаПрекращенияРассмотрения = ПричиныПрекращенияРассмотрения.СтатусыВJson_V2_0(РассматриваемыйКандидатСсылка, Сервисы)
    
    возврат РассматриваемыйКандидат        
;
// Конец JSON

@ВПодсистеме
метод ПослеЗаписиДополнение(ДанныеЗаписи: ДанныеЗаписи, РежимЗагрузкиДанных: Булево)
    если РежимЗагрузкиДанных
        возврат
    ;
        
    ЗарегистрироватьИзмененияКОбмену(ДанныеЗаписи)
    ПроверитьНеобходимостьФормированияСогласия(ДанныеЗаписи)
   
;

метод ЗарегистрироватьИзмененияКОбмену(ДанныеЗаписи: ДанныеЗаписи)
    если ДанныеЗаписи.Вакансия != Неопределено
            ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(ДанныеЗаписи.Вакансия, Истина)
            РегистрацияИзменений.ЗарегистрироватьИзменение(ДанныеЗаписи.Вакансия, Неопределено, ХарактерыИзменений.Изменение)
        ;
        если ДанныеЗаписи.Кандидат != Неопределено
            ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(ДанныеЗаписи.Кандидат, Истина)
            РегистрацияИзменений.ЗарегистрироватьИзменение(ДанныеЗаписи.Кандидат, Неопределено, ХарактерыИзменений.Изменение)
        ;
        
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(ДанныеЗаписи.Ссылка, Истина)
        РегистрацияИзменений.ЗарегистрироватьИзменение(ДанныеЗаписи.Ссылка, Неопределено, ХарактерыИзменений.Изменение)
;

метод ПроверитьНеобходимостьФормированияСогласия(ДанныеЗаписи: ДанныеЗаписи)
    
    знч Источник = МенеджерСущности.ЗначениеРеквизитаОбъекта(ДанныеЗаписи.Кандидат, "Источник")
    если НастройкиПерсональныхДанных.ТребуетсяФормированиеСогласия() и Источник != ИсточникиКандидатов.ВитринаВакансий
        СогласияНаОбработкуПдн.СформироватьСогласиеЕслиНеСоздано(Субъект = ДанныеЗаписи.Кандидат, ИдПользователя = Неопределено, ПодписатьСразу = Ложь)
    ;    
;

@ВПодсистеме
метод ПослеУдаленияДополнение(Ссылка: РассматриваемыеКандидаты.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьУдаление(Ссылка)
    ;
; 