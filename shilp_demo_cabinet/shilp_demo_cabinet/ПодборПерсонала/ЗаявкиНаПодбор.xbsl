импорт УправлениеПерсоналом
импорт Компания
импорт Компания::Согласования
импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт ОбменДанными
импорт УниверсальныеМеханизмы
импорт СтандартноеПриложение
импорт ВебApi
импорт КонтрольДоступа
импорт ИнтерфейсныеКомпонентыСтандартные

@ВПроекте
конст ЗАЯВКИ_НА_ПОДБОР = "ЗаявкиНаПодбор"

//КонтрольДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат КонтрольДоступа.РазрешенияДоступаТаблицыСФизическимЛицомСПравомУдаления()
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Объекты: ЧитаемыйМассив<ЗаявкиНаПодбор.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ЗаявкиНаПодбор.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    возврат ПодборПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаДляЗаявокНаПодбор(Объекты)
;

@ВПроекте
метод ФизическиеЛицаСПравомЧтения(Ссылка: ЗаявкиНаПодбор.Ссылка?): Множество<ФизическиеЛица.Ссылка>
    знч ФизическиеЛица = новый Множество<ФизическиеЛица.Ссылка>()
    если Ссылка == Неопределено
        возврат ФизическиеЛица
    ;
    знч Запрос = Запрос{
        Выбрать
            Инициатор,
            Рекрутер
        Из
            ЗаявкиНаПодбор
        ГДЕ
            Ссылка == %Ссылка
    }
    исп Результат = Запрос.Выполнить()
    знч РеквизитыОбъекта = Результат.ЕдинственныйИлиУмолчание()
    возврат ФизическиеЛицаСПравомЧтения(РеквизитыОбъекта.Инициатор, РеквизитыОбъекта.Рекрутер)
;

@ВПодсистеме
метод ОбновитьРекрутераЗаявки(Заявка: ЗаявкиНаПодбор.Ссылка?, Рекрутер: ФизическиеЛица.Ссылка)
    если Заявка == Неопределено
        возврат
    ;
    
    знч ЗаявкаОбъект = Заявка.ЗагрузитьОбъект()
    ЗаявкаОбъект.Рекрутер = Рекрутер
    ЗаявкаОбъект.Записать()
    
;

@ВПроекте
метод ФизическиеЛицаСПравомЧтения(Инициатор: ФизическиеЛица.Ссылка?, Рекрутер: ФизическиеЛица.Ссылка?): Множество<ФизическиеЛица.Ссылка>
    знч ФизическиеЛица = новый Множество<ФизическиеЛица.Ссылка>()    
    если Инициатор != Неопределено
        ФизическиеЛица.Добавить(Инициатор)
    ;
    
    если Рекрутер != Неопределено
        ФизическиеЛица.Добавить(Рекрутер)
    ;
    
    возврат ФизическиеЛица
;

@ВПроекте
метод ФизическиеЛицаСПравомЧтенияИРедактирования(Ссылка: ЗаявкиНаПодбор.Ссылка?): Множество<ФизическиеЛица.Ссылка>
    знч ФизическиеЛица = новый Множество<ФизическиеЛица.Ссылка>()
    если Ссылка == Неопределено
        возврат ФизическиеЛица
    ;
    знч Запрос = Запрос{
        Выбрать
            Подразделение,
            Автор
        Из
            ЗаявкиНаПодбор
        ГДЕ
            Ссылка == %Ссылка
    }
    исп Результат = Запрос.Выполнить()
    знч РеквизитыОбъекта = Результат.ЕдинственныйИлиУмолчание()
    
    возврат ФизическиеЛицаСПравомЧтенияИРедактирования(РеквизитыОбъекта?.Подразделение, РеквизитыОбъекта?.Автор)   
;

@ВПроекте
метод ФизическиеЛицаСПравомЧтенияИРедактирования(Подразделение: СтруктураПредприятия.Ссылка?, Автор: ФизическиеЛица.Ссылка?): Множество<ФизическиеЛица.Ссылка>
    знч ФизическиеЛица = новый Множество<ФизическиеЛица.Ссылка>()
    если Подразделение != Неопределено
        знч РуководителиПодразделения = ОрганизационнаяСтруктура.РуководителиПодразделения(Подразделение)
        ФизическиеЛица.ДобавитьВсе(РуководителиПодразделения)
    ;
    
    если Автор != Неопределено
        ФизическиеЛица.Добавить(Автор)
    ;
    возврат ФизическиеЛица
;

//КонтрольДоступа

@ВПодсистеме
@НаСервере @НаКлиенте
конст ЗАГОЛОВОК_ФОРМЫ_НОВОГО_ДОКУМЕНТА = "Новая заявка на подбор"

@ВПодсистеме
метод ФизическиеЛицаДокументов(Документы: ЧитаемыйМассив<ЗаявкиНаПодбор.Ссылка>): ЧитаемоеСоответствие<ЗаявкиНаПодбор.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч ФизическиеЛицаДокументов: Соответствие<ЗаявкиНаПодбор.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Автор,
            МаршрутСогласования
        ИЗ
            ЗаявкиНаПодбор
        ГДЕ
            Ссылка в (%Документы)   
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ФизическиеЛицаДокументов.Вставить(СтрокаРезультата.Ссылка, [СтрокаРезультата.Автор]) 
        если СтрокаРезультата.МаршрутСогласования != Неопределено
            ФизическиеЛицаДокументов.Вставить(СтрокаРезультата.Ссылка, ПравилаСогласования.СогласующиеПравилаСогласования(СтрокаРезультата.МаршрутСогласования))
        ;
    ;
    возврат ФизическиеЛицаДокументов
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ПредставлениеЗаявкиНаПодбор(Ссылка: ЗаявкиНаПодбор.Ссылка?): Строка
    если Ссылка == Неопределено
        возврат ЗАГОЛОВОК_ФОРМЫ_НОВОГО_ДОКУМЕНТА
    иначе
        знч Реквизиты = Запрос{
            Выбрать
                Номер,
                Должность,
                Подразделение
            Из
                ЗаявкиНаПодбор
            Где Ссылка == %Ссылка
        }.Выполнить().ПервыйИлиУмолчание()
        возврат ПредставлениеЗаявкиНаПодбор(Реквизиты.Номер, Реквизиты.Должность, Реквизиты.Подразделение)
    ;
;

конст ДЛИНА_ПРЕДСТАВЛЕНИЯ_ДОКУМЕНТА = 250

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ПредставлениеЗаявкиНаПодбор(Номер: Строка, Должность: Должности.Ссылка? = Неопределено, Подразделение: СтруктураПредприятия.Ссылка? = Неопределено): Строка
    знч НомерПредставление = Номер.Пусто() ? "" : "№ %Номер"
    знч ДолжностьПредставление = Должность?.Представление() ?? "<Должность не указана>"
    знч ПодразделениеПредставление = Подразделение?.Представление() ?? "<Подразделение не указано>"
    знч Представление = "Заявка на подбор %НомерПредставление %ДолжностьПредставление/%ПодразделениеПредставление"
    возврат МенеджерСтрок.ПодстрокаСНачала(Представление, 250)
;

@ВПроекте
метод КлючевыеНавыки(Ссылка: ЗаявкиНаПодбор.Ссылка): Массив<КлючевыеНавыки.Ссылка>
    знч Запрос = Запрос{
        выбрать
            Таблица.Элемент как Навык
        из
            ЗаявкиНаПодбор.КлючевыеНавыки как Таблица
        где
            Таблица.Владелец == %Ссылка}
    
    знч Значения = новый Массив<КлючевыеНавыки.Ссылка>()
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса
        Значения.Добавить(Элемент.Навык)
    ;
    возврат Значения
;

@ВПроекте
метод ВодительскиеКатегории(Ссылка: ЗаявкиНаПодбор.Ссылка): Массив<ВодительскиеКатегории>
    знч Запрос = Запрос{
        ВЫБРАТЬ
            Таблица.Элемент КАК Элемент
        ИЗ
            ЗаявкиНаПодбор.ВодительскиеКатегории КАК Таблица
        ГДЕ
            Таблица.Владелец == %Ссылка}
    
    знч Значения = новый Массив<ВодительскиеКатегории>()
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса
        Значения.Добавить(Элемент.Элемент)
    ;
    возврат Значения
;

@ВПроекте
метод НаселенныеПункты(Ссылка: ЗаявкиНаПодбор.Ссылка): Массив<НаселенныеПункты.Ссылка>
    знч Запрос = Запрос{
        ВЫБРАТЬ
            Таблица.Элемент КАК Ссылка
        ИЗ
            ЗаявкиНаПодбор.НаселенныеПункты КАК Таблица
        ГДЕ
            Таблица.Владелец == %Ссылка}
    
    знч Значения = новый Массив<НаселенныеПункты.Ссылка>()
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса
        Значения.Добавить(Элемент.Ссылка)
    ;
    возврат Значения
;

@ВПроекте
метод ЕстьЗаявкиСоСтатусами(Статусы: Массив<СтатусыЗаявкиНаПодбор>, Автор: ФизическиеЛица.Ссылка?): Булево
    знч Запрос = Запрос{
        ВЫБРАТЬ ПЕРВЫЕ 1
            Истина Как Значение
        ИЗ
            ЗаявкиНаПодбор КАК ЗаявкиНаПодбор
            ВНУТРЕННЕЕ СОЕДИНЕНИЕ
                СтатусыЗаявокНаПодбор КАК СтатусыЗаявокНаПодбор
            ПО
                ЗаявкиНаПодбор.Ссылка == СтатусыЗаявокНаПодбор.Заявка
                И СтатусыЗаявокНаПодбор.Статус в (%Статусы)
                И ЗаявкиНаПодбор.Автор == %Автор
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    если РезультатЗапроса.ЕдинственныйИлиУмолчание() == Неопределено
        возврат Ложь
    иначе
        возврат Истина
    ;
;

@ВПроекте
метод ПослеПодписания(Документ: ЗаявкиНаПодбор.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего)
    исп РезультатЗапросаРеквизитов = Запрос{выбрать Автор, МаршрутСогласования из ЗаявкиНаПодбор где Ссылка == %Документ}.Выполнить()
    знч Реквизиты = РезультатЗапросаРеквизитов.Единственный()
    если Реквизиты.МаршрутСогласования != Неопределено и Согласования.ДокументПолностьюСогласован(Документ, Реквизиты.МаршрутСогласования)
        СтатусыЗаявокНаПодбор.Установить(Документ, СтатусыЗаявкиНаПодбор.Согласована)
    ;
;

@ВПроекте
метод КоличествоЗаявокМаршрута(МаршрутыСогласований: Множество<ПравилаСогласования.Ссылка>): Число
    знч Запрос = Запрос{
        выбрать различные
            Количество(ЗаявкиНаПодбор.Ссылка) как Количество
        из 
            ЗаявкиНаПодбор как ЗаявкиНаПодбор
        внутреннее соединение СтатусыЗаявокНаПодбор как СтатусыЗаявокНаПодбор
        по
            СтатусыЗаявокНаПодбор.Заявка == ЗаявкиНаПодбор.Ссылка
            и СтатусыЗаявокНаПодбор.Статус == %{СтатусыЗаявкиНаПодбор.Согласование}
            и ЗаявкиНаПодбор.МаршрутСогласования в (%МаршрутыСогласований)
        
    } 
    исп РезультатЗапроса = Запрос.Выполнить()
    возврат РезультатЗапроса.ПервыйИлиУмолчание()?.Количество ?? 0
;

@ВПроекте
метод ЗаполнитьПараметрыЗаявкиНаПодборВСообщении(ТекстыСообщений: Соответствие<Строка, Строка>, Заявка: ЗаявкиНаПодбор.Ссылка): Соответствие<Строка, Строка>
    
    знч Запрос = Запрос{
        Выбрать 
            ЗаявкиНаПодбор.ПредставлениеДокумента Как ПредставлениеДокумента,
            ЗаявкиНаПодбор.Должность.Наименование.ЗаменитьNull("") Как Должность,
            ЗаявкиНаПодбор.Дата Как Дата,
            ЗаявкиНаПодбор.Номер Как Номер
        Из 
            ЗаявкиНаПодбор Как ЗаявкиНаПодбор
        Где 
            ЗаявкиНаПодбор.Ссылка == %Заявка}
    
    исп Результат = Запрос.Выполнить() 
    пер РезультатСтрока = Результат.ПервыйИлиУмолчание()
    если РезультатСтрока == Неопределено
        возврат ТекстыСообщений
    ;
    
    пер ДанныеДокумента: ЧитаемоеСоответствие<Строка, Объект?> = МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат)
    
    пер Тексты: Соответствие<Строка, Строка>
    для КлючИЗначение из ТекстыСообщений
        пер Текст = КлючИЗначение.Значение.Заменить("\%КМКодЗаявки\%", ДанныеДокумента["Номер"] как Строка)
        Текст = Текст.Заменить("\%КМНаименованиеЗаявки\%", ДанныеДокумента["ПредставлениеДокумента"] как Строка)
        Текст = Текст.Заменить("\%КМНаименованиеДолжности\%", ДанныеДокумента["Должность"] как Строка)
        Текст = Текст.Заменить("\%КМЗаявкаНаПодбор\%", СтандартноеПриложение.СсылкаПереходаКОбъекту(Заявка))
        Тексты.Вставить(КлючИЗначение.Ключ, Текст)
    ;
    
    возврат Тексты
    
;

// Контракт СостояниеДокументовПоставщик

@ВПроекте
@Реализация
метод ПослеЗаписиСостоянияДокумента(ТекущееЗначение: СостояниеДокументов.Объект, ПредыдущееЗначение: СостояниеДокументов.Данные, ПараметрыЗаписи: СостояниеДокументов.ПараметрыЗаписи)
    
    если ПараметрыЗаписи.РежимЗагрузкиДанных
        возврат   
    ;
    
    если ТекущееЗначение.Документ это ЗаявкиНаПодбор.Ссылка
        если ТекущееЗначение.Состояние == СостоянияДокумента.ПолученОтказ
           СтатусыЗаявокНаПодбор.Установить(ТекущееЗначение.Документ как ЗаявкиНаПодбор.Ссылка, СтатусыЗаявкиНаПодбор.Доработка)
        ;
    ;
;

@ВПроекте
@Реализация
метод ЗаполнитьКартинкиДокументов(ДанныеЗапросов: ЧитаемыйМассив<СостояниеДокументаКомпонентДанных>)
;

// Конец СостояниеДокументовПоставщик

// Контракт СогласованияВозможностьУдаления

@ВПроекте
@Реализация
метод МожноУдалитьМаршрутСогласования(МаршрутСогласования: ПравилаСогласования.Ссылка?): Булево
    если МаршрутСогласования == Неопределено
        возврат Истина
    ;    
    знч Запрос = Запрос{
        ВЫБРАТЬ ПЕРВЫЕ 1
            Ссылка
        ИЗ
            ЗаявкиНаПодбор
        ГДЕ
            МаршрутСогласования == %МаршрутСогласования}
                
    возврат Запрос.Выполнить().Пусто()
;

// Конец СогласованияВозможностьУдаления

// JSON

@ВПодсистеме
метод ТипОбъектаJson(): Строка
    возврат "recruitmentApplication"
;

@ВПроекте
структура ЗаявкаНаПодбор_2_0
    @JsonСвойство(Имя = "ID")
    обз знч Идентификатор: Строка
    @JsonСвойство(Имя = "date")
    обз знч Дата: Дата
    @JsonСвойство(Имя = "documentNumber")
    обз знч Номер: Строка
    @JsonСвойство(Имя = "author")
    пер Автор: Строка?
    @JsonСвойство(Имя = "initiator")
    пер Инициатор: Строка?
    @JsonСвойство(Имя = "recruiter")
    пер Рекрутер: Строка?
    @JsonСвойство(Имя = "responsiblePerson")
    пер Ответственный: Строка?
    @JsonСвойство(Имя = "position")
    пер Должность: Строка?
    @JsonСвойство(Имя = "division")
    пер Подразделение: Строка?
    @JsonСвойство(Имя = "FTE")
    пер КоличествоШтатныхЕдиниц: Число
    @JsonСвойство(Имя = "plannedClosingDate")
    пер ПлановаяДатаЗакрытия: Дата
    @JsonСвойство(Имя = "rationale")
    пер Обоснование: Строка
    @JsonСвойство(Имя = "jobPriority")
    пер Срочность: Строка?
    @JsonСвойство(Имя = "compensation")
    пер КомпенсационныйПакет: Строка?
    @JsonСвойство(Имя = "employmentWays")
    пер СпособТрудоустройства: Строка?
    @JsonСвойство(Имя = "paymentDescription")
    пер ЗаработнаяПлата: ОписаниеОплаты.ДанныеJson_V2_0
    @JsonСвойство(Имя = "employmentType")
    пер ТипЗанятости: ПодборПерсонала.ТипЗанятостиJson?
    @JsonСвойство(Имя = "schedule")
    пер ГрафикРаботы: ПодборПерсонала.ВидГрафикаРаботыJson?
    @JsonСвойство(Имя = "experience")
    пер ОпытРаботы: ПодборПерсонала.ОпытРаботыJson?
    @JsonСвойство(Имя = "driverLicense")
    пер ВодительскиеКатегории: Массив<ВодительскиеКатегории>
    @JsonСвойство(Имя = "locality")
    пер НаселенныеПункты: Массив<Строка>
    @JsonСвойство(Имя = "keyskills")
    пер КлючевыеНавыки: Массив<Строка>
    @JsonСвойство(Имя = "responsibilities")
    пер Обязанности: Строка
    @JsonСвойство(Имя = "requirements")
    пер Требования: Строка
    @JsonСвойство(Имя = "conditions")
    пер Условия: Строка
    @JsonСвойство(Имя = "documentPresentation")
    пер ПредставлениеДокумента: Строка
    @JsonСвойство(Имя = "importance")
    пер ВажностьУстарело: ПодборПерсонала.ВажностьВакансииJson?
    @JsonСвойство(Имя = "status")
    пер Статус: ПодборПерсонала.СтатусыЗаявкиНаПодборJson_V2_0?
    @JsonСвойство(Имя = "recruitmentApplicationFlow")
    пер МаршрутСогласования: Строка?
;

@ВПроекте
структура ЗаявкаНаПодбор_3_0
    @JsonСвойство(Имя = "ID")
    обз знч Идентификатор: Строка
    @JsonСвойство(Имя = "date")
    обз знч Дата: Дата
    @JsonСвойство(Имя = "documentNumber")
    обз знч Номер: Строка
    @JsonСвойство(Имя = "author")
    пер Автор: Строка?
    @JsonСвойство(Имя = "initiator")
    пер Инициатор: Строка?
    @JsonСвойство(Имя = "recruiter")
    пер Рекрутер: Строка?
    @JsonСвойство(Имя = "responsiblePerson")
    пер Ответственный: Строка?
    @JsonСвойство(Имя = "position")
    пер Должность: Строка?
    @JsonСвойство(Имя = "division")
    пер Подразделение: Строка?
    @JsonСвойство(Имя = "FTE")
    пер КоличествоШтатныхЕдиниц: Число
    @JsonСвойство(Имя = "plannedClosingDate")
    пер ПлановаяДатаЗакрытия: Дата
    @JsonСвойство(Имя = "rationale")
    пер Обоснование: Строка
    @JsonСвойство(Имя = "jobPriority")
    пер Срочность: Строка?
    @JsonСвойство(Имя = "compensation")
    пер КомпенсационныйПакет: Строка?
    @JsonСвойство(Имя = "employmentWays")
    пер СпособТрудоустройства: Строка?
    @JsonСвойство(Имя = "paymentDescription")
    пер ЗаработнаяПлата: ОписаниеОплаты.ДанныеJson_V2_0
    @JsonСвойство(Имя = "employmentType")
    пер ТипЗанятости: ПодборПерсонала.ТипЗанятостиJson?
    @JsonСвойство(Имя = "schedule")
    пер ГрафикРаботы: ПодборПерсонала.ВидГрафикаРаботыJson?
    @JsonСвойство(Имя = "experience")
    пер ОпытРаботы: ПодборПерсонала.ОпытРаботыJson?
    @JsonСвойство(Имя = "driverLicense")
    пер ВодительскиеКатегории: Массив<ВодительскиеКатегории>
    @JsonСвойство(Имя = "locality")
    пер НаселенныеПункты: Массив<Строка>
    @JsonСвойство(Имя = "keySkills")
    пер КлючевыеНавыки: Массив<Строка>
    @JsonСвойство(Имя = "responsibilities")
    пер Обязанности: Строка
    @JsonСвойство(Имя = "requirements")
    пер Требования: Строка
    @JsonСвойство(Имя = "conditions")
    пер Условия: Строка
    @JsonСвойство(Имя = "documentPresentation")
    пер ПредставлениеДокумента: Строка
    @JsonСвойство(Имя = "status")
    пер ОписаниеСтатуса: СтатусыЗаявокНаПодбор.ОписаниеСтатусаV3_0?
    @JsonСвойство(Имя = "recruitmentApplicationFlow")
    пер МаршрутСогласования: Строка?
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип  
    если ВерсияФорматаОбмена == Неопределено
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    
    если ВерсияФорматаОбмена >= Версия{3.0}
        возврат Тип<ЗаявкаНаПодбор_3_0>
    иначе если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<ЗаявкаНаПодбор_2_0>
    иначе
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
;

@ВПроекте
метод ЗагрузитьОбъектИзJson_V2_0(ЗаявкаНаПодбор: ЗаявкаНаПодбор_2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать()
    пер Ссылка = ОбменДанными.ИдентификаторыЛокальныхОбъектов([ЗаявкаНаПодбор.Идентификатор])
                        .ПолучитьИлиУмолчание(ЗаявкаНаПодбор.Идентификатор) как ЗаявкиНаПодбор.Ссылка?
    пер ЗагружаемыйОбъект: ЗаявкиНаПодбор.Объект?
    если Ссылка == Неопределено
        ЗагружаемыйОбъект = Сервисы.ПрочитатьОбъект(
            ЗаявкаНаПодбор.Идентификатор, 
            &ЗаявкиНаПодбор.Объект.новый(Ууид),
            Тип<ЗаявкиНаПодбор.Ссылка>) как ЗаявкиНаПодбор.Объект
    иначе
        ЗагружаемыйОбъект = Ссылка.ЗагрузитьОбъект(Истина)
    ;
    
    ЗагружаемыйОбъект.Дата = ЗаявкаНаПодбор.Дата
    ЗагружаемыйОбъект.Номер = ЗаявкаНаПодбор.Номер
    если ЗаявкаНаПодбор.Автор != Неопределено
        ЗагружаемыйОбъект.Автор =  Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ЗаявкаНаПодбор.Автор)) как ФизическиеЛица.Ссылка
    ;
    если ЗаявкаНаПодбор.Инициатор != Неопределено
        ЗагружаемыйОбъект.Инициатор =  Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ЗаявкаНаПодбор.Инициатор)) как ФизическиеЛица.Ссылка
    ;
    если ЗаявкаНаПодбор.Рекрутер != Неопределено
        ЗагружаемыйОбъект.Рекрутер =  Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ЗаявкаНаПодбор.Рекрутер)) как ФизическиеЛица.Ссылка
    ;
    если ЗаявкаНаПодбор.Ответственный != Неопределено
        ЗагружаемыйОбъект.Ответственный =  Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ЗаявкаНаПодбор.Ответственный)) как ФизическиеЛица.Ссылка
    ;
    если ЗаявкаНаПодбор.Должность != Неопределено
        ЗагружаемыйОбъект.Должность =  Сервисы.ПолучитьСсылку(Должности.ВнешняяСсылка(ЗаявкаНаПодбор.Должность)) как Должности.Ссылка
    ;
    если ЗаявкаНаПодбор.Подразделение != Неопределено
        ЗагружаемыйОбъект.Подразделение =  Сервисы.ПолучитьСсылку(СтруктураПредприятия.ВнешняяСсылка(ЗаявкаНаПодбор.Подразделение)) как СтруктураПредприятия.Ссылка
    ;
    ЗагружаемыйОбъект.КоличествоШтатныхЕдиниц = ЗаявкаНаПодбор.КоличествоШтатныхЕдиниц
    ЗагружаемыйОбъект.ПлановаяДатаЗакрытия= ЗаявкаНаПодбор.ПлановаяДатаЗакрытия
    ЗагружаемыйОбъект.Обоснование = ЗаявкаНаПодбор.Обоснование
    если ЗаявкаНаПодбор.Срочность != Неопределено
        ЗагружаемыйОбъект.Срочность =  Сервисы.ПолучитьСсылку(СрочностьВакансии.ВнешняяСсылка(ЗаявкаНаПодбор.Срочность)) как СрочностьВакансии.Ссылка
    ;
    если ЗаявкаНаПодбор.КомпенсационныйПакет != Неопределено
        ЗагружаемыйОбъект.КомпенсационныйПакет =  Сервисы.ПолучитьСсылку(КомпенсационныеПакеты.ВнешняяСсылка(ЗаявкаНаПодбор.КомпенсационныйПакет)) как КомпенсационныеПакеты.Ссылка
    ;
    если ЗаявкаНаПодбор.СпособТрудоустройства != Неопределено
        ЗагружаемыйОбъект.СпособТрудоустройства =  Сервисы.ПолучитьСсылку(СпособыТрудоустройства.ВнешняяСсылка(ЗаявкаНаПодбор.СпособТрудоустройства)) как СпособыТрудоустройства.Ссылка
    ;
    ЗагружаемыйОбъект.ЗаработнаяПлата.ЗаполнитьПоJson(ЗаявкаНаПодбор.ЗаработнаяПлата)
    
    если ЗаявкаНаПодбор.ТипЗанятости != Неопределено
        ЗагружаемыйОбъект.ТипЗанятости = ПодборПерсонала.ТипЗанятостиИзJson(ЗаявкаНаПодбор.ТипЗанятости)
    ;
    если ЗаявкаНаПодбор.ГрафикРаботы != Неопределено
        ЗагружаемыйОбъект.ГрафикРаботы = ПодборПерсонала.ВидГрафикаРаботыИзJson(ЗаявкаНаПодбор.ГрафикРаботы)
    ;
    если ЗаявкаНаПодбор.ОпытРаботы != Неопределено
        ЗагружаемыйОбъект.ОпытРаботы = ПодборПерсонала.ОпытРаботыИзJson(ЗаявкаНаПодбор.ОпытРаботы)
    ;
    
    если ЗаявкаНаПодбор.МаршрутСогласования != Неопределено
        ЗагружаемыйОбъект.МаршрутСогласования = Сервисы.ПолучитьСсылку(
            ПравилаСогласования.ВнешняяСсылка(ЗаявкаНаПодбор.МаршрутСогласования)) как ПравилаСогласования.Ссылка
    ;
    
    ЗагружаемыйОбъект.ВодительскиеКатегории.Очистить()
    ЗагружаемыйОбъект.ВодительскиеКатегории.ДобавитьВсе(ЗаявкаНаПодбор.ВодительскиеКатегории)
    
    ЗагружаемыйОбъект.НаселенныеПункты.Очистить()
    для ИдентификаторНаселенногоПункта из ЗаявкаНаПодбор.НаселенныеПункты
        ЗагружаемыйОбъект.НаселенныеПункты.Добавить(
            НаселенныеПункты.ПолучитьСсылку(новый Ууид(ИдентификаторНаселенногоПункта)))
    ;
    
    ЗагружаемыйОбъект.КлючевыеНавыки.Очистить()
    для ИдентификаторКлючевогоКавыка из ЗаявкаНаПодбор.КлючевыеНавыки
        ЗагружаемыйОбъект.КлючевыеНавыки.Добавить(
            Сервисы.ПолучитьСсылку(КлючевыеНавыки.ВнешняяСсылка(ИдентификаторКлючевогоКавыка)) как КлючевыеНавыки.Ссылка)
    ;

    ЗагружаемыйОбъект.Обязанности = ЗаявкаНаПодбор.Обязанности
    ЗагружаемыйОбъект.Требования = ЗаявкаНаПодбор.Требования
    ЗагружаемыйОбъект.Условия = ЗаявкаНаПодбор.Условия
    ЗагружаемыйОбъект.ПредставлениеДокумента = ЗаявкаНаПодбор.ПредставлениеДокумента
    если ЗаявкаНаПодбор.ВажностьУстарело != Неопределено
        ЗагружаемыйОбъект.ВажностьУстарело = ПодборПерсонала.ВажностьВакансииИзJson(ЗаявкаНаПодбор.ВажностьУстарело)  
    ;

    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ЗагружаемыйОбъект, ЗаявкаНаПодбор.Идентификатор), Сервисы.ИнструментыМенеджераОбъекта)  

    если ЗаявкаНаПодбор.Статус != Неопределено
        СтатусыЗаявокНаПодбор.Установить(
            Заявка = ЗагружаемыйОбъект.Ссылка, 
            Статус = ПодборПерсонала.СтатусыЗаявкиНаПодборИзJson_V2_0(ЗаявкаНаПодбор.Статус), 
            Комментарий = "")
    ;   
;

@ВПроекте
метод ЗагрузитьОбъектИзJson_V3_0(ЗаявкаНаПодбор: ЗаявкаНаПодбор_3_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать()
    пер Ссылка = ОбменДанными.ИдентификаторыЛокальныхОбъектов([ЗаявкаНаПодбор.Идентификатор])
                        .ПолучитьИлиУмолчание(ЗаявкаНаПодбор.Идентификатор) как ЗаявкиНаПодбор.Ссылка?
    пер ЗагружаемыйОбъект: ЗаявкиНаПодбор.Объект?
    если Ссылка != Неопределено
        ЗагружаемыйОбъект = Ссылка.ЗагрузитьОбъект(Истина)
    ;
    если ЗагружаемыйОбъект == Неопределено
        ЗагружаемыйОбъект = Сервисы.ПрочитатьОбъект(
            ЗаявкаНаПодбор.Идентификатор, 
            &ЗаявкиНаПодбор.Объект.новый(Ууид),
            Тип<ЗаявкиНаПодбор.Ссылка>) как ЗаявкиНаПодбор.Объект
    ;
    ЗагружаемыйОбъект.Дата = ЗаявкаНаПодбор.Дата
    ЗагружаемыйОбъект.Номер = ЗаявкаНаПодбор.Номер
    если ЗаявкаНаПодбор.Автор != Неопределено
        ЗагружаемыйОбъект.Автор =  Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ЗаявкаНаПодбор.Автор)) как ФизическиеЛица.Ссылка
    ;
    если ЗаявкаНаПодбор.Инициатор != Неопределено
        ЗагружаемыйОбъект.Инициатор =  Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ЗаявкаНаПодбор.Инициатор)) как ФизическиеЛица.Ссылка
    ;
    если ЗаявкаНаПодбор.Рекрутер != Неопределено
        ЗагружаемыйОбъект.Рекрутер =  Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ЗаявкаНаПодбор.Рекрутер)) как ФизическиеЛица.Ссылка
    ;
    если ЗаявкаНаПодбор.Ответственный != Неопределено
        ЗагружаемыйОбъект.Ответственный =  Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ЗаявкаНаПодбор.Ответственный)) как ФизическиеЛица.Ссылка
    ;
    если ЗаявкаНаПодбор.Должность != Неопределено
        ЗагружаемыйОбъект.Должность =  Сервисы.ПолучитьСсылку(Должности.ВнешняяСсылка(ЗаявкаНаПодбор.Должность)) как Должности.Ссылка
    ;
    если ЗаявкаНаПодбор.Подразделение != Неопределено
        ЗагружаемыйОбъект.Подразделение =  Сервисы.ПолучитьСсылку(СтруктураПредприятия.ВнешняяСсылка(ЗаявкаНаПодбор.Подразделение)) как СтруктураПредприятия.Ссылка
    ;
    ЗагружаемыйОбъект.КоличествоШтатныхЕдиниц = ЗаявкаНаПодбор.КоличествоШтатныхЕдиниц
    ЗагружаемыйОбъект.ПлановаяДатаЗакрытия= ЗаявкаНаПодбор.ПлановаяДатаЗакрытия
    ЗагружаемыйОбъект.Обоснование = ЗаявкаНаПодбор.Обоснование
    если ЗаявкаНаПодбор.Срочность != Неопределено
        ЗагружаемыйОбъект.Срочность =  Сервисы.ПолучитьСсылку(СрочностьВакансии.ВнешняяСсылка(ЗаявкаНаПодбор.Срочность)) как СрочностьВакансии.Ссылка
    ;
    если ЗаявкаНаПодбор.КомпенсационныйПакет != Неопределено
        ЗагружаемыйОбъект.КомпенсационныйПакет =  Сервисы.ПолучитьСсылку(КомпенсационныеПакеты.ВнешняяСсылка(ЗаявкаНаПодбор.КомпенсационныйПакет)) как КомпенсационныеПакеты.Ссылка
    ;
    если ЗаявкаНаПодбор.СпособТрудоустройства != Неопределено
        ЗагружаемыйОбъект.СпособТрудоустройства =  Сервисы.ПолучитьСсылку(СпособыТрудоустройства.ВнешняяСсылка(ЗаявкаНаПодбор.СпособТрудоустройства)) как СпособыТрудоустройства.Ссылка
    ;
    ЗагружаемыйОбъект.ЗаработнаяПлата.ЗаполнитьПоJson(ЗаявкаНаПодбор.ЗаработнаяПлата)
    
    если ЗаявкаНаПодбор.ТипЗанятости != Неопределено
        ЗагружаемыйОбъект.ТипЗанятости = ПодборПерсонала.ТипЗанятостиИзJson(ЗаявкаНаПодбор.ТипЗанятости)
    ;
    если ЗаявкаНаПодбор.ГрафикРаботы != Неопределено
        ЗагружаемыйОбъект.ГрафикРаботы = ПодборПерсонала.ВидГрафикаРаботыИзJson(ЗаявкаНаПодбор.ГрафикРаботы)
    ;
    если ЗаявкаНаПодбор.ОпытРаботы != Неопределено
        ЗагружаемыйОбъект.ОпытРаботы = ПодборПерсонала.ОпытРаботыИзJson(ЗаявкаНаПодбор.ОпытРаботы)
    ;
    
    если ЗаявкаНаПодбор.МаршрутСогласования != Неопределено
        ЗагружаемыйОбъект.МаршрутСогласования = Сервисы.ПолучитьСсылку(
            ПравилаСогласования.ВнешняяСсылка(ЗаявкаНаПодбор.МаршрутСогласования)) как ПравилаСогласования.Ссылка
    ;
    
    ЗагружаемыйОбъект.ВодительскиеКатегории.Очистить()
    ЗагружаемыйОбъект.ВодительскиеКатегории.ДобавитьВсе(ЗаявкаНаПодбор.ВодительскиеКатегории)
    
    ЗагружаемыйОбъект.НаселенныеПункты.Очистить()
    для ИдентификаторНаселенногоПункта из ЗаявкаНаПодбор.НаселенныеПункты
        ЗагружаемыйОбъект.НаселенныеПункты.Добавить(
            НаселенныеПункты.ПолучитьСсылку(новый Ууид(ИдентификаторНаселенногоПункта)))
    ;
    
    ЗагружаемыйОбъект.КлючевыеНавыки.Очистить()
    для ИдентификаторКлючевогоКавыка из ЗаявкаНаПодбор.КлючевыеНавыки
        ЗагружаемыйОбъект.КлючевыеНавыки.Добавить(
            Сервисы.ПолучитьСсылку(КлючевыеНавыки.ВнешняяСсылка(ИдентификаторКлючевогоКавыка)) как КлючевыеНавыки.Ссылка)
    ;

    ЗагружаемыйОбъект.Обязанности = ЗаявкаНаПодбор.Обязанности
    ЗагружаемыйОбъект.Требования = ЗаявкаНаПодбор.Требования
    ЗагружаемыйОбъект.Условия = ЗаявкаНаПодбор.Условия
    ЗагружаемыйОбъект.ПредставлениеДокумента = ЗаявкаНаПодбор.ПредставлениеДокумента

    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ЗагружаемыйОбъект, ЗаявкаНаПодбор.Идентификатор), Сервисы.ИнструментыМенеджераОбъекта)  

    если ЗаявкаНаПодбор.ОписаниеСтатуса != Неопределено
        СтатусыЗаявокНаПодбор.Установить(
            Заявка = ЗагружаемыйОбъект.Ссылка, 
            Статус = ПодборПерсонала.СтатусыЗаявкиНаПодборИзJson_V3_0(ЗаявкаНаПодбор.ОписаниеСтатуса.Статус), 
            Комментарий = ЗаявкаНаПодбор.ОписаниеСтатуса.Комментарий)   
    ;
;

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> ЗаявкиНаПодбор.ПолучитьСсылку(Ууид))
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    если ВерсияФорматаОбмена >= Версия{3.0}
        возврат {"recruitmentApplications": ИсходящиеДанныеВJson(Ссылки, Сервисы, ВерсияФорматаОбмена)}
    иначе если ВерсияФорматаОбмена >= Версия{2.0}
        возврат {"recruitmentApplication": ИсходящиеДанныеВJson(Ссылки, Сервисы, ВерсияФорматаОбмена)}
    иначе
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
;

метод ИсходящиеДанныеВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ВерсияФорматаОбмена: Версия?): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеОбъектов(Ссылки)
        если ВерсияФорматаОбмена >= Версия{3.0}
            Данные.Добавить(ДанныеОбъектаВJson_V3_0(КлючИЗначение.Значение, Сервисы))
        иначе если ВерсияФорматаОбмена >= Версия{2.0}
            Данные.Добавить(ДанныеОбъектаВJson_V2_0(КлючИЗначение.Значение, Сервисы))
        иначе
            выбросить новый ИсключениеВыполнения("Неверный формат")
        ;
    ;
    возврат Данные
;

метод ДанныеОбъектов(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<ЗаявкиНаПодбор.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Данные: Соответствие<ЗаявкиНаПодбор.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>> 
    знч Запрос = Запрос{
        Выбрать
            Ссылка как Ссылка,
            Дата как Дата,
            Номер как Номер,
            Автор как Автор,
            Инициатор как Инициатор,
            Рекрутер как Рекрутер,
            Ответственный как Ответственный,
            Должность как Должность,
            Подразделение как Подразделение,
            КоличествоШтатныхЕдиниц как КоличествоШтатныхЕдиниц,
            ПлановаяДатаЗакрытия как ПлановаяДатаЗакрытия,
            Обоснование как Обоснование,
            Срочность как Срочность,
            ВажностьУстарело как Важность,
            КомпенсационныйПакет как КомпенсационныйПакет,
            СпособТрудоустройства как СпособТрудоустройства,
            ЗаработнаяПлата как ЗаработнаяПлата,
            ТипЗанятости как ТипЗанятости,
            ГрафикРаботы как ГрафикРаботы,
            ОпытРаботы как ОпытРаботы,
            Обязанности как Обязанности,
            Требования как Требования,
            Условия как Условия,
            ПредставлениеДокумента как ПредставлениеДокумента,
            МаршрутСогласования как МаршрутСогласования,
            СтатусыЗаявокНаПодбор.Статус.ЗаменитьNull(Неопределено) как Статус,
            СтатусыЗаявокНаПодбор.Комментарий.ЗаменитьNull("") как КомментарийСтатуса
        Из
            ЗаявкиНаПодбор как ЗаявкиНаПодбор
            Левое Соединение СтатусыЗаявокНаПодбор КАК СтатусыЗаявокНаПодбор
                По СтатусыЗаявокНаПодбор.Заявка == ЗаявкиНаПодбор.Ссылка
        Где
            Ссылка В (%Ссылки)        
    }
    исп Результат = Запрос.Выполнить() 
    для СтрокаРезультата из Результат
        знч ДанныеОбъекта = новый Соответствие<Строка, Объект?>()
        ДанныеОбъекта.ВставитьВсе(МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(СтрокаРезультата, Результат))
        ДанныеОбъекта.Вставить("КлючевыеНавыки", КлючевыеНавыки(СтрокаРезультата.Ссылка))
        ДанныеОбъекта.Вставить("ВодительскиеКатегории", ВодительскиеКатегории(СтрокаРезультата.Ссылка))
        ДанныеОбъекта.Вставить("НаселенныеПункты", НаселенныеПункты(СтрокаРезультата.Ссылка))
        Данные.Вставить(
            СтрокаРезультата.Ссылка,
            ДанныеОбъекта
        )
    ;
    
    возврат Данные    
;

метод ДанныеОбъектаВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЗаявкаНаПодбор_2_0
    пер ЗаявкаНаПодбор = новый ЗаявкаНаПодбор_2_0(
            Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Ссылка"] как ЗаявкиНаПодбор.Ссылка),
            ДанныеОбъекта["Дата"] как Дата,
            ДанныеОбъекта["Номер"] как Строка)   
    если ДанныеОбъекта["Автор"] != Неопределено
        ЗаявкаНаПодбор.Автор = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Автор"] как ФизическиеЛица.Ссылка)
    ;
    если ДанныеОбъекта["Инициатор"] != Неопределено
        ЗаявкаНаПодбор.Инициатор = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Инициатор"] как ФизическиеЛица.Ссылка)
    ;
    если ДанныеОбъекта["Рекрутер"] != Неопределено
        ЗаявкаНаПодбор.Рекрутер = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Рекрутер"] как ФизическиеЛица.Ссылка)
    ;
    если ДанныеОбъекта["Ответственный"] != Неопределено
        ЗаявкаНаПодбор.Ответственный = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Ответственный"] как ФизическиеЛица.Ссылка)
    ;
    если ДанныеОбъекта["Должность"] != Неопределено 
        ЗаявкаНаПодбор.Должность = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Должность"] как Должности.Ссылка)
    ;
    если ДанныеОбъекта["Подразделение"] != Неопределено 
        ЗаявкаНаПодбор.Подразделение = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Подразделение"] как СтруктураПредприятия.Ссылка?)
    ;
    ЗаявкаНаПодбор.КоличествоШтатныхЕдиниц = ДанныеОбъекта["КоличествоШтатныхЕдиниц"] как Число
    ЗаявкаНаПодбор.ПлановаяДатаЗакрытия = ДанныеОбъекта["ПлановаяДатаЗакрытия"] как Дата
    ЗаявкаНаПодбор.Обоснование = ДанныеОбъекта["Обоснование"] как Строка
    если ДанныеОбъекта["Срочность"] != Неопределено
        ЗаявкаНаПодбор.Срочность = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Срочность"] как СрочностьВакансии.Ссылка)
    ;
    если ДанныеОбъекта["КомпенсационныйПакет"] != Неопределено
        ЗаявкаНаПодбор.КомпенсационныйПакет = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["КомпенсационныйПакет"] как КомпенсационныеПакеты.Ссылка)
    ;
    если ДанныеОбъекта["СпособТрудоустройства"] != Неопределено
        ЗаявкаНаПодбор.СпособТрудоустройства = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["СпособТрудоустройства"] как СпособыТрудоустройства.Ссылка)
    ;
    ЗаявкаНаПодбор.ЗаработнаяПлата = (ДанныеОбъекта["ЗаработнаяПлата"] как ОписаниеОплаты).ПолучитьJson_V2_0()
    если ДанныеОбъекта["ТипЗанятости"] != Неопределено
        ЗаявкаНаПодбор.ТипЗанятости = ПодборПерсонала.ТипЗанятостиВJson(ДанныеОбъекта["ТипЗанятости"] как ТипЗанятости)
    ;
    если ДанныеОбъекта["ГрафикРаботы"] != Неопределено
        ЗаявкаНаПодбор.ГрафикРаботы = ПодборПерсонала.ВидГрафикаРаботыВJson(ДанныеОбъекта["ГрафикРаботы"] как ВидГрафикаРаботы)
    ;
    если ДанныеОбъекта["ОпытРаботы"] != Неопределено
        ЗаявкаНаПодбор.ОпытРаботы = ПодборПерсонала.ОпытРаботыВJson(ДанныеОбъекта["ОпытРаботы"] как ОпытРаботы)
    ;
    для Элемент из ДанныеОбъекта["КлючевыеНавыки"] как Массив<КлючевыеНавыки.Ссылка>
        ЗаявкаНаПодбор.КлючевыеНавыки.Добавить(Сервисы.ПолучитьИдентификатор(Элемент))
    ;
    ЗаявкаНаПодбор.ВодительскиеКатегории.ДобавитьВсе(ДанныеОбъекта["ВодительскиеКатегории"] как Массив<ВодительскиеКатегории>)
    для Элемент из ДанныеОбъекта["НаселенныеПункты"] как Массив<НаселенныеПункты.Ссылка>
        ЗаявкаНаПодбор.НаселенныеПункты.Добавить(Элемент.Ид.ВСтроку())
    ;
    ЗаявкаНаПодбор.Обязанности = ДанныеОбъекта["Обязанности"] как Строка
    ЗаявкаНаПодбор.Требования = ДанныеОбъекта["Требования"] как Строка
    ЗаявкаНаПодбор.Условия = ДанныеОбъекта["Условия"] как Строка
    ЗаявкаНаПодбор.ПредставлениеДокумента = ДанныеОбъекта["ПредставлениеДокумента"] как Строка
    если ДанныеОбъекта["Важность"] != Неопределено
        ЗаявкаНаПодбор.ВажностьУстарело = ПодборПерсонала.ВажностьВакансииВJson(ДанныеОбъекта["Важность"] как ВажностьВакансии?)
    ;
    если ДанныеОбъекта["Статус"] != Неопределено
        ЗаявкаНаПодбор.Статус = ПодборПерсонала.СтатусыЗаявкиНаПодборВJson_V2_0(ДанныеОбъекта["Статус"] как СтатусыЗаявкиНаПодбор?)    
    ;    
    если ДанныеОбъекта["МаршрутСогласования"] != Неопределено
        ЗаявкаНаПодбор.МаршрутСогласования = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["МаршрутСогласования"] как ПравилаСогласования.Ссылка)
    ;        
    возврат ЗаявкаНаПодбор        
;

метод ДанныеОбъектаВJson_V3_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЗаявкаНаПодбор_3_0
    пер ЗаявкаНаПодбор = новый ЗаявкаНаПодбор_3_0(
            Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Ссылка"] как ЗаявкиНаПодбор.Ссылка),
            ДанныеОбъекта["Дата"] как Дата,
            ДанныеОбъекта["Номер"] как Строка)   
    если ДанныеОбъекта["Автор"] != Неопределено
        ЗаявкаНаПодбор.Автор = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Автор"] как ФизическиеЛица.Ссылка)
    ;
    если ДанныеОбъекта["Инициатор"] != Неопределено
        ЗаявкаНаПодбор.Инициатор = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Инициатор"] как ФизическиеЛица.Ссылка)
    ;
    если ДанныеОбъекта["Рекрутер"] != Неопределено
        ЗаявкаНаПодбор.Рекрутер = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Рекрутер"] как ФизическиеЛица.Ссылка)
    ;
    если ДанныеОбъекта["Ответственный"] != Неопределено
        ЗаявкаНаПодбор.Ответственный = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Ответственный"] как ФизическиеЛица.Ссылка)
    ;
    если ДанныеОбъекта["Должность"] != Неопределено 
        ЗаявкаНаПодбор.Должность = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Должность"] как Должности.Ссылка)
    ;
    если ДанныеОбъекта["Подразделение"] != Неопределено 
        ЗаявкаНаПодбор.Подразделение = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Подразделение"] как СтруктураПредприятия.Ссылка?)
    ;
    ЗаявкаНаПодбор.КоличествоШтатныхЕдиниц = ДанныеОбъекта["КоличествоШтатныхЕдиниц"] как Число
    ЗаявкаНаПодбор.ПлановаяДатаЗакрытия = ДанныеОбъекта["ПлановаяДатаЗакрытия"] как Дата
    ЗаявкаНаПодбор.Обоснование = ДанныеОбъекта["Обоснование"] как Строка
    если ДанныеОбъекта["Срочность"] != Неопределено
        ЗаявкаНаПодбор.Срочность = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Срочность"] как СрочностьВакансии.Ссылка)
    ;
    если ДанныеОбъекта["КомпенсационныйПакет"] != Неопределено
        ЗаявкаНаПодбор.КомпенсационныйПакет = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["КомпенсационныйПакет"] как КомпенсационныеПакеты.Ссылка)
    ;
    если ДанныеОбъекта["СпособТрудоустройства"] != Неопределено
        ЗаявкаНаПодбор.СпособТрудоустройства = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["СпособТрудоустройства"] как СпособыТрудоустройства.Ссылка)
    ;
    ЗаявкаНаПодбор.ЗаработнаяПлата = (ДанныеОбъекта["ЗаработнаяПлата"] как ОписаниеОплаты).ПолучитьJson_V2_0()
    если ДанныеОбъекта["ТипЗанятости"] != Неопределено
        ЗаявкаНаПодбор.ТипЗанятости = ПодборПерсонала.ТипЗанятостиВJson(ДанныеОбъекта["ТипЗанятости"] как ТипЗанятости)
    ;
    если ДанныеОбъекта["ГрафикРаботы"] != Неопределено
        ЗаявкаНаПодбор.ГрафикРаботы = ПодборПерсонала.ВидГрафикаРаботыВJson(ДанныеОбъекта["ГрафикРаботы"] как ВидГрафикаРаботы)
    ;
    если ДанныеОбъекта["ОпытРаботы"] != Неопределено
        ЗаявкаНаПодбор.ОпытРаботы = ПодборПерсонала.ОпытРаботыВJson(ДанныеОбъекта["ОпытРаботы"] как ОпытРаботы)
    ;
    для Элемент из ДанныеОбъекта["КлючевыеНавыки"] как Массив<КлючевыеНавыки.Ссылка>
        ЗаявкаНаПодбор.КлючевыеНавыки.Добавить(Сервисы.ПолучитьИдентификатор(Элемент))
    ;
    ЗаявкаНаПодбор.ВодительскиеКатегории.ДобавитьВсе(ДанныеОбъекта["ВодительскиеКатегории"] как Массив<ВодительскиеКатегории>)
    для Элемент из ДанныеОбъекта["НаселенныеПункты"] как Массив<НаселенныеПункты.Ссылка>
        ЗаявкаНаПодбор.НаселенныеПункты.Добавить(Элемент.Ид.ВСтроку())
    ;
    ЗаявкаНаПодбор.Обязанности = ДанныеОбъекта["Обязанности"] как Строка
    ЗаявкаНаПодбор.Требования = ДанныеОбъекта["Требования"] как Строка
    ЗаявкаНаПодбор.Условия = ДанныеОбъекта["Условия"] как Строка
    ЗаявкаНаПодбор.ПредставлениеДокумента = ДанныеОбъекта["ПредставлениеДокумента"] как Строка
    если ДанныеОбъекта["Статус"] == Неопределено
        ЗаявкаНаПодбор.ОписаниеСтатуса = новый СтатусыЗаявокНаПодбор.ОписаниеСтатусаV3_0(
            Статус = ПодборПерсонала.СтатусыЗаявкиНаПодборВJson_V3_0(СтатусыЗаявкиНаПодбор.Черновик))
    иначе
        
        ЗаявкаНаПодбор.ОписаниеСтатуса = новый СтатусыЗаявокНаПодбор.ОписаниеСтатусаV3_0(
                Статус = ПодборПерсонала.СтатусыЗаявкиНаПодборВJson_V3_0(ДанныеОбъекта["Статус"] как СтатусыЗаявкиНаПодбор), 
                Комментарий = ДанныеОбъекта["КомментарийСтатуса"] как Строка)   
    ;    
    если ДанныеОбъекта["МаршрутСогласования"] != Неопределено
        ЗаявкаНаПодбор.МаршрутСогласования = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["МаршрутСогласования"] как ПравилаСогласования.Ссылка)
    ;        
    возврат ЗаявкаНаПодбор        
;

// Конец JSON

@ВПроекте
@НаКлиенте
метод УдалитьСОповещением(Ссылка: ЗаявкиНаПодбор.Ссылка)
    если ПодтвердитьУдаление()
        Удалить(Ссылка)
        ЗаявкаНаПодборПослеУдаления.Оповестить(Ссылка)
    ;
;

@ВПодсистеме
@НаСервере
@ДоступноСКлиента
метод Удалить(Ссылка: ЗаявкиНаПодбор.Ссылка)
    знч ЗаявкаОбъект = Ссылка.ЗагрузитьОбъект()
    ЗаявкаОбъект.Удалить()
;

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: ЗаявкиНаПодбор.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        если СтатусыЗаявокНаПодбор.Получить(Ссылка) != СтатусыЗаявкиНаПодбор.Черновик      
            ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Ссылка, Истина)
            РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, Неопределено)
        ;
    ;
;

@ВПодсистеме
метод ПослеУдаленияДополнение(Ссылка: ЗаявкиНаПодбор.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьУдаление(Ссылка)
    ;
;

@ВПодсистеме
@НаСервере
@ДоступноСКлиента
метод РеквизитМаршрутСогласованияОбязателен(Статус: СтатусыЗаявкиНаПодбор): Булево
    возврат Статус == СтатусыЗаявкиНаПодбор.Согласование
;

@ВПодсистеме
@НаСервере
@ДоступноСКлиента
метод РеквизитРекрутерОбязателен(Статус: СтатусыЗаявкиНаПодбор): Булево
    возврат [СтатусыЗаявкиНаПодбор.Вакансия].Содержит(Статус)
;

@ВПроекте
@НаСервере @НаКлиенте
перечисление ДоступныеДействия
    Редактирование,
    Копирование,
    Удаление,
    Отмена,
    ОтправкаНаПроверку,
    ВозвратНаДоработку,
    ОтправкаНаСогласование,
    СозданиеВакансии
;


метод РеквизитыОбъекта(Ссылка: ЗаявкиНаПодбор.Ссылка?): РеквизитыОбъекта?
    исп Результат = Запрос{
        ВЫБРАТЬ
            ЗаявкиНаПодбор.Ссылка как Ссылка,
            ЗаявкиНаПодбор.МаршрутСогласования как МаршрутСогласования
        ПОРОДИТЬ РеквизитыОбъекта
        ИЗ
            ЗаявкиНаПодбор как ЗаявкиНаПодбор
        ГДЕ
            ЗаявкиНаПодбор.Ссылка == %Ссылка
    }.Выполнить()
    возврат Результат.ЕдинственныйИлиУмолчание()
;

@ВПроекте
@НаСервере
метод ДоступныеДействия(Ссылка: ЗаявкиНаПодбор.Ссылка?, Статус: СтатусыЗаявкиНаПодбор, Автор: ФизическиеЛица.Ссылка): Множество<ДоступныеДействия>
    знч Действия: Множество<ДоступныеДействия>
    знч ЕстьПравоНаИзменение = КонтрольДоступа.ЕстьПравоНаИзменение(Ссылка)
    знч ИзменениеЗаявкиНаПодбор = КонтрольДоступа.ЕстьПравоНаПолномочие(ПодборПерсонала.ПолномочиеИзменениеЗаявкиНаПодбор())
    знч ИзменениеВакансии = КонтрольДоступа.ЕстьПравоНаПолномочие(ПодборПерсонала.ПолномочиеИзменениеВакансии())
    
    пер Согласующие: Согласующие?
    если Ссылка != Неопределено
        исп КонтекстДоступа.Привилегированный()
    
        знч РеквизитыОбъекта = РеквизитыОбъекта(Ссылка)
        если РеквизитыОбъекта?.МаршрутСогласования != Неопределено
            Согласующие = Согласования.ВсеСогласующие(Ссылка, РеквизитыОбъекта.МаршрутСогласования)
        ;
    ;
     
    если ЕстьПравоНаИзменение и МожноОтправитьНаСогласование(Ссылка, Статус, Автор, Согласующие)
        Действия.Добавить(ДоступныеДействия.ОтправкаНаСогласование)
    ;
    если ИзменениеЗаявкиНаПодбор и ИзменениеВакансии и МожноСоздатьВакансию(Ссылка, Статус, Автор)
        Действия.Добавить(ДоступныеДействия.СозданиеВакансии)
    ;
    
    если не Действия.СодержитВсе([ДоступныеДействия.ОтправкаНаСогласование, ДоступныеДействия.СозданиеВакансии])
        и ЕстьПравоНаИзменение и МожноОтправитьНаПроверку(Ссылка, Статус, Автор, Согласующие)
        
        Действия.Добавить(ДоступныеДействия.ОтправкаНаПроверку)
    ;
    
    если ЕстьПравоНаИзменение и МожноВернутьНаДоработку(Ссылка, Статус, Автор)
        Действия.Добавить(ДоступныеДействия.ВозвратНаДоработку)
    ;
    если ЕстьПравоНаИзменение и МожноОтменить(Ссылка, Статус)
        Действия.Добавить(ДоступныеДействия.Отмена)
    ;
    если ЕстьПравоНаИзменение и МожноРедактировать(Ссылка, Статус, Автор)
        Действия.Добавить(ДоступныеДействия.Редактирование)
        Действия.Добавить(ДоступныеДействия.Копирование)
    ;
    если ЕстьПравоНаИзменение и МожноУдалить(Ссылка, Статус, Автор)
        Действия.Добавить(ДоступныеДействия.Удаление)
    ;
    возврат Действия
;

@ВПроекте
@НаСервере
метод МожноРедактировать(Ссылка: ЗаявкиНаПодбор.Ссылка?, Статус: СтатусыЗаявкиНаПодбор, Автор: ФизическиеЛица.Ссылка?): Булево
    если Ссылка == Неопределено
        возврат Ложь
    ;
    знч ТекущееФизическоеЛицо = ПользователиСистемы.ТекущееФизическоеЛицо()
    если ТекущееФизическоеЛицо!= Неопределено и ТекущееФизическоеЛицо == Автор
        выбор Статус
        когда Черновик, Доработка
            возврат Истина
        иначе
            возврат Ложь
        ;
    иначе
        выбор Статус
        когда Согласование, Согласована, Вакансия, Завершена, Отменена
            возврат Ложь
        когда Доработка
            возврат КонтрольДоступа.ЕстьПравоНаПолномочие(ПодборПерсонала.ПолномочиеИзменениеВакансии())
        иначе
            возврат Истина
        ;
    ;
    возврат Ложь
;

@ВПроекте
@НаСервере
метод МожноУдалить(Ссылка: ЗаявкиНаПодбор.Ссылка?, Статус: СтатусыЗаявкиНаПодбор, Автор: ФизическиеЛица.Ссылка?): Булево
    если Ссылка == Неопределено
        возврат Ложь
    ;
    
    если Статус == СтатусыЗаявкиНаПодбор.Черновик
        исп Результат = Запрос{
            ВЫБРАТЬ
                Ссылка
            ИЗ
                Вакансии
            ГДЕ
                ЗаявкаНаПодбор.Ссылка == %Ссылка

            ОБЪЕДИНИТЬ ВСЕ

            ВЫБРАТЬ
                Ссылка
            ИЗ
                СогласованияДокументов
            ГДЕ
                Документ == %Ссылка
        }.Выполнить()
        если не Результат.Пусто()
            возврат Ложь
        ;
        
        знч ТекущееФизическоеЛицо = ПользователиСистемы.ТекущееФизическоеЛицо()
        возврат ТекущееФизическоеЛицо!= Неопределено и ТекущееФизическоеЛицо == Автор
    иначе  
        возврат Ложь
    ;
;

@ВПроекте
@НаКлиенте
метод УведомитьОСохранении()
    СтандартныеФормы.ПоказатьУведомление(
                    "Заявка на подбор",
                    "Изменения успешно сохранены",
                    ОценкаИнформации.Положительная)
;

@ВПроекте
@НаКлиенте
метод ПодтвердитьУдаление(): Булево
    возврат Диалог.Вопрос(
        Текст = "Вы уверены, что хотите удалить заявку?",
        Кнопки = {КнопкаДиалога.Да, КнопкаДиалога.Отмена}) == КнопкаДиалога.Да
;

@ВПроекте
@НаКлиенте
метод ПодтвердитьОтправкуНаПроверку(): Булево
    возврат Диалог.Вопрос(
        Текст = "Вы действительно желаете отправить заявку на проверку?",
        Кнопки = {КнопкаДиалога.Да, КнопкаДиалога.Отмена}) == КнопкаДиалога.Да
;

@ВПроекте
@НаКлиенте
метод УведомитьОбОтправкеНаПроверку()
    СтандартныеФормы.ПоказатьУведомление(
                    "Заявка на подбор",
                    "Вы отправили заявку на проверку",
                    ОценкаИнформации.Положительная)
;

@ВПроекте
@НаКлиенте
метод ЗапроситьМаршрутСогласованияУПользователя(ТекущееПравило: ПравилаСогласования.Ссылка?): ПравилаСогласования.Ссылка?
    если ТекущееПравило != Неопределено
        если Диалог.Вопрос(
                Текст = "Вы действительно желаете отправить заявку на согласование по маршруту %{ПредставлениеПравилаСогласования(ТекущееПравило)}?",
                Кнопки = {КнопкаДиалога.Да, КнопкаДиалога.Отмена}) == КнопкаДиалога.Да
            возврат ТекущееПравило
        иначе
            возврат Неопределено
        ;
    иначе 
        знч ДоступныеМаршрутыСогласования: Массив<ЭлементСпискаЗначений<Объект?>>
        для Элемент из ПодборПерсонала.СписокПравилСогласованияЗаявокНаПодбор()
            ДоступныеМаршрутыСогласования.Добавить(новый ЭлементСпискаЗначений<Объект?>(Значение = Элемент.Значение, 
                Представление = Элемент.Представление))
        ;
        
        знч Результат = ФормаВводаЗначения.ОткрытьВМодальномОкне(
            ОжидатьЗакрытия = Истина,
            Заголовок = "Отправка на согласование",
            ЗаголовокПоляВвода = "Маршрут согласования",
            ЗамещающийТекст = "Выберите",
            ЗаголовокКнопкиOк = "Отправить",
            Обязательное = Истина,
            СообщениеОшибка = "Укажите маршрут согласования",
            ДопустимыеТипы = {Тип<ПравилаСогласования.Ссылка>, Тип<Неопределено>},
            РежимВыбораИзСписка = РежимВыбораИзСписка.ТолькоЗначенияИзСписка,
            СписокВыбора = ДоступныеМаршрутыСогласования,
            ВалидаторВведенногоЗначения = (Значение)-> Значение != Неопределено)
            возврат Результат?.Значение как ПравилаСогласования.Ссылка? 
    ;   
;

@НаСервере @ДоступноСКлиента
статический метод ПредставлениеПравилаСогласования(Правило: ПравилаСогласования.Ссылка): Строка
    исп КонтекстДоступа.Привилегированный()
    возврат Правило.Представление()
;

@ВПроекте
@НаКлиенте
метод УведомитьОбОтправкеНаСогласование(Правило: ПравилаСогласования.Ссылка)
    СтандартныеФормы.ПоказатьУведомление(
        "Заявка на подбор",
        "Заявка на подбор отправлена на согласование по маршруту %{ПредставлениеПравилаСогласования(Правило)}",
        ОценкаИнформации.Положительная)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ОтправитьНаСогласование(Заявка: ЗаявкиНаПодбор.Ссылка, Правило: ПравилаСогласования.Ссылка)
    исп Транзакция = ГрупповаяОперация.Начать(Транзакция = Истина, ПривилегированныйРежим = Истина)
    
    знч ЗаявкаОбъект = Заявка.ЗагрузитьОбъект()
    ЗаявкаОбъект.МаршрутСогласования = Правило
    ЗаявкаОбъект.Записать(СтатусыЗаявкиНаПодбор.Согласование)

    Транзакция.Закрыть()
;

@ВПроекте
@НаКлиенте
метод ЗапроситьРекрутера(ЗначениеПоУмолчанию: ФизическиеЛица.Ссылка? = Неопределено): ФизическиеЛица.Ссылка?
    знч Рекрутеры = ПодборПерсонала
            .СписокРекрутеров()
            .Преобразовать(Элемент-> новый ЭлементСпискаЗначений<Объект?>(Значение = Элемент.Значение, Представление = Элемент.Представление))
                
    знч Результат = ФормаВводаЗначения.ОткрытьВМодальномОкне(
        ОжидатьЗакрытия = Истина,
        Заголовок = "Создание вакансии",
        ЗаголовокПоляВвода = "Рекрутер",
        ЗамещающийТекст = "Выберите",
        ЗаголовокКнопкиOк = "Создать вакансию",
        Обязательное = Истина,
        СообщениеОшибка = "Укажите рекрутера",
        ДопустимыеТипы = {Тип<ФизическиеЛица.Ссылка>, Тип<Неопределено>},
        РежимВыбораИзСписка = РежимВыбораИзСписка.ТолькоЗначенияИзСписка,
        СписокВыбора = Рекрутеры,
        Значение = Рекрутеры.Преобразовать(Элемент -> Элемент.Значение).Содержит(ЗначениеПоУмолчанию) ? ЗначениеПоУмолчанию : Неопределено,
        ВалидаторВведенногоЗначения = (Значение)-> Значение != Неопределено)
    возврат Результат?.Значение как ФизическиеЛица.Ссылка?
;

@ВПроекте
@НаКлиенте
метод УведомитьОСозданииВакансии(Вакансия: Вакансии.Ссылка)
    знч Уведомление = новый Уведомление(
                    "Вакансия создана",
                    "Создана вакансия %{Вакансия.Представление()}")
    Уведомление.ОценкаИнформации = ОценкаИнформации.Положительная
    Уведомление.Данные = Вакансия
    если ПодборПерсонала.ПараметрыСеанса().ЧтениеВакансии
        знч КомандаОткрыть = новый КомандаСПараметром<Уведомление>(&УведомитьОСозданииВакансииОткрыть, "Открыть")
        Уведомление.Команды = новый ФрагментКомандногоИнтерфейса<КомандаСПараметром<Уведомление>>([КомандаОткрыть])
    ;
    Уведомление.Показать()
;

@ВПроекте
@НаКлиенте
метод УведомитьОСозданииВакансииОткрыть(Команда: КомандаСПараметром<Уведомление>, Уведомление: Уведомление)
    если Уведомление.Данные это Вакансии.Ссылка
        знч Форма = новый КарточкаВакансии(КлючОбъекта = Уведомление.Данные как Вакансии.Ссылка)
        Форма.Открыть()
    ;
;

@ВПроекте
@НаКлиенте
метод ПодтвердитьВозвратНаДоработку(): Булево
    если Диалог.Вопрос(
        Текст = "Вы действительно желаете вернуть заявку на доработку?",
        Кнопки = {КнопкаДиалога.Да, КнопкаДиалога.Отмена}) == КнопкаДиалога.Да
        возврат Истина
    иначе
        возврат Ложь
    ;
;

@ВПроекте
@НаКлиенте
метод УведомитьОВозвратеНаДоработку()
    СтандартныеФормы.ПоказатьУведомление(
        "Заявка на подбор",
        "Вы вернули заявку на доработку",
        ОценкаИнформации.Предупреждающая)
;

@ВПроекте
@НаСервере
метод МожноОтменить(Ссылка: ЗаявкиНаПодбор.Ссылка?, Статус: СтатусыЗаявкиНаПодбор): Булево
    если Ссылка == Неопределено
        возврат Ложь
    ;    
    выбор Статус
    когда Проверка, Доработка, Согласована
        возврат Истина
    иначе
        возврат Ложь
    ;
    возврат Ложь
;

@ВПроекте
@НаКлиенте
метод Отменить(Ссылка: ЗаявкиНаПодбор.Ссылка): Булево
    знч ПричинаОтмены = ЗаявкиНаПодбор.ЗапроситьПричинуОтмены()
    если ПричинаОтмены != Неопределено
        Отменить(Ссылка, ПричинаОтмены)
        ЗаявкиНаПодбор.УведомитьОбОтмене()
        возврат Истина
    ;
    возврат Ложь
;

@НаСервере @ДоступноСКлиента
метод Отменить(Ссылка: ЗаявкиНаПодбор.Ссылка, ПричинаОтмены: Строка)
    исп КонтекстДоступа.Привилегированный()
    СтатусыЗаявокНаПодбор.Установить(Ссылка, СтатусыЗаявкиНаПодбор.Отменена, ПричинаОтмены)
;

@ВПроекте
@НаКлиенте
метод ЗапроситьПричинуОтмены(): Строка?
    знч Форма = новый ФормаВводаЗначения(
        ДопустимыеТипы = {Тип<Строка>},
        Заголовок = "Отмена заявки на подбор",
        ЗаголовокПоляВвода = "Причина отмены",
        ЗаголовокКнопкиOк = "Отменить заявку",
        ЗаголовокКнопкиОтмена = "Закрыть",
        Обязательное = Истина,
        СообщениеОшибка = "Укажите причину отмены",
        ВалидаторВведенногоЗначения = метод(Значение) ->
                возврат не ((Значение как Строка?) ?? "").Сократить().Пусто()
            ;,
        НастройкиВводаСтроки = новый НастройкиВводаСтроки(Многострочная = Истина, МинимальнаяВысотаВСтроках = 2, ПроверятьОрфографию = Истина))
        знч РезультатВводаЗначения = Форма.ОткрытьВМодальномОкне(ОжидатьЗакрытия = Истина)
    возврат РезультатВводаЗначения?.Значение как Строка?
;

@ВПроекте
@НаКлиенте
метод УведомитьОбОтмене()
    СтандартныеФормы.ПоказатьУведомление(
        "Заявка на подбор",
        "Вы отменили заявку",
        ОценкаИнформации.Предупреждающая)
;

@ВПроекте
@НаСервере
метод МожноОтправитьНаПроверку(Ссылка: ЗаявкиНаПодбор.Ссылка?, Статус: СтатусыЗаявкиНаПодбор, 
        Автор: ФизическиеЛица.Ссылка?, Согласующие: Согласующие?): Булево
    если Ссылка == Неопределено
        возврат Ложь
    ;
    
    знч СогласованиеНеЗапущео = Согласующие?.Согласующие.Пусто() ?? Истина
    
    знч ТекущееФизическоеЛицо = ПользователиСистемы.ТекущееФизическоеЛицо()
    если ТекущееФизическоеЛицо!= Неопределено и ТекущееФизическоеЛицо == Автор
        выбор Статус
        когда Черновик
            возврат Истина
        когда Доработка
            возврат СогласованиеНеЗапущео
        иначе
            возврат Ложь
        ;
    ;
    возврат Ложь
;


@ВПроекте
@НаСервере
метод МожноВернутьНаДоработку(Ссылка: ЗаявкиНаПодбор.Ссылка?, Статус: СтатусыЗаявкиНаПодбор, Автор: ФизическиеЛица.Ссылка?): Булево
    если Ссылка == Неопределено
        возврат Ложь
    ;    
    знч ТекущееФизическоеЛицо = ПользователиСистемы.ТекущееФизическоеЛицо()
    если ТекущееФизическоеЛицо != Автор
        выбор Статус
        когда Проверка
            возврат Истина
        иначе
            возврат Ложь
        ;
    ;
    возврат Ложь
;

@ВПроекте
@НаСервере
метод МожноОтправитьНаСогласование(Ссылка: ЗаявкиНаПодбор.Ссылка?, Статус: СтатусыЗаявкиНаПодбор, 
        Автор: ФизическиеЛица.Ссылка?, Согласующие: Согласующие?): Булево
        
    если Ссылка == Неопределено
        возврат Ложь
    ;  
    пер ВСогласованииОтказано: Булево
    если Согласующие != Неопределено
        ВСогласованииОтказано = не Согласующие.Согласующие.Фильтровать(
            Элемент -> Элемент.Результат == РезультатыСогласования.Отказано).Пусто()
    ;
    если КонтрольДоступа.ЕстьПравоНаПолномочие(ПодборПерсонала.ПолномочиеЗапускСогласованияЗаявкиНаПодбор())
        выбор Статус
        когда Черновик, Проверка
            возврат Истина
        когда Доработка
            возврат ВСогласованииОтказано
        ; 
    иначе если Автор == ПользователиСистемы.ТекущееФизическоеЛицо()
        выбор Статус
        когда Доработка
            возврат ВСогласованииОтказано
        ;  
    ;
    возврат Ложь
;

@ВПроекте
@НаСервере
метод МожноСоздатьВакансию(Ссылка: ЗаявкиНаПодбор.Ссылка?, Статус: СтатусыЗаявкиНаПодбор, Автор: ФизическиеЛица.Ссылка?): Булево
    если Ссылка == Неопределено
        возврат Ложь 
    ;    

    выбор Статус
    когда Проверка, Согласована
        возврат Истина
    когда Черновик
        возврат Автор == ПользователиСистемы.ТекущееФизическоеЛицо()
            и КонтрольДоступа.ЕстьПравоНаПолномочие(ПодборПерсонала.ПолномочиеИзменениеВакансии())
    иначе
        возврат Ложь
    ;
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод РассчитатьПлановуюДатуЗакрытия(ДатаСоздания: Дата, СрочностьВакансии: СрочностьВакансии.Ссылка?): Дата 
    если СрочностьВакансии == Неопределено
        возврат Дата{}
    ;
    пер ДатаРасчета = ДатаСоздания == Дата{} ? ДатаСоздания : Дата.Сейчас()
    исп Результат = Запрос{
        выбрать 
            СрокПодбораВДнях как СрокПодбораВДнях
        из
            СрочностьВакансии
        где
            Ссылка == %СрочностьВакансии
        
    }.Выполнить()
    знч СрокПодбораВДнях = Результат.ЕдинственныйИлиУмолчание()?.СрокПодбораВДнях ?? 0
    возврат ДатаРасчета.ДобавитьДни(СрокПодбораВДнях)
;

@НаСервере @ДоступноСКлиента
метод ПроверитьЗаполнениеНаСервере(Ссылка: ЗаявкиНаПодбор.Ссылка, ТекущийСтатус: СтатусыЗаявкиНаПодбор)
    знч ЗаявкаОбъект = Ссылка.ЗагрузитьОбъект()
    ЗаявкаОбъект.ПроверитьЗаполнение(ТекущийСтатус)
;

@ВПроекте
@НаКлиенте
метод ПроверитьЗаполнение(Ссылка: ЗаявкиНаПодбор.Ссылка, ТекущийСтатус: СтатусыЗаявкиНаПодбор): Булево
    попытка
        ПроверитьЗаполнениеНаСервере(Ссылка, ТекущийСтатус)
    поймать Исключение: ПроверкаЗаполнения.ИсключениеПроверкиЗаполнения
        ПроверкаЗаполнения.ОбработатьОшибкиЗаполнения(Исключение, {:})
        возврат Ложь
    ;
    возврат Истина
;

// Область Обновление
@ВПроекте
@НаСервере
метод ДобавитьРазделительИнформационныхСистем()
    знч ДанныеИнформационныхСистем = ИнформационныеСистемы.ДанныеИнформационныхСистем()
    для ДанныеИнформационнойСистемы из ДанныеИнформационныхСистем
        знч ВидПриложения = ДанныеИнформационнойСистемы.Значение.ВидПриложения
        для Сервис из СогласованияПользователь.ПолучитьСервисы()
            знч ТипыСогласуемыхДокументов = Сервис.ТипыСогласуемыхДокументовПолучателя(ВидПриложения)
            для ТипСогласуемогоДокумента из ТипыСогласуемыхДокументов
                если ТипСогласуемогоДокумента.Представление() == ЗаявкиНаПодбор.ЗАЯВКИ_НА_ПОДБОР
                    ИнформационныеСистемыРазделителейДанных.ОбновитьИнформационныеСистемыРазделителейДанных(
                        ТипСогласуемогоДокумента, ДанныеИнформационнойСистемы.Ключ)
                    прервать
                ;
            ;
        ;
    ;
;


// КонецОбласти