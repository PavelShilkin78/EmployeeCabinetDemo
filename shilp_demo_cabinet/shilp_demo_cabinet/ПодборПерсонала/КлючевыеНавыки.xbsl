импорт ВебApi
импорт ОбменДанными
импорт ОбщиеСтандартные


//КонтрольДоступа
@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат ПодборПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаКлючевыхНавыков()
;
//Конец КонтрольДоступа

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЗначенияДляАвтоподбора(ВведенныйТекст: Строка): Массив<ЭлементСпискаЗначений<Строка>>
    
    знч ШаблонПоиска = "\%%{ВведенныйТекст}\%"
    знч Запрос = Запрос{
        ВЫБРАТЬ 
            КлючевыеНавыки.Ссылка КАК Ссылка,
            КлючевыеНавыки.Наименование КАК Наименование
        ИЗ 
            КлючевыеНавыки КАК КлючевыеНавыки
        ГДЕ 
            КлючевыеНавыки.Наименование ПОДОБНО %ШаблонПоиска
    }
    
    пер ТочноеСовпадение = Ложь
    знч ЗначенияДляАвтоподбора = новый Массив<ЭлементСпискаЗначений<Строка>>()
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса
        ЗначенияДляАвтоподбора.Добавить(новый ЭлементСпискаЗначений<Строка>(
            Представление = Элемент.Наименование,
            Значение = Элемент.Ссылка.Представление())) 
            если  Элемент.Наименование == ВведенныйТекст
                ТочноеСовпадение = Истина
            ; 
    ;
    если не ТочноеСовпадение
        ЗначенияДляАвтоподбора.Добавить(новый ЭлементСпискаЗначений<Строка>(
            Представление = ВведенныйТекст,
            Значение = ВведенныйТекст)) 
    ;
    возврат ЗначенияДляАвтоподбора
    
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ДобавитьКлючевыеНавыки(НовыеКлючевыеНавыки: Массив<Строка>) : Массив<КлючевыеНавыки.Ссылка>
    
    знч ДобавленныеНавыки = новый Массив<КлючевыеНавыки.Ссылка>()
    для Наименование из НовыеКлючевыеНавыки
        знч НовыйОбъект = новый КлючевыеНавыки.Объект(
            Наименование = Наименование
        )
        НовыйОбъект.Записать()
        ДобавленныеНавыки.Добавить(НовыйОбъект.Ссылка)
    ;
    возврат ДобавленныеНавыки
    
;

@ВПроекте
@НаСервере
метод НайтиДобавитьНавыки(ИскомыеКлючевыеНавыки: Множество<Строка>) : Массив<КлючевыеНавыки.Ссылка>
    
    знч НайденныеНавыки = новый Соответствие<Строка, КлючевыеНавыки.Ссылка?>()
    для Элемент из ИскомыеКлючевыеНавыки
        НайденныеНавыки.Вставить(Элемент.Сократить(), Неопределено)
    ;

    исп РезультатНайденныеНавыки = Запрос{
        Выбрать
            Ссылка,
            Наименование
        Из
            КлючевыеНавыки
        Где
            Наименование в (%{НайденныеНавыки.Ключи()})
    }.Выполнить()

    для Элемент из РезультатНайденныеНавыки
        НайденныеНавыки.Вставить(Элемент.Наименование, Элемент.Ссылка)
    ;

    знч Навыки = новый Массив<КлючевыеНавыки.Ссылка>()
    для Элемент из НайденныеНавыки
        если Элемент.Значение == Неопределено
            знч НовыйОбъект = новый КлючевыеНавыки.Объект(
                Наименование = Элемент.Ключ
            )
            НовыйОбъект.Записать()
            Навыки.Добавить(НовыйОбъект.Ссылка)
        иначе
            Навыки.Добавить(Элемент.Значение)
        ;
    ;
    возврат Навыки
;

// JSON

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "keySkills"
;

@ВПроекте
структура КлючевойНавык_2_0
    @JsonСвойство(Имя = "ID")
    обз знч Идентификатор: Строка
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{2.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    
    если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<КлючевойНавык_2_0>
    ;
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(КлючевойНавык: КлючевойНавык_2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать()
    знч ЗагружаемыйОбъект = Сервисы.ПрочитатьОбъект(КлючевойНавык.Идентификатор, &КлючевыеНавыки.Объект.новый(Ууид), Тип<КлючевыеНавыки.Ссылка>) как КлючевыеНавыки.Объект 
    ЗагружаемыйОбъект.Наименование = КлючевойНавык.Наименование
    
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ЗагружаемыйОбъект, КлючевойНавык.Идентификатор), Сервисы.ИнструментыМенеджераОбъекта)    
;

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> КлючевыеНавыки.ПолучитьСсылку(Ууид))
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"keySkills": ИсходящиеДанныеВJson(Ссылки, Сервисы)}
;

метод ИсходящиеДанныеВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеОбъектов(Ссылки)
        Данные.Добавить(ДанныеОбъектаВJson_V2_0(КлючИЗначение.Значение, Сервисы))
    ;
    возврат Данные
;

метод ДанныеОбъектов(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<КлючевыеНавыки.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Данные: Соответствие<КлючевыеНавыки.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>> 
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Наименование
        Из
            КлючевыеНавыки
        Где
            Ссылка В (%Ссылки)        
    }
    исп Результат = Запрос.Выполнить() 
    для СтрокаРезультата из Результат
        Данные.Вставить(
            СтрокаРезультата.Ссылка,
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(СтрокаРезультата, Результат)
        )
    ;
    
    возврат Данные    
;

метод ДанныеОбъектаВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): КлючевойНавык_2_0
    пер КлючевойНавык = новый КлючевойНавык_2_0(
        Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Ссылка"] как КлючевыеНавыки.Ссылка),
        ДанныеОбъекта["Наименование"] как Строка)    
    возврат КлючевойНавык        
;

// Конец JSON

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: КлючевыеНавыки.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Ссылка, Истина)
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, Неопределено, ХарактерыИзменений.Изменение)
    ;
;

@ВПодсистеме
метод ПослеУдаленияДополнение(Ссылка: КлючевыеНавыки.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьУдаление(Ссылка)
    ;
;