импорт ОбщиеСтандартные
импорт СтандартноеПриложение
импорт ФизическиеЛица
импорт Тестирование
импорт Тестирование::Обмен
импорт ВебApi
импорт ОбменДанными
импорт КонтрольДоступа


// КонтрольДоступа
@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат ПодборПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаВакансии()
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Объекты: ЧитаемыйМассив<Вакансии.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<Вакансии.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    возврат ПодборПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаДляВакансий(Объекты)
;

@ВПодсистеме
метод ПересчитатьРазрешенияДоступа(ДанныеРасчетаРазрешений: Обходимое<Вакансии.ДанныеРасчетаРазрешений>)
    ПересчитатьРазрешенияДоступаДляОбъектов(ДанныеРасчетаРазрешений)
    ПересчитатьРазрешенияЗависимыхОбъектов(ДанныеРасчетаРазрешений)
;

@ВПодсистеме
метод ПересчитатьРазрешенияЗависимыхОбъектов(ДанныеРасчетаРазрешений: Обходимое<Вакансии.ДанныеРасчетаРазрешений>)
    
    знч Вакансии = ДанныеРасчетаРазрешений.Преобразовать(Элемент -> Элемент.Ссылка)  
    исп ПодчиненныеОбъекты = Запрос{
        ВЫБРАТЬ
            Отклики.Вакансия КАК Вакансия,
            Отклики.Ссылка КАК Ссылка
        ИЗ
            Отклики КАК Отклики
        ГДЕ
            Отклики.Вакансия В(%Вакансии)
        ОБЪЕДИНИТЬ ВСЕ
        ВЫБРАТЬ
            РассматриваемыеКандидаты.Вакансия КАК Вакансия,
            РассматриваемыеКандидаты.Ссылка КАК Ссылка
        ИЗ
            РассматриваемыеКандидаты КАК РассматриваемыеКандидаты
        ГДЕ
            РассматриваемыеКандидаты.Вакансия В(%Вакансии)
    }.Выполнить()
    
    знч ДанныеРасчетаСтатусыВакансии: Массив<СтатусыВакансии.ДанныеРасчетаРазрешений>
    для Элемент из ДанныеРасчетаРазрешений
        ДанныеРасчетаСтатусыВакансии.Добавить(новый СтатусыВакансии.ДанныеРасчетаРазрешений(Элемент.Ссылка))
    ;
    СтатусыВакансии.ПересчитатьРазрешенияДоступаДляОбъектов(ДанныеРасчетаСтатусыВакансии)
    
    знч ДанныеРасчетаОтклики: Массив<Отклики.ДанныеРасчетаРазрешений>
    знч ДанныеРасчетаРассматриваемыеКандидаты: Массив<РассматриваемыеКандидаты.ДанныеРасчетаРазрешений>
    
    для Элемент из ПодчиненныеОбъекты
        выбор Элемент.Ссылка
        когда это Отклики.Ссылка
            ДанныеРасчетаОтклики.Добавить(новый Отклики.ДанныеРасчетаРазрешений(
                Вакансия = Элемент.Вакансия,
                Ссылка = Элемент.Ссылка как Отклики.Ссылка))
        когда это РассматриваемыеКандидаты.Ссылка
            ДанныеРасчетаРассматриваемыеКандидаты.Добавить(новый РассматриваемыеКандидаты.ДанныеРасчетаРазрешений(
                Вакансия = Элемент.Вакансия,
                Ссылка = Элемент.Ссылка как РассматриваемыеКандидаты.Ссылка)) 
        ;
    ;
    
    если не ДанныеРасчетаОтклики.Пусто()
        Отклики.ПересчитатьРазрешенияДоступа(ДанныеРасчетаОтклики)    
    ;
    если не ДанныеРасчетаРассматриваемыеКандидаты.Пусто()
        РассматриваемыеКандидаты.ПересчитатьРазрешенияДоступа(ДанныеРасчетаРассматриваемыеКандидаты)    
    ;
;

@ВПроекте
@НаСервере
метод ФизическиеЛицаСПравомЧтенияИРедактирования(Рекрутер: ФизическиеЛица.Ссылка?): Множество<ФизическиеЛица.Ссылка>
    знч ФизическиеЛицаСПравомЧтенияИРедактирования = новый Множество<ФизическиеЛица.Ссылка>()
    если Рекрутер != Неопределено
        ФизическиеЛицаСПравомЧтенияИРедактирования.Добавить(Рекрутер)
    ;
    возврат ФизическиеЛицаСПравомЧтенияИРедактирования
;

@ВПроекте
@НаСервере
метод ФизическиеЛицаСПравомЧтения(Инициатор: ФизическиеЛица.Ссылка?, ЗаявкаНаПодбор: ЗаявкиНаПодбор.Ссылка?): Множество<ФизическиеЛица.Ссылка>
    знч ФизическиеЛицаСПравомЧтения = новый Множество<ФизическиеЛица.Ссылка>()
    если Инициатор != Неопределено
        ФизическиеЛицаСПравомЧтения.Добавить(Инициатор)
    ;         
    если ЗаявкаНаПодбор != Неопределено и МенеджерСущности.СсылкаСуществует(ЗаявкаНаПодбор)
        знч РеквизитыЗаявки = МенеджерСущности.ЗначенияРеквизитовОбъекта(ЗаявкаНаПодбор, ["Автор", "Инициатор"])
        если РеквизитыЗаявки["Автор"] != Неопределено
            ФизическиеЛицаСПравомЧтения.Добавить(РеквизитыЗаявки["Автор"]) 
        ;
        если РеквизитыЗаявки["Инициатор"] != Неопределено
            ФизическиеЛицаСПравомЧтения.Добавить(РеквизитыЗаявки["Инициатор"]) 
        ;
    ;
    возврат ФизическиеЛицаСПравомЧтения
;

// КонтрольДоступа
@ВПроекте
@НаСервере @НаКлиенте
перечисление ДоступныеДействия
    Редактирование,
    РедактированиеРекрутера
    Копирование,
    Удаление,
    Закрытие    
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ДоступныеДействия(Ссылка: Вакансии.Ссылка, Статус: СтатусВакансии?): Множество<ДоступныеДействия>
    знч Действия: Множество<ДоступныеДействия>
    знч ЕстьПравоНаИзменениеОбъекта = КонтрольДоступа.ЕстьПравоНаИзменение(Ссылка)
    знч ЕстьПолномочиеУправлениеПодборомПерсонала = КонтрольДоступа.ЕстьПравоНаПолномочие(ПодборПерсонала.ПолномочиеУправлениеПодборомПерсонала())
    
    если ЕстьПравоНаИзменениеОбъекта и Статус == СтатусВакансии.Открыта
        Действия.Добавить(ДоступныеДействия.Редактирование)
        Действия.Добавить(ДоступныеДействия.Закрытие)
    ;
    
    если ЕстьПолномочиеУправлениеПодборомПерсонала и Действия.Содержит(ДоступныеДействия.Редактирование)
        Действия.Добавить(ДоступныеДействия.РедактированиеРекрутера)
    ;
        
    возврат Действия
;

@ВПроекте
@НаКлиенте
метод ПодтвердитьУдаление(): Булево
    возврат Диалог.Вопрос(
        Текст = "Вы уверены, что хотите удалить вакансию?",
        Кнопки = {КнопкаДиалога.Да, КнопкаДиалога.Отмена}) == КнопкаДиалога.Да
;

@ВПроекте
@НаКлиенте
метод УдалитьСОповещением(Ссылка: Вакансии.Ссылка)
    если ПодтвердитьУдаление()
        Удалить(Ссылка)
        ВакансияПослеУдаления.Оповестить(Ссылка)
    ;
;

@ВПодсистеме
@НаСервере
@ДоступноСКлиента
метод Удалить(Ссылка: Вакансии.Ссылка)
    знч ВакансияОбъект = Ссылка.ЗагрузитьОбъект()
    ВакансияОбъект.Удалить()
;

@ВПроекте
@НаКлиенте
метод ПодтвердитьЗакрытие(): Булево
    возврат Диалог.Вопрос(
        Текст = "Вы действительно желаете закрыть вакансию?",
        Кнопки = {КнопкаДиалога.Да, КнопкаДиалога.Отмена}) == КнопкаДиалога.Да
;

@ВПодсистеме
@НаСервере
@ДоступноСКлиента
метод Закрыть(Вакансии: Массив<Вакансии.Ссылка>)
    исп ГрупповаяОперация.Начать(ПривилегированныйРежим = Истина, Транзакция = Истина)
    СтатусыВакансии.Установить(Вакансии, СтатусВакансии.Закрыта)
    исп Результат = Запрос{
        ВЫБРАТЬ
            Вакансии.ЗаявкаНаПодбор КАК ЗаявкаНаПодбор
        ИЗ
            Вакансии КАК Вакансии
        ГДЕ
            Вакансии.Ссылка В(%Вакансии)
            И Вакансии.ЗаявкаНаПодбор != Неопределено
    }.Выполнить()
    для Элемент из Результат
        СтатусыЗаявокНаПодбор.Установить(Элемент.ЗаявкаНаПодбор, СтатусыЗаявкиНаПодбор.Завершена)
    ;
;

@ВПодсистеме
@НаСервере
@ДоступноСКлиента
метод Закрыть(Ссылка: Вакансии.Ссылка)
    Закрыть([Ссылка])
;

@ВПроекте
@НаКлиенте
метод УведомитьОЗакрытии()
    знч Уведомление = новый Уведомление(
        "Вакансии",
        "Вы закрыли вакансию")
    Уведомление.ОценкаИнформации = ОценкаИнформации.Положительная
    Уведомление.Показать()
;

@ВПроекте
@НаСервере @ДоступноСКлиента
статический метод КлючевыеНавыкиВакансии(Вакансия: Вакансии.Ссылка): Массив<КлючевыеНавыки.Ссылка>
    знч ВакансияОбъект = Вакансия.ЗагрузитьОбъект()
    знч КлючевыеНавыки = новый Массив<КлючевыеНавыки.Ссылка>(ВакансияОбъект.КлючевыеНавыки)
    возврат КлючевыеНавыки
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СоздатьВакансиюИзЗаявкиНаПодбор(Заявка: ЗаявкиНаПодбор.Ссылка, Рекрутер: ФизическиеЛица.Ссылка): Вакансии.Ссылка
    исп Транзакция = Транзакции.Начать()
    знч Запрос = Запрос{
        ВЫБРАТЬ
            Вакансии.Ссылка
        ИЗ 
            Вакансии КАК Вакансии
        ГДЕ
            Вакансии.ЗаявкаНаПодбор == %Заявка
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    знч Выборка = РезультатЗапроса.ЕдинственныйИлиУмолчание()
    если Выборка != Неопределено
        возврат Выборка.Ссылка
    ;
    
    знч ЗаявкаОбъект = Заявка.ЗагрузитьОбъект()
    ЗаявкаОбъект.Рекрутер = Рекрутер
    ЗаявкаОбъект.Записать()

    знч НоваяВакансия = новый Вакансии.Объект(
        ЗаявкаНаПодбор = Заявка,
        ТипЗанятости = ЗаявкаОбъект.ТипЗанятости,
        ГрафикРаботы = ЗаявкаОбъект.ГрафикРаботы,
        ОпытРаботы = ЗаявкаОбъект.ОпытРаботы,
        Инициатор = ЗаявкаОбъект.Инициатор,
        Рекрутер = ЗаявкаОбъект.Рекрутер,
        ОписаниеВакансии = 
        "
            <body>
            <strong>Обязанности</strong>
            <p>%{ЗаявкаОбъект.Обязанности}</p>
            
            <strong>Требования</strong>
            <p>%{ЗаявкаОбъект.Требования}</p>
            
            <strong>Условия</strong>
            <p>%{ЗаявкаОбъект.Условия}</p>
            </body>
        "
    )
    НоваяВакансия.Записать()
    СтатусыВакансии.Установить(НоваяВакансия.Ссылка, СтатусВакансии.Открыта)
    СтатусыЗаявокНаПодбор.Установить(Заявка, СтатусыЗаявкиНаПодбор.Вакансия)
    
    Транзакция.Фиксировать()
    возврат НоваяВакансия.Ссылка
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод РекрутерыВсехВакансий(): ЧитаемоеМножество<ФизическиеЛица.Ссылка?>
    знч Рекрутеры = новый Множество<ФизическиеЛица.Ссылка?>()
    знч Запрос = Запрос{
        Выбрать Различные
            Вакансии.Рекрутер как Рекрутер
        Из
            Вакансии Как Вакансии
        Где
            Вакансии.Рекрутер != Неопределено        
    }
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        Рекрутеры.Добавить(СтрокаРезультата.Рекрутер)
    ;
    возврат Рекрутеры
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод Рекрутеры(Вакансии: ЧитаемаяКоллекция<Вакансии.Ссылка>): Соответствие<Вакансии.Ссылка, ФизическиеЛица.Ссылка?>
    исп Результат = Запрос{
        ВЫБРАТЬ
            Вакансии.Ссылка КАК Ссылка,
            Вакансии.Рекрутер КАК Рекрутер
        ИЗ
            Вакансии КАК Вакансии
        ГДЕ 
            Вакансии.Ссылка В(%Вакансии)
    }.Выполнить()
    
    знч РекрутерыВакансии: Соответствие<Вакансии.Ссылка, ФизическиеЛица.Ссылка?>
    для Элемент из Результат
        РекрутерыВакансии.Вставить(Элемент.Ссылка, Элемент.Рекрутер)
    ;
    возврат РекрутерыВакансии
;

@ВПроекте
метод ВакансииИнициатора(Инициатор: ФизическиеЛица.Ссылка): Массив<Вакансии.Ссылка>
    знч Вакансии = новый Массив<Вакансии.Ссылка>()
    знч Запрос = Запрос{
            выбрать 
                Вакансии.Ссылка как Ссылка
            из 
                Вакансии как Вакансии
                внутреннее соединение СтатусыВакансии.СрезПоследних как СтатусыВакансии 
                по 
                    Вакансии.Инициатор == %Инициатор
                    и Вакансии.Ссылка == СтатусыВакансии.Вакансия
                    и СтатусыВакансии.Статус == СтатусВакансии.Открыта 
    }
    
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса
        Вакансии.Добавить(Элемент.Ссылка)
    ;
    возврат Вакансии
;

@ВПроекте
метод ВакансииРекрутера(Рекрутер: ФизическиеЛица.Ссылка): Массив<Вакансии.Ссылка>
    знч Вакансии = новый Массив<Вакансии.Ссылка>()
    знч Запрос = Запрос{
            выбрать 
                Вакансии.Ссылка как Ссылка
            из 
                Вакансии как Вакансии
                внутреннее соединение СтатусыВакансии.СрезПоследних как СтатусыВакансии 
                по 
                    Вакансии.Рекрутер == %Рекрутер
                    и Вакансии.Ссылка == СтатусыВакансии.Вакансия
                    и СтатусыВакансии.Статус == СтатусВакансии.Открыта 
    }
    
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса
        Вакансии.Добавить(Элемент.Ссылка)
    ;
    возврат Вакансии
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ВакансииКандидатов(Кандидаты: Множество<Кандидаты.Ссылка>): ЧитаемоеМножество<Вакансии.Ссылка>
    знч Вакансии = новый Множество<Вакансии.Ссылка>()
    исп Результат = Запрос{
        Выбрать различные
            Вакансия
        Из
            РассматриваемыеКандидаты
        Где
            Кандидат В(%Кандидаты)
    }.Выполнить()
    для Элемент из Результат
        Вакансии.Добавить(Элемент.Вакансия)
    ;
    возврат Вакансии
;

@ВПроекте
метод АктивныеВакансии(): Массив<Вакансии.Ссылка>
    знч Вакансии = новый Массив<Вакансии.Ссылка>()
    знч Запрос = Запрос{
            выбрать 
                Вакансии.Ссылка как Ссылка
            из 
                Вакансии как Вакансии
                внутреннее соединение СтатусыВакансии.СрезПоследних как СтатусыВакансии 
                по 
                    Вакансии.Ссылка == СтатусыВакансии.Вакансия
                    и СтатусыВакансии.Статус == СтатусВакансии.Открыта 
    }
    
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса
        Вакансии.Добавить(Элемент.Ссылка)
    ;
    возврат Вакансии
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод КоличествоДнейДоЗакрытияВакансии(ПлановаяДатаЗакрытия: Дата?): Число?
    если ПлановаяДатаЗакрытия == Неопределено или ПлановаяДатаЗакрытия == Дата{}
        возврат Неопределено
    иначе
        возврат (ПлановаяДатаЗакрытия - Дата.Сейчас()).Дни
    ;
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод КоличествоДнейДоЗакрытияВакансии(Ссылка: Вакансии.Ссылка): Число?
    исп Результат = Запрос{
        Выбрать
            ЗаявкаНаПодбор.ПлановаяДатаЗакрытия.ЗаменитьNull(Неопределено) как ПлановаяДатаЗакрытия
        Из
            Вакансии
        Где
            Ссылка == %Ссылка
    }.Выполнить()
    
    знч Данные = Результат.Единственный()
    возврат КоличествоДнейДоЗакрытияВакансии(Данные.ПлановаяДатаЗакрытия)
;

@ВПроекте
метод ЗаполнитьПараметрыВакансииВСообщении(ТекстыСообщений: Соответствие<Строка, Строка>, Вакансия:Вакансии.Ссылка): Соответствие<Строка, Строка>
    знч ДанныеВакансии = МенеджерСущности.ЗначенияРеквизитовОбъекта(Вакансия, ["Наименование"])
    пер Тексты: Соответствие<Строка, Строка>
    для КлючИЗначение из ТекстыСообщений
        пер Текст = КлючИЗначение.Значение.Заменить("\%КМНаименованиеВакансии\%", ДанныеВакансии.Получить("Наименование"))
        Текст = Текст.Заменить("\%КМВакансия\%", СтандартноеПриложение.СсылкаПереходаКОбъекту(Вакансия))
        Тексты.Вставить(КлючИЗначение.Ключ, Текст)
    ;
    возврат Тексты
;

// JSON

@ВПроекте
структура Вакансия_2_0
    @JsonСвойство(Имя = "ID")
    обз знч Идентификатор: Строка
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка 
    @JsonСвойство(Имя = "recruitmentApplication")
    пер ЗаявкаНаПодбор: Строка?
    @JsonСвойство(Имя = "recruiter")
    пер Рекрутер: Строка?
    @JsonСвойство(Имя = "initiator")
    пер Инициатор: Строка?
    @JsonСвойство(Имя = "description")
    пер ОписаниеВакансии: Строка?
    @JsonСвойство(Имя = "location")
    пер Локация: Строка?
    @JsonСвойство(Имя = "experience")
    пер ОпытРаботы: ПодборПерсонала.ОпытРаботыJson?
    @JsonСвойство(Имя = "schedule")
    пер ГрафикРаботы: ПодборПерсонала.ВидГрафикаРаботыJson?
    @JsonСвойство(Имя = "employmentType")
    пер ТипЗанятости: ПодборПерсонала.ТипЗанятостиJson?
    @JsonСвойство(Имя = "keySkills")
    пер КлючевыеНавыки: Массив<Строка>
    @JsonСвойство(Имя = "test")
    пер ДымчатоеТестирование: Строка?
    @JsonСвойство(Имя = "statuses")
    пер Статусы: Массив<СтатусыВакансии.СтатусВакансии_2_0>
    @JsonСвойство(Имя = "isPublished")
    пер Опубликовано: Булево
;

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "vacancy"
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{2.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    
    если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<Вакансия_2_0>
    ;
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(Вакансия: Вакансия_2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать()
    знч ЗагружаемыйОбъект = Сервисы.ПрочитатьОбъект(Вакансия.Идентификатор, &Вакансии.Объект.новый(Ууид), Тип<Вакансии.Ссылка>) как Вакансии.Объект
    ЗагружаемыйОбъект.Наименование = Вакансия.Наименование
    ЗагружаемыйОбъект.ОписаниеВакансии = Вакансия.ОписаниеВакансии
    ЗагружаемыйОбъект.Локация = Вакансия.Локация
    если Вакансия.ЗаявкаНаПодбор != Неопределено
        ЗагружаемыйОбъект.ЗаявкаНаПодбор = Сервисы.ПолучитьСсылку(ЗаявкиНаПодбор.ВнешняяСсылка(Вакансия.ЗаявкаНаПодбор)) как ЗаявкиНаПодбор.Ссылка        
    ;
    если Вакансия.Рекрутер != Неопределено
        ЗагружаемыйОбъект.Рекрутер = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(Вакансия.Рекрутер)) как ФизическиеЛица.Ссылка    
    ;
    если Вакансия.Инициатор != Неопределено
        ЗагружаемыйОбъект.Инициатор = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(Вакансия.Инициатор)) как ФизическиеЛица.Ссылка
    ;
    если Вакансия.ОпытРаботы != Неопределено
        ЗагружаемыйОбъект.ОпытРаботы = ПодборПерсонала.ОпытРаботыИзJson(Вакансия.ОпытРаботы)
    ;
    если Вакансия.ГрафикРаботы != Неопределено
        ЗагружаемыйОбъект.ГрафикРаботы = ПодборПерсонала.ВидГрафикаРаботыИзJson(Вакансия.ГрафикРаботы)
    ;
    если Вакансия.ТипЗанятости != Неопределено
        ЗагружаемыйОбъект.ТипЗанятости = ПодборПерсонала.ТипЗанятостиИзJson(Вакансия.ТипЗанятости)
    ;

    ЗагружаемыйОбъект.КлючевыеНавыки.Очистить()
    для ИдКлючевогоНавыка из Вакансия.КлючевыеНавыки
        пер КлючевойНавык = Сервисы.ПолучитьСсылку(КлючевыеНавыки.ВнешняяСсылка(ИдКлючевогоНавыка)) как КлючевыеНавыки.Ссылка
        ЗагружаемыйОбъект.КлючевыеНавыки.Добавить(КлючевойНавык)        
    ;    

    если Вакансия.ДымчатоеТестирование != Неопределено
        ЗагружаемыйОбъект.ДымчатоеТестирование = Сервисы.ПолучитьСсылку(ТестыDto.ВнешняяСсылка(Вакансия.ДымчатоеТестирование)) как Тесты.Ссылка
    ;
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ЗагружаемыйОбъект, Вакансия.Идентификатор), Сервисы.ИнструментыМенеджераОбъекта) 
    СтатусыВакансии.ЗаписатьСтатусыJson_V2_0(ЗагружаемыйОбъект.Ссылка, Вакансия.Статусы)
    если Вакансия.Опубликовано
        ОпубликованныеВакансии.УстановитьПризнакПубликации(ЗагружаемыйОбъект.Ссылка)
    иначе
        ОпубликованныеВакансии.СнятьПризнакПубликации(ЗагружаемыйОбъект.Ссылка)
    ;
;

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> Вакансии.ПолучитьСсылку(Ууид))
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"vacancies": ИсходящиеДанныеВJson(Ссылки, Сервисы)}
;

метод ИсходящиеДанныеВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеОбъектов(Ссылки)
        Данные.Добавить(ДанныеОбъектаВJson_V2_0(КлючИЗначение.Значение, Сервисы))
    ;
    возврат Данные
;

метод КлючевыеНавыкиВакансий(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): Соответствие<Вакансии.Ссылка, Массив<КлючевыеНавыки.Ссылка>>
    исп Результат = Запрос{
        Выбрать
            КлючевыеНавыки.Владелец как Вакансия,
            КлючевыеНавыки.Элемент как Навык
        Из
            Вакансии.КлючевыеНавыки как КлючевыеНавыки
        Где КлючевыеНавыки.Владелец В (%Ссылки)
    }.Выполнить()
    
    знч КлючевыеНавыки: Соответствие<Вакансии.Ссылка, Массив<КлючевыеНавыки.Ссылка>>
    для Элемент из Результат
        если КлючевыеНавыки.СодержитКлюч(Элемент.Вакансия)
            КлючевыеНавыки.Получить(Элемент.Вакансия).Добавить(Элемент.Навык)
        иначе
            КлючевыеНавыки.Вставить(Элемент.Вакансия, [Элемент.Навык])
        ;
    ;
    возврат КлючевыеНавыки
;

метод ДанныеОбъектов(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<Вакансии.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Данные: Соответствие<Вакансии.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>> 
    если Ссылки.Размер() == 0
        возврат Данные
    ;
    знч КлючевыеНавыки = КлючевыеНавыкиВакансий(Ссылки)
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Наименование,
            ЗаявкаНаПодбор,
            Рекрутер,
            Инициатор,
            ОписаниеВакансии,
            Локация,
            ОпытРаботы,
            ГрафикРаботы,
            ТипЗанятости,
            ДымчатоеТестирование
        Из
            Вакансии
        Где
            Ссылка В (%Ссылки)        
    }
    исп Результат = Запрос.Выполнить() 
    для СтрокаРезультата из Результат
        знч ДанныеОбъекта = новый Соответствие<Строка, Объект?>()
        ДанныеОбъекта.ВставитьВсе(МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(СтрокаРезультата, Результат))
        ДанныеОбъекта.Вставить("КлючевыеНавыки", КлючевыеНавыки.ПолучитьИлиУмолчание(СтрокаРезультата.Ссылка, новый Массив<КлючевыеНавыки.Ссылка>()))
        Данные.Вставить(
            СтрокаРезультата.Ссылка,
            ДанныеОбъекта
        )
    ;
    возврат Данные    
;

метод ДанныеОбъектаВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Вакансия_2_0
    знч Ссылка = ДанныеОбъекта["Ссылка"] как Вакансии.Ссылка
    пер Вакансия = новый Вакансия_2_0(
            Сервисы.ПолучитьИдентификатор(Ссылка),
            ДанныеОбъекта["Наименование"] как Строка)       
    если ДанныеОбъекта["ЗаявкаНаПодбор"] != Неопределено
        Вакансия.ЗаявкаНаПодбор = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ЗаявкаНаПодбор"] как ЗаявкиНаПодбор.Ссылка)
    ;
    если ДанныеОбъекта["Рекрутер"] != Неопределено
        Вакансия.Рекрутер = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Рекрутер"] как ФизическиеЛица.Ссылка)
    ;
    если ДанныеОбъекта["Инициатор"] != Неопределено
        Вакансия.Инициатор = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Инициатор"] как ФизическиеЛица.Ссылка)
    ;
    Вакансия.ОписаниеВакансии = ДанныеОбъекта["ОписаниеВакансии"] как Строка
    Вакансия.Локация = ДанныеОбъекта["Локация"] как Строка
    если ДанныеОбъекта["ОпытРаботы"] != Неопределено
        Вакансия.ОпытРаботы = ПодборПерсонала.ОпытРаботыВJson(ДанныеОбъекта["ОпытРаботы"] как ОпытРаботы)
    ;
    если ДанныеОбъекта["ГрафикРаботы"] != Неопределено
        Вакансия.ГрафикРаботы = ПодборПерсонала.ВидГрафикаРаботыВJson(ДанныеОбъекта["ГрафикРаботы"] как ВидГрафикаРаботы)
    ;
    если ДанныеОбъекта["ТипЗанятости"] != Неопределено 
        Вакансия.ТипЗанятости = ПодборПерсонала.ТипЗанятостиВJson(ДанныеОбъекта["ТипЗанятости"] как ТипЗанятости)
    ;
    для КлючевойНавыкСсылка из ДанныеОбъекта["КлючевыеНавыки"] как ЧитаемыйМассив<КлючевыеНавыки.Ссылка>
        Вакансия.КлючевыеНавыки.Добавить(Сервисы.ПолучитьИдентификатор(КлючевойНавыкСсылка))        
    ;
    если ДанныеОбъекта["ДымчатоеТестирование"] != Неопределено
        Вакансия.ДымчатоеТестирование = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ДымчатоеТестирование"] как Тесты.Ссылка)
    ;
    Вакансия.Статусы = СтатусыВакансии.СтатусыВJson_V2_0(Ссылка) 
    Вакансия.Опубликовано = ОпубликованныеВакансии.ЕстьПризнакПубликации(Ссылка)    
    возврат Вакансия        
;
// Конец JSON

@ВПодсистеме
метод ЗарегистрироватьИзменение(Вакансия: Вакансии.Ссылка)
    исп КонтекстДоступа.Привилегированный()
    
    исп Результат = Запрос{
        ВЫБРАТЬ 
            Вакансии.ДымчатоеТестирование КАК ДымчатоеТестирование 
        ИЗ
            Вакансии КАК Вакансии
        ГДЕ 
            Ссылка == %Вакансия
        }.Выполнить()
          
    знч ДымчатоеТестирование = Результат.Единственный().ДымчатоеТестирование
    ЗарегистрироватьИзменение(Вакансия, ДымчатоеТестирование)
; 

@ВПодсистеме
метод ЗарегистрироватьИзменение(Вакансия: Вакансии.Ссылка, ДымчатоеТестирование: Тесты.Ссылка?)
    исп КонтекстДоступа.Привилегированный()
    
    если ДымчатоеТестирование != Неопределено
        ТестированиеРегистрацияОбъектовКОбмену.ЗарегистрироватьТест(ДымчатоеТестирование) 
    ;
    
    ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Вакансия, Отправляемый = Истина)
    РегистрацияИзменений.ЗарегистрироватьИзменение(
        Вакансия, 
        РазделительВыгружаемыхДанных = Неопределено, 
        ХарактерИзменений = ХарактерыИзменений.Изменение)
;

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: Вакансии.Ссылка, ДымчатоеТестирование: Тесты.Ссылка?, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        ЗарегистрироватьИзменение(Ссылка, ДымчатоеТестирование)
    ;
;

@ВПодсистеме
метод ПослеУдаленияДополнение(Ссылка: Вакансии.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьУдаление(Ссылка)
    ;
;