импорт ФизическиеЛица
импорт Отчеты

@НаКлиенте @НаСервере
структура Статистика
    обз знч СтатистикаРекрутеров: ЧитаемаяКоллекция<СтатистикаРекрутера>
    обз знч ОбщийПорядокЭтапов: Соответствие<Число, Строка>
;

@НаКлиенте @НаСервере
структура СтатистикаРекрутера
    обз знч РекрутерФИО: Строка
    обз знч Вакансии: Массив<СтатистикаВакансии>
    пер Этапы: Соответствие<Число, СтатистикаЭтапа>?
    пер Конверсия: Число
;

@НаКлиенте @НаСервере
структура СтатистикаВакансии
    обз знч ВакансияНаименование: Строка
    обз знч Этапы: Соответствие<Число, СтатистикаЭтапа>
    пер Конверсия: Число
;

@НаКлиенте @НаСервере
структура СтатистикаЭтапа
    обз знч Наименование: Строка
    обз знч Порядок: Число
    пер КоличествоКандидатов: Число
    пер Конверсия: Число
    пер Длительность: Число
    
    метод Копия(): СтатистикаЭтапа
        возврат новый СтатистикаЭтапа(
            Наименование = этот.Наименование,
            Порядок = этот.Порядок,
            КоличествоКандидатов = этот.КоличествоКандидатов,
            Длительность = этот.Длительность
        )
    ;
;

@Обработчик
метод ПослеСоздания()
    АктивнаяСтраница = Компоненты.СтраницаКогортнаяВоронка
    Отчеты.УстановитьПараметр(Компоненты.ДиаграммаКонверсияПоЭтапамВоронки, "ДопустимоеКоличествоПосещенийЭтапа", 1)
    Отчеты.УстановитьПараметр(Компоненты.ДиаграммаСрокПрохожденияПоЭтапамЧистойВоронки, "ДопустимоеКоличествоПосещенийЭтапа", 1)
    Отчеты.УстановитьПараметр(Компоненты.ВоронкаЧистогоПодбораПоРекрутерам, "ДопустимоеКоличествоПосещенийЭтапа", 1)
    Отчеты.УстановитьПараметр(Компоненты.ВоронкаПервичногоПодбораПоВакансиям, "ДопустимоеКоличествоПосещенийЭтапа", 1)
;

метод КомпонентыОтчетов(): Множество<ПросмотрОтчета>
    знч ПанельОтчетов = новый Множество<ПросмотрОтчета>()
    ПанельОтчетов.Добавить(Компоненты.ДиаграммаКонверсияПоВсемЭтапамВоронки)
    ПанельОтчетов.Добавить(Компоненты.ДиаграммаКонверсияВоронки)
    ПанельОтчетов.Добавить(Компоненты.ДиаграммаСрокПрохожденияВоронки)
    ПанельОтчетов.Добавить(Компоненты.ДиаграммаСрокПрохожденияПоЭтапамВоронки)
    ПанельОтчетов.Добавить(Компоненты.ВоронкаПодбораПоРекрутерам)
    ПанельОтчетов.Добавить(Компоненты.ВоронкаПодбораПоВакансиям)
            
    ПанельОтчетов.Добавить(Компоненты.ДиаграммаКонверсияПоЭтапамВоронки)
    ПанельОтчетов.Добавить(Компоненты.ДиаграммаСрокПрохожденияПоЭтапамЧистойВоронки)
    ПанельОтчетов.Добавить(Компоненты.ВоронкаЧистогоПодбораПоРекрутерам)
    ПанельОтчетов.Добавить(Компоненты.ВоронкаПервичногоПодбораПоВакансиям)
    
    возврат ПанельОтчетов
;

метод КомандаВыгрузитьОтчет(Команда: ОбычнаяКоманда)
    знч Фильтр = Компоненты.КомпонетФильтрОтчетов
    знч ОтборОт = (Фильтр.ПериодОтбора == Неопределено) ? Неопределено : Фильтр.ПериодОтбора.От
    знч ОтборДо = (Фильтр.ПериодОтбора == Неопределено) ? Неопределено : Фильтр.ПериодОтбора.До
    
    знч ФильтрПоКоличествуПосещений = (АктивнаяСтраница == Компоненты.СтраницаКогортнаяВоронка) ? 0 : 1
    знч ФайлВыгрузки = ВыгрузитьВФормате(Фильтр.Рекрутер, Фильтр.Вакансия, Фильтр.Этап, ОтборОт, ОтборДо, ФильтрПоКоличествуПосещений)
    ВыгрузкаФайлов.НачатьВыгрузку(ФайлВыгрузки, "ВремяПрохожденияПоВоронке${Дата.Сейчас()}.xls") 
;

@НаСервере @ДоступноСКлиента
статический метод ВыгрузитьВФормате(Рекрутер: ФизическиеЛица.Ссылка?, Вакансия: Вакансии.Ссылка?, Этап: СтатусыВоронки.Ссылка?, 
            ПериодОт: Дата?, ПериодДо: Дата?, ФильтрПоКоличествуПосещений: Число): ДвоичныйОбъект.Ссылка
    
    пер БайтыТаблицы = СформироватьОтчет(Рекрутер, Вакансия, Этап, ПериодОт, ПериодДо, ФильтрПоКоличествуПосещений)
        .ЭкспортироватьВБайты(ФорматЭкспортаТабличногоДокумента.Xls)
    
    пер СвойстваДвоичногоОбъекта = новый ДвоичныйОбъект.Свойства("ВремяПрохожденияПоВоронке").Временные()
    знч Результат = ОбъектноеХранилище.ЗагрузитьИзБайт(Байты = БайтыТаблицы, Свойства = СвойстваДвоичногоОбъекта)
    возврат Результат.Ссылка
;

@НаСервере
статический метод СформироватьОтчет(Рекрутер: ФизическиеЛица.Ссылка?, Вакансия: Вакансии.Ссылка?, Этап: СтатусыВоронки.Ссылка?, 
            ПериодОт: Дата?, ПериодДо: Дата?, ФильтрПоКоличествуПосещений: Число): ТабличныйДокумент
    
    знч Статистика = СтатистикаРекрутеровПоЭтапам(Рекрутер, Вакансия, Этап, ПериодОт, ПериодДо, ФильтрПоКоличествуПосещений)
    исп МакетДанные = Ресурс{МакетСтатистикаПоСтатусамВоронки.mxl}.ОткрытьПотокЧтения()
    знч Макет = ТабличныйДокумент.Прочитать(МакетДанные)

    знч ШапкаОбщиеПоказатели = Макет.ПолучитьОбласть("ШапкаОбщиеПоказатели")
    знч ШапкаЭтапПодбора = Макет.ПолучитьОбласть("ШапкаЭтапПодбора")
    знч Шапка = Макет.ПолучитьОбласть("Шапка")
    знч СтрокаРекрутер = Макет.ПолучитьОбласть("СтрокаРекрутер")
    знч СтрокаРекрутерЭтап = Макет.ПолучитьОбласть("СтрокаРекрутерЭтап")
    знч СтрокаВакансия = Макет.ПолучитьОбласть("СтрокаВакансия")
    знч СтрокаВакансияЭтап = Макет.ПолучитьОбласть("СтрокаВакансияЭтап")
    знч ОбщиеЭтапы = Статистика.ОбщийПорядокЭтапов.Сортировать((КлЗнч1, КлЗнч2) -> КлЗнч1.Ключ - КлЗнч2.Ключ)
    
    пер ТабличныйДокумент = новый ТабличныйДокумент()
    знч Писатель = ТабличныйДокумент.Запись
    Писатель.ВывестиВертикально(
        Шапка.ВВыводимуюОбласть().ЗаполнитьПараметры({"ДатаВремя": ДатаВремя.Сейчас().Представление()})
    )
    Писатель.ВывестиГоризонтально(ШапкаОбщиеПоказатели.ВВыводимуюОбласть())

    если не Статистика.СтатистикаРекрутеров.Пусто()
        для ДанныеЭтапа из ОбщиеЭтапы
            Писатель.ВывестиГоризонтально(ШапкаЭтапПодбора.ВВыводимуюОбласть().ЗаполнитьПараметры({"НаименованиеЭтапа": ДанныеЭтапа.Значение}))
        ;
        знч ПорядокПоследнегоЭтапа = ОбщиеЭтапы.Последний().Ключ
        для ДанныеРекрутера из Статистика.СтатистикаРекрутеров
            если ДанныеРекрутера.Этапы.Пусто()
                продолжить
            ;
            Писатель.ВывестиВертикально(
                СтрокаРекрутер.ВВыводимуюОбласть().ЗаполнитьПараметры({"ФИО": ДанныеРекрутера.РекрутерФИО})
                .ЗаполнитьПараметры({"Конверсия": Конверсия(ДанныеРекрутера.Этапы, ПорядокПоследнегоЭтапа)})
            )
            СтатистикаЭтапов(ДанныеРекрутера.Этапы, ОбщиеЭтапы, Писатель, СтрокаРекрутерЭтап)
            
            для ДанныеВакансии из ДанныеРекрутера.Вакансии
                Писатель.ВывестиВертикально(
                    СтрокаВакансия.ВВыводимуюОбласть().ЗаполнитьПараметры({"Вакансия": ДанныеВакансии.ВакансияНаименование})
                    .ЗаполнитьПараметры({"Конверсия": Конверсия(ДанныеВакансии.Этапы, ПорядокПоследнегоЭтапа)})
                )
                СтатистикаЭтапов(ДанныеВакансии.Этапы, ОбщиеЭтапы, Писатель, СтрокаВакансияЭтап)
            ;
        ;
    ;
    возврат ТабличныйДокумент
;
@НаСервере
статический метод Конверсия(Этапы: Соответствие<Число, СтатистикаЭтапа>, МаксимальныйПорядок: Число): Число
    пер КандидатовНаПервомЭтапе = Этапы[Этапы.Ключи().ВМассив().Первый()].КоличествоКандидатов
    пер КандидатовНаПоследнемЭтапе = 0
    
    знч ПорядокПоследний = Этапы.Ключи().ВМассив().Последний()
    если ПорядокПоследний >= МаксимальныйПорядок
        КандидатовНаПоследнемЭтапе = Этапы[ПорядокПоследний].КоличествоКандидатов
    ;
    если КандидатовНаПоследнемЭтапе > 0
        возврат (КандидатовНаПоследнемЭтапе/КандидатовНаПервомЭтапе * 100).Округлить(0)
    ;
    возврат 0
;

@НаСервере
статический метод СтатистикаЭтапа(ТекущийЭтап: СтатистикаЭтапа?, ПредыдущийЭтап: СтатистикаЭтапа?, Писатель: ЗаписьТабличногоДокумента, 
        Область: ОбластьТабличногоДокумента)

    пер КоличествоКандидатов = 0
    пер КоличествоКандидатовПредыдущегоЭтапа = 0
    пер ДлительностьЭтапа = 0
    пер Конверсия = 0
    
    если ТекущийЭтап != Неопределено
        КоличествоКандидатов = ТекущийЭтап.КоличествоКандидатов
        ДлительностьЭтапа = ТекущийЭтап.Длительность.Округлить(1)
        если ПредыдущийЭтап != Неопределено
            КоличествоКандидатовПредыдущегоЭтапа = ПредыдущийЭтап.КоличествоКандидатов
            Конверсия = ((КоличествоКандидатов/КоличествоКандидатовПредыдущегоЭтапа) * 100).Округлить(0)
        ;
    ;
    Писатель.ВывестиГоризонтально(
        Область.ВВыводимуюОбласть().ЗаполнитьПараметры({"КолКандидатов": КоличествоКандидатов})
        .ЗаполнитьПараметры({"КонверсияЭтапа": Конверсия})
        .ЗаполнитьПараметры({"Длительность": ДлительностьЭтапа})
    )
;

@НаСервере
статический метод ПредыдущийЭтап(Этапы: Соответствие<Число, СтатистикаЭтапа>, ПорядокСписок: Массив<Число>, СтартовыйИндекс: Число): СтатистикаЭтапа?
    если СтартовыйИндекс > 0
        для Индекс = 1 по СтартовыйИндекс
            знч Порядок = ПорядокСписок[СтартовыйИндекс - Индекс]
            если Этапы.СодержитКлюч(Порядок)
                возврат Этапы[Порядок]
            ;
        ;
    ;
    возврат Неопределено
;

@НаСервере
статический метод СтатистикаЭтапов(Этапы: Соответствие<Число, СтатистикаЭтапа>, ОбщиеЭтапы: Массив<КлючИЗначение<Число, Строка>>, 
        Писатель: ЗаписьТабличногоДокумента, Область: ОбластьТабличногоДокумента)

    знч ОбщиеПорядкиЭтапов = ОбщиеЭтапы.Преобразовать(Элемент -> Элемент.Ключ)
    для ИндексЭтапа = 0 по ОбщиеЭтапы.Граница()
        знч ОбщийЭтап = ОбщиеЭтапы[ИндексЭтапа]
        
        если Этапы.СодержитКлюч(ОбщийЭтап.Ключ)
            знч ТекущийЭтап = Этапы[ОбщийЭтап.Ключ]
            знч ПредыдущийЭтап = ПредыдущийЭтап(Этапы, ОбщиеПорядкиЭтапов, ИндексЭтапа)
            СтатистикаЭтапа(ТекущийЭтап, ПредыдущийЭтап, Писатель, Область)
        иначе
            СтатистикаЭтапа(Неопределено, Неопределено, Писатель, Область)
        ;
    ;
;

@НаСервере
статический метод СтатистикаРекрутеров(Рекрутер: ФизическиеЛица.Ссылка?, Вакансия: Вакансии.Ссылка?, Этап: СтатусыВоронки.Ссылка?, 
            ПериодОт: Дата?, ПериодДо: Дата?, ФильтрПоКоличествуПосещений: Число): ЧитаемаяКоллекция<СтатистикаРекрутера>
    знч Запрос = Запрос{
        Выбрать
            ДанныеЭтапов.Рекрутер как Рекрутер,
	        ДанныеЭтапов.Рекрутер.Наименование.ЗаменитьNull("") как РекрутерФИО,
            ДанныеЭтапов.Вакансия как Вакансия,
            ДанныеЭтапов.Вакансия.Наименование.ЗаменитьNull("") как ВакансияНаименование,
            ДанныеЭтапов.ПорядокВоронки как ПорядокВоронки,
            ДанныеЭтапов.ЭтапВоронки.Наименование.ЗаменитьNull("") как ЭтапВоронкиНаименование,
            Количество(ДанныеЭтапов.РассматриваемыйКандидат) как КоличествоКандидатов,
            Среднее(ДанныеЭтапов.ДлительностьЭтапа) как СреднееПериод
        Из
            СтатистикаЭтаповПодбора(%Рекрутер, %Вакансия, %Этап,  %ПериодОт, %ПериодДо, %ФильтрПоКоличествуПосещений) как ДанныеЭтапов
        Сгруппировать По
            ДанныеЭтапов.Рекрутер,
            ДанныеЭтапов.Вакансия,
            ДанныеЭтапов.ПорядокВоронки,
            ДанныеЭтапов.ЭтапВоронки
        Упорядочить По
            ДанныеЭтапов.ПорядокВоронки
    }
    исп Результат = Запрос.Выполнить()
    пер СтатистикаРекрутеров = новый Соответствие<ФизическиеЛица.Ссылка, СтатистикаРекрутера>()
    пер СтатистикаПоВакансиям = новый Соответствие<ФизическиеЛица.Ссылка, Соответствие<Вакансии.Ссылка, СтатистикаВакансии>>()
    для СтрокаРезультата из Результат
        если не СтатистикаРекрутеров.СодержитКлюч(СтрокаРезультата.Рекрутер)
            знч СтатистикаВакансии = новый СтатистикаВакансии(СтрокаРезультата.ВакансияНаименование, {:})
            СтатистикаПоВакансиям.Вставить(СтрокаРезультата.Рекрутер, {СтрокаРезультата.Вакансия:СтатистикаВакансии})
            СтатистикаРекрутеров.Вставить(СтрокаРезультата.Рекрутер, 
                новый СтатистикаРекрутера(
                    РекрутерФИО = СтрокаРезультата.РекрутерФИО, 
                    Вакансии = [СтатистикаВакансии],
                    Этапы = {:}
                )
            )
        ;
        пер СтатистикаЭтапа = новый СтатистикаЭтапа(
            Наименование = СтрокаРезультата.ЭтапВоронкиНаименование, 
            Порядок = СтрокаРезультата.ПорядокВоронки,
            КоличествоКандидатов = СтрокаРезультата.КоличествоКандидатов,
            Длительность = СтрокаРезультата.СреднееПериод
        )
        если СтатистикаПоВакансиям[СтрокаРезультата.Рекрутер].СодержитКлюч(СтрокаРезультата.Вакансия)
            СтатистикаПоВакансиям[СтрокаРезультата.Рекрутер][СтрокаРезультата.Вакансия].Этапы.Вставить(СтатистикаЭтапа.Порядок, СтатистикаЭтапа)
        иначе
            знч СтатистикаВакансии = новый СтатистикаВакансии(СтрокаРезультата.ВакансияНаименование, {СтатистикаЭтапа.Порядок : СтатистикаЭтапа})
            СтатистикаПоВакансиям[СтрокаРезультата.Рекрутер].Вставить(СтрокаРезультата.Вакансия, СтатистикаВакансии)
            СтатистикаРекрутеров[СтрокаРезультата.Рекрутер].Вакансии.Добавить(СтатистикаВакансии)
        ;
    ;
    возврат СтатистикаРекрутеров.Значения()
;

@НаСервере
статический метод СтатистикаРекрутеровПоЭтапам(Рекрутер: ФизическиеЛица.Ссылка?, Вакансия: Вакансии.Ссылка?, Этап: СтатусыВоронки.Ссылка?, 
            ПериодОт: Дата?, ПериодДо: Дата?, ФильтрПоКоличествуПосещений: Число): Статистика
    
    знч СтатистикаРекрутеров = СтатистикаРекрутеров(Рекрутер, Вакансия, Этап, ПериодОт, ПериодДо, ФильтрПоКоличествуПосещений)
    знч Статистика = новый Статистика(СтатистикаРекрутеров, новый Соответствие<Число, Строка>())
    для ДанныеРекрутера из СтатистикаРекрутеров

        пер СтатистикаРекрутераПоЭтапам = новый Соответствие<Число, СтатистикаЭтапа>()
        для ДанныеВакансии из ДанныеРекрутера.Вакансии
            
            для ПорядокЭтапа из ДанныеВакансии.Этапы.Ключи()
                знч ДанныеЭтапа = ДанныеВакансии.Этапы[ПорядокЭтапа]
                если СтатистикаРекрутераПоЭтапам.СодержитКлюч(ДанныеЭтапа.Порядок)
                    СтатистикаРекрутераПоЭтапам[ДанныеЭтапа.Порядок].КоличествоКандидатов += ДанныеЭтапа.КоличествоКандидатов
                    СтатистикаРекрутераПоЭтапам[ДанныеЭтапа.Порядок].Длительность += ДанныеЭтапа.Длительность
                иначе
                    знч СтатистикаЭтапа = ДанныеЭтапа.Копия()
                    ДанныеРекрутера.Этапы.Вставить(ПорядокЭтапа, СтатистикаЭтапа)
                    СтатистикаРекрутераПоЭтапам.Вставить(ДанныеЭтапа.Порядок, СтатистикаЭтапа)
                    
                    если не Статистика.ОбщийПорядокЭтапов.СодержитКлюч(ДанныеЭтапа.Порядок)
                        Статистика.ОбщийПорядокЭтапов.Вставить(ДанныеЭтапа.Порядок, ДанныеЭтапа.Наименование)
                    ;
                ;
            ;
        ;
        если не ДанныеРекрутера.Этапы.Пусто()
            для ЭтапВоронки из ДанныеРекрутера.Этапы.Значения()
                ЭтапВоронки.Длительность = (ЭтапВоронки.Длительность/ДанныеРекрутера.Вакансии.Размер()).Округлить(0)
            ;
            знч ПорядокПоВозрастанию = ДанныеРекрутера.Этапы.Ключи().Сортировать(НаправлениеСортировки.ПоВозрастанию)
            ДанныеРекрутера.Конверсия = ((ДанныеРекрутера.Этапы[ПорядокПоВозрастанию.Последний()].КоличествоКандидатов/
                                            ДанныеРекрутера.Этапы[ПорядокПоВозрастанию.Первый()].КоличествоКандидатов) * 100).Округлить(0)
        ;
    ;
    возврат Статистика
;