импорт ОбменДанными
импорт УниверсальныеМеханизмы::Заметки

// Область ОбработчикиСобытий
@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередЗаписью(Замещать: Булево, ПараметрыЗаписи: СтатусыЗаявокНаПодбор.ПараметрыЗаписи)
    знч Заявка: ЗаявкиНаПодбор.Ссылка? = Фильтр.Заявка.Значение
    если Заявка != Неопределено
        ПараметрыЗаписи.ПредыдущийСтатус = СтатусыЗаявокНаПодбор.Получить(Заявка)
    ;
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПослеЗаписи(Замещать: Булево, ПараметрыЗаписи: СтатусыЗаявокНаПодбор.ПараметрыЗаписи)
    если не ПараметрыЗаписи.РежимЗагрузкиДанных
        ЗарегистрироватьИзменение(ПараметрыЗаписи.ПредыдущийСтатус)
    ;
    
    ОтправитьУведомления(Замещать, ПараметрыЗаписи)
;

метод ЗарегистрироватьИзменение(ПредыдущийСтатус: СтатусыЗаявкиНаПодбор?)
    исп КонтекстДоступа.Привилегированный()
    
    если не Фильтр.Заявка.Использование
        возврат
    ;
    если Фильтр.Заявка.Значение == Неопределено
        возврат
    ;
    знч Заявка = Фильтр.Заявка.Значение!
    
    если Размер() != 1
        возврат
    ;
    знч Статус = Единственный().Статус
    если Статус == Неопределено
        возврат
    ;
    если Статус == СтатусыЗаявкиНаПодбор.Черновик
        возврат
    ;
    
    ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Заявка, Отправляемый = Истина)
    РегистрацияИзменений.ЗарегистрироватьИзменение(
        Заявка, 
        РазделительВыгружаемыхДанных = Неопределено, 
        ХарактерИзменений = ХарактерыИзменений.Изменение)
        
    если ПредыдущийСтатус == СтатусыЗаявкиНаПодбор.Черновик
        ЗаметкиКОбъектам.ЗарегистрироватьЗаметкиПоВладельцу(Заявка)
    ;
;

метод ОтправитьУведомления(Замещать: Булево, ПараметрыЗаписи: СтатусыЗаявокНаПодбор.ПараметрыЗаписи)
    исп КонтекстДоступа.Привилегированный()
    для Сервис из УведомленияПодбораПерсонала.ПолучитьСервисы()
        Сервис.ПослеЗаписиСтатусаЗаявкиНаПодбор(этот, Замещать, ПараметрыЗаписи)
    ;
;

// КонецОбласти