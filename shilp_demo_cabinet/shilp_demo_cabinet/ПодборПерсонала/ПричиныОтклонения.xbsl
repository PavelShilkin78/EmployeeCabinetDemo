импорт ВебApi
импорт ОбменДанными
импорт ОбщиеСтандартные
//КонтрольДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат ПодборПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаПричинОтклонения()
;

//Конец КонтрольДоступа
// JSON

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "candidateRejectionReason"
;

@ВПроекте
структура ПричинаОтклонения_2_0
    @JsonСвойство(Имя = "ID")
    обз знч Идентификатор: Строка
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка
;

@ВПодсистеме
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{2.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    
    если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<ПричинаОтклонения_2_0>
    ;
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(ПричинаОтклонения: ПричинаОтклонения_2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать()
    знч ЗагружаемыйОбъект = Сервисы.ПрочитатьОбъект(ПричинаОтклонения.Идентификатор,
        &ПричиныОтклонения.Объект.новый(Ууид), Тип<ПричиныОтклонения.Ссылка>) как ПричиныОтклонения.Объект
    ЗагружаемыйОбъект.Наименование = ПричинаОтклонения.Наименование
    
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ЗагружаемыйОбъект, ПричинаОтклонения.Идентификатор), Сервисы.ИнструментыМенеджераОбъекта)           
;

@ВПодсистеме
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> ПричиныОтклонения.ПолучитьСсылку(Ууид))
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"candidateRejectionReasons": ИсходящиеДанныеВJson(Ссылки, Сервисы)}
;

метод ИсходящиеДанныеВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеОбъектов(Ссылки)
        Данные.Добавить(ДанныеОбъектаВJson_V2_0(КлючИЗначение.Значение, Сервисы))
    ;
    возврат Данные
;

метод ДанныеОбъектов(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<ПричиныОтклонения.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Данные: Соответствие<ПричиныОтклонения.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>> 
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Наименование
        Из
            ПричиныОтклонения
        Где
            Ссылка В (%Ссылки)        
    }
    исп Результат = Запрос.Выполнить() 
    для СтрокаРезультата из Результат
        знч ДанныеОбъекта = новый Соответствие<Строка, Объект?>()
        ДанныеОбъекта.ВставитьВсе(МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(СтрокаРезультата, Результат))
        Данные.Вставить(
            СтрокаРезультата.Ссылка,
            ДанныеОбъекта
        )
    ;
    
    возврат Данные    
;

метод ДанныеОбъектаВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ПричинаОтклонения_2_0
    пер ПричинаОтклонения = новый ПричинаОтклонения_2_0(
        Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Ссылка"] как ПричиныОтклонения.Ссылка),
        ДанныеОбъекта["Наименование"] как Строка)  
    возврат ПричинаОтклонения        
;

// Конец JSON

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: ПричиныОтклонения.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Ссылка, Истина)
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, Неопределено, ХарактерыИзменений.Изменение)
    ;
;

@ВПодсистеме
метод ПослеУдаленияДополнение(Ссылка: ПричиныОтклонения.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьУдаление(Ссылка)
    ;
;