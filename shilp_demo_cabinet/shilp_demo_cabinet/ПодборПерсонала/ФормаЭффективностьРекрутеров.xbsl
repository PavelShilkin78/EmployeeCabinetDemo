импорт ФизическиеЛица
импорт ОбщиеСтандартные

@НаКлиенте @НаСервере
структура СтатистикаРекрутера
    обз знч Вакансии: Множество<СтатистикаВакансии>
    обз знч РекрутерФИО: Строка
    пер ЗакрытоВакансий: Число
    пер КоличествоШтатныхЕдиниц: Число
    пер ЗакрытоШтатныхЕдиниц: Число
    пер ЗакрытыхСОпозданием: Число
    пер СуммаСроковЗакрытия: Число
    пер ВсегоКандидатов: Число
    пер КандидатовИзОткликов: Число
    пер КандидатовНайденых: Число
    
    метод ДобавитьСтатистикуВакансии(Вакансия: Вакансии.Ссылка, Статистика: СтатистикаВакансии)
        Вакансии.Добавить(Статистика)
        КоличествоШтатныхЕдиниц += Статистика.КоличествоШтатныхЕдиниц
        ЗакрытоШтатныхЕдиниц += Статистика.ЗакрытоШтатныхЕдиниц
        ВсегоКандидатов += Статистика.ВсегоКандидатов
        КандидатовИзОткликов += Статистика.КандидатовИзОткликов
        КандидатовНайденых += Статистика.КандидатовНайденых()
        
        пер ДатаФактическогоЗакрытия = Статистика.ФактическоеЗакрытие
        если ДатаФактическогоЗакрытия == Неопределено
            ДатаФактическогоЗакрытия = МенеджерДат.ТекущаяДатаВремя().ВДатаВремя(ЧасовойПояс{UTC}).Дата
        ;
        если Статистика.ПлановоеЗакрытие < ДатаФактическогоЗакрытия
            ЗакрытыхСОпозданием += 1
        ;
        если Статистика.Статус == СтатусВакансии.Закрыта
            ЗакрытоВакансий += 1
            Статистика.СрокЗакрытия = новый Число((ДатаФактическогоЗакрытия - Статистика.ВакансияСоздана).Представление("д"))
            СуммаСроковЗакрытия += Статистика.СрокЗакрытия
        ;
    ;
    
    метод СреднийСрокЗакрытия(): Число
        если ЗакрытоВакансий > 0
            возврат (СуммаСроковЗакрытия/ЗакрытоВакансий).Округлить(0)
        ;
        возврат 0
    ;
    
    метод КоличествоВакансий(): Число
        возврат Вакансии.Размер()
    ;
;

@НаКлиенте @НаСервере
структура СтатистикаВакансии
    обз знч Номер: Строка
    обз знч Наименование: Строка
    обз знч Подразделение: Строка
    обз знч Статус: СтатусВакансии
    обз знч ВсегоКандидатов: Число
    обз знч КандидатовИзОткликов: Число
    пер ПлановоеЗакрытие: Дата
    пер ВакансияСоздана: Дата
    пер ФактическоеЗакрытие: Дата?
    пер КоличествоШтатныхЕдиниц: Число
    пер ЗакрытоШтатныхЕдиниц: Число
    пер СрокЗакрытия: Число
    
    метод УстановитьСроки(Создана: Момент, ФактЗакрытие: Момент?, Плановое: Дата)
        ПлановоеЗакрытие = Плановое
        ВакансияСоздана = Создана.ВДатаВремя(ЧасовойПояс{UTC}).Дата
        если ФактЗакрытие != Неопределено
            ФактическоеЗакрытие = ФактЗакрытие!.ВДатаВремя(ЧасовойПояс{UTC}).Дата
        ;
    ;

    метод КорверсияПоКандидатам(): Число
        если ВсегоКандидатов > 0
            возврат (ЗакрытоШтатныхЕдиниц/ВсегоКандидатов * 100).Округлить(0)
        ;
        возврат 0
    ;
    
    метод КандидатовНайденых(): Число
        если ВсегоКандидатов > КандидатовИзОткликов
            возврат ВсегоКандидатов - КандидатовИзОткликов
        ;
        возврат 0
    ;    
    
    метод ДатаФактическогоЗакрытия(): Строка
        если ФактическоеЗакрытие == Неопределено
            возврат "-"
        ;
        возврат ФактическоеЗакрытие.Представление("дд-ММ-гггг")
    ;
;

метод КомпонентыОтчетов(): Множество<ПросмотрОтчета>
    знч ПанельОтчетов = новый Множество<ПросмотрОтчета>()
    ПанельОтчетов.Добавить(Компоненты.ОтчетЭффективностьРекрутеровИтоги)
    ПанельОтчетов.Добавить(Компоненты.ОтчетЭффективностьРекрутеровПоВакансиям)
    возврат ПанельОтчетов
;

метод КомандаВыгрузитьОтчет(Команда: ОбычнаяКоманда)
    знч Фильтр = Компоненты.КомпонетФильтрОтчетов
    знч ОтборОт = (Фильтр.ПериодОтбора == Неопределено) ? Неопределено : Фильтр.ПериодОтбора.От
    знч ОтборДо = (Фильтр.ПериодОтбора == Неопределено) ? Неопределено : Фильтр.ПериодОтбора.До

    знч ФайлВыгрузки = ВыгрузитьВФормате(Фильтр.Рекрутер, Фильтр.Вакансия, ОтборОт, ОтборДо)
    ВыгрузкаФайлов.НачатьВыгрузку(ФайлВыгрузки, "ЭффективностьРекрутеров${Дата.Сейчас()}.xls") 
;

@НаСервере @ДоступноСКлиента
статический метод ВыгрузитьВФормате(Рекрутер: ФизическиеЛица.Ссылка?, Вакансия: Вакансии.Ссылка?, ПериодОт: Дата?, ПериодДо: Дата?): ДвоичныйОбъект.Ссылка
    пер БайтыТаблицы = СформироватьОтчет(Рекрутер, Вакансия, ПериодОт, ПериодДо).ЭкспортироватьВБайты(ФорматЭкспортаТабличногоДокумента.Xls)
    
    пер СвойстваДвоичногоОбъекта = новый ДвоичныйОбъект.Свойства("ПричиныОтказа").Временные()
    знч Результат = ОбъектноеХранилище.ЗагрузитьИзБайт(Байты = БайтыТаблицы, Свойства = СвойстваДвоичногоОбъекта)
    возврат Результат.Ссылка
;

@НаСервере
статический метод СформироватьОтчет(Рекрутер: ФизическиеЛица.Ссылка?, Вакансия: Вакансии.Ссылка?, ПериодОт: Дата?, ПериодДо: Дата?): ТабличныйДокумент
    знч СтатистикаПоРекрутерам = СтатистикаЭффективностиРекрутеров(Рекрутер, Вакансия, ПериодОт, ПериодДо)
    исп МакетДанные = Ресурс{МакетСтатистикаЭффективностиРекрутеров.mxl}.ОткрытьПотокЧтения()
    знч Макет = ТабличныйДокумент.Прочитать(МакетДанные)
    
    знч ШапакаТаблицы = Макет.ПолучитьОбласть("ШапакаТаблицы")
    знч Шапка = Макет.ПолучитьОбласть("Шапка")
    знч СтрокаРекрутер = Макет.ПолучитьОбласть("СтрокаРекрутер")
    знч СтрокаВакансия = Макет.ПолучитьОбласть("СтрокаВакансия")
    знч Итоги = Макет.ПолучитьОбласть("Итоги")
    
    пер ТабличныйДокумент = новый ТабличныйДокумент()
    знч Писатель = ТабличныйДокумент.Запись
    знч ВакансииЗаголовок: Строка = (Вакансия == Неопределено) ? "Все" : МенеджерСущности.ЗначениеРеквизитаОбъекта(Вакансия,"Наименование")
    знч ПериодПредставление = (ПериодОт != Неопределено)
        ? ПериодОт.Представление("дд.ММ.гггг") + " - " + ПериодДо.Представление("дд.ММ.гггг")
        : "не задан"
    Писатель.ВывестиВертикально(
        Шапка.ВВыводимуюОбласть().ЗаполнитьПараметры({"ДатаВремя": ДатаВремя.Сейчас().Представление()})
        .ЗаполнитьПараметры({"Вакансия": ВакансииЗаголовок})
        .ЗаполнитьПараметры({"Период": ПериодПредставление})
    )
    Писатель.ВывестиВертикально(
        ШапакаТаблицы.ВВыводимуюОбласть()
    )
    пер ИтогоВакансий = 0
    пер ИтогоКолШтатныхЕдиниц = 0
    пер ИтогоЗакрыто = 0
    пер ИтогоЗакрытоШтатныхЕдиниц = 0
    пер СуммаСрокиЗакрытия = 0
    пер ИтогоКандидатовИзОткликов = 0
    пер ИтогоВсехКандидатов = 0
    пер ИтогоПросроченных = 0
    
    для СтатистикаРекрутера из СтатистикаПоРекрутерам
        знч КоличествоВакансий = СтатистикаРекрутера.КоличествоВакансий()
        если КоличествоВакансий == 0
            продолжить
        ;
        ИтогоПросроченных += СтатистикаРекрутера.ЗакрытыхСОпозданием
        ИтогоВакансий += КоличествоВакансий
        ИтогоЗакрыто += СтатистикаРекрутера.ЗакрытоВакансий
        ИтогоКолШтатныхЕдиниц += СтатистикаРекрутера.КоличествоШтатныхЕдиниц
        ИтогоЗакрытоШтатныхЕдиниц += СтатистикаРекрутера.ЗакрытоШтатныхЕдиниц
        ИтогоКандидатовИзОткликов += СтатистикаРекрутера.КандидатовИзОткликов
        ИтогоВсехКандидатов += СтатистикаРекрутера.ВсегоКандидатов
        
        Писатель.ВывестиВертикально(
            СтрокаРекрутер.ВВыводимуюОбласть()
            .ЗаполнитьПараметры({"Рекрутер": СтатистикаРекрутера.РекрутерФИО})
            .ЗаполнитьПараметры({"КолВакансий": КоличествоВакансий})
            .ЗаполнитьПараметры({"КолШтатныхЕдиниц": СтатистикаРекрутера.КоличествоШтатныхЕдиниц})
            .ЗаполнитьПараметры({"КолЗакрыто": СтатистикаРекрутера.ЗакрытоВакансий})
            .ЗаполнитьПараметры({"ЗакрытоШтатныхЕдиниц": СтатистикаРекрутера.ЗакрытоШтатныхЕдиниц})
            .ЗаполнитьПараметры({"Просрочено": (СтатистикаРекрутера.ЗакрытыхСОпозданием / КоличествоВакансий * 100).Округлить(0)})
            .ЗаполнитьПараметры({"СреднийСрокЗакрытия": СтатистикаРекрутера.СреднийСрокЗакрытия()})
            .ЗаполнитьПараметры({"КандидатовИзОткликов": СтатистикаРекрутера.КандидатовИзОткликов})
            .ЗаполнитьПараметры({"КандидатовИзПоиска": СтатистикаРекрутера.КандидатовНайденых})
            .ЗаполнитьПараметры({"ВсегоКандидатов": СтатистикаРекрутера.ВсегоКандидатов})
        )
        для СтатистикаВакансии из СтатистикаРекрутера.Вакансии       
            СуммаСрокиЗакрытия += СтатистикаВакансии.СрокЗакрытия
            
            Писатель.ВывестиВертикально(
                СтрокаВакансия.ВВыводимуюОбласть()
                .ЗаполнитьПараметры({"Вакансия": СтатистикаВакансии.Наименование})
                .ЗаполнитьПараметры({"Номер": СтатистикаВакансии.Номер})
                .ЗаполнитьПараметры({"Подразделение": СтатистикаВакансии.Подразделение})
                .ЗаполнитьПараметры({"КолВакансий": 1})
                .ЗаполнитьПараметры({"КолШтатныхЕдиниц": СтатистикаВакансии.КоличествоШтатныхЕдиниц})
                .ЗаполнитьПараметры({"ЗакрытоШтатныхЕдиниц": СтатистикаВакансии.ЗакрытоШтатныхЕдиниц})
                .ЗаполнитьПараметры({"Статус": СтатистикаВакансии.Статус.Представление()})
                .ЗаполнитьПараметры({"ДатаСоздания": СтатистикаВакансии.ВакансияСоздана.Представление("дд-ММ-гггг")})
                .ЗаполнитьПараметры({"ДатаПлановогоЗакрытия": СтатистикаВакансии.ПлановоеЗакрытие.Представление("дд-ММ-гггг")})
                .ЗаполнитьПараметры({"ДатаФактическогоЗакрытия": СтатистикаВакансии.ДатаФактическогоЗакрытия()})
                .ЗаполнитьПараметры({"СрокЗакрытия": СтатистикаВакансии.СрокЗакрытия})
                .ЗаполнитьПараметры({"Конверсия": СтатистикаВакансии.КорверсияПоКандидатам()})
                .ЗаполнитьПараметры({"КандидатовИзОткликов": СтатистикаВакансии.КандидатовИзОткликов})
                .ЗаполнитьПараметры({"КандидатовИзПоиска": СтатистикаВакансии.КандидатовНайденых()})
                .ЗаполнитьПараметры({"ВсегоКандидатов": СтатистикаВакансии.ВсегоКандидатов})
            )
        ;
    ;
    Писатель.ВывестиВертикально(
        Итоги.ВВыводимуюОбласть()
        .ЗаполнитьПараметры({"КолВакансий": ИтогоВакансий})
        .ЗаполнитьПараметры({"ИтогоЗакрыто": ИтогоЗакрыто})
        .ЗаполнитьПараметры({"КолШтатныхЕдиниц": ИтогоКолШтатныхЕдиниц})
        .ЗаполнитьПараметры({"ЗакрытоШтатныхЕдиниц": ИтогоЗакрытоШтатныхЕдиниц})
        .ЗаполнитьПараметры({"СреднийСрокЗакрытия": (ИтогоЗакрыто != 0 ? СуммаСрокиЗакрытия / ИтогоЗакрыто : 0).Округлить()})
        .ЗаполнитьПараметры({"КандидатовИзОткликов": ИтогоКандидатовИзОткликов})
        .ЗаполнитьПараметры({"КандидатовИзПоиска": ИтогоВсехКандидатов - ИтогоКандидатовИзОткликов})
        .ЗаполнитьПараметры({"ВсегоКандидатов": ИтогоВсехКандидатов})
        .ЗаполнитьПараметры({"ПросроченоИтоги": (ИтогоВакансий != 0 ? (ИтогоПросроченных / ИтогоВакансий * 100) : 0).Округлить()})
    )
    возврат ТабличныйДокумент
;

@НаСервере
статический метод СтатистикаЭффективностиРекрутеров(ФизЛицоРекрутера: ФизическиеЛица.Ссылка?, Вакансия: Вакансии.Ссылка?, ПериодОт: Дата?, 
        ПериодДо: Дата?): ЧитаемаяКоллекция<СтатистикаРекрутера>
    знч Запрос = Запрос{
        Выбрать
            ДанныеЭффективности.Номер как Номер,
            ДанныеЭффективности.Подразделение.Наименование.ЗаменитьNull("") как Подразделение,
            ДанныеЭффективности.Рекрутер как Рекрутер,
            ДанныеЭффективности.Рекрутер.Наименование.ЗаменитьNull("") как РекрутерФИО,
            ДанныеЭффективности.Вакансия как Вакансия,
            ДанныеЭффективности.Вакансия.Наименование.ЗаменитьNull("") как НаименованиеВакансии,
            ДанныеЭффективности.Статус как Статус,
            Количество(ДанныеЭффективности.РассматриваемыйКандидат) как КолРассматриваемыйКандидат,
            ДанныеЭффективности.ДатаСозданияВакансии как ДатаСозданияВакансии,
            ДанныеЭффективности.ДатаФактическогоЗакрытия.ЗаменитьNull(Неопределено) как ДатаФактическогоЗакрытия,
            ДанныеЭффективности.ПлановаяДатаЗакрытия как ПлановаяДатаЗакрытия,
            Максимум(ДанныеЭффективности.КолОткликовВакансии) как КолОткликовВакансии,
	        Максимум(ДанныеЭффективности.КоличествоШтатныхЕдиниц) как КоличествоШтатныхЕдиниц,
            Сумма(ДанныеЭффективности.ЗакрытоШтатныхЕдиниц) как ЗакрытоШтатныхЕдиниц
        из
            ИтогиЭффективностиРекрутеровПоКандидатам(%ФизЛицоРекрутера, %Вакансия, Неопределено,  %ПериодОт, %ПериодДо) как ДанныеЭффективности
        Сгруппировать По
            ДанныеЭффективности.Номер,
            ДанныеЭффективности.Подразделение,
            ДанныеЭффективности.Рекрутер,
            ДанныеЭффективности.Вакансия,
            ДанныеЭффективности.Статус,
            ДанныеЭффективности.ДатаФактическогоЗакрытия,
            ДанныеЭффективности.ПлановаяДатаЗакрытия,
            ДанныеЭффективности.ДатаСозданияВакансии
    }
    исп Результат = Запрос.Выполнить()
    знч СтатистикаРекрутеров = новый Соответствие<ФизическиеЛица.Ссылка, СтатистикаРекрутера>()
    для СтрокаРезультата из Результат
        знч Рекрутер = СтрокаРезультата.Рекрутер
        если не СтатистикаРекрутеров.СодержитКлюч(Рекрутер)
            знч СтатистикаРекрутера = новый СтатистикаРекрутера(
                Вакансии = новый Множество<СтатистикаВакансии>(),
                РекрутерФИО = СтрокаРезультата.РекрутерФИО
            )
            СтатистикаРекрутеров.Вставить(Рекрутер, СтатистикаРекрутера)
        ;
        знч СтатистикаВакансии = новый СтатистикаВакансии(
            Номер = СтрокаРезультата.Номер,
            Наименование = СтрокаРезультата.НаименованиеВакансии,
            Подразделение = СтрокаРезультата.Подразделение,
            КоличествоШтатныхЕдиниц = СтрокаРезультата.КоличествоШтатныхЕдиниц,
            ЗакрытоШтатныхЕдиниц = СтрокаРезультата.ЗакрытоШтатныхЕдиниц,
            Статус = СтрокаРезультата.Статус,
            КандидатовИзОткликов = СтрокаРезультата.КолОткликовВакансии,
            ВсегоКандидатов = СтрокаРезультата.КолРассматриваемыйКандидат
        )
        СтатистикаВакансии.УстановитьСроки(СтрокаРезультата.ДатаСозданияВакансии, СтрокаРезультата.ДатаФактическогоЗакрытия, СтрокаРезультата.ПлановаяДатаЗакрытия)
        СтатистикаРекрутеров[Рекрутер].ДобавитьСтатистикуВакансии(СтрокаРезультата.Вакансия, СтатистикаВакансии)
    ;
    возврат СтатистикаРекрутеров.Значения()
;