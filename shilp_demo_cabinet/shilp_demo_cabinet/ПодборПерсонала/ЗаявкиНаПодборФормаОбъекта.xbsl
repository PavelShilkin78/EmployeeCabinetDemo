импорт ИнтерфейсныеКомпонентыСтандартные
импорт Компания
импорт Компания::Согласования
импорт УправлениеПерсоналом
импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт КонтрольДоступа
импорт ЛичныеКабинетыПользователей

конст СООБЩЕНИЕ_ОБЯЗАТЕЛЬНОЕ_ПОЛЕ = "Обязательно для заполнения"

@ВПроекте
@Реализация
метод Заголовок(): Строка
    возврат ДополнительныеДанныеФормы.ЗаголовокФормы
;

@ВПроекте
@Реализация
метод КомандыСоздания(): Команда|ГруппаКомандногоИнтерфейса<Команда>|Неопределено
    возврат Неопределено
;

@ВПроекте
@Реализация
метод ДополнительныеКоманды(): ФрагментКомандногоИнтерфейса<Команда>?
    возврат Неопределено
;

@ВПроекте
@Реализация
метод ОсновнаяКоманда(): Команда?
    возврат Неопределено
;

@ВПроекте
@Реализация
метод ОбычныеКоманды(): ФрагментКомандногоИнтерфейса<Команда>?
    возврат ОбычныеКомандыФормы
;

@ВПодсистеме
@НаКлиенте @НаСервере
структура ДополнительныеДанныеФормы
    знч Статус: СтатусыЗаявкиНаПодбор
    знч ДанныеСогласующего: Согласования.ДанныеСогласующего?
    знч Согласующие: Массив<ФизическиеЛица.Ссылка>
    знч РежимСогласования: Булево
    знч РуководителиПодбора: Массив<ФизическиеЛица.Ссылка>
    знч СрочностьПоУмолчанию: СрочностьВакансии.Ссылка?
    пер ПодразделенияРуководителя: Множество<СтруктураПредприятия.Ссылка>
    пер ДолжностиПодразделения: Массив<Должности.Ссылка>
    знч ПричинаОтклонения: Строка
    знч ДоступныеДействия: Множество<ЗаявкиНаПодбор.ДоступныеДействия>
    знч ЗаголовокФормы: Строка
;

@НаСервере
статический метод ПричинаОтклонения(Ссылка: ЗаявкиНаПодбор.Ссылка, Статус: СтатусыЗаявкиНаПодбор): Строка
    исп РезультатПричиныОтклонения = Запрос{
        Выбрать Первые 1
            УчастникСогласованияСтрокой, 
            Комментарий
        Из
            СогласованияДокументов
        Где 
            Документ == %Ссылка
            И Результат == %{РезультатыСогласования.Отказано}   
        }.Выполнить()
    
    знч ПричиныОтклонения = РезультатПричиныОтклонения.ЕдинственныйИлиУмолчание()
    если ПричиныОтклонения != Неопределено
        пер Комментарий = ПричиныОтклонения?.Комментарий ?? ""
        если Комментарий.Пусто()
            Комментарий = "не указана"
        ; 
        возврат "Заявку отклонил %{ПричиныОтклонения.УчастникСогласованияСтрокой}. Причина отклонения: %Комментарий."
    иначе
        возврат ""
    ;
;

@НаСервере @ДоступноСКлиента
статический метод ПрочитатьДополнительныеДанныеФормы(
        Ссылка: ЗаявкиНаПодбор.Ссылка?, 
        МаршрутСогласования: ПравилаСогласования.Ссылка?,
        Автор: ФизическиеЛица.Ссылка?,
        Инициатор: ФизическиеЛица.Ссылка?,
        Подразделение: СтруктураПредприятия.Ссылка?
    ): ДополнительныеДанныеФормы 

    знч ТекущееФизическоеЛицо = ПользователиСистемы.ТекущееФизическоеЛицо()
    пер Статус: СтатусыЗаявкиНаПодбор = СтатусыЗаявкиНаПодбор.Черновик
    пер РежимСогласования = Ложь
    знч Согласующие: Массив<ФизическиеЛица.Ссылка>
    пер ДанныеСогласующего: Согласования.ДанныеСогласующего?
    пер ПричинаОтклонения: Строка
    пер ДоступныеДействия:Множество<ЗаявкиНаПодбор.ДоступныеДействия>
    если Ссылка != Неопределено 
        Статус = СтатусыЗаявокНаПодбор.Получить(Ссылка)
        ПричинаОтклонения = ПричинаОтклонения(Ссылка, Статус)
        ДоступныеДействия = ЗаявкиНаПодбор.ДоступныеДействия(Ссылка, Статус, Автор)
        
        если МаршрутСогласования != Неопределено          
            знч Согласовавшие: Массив<ФизическиеЛица.Ссылка>
            для Элемент из Согласования.Согласующие(Ссылка).Согласующие
                если Элемент.УчастникСогласования != Неопределено
                    и Элемент.Результат == РезультатыСогласования.Согласовано
                    
                    Согласовавшие.Добавить(Элемент.УчастникСогласования)
                ;
            ;
        
            если ТекущееФизическоеЛицо != Неопределено
                пер НомерШагаСогласования = 1
                пер ТекущиеСогласующие = Согласования.ТекущиеСогласующие(Ссылка, МаршрутСогласования)
                для ТекущийСогласующий из ТекущиеСогласующие 
                    если ТекущийСогласующий.Согласующий == ТекущееФизическоеЛицо 
                        если Статус == СтатусыЗаявкиНаПодбор.Согласование
                            РежимСогласования = Истина
                        ;
                        НомерШагаСогласования = ТекущийСогласующий.НомерШага
                    ;
                ;
                ДанныеСогласующего = Согласования.ДанныеСогласующего(
                        ТекущееФизическоеЛицо,
                        МаршрутСогласования,
                        НомерШагаСогласования,
                        Согласовавшие) 
                
                знч ВсеСогласующие = ПравилаСогласования.СогласующиеПравилаСогласования(МаршрутСогласования)     
                если РежимСогласования 
                    Согласующие.Добавить(ТекущееФизическоеЛицо) 
                    ВсеСогласующие.Удалить(ТекущееФизическоеЛицо)
                    Согласующие.ДобавитьВсе(ВсеСогласующие)
                иначе         
                    Согласующие.ДобавитьВсе(ВсеСогласующие) 
                ;
            ;
        ;
    ;
                
    возврат новый ДополнительныеДанныеФормы(
        Статус = Статус,
        РуководителиПодбора = новый Массив<ФизическиеЛица.Ссылка>(КонтрольДоступа.ФизическиеЛицаПоПолномочию(ПодборПерсонала.ПолномочиеЗапускСогласованияЗаявкиНаПодбор())),
        СрочностьПоУмолчанию = СрочностьВакансии.СрочностьПоУмолчанию(),
        ПричинаОтклонения = ПричинаОтклонения,
        Согласующие = Согласующие,
        ДанныеСогласующего = ДанныеСогласующего,
        ПодразделенияРуководителя = ПодразделенияРуководителя(Инициатор),
        ДолжностиПодразделения = ДолжностиПодразделения(Подразделение),
        ДоступныеДействия = ДоступныеДействия,
        ЗаголовокФормы = ЗаявкиНаПодбор.ПредставлениеЗаявкиНаПодбор(Ссылка))
;

@ВПроекте
статический метод Показать(Ссылка: ЗаявкиНаПодбор.Ссылка? = Неопределено, ФормаВладелец: ЗамещаемаяФорма? = Неопределено)
    знч Форма = новый ЗаявкиНаПодборФормаОбъекта(КлючОбъекта = Ссылка)    
    если ФормаВладелец == Неопределено
        Форма.Открыть()
    иначе
        ИнтерфейсныеКомпоненты.ОткрытьЗамещающуюФорму(ФормаВладелец, Форма)
    ;
;

@ВПроекте
статический метод ПоказатьКопию(КлючИсточникаКопирования: ЗаявкиНаПодбор.Ссылка, ФормаВладелец: ЗамещаемаяФорма? = Неопределено)
    знч Форма = новый ЗаявкиНаПодборФормаОбъекта(КлючИсточникаКопирования = КлючИсточникаКопирования)    
    если ФормаВладелец == Неопределено
        Форма.Открыть()
    иначе
        ИнтерфейсныеКомпоненты.ОткрытьЗамещающуюФорму(ФормаВладелец, Форма)
    ;
;

метод УстановитьДоступностьФормы()
    выбор ДополнительныеДанныеФормы.Статус
    когда Согласование, Вакансия
        ТолькоЧтение = Истина
    иначе  
        ТолькоЧтение = Ложь
    ;
;

метод ЗаполнитьПоУмолчанию()
    если Объект.ЭтоНовый()
        Объект.Автор = КонтрольДоступа.ПараметрыСеанса().ФизлицоТекущегоПользователя
        если Компания.ПараметрыСеанса().ТекущийПользовательРуководитель
            Объект.Инициатор = Объект.Автор
        ;
    ;
;

метод ЗаполнитьСрочностьПоУмолчанию()
    если Объект.ЭтоНовый()
        Объект.Срочность = ДополнительныеДанныеФормы.СрочностьПоУмолчанию
    ;
;

метод ЗаполнитьПодразделениеПоУмолчанию()
    если Объект.ЭтоНовый() 
        ОбновитьПодразделенияРуководителя()
        ОбновитьДолжностиПодразделения()
    ;
;

@Обработчик
метод ПослеЧтения()
    ЗаполнитьПоУмолчанию()
    ДополнительныеДанныеФормы = ПрочитатьДополнительныеДанныеФормы(КлючОбъекта, Объект.МаршрутСогласования, Объект.Автор, Объект.Инициатор, Объект.Подразделение)
    ЗаполнитьСрочностьПоУмолчанию()
    ЗаполнитьПодразделениеПоУмолчанию()
    Компоненты.НаселенныеПункты.УстановитьЗначения(Объект.НаселенныеПункты)
    Компоненты.КлючевыеНавыки.УстановитьЗначения(Объект.КлючевыеНавыки)
    ИнтерфейсныеКомпоненты.ИнициализироватьПодчиненныеКомпоненты(Компоненты)
    УстановитьДоступностьФормы()
;

@Обработчик
метод ПередЗаписьюОбъекта()
    если Объект.Автор == Неопределено
        Объект.Автор = КонтрольДоступа.ПараметрыСеанса().ФизлицоТекущегоПользователя
    ;
    Объект.КлючевыеНавыки.Очистить()
    для Элемент из Компоненты.КлючевыеНавыки.ПолучитьЗначения()
        Объект.КлючевыеНавыки.Добавить(Элемент как КлючевыеНавыки.Ссылка)
    ;
;

метод НаселенныеПунктыПриИзменении(Источник: ПолеВыбораЗначенийИзСписка, Событие: СобытиеСДанными<Массив<Представляемое>>)
    Объект.НаселенныеПункты.Очистить()
    для Элемент из Компоненты.НаселенныеПункты.ПолучитьЗначения() 
        Объект.НаселенныеПункты.Добавить(Элемент как НаселенныеПункты.Ссылка)
    ;    
;

метод КомандаСохранитьВидимость(): Булево
    если ДополнительныеДанныеФормы.ДоступныеДействия.Содержит(ЗаявкиНаПодбор.ДоступныеДействия.Редактирование)
        выбор ДополнительныеДанныеФормы.Статус
        когда Черновик, Доработка
            возврат Истина
        когда Проверка
            возврат Объект.Автор != ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
        иначе
            возврат Ложь
        ;
    иначе 
        возврат ЭтоНовый()
    ;
;

метод КомандаОтправитьНаПроверкуВидимость(): Булево
    возврат ДополнительныеДанныеФормы.ДоступныеДействия.Содержит(ЗаявкиНаПодбор.ДоступныеДействия.ОтправкаНаПроверку)
        или (ЭтоНовый() 
                и ДополнительныеДанныеФормы.ДоступныеДействия
                    .СодержитВсе([ЗаявкиНаПодбор.ДоступныеДействия.ОтправкаНаСогласование, ЗаявкиНаПодбор.ДоступныеДействия.СозданиеВакансии]))
;

метод КомандаОтправитьНаСогласованиеВидимость(): Булево
    возврат ДополнительныеДанныеФормы.ДоступныеДействия.Содержит(ЗаявкиНаПодбор.ДоступныеДействия.ОтправкаНаСогласование)
;

метод КомандаСоздатьВакансиюВидимость(): Булево
    возврат ДополнительныеДанныеФормы.ДоступныеДействия.Содержит(ЗаявкиНаПодбор.ДоступныеДействия.СозданиеВакансии)
;

метод КомандаВернутьНаДоработкуВидимость(): Булево
    возврат ДополнительныеДанныеФормы.ДоступныеДействия.Содержит(ЗаявкиНаПодбор.ДоступныеДействия.ВозвратНаДоработку)
;

метод КомандаСогласованияВидимость(): Булево
    выбор ДополнительныеДанныеФормы.Статус
    когда Согласование
        возврат ДополнительныеДанныеФормы.РежимСогласования
    иначе
        возврат Ложь
    ;
;

метод КомандаУдалитьВидимость(): Булево
    возврат ДополнительныеДанныеФормы.ДоступныеДействия.Содержит(ЗаявкиНаПодбор.ДоступныеДействия.Удаление)
; 

метод ЗаписатьСОбработкойОшибок(НовыйСтатус: СтатусыЗаявкиНаПодбор? = Неопределено): Булево
    
    ПредупреждениеОсновнаяИнформация = Ложь
    ПредупреждениеОпытИТребования = Ложь
    ПредупреждениеУсловияРаботы = Ложь
    
    ИнтерфейсныеКомпоненты.СброситьРезультатПроверкиДанных(Компоненты)
    
    попытка
        ПараметрыЗаписи.Статус = НовыйСтатус
        Записать()
        ЗаявкаНаПодборПослеИзменения.Оповестить(КлючОбъекта)
        возврат Истина
    поймать Исключение: ПроверкаЗаполнения.ИсключениеПроверкиЗаполнения
        знч ОбработкаОшибок: Соответствие<Перечисление, ()->ничто> = {
            ЗаявкиНаПодбор.Объект.ОшибкиПроверкиЗаполнения.ИнициаторНеЗаполнено: метод() ->
                ИнтерфейсныеКомпоненты.УстановитьСообщениеОшибка(Компоненты.Инициатор, СООБЩЕНИЕ_ОБЯЗАТЕЛЬНОЕ_ПОЛЕ)
                ПредупреждениеОсновнаяИнформация = Истина
            ;,
            ЗаявкиНаПодбор.Объект.ОшибкиПроверкиЗаполнения.ПодразделениеНеЗаполнено: метод() ->
                ИнтерфейсныеКомпоненты.УстановитьСообщениеОшибка(Компоненты.Подразделение, СООБЩЕНИЕ_ОБЯЗАТЕЛЬНОЕ_ПОЛЕ)
                ПредупреждениеОсновнаяИнформация = Истина
            ;,
            ЗаявкиНаПодбор.Объект.ОшибкиПроверкиЗаполнения.ДолжностьНеЗаполнена: метод() ->
                ИнтерфейсныеКомпоненты.УстановитьСообщениеОшибка(Компоненты.Должность, СООБЩЕНИЕ_ОБЯЗАТЕЛЬНОЕ_ПОЛЕ)
                ПредупреждениеОсновнаяИнформация = Истина
            ;,
            ЗаявкиНаПодбор.Объект.ОшибкиПроверкиЗаполнения.НекорректноеКоличествоШтатныхЕдиниц: метод() ->
                ИнтерфейсныеКомпоненты.УстановитьСообщениеОшибка(Компоненты.КоличествоШтатныхЕдиниц, СООБЩЕНИЕ_ОБЯЗАТЕЛЬНОЕ_ПОЛЕ)
                ПредупреждениеОсновнаяИнформация = Истина
            ;, 
            ЗаявкиНаПодбор.Объект.ОшибкиПроверкиЗаполнения.ОпытРаботыНеЗаполнен: метод() ->
                ИнтерфейсныеКомпоненты.УстановитьСообщениеОшибка(Компоненты.ОпытРаботы, СООБЩЕНИЕ_ОБЯЗАТЕЛЬНОЕ_ПОЛЕ)
                ПредупреждениеОпытИТребования = Истина
            ;,
            ЗаявкиНаПодбор.Объект.ОшибкиПроверкиЗаполнения.ТребованияНеЗаполнено: метод() ->
                ИнтерфейсныеКомпоненты.УстановитьСообщениеОшибка(Компоненты.Требования, СООБЩЕНИЕ_ОБЯЗАТЕЛЬНОЕ_ПОЛЕ)
                ПредупреждениеОпытИТребования = Истина
            ;,
            ЗаявкиНаПодбор.Объект.ОшибкиПроверкиЗаполнения.ОбязанностиНеЗаполнены: метод() ->
                ИнтерфейсныеКомпоненты.УстановитьСообщениеОшибка(Компоненты.Обязанности, СООБЩЕНИЕ_ОБЯЗАТЕЛЬНОЕ_ПОЛЕ)
                ПредупреждениеОпытИТребования = Истина
            ;,
            ЗаявкиНаПодбор.Объект.ОшибкиПроверкиЗаполнения.УсловияРаботыНеЗаполнены: метод() ->
                ИнтерфейсныеКомпоненты.УстановитьСообщениеОшибка(Компоненты.Условия, СООБЩЕНИЕ_ОБЯЗАТЕЛЬНОЕ_ПОЛЕ)
                ПредупреждениеУсловияРаботы = Истина
            ;,
            ЗаявкиНаПодбор.Объект.ОшибкиПроверкиЗаполнения.ГрафикРаботыНеЗаполнен: метод() ->
                ИнтерфейсныеКомпоненты.УстановитьСообщениеОшибка(Компоненты.ГрафикРаботы, СООБЩЕНИЕ_ОБЯЗАТЕЛЬНОЕ_ПОЛЕ)
                ПредупреждениеУсловияРаботы = Истина
            ;,
            ЗаявкиНаПодбор.Объект.ОшибкиПроверкиЗаполнения.ТипЗанятостиНеЗаполнен: метод() ->
                ИнтерфейсныеКомпоненты.УстановитьСообщениеОшибка(Компоненты.ТипЗанятости, СООБЩЕНИЕ_ОБЯЗАТЕЛЬНОЕ_ПОЛЕ)
                ПредупреждениеУсловияРаботы = Истина
            ;,
            ЗаявкиНаПодбор.Объект.ОшибкиПроверкиЗаполнения.НаселенныйПунктНеЗаполнен: метод() ->
                ИнтерфейсныеКомпоненты.УстановитьСообщениеОшибка(Компоненты.НаселенныеПункты, СООБЩЕНИЕ_ОБЯЗАТЕЛЬНОЕ_ПОЛЕ)
                ПредупреждениеУсловияРаботы = Истина
            ;,
            ЗаявкиНаПодбор.Объект.ОшибкиПроверкиЗаполнения.НекорректноеЗначениеЗаработнойПлаты: метод() ->
                Компоненты.ЗаработнаяПлата.ПроверитьЗаполнение()
            ;
        }
        ПроверкаЗаполнения.ОбработатьОшибкиЗаполнения(Исключение, ОбработкаОшибок)
        возврат Ложь
    ;
;

метод СохранитьОбработчик(Источник: ОбычнаяКоманда)
    если ЗаписатьСОбработкойОшибок()
        ЗаявкиНаПодбор.УведомитьОСохранении()
        ЗаявкаНаПодборПослеИзменения.Оповестить(КлючОбъекта)
        ИнтерфейсныеКомпоненты.ЗакрытьЗамещающуюФорму(этот)  
    ;
;

метод ОтправитьНаПроверкуОбработчик(Источник: ОбычнаяКоманда)
    если не ЗаявкиНаПодбор.ПодтвердитьОтправкуНаПроверку()
        возврат
    ;
    если не ЗаписатьСОбработкойОшибок(СтатусыЗаявкиНаПодбор.Проверка)
        возврат
    ;
    ЗаявкиНаПодбор.УведомитьОбОтправкеНаПроверку()
    ИнтерфейсныеКомпоненты.ЗакрытьЗамещающуюФорму(этот) 
;

метод ОтправитьНаСогласованиеОбработчик(Источник: ОбычнаяКоманда)
    знч МаршрутСогласования = ЗаявкиНаПодбор.ЗапроситьМаршрутСогласованияУПользователя(Объект.МаршрутСогласования)   
    если МаршрутСогласования == Неопределено
        возврат
    ;
    Объект.МаршрутСогласования = МаршрутСогласования
    
    если не ЗаписатьСОбработкойОшибок(СтатусыЗаявкиНаПодбор.Согласование)
        возврат
    ;
    ЗаявкиНаПодбор.УведомитьОбОтправкеНаСогласование(Объект.МаршрутСогласования)
    ЗаявкаНаПодборПослеИзменения.Оповестить(КлючОбъекта)
    ИнтерфейсныеКомпоненты.ЗакрытьЗамещающуюФорму(этот) 
;

метод СоздатьВакансиюОбработчик(Источник: ОбычнаяКоманда)
    знч Рекрутер = ЗаявкиНаПодбор.ЗапроситьРекрутера(Объект.Рекрутер)
    если Рекрутер == Неопределено
        возврат
    ;
    Объект.Рекрутер = Рекрутер!
    если не ЗаписатьСОбработкойОшибок(СтатусыЗаявкиНаПодбор.Вакансия)
        возврат
    ;
    знч Вакансия = Вакансии.СоздатьВакансиюИзЗаявкиНаПодбор(КлючОбъекта, Рекрутер!)
    ЗаявкиНаПодбор.УведомитьОСозданииВакансии(Вакансия)
;

метод ОткрытьСозданнуюВакансию(Команда: КомандаСПараметром<Уведомление>, Уведомление: Уведомление)
    если Уведомление.Данные это Вакансии.Ссылка
        знч Форма = новый КарточкаВакансии(КлючОбъекта = Уведомление.Данные как Вакансии.Ссылка)
        Форма.Открыть()
    ;
;

метод ВернутьНаДоработкуОбработчик(Источник: ОбычнаяКоманда)
    если не ЗаявкиНаПодбор.ПодтвердитьВозвратНаДоработку()
        возврат
    ;
    если не ЗаписатьСОбработкойОшибок(СтатусыЗаявкиНаПодбор.Доработка)
        возврат
    ;
    ЗаявкиНаПодбор.УведомитьОВозвратеНаДоработку()
    ИнтерфейсныеКомпоненты.ЗакрытьЗамещающуюФорму(этот) 
;

метод УдалитьОбработчик(Источник: ОбычнаяКоманда)
    ЗаявкиНаПодбор.УдалитьСОповещением(Объект.Ссылка)
    ИнтерфейсныеКомпоненты.ЗакрытьЗамещающуюФорму(этот)
;

метод ЭлементыПроцесса(): Массив<Строка>
    знч ПредставляемыеСтатусы = ["Черновик", "Проверка", "Согласование", "Вакансия"]
    выбор ДополнительныеДанныеФормы.Статус
    когда Доработка
        ПредставляемыеСтатусы[0] = "Доработка"
    когда Отменена
        ПредставляемыеСтатусы[2] = "Отменена"
    когда Согласована
        ПредставляемыеСтатусы[2] = "Согласована"
    ;
    возврат ПредставляемыеСтатусы
;

метод ТекущийШагПроцесса(): Число
    выбор ДополнительныеДанныеФормы.Статус
    когда Черновик, Доработка
        возврат 0
    когда Проверка
        возврат 1
    когда Согласование, Согласована
        возврат 2
    когда Вакансия
        возврат 3
    ;
;

метод ОбязательностьПоляРекрутер(): Булево
    выбор ДополнительныеДанныеФормы.Статус
    когда Проверка, Согласована
        возврат Истина
    иначе
        возврат Ложь
    ;
;

метод ОбязательностьПоляМаршрутСогласования(): Булево
    выбор ДополнительныеДанныеФормы.Статус
    когда Проверка
        возврат Истина
    иначе
        возврат Ложь
    ;
;

метод ПроцентЗаполненияОсновнаяИнформация(): Число
    знч РезультатыПроверкиЗаполнения =[
        Объект.Инициатор != Неопределено, 
        Объект.Подразделение != Неопределено, 
        Объект.Должность != Неопределено,
        Объект.КоличествоШтатныхЕдиниц > 0]
    возврат Рубрикатор.ПроцентЗаполнения(РезультатыПроверкиЗаполнения)
;

@НаКлиенте
статический метод РезультатПроверкиДанныхОшибка(Компоненты: Массив<Компонент>): Булево
    для Компонент из Компоненты
        выбор Компонент
        когда это ПолеВвода<неизвестно>
            если (Компонент как ПолеВвода<неизвестно>).РезультатПроверкиДанных == РезультатПроверкиДанных.Ошибка
                возврат Истина
            ;
        когда это АвтоматическаяГруппа
            если РезультатПроверкиДанныхОшибка((Компонент как АвтоматическаяГруппа).Содержимое)
                возврат Истина
            ;
        ;
    ;
    возврат Ложь
;

метод ПроцентЗаполненияОпытИТребования(): Число
    знч РезультатыПроверкиЗаполнения =[
        Объект.ОпытРаботы != Неопределено, 
        не Объект.Требования.Пусто(), 
        не Объект.Обязанности.Пусто()]
    возврат Рубрикатор.ПроцентЗаполнения(РезультатыПроверкиЗаполнения)
;

метод ПроцентЗаполненияУсловияРаботы(): Число
     знч РезультатыПроверкиЗаполнения =[
        Объект.ГрафикРаботы != Неопределено, 
        Объект.ТипЗанятости != Неопределено, 
        не Объект.Условия.Пусто(),
        Объект.НаселенныеПункты.Размер() > 0]
    возврат Рубрикатор.ПроцентЗаполнения(РезультатыПроверкиЗаполнения)
;

метод ПроцентЗаполненияДеталиПланирования(): Число
    знч РезультатыПроверкиЗаполнения: Массив<Булево>
    возврат Рубрикатор.ПроцентЗаполнения(РезультатыПроверкиЗаполнения)
;

метод МобильныйРежим(): Булево
    возврат КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон
;

метод РекрутерВидимость(): Булево
    возврат ПодборПерсонала.ПараметрыСеанса().ЗапускСогласованияЗаявкиНаПодбор или Объект.Рекрутер != Неопределено   
;

метод РекрутерДоступность(): Булево
    возврат ПодборПерсонала.ПараметрыСеанса().ЗапускСогласованияЗаявкиНаПодбор 
;

метод ИнициаторПриИзменении(Источник: ПолеВвода<ФизическиеЛица.Ссылка?>, Событие: СобытиеПриИзменении<ФизическиеЛица.Ссылка?>)
    ОбновитьПодразделенияРуководителя()
    ОбновитьДолжностиПодразделения()
;

метод ПодразделениеПриИзменении(Источник: ПолеВвода<СтруктураПредприятия.Ссылка?>, Событие: СобытиеПриИзменении<СтруктураПредприятия.Ссылка?>)
    ОбновитьДолжностиПодразделения()    
;

метод ОбновитьПодразделенияРуководителя()
    ДополнительныеДанныеФормы.ПодразделенияРуководителя = ПодразделенияРуководителя(Объект.Инициатор)
    если Объект.Подразделение != Неопределено и не ДополнительныеДанныеФормы.ПодразделенияРуководителя.Содержит(Объект.Подразделение!)
        Объект.Подразделение = Неопределено
    иначе если Объект.Подразделение == Неопределено и ДополнительныеДанныеФормы.ПодразделенияРуководителя.Размер() == 1
        Объект.Подразделение = ДополнительныеДанныеФормы.ПодразделенияРуководителя.Единственный()          
    ;    
;

метод ОбновитьДолжностиПодразделения()
    ДополнительныеДанныеФормы.ДолжностиПодразделения = ДолжностиПодразделения(Объект.Подразделение)
    если Объект.Должность != Неопределено и не ДополнительныеДанныеФормы.ДолжностиПодразделения.Содержит(Объект.Должность!)
        Объект.Должность = Неопределено
    ;    
;

@НаСервере @ДоступноСКлиента
статический метод ПодразделенияРуководителя(Инициатор: ФизическиеЛица.Ссылка?): Множество<СтруктураПредприятия.Ссылка>
    возврат ОрганизационнаяСтруктура.ПодразделенияРуководителя(Инициатор)
;

@НаСервере @ДоступноСКлиента
статический метод ДолжностиПодразделения(Подразделение: СтруктураПредприятия.Ссылка?): Массив<Должности.Ссылка>
    возврат ШтатноеРасписание.ДолжностиПодразделения(Подразделение)
;

метод ПодразделениеСписокВыбора(): Массив<ЭлементСпискаЗначений<СтруктураПредприятия.Ссылка?>>
    возврат ДополнительныеДанныеФормы.ПодразделенияРуководителя
        .Преобразовать(Подразделение -> новый ЭлементСпискаЗначений<СтруктураПредприятия.Ссылка?>(Подразделение))
;

метод ДолжностьСписокВыбора(): Массив<ЭлементСпискаЗначений<Должности.Ссылка?>>
    возврат ДополнительныеДанныеФормы.ДолжностиПодразделения
        .Преобразовать(Должность -> новый ЭлементСпискаЗначений<Должности.Ссылка?>(Должность))
;