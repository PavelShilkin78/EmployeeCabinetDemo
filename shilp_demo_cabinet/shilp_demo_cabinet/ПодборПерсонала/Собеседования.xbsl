импорт КонтрольДоступа
импорт ОбщиеСтандартные
импорт ВебApi
импорт ФизическиеЛица
импорт ОбменДанными
импорт УниверсальныеМеханизмы


// КонтрольДоступа
@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат КонтрольДоступа.РазрешенияДоступаТаблицыСФизическимЛицомСПравомУдаления()
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<Собеседования.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<Собеседования.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    возврат ПодборПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаОцениваемыхСобеседований(Элементы)
;

@ВПодсистеме
метод ПересчитатьРазрешенияЗависимыхОбъектов(ДанныеРасчетаРазрешений: Обходимое<Собеседования.ДанныеРасчетаРазрешений>)
    знч РассматриваемыеКандидаты = ДанныеРасчетаРазрешений.Преобразовать(Элемент -> Элемент.Кандидат)
    исп ЗависимыеВакансии = Запрос{
        ВЫБРАТЬ РАЗЛИЧНЫЕ
            РассматриваемыеКандидаты.Вакансия КАК Вакансия
        ПОМЕСТИТЬ
            СвязанныеВакансии
        ИЗ
            РассматриваемыеКандидаты КАК РассматриваемыеКандидаты
        ГДЕ
            РассматриваемыеКандидаты.Ссылка В(%РассматриваемыеКандидаты)
        ;
        ВЫБРАТЬ
            Вакансии.Ссылка КАК Ссылка,
            Вакансии.Рекрутер КАК Рекрутер,
            Вакансии.Инициатор КАК Инициатор,
            Вакансии.ЗаявкаНаПодбор КАК ЗаявкаНаПодбор
        ИЗ
            Вакансии КАК Вакансии
        ГДЕ
            Вакансии.Ссылка В (
                ВЫБРАТЬ 
                    СвязанныеВакансии.Вакансия 
                ИЗ СвязанныеВакансии КАК СвязанныеВакансии
            )
    }.Выполнить()
    
    знч ДанныеРасчетаВакансии: Массив<Вакансии.ДанныеРасчетаРазрешений>
    для Элемент из ЗависимыеВакансии
        ДанныеРасчетаВакансии.Добавить(новый Вакансии.ДанныеРасчетаРазрешений(
            Ссылка = Элемент.Ссылка,
            Рекрутер = Элемент.Рекрутер,
            Инициатор = Элемент.Инициатор,
            ЗаявкаНаПодбор = Элемент.ЗаявкаНаПодбор))
    ;
    если не ДанныеРасчетаВакансии.Пусто()
        Вакансии.ПересчитатьРазрешенияДоступа(ДанныеРасчетаВакансии)
    ;
;
//КонтрольДоступа

@ВПроекте 
@НаСервере
метод УчастникиСобеседований(Собеседования: Множество<Собеседования.Ссылка>): ЧитаемоеСоответствие<Собеседования.Ссылка, Множество<ФизическиеЛица.Ссылка>>
    знч УчастникиСобеседований = новый Соответствие<Собеседования.Ссылка, Множество<ФизическиеЛица.Ссылка>>()
    для Собеседование из Собеседования
        УчастникиСобеседований.Вставить(Собеседование, {})
    ;
    знч Запрос = Запрос{
        выбрать
            Участники.Владелец как Собеседование,
            Участники.Элемент как Участник
        из
            Собеседования.Участники как Участники
        где 
            Участники.Владелец в(%Собеседования)
        упорядочить по 
            Участники.Владелец
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса
        УчастникиСобеседований[Элемент.Собеседование].Добавить(Элемент.Участник)
    ;
    возврат УчастникиСобеседований
;

@ВПроекте 
@НаСервере
метод УчастникиСобеседования(Собеседование: Собеседования.Ссылка): Множество<ФизическиеЛица.Ссылка>
    знч Собеседования = новый Множество<Собеседования.Ссылка>()
    Собеседования.Добавить(Собеседование)
    пер Участники: Множество<ФизическиеЛица.Ссылка>
    возврат УчастникиСобеседований(Собеседования).ПолучитьИлиУмолчание(Собеседование, Участники)
;

@ВПроекте 
@НаСервере
метод УчастникиСобеседованийВакансии(Вакансия: Вакансии.Ссылка): Множество<ФизическиеЛица.Ссылка>
    знч ФизЛица = новый Множество<ФизическиеЛица.Ссылка>()
    знч Запрос = Запрос{
        выбрать 
            Собеседования.Ссылка как Ссылка
        поместить СобеседованияВакансии
        из 
            РассматриваемыеКандидаты как РассматриваемыеКандидаты
        внутреннее соединение Собеседования как Собеседования
            по РассматриваемыеКандидаты.Вакансия == %Вакансия
            и РассматриваемыеКандидаты.Ссылка == Собеседования.Кандидат
        ;
        выбрать 
            Участники.Элемент как ФизЛицо
        из 
            Собеседования.Участники как Участники
        где 
            Участники.Владелец в(
                выбрать СобеседованияВакансии.Ссылка из СобеседованияВакансии как СобеседованияВакансии
            )    
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса
        ФизЛица.Добавить(Элемент.ФизЛицо)
    ;
    возврат ФизЛица
;

@ВПроекте
@НаСервере
метод СобеседованияСотрудника(Сотрудник: ФизическиеЛица.Ссылка?): Множество<Собеседования.Ссылка>
    знч СобеседованияСотрудника: Множество<Собеседования.Ссылка>
    если Сотрудник == Неопределено
        возврат СобеседованияСотрудника
    ;
     
    исп Результат = Запрос{
        Выбрать Различные
            Владелец как Контейнер
        Из
            Собеседования.Участники
        Где
            Элемент == %Сотрудник
    }.Выполнить()
    
    для Элемент из Результат
       СобеседованияСотрудника.Добавить(Элемент.Контейнер) 
    ;
    возврат СобеседованияСотрудника
;

@ВПроекте 
@НаСервере @ДоступноСКлиента
метод КоличествоСобеседований(РассматриваемыйКандидат: РассматриваемыеКандидаты.Ссылка): Число
    знч Запрос = Запрос{
        ВЫБРАТЬ
            Количество(Собеседования.Ссылка) как Количество
        ИЗ
            Собеседования КАК Собеседования
        ГДЕ
            Собеседования.Кандидат == %РассматриваемыйКандидат
        
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса
        возврат Элемент.Количество
    ;
    возврат 0
;

@ВПроекте 
@НаСервере @ДоступноСКлиента
метод УдалитьСобеседование(Собеседование: Собеседования.Ссылка)
    знч Объект = Собеседование.ЗагрузитьОбъект()
    Объект.Удалить()
;

@ВПроекте
метод ЗаполнитьПараметрыСобеседованияВСообщении(ТекстыСообщений: Соответствие<Строка, Строка>, Собеседование: Собеседования.Ссылка): Соответствие<Строка, Строка>
    
    знч ДанныеСобеседования = Запрос{выбрать ДатаПроведения, Формат из Собеседования где Ссылка == %Собеседование}
        .Выполнить().ЕдинственныйИлиУмолчание()
    пер ДатаСобеседования: Строка = ДанныеСобеседования.ДатаПроведения.Представление("дд.ММ.гггг ЧЧ:мм")
    пер Формат: Строка = ДанныеСобеседования.Формат.Представление().ВНижнийРегистр()
    пер СписокУчастников: Массив<Строка>
    пер ЗапрашиваемыеДанные: ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц
    ЗапрашиваемыеДанные.ЛичныеДанные = Истина
    пер Участники = новый Множество<ФизическиеЛица.Ссылка>()
    для Элемент из Запрос{Выбрать Элемент из Собеседования.Участники где Владелец == %Собеседование}.Выполнить()
        Участники.Добавить(Элемент.Элемент)
    ; 
    пер ДанныеФизическихЛиц = ФизЛица.ДанныеФизическихЛиц(Участники, ЗапрашиваемыеДанные)
    для КлючИЗначение из ДанныеФизическихЛиц
        пер ДанныеФИО = КлючИЗначение.Значение.ЛичныеДанные.ФИО
        пер ПолноеИмя = "%{ДанныеФИО.Фамилия} %{ДанныеФИО.Имя} %{ДанныеФИО.Отчество}"
        СписокУчастников.Добавить(ПолноеИмя)
    ;
    пер Тексты: Соответствие<Строка, Строка>
    для КлючИЗначение из ТекстыСообщений
        пер Текст = КлючИЗначение.Значение.Заменить("\%КМДатаСобеседования\%", ДатаСобеседования)
        Текст = Текст.Заменить("\%КМФорматСобеседования\%", Формат)
        Текст = Текст.Заменить("\%КМСписокУчастниковСобеседования\%", Строки.Соединить(СписокУчастников, "\n"))
        Тексты.Вставить(КлючИЗначение.Ключ, Текст)
    ;
    возврат Тексты
;

// JSON

@ВПодсистеме
метод ТипОбъектаJson(): Строка
    возврат "interview"
;

@ВПроекте
структура Собеседование_2_0
    @JsonСвойство(Имя = "ID")
    обз знч Идентификатор: Строка
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка
    @JsonСвойство(Имя = "candidate")
    обз знч Кандидат: Строка?
    @JsonСвойство(Имя = "date")
    обз знч ДатаПроведения: ДатаВремя
    @JsonСвойство(Имя = "members")
    пер Участники: Массив<Строка>? 
    @JsonСвойство(Имя = "format")
    пер Формат: ФорматСобеседованияJson?
    @JsonСвойство(Имя = "location")
    пер МестоПроведения: Строка?
    @JsonСвойство(Имя = "connectionAddress")
    пер АдресДляПодключения: Строка?
    @JsonСвойство(Имя = "grades")
    пер Оценки: Массив<ОценкиУчастниковСобеседования.ОценкаУчастниковСобеседования_2_0>
    @JsonСвойство(Имя = "attachedFiles")
    пер ПрисоединенныеФайлы: Массив<МенеджерФайлов.ДанныеФайлаJson>?
;

перечисление ФорматСобеседованияJson
    online,
    offline    
;

конст СООТВЕТСТВИЕ_СОБЕСЕДОВАНИЯ_JSON = {
    ФорматСобеседованияJson.online: ФорматСобеседования.Онлайн,
    ФорматСобеседованияJson.offline: ФорматСобеседования.Оффлайн
}

метод ФорматСобеседованияВJson(ФорматСобеседования: ФорматСобеседования): ФорматСобеседованияJson
    для КлючИЗначение из СООТВЕТСТВИЕ_СОБЕСЕДОВАНИЯ_JSON 
        если КлючИЗначение.Значение == ФорматСобеседования
            возврат КлючИЗначение.Ключ
        ;    
    ; 
;

метод ФорматСобеседованияИзJson(ФорматСобеседованияJson: ФорматСобеседованияJson): ФорматСобеседования
    возврат СООТВЕТСТВИЕ_СОБЕСЕДОВАНИЯ_JSON[ФорматСобеседованияJson]    
;

@ВПодсистеме
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{2.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    
    если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<Собеседование_2_0>
    ;
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(Собеседование: Собеседование_2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать()
    знч ЗагружаемыйОбъект = Сервисы.ПрочитатьОбъект(
        Собеседование.Идентификатор, &Собеседования.Объект.новый(Ууид), Тип<Собеседования.Ссылка>) как Собеседования.Объект
    ЗагружаемыйОбъект.Наименование = Собеседование.Наименование
    если Собеседование.Кандидат != Неопределено 
        ЗагружаемыйОбъект.Кандидат = Сервисы.ПолучитьСсылку(
            РассматриваемыеКандидаты.ВнешняяСсылка(Собеседование.Кандидат)) как РассматриваемыеКандидаты.Ссылка
    ;
    ЗагружаемыйОбъект.ДатаПроведения = Собеседование.ДатаПроведения
    ЗагружаемыйОбъект.АдресДляПодключения = Собеседование.АдресДляПодключения ?? ""
    если Собеседование.Участники != Неопределено
        ЗагружаемыйОбъект.Участники.Очистить()
        знч ВнешниеСсылки: Множество<ВебApiСервер.ВнешняяСсылка>
        для Участник из Собеседование.Участники
            ВнешниеСсылки.Добавить(ФизическиеЛица.ВнешняяСсылка(Участник))
        ; 
        для ФизическоеЛицо из Сервисы.ПолучитьСсылки(ВнешниеСсылки).Значения()
            ЗагружаемыйОбъект.Участники.Добавить(ФизическоеЛицо как ФизическиеЛица.Ссылка)    
        ;     
    ;
    если Собеседование.Формат != Неопределено
        ЗагружаемыйОбъект.Формат = ФорматСобеседованияИзJson(Собеседование.Формат)       
    ;
    если Собеседование.МестоПроведения != Неопределено
        ЗагружаемыйОбъект.МестоПроведения = Сервисы.ПолучитьСсылку(
            МестаПроведенияСобеседований.ВнешняяСсылка(Собеседование.МестоПроведения)) как МестаПроведенияСобеседований.Ссылка    
    ;
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ЗагружаемыйОбъект, Собеседование.Идентификатор), Сервисы.ИнструментыМенеджераОбъекта)  
    если Собеседование.ПрисоединенныеФайлы != Неопределено
        знч ВложенныеФайлы = Файлы.ВложенияИзJson(Собеседование.ПрисоединенныеФайлы, Сервисы, ЗагружаемыйОбъект.Ссылка)
        Файлы.ЗаписатьФайлыПоВладельцу(ВложенныеФайлы, ЗагружаемыйОбъект.Ссылка)
    иначе
        Файлы.УдалитьФайлыПоВладельцу(ЗагружаемыйОбъект.Ссылка)
    ;
    ОценкиУчастниковСобеседования.ЗаписатьСтатусыJson_V2_0(ЗагружаемыйОбъект.Ссылка, Собеседование.Оценки, Сервисы) 
;

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> Собеседования.ПолучитьСсылку(Ууид))
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"interviews": ИсходящиеДанныеВJson(Ссылки, Сервисы)}
;

метод ИсходящиеДанныеВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеОбъектов(Ссылки)
        Данные.Добавить(ДанныеОбъектаВJson_V2_0(КлючИЗначение.Значение, Сервисы))
    ;
    возврат Данные
;

метод ДанныеОбъектов(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<Собеседования.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Данные: Соответствие<Собеседования.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>> 
    если Ссылки.Размер() == 0
        возврат Данные
    ;
    
    знч Участники = МенеджерСущности.ЗначениеМножественногоРеквизитаОбъектов(Ссылки, "Участники")
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Кандидат,
            ДатаПроведения,
            Наименование,
            Формат,
            МестоПроведения,
            АдресДляПодключения
        Из
            Собеседования
        Где
            Ссылка В (%Ссылки)        
    }
    исп Результат = Запрос.Выполнить() 
    для СтрокаРезультата из Результат
        знч ДанныеОбъекта = новый Соответствие<Строка, Объект?>()
        ДанныеОбъекта.ВставитьВсе(МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(СтрокаРезультата, Результат))
        ДанныеОбъекта.Вставить("Участники", Участники.ПолучитьИлиУмолчание(СтрокаРезультата.Ссылка, новый Массив<ФизическиеЛица.Ссылка>()))
        Данные.Вставить(
            СтрокаРезультата.Ссылка,
            ДанныеОбъекта
        )
    ;
    возврат Данные    
;

метод ДанныеОбъектаВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Собеседование_2_0
    знч СобеседованиеСсылка = ДанныеОбъекта["Ссылка"] как Собеседования.Ссылка 
    знч Собеседование = новый Собеседование_2_0(
            Сервисы.ПолучитьИдентификатор(СобеседованиеСсылка),
            ДанныеОбъекта["Наименование"] как Строка,
            Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Кандидат"] как РассматриваемыеКандидаты.Ссылка?),
            ДанныеОбъекта["ДатаПроведения"] как ДатаВремя) 
     
    Собеседование.Участники = новый Массив<Строка>()  
    для Значение из ДанныеОбъекта["Участники"] как ЧитаемыйМассив<Объект>
       Собеседование.Участники.Добавить(Сервисы.ПолучитьИдентификатор(Значение как ФизическиеЛица.Ссылка)) 
    ;
    если ДанныеОбъекта["Формат"] != Неопределено 
        Собеседование.Формат = ФорматСобеседованияВJson(ДанныеОбъекта["Формат"] как ФорматСобеседования)
    ;
    если ДанныеОбъекта["МестоПроведения"] != Неопределено 
        Собеседование.МестоПроведения = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["МестоПроведения"] как МестаПроведенияСобеседований.Ссылка)
    ; 
    Собеседование.АдресДляПодключения = ДанныеОбъекта["АдресДляПодключения"] как Строка  
    Собеседование.Оценки = ОценкиУчастниковСобеседования.ОценкиВJson_V2_0(ДанныеОбъекта["Ссылка"] как Собеседования.Ссылка, Сервисы) 
    
    знч ПрисоединенныеФайлыДляВыгрузки = ПрисоединенныеФайлыМенеджер.ПрисоединенныеФайлы(СобеседованиеСсылка)
    если не ПрисоединенныеФайлыДляВыгрузки.Файлы.Пусто()
        знч ПрисоединенныеФайлыДанные = новый Массив<МенеджерФайлов.ДанныеФайлаJson>()
        для ФайлДляВыгрузки из ПрисоединенныеФайлыДляВыгрузки.Файлы
            ПрисоединенныеФайлыДанные.Добавить(
                Файлы.ДанныеФайлаJson(ФайлДляВыгрузки.Ссылка, Сервисы)    
            )
        ;
        Собеседование.ПрисоединенныеФайлы = ПрисоединенныеФайлыДанные
    ;
    возврат Собеседование        
;
// Конец JSON

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: Собеседования.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Ссылка, Истина)
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, Неопределено, ХарактерыИзменений.Изменение)
    ;
;

@ВПодсистеме
метод ПослеУдаленияДополнение(Ссылка: Собеседования.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьУдаление(Ссылка)
    ;
;