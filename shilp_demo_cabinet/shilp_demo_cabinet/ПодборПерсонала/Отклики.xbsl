импорт Анкетирование
импорт УправлениеПерсоналом
импорт ФизическиеЛица
импорт КонтрольДоступа
импорт ОбщиеСтандартные
импорт ВебApi
импорт УниверсальныеМеханизмы
импорт ОбменДанными

@ВПодсистеме
@НаСервере @НаКлиенте
структура ДополнительныеСвойства
    пер ЗагружаемаяФотографияСсылка: Файлы.Ссылка?
    пер ЗагружаемоеРезюмеСсылка: Файлы.Ссылка?
;

@ВПроекте
структура ДанныеОтклика
    обз пер Вакансия: Вакансии.Ссылка
    обз пер Источник: ИсточникиКандидатов
    пер Наименование: Строка
    пер Фамилия: Строка
    пер Имя: Строка
    пер Отчество: Строка
    пер ДатаРождения: Дата
    пер Пол: ПолФизическогоЛица?
    пер Гражданство: Страны.Ссылка?
    пер Образование: Массив<ОписаниеОбразования>
    пер Сертификаты: Массив<СертификатыРезюме.ДанныеСертификатаРезюме>
    пер Портфолио: Массив<ПортфолиоРезюме.ДанныеПортфолиоРезюме>
    пер Курсы: Массив<ОписаниеКурсов>
    пер Фотография: ПрисоединенныйФайл?
    пер ОпытРаботы: Массив<ОписаниеМестаРаботы>
    пер ПредставлениеОпытаРаботы: Строка
    пер ВодительскийСтаж: Дата?
    пер ВодительскиеКатегории: Массив<ВодительскиеКатегории>
    пер ЗарплатныеОжидания: ОписаниеОплаты?
    пер НаселенныйПункт: НаселенныеПункты.Ссылка?
    пер ИностранныеЯзыки: Массив<ОписаниеВладенияИностраннымЯзыком>
    пер Навыки: Массив<КлючевыеНавыки.Ссылка>
    пер ЭлектроннаяПочта: Массив<Строка>
    пер Телефон: Массив<Строка>
    пер ФайлРезюме: Файлы.Ссылка?
    пер ОСебе: Строка
    пер АнкетаОСебе: Анкеты.Ссылка?
;

метод ЗаполнитьДанныеОтклика(ДанныеОтклика: ДанныеОтклика, НовыйОтклик: Отклики.Объект)
    НовыйОтклик.Вакансия = ДанныеОтклика.Вакансия
    НовыйОтклик.Наименование = ДанныеОтклика.Наименование
    НовыйОтклик.Фамилия = ДанныеОтклика.Фамилия
    НовыйОтклик.Имя = ДанныеОтклика.Имя
    НовыйОтклик.Отчество = ДанныеОтклика.Отчество
    НовыйОтклик.ДатаРождения = ДанныеОтклика.ДатаРождения
    НовыйОтклик.Пол = ДанныеОтклика.Пол
    НовыйОтклик.Гражданство = ДанныеОтклика.Гражданство
    НовыйОтклик.ПредставлениеОпытаРаботы = ДанныеОтклика.ПредставлениеОпытаРаботы
    НовыйОтклик.ВодительскийСтаж = ДанныеОтклика.ВодительскийСтаж
    НовыйОтклик.ЗарплатныеОжидания = ДанныеОтклика.ЗарплатныеОжидания
    НовыйОтклик.Источник = ДанныеОтклика.Источник
    НовыйОтклик.НаселенныйПункт = ДанныеОтклика.НаселенныйПункт
    НовыйОтклик.ИностранныеЯзыки.ДобавитьВсе(ДанныеОтклика.ИностранныеЯзыки)
    НовыйОтклик.Образование.ДобавитьВсе(ДанныеОтклика.Образование)
    НовыйОтклик.Курсы.ДобавитьВсе(ДанныеОтклика.Курсы)
    НовыйОтклик.ОпытРаботы.ДобавитьВсе(ДанныеОтклика.ОпытРаботы)
    НовыйОтклик.ВодительскиеКатегории.ДобавитьВсе(ДанныеОтклика.ВодительскиеКатегории)
    НовыйОтклик.ФайлРезюме = ДанныеОтклика.ФайлРезюме
    НовыйОтклик.ОСебе = ДанныеОтклика.ОСебе
    НовыйОтклик.АнкетаОСебе = ДанныеОтклика.АнкетаОСебе
;

метод ЗаписатьКонтактнуюИнформацию(ДанныеОтклика: ДанныеОтклика, НовыйОтклик: Отклики.Ссылка)
    знч КонтактнаяИнформация = новый ЛичныеКонтакты.КонтактнаяИнформация()
    
    для Телефон из ДанныеОтклика.Телефон
        КонтактнаяИнформация.МобильныйТелефон.Добавить(новый ЛичныеКонтактыСтрока(Данные = Телефон, Актуальный = Истина))
    ;
    
    для ЭлектроннаяПочта из ДанныеОтклика.ЭлектроннаяПочта
        КонтактнаяИнформация.ЭлектроннаяПочта.Добавить(новый ЛичныеКонтактыСтрока(Данные = ЭлектроннаяПочта, Актуальный = Истина))
    ;

    ЛичныеКонтакты.ЗаписатьКонтактыВладельца(НовыйОтклик, КонтактнаяИнформация)
;

@ВПроекте
метод СоздатьОтклик(ДанныеОтклика: ДанныеОтклика): Отклики.Ссылка
    пер НовыйОтклик: Отклики.Объект
    ЗаполнитьДанныеОтклика(ДанныеОтклика, НовыйОтклик)
    НовыйОтклик.Записать(
        Фотография = ДанныеОтклика.Фотография,
        СертификатыРезюме = ДанныеОтклика.Сертификаты,
        ПортфолиоРезюме = ДанныеОтклика.Портфолио
    )
    ЗаписатьКонтактнуюИнформацию(ДанныеОтклика, НовыйОтклик.Ссылка)
    СтатусыОткликов.Установить(НовыйОтклик.Ссылка, СтатусОтклика.Новый) 
    возврат НовыйОтклик.Ссылка
;

@ВПроекте
метод СоздатьЧерновикОтклика(ДанныеОтклика: ДанныеОтклика): Отклики.Ссылка
    пер НовыйОтклик: Отклики.Объект
    НовыйОтклик.Вакансия = ДанныеОтклика.Вакансия
    НовыйОтклик.Источник = ДанныеОтклика.Источник
    НовыйОтклик.Записать()
    
    ЗаписатьКонтактнуюИнформацию(ДанныеОтклика, НовыйОтклик.Ссылка)
    СтатусыОткликов.Установить(НовыйОтклик.Ссылка, СтатусОтклика.Новый) 
    возврат НовыйОтклик.Ссылка
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ОткликиНаВакансии(Вакансии: Массив<Вакансии.Ссылка>): Массив<Отклики.Ссылка>
    знч Отклики = новый Массив<Отклики.Ссылка>()
    знч Запрос = Запрос{
            выбрать
                Отклики.Ссылка как Ссылка
            из Отклики как Отклики
            внутреннее соединение СтатусыОткликов как СтатусыОткликов
            по
                СтатусыОткликов.Отклик ==Отклики.Ссылка
                и СтатусыОткликов.Статус == %{СтатусОтклика.Новый}
                и Отклики.Вакансия в (%Вакансии)
    } 
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса
       Отклики.Добавить(Элемент.Ссылка)
    ;
    возврат Отклики
;

@ВПроекте
метод ЗаполнитьПараметрыОткликаВСообщении(ТекстыСообщений: Соответствие<Строка, Строка>, Отклик:Отклики.Ссылка): Соответствие<Строка, Строка>
    знч ДанныеОтклика = МенеджерСущности.ЗначенияРеквизитовОбъекта(Отклик, ["Наименование", "Источник"])
    пер Тексты: Соответствие<Строка, Строка>
    для КлючИЗначение из ТекстыСообщений
        пер Текст = КлючИЗначение.Значение.Заменить("\%КМПолноеИмяОтклика\%", ДанныеОтклика.Получить("Наименование"))
        Текст = Текст.Заменить("\%КМКарьерныйСайт\%", ДанныеОтклика.Получить("Источник").Представление())
        Тексты.Вставить(КлючИЗначение.Ключ, Текст)
    ;
    возврат Тексты
;

@ВПроекте
@НаКлиенте
конст СТАТУСЫ_ДОСТУПНЫЕ_ДЛЯ_ПРИНЯТИЯ_ОТКЛИКА = [СтатусОтклика.Новый, СтатусОтклика.СозданКандидат]

@ВПроекте
@НаКлиенте
метод МожноПринять(Отклики: Массив<Отклики.Ссылка>): Массив<Отклики.Ссылка>
    знч РезрешенныеОтклики: Массив<Отклики.Ссылка>
    для Элемент из СтатусыОткликов.Получить(Отклики)
        если МожноПринять(Элемент.Значение)
            РезрешенныеОтклики.Добавить(Элемент.Ключ)
        ;
    ;
    возврат РезрешенныеОтклики
;

@ВПроекте
@НаКлиенте
метод МожноПринять(Статус: СтатусОтклика): Булево
    возврат СТАТУСЫ_ДОСТУПНЫЕ_ДЛЯ_ПРИНЯТИЯ_ОТКЛИКА.Содержит(Статус)
;

@ВПроекте
@НаКлиенте
конст СТАТУСЫ_ДОСТУПНЫЕ_ДЛЯ_ОТКЛОНЕНИЯ_ОТКЛИКА = [СтатусОтклика.Новый, СтатусОтклика.СозданКандидат]

@ВПроекте
@НаКлиенте
метод МожноОтклонить(Отклики: Массив<Отклики.Ссылка>): Массив<Отклики.Ссылка>
    знч РезрешенныеОтклики: Массив<Отклики.Ссылка>
    для Элемент из СтатусыОткликов.Получить(Отклики)
        если МожноОтклонить(Элемент.Значение)
            РезрешенныеОтклики.Добавить(Элемент.Ключ)
        ;
    ;
    возврат РезрешенныеОтклики
;

@ВПроекте
@НаКлиенте
метод МожноОтклонить(Статус: СтатусОтклика): Булево
    возврат СТАТУСЫ_ДОСТУПНЫЕ_ДЛЯ_ОТКЛОНЕНИЯ_ОТКЛИКА.Содержит(Статус)
;

@ВПроекте
@НаКлиенте
конст СТАТУСЫ_ДОСТУПНЫЕ_ДЛЯ_СОЗДАНИЯ_КАНДИДАТА = [СтатусОтклика.Новый, СтатусОтклика.Отклонен]

@ВПроекте
@НаКлиенте
метод МожноСоздатьКандидата(Отклики: Массив<Отклики.Ссылка>): Массив<Отклики.Ссылка>
    знч РезрешенныеОтклики: Массив<Отклики.Ссылка>
    для Элемент из СтатусыОткликов.Получить(Отклики)
        если МожноСоздатьКандидата(Элемент.Значение)
            РезрешенныеОтклики.Добавить(Элемент.Ключ)
        ;
    ;
    возврат РезрешенныеОтклики
;

@ВПроекте
@НаКлиенте
метод МожноСоздатьКандидата(Статус: СтатусОтклика): Булево
    возврат СТАТУСЫ_ДОСТУПНЫЕ_ДЛЯ_СОЗДАНИЯ_КАНДИДАТА.Содержит(Статус)
;
// КонтрольДоступа

конст ТИП_АТРИБУТА_ДОСТУПА_ОТКЛИКИ = "Отклики"

@ВПодсистеме
@НаСервере
метод ДобавитьТипАтрибутаДоступаОтклики()
    КонтрольДоступа.ДобавитьТипАтрибута(
        "Отклики",
        ТИП_АТРИБУТА_ДОСТУПА_ОТКЛИКИ
    )
;

@ВПроекте
@НаСервере
метод ТипАтрибутаДоступаОтклики(): ТипыАтрибутов.Ссылка?
    возврат КонтрольДоступа.ТипАтрибута(ТИП_АТРИБУТА_ДОСТУПА_ОТКЛИКИ)
;

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат ПодборПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаОтклика()
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Объекты: ЧитаемыйМассив<Отклики.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<Отклики.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    возврат ПодборПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаОтклика(Объекты)
;

@ВПодсистеме
метод ПересчитатьРазрешенияДоступа(ДанныеРасчетаРазрешений: Обходимое<Отклики.ДанныеРасчетаРазрешений>)
    ПересчитатьРазрешенияДоступаДляОбъектов(ДанныеРасчетаРазрешений)
;

// КонтрольДоступа

// JSON

@ВПроекте
структура Отклик_2_0
    @JsonСвойство(Имя = "ID")
    обз знч Идентификатор: Строка
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка
    @JsonСвойство(Имя = "vacancy")
    обз знч Вакансия: Строка
    @JsonСвойство(Имя = "firstName")
    обз знч Имя: Строка
    @JsonСвойство(Имя = "lastName")
    обз знч Фамилия: Строка
    @JsonСвойство(Имя = "personalContacts")
    пер ЛичныеКонтакты: ЛичныеКонтакты.ДанныеJson_V2_0?
    @JsonСвойство(Имя = "patronymic")
    пер Отчество: Строка?
    @JsonСвойство(Имя = "birthDate")
    пер ДатаРождения: Дата?
    @JsonСвойство(Имя = "gender")
    пер Пол: ФизическиеЛица.ПолJson?
    @JsonСвойство(Имя = "citizenship")
    пер Гражданство: Строка? 
    @JsonСвойство(Имя = "education")
    пер Образование: Массив<ОписаниеОбразования.ДанныеJson_V2_0>
    @JsonСвойство(Имя = "sertificates")
    пер Сертификаты: Массив<СертификатыРезюме.ДанныеJson_V2_0>
    @JsonСвойство(Имя = "portfolios")
    пер Портфолио: Массив<ПортфолиоРезюме.ДанныеJson_V2_0>
    @JsonСвойство(Имя = "courses")
    пер Курсы: Массив<ОписаниеКурсов.ДанныеJson_V2_0>
    @JsonСвойство(Имя = "picture")
    пер Фотография: МенеджерФайлов.ДанныеФайлаJson?
    @JsonСвойство(Имя = "experience")
    пер ОпытРаботы: Массив<ОписаниеМестаРаботы.ДанныеJson_V2_0>?
    @JsonСвойство(Имя = "driveExperience")
    пер ВодительскийСтаж: Дата?
    @JsonСвойство(Имя = "driveCategories")
    пер ВодительскиеКатегории: Массив<ВодительскиеКатегории>
    @JsonСвойство(Имя = "prefferedSalary")
    пер ЗарплатныеОжидания: ОписаниеОплаты.ДанныеJson_V2_0?
    @JsonСвойство(Имя = "source")
    пер Источник: ПодборПерсонала.ИсточникиКандидатовJson?
    @JsonСвойство(Имя = "locality")
    пер НаселенныйПункт: Строка?
    @JsonСвойство(Имя = "skills")
    пер Навыки: Массив<Строка>
    @JsonСвойство(Имя = "languages")
    пер ИностранныеЯзыки: Массив<ОписаниеВладенияИностраннымЯзыком.ДанныеJson_V2_0>
    @JsonСвойство(Имя = "position")
    пер Должность: Строка?
    @JsonСвойство(Имя = "summary")
    пер ФайлРезюме: МенеджерФайлов.ДанныеФайлаJson?
    @JsonСвойство(Имя = "version")
    пер Версия: Число?
    @JsonСвойство(Имя = "status")
    пер Статус: ПодборПерсонала.СтатусОткликаJson?
    @JsonСвойство(Имя = "selfDescription")
    пер ОСебе: Строка
    @JsonСвойство(Имя = "applicantQuestionnaire")
    пер АнкетаОСебе: Строка?
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"responsesToJob": ДанныеОткликовВJson(Ссылки, Сервисы)}
;

метод ДанныеОткликовВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеОткликов(Ссылки)
        Данные.Добавить(ДанныеОткликаВJson_V2_0(КлючИЗначение.Значение, Сервисы))
    ;
    возврат Данные
;

метод ДанныеОткликов(ИсходящиеДанные: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<Отклики.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч ДанныеОткликов: Соответствие<Отклики.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    если ИсходящиеДанные.Размер() == 0
        возврат ДанныеОткликов
    ;
    знч ОткликиСсылки = новый Массив<Отклики.Ссылка>()
    для Элемент из ИсходящиеДанные
        ОткликиСсылки.Добавить(Элемент как Отклики.Ссылка)          
    ;  
    знч ДанныеОбразования = МенеджерСущности.ЗначениеМножественногоРеквизитаОбъектов(ОткликиСсылки, "Образование")
    знч ДанныеКурсов = МенеджерСущности.ЗначениеМножественногоРеквизитаОбъектов(ОткликиСсылки, "Курсы")
    знч ДанныеОпытаРаботы = МенеджерСущности.ЗначениеМножественногоРеквизитаОбъектов(ОткликиСсылки, "ОпытРаботы")
    знч ДанныеВодительскихКатегорий = МенеджерСущности.ЗначениеМножественногоРеквизитаОбъектов(ОткликиСсылки, "ВодительскиеКатегории")
    знч ИностранныеЯзыки = МенеджерСущности.ЗначениеМножественногоРеквизитаОбъектов(ОткликиСсылки, "ИностранныеЯзыки")
    знч Статусы = СтатусыОткликов.Получить(ОткликиСсылки)
    знч Навыки = МенеджерСущности.ЗначениеМножественногоРеквизитаОбъектов(ОткликиСсылки, "Навыки")
    
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Наименование,
            Вакансия,
            Фамилия,
            Имя,
            Отчество,
            ДатаРождения,
            Пол,
            Фотография,
            ВодительскийСтаж,
            ЗарплатныеОжидания,
            Источник,
            НаселенныйПункт,
            Должность,
            ФайлРезюме,
            ОСебе,
            АнкетаОСебе,
            Гражданство
        Из
            Отклики
        Где
            Ссылка В (%ОткликиСсылки)  
    }  
    исп Результат = Запрос.Выполнить() 
    для СтрокаРезультата из Результат
        знч ПоляОтклика: Соответствие<Строка, Объект?>
        ПоляОтклика.ВставитьВсе(МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(СтрокаРезультата, Результат))
        ПоляОтклика.Вставить("Образование", ДанныеОбразования.ПолучитьИлиУмолчание(СтрокаРезультата.Ссылка, <Объект>[]))
        ПоляОтклика.Вставить("Курсы", ДанныеКурсов.ПолучитьИлиУмолчание(СтрокаРезультата.Ссылка, <Объект>[]))
        ПоляОтклика.Вставить("ОпытРаботы", ДанныеОпытаРаботы.ПолучитьИлиУмолчание(СтрокаРезультата.Ссылка, <Объект>[]))
        ПоляОтклика.Вставить("ВодительскиеКатегории", ДанныеВодительскихКатегорий.ПолучитьИлиУмолчание(СтрокаРезультата.Ссылка, <Объект>[]))
        ПоляОтклика.Вставить("ВодительскиеКатегории", ДанныеВодительскихКатегорий.ПолучитьИлиУмолчание(СтрокаРезультата.Ссылка, <Объект>[]))
        ПоляОтклика.Вставить("ИностранныеЯзыки", ИностранныеЯзыки.ПолучитьИлиУмолчание(СтрокаРезультата.Ссылка, <Объект>[]))
        ПоляОтклика.Вставить("Навыки", Навыки.ПолучитьИлиУмолчание(СтрокаРезультата.Ссылка, <Объект>[]))
        ПоляОтклика.Вставить("Статус", Статусы.ПолучитьИлиУмолчание(СтрокаРезультата.Ссылка, Неопределено))
        ДанныеОткликов.Вставить(СтрокаРезультата.Ссылка, ПоляОтклика)
    ;    
    
    возврат ДанныеОткликов    
;

метод ДанныеОткликаВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Отклик_2_0
    знч ОткликСсылка = ДанныеОбъекта["Ссылка"] как Отклики.Ссылка
    знч Отклик = новый Отклик_2_0(
        Сервисы.ПолучитьИдентификатор(ОткликСсылка),
        ДанныеОбъекта["Наименование"] как Строка,
        Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Вакансия"] как Вакансии.Ссылка),
        ДанныеОбъекта["Имя"] как Строка,
        ДанныеОбъекта["Фамилия"] как Строка    
    )
    
    пер ЛичныеКонтактыСсылка = ЛичныеКонтакты.ПолучитьКонтакты(ОткликСсылка)
    если ЛичныеКонтактыСсылка != Неопределено
        Отклик.ЛичныеКонтакты = ЛичныеКонтакты.ПолучитьJson_V2_0(ЛичныеКонтактыСсылка.ЗагрузитьОбъект())
    ;
    Отклик.Отчество = ДанныеОбъекта["Отчество"] как Строка?
    Отклик.ДатаРождения = ДанныеОбъекта["ДатаРождения"] как Дата?
    если ДанныеОбъекта["Пол"] != Неопределено
        Отклик.Пол = ФизическиеЛица.ПолФизическогоЛицаВJson(ДанныеОбъекта["Пол"] как ПолФизическогоЛица)
    ;
    Отклик.Образование = новый Массив<ОписаниеОбразования.ДанныеJson_V2_0>()
    для Образование из (ДанныеОбъекта["Образование"] как ЧитаемыйМассив<Объект>)
        Отклик.Образование.Добавить((Образование как ОписаниеОбразования).ПолучитьJson_V2_0())
    ;
    Отклик.Сертификаты = новый Массив<СертификатыРезюме.ДанныеJson_V2_0>(СертификатыРезюме.СертификатыВладельцаВДанныеJson(ОткликСсылка, Сервисы))
    Отклик.Портфолио = новый Массив<ПортфолиоРезюме.ДанныеJson_V2_0>(ПортфолиоРезюме.ПортфолиоВладельцаВДанныеJson(ОткликСсылка, Сервисы))

    Отклик.Курсы = новый Массив<ОписаниеКурсов.ДанныеJson_V2_0>()
    для Курс из (ДанныеОбъекта["Курсы"] как ЧитаемыйМассив<Объект>)
        Отклик.Курсы.Добавить((Курс как ОписаниеКурсов).ПолучитьJson_V2_0())
    ;
    Отклик.ОпытРаботы = новый Массив<ОписаниеМестаРаботы.ДанныеJson_V2_0>()
    для МестоРаботы из (ДанныеОбъекта["ОпытРаботы"] как ЧитаемыйМассив<Объект>)
        Отклик.ОпытРаботы.Добавить((МестоРаботы как ОписаниеМестаРаботы).ПолучитьJson_V2_0())
    ;
    Отклик.ВодительскийСтаж = ДанныеОбъекта["ВодительскийСтаж"] как Дата?
    Отклик.ВодительскиеКатегории = новый Массив<ВодительскиеКатегории>()
    для ВодительскаяКатегория из (ДанныеОбъекта["ВодительскиеКатегории"] как ЧитаемыйМассив<Объект>)
        Отклик.ВодительскиеКатегории.Добавить(ВодительскаяКатегория как ВодительскиеКатегории)
    ;
    если ДанныеОбъекта["ЗарплатныеОжидания"] != Неопределено
        Отклик.ЗарплатныеОжидания = (ДанныеОбъекта["ЗарплатныеОжидания"] как ОписаниеОплаты).ПолучитьJson_V2_0()
    ;
    если ДанныеОбъекта["Источник"] != Неопределено
        Отклик.Источник = ПодборПерсонала.ИсточникКандидатаВJson(ДанныеОбъекта["Источник"] как ИсточникиКандидатов) 
    ;
    если ДанныеОбъекта["НаселенныйПункт"] != Неопределено
        Отклик.НаселенныйПункт = (ДанныеОбъекта["НаселенныйПункт"] как НаселенныеПункты.Ссылка).Ид.ВСтроку()
    ;
    Отклик.Должность = ДанныеОбъекта["Должность"] как Строка?
    если ДанныеОбъекта["Фотография"] != Неопределено
        Отклик.Фотография = Файлы.ДанныеФайлаJson(ДанныеОбъекта["Фотография"] как Файлы.Ссылка, Сервисы)
    ;
    если ДанныеОбъекта["ФайлРезюме"] != Неопределено
        Отклик.ФайлРезюме = Файлы.ДанныеФайлаJson(ДанныеОбъекта["ФайлРезюме"] как Файлы.Ссылка, Сервисы)
    ;
    
    Отклик.ОСебе = ДанныеОбъекта["ОСебе"] как Строка
    
    если ДанныеОбъекта["Гражданство"] != Неопределено
        Отклик.Гражданство = (ДанныеОбъекта["Гражданство"] как Страны.Ссылка).Ид.ВСтроку()
    ;
    
    Отклик.ИностранныеЯзыки = новый Массив<ОписаниеВладенияИностраннымЯзыком.ДанныеJson_V2_0>()
    для Элемент из (ДанныеОбъекта["ИностранныеЯзыки"] как ЧитаемыйМассив<Объект>)
        знч ИностранныйЯзык = Элемент как ОписаниеВладенияИностраннымЯзыком
        если ИностранныйЯзык.ИностранныйЯзык != Неопределено
            Отклик.ИностранныеЯзыки.Добавить(ИностранныйЯзык.ПолучитьJson_V2_0())
        ;
    ;
    
    Отклик.Навыки = новый Массив<Строка>()
    для Навык из (ДанныеОбъекта["Навыки"] как ЧитаемыйМассив<Объект>)
        Отклик.Навыки.Добавить(Сервисы.ПолучитьИдентификатор(Навык как КлючевыеНавыки.Ссылка))
    ;

    если ДанныеОбъекта["АнкетаОСебе"] != Неопределено
        Отклик.АнкетаОСебе = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["АнкетаОСебе"] как Анкеты.Ссылка)
    ;
    
    если ДанныеОбъекта["Статус"] != Неопределено
        Отклик.Статус = ПодборПерсонала.СтатусОткликаВJson(ДанныеОбъекта["Статус"] как СтатусОтклика)
    ;
    
    если Сервисы.ПолучитьВерсию != Неопределено
        Отклик.Версия = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как Отклики.Ссылка))
    ;
     
    возврат Отклик        
;

@ВПодсистеме
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{2.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    
    если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<Отклик_2_0>
    ;
;

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "responseToJob"
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(Отклик: Отклик_2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать()
    знч ЗагружаемыйОбъект = Сервисы.ПрочитатьОбъект(Отклик.Идентификатор, &Отклики.Объект.новый(Ууид), Тип<Отклики.Ссылка>) как Отклики.Объект 
    ЗагружаемыйОбъект.Наименование = Отклик.Наименование
    ЗагружаемыйОбъект.Вакансия = ОбменДанными.ИдентификаторыЛокальныхОбъектов([Отклик.Вакансия]).ПолучитьИлиУмолчание(Отклик.Вакансия) как Вакансии.Ссылка? 
    ЗагружаемыйОбъект.Имя = Отклик.Имя
    ЗагружаемыйОбъект.Фамилия = Отклик.Фамилия
    ЗагружаемыйОбъект.Отчество = Отклик.Отчество ?? ""
    ЗагружаемыйОбъект.ДатаРождения = Отклик.ДатаРождения ?? Дата{}
    если Отклик.Пол != Неопределено
        ЗагружаемыйОбъект.Пол = ФизическиеЛица.ПолФизическогоЛицаИзJson(Отклик.Пол)
    ;

    если Отклик.Гражданство != Неопределено
        ЗагружаемыйОбъект.Гражданство = Страны.ПолучитьСсылку(новый Ууид(Отклик.Гражданство))
    ;

    ЗагружаемыйОбъект.Образование.Очистить()
    для МестоОбученияJson из Отклик.Образование
        знч МестоОбучения: ОписаниеОбразования
        МестоОбучения.ЗаполнитьПоJson(МестоОбученияJson)
        ЗагружаемыйОбъект.Образование.Добавить(МестоОбучения)    
    ;    

    ЗагружаемыйОбъект.Курсы.Очистить()
    для КурсJson из Отклик.Курсы
        знч Курс: ОписаниеКурсов
        Курс.ЗаполнитьПоJson(КурсJson) 
        ЗагружаемыйОбъект.Курсы.Добавить(Курс)   
    ;

    ЗагружаемыйОбъект.ОпытРаботы.Очистить()
    если Отклик.ОпытРаботы != Неопределено
        для МестоРаботыJson из Отклик.ОпытРаботы
            знч МестоРаботы: ОписаниеМестаРаботы
            МестоРаботы.ЗаполнитьПоJson(МестоРаботыJson)
            ЗагружаемыйОбъект.ОпытРаботы.Добавить(МестоРаботы)    
        ;    
    ;
    ЗагружаемыйОбъект.ВодительскийСтаж = Отклик.ВодительскийСтаж ?? Дата{}

    ЗагружаемыйОбъект.ВодительскиеКатегории.Очистить()
    для КатегорииПрав из Отклик.ВодительскиеКатегории
        ЗагружаемыйОбъект.ВодительскиеКатегории.Добавить(КатегорииПрав)    
    ;  

    если Отклик.ЗарплатныеОжидания != Неопределено
        знч ЗарплатныеОжидания: ОписаниеОплаты 
        ЗарплатныеОжидания.ЗаполнитьПоJson(Отклик.ЗарплатныеОжидания)
        ЗагружаемыйОбъект.ЗарплатныеОжидания = ЗарплатныеОжидания
    ;

    если Отклик.Источник != Неопределено
        ЗагружаемыйОбъект.Источник = ПодборПерсонала.ИсточникКандидатовИзJson(Отклик.Источник)
    ;

    если Отклик.НаселенныйПункт != Неопределено
        ЗагружаемыйОбъект.НаселенныйПункт = НаселенныеПункты.ПолучитьСсылку(новый Ууид(Отклик.НаселенныйПункт))
    ;
    
    ЗагружаемыйОбъект.Навыки.Очистить()
    если не Отклик.Навыки.Пусто()
        для Элемент из Отклик.Навыки
            знч Идентификатор = ОбменДанными.ИдентификаторыЛокальныхОбъектов([Элемент])
                        .ПолучитьИлиУмолчание(Элемент) как КлючевыеНавыки.Ссылка?
            если Идентификатор != Неопределено
                ЗагружаемыйОбъект.Навыки.Добавить(Идентификатор)
            ;
        ;
    ;

    ЗагружаемыйОбъект.ИностранныеЯзыки.Очистить()
    если не Отклик.ИностранныеЯзыки.Пусто()
        для Элемент из Отклик.ИностранныеЯзыки
            знч ИностранныйЯзык: ОписаниеВладенияИностраннымЯзыком
            ИностранныйЯзык.ЗаполнитьПоJson(Элемент)
            ЗагружаемыйОбъект.ИностранныеЯзыки.Добавить(ИностранныйЯзык)
        ;
    ;
    
    ЗагружаемыйОбъект.ОСебе = Отклик.ОСебе

    если Отклик.АнкетаОСебе != Неопределено
        ЗагружаемыйОбъект.АнкетаОСебе = ОбменДанными.ИдентификаторыЛокальныхОбъектов([Отклик.АнкетаОСебе])
            .ПолучитьИлиУмолчание(Отклик.АнкетаОСебе) как Анкеты.Ссылка? 
    ;
    
    пер ВложенныеФайлы = новый Массив<Файлы.Объект>() 
    если Отклик.Фотография != Неопределено
        знч ФайлФотография = Файлы.ВложенияИзJson([Отклик.Фотография], Сервисы, ЗагружаемыйОбъект.Ссылка)[0]
        ЗагружаемыйОбъект.Фотография = ФайлФотография.Ссылка
        ВложенныеФайлы.Добавить(ФайлФотография)
    ;
    если Отклик.ФайлРезюме != Неопределено
        знч ФайлРезюме = Файлы.ВложенияИзJson([Отклик.ФайлРезюме], Сервисы, ЗагружаемыйОбъект.Ссылка)[0]
        ЗагружаемыйОбъект.ФайлРезюме = ФайлРезюме.Ссылка
        ВложенныеФайлы.Добавить(ФайлРезюме)
    ; 
    
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ЗагружаемыйОбъект, Отклик.Идентификатор), Сервисы.ИнструментыМенеджераОбъекта)
    Файлы.ЗаписатьФайлыПоВладельцу(ВложенныеФайлы, ЗагружаемыйОбъект.Ссылка)
    СертификатыРезюме.ЗаписатьСертификатыИзДанныеJson(Отклик.Сертификаты, ЗагружаемыйОбъект.Ссылка, Сервисы)
    ПортфолиоРезюме.ЗаписатьПортфолиоИзДанныеJson(Отклик.Портфолио, ЗагружаемыйОбъект.Ссылка, Сервисы)
    
    если Отклик.ЛичныеКонтакты != Неопределено
        ЛичныеКонтакты.ОбновитьПоJson(ЗагружаемыйОбъект.Ссылка, Отклик.ЛичныеКонтакты)
    ;

    если Отклик.Статус != Неопределено
        СтатусыОткликов.Установить(ЗагружаемыйОбъект.Ссылка, ПодборПерсонала.СтатусОткликаИзJson(Отклик.Статус)) 
    ;  
;

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> Отклики.ПолучитьСсылку(Ууид))
;

// Конец JSON

@ВПодсистеме
метод ПослеУдаленияДополнение(Ссылка: Отклики.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    РегистрацияИзменений.ЗарегистрироватьУдаление(Ссылка)
;

// ОбновляемаяПодсистема
@ВПодсистеме
метод УбратьДублиМножественныхРеквизитовОткликов()
    знч Запрос = Запрос{
        выбрать Различные
            Образование.Владелец,
            Образование.Элемент
        поместить МножественныеРеквизиты
        из Отклики.Образование как Образование

        объединить все

        выбрать Различные
            Сертификаты.Владелец,
            Сертификаты.Элемент
        из Отклики.СертификатыУстарело как Сертификаты

        объединить все

        выбрать Различные
            Курсы.Владелец,
            Курсы.Элемент
        из Отклики.Курсы как Курсы
        
        объединить все

        выбрать Различные
            ОпытРаботы.Владелец,
            ОпытРаботы.Элемент
        из Отклики.ОпытРаботы как ОпытРаботы

        объединить все

        выбрать Различные
            ВодительскиеКатегории.Владелец,
            ВодительскиеКатегории.Элемент
        из Отклики.ВодительскиеКатегории как ВодительскиеКатегории
        ;
        выбрать 
            МножественныеРеквизиты.Владелец как Контейнер,
            МножественныеРеквизиты.Элемент
        из
            МножественныеРеквизиты как МножественныеРеквизиты
        упорядочить по 
            МножественныеРеквизиты.Владелец
        
    }
    
    исп ОбластьВидимостиВременныхТаблиц.Открыть(Ложь)
    исп Результат = Запрос.Выполнить()
    пер КонтейнерОбъект: Отклики.Объект?
    для Строка из Результат
        если Строка.Контейнер != КонтейнерОбъект?.Ссылка
            если КонтейнерОбъект!= Неопределено
                КонтейнерОбъект.Записать()
            ;
            
            КонтейнерОбъект = Строка.Контейнер.ЗагрузитьОбъект()
            КонтейнерОбъект.Образование.Очистить()
            КонтейнерОбъект.СертификатыУстарело.Очистить()
            КонтейнерОбъект.Курсы.Очистить()
            КонтейнерОбъект.ОпытРаботы.Очистить()
            КонтейнерОбъект.ВодительскиеКатегории.Очистить()
        ;
        
        выбор Строка.Элемент
        когда это ОписаниеОбразования
            КонтейнерОбъект.Образование.Добавить(Строка.Элемент как ОписаниеОбразования)
        когда это ОписаниеСертификата
            КонтейнерОбъект.СертификатыУстарело.Добавить(Строка.Элемент как ОписаниеСертификата)
        когда это ОписаниеКурсов
            КонтейнерОбъект.Курсы.Добавить(Строка.Элемент как ОписаниеКурсов)
        когда это ОписаниеМестаРаботы
            КонтейнерОбъект.ОпытРаботы.Добавить(Строка.Элемент как ОписаниеМестаРаботы)
        когда это ВодительскиеКатегории
            КонтейнерОбъект.ВодительскиеКатегории.Добавить(Строка.Элемент как ВодительскиеКатегории)
        ;
    ;
    если КонтейнерОбъект!= Неопределено
        КонтейнерОбъект.Записать()
    ;
    
    
;
// Конец ОбновляемаяПодсистема