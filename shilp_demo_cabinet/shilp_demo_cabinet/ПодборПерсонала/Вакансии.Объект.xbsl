импорт ОбщиеСтандартные

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередЗаписью(До: Вакансии.Данные, ПараметрыЗаписи: Вакансии.ПараметрыЗаписи)
    ЗаполнитьНаименование()
;

метод ЗаполнитьНаименование()
    если Наименование.Пусто() и  ЗаявкаНаПодбор != Неопределено
       знч РеквизитыЗаявки = МенеджерСущности.ЗначенияРеквизитовОбъекта(ЗаявкаНаПодбор, ["Должность", "Подразделение"])
       знч ДолжностьПредставление = РеквизитыЗаявки["Должность"]?.Представление() ?? ""
       знч ПодразделениеПредставление = РеквизитыЗаявки["Подразделение"]?.Представление() ?? ""
       Наименование = "%ДолжностьПредставление/%ПодразделениеПредставление"
    ;
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПослеЗаписи(До: Вакансии.Данные, ПараметрыЗаписи: Вакансии.ПараметрыЗаписи) 
    исп КонтекстДоступа.Привилегированный()
    если не ПараметрыЗаписи.РежимЗагрузкиДанных
        знч СервисРегистрацииИзменений = ПодборПерсоналаРегистрацияИзменений.ПолучитьСервис()
        знч ТребуетсяРегистрацияИзменений = СервисРегистрацииИзменений.ВакансииТребуетсяРегистрация()
        Вакансии.ПослеЗаписиДополнение(Ссылка, ДымчатоеТестирование, ТребуетсяРегистрацияИзменений)
        если Рекрутер!= До.Рекрутер
            ЗаявкиНаПодбор.ОбновитьРекрутераЗаявки(ЗаявкаНаПодбор, Рекрутер)
        ;
    ;
    
    Вакансии.ПересчитатьРазрешенияЗависимыхОбъектов([новый Вакансии.ДанныеРасчетаРазрешений(этот)])
    
    знч СервисыУведомления = УведомленияПодбораПерсонала.ПолучитьСервисы()
    для СервисУведомления из СервисыУведомления
        СервисУведомления.ПослеЗаписиВакансии(этот, До, ПараметрыЗаписи, ЭтоНовый())
    ;
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПослеУдаления(ПараметрыУдаления: Вакансии.ПараметрыУдаления)
    исп КонтекстДоступа.Привилегированный()
    Вакансии.ПослеУдаленияДополнение(Ссылка, не ПараметрыУдаления.РежимЗагрузкиДанных)
;