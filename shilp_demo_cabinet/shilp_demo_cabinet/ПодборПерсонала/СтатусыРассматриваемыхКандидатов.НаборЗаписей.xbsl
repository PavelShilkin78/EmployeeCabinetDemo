импорт ОбменДанными
импорт ОбщиеСтандартные
// Область ОбработчикиСобытий

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередЗаписью(Замещать: Булево, ПараметрыЗаписи: СтатусыРассматриваемыхКандидатов.ПараметрыЗаписи)
    знч Кандидат: РассматриваемыеКандидаты.Ссылка? = Фильтр.Кандидат.Значение
    если Кандидат != Неопределено
        ПараметрыЗаписи.ПредыдущийСтатус = СтатусыРассматриваемыхКандидатов.Получить(Кандидат)
    ;
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных                          
метод ПослеЗаписи(Замещать: Булево, ПараметрыЗаписи: СтатусыРассматриваемыхКандидатов.ПараметрыЗаписи)
    если не ПараметрыЗаписи.РежимЗагрузкиДанных
        ЗарегистрироватьИзменение()
    ;
    
    ОтправитьУведомления(Замещать, ПараметрыЗаписи)
    
    ОбновитьДанныеВоронкиПодбора(ПараметрыЗаписи)
;

метод ЗарегистрироватьИзменение()
    исп КонтекстДоступа.Привилегированный()
    
    если не Фильтр.Кандидат.Использование
        возврат
    ;
    если Фильтр.Кандидат.Значение == Неопределено
        возврат
    ;
    знч Кандидат = Фильтр.Кандидат.Значение!
    
    если Размер() != 1
        возврат
    ;
        
    ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Кандидат, Отправляемый = Истина)
    РегистрацияИзменений.ЗарегистрироватьИзменение(
        Кандидат, 
        РазделительВыгружаемыхДанных = Неопределено, 
        ХарактерИзменений = ХарактерыИзменений.Изменение)
;

метод ОтправитьУведомления(Замещать: Булево, ПараметрыЗаписи: СтатусыРассматриваемыхКандидатов.ПараметрыЗаписи)
    исп КонтекстДоступа.Привилегированный()
    
    знч Сервисы = УведомленияПодбораПерсонала.ПолучитьСервисы()
    для Сервис из Сервисы
        Сервис.ПослеЗаписиСтатусаРассматриваемогоКандидата(этот, Замещать, ПараметрыЗаписи)
    ;
;

метод ОбновитьДанныеВоронкиПодбора(ПараметрыЗаписи: СтатусыРассматриваемыхКандидатов.ПараметрыЗаписи)
    исп КонтекстДоступа.Привилегированный()
    
    если этот.Размер() > 0
        знч Запись = этот.Последний()
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        ЗапланированныеЗадания.Создать(
            &ДанныеВоронкиПодбора.ДобавитьЭтапВоронки,
            Запись.Период,
            Запись.Статус!,
            Запись.Кандидат!,
            ПараметрыЗаписи.ПредыдущийСтатус)
                .ЗапланироватьВТранзакции()
    ;
;
// КонецОбласти