импорт ПодборПерсонала
импорт ФизическиеЛица
импорт ВебApi
импорт ОбменДанными
импорт Компания

//КонтрольДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат ПодборПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаОписанияРаботодателя()
;

//Конец КонтрольДоступа

//JSON

@ВПодсистеме
метод ТипОбъектаJson(): Строка
    возврат "PDSettings"
;

@ВПроекте
структура НастройкаПерсональныхДанных_3_0
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка
    @JsonСвойство(Имя = "operator")
    обз знч Оператор: Строка?
    @JsonСвойство(Имя = "operatorLegalAddress")
    обз знч ЮридическийАдресОператора: Строка
    @JsonСвойство(Имя = "collectPersonalData")
    обз знч СобиратьПерсональныеДанные: Булево
    @JsonСвойство(Имя = "handlers")
    пер Обработчики: Массив<Обработчики_2_0>
    @JsonСвойство(Имя = "consentCreationMethod")
    обз знч СпособФормированияСогласия: СпособФормированияСогласияJson
    @JsonСвойство(Имя = "remindResponsibleAboutNotification")
    обз знч НапоминатьОтветственномуОбУведомленииРкн: Булево?
    @JsonСвойство(Имя = "indicationMethodForPDResponsible")
    обз знч СпособУказанияОтветственногоЗаПдн: СпособУказанияОтветственногоJson
    @JsonСвойство(Имя = "consentRefusalEmailAdress")
    обз знч АдресПочтыДляОтзывовСогласий: Строка
    @JsonСвойство(Имя = "responsibleForPD")
    пер ФизлицоОтветственногоЗаПдн: Строка?
;

структура Обработчики_2_0
    @JsonСвойство(Имя = "handlerID")
    обз знч Обработчик: Строка?
    @JsonСвойство(Имя = "handlerName")
    обз знч НаименованиеОбработчика: Строка
    @JsonСвойство(Имя = "taxId")
    обз знч Инн: Строка
    @JsonСвойство(Имя = "primaryStateRegistrationNumber")
    обз знч Огрн: Строка
    @JsonСвойство(Имя = "legalAddress")
    обз знч ЮридическийАдрес: Строка   
;

перечисление СпособФормированияСогласияJson
    auto,
    manual
;

перечисление СпособУказанияОтветственногоJson
    recruiter,
    anotherPerson
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{3.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;   
    возврат {"PDSettings": ДанныеНастроекПднВJson(Ссылки, Сервисы)}
;

метод ДанныеНастроекПднВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеНастроекПдн(Ссылки)
        Данные.Добавить(ДанныеНастройкиВJson_V3_0(КлючИЗначение.Значение, Сервисы))
    ;
    возврат Данные
;

метод ДанныеНастройкиВJson_V3_0(ДанныеНастройки: ДанныеНастройки, Сервисы: ВебApiСервер.СервисыУпаковкиJson): НастройкаПерсональныхДанных_3_0
    
    знч СериализованнаяНастройка = новый НастройкаПерсональныхДанных_3_0(
        Ид = Сервисы.ПолучитьИдентификатор(ДанныеНастройки.Ссылка),
        Наименование = ДанныеНастройки.Наименование,
        СобиратьПерсональныеДанные = ДанныеНастройки.СобиратьПерсональныеДанные,
        Оператор = Сервисы.ПолучитьИдентификатор(ДанныеНастройки.Оператор),
        ЮридическийАдресОператора = ДанныеНастройки.ЮридическийАдресОператора,
        СпособФормированияСогласия = СпособФормированияСогласия(ДанныеНастройки),
        НапоминатьОтветственномуОбУведомленииРкн = ДанныеНастройки.НапоминатьОтветственномуОбУведомленииРкн,
        СпособУказанияОтветственногоЗаПдн = СпособУказанияОтветственногоЗаПдн(ДанныеНастройки),
        АдресПочтыДляОтзывовСогласий = ДанныеНастройки.АдресПочтыДляОтзывовСогласий
    )
    
    знч НастройкаОбъект = ДанныеНастройки.Ссылка.ЗагрузитьОбъект()
    
    для Элемент из НастройкаОбъект.Обработчики
        СериализованнаяНастройка.Обработчики.Добавить(новый Обработчики_2_0(
            Обработчик = Сервисы.ПолучитьИдентификатор(Элемент.Обработчик),
            НаименованиеОбработчика = Элемент.Наименование,
            Инн = Элемент.Инн,
            Огрн = Элемент.Огрн,
            ЮридическийАдрес = Элемент.ЮридическийАдрес))
    ;
    
    СериализованнаяНастройка.ФизлицоОтветственногоЗаПдн = ДанныеНастройки.ФизлицоОтветственногоЗаПдн == Неопределено ? Неопределено : Сервисы.ПолучитьИдентификатор(ДанныеНастройки.ФизлицоОтветственногоЗаПдн)

    возврат СериализованнаяНастройка
;

@ВПроекте
метод ВедетсяСборСогласий(): Булево
    возврат ЗначенияНастройки()?.СобиратьПерсональныеДанные ?? Ложь
;

метод ДанныеНастроекПдн(НастройкиСсылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<НастройкиПерсональныхДанных.Ссылка, ДанныеНастройки>
    
    знч ДанныеНастроекПдн: Соответствие<НастройкиПерсональныхДанных.Ссылка, ДанныеНастройки>
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Наименование,
            СобиратьПерсональныеДанные,
            Оператор,
            ЮридическийАдресОператора,
            СпособФормированияСогласия,
            НапоминатьОтветственномуОбУведомленииРкн,
            СпособУказанияОтветственногоЗаПдн,
            ФизлицоОтветственногоЗаПдн,
            АдресПочтыДляОтзывовСогласий
        Породить ДанныеНастройки
        Из
            НастройкиПерсональныхДанных
        Где
            Ссылка В (%НастройкиСсылки)
    }
    исп Результат = Запрос.Выполнить()
    
    для СтрокаРезультата из Результат
        ДанныеНастроекПдн.Вставить(
            СтрокаРезультата.Ссылка,
            СтрокаРезультата
        )       
    ;
    
    возврат ДанныеНастроекПдн   
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
   
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{3.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;

    возврат Тип<НастройкаПерсональныхДанных_3_0>
;

@ВПодсистеме
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{3.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    возврат Тип<Массив<НастройкаПерсональныхДанных_3_0>>
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(СериализованнаяНастройка: НастройкаПерсональныхДанных_3_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать()
    
    знч ЗагружаемыйОбъект: НастройкиПерсональныхДанных.Объект = Сервисы.ПрочитатьОбъект(СериализованнаяНастройка.Ид,
        &НастройкиПерсональныхДанных.Объект.новый(Ууид), Тип<НастройкиПерсональныхДанных.Ссылка>) как НастройкиПерсональныхДанных.Объект
    ЗагружаемыйОбъект.Наименование = СериализованнаяНастройка.Наименование
    ЗагружаемыйОбъект.СобиратьПерсональныеДанные = СериализованнаяНастройка.СобиратьПерсональныеДанные
    ЗагружаемыйОбъект.Оператор = Сервисы.ПолучитьСсылку(Организации.ВнешняяСсылка(СериализованнаяНастройка.Оператор)) как Организации.Ссылка
    ЗагружаемыйОбъект.ЮридическийАдресОператора = СериализованнаяНастройка.ЮридическийАдресОператора
    ЗагружаемыйОбъект.СпособФормированияСогласия = СпособФормированияСогласия(СериализованнаяНастройка)
    ЗагружаемыйОбъект.НапоминатьОтветственномуОбУведомленииРкн = СериализованнаяНастройка.НапоминатьОтветственномуОбУведомленииРкн
    ЗагружаемыйОбъект.СпособУказанияОтветственногоЗаПдн = СпособУказанияОтветственногоЗаПдн(СериализованнаяНастройка)

    если СериализованнаяНастройка.ФизлицоОтветственногоЗаПдн != Неопределено
        ЗагружаемыйОбъект.ФизлицоОтветственногоЗаПдн = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(СериализованнаяНастройка.ФизлицоОтветственногоЗаПдн)) как ФизическиеЛица.Ссылка
    ;
    
    если не СериализованнаяНастройка.Обработчики.Пусто()
        ЗагружаемыйОбъект.Обработчики.Очистить()
        для СериализованныйОбработчик из СериализованнаяНастройка.Обработчики
            ЗагружаемыйОбъект.Обработчики.Добавить(новый НастройкиПерсональныхДанных.Обработчики(
                Обработчик = СериализованныйОбработчик.Обработчик == Неопределено ? Неопределено : Сервисы.ПолучитьСсылку(Организации.ВнешняяСсылка(СериализованныйОбработчик.Обработчик)) как Организации.Ссылка,
                Наименование = СериализованныйОбработчик.НаименованиеОбработчика,
                Инн = СериализованныйОбработчик.Инн,
                Огрн = СериализованныйОбработчик.Огрн,
                ЮридическийАдрес = СериализованныйОбработчик.Огрн))
        ;
    ; 
    
    ЗагружаемыйОбъект.АдресПочтыДляОтзывовСогласий = СериализованнаяНастройка.АдресПочтыДляОтзывовСогласий
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ЗагружаемыйОбъект, СериализованнаяНастройка.Ид), Сервисы.ИнструментыМенеджераОбъекта)     
;

метод СпособФормированияСогласия(СериализованнаяНастройка: НастройкаПерсональныхДанных_3_0): СпособыФормированияСогласияНаОбработкуПдн
    выбор СериализованнаяНастройка.СпособФормированияСогласия
    когда auto
        возврат СпособыФормированияСогласияНаОбработкуПдн.Автоматически
    когда manual
        возврат СпособыФормированияСогласияНаОбработкуПдн.Вручную
    ;
;

метод СпособФормированияСогласия(ДанныеНастройки: ДанныеНастройки): СпособФормированияСогласияJson
    выбор ДанныеНастройки.СпособФормированияСогласия
    когда Автоматически
        возврат СпособФормированияСогласияJson.auto
    когда Вручную
        возврат СпособФормированияСогласияJson.manual
    ;
;

метод СпособУказанияОтветственногоЗаПдн(СериализованнаяНастройка: НастройкаПерсональныхДанных_3_0): СпособыУказанияОтветственногоЗаПдн
    выбор СериализованнаяНастройка.СпособУказанияОтветственногоЗаПдн
    когда recruiter
        возврат СпособыУказанияОтветственногоЗаПдн.РекрутерПоВакансии
    когда anotherPerson
        возврат СпособыУказанияОтветственногоЗаПдн.КонкретныйПользователь
    ;
;

метод СпособУказанияОтветственногоЗаПдн(ДанныеНастройки: ДанныеНастройки): СпособУказанияОтветственногоJson
    выбор ДанныеНастройки.СпособУказанияОтветственногоЗаПдн
    когда РекрутерПоВакансии
        возврат СпособУказанияОтветственногоJson.recruiter
    когда КонкретныйПользователь
        возврат СпособУказанияОтветственногоJson.anotherPerson
    ;
;

//Конец JSON

@ВПроекте
метод УведомлятьОтветственного(): Булево
    знч Настройка = ЗначенияНастройки()
    
    если Настройка == Неопределено
        возврат Ложь
    иначе
        возврат Настройка.НапоминатьОтветственномуОбУведомленииРкн
    ;
;

@ВПроекте
метод ОтветственныйЗаОбработкуПерсональныхДанных(Субъект: Кандидаты.Ссылка): ФизическиеЛица.Ссылка?
    знч Настройка = ЗначенияНастройки()
    если Настройка == Неопределено
        возврат Неопределено
    иначе
        если Настройка.СпособУказанияОтветственногоЗаПдн == СпособыУказанияОтветственногоЗаПдн.РекрутерПоВакансии
            знч ВакансияПоСубъекту = ВакансияПоСубъекту(Субъект)
            если ВакансияПоСубъекту == Неопределено
                возврат Неопределено
            ;
            возврат РекрутерПоВакансии(ВакансияПоСубъекту)
        иначе
            возврат Настройка.ФизлицоОтветственногоЗаПдн
        ;    
    ;
;

метод ВакансияПоСубъекту(Субъект: Кандидаты.Ссылка): Вакансии.Ссылка?
    знч Запрос = Запрос{
        Выбрать Первые 1
            Вакансия
        Из РассматриваемыеКандидаты
        Где Кандидат == %Субъект}
        
    исп РезультатЗапроса = Запрос.Выполнить()
    возврат РезультатЗапроса.ЕдинственныйИлиУмолчание().Вакансия ?? Неопределено
;

метод РекрутерПоВакансии(Вакансия: Вакансии.Ссылка): ФизическиеЛица.Ссылка?
    знч Запрос = Запрос{
        Выбрать Первые 1
            Рекрутер
        Из Вакансии
        Где Ссылка == %Вакансия}
        
    исп РезультатЗапроса = Запрос.Выполнить()
    возврат РезультатЗапроса.ЕдинственныйИлиУмолчание().Рекрутер ?? Неопределено
;

@ВПодсистеме
метод ТребуетсяФормированиеСогласия(): Булево
    знч Настройка = ЗначенияНастройки()
    
    если Настройка == Неопределено
        возврат Ложь
    иначе
        возврат Настройка.СобиратьПерсональныеДанные
    ;
;

@ВПодсистеме
метод АдресДляОтзываСогласий(): Строка
    знч Настройка = ЗначенияНастройки()
    
    если Настройка == Неопределено
        возврат ""
    иначе
        возврат Настройка.АдресПочтыДляОтзывовСогласий
    ;
;

@ВПроекте
структура ЗначенияНастройки
    обз знч Наименование: Строка
    обз знч СпособФормированияСогласия: СпособыФормированияСогласияНаОбработкуПдн
    обз знч НапоминатьОтветственномуОбУведомленииРкн: Булево
    обз знч СпособУказанияОтветственногоЗаПдн: СпособыУказанияОтветственногоЗаПдн
    обз знч ФизлицоОтветственногоЗаПдн: ФизическиеЛица.Ссылка?
    обз знч АдресПочтыДляОтзывовСогласий: Строка
    обз знч Оператор: Организации.Ссылка
    обз знч НаименованиеОператора: Строка
    обз знч ЮридическийАдресОператора: Строка
    обз знч СобиратьПерсональныеДанные: Булево
    пер Обработчики: Массив<ОбработчикиПдн>
;

@ВПроекте
метод ЗначенияНастройки(): ЗначенияНастройки?
    
    знч ЗапросНастройка = Запрос{
        Выбрать Первые 1
            Ссылка,
            Наименование,
            СпособФормированияСогласия,
            НапоминатьОтветственномуОбУведомленииРкн,
            СпособУказанияОтветственногоЗаПдн,
            ФизлицоОтветственногоЗаПдн,
            АдресПочтыДляОтзывовСогласий,
            Оператор,
            Оператор.Представление.ЗаменитьNull("") как НаименованиеОператора,
            ЮридическийАдресОператора,
            СобиратьПерсональныеДанные
        Из НастройкиПерсональныхДанных
    }
    
    исп КонтекстДоступа.Привилегированный()
    исп РезультатЗапросаНастройка = ЗапросНастройка.Выполнить()
    знч ПерваяСтрока = РезультатЗапросаНастройка.ПервыйИлиУмолчание()
    если ПерваяСтрока == Неопределено
        возврат Неопределено
    ;
    знч ЗначенияНастройки = новый ЗначенияНастройки(
        Наименование = ПерваяСтрока.Наименование,
        СпособФормированияСогласия = ПерваяСтрока.СпособФормированияСогласия,
        НапоминатьОтветственномуОбУведомленииРкн = ПерваяСтрока.НапоминатьОтветственномуОбУведомленииРкн,
        СпособУказанияОтветственногоЗаПдн = ПерваяСтрока.СпособУказанияОтветственногоЗаПдн,
        ФизлицоОтветственногоЗаПдн = ПерваяСтрока.ФизлицоОтветственногоЗаПдн,
        АдресПочтыДляОтзывовСогласий = ПерваяСтрока.АдресПочтыДляОтзывовСогласий,
        Оператор = ПерваяСтрока.Оператор,
        НаименованиеОператора = ПерваяСтрока.НаименованиеОператора,
        ЮридическийАдресОператора = ПерваяСтрока.ЮридическийАдресОператора,
        СобиратьПерсональныеДанные = ПерваяСтрока.СобиратьПерсональныеДанные
    )
    
    знч Настройка = ПерваяСтрока.Ссылка
    
    знч ЗапросОбработчики = Запрос{
    Выбрать
        Обработчик,
        Наименование,
        Инн,
        Огрн,
        ЮридическийАдрес
    Породить ОбработчикиПдн
    Из НастройкиПерсональныхДанных.Обработчики
    Где Владелец == %Настройка
    }

    исп РезультатЗапросаОбработчики = ЗапросОбработчики.Выполнить()
    если не РезультатЗапросаОбработчики.Пусто()
        ЗначенияНастройки.Обработчики.ДобавитьВсе(РезультатЗапросаОбработчики)
    ;

    возврат ЗначенияНастройки

;

@ВПроекте
метод Настройка(): НастройкиПерсональныхДанных.Ссылка?
    знч Запрос = Запрос{
        Выбрать Первые 1
        Ссылка
        Из НастройкиПерсональныхДанных
    }
    
    исп РезультатЗапроса = Запрос.Выполнить()
    возврат РезультатЗапроса.ЕдинственныйИлиУмолчание()?.Ссылка
;

@ВПодсистеме
метод ПослеУдаленияДополнение(Ссылка: НастройкиПерсональныхДанных.Ссылка, ПараметрыУдаления: НастройкиПерсональныхДанных.ПараметрыУдаления)
    если не ПараметрыУдаления.РежимЗагрузкиДанных
        РегистрацияИзменений.ЗарегистрироватьУдаление(Ссылка)
    ;
;