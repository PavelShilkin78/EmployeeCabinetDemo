импорт ОбщиеСтандартные
импорт УниверсальныеМеханизмы


@ВПодсистеме
@НаСервере @НаКлиенте
перечисление ОшибкиПроверкиЗаполнения
    ПодразделениеНеЗаполнено,
    ДолжностьНеЗаполнена,
    РуководительНеЗаполнено,
    НекорректноеЗначениеЗаработнойПлаты,
    ДатаВыходаНаРаботуНеУказана,
    ДатаВыходаНаРаботуРаньшеДатыПринятияОффера,
    СрокПринятияНеУказан,
    СрокПринятияРаньшеТекущейДаты
;

@ВПроекте
метод ПроверитьЗаполнение()
    знч Ошибки = новый Множество<ОшибкиПроверкиЗаполнения>()
    
    если Подразделение == Неопределено
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.ПодразделениеНеЗаполнено)   
    ;
    
    если Должность == Неопределено
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.ДолжностьНеЗаполнена)   
    ;
    
    если Руководитель == Неопределено
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.РуководительНеЗаполнено)   
    ;
    
    если не ЗаработнаяПлата.ПроверитьЗаполнение(Обязательное = Истина, ДиапазонСумм = Ложь).Пусто()
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.НекорректноеЗначениеЗаработнойПлаты)
    ;
    
    если ДатаВыходаНаРаботу == Неопределено или ДатаВыходаНаРаботу == Дата{}
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.ДатаВыходаНаРаботуНеУказана)
    иначе если СрокПринятия != Неопределено и ДатаВыходаНаРаботу < СрокПринятия
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.ДатаВыходаНаРаботуРаньшеДатыПринятияОффера)
    ;
    
    знч ТекущаяДата = МенеджерДат.ТекущаяДатаВремя().ВДатаВремя(ЧасовойПояс.Текущий()).Дата
    если СрокПринятия == Неопределено или СрокПринятия == Дата{}
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.СрокПринятияНеУказан)
    иначе если СрокПринятия <= ТекущаяДата
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.СрокПринятияРаньшеТекущейДаты)
    ;
    
    если Ошибки.Размер() > 0
        выбросить новый ПроверкаЗаполнения.ИсключениеПроверкиЗаполнения("При проверке заполнения выявлены ошибки", Ошибки = Ошибки)
    ;   
;

@ВПодсистеме
@НаСервере
метод ЗаписатьБезПроверкиЗаполнения()
    знч ПараметрыЗаписи = новый Офферы.ПараметрыЗаписи(ОтключитьПроверкуЗаполнения = Истина)    
    Записать(ПараметрыЗаписи)
;

@Обработчик
метод ПередЗаписью(До: Офферы.Данные, ПараметрыЗаписи: Офферы.ПараметрыЗаписи)
    если не ПараметрыЗаписи.РежимЗагрузкиДанных и не (ПараметрыЗаписи.ОтключитьПроверкуЗаполнения ?? Ложь)
        ПроверитьЗаполнение() 
    ;
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПослеЗаписи(До: Офферы.Данные, ПараметрыЗаписи: Офферы.ПараметрыЗаписи)
    если ЭтоНовый() и не ПараметрыЗаписи.РежимЗагрузкиДанных
        СтатусыОффера.Установить(Ссылка, СтатусОффера.Черновик)
    ;
    если ПараметрыЗаписи.ПрисоединенныеФайлы != Неопределено
        ПараметрыЗаписи.ПрисоединенныеФайлы.Владелец = этот.Ссылка
        ПрисоединенныеФайлыМенеджер.Записать(ПараметрыЗаписи.ПрисоединенныеФайлы)   
    ;
    исп КонтекстДоступа.Привилегированный()
    Офферы.ПослеЗаписиДополнение(Ссылка, ПараметрыЗаписи)
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПослеУдаления(ПараметрыУдаления: Офферы.ПараметрыУдаления)
    исп КонтекстДоступа.Привилегированный()
    Офферы.ПослеУдаленияДополнение(Ссылка, ПараметрыУдаления)
;

@Обработчик
метод ПриСозданииКопии(Источник: Офферы.Данные)
    Дата = Дата.Сейчас()
;