импорт ВебApi
импорт ОбменДанными
импорт ОбщиеСтандартные
импорт Компания::Согласования
импорт Криптография

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередЗаписью(До: ЗаявкиНаПодбор.Данные, ПараметрыЗаписи: ЗаявкиНаПодбор.ПараметрыЗаписи)
    если не ПараметрыЗаписи.РежимЗагрузкиДанных
        ПроверитьЗаполнение(ПараметрыЗаписи.Статус ?? СтатусыЗаявокНаПодбор.Получить(Ссылка))
        ЗаполнитьПредставлениеДокумента()
        ЗаполнитьНаселенныеПунктыПредставление()
        УстановитьПрефикс(ПараметрыЗаписи)
        УстановитьПлановуюДатуЗакрытия()
    ;
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПослеЗаписи(До: ЗаявкиНаПодбор.Данные, ПараметрыЗаписи: ЗаявкиНаПодбор.ПараметрыЗаписи)
    исп КонтекстДоступа.Привилегированный()
    
    ПересчитатьРазрешенияЗависимыхОбъектов()
    
    если не ПараметрыЗаписи.РежимЗагрузкиДанных
        УстановитьСтатус(ПараметрыЗаписи)
        если ПараметрыЗаписи.Статус == СтатусыЗаявкиНаПодбор.Согласование
            ВозобновитьПроцессСогласования()
        ;
        
        ЗаявкиНаПодбор.ПослеЗаписиДополнение(Ссылка, ТребуетсяРегистрацияИзменений = Истина)
    ;
    ПослеЗаписиЗаявкиНаПодбор(До, ПараметрыЗаписи)
    
    ОтправитьУведомления(До, ПараметрыЗаписи)
;

метод ЗаполнитьПредставлениеДокумента()
    ПредставлениеДокумента = ЗаявкиНаПодбор.ПредставлениеЗаявкиНаПодбор(Номер, Должность, Подразделение)
;

метод ОтправитьУведомления(До: ЗаявкиНаПодбор.Данные, ПараметрыЗаписи: ЗаявкиНаПодбор.ПараметрыЗаписи)
    для СервисУведомления из УведомленияПодбораПерсонала.ПолучитьСервисы()
        СервисУведомления.ПослеЗаписиЗаявкиНаПодбор(этот, До, ПараметрыЗаписи, ЭтоНовый())
    ;
;

метод ПослеЗаписиЗаявкиНаПодбор(До: ЗаявкиНаПодбор.Данные, ПараметрыЗаписи: ЗаявкиНаПодбор.ПараметрыЗаписи)
    для Сервис из СобытияВакансии.ПолучитьСервисы()
        Сервис.ПослеЗаписиЗаявкиНаПодбор(этот, До, ПараметрыЗаписи)
    ;
;

метод ВозобновитьПроцессСогласования()
    исп Результат = Запрос{
        Выбрать
            СогласованияДокументов.Ссылка Как Ссылка
        Из
            СогласованияДокументов Как СогласованияДокументов
        Где 
            СогласованияДокументов.Документ == %Ссылка
            и СогласованияДокументов.Результат == РезультатыСогласования.Отказано
    }.Выполнить()
    
    для Элемент из Результат
        знч СогласованияДокументовОбъект = Элемент.Ссылка.ЗагрузитьОбъект()
        СогласованияДокументовОбъект.Результат = РезультатыСогласования.НаСогласовании
        СогласованияДокументовОбъект.Записать()
    ;
;

@ВПодсистеме
@НаСервере @НаКлиенте
перечисление ОшибкиПроверкиЗаполнения
    ИнициаторНеЗаполнено,
    ПодразделениеНеЗаполнено,
    ДолжностьНеЗаполнена,
    ОпытРаботыНеЗаполнен,
    ОбязанностиНеЗаполнены,
    ТребованияНеЗаполнено,
    ГрафикРаботыНеЗаполнен,
    ТипЗанятостиНеЗаполнен,
    УсловияРаботыНеЗаполнены,
    НаселенныйПунктНеЗаполнен,
    МаршрутСогласованияНеЗаполнен,
    РекрутерНеЗаполнен,
    НекорректноеЗначениеЗаработнойПлаты,
    НекорректноеКоличествоШтатныхЕдиниц
;

@ВПроекте
метод ПроверитьЗаполнение(Статус: СтатусыЗаявкиНаПодбор)
    знч Ошибки = новый Множество<ОшибкиПроверкиЗаполнения>()
        
    если Статус == СтатусыЗаявкиНаПодбор.Черновик
        возврат   
    ;
      
    если Инициатор == Неопределено
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.ИнициаторНеЗаполнено)
    ;
      
    если Подразделение == Неопределено
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.ПодразделениеНеЗаполнено)
    ;
    
    если Должность == Неопределено
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.ДолжностьНеЗаполнена)
    ;
    
    если ОпытРаботы == Неопределено
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.ОпытРаботыНеЗаполнен)
    ;
    
    если Обязанности.Пусто()
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.ОбязанностиНеЗаполнены)
    ;
    
    если Требования.Пусто()
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.ТребованияНеЗаполнено)
    ;
    
    если Условия.Пусто()
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.УсловияРаботыНеЗаполнены)
    ;
    
    если ГрафикРаботы == Неопределено
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.ГрафикРаботыНеЗаполнен)
    ;
    
    если ТипЗанятости == Неопределено
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.ТипЗанятостиНеЗаполнен)
    ;
    
    если не ЗаработнаяПлата.ПроверитьЗаполнение(Обязательное = Ложь, ДиапазонСумм = Истина).Пусто()
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.НекорректноеЗначениеЗаработнойПлаты)
    ;
    
    если КоличествоШтатныхЕдиниц < 1
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.НекорректноеКоличествоШтатныхЕдиниц)
    ;
        
    если НаселенныеПункты.Пусто()
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.НаселенныйПунктНеЗаполнен)
    ;
    
    если ЗаявкиНаПодбор.РеквизитМаршрутСогласованияОбязателен(Статус)
        и МаршрутСогласования == Неопределено
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.МаршрутСогласованияНеЗаполнен)
    ;
    
    если ЗаявкиНаПодбор.РеквизитРекрутерОбязателен(Статус)
        и Рекрутер == Неопределено
        Ошибки.Добавить(ОшибкиПроверкиЗаполнения.РекрутерНеЗаполнен)
    ;
    
    если Ошибки.Размер() > 0
        выбросить новый ПроверкаЗаполнения.ИсключениеПроверкиЗаполнения("При проверке заполнения выявлены ошибки", Ошибки = Ошибки)
    ;
;


метод УстановитьПрефикс(ПараметрыЗаписи: ЗаявкиНаПодбор.ПараметрыЗаписи)
    если ЭтоНовый()
        выбор ОбменДанными.ВидТекущегоПриложения()
        когда ВидПриложения.Hr
            ПараметрыЗаписи.Префикс = "Н"
        когда ВидПриложения.Ess
            ПараметрыЗаписи.Префикс = "Е"
        ;
    ;
;

метод ЗаполнитьНаселенныеПунктыПредставление()
    НаселенныеПунктыПредставление = ""
    для Элемент из НаселенныеПункты
        НаселенныеПунктыПредставление = НаселенныеПунктыПредставление + "%{Элемент.Представление()}, "
    ;
    если НаселенныеПунктыПредставление.Длина() > 0
        НаселенныеПунктыПредставление = НаселенныеПунктыПредставление.ПодстрокаСНачала(НаселенныеПунктыПредставление.Длина() - 2)
    ;
;

@ВПодсистеме
метод УстановитьПлановуюДатуЗакрытия()
    если Срочность != Неопределено
        ПлановаяДатаЗакрытия = СрочностьВакансии.ТекущаяПлановаяДатаЗакрытия(Срочность, Дата)
    иначе
        ПлановаяДатаЗакрытия = Дата{}
    ;
;


метод ПересчитатьРазрешенияЗависимыхОбъектов()
    знч Записи = новый СтатусыЗаявокНаПодбор.НаборЗаписей()
    Записи.Фильтр.Заявка.Установить(Ссылка)
    Записи.Прочитать()
    для Запись из Записи
        СтатусыЗаявокНаПодбор.ПересчитатьРазрешенияДоступаДляОбъектов([Запись])
    ;
;

метод УстановитьСтатус(ПараметрыЗаписи: ЗаявкиНаПодбор.ПараметрыЗаписи)
    если ПараметрыЗаписи.Статус != Неопределено
        СтатусыЗаявокНаПодбор.Установить(Ссылка, ПараметрыЗаписи.Статус)
    иначе если ЭтоНовый()
        СтатусыЗаявокНаПодбор.Установить(Ссылка, СтатусыЗаявкиНаПодбор.Черновик)
    ;
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередУдалением(ПараметрыУдаления: ЗаявкиНаПодбор.ПараметрыУдаления)
    СтатусыЗаявокНаПодбор.Удалить(Ссылка)
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<СогласованияДокументов>, "Документ")
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<ПодписиДокументов>, "Документ")
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПослеУдаления(ПараметрыУдаления: ЗаявкиНаПодбор.ПараметрыУдаления)
    исп КонтекстДоступа.Привилегированный()
    ЗаявкиНаПодбор.ПослеУдаленияДополнение(Ссылка, Истина)
;

@Обработчик
метод ПриСозданииКопии(Источник: ЗаявкиНаПодбор.Данные)
    Дата = Дата.Сейчас()
;