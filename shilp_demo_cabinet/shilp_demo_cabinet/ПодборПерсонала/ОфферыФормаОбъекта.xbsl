импорт ИнтерфейсныеКомпонентыСтандартные
импорт КонтрольДоступа
импорт УниверсальныеМеханизмы
импорт Компания
импорт УправлениеПерсоналом
импорт ОбщиеСтандартные
импорт ФизическиеЛица

@ВПодсистеме
@НаСервере @НаКлиенте
структура ДанныеВладельца
    знч Должность: Должности.Ссылка?
    знч Подразделение: СтруктураПредприятия.Ссылка?
    знч Руководитель: ФизическиеЛица.Ссылка?
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеВладельца(РассматриваемыйКандидат: РассматриваемыеКандидаты.Ссылка?): ДанныеВладельца
    исп Результат = Запрос{
        ВЫБРАТЬ
            ЗаявкиНаПодбор.Должность.ЗаменитьNull(Неопределено) КАК Должность,
            ЗаявкиНаПодбор.Подразделение.ЗаменитьNull(Неопределено) КАК Подразделение
        ИЗ
            РассматриваемыеКандидаты КАК РассматриваемыеКандидаты
            ЛЕВОЕ СОЕДИНЕНИЕ ЗаявкиНаПодбор КАК ЗаявкиНаПодбор
                ПО ЗаявкиНаПодбор.Ссылка == РассматриваемыеКандидаты.Вакансия.ЗаявкаНаПодбор
        ГДЕ 
            РассматриваемыеКандидаты.Ссылка == %РассматриваемыйКандидат

    }.Выполнить()

    знч ДанныеЗаявки = Результат.Единственный()

    возврат новый ДанныеВладельца(
        ДанныеЗаявки.Должность,
        ДанныеЗаявки.Подразделение,
        РуководительПодразделения(ДанныеЗаявки.Подразделение))
;

@ВПодсистеме
@НаСервере @НаКлиенте
структура ДополнительныеДанные
    пер ПрисоединенныеФайлы: ПрисоединенныеФайлы
    пер ФайлОффера: ПрисоединенныеФайлы
    пер ЕстьПолномочиеИзмененияОффера: Булево
    пер Статус: СтатусОффера
    пер ДолжностиПодразделения: Массив<Должности.Ссылка> 
    пер ДанныеВладельца: ДанныеВладельца?
;

@НаСервере @ДоступноСКлиента
статический метод ДополнительныеДанные(РассматриваемыйКандидат: РассматриваемыеКандидаты.Ссылка): ДополнительныеДанные
    исп КонтекстДоступа.Привилегированный()
    знч ДополнительныеДанные = новый ДополнительныеДанные()
    ДополнительныеДанные.ЕстьПолномочиеИзмененияОффера = КонтрольДоступа.ЕстьПравоНаПолномочие(ПодборПерсонала.ПолномочиеИзменениеОффера())
    ДополнительныеДанные.ДанныеВладельца = ДанныеВладельца(РассматриваемыйКандидат)
    ДополнительныеДанные.ДолжностиПодразделения = ДолжностиПодразделения(ДополнительныеДанные.ДанныеВладельца.Подразделение)
    возврат ДополнительныеДанные
;

@НаСервере @ДоступноСКлиента
статический метод ДополнительныеДанные(Оффер: Офферы.Ссылка?, Подразделение: СтруктураПредприятия.Ссылка?): ДополнительныеДанные
    исп Привилегированный = КонтекстДоступа.Привилегированный()
    знч ДополнительныеДанные = новый ДополнительныеДанные()
    если Оффер != Неопределено
        ДополнительныеДанные.ПрисоединенныеФайлы = ПрисоединенныеФайлы(Оффер)
        ДополнительныеДанные.Статус = СтатусыОффера.Получить(Оффер)
    ;
    Привилегированный.Закрыть()
    ДополнительныеДанные.ЕстьПолномочиеИзмененияОффера = КонтрольДоступа.ЕстьПравоНаПолномочие(ПодборПерсонала.ПолномочиеИзменениеОффера())
    ДополнительныеДанные.ДолжностиПодразделения = ДолжностиПодразделения(Подразделение)
    возврат ДополнительныеДанные
;

метод ПрочитатьДополнительныеДанные()
    ДополнительныеДанные = ДополнительныеДанные(КлючОбъекта, Объект.Подразделение)
    если ЭтоНовый() и Кандидат != Неопределено
        ДополнительныеДанные = ДополнительныеДанные(Кандидат)
        Объект.Должность = ДополнительныеДанные.ДанныеВладельца.Должность
        Объект.Подразделение = ДополнительныеДанные.ДанныеВладельца.Подразделение
        Объект.Руководитель = ДополнительныеДанные.ДанныеВладельца.Руководитель
    иначе
        ДополнительныеДанные = ДополнительныеДанные(КлючОбъекта, Объект.Подразделение)
    ;
;

@Обработчик
метод ПослеЧтения()
    если ЭтоНовый()
        Объект.РассматриваемыйКандидат = Кандидат
    ;
    ПрочитатьДополнительныеДанные()
    ИнтерфейсныеКомпоненты.ИнициализироватьПодчиненныеКомпоненты(Компоненты)
;

метод Заголовок(): Строка
    возврат ЭтоНовый() ? "Создание оффера" : "Предложение от %{Объект.Дата}"
;

конст СООБЩЕНИЕ_ОБЯЗАТЕЛЬНОЕ_ПОЛЕ = "Обязательно для заполнения"

метод ЗаписатьСОбработкойОшибок(): Булево
    ИнтерфейсныеКомпоненты.СброситьРезультатПроверкиДанных(Компоненты)
    попытка
        ПараметрыЗаписи.ПрисоединенныеФайлы = ДополнительныеДанные.ПрисоединенныеФайлы
        Записать()
        возврат Истина
    поймать Исключение: ПроверкаЗаполнения.ИсключениеПроверкиЗаполнения
        знч ОбработкаОшибок: Соответствие<Перечисление, ()->ничто> = {
            Офферы.Объект.ОшибкиПроверкиЗаполнения.ПодразделениеНеЗаполнено: метод() ->
                Компоненты.Подразделение.РезультатПроверкиДанных = РезультатПроверкиДанных.Ошибка
                Компоненты.Подразделение.СообщениеОшибка = ПроверкаЗаполнения.СООБЩЕНИЕ_ОБЯЗАТЕЛЬНОЕ_ПОЛЕ
                ;,
            Офферы.Объект.ОшибкиПроверкиЗаполнения.ДолжностьНеЗаполнена: метод() ->
                Компоненты.Должность.РезультатПроверкиДанных = РезультатПроверкиДанных.Ошибка
                Компоненты.Должность.СообщениеОшибка = ПроверкаЗаполнения.СООБЩЕНИЕ_ОБЯЗАТЕЛЬНОЕ_ПОЛЕ
                ;,
            Офферы.Объект.ОшибкиПроверкиЗаполнения.РуководительНеЗаполнено: метод() ->
                Компоненты.Руководитель.РезультатПроверкиДанных = РезультатПроверкиДанных.Ошибка
                Компоненты.Руководитель.СообщениеОшибка = ПроверкаЗаполнения.СООБЩЕНИЕ_ОБЯЗАТЕЛЬНОЕ_ПОЛЕ
                ;,
            Офферы.Объект.ОшибкиПроверкиЗаполнения.НекорректноеЗначениеЗаработнойПлаты: метод() ->
                Компоненты.ЗаработнаяПлата.ПроверитьЗаполнение()
                ;,
            Офферы.Объект.ОшибкиПроверкиЗаполнения.ДатаВыходаНаРаботуНеУказана: метод() ->
                Компоненты.ДатаВыходаНаРаботу.РезультатПроверкиДанных = РезультатПроверкиДанных.Ошибка
                Компоненты.ДатаВыходаНаРаботу.СообщениеОшибка = ПроверкаЗаполнения.СООБЩЕНИЕ_ОБЯЗАТЕЛЬНОЕ_ПОЛЕ
                ;,
            Офферы.Объект.ОшибкиПроверкиЗаполнения.ДатаВыходаНаРаботуРаньшеДатыПринятияОффера: метод() ->
                Компоненты.ДатаВыходаНаРаботу.РезультатПроверкиДанных = РезультатПроверкиДанных.Предупреждение
                Компоненты.ДатаВыходаНаРаботу.СообщениеПредупреждение = "Дата выхода должна быть больше даты принятия"
                ;,
            Офферы.Объект.ОшибкиПроверкиЗаполнения.СрокПринятияНеУказан: метод() ->
                Компоненты.СрокПринятия.РезультатПроверкиДанных = РезультатПроверкиДанных.Ошибка
                Компоненты.СрокПринятия.СообщениеОшибка = ПроверкаЗаполнения.СООБЩЕНИЕ_ОБЯЗАТЕЛЬНОЕ_ПОЛЕ
                ;,
            Офферы.Объект.ОшибкиПроверкиЗаполнения.СрокПринятияРаньшеТекущейДаты: метод() ->
                Компоненты.СрокПринятия.РезультатПроверкиДанных = РезультатПроверкиДанных.Предупреждение
                Компоненты.СрокПринятия.СообщениеПредупреждение = "Дата принятия должна быть больше текущей даты"
                ;
        }
        ПроверкаЗаполнения.ОбработатьОшибкиЗаполнения(Исключение, ОбработкаОшибок)
        возврат Ложь
    ;
;

@НаСервере @ДоступноСКлиента
статический метод СохранитьPdfПредставление(Оффер: Офферы.Ссылка): ДвоичныйОбъект.Ссылка
    знч ОфферPdf = Офферы.СформироватьPdfПредставление(Оффер)
    Офферы.СохранитьPdfПредставление(Оффер, ОфферPdf)
    возврат ОфферPdf.Ссылка
;

метод СформироватьPdfПредставление(): ДвоичныйОбъект.Ссылка?
    если ЗаписатьСОбработкойОшибок()
        возврат СохранитьPdfПредставление(КлючОбъекта)
    ;
    возврат Неопределено
;

метод ОбновитьСписокФайлов()
    ДополнительныеДанные.ПрисоединенныеФайлы = ПрисоединенныеФайлы(КлючОбъекта)
;

метод ПрисоединенныеФайлыУдалить(Источник: ПрисоединенныеФайлыКомпонент, Событие: СобытиеСДанными<ПрисоединенныйФайл>)
    если Событие.Данные.Ссылка != Неопределено
        знч ИндексУдаляемогоФайла = ДополнительныеДанные.ПрисоединенныеФайлы.Файлы.Найти(Событие.Данные)
        ДополнительныеДанные.ПрисоединенныеФайлы.Файлы[ИндексУдаляемогоФайла].Удален = Истина
    ;
;

@НаСервере @ДоступноСКлиента
статический метод ПрисоединенныеФайлы(Оффер: Офферы.Ссылка?): ПрисоединенныеФайлы
    пер ПрисоединенныеФайлы: ПрисоединенныеФайлы
    если Оффер != Неопределено
        знч ВидыФайлов = [ВидыФайла.Вложение, ВидыФайла.ДополнительноеПредставлениеЭлектронногоДокумента]
        ПрисоединенныеФайлы = ПрисоединенныеФайлыМенеджер.ПрисоединенныеФайлы(Оффер!, ВидыФайлов)
    ;
    возврат ПрисоединенныеФайлы
;

метод ОсновнаяКомандаФормы(): Команда?
    если не ДополнительныеДанные.ЕстьПолномочиеИзмененияОффера
        возврат Неопределено   
    ;
    выбор ДополнительныеДанные.Статус
    когда Черновик
        возврат новый ОбычнаяКоманда(Представление = "Сохранить", Обработчик = &СохранитьОбработчик)
    когда ОтправленКандидату
        возврат новый ОбычнаяКоманда(Представление = "Принять", Обработчик = &ПринятьОбработчик)
    иначе
        возврат Неопределено
    ;
;

метод СохранитьОбработчик(Команда: ОбычнаяКоманда)
    если не ЗаписатьСОбработкойОшибок()
        возврат   
    ;
    ОфферПослеИзменения.Оповестить(Объект.РассматриваемыйКандидат, КлючОбъекта)
;

метод ОтправитьКандидатуВидимость(): Булево
    возврат ДополнительныеДанные.ЕстьПолномочиеИзмененияОффера и ДополнительныеДанные.Статус == СтатусОффера.Черновик
;

метод ОтправитьКандидатуОбработчик(Команда: ОбычнаяКоманда)
    если СформироватьPdfПредставление() != Неопределено
        если Диалог.Вопрос(
            Текст = "Вы уверены, что хотите отправить оффер без предпросмотра?",
            Кнопки = [КнопкаДиалога.Да, КнопкаДиалога.Отмена]) != КнопкаДиалога.Да
            возврат
        ;
        если не ЗаписатьСОбработкойОшибок()
            возврат   
        ;
        Офферы.ОтправитьКандидату(КлючОбъекта)
        ПрочитатьДополнительныеДанные()
        ОфферПослеИзменения.Оповестить(Объект.РассматриваемыйКандидат, КлючОбъекта)
        СтатусРассматриваемогоКандидатаПослеИзменения.Оповестить(Объект.РассматриваемыйКандидат)
        Закрыть()
    ;
;

метод ОткрытьПредпросмотрОбработчик(Команда: ОбычнаяКоманда)
    если не ЗаписатьСОбработкойОшибок()
        возврат   
    ;
    знч ПредставлениеОффера = СформироватьPdfПредставление()
    если ПредставлениеОффера == Неопределено
        возврат
    ;
    знч Результат = ФормаПредпросмотрОффера.ОткрытьВМодальномОкне(
        ПредставлениеОффераPdf = ПредставлениеОффера,
        ТолькоЧтение = Истина
    )
    если Результат == Истина
        Офферы.ОтправитьКандидату(КлючОбъекта)
        ПрочитатьДополнительныеДанные()
        ОфферПослеИзменения.Оповестить(Объект.РассматриваемыйКандидат, КлючОбъекта)
        СтатусРассматриваемогоКандидатаПослеИзменения.Оповестить(Объект.РассматриваемыйКандидат)
        Закрыть()
    иначе
        ОбновитьСписокФайлов()
    ;
;

метод ОтозватьВидимость(): Булево
    возврат ДополнительныеДанные.ЕстьПолномочиеИзмененияОффера 
        и ДополнительныеДанные.Статус == СтатусОффера.ОтправленКандидату или ДополнительныеДанные.Статус == СтатусОффера.Принят
;

метод ОтозватьОбработчик(Команда: ОбычнаяКоманда)
    если Диалог.Вопрос(
        Текст = "Вы уверены, что хотите отозвать оффер?",
        Кнопки = [КнопкаДиалога.Да, КнопкаДиалога.Отмена]) != КнопкаДиалога.Да
        возврат
    ;
    Офферы.Отозвать(КлючОбъекта)
    ПрочитатьДополнительныеДанные()
    ОфферПослеИзменения.Оповестить(Объект.РассматриваемыйКандидат, КлючОбъекта)
    Закрыть()
;

метод ПринятьОбработчик(Команда: ОбычнаяКоманда)
    если Диалог.Вопрос(
        Текст = "Вы уверены, что хотите принять оффер?",
        Кнопки = [КнопкаДиалога.Да, КнопкаДиалога.Отмена]) != КнопкаДиалога.Да
        возврат
    ;
    Офферы.Принять(КлючОбъекта)
    ПрочитатьДополнительныеДанные()
    ОфферПослеИзменения.Оповестить(Объект.РассматриваемыйКандидат, КлючОбъекта)
    СтатусРассматриваемогоКандидатаПослеИзменения.Оповестить(Объект.РассматриваемыйКандидат)
    Закрыть()
;

метод ОтклонитьВидимость(): Булево
    возврат ДополнительныеДанные.ЕстьПолномочиеИзмененияОффера 
        и ДополнительныеДанные.Статус == СтатусОффера.ОтправленКандидату
;

метод ОтклонитьОбработчик(Команда: ОбычнаяКоманда)
    знч Результат = ФормаВыбораПричинПрекращенияРассмотрения.Выбрать(ВидыПрекращенияРассмотрения.ОтказКандидата)
    если Результат != Неопределено
        Офферы.Отклонить(КлючОбъекта, Результат.Причина, Результат.Комментарий)
        ПрочитатьДополнительныеДанные()
        ОфферПослеИзменения.Оповестить(Объект.РассматриваемыйКандидат, КлючОбъекта)
        СтатусРассматриваемогоКандидатаПослеИзменения.Оповестить(Объект.РассматриваемыйКандидат)
        Закрыть()
    ;
;

@НаСервере @НаКлиенте
структура ПодразделениеДолжностьРуководитель
    обз знч Подразделение: СтруктураПредприятия.Ссылка?
    обз знч Должность: Должности.Ссылка?
    обз знч Руководитель: ФизическиеЛица.Ссылка?
;

@НаСервере @ДоступноСКлиента
статический метод ПодразделениеДолжностьРуководитель(ПозицияШтатногоРасписания: ШтатноеРасписание.Ссылка): ПодразделениеДолжностьРуководитель
    знч Запрос = Запрос{
        ВЫБРАТЬ
            МестоВСтруктуреПредприятия КАК Подразделение,
            Должность КАК Должность,
            МестоВСтруктуреПредприятия.Руководитель.ЗаменитьNull(Неопределено) КАК Руководитель
        ЗАПОЛНИТЬ ПодразделениеДолжностьРуководитель
        ИЗ
            ШтатноеРасписание
        ГДЕ
            Ссылка == %ПозицияШтатногоРасписания
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    возврат РезультатЗапроса.Единственный()
;

метод ПодразделениеПриИзменении(Источник: ПолеВвода<СтруктураПредприятия.Ссылка?>, Событие: СобытиеПриИзменении<СтруктураПредприятия.Ссылка?>)
    ОбновитьДолжностиПодразделения()
    ОбновитьРуководителя()
;

метод ОбновитьДолжностиПодразделения()
    ДополнительныеДанные.ДолжностиПодразделения = ДолжностиПодразделения(Объект.Подразделение)
    если Объект.Должность != Неопределено и не ДополнительныеДанные.ДолжностиПодразделения.Содержит(Объект.Должность!)
        Объект.Должность = Неопределено
    ;    
;

метод ОбновитьРуководителя()
    Объект.Руководитель = РуководительПодразделения(Объект.Подразделение)    
;

метод ДолжностьСписокВыбора(): Массив<ЭлементСпискаЗначений<Должности.Ссылка?>>
    возврат ДополнительныеДанные.ДолжностиПодразделения
        .Преобразовать(Должность -> новый ЭлементСпискаЗначений<Должности.Ссылка?>(Должность))
;

@НаСервере @ДоступноСКлиента
статический метод ДолжностиПодразделения(Подразделение: СтруктураПредприятия.Ссылка?): Массив<Должности.Ссылка>
    возврат ШтатноеРасписание.ДолжностиПодразделения(Подразделение)
;

@НаСервере @ДоступноСКлиента
статический метод РуководительПодразделения(Подразделение: СтруктураПредприятия.Ссылка?): ФизическиеЛица.Ссылка?
    если Подразделение == Неопределено
        возврат Неопределено
    ;
    возврат ОрганизационнаяСтруктура.ДанныеРуководителяПодразделения(Подразделение!)?.Руководитель
;

метод ПриИзмененииПшр(Источник: ПолеВвода<ШтатноеРасписание.Ссылка?>, Событие: СобытиеПриИзменении<ШтатноеРасписание.Ссылка?>)
    если Объект.ПозицияШтатногоРасписания != Неопределено
        и Диалог.Вопрос("Заполнить в соответствии с ПШР?",
        [КнопкаДиалога.Да, КнопкаДиалога.Нет]) == КнопкаДиалога.Да

        знч Результат = ПодразделениеДолжностьРуководитель(Объект.ПозицияШтатногоРасписания)
        Объект.Подразделение = Результат.Подразделение
        Объект.Должность = Результат.Должность
        Объект.Руководитель = Результат.Руководитель
    ;
;