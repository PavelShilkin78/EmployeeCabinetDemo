импорт ИнтерфейсныеКомпонентыСтандартные
импорт Компания
импорт КонтрольДоступа
импорт ФизическиеЛица
импорт УниверсальныеМеханизмы
импорт СтандартноеПриложение

@НаСервере @ДоступноСКлиента
статический метод ТолькоЧтение(): Булево
    возврат не КонтрольДоступа.ЕстьПравоНаПолномочие(ПодборПерсонала.ПолномочиеИзменениеСобеседования())
;

@НаСервере @ДоступноСКлиента
статический метод ПолучитьФайлы(Собеседование: Собеседования.Ссылка): ПрисоединенныеФайлы
    возврат ПрисоединенныеФайлыМенеджер.ПрисоединенныеФайлы(Собеседование)
;

@НаСервере @ДоступноСКлиента
статический метод ЗаписатьПрисоединенныейФайлы(ПрисоединенныеФайлы: ПрисоединенныеФайлы)
    ПрисоединенныеФайлыМенеджер.Записать(ПрисоединенныеФайлы)
;

@Обработчик
метод ПослеЧтения()
    ТолькоЧтение = ТолькоЧтение()
    если ЭтоНовый()
        Объект.Кандидат = Кандидат
    иначе
        ПрисоединенныеФайлы = ПолучитьФайлы(КлючОбъекта)
    ;
;

@Обработчик
метод ПослеЗаписиОбъекта()
    ПрисоединенныеФайлы.Владелец = Объект.Ссылка
    ЗаписатьПрисоединенныейФайлы(ПрисоединенныеФайлы)
    СобеседованиеПослеИзменения.Оповестить()
;

метод ИзображениеФорматСобеседования(): ДвоичныйОбъект.Ссылка
    знч Формат= Объект.Формат
    возврат Формат.Изображение()
;

метод ВидимостьОнлайнФормата(): Булево
    возврат Объект.Формат == ФорматСобеседования.Онлайн
;

метод АдресДляПодключенияПриНажатии(Источник: Надпись, Событие: СобытиеПриНажатии)
    знч АдресДляПодключения = Объект.АдресДляПодключения
    если не АдресДляПодключения.Пусто()
        ПерейтиПоСсылке(Объект.АдресДляПодключения, Истина)
    ;
;

метод ВидимостьОффлайнФормата(): Булево
    возврат Объект.Формат == ФорматСобеседования.Оффлайн
;

метод УстановитьФормат(Формат: ФорматСобеседования)
    Объект.Формат = Формат
;

метод КомандыФорматСобеседования(): ГруппаКомандногоИнтерфейса<Команда>
    знч КомандыФормат = новый ГруппаКомандногоИнтерфейса<Команда>(Представление = "")
    для Элемент из ФорматСобеседования.Элементы()
        КомандыФормат.Элементы.Добавить(
            новый ОбычнаяКоманда(
                Представление = Элемент.Представление(),
                Изображение = Элемент.Изображение(),
                Обработчик = Команда -> УстановитьФормат(Элемент)
            )
        )
    ;
    возврат КомандыФормат
;

метод СписокФорматов(): Массив<ЭлементСпискаЗначений<ФорматСобеседования?>>
    знч Элементы = новый Массив<ЭлементСпискаЗначений<ФорматСобеседования?>>()
    для Формат из ФорматСобеседования.Элементы()
        Элементы.Добавить(новый ЭлементСпискаЗначений<ФорматСобеседования?>(
            Значение = Формат, Представление = Формат.Представление()))
    ;
    возврат Элементы
;

метод ОриентацияКорневойГруппы(): ОриентацияСодержимого
    выбор КлиентскоеУстройство.ВидИнтерфейса
    когда ВидИнтерфейса.Компьютер
        возврат ОриентацияСодержимого.Горизонтальная
    когда ВидИнтерфейса.Планшет
        если КлиентскоеУстройство.ВысотаОкнаПриложения > КлиентскоеУстройство.ШиринаОкнаПриложения
            возврат ОриентацияСодержимого.Вертикальная
        иначе
            возврат ОриентацияСодержимого.Горизонтальная
        ;
    иначе
        возврат ОриентацияСодержимого.Вертикальная
    ;
;

@ВПодсистеме
@НаСервере @НаКлиенте
структура ДанныеСтрокиУчастники
    обз пер Участник: ФизическиеЛица.Ссылка
    обз пер Миниатюра: ДвоичныйОбъект.Ссылка?
    обз пер ПредставлениеУчастника: Строка
;

метод МиниатюраУчастника(ДанныеСтроки: ДанныеСтрокиУчастники): ДвоичныйОбъект.Ссылка
    возврат ДанныеСтроки.Миниатюра
;

метод ПредставлениеУчастника(ДанныеСтроки: ДанныеСтрокиУчастники): Строка
    возврат ДанныеСтроки.ПредставлениеУчастника
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеТаблицыУчастники(ФизическиеЛица: Массив<ФизическиеЛица.Ссылка>): Массив<СтрокаСпискаСМиниатюройКомпонентДанных>
    знч Данные = новый Массив<СтрокаСпискаСМиниатюройКомпонентДанных>()
    знч Запрос = Запрос{
        ВЫБРАТЬ
            ФизическиеЛица.Ссылка КАК Участник,
            ФизическиеЛица.Представление.ЗаменитьNull("") КАК ФизическоеЛицоПредставление,
            Файлы.Хранилище.ЗаменитьNull(Неопределено) КАК Миниатюра,
            ПодразделенияИСотрудники.Позиция.ЗаменитьNull(Неопределено) КАК Позиция
        ИЗ
            ФизическиеЛица КАК ФизическиеЛица
        ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодразделенияИСотрудники КАК ПодразделенияИСотрудники
            ПО ФизическиеЛица.Ссылка В(%ФизическиеЛица)
            И ФизическиеЛица.Ссылка == ПодразделенияИСотрудники.ФизическоеЛицо
            И ПодразделенияИСотрудники.ОсновноеМестоРаботы == Истина
        ЛЕВОЕ СОЕДИНЕНИЕ Файлы КАК Файлы
            ПО ФизическиеЛица.Миниатюра == Файлы.Ссылка
        УПОРЯДОЧИТЬ ПО ФизическоеЛицоПредставление
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    для Элемент из РезультатЗапроса
        знч Миниатюра = Элемент.Миниатюра == Неопределено ? Ресурс{ФотографияПоУмолчанию.svg}.Ссылка : Элемент.Миниатюра
        Данные.Добавить(
            новый СтрокаСпискаСМиниатюройКомпонентДанных(
                Ссылка = Элемент.Участник,
                Изображение = Миниатюра,
                Представление = Элемент.ФизическоеЛицоПредставление,
                ДополнительноеПредставление = Элемент.Позиция?.Представление() ?? ""))
    ;
    возврат Данные
;

метод ДанныеУчастников(): Массив<СтрокаСпискаСМиниатюройКомпонентДанных>
    возврат ДанныеТаблицыУчастники(Объект.Участники)
;

метод ДобавитьУчастника(ФизическоеЛицо: ФизическиеЛица.Ссылка?)
    если ФизическоеЛицо == Неопределено
        возврат
    ;
    если не Объект.Участники.Содержит(ФизическоеЛицо)
        Объект.Участники.Добавить(ФизическоеЛицо)
    ;
;

метод УчастникиПриНажатииВвода(Источник: ПолеВвода<ФизическиеЛица.Ссылка?>, Событие: СобытиеКомпонента)
    ДобавитьУчастника(Источник.Значение)
    Источник.Значение = Неопределено
;

метод УчастникиПриИзменении(Источник: ПолеВвода<ФизическиеЛица.Ссылка?>, Событие: СобытиеПриИзменении<неизвестно>)
    ДобавитьУчастника(Источник.Значение)
    Источник.Значение = Неопределено
;

метод КоличествоУчастников(): Число
    возврат Объект.Участники.Размер()
;

метод УчастникиЗаголовок(): Строка
    знч Количество = КоличествоУчастников()
    если Количество == 0
        возврат "Участники"
    иначе
        возврат "Участники (%Количество)"
    ;
;

метод УдалитьУчастника(Команда: КомандаСПараметром<Массив<СтрокаСпискаСМиниатюройКомпонентДанных>>, Параметр: Массив<СтрокаСпискаСМиниатюройКомпонентДанных>)
    для Элемент из Параметр
        Объект.Участники.Удалить(Элемент.Ссылка как ФизическиеЛица.Ссылка)
    ;
;

метод ЗаписатьИЗакрытьОбработчик(Источник: Команда)
    если ПроверитьЗаполнение()
        Записать()
        Закрыть()
    ;
;

метод ПроверитьЗаполнение(): Булево
    возврат ПроверитьЗаполнениеДатаПроведения()
;

метод ПроверитьЗаполнениеДатаПроведения(): Булево
    Компоненты.ПолеВводаДатаПроведения.СообщениеОшибка = ""
    Компоненты.ПолеВводаДатаПроведения.РезультатПроверкиДанных = РезультатПроверкиДанных.Отсутствует

    знч ДатаПроведения = Объект.ДатаПроведения
    если ДатаПроведения == ДатаВремя{}
        Компоненты.ПолеВводаДатаПроведения.СообщениеОшибка = "Обязательно для заполнения"
        Компоненты.ПолеВводаДатаПроведения.РезультатПроверкиДанных = РезультатПроверкиДанных.Ошибка
        возврат Ложь
    иначе если ДатаПроведения < ДатаВремя.Сейчас()
        Компоненты.ПолеВводаДатаПроведения.СообщениеОшибка = "Дата проведения не может быть меньше текущей"
        Компоненты.ПолеВводаДатаПроведения.РезультатПроверкиДанных = РезультатПроверкиДанных.Ошибка
        возврат Ложь
    ;
    возврат Истина
;

метод ДатаПроведенияПриИзменении(Источник: ПолеВвода<неизвестно>, Событие: СобытиеПриИзменении<неизвестно>)
    ПроверитьЗаполнениеДатаПроведения()    
;

метод ЗаголовокФормы(): Строка
    если ЭтоНовый()
        возврат "Новое собеседование"
    иначе
        возврат "Собеседование"
    ;
;