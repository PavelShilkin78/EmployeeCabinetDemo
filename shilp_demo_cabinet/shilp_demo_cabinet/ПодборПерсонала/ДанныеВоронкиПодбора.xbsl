
импорт СтандартноеПриложение
импорт КонтрольДоступа
импорт ФизическиеЛица
импорт Компания

// КонтрольДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат КонтрольДоступа.РазрешенияДоступаТаблицыРегистраСведений()
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Записи: ЧитаемыйМассив<ДанныеВоронкиПодбора.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ДанныеВоронкиПодбора.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    возврат ПодборПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДляЧтенияДанныхВоронкиПодбора(Записи)
;

структура БазовыйКлючВоронки
    обз знч РассматриваемыйКандидат: РассматриваемыеКандидаты.Ссылка
    обз знч Вакансия: Вакансии.Ссылка
    обз знч Рекрутер: ФизическиеЛица.Ссылка
    обз знч НомерЗаявки: Строка
    обз знч Подразделение: СтруктураПредприятия.Ссылка
    знч ПорядокВоронки: Число
;

метод БазовыйКлючЗаписи(РассматриваемыйКандидат: РассматриваемыеКандидаты.Ссылка): БазовыйКлючВоронки?
    знч Запрос = Запрос{
        Выбрать
            Вакансии.Ссылка как Вакансия,
            Вакансии.Рекрутер как Рекрутер,
		    Заявки.Номер как НомерЗаявки,
		    Заявки.Подразделение как Подразделение
        Из
            РассматриваемыеКандидаты как РасмКандидаты
            Внутреннее Соединение Вакансии как Вакансии
                По РасмКандидаты.Вакансия == Вакансии.Ссылка
		    Внутреннее Соединение ЗаявкиНаПодбор как Заявки
		        По Вакансии.ЗаявкаНаПодбор == Заявки.Ссылка
        Где
            РасмКандидаты.Ссылка == %РассматриваемыйКандидат
    }
    знч СтрокаРезультата = Запрос.Выполнить().ЕдинственныйИлиУмолчание()
    если СтрокаРезультата == Неопределено
        возврат Неопределено
    ;
    знч БазовыйКлючЗаписи = новый БазовыйКлючВоронки(
        РассматриваемыйКандидат = РассматриваемыйКандидат,
        Вакансия = СтрокаРезультата!.Вакансия,
        Рекрутер = СтрокаРезультата!.Рекрутер,
        НомерЗаявки = СтрокаРезультата!.НомерЗаявки,
        Подразделение = СтрокаРезультата.Подразделение
    )
    возврат БазовыйКлючЗаписи
;

метод ЭтапыВоронкиМежду(ПредыдущйЭтапПорядок: Число, ТекущийЭтапПорядок: Число, ВключаяТекущий: Булево = Истина): Соответствие<Число, СтатусыВоронки.Ссылка>
    знч Запрос = Запрос{
        Выбрать 
            СтатусыВоронки.Ссылка как Статус,
            СтатусыВоронки.Порядок как Порядок
        Из
            СтатусыВоронки как СтатусыВоронки
        Где 
	    СтатусыВоронки.Порядок Между %ПредыдущйЭтапПорядок и %ТекущийЭтапПорядок
            и СтатусыВоронки.Порядок != 99
        Упорядочить По
            СтатусыВоронки.Порядок
    }
    знч АктуальныеЭтапы = новый Соответствие<Число, СтатусыВоронки.Ссылка>()
    исп КонтекстДоступа.Привилегированный()
    знч РезультатЗапроса = Запрос.Выполнить()
    если РезультатЗапроса.Пусто()
        возврат АктуальныеЭтапы
    ;
    для СтрокаРезультата из РезультатЗапроса
        АктуальныеЭтапы.Вставить(СтрокаРезультата.Порядок, СтрокаРезультата.Статус)
    ;
    АктуальныеЭтапы.Удалить(ПредыдущйЭтапПорядок)
    если не ВключаяТекущий
        АктуальныеЭтапы.Удалить(ТекущийЭтапПорядок)
    ;
    возврат АктуальныеЭтапы
;

@ВПодсистеме
метод ДобавитьЭтапы(ЭтапыВоронки: Соответствие<Число, СтатусыВоронки.Ссылка>, ДатаЭтапа: Дата, Кандидат: РассматриваемыеКандидаты.Ссылка,
        БазовыйКлючЗаписи: БазовыйКлючВоронки, ТекущийЭтапПорядок: Число)
    исп КонтекстДоступа.Привилегированный()
    для ПорядокВоронки из ЭтапыВоронки.Ключи()
        знч НаборЗаписей = новый ДанныеВоронкиПодбора.НаборЗаписей()
        НаборЗаписей.Фильтр.Установить(
            РассматриваемыйКандидат = БазовыйКлючЗаписи.РассматриваемыйКандидат,
            ЭтапВоронки = ЭтапыВоронки[ПорядокВоронки]
        )
        знч ЗаписьДанных = новый ДанныеВоронкиПодбора.Запись(
            РассматриваемыйКандидат = БазовыйКлючЗаписи.РассматриваемыйКандидат,
            Вакансия = БазовыйКлючЗаписи.Вакансия,
            Рекрутер = БазовыйКлючЗаписи.Рекрутер,
            НомерЗаявки = БазовыйКлючЗаписи.НомерЗаявки,
            Подразделение = БазовыйКлючЗаписи.Подразделение,
            ЭтапВоронки = ЭтапыВоронки[ПорядокВоронки],
            ПорядокВоронки = ПорядокВоронки,
            ДатаНачалаЭтапа = ДатаЭтапа,
            ДлительностьЭтапа = 0,
            КоличествоПосещений = (ТекущийЭтапПорядок == ПорядокВоронки) ? 1 : 0
        )
        НаборЗаписей.Добавить(ЗаписьДанных)
        НаборЗаписей.Записать()
    ;
;

метод УвеличитьКоличествоПосещений(Этап: СтатусыВоронки.Ссылка, Кандидат: РассматриваемыеКандидаты.Ссылка)
    знч НаборЗаписей = новый ДанныеВоронкиПодбора.НаборЗаписей()
    НаборЗаписей.Фильтр.Установить(
        РассматриваемыйКандидат = Кандидат,
        ЭтапВоронки = Этап
    )
    исп КонтекстДоступа.Привилегированный()
    НаборЗаписей.Прочитать()
    если НаборЗаписей.Пусто()
        возврат
    ;
    знч ЭтапКандидата = НаборЗаписей.Первый()
    ЭтапКандидата.КоличествоПосещений = ЭтапКандидата.КоличествоПосещений + 1
    НаборЗаписей.Записать()
;

метод ЗаписатьДлительностьЭтапа(ПредыдущийЭтап: СтатусыВоронки.Ссылка, ДатаЭтапа: Дата, Кандидат: РассматриваемыеКандидаты.Ссылка)
    знч НаборЗаписей = новый ДанныеВоронкиПодбора.НаборЗаписей()
    НаборЗаписей.Фильтр.Установить(
        РассматриваемыйКандидат = Кандидат,
        ЭтапВоронки = ПредыдущийЭтап
    )
    исп КонтекстДоступа.Привилегированный()
    НаборЗаписей.Прочитать()
    если НаборЗаписей.Пусто()
        возврат
    ;
    знч ПредыдущийЭтапКандидата = НаборЗаписей.Первый()
    ПредыдущийЭтапКандидата.ДлительностьЭтапа = (ДатаЭтапа - ПредыдущийЭтапКандидата.ДатаНачалаЭтапа).Дни
    НаборЗаписей.Записать()
;

@ВПодсистеме
метод ДобавитьЭтапВоронки(Период: Момент, Статус: СтатусыВоронки.Ссылка, Кандидат: РассматриваемыеКандидаты.Ссылка, ПредыдущийСтатус: СтатусыВоронки.Ссылка?)
    знч ДатаЭтапа = Период.ВДатаВремя(ЧасовойПояс.Текущий()).Дата
    знч ТекущийЭтап = Статус.ЗагрузитьОбъект()
    
    знч КлючЗаписи = БазовыйКлючЗаписи(Кандидат)
    если ПредыдущийСтатус != Неопределено
        если КлючЗаписи == Неопределено
            Журналирование.ЗарегистрироватьОшибку("Вторичные данные ДанныеВоронкиПодбора не найдены, сделайте обновление вторичных данных в разделе Настроек")
            возврат
        ;
        знч ПредыдущийЭтапПорядок = ПредыдущийСтатус.ЗагрузитьОбъект().Порядок
        если ПредыдущийЭтапПорядок < ТекущийЭтап.Порядок
            знч ЭтапыВоронки = ЭтапыВоронкиМежду(ПредыдущийЭтапПорядок, ТекущийЭтап.Порядок)
            ДобавитьЭтапы(ЭтапыВоронки, ДатаЭтапа, Кандидат, КлючЗаписи, ТекущийЭтап.Порядок)
            ЗаписатьДлительностьЭтапа(ПредыдущийСтатус, ДатаЭтапа, Кандидат)
        иначе
            УвеличитьКоличествоПосещений(ТекущийЭтап.Ссылка, Кандидат)
        ;
    иначе
        если КлючЗаписи == Неопределено
            Журналирование.ЗарегистрироватьОшибку("При записи вторичных данных ДанныеВоронкиПодбора ожидается наличие данных по Вакансии")
            возврат
        ;
        ДобавитьЭтапы({ТекущийЭтап.Порядок:ТекущийЭтап.Ссылка}, ДатаЭтапа, Кандидат, КлючЗаписи, ТекущийЭтап.Порядок)
    ;
;

@ВПроекте
метод ПересчетВторичныхДанных()
    знч Запрос = Запрос{
    Выбрать
        Вакансии.Ссылка как Вакансия,
        Заявки.Номер как НомерЗаявки,
        Заявки.Подразделение как Подразделение,
        Вакансии.Рекрутер как Рекрутер,
        РассматриваемыеКандидаты.Ссылка как Кандидат
    Поместить 
        втРассматриваемыеКандидаты
    Из
        РассматриваемыеКандидаты Как РассматриваемыеКандидаты
        Внутреннее Соединение Вакансии как Вакансии
        по РассматриваемыеКандидаты.Вакансия == Вакансии.Ссылка
        Внутреннее Соединение ЗаявкиНаПодбор как Заявки
        по Вакансии.ЗаявкаНаПодбор == Заявки.Ссылка
    ;
 	Выбрать
        Количество(СтатусыРассматриваемыхКандидатов.Период) как КоличествоПосещений,
        Минимум(СтатусыРассматриваемыхКандидатов.Период) как Период,
        СтатусыРассматриваемыхКандидатов.Статус как Статус,
        РассматриваемыеКандидаты.Ссылка как Кандидат
    Поместить 
        втСтатусыРассматриваемыхКандидатов
    Из
        РассматриваемыеКандидаты как РассматриваемыеКандидаты
        Внутреннее Соединение СтатусыРассматриваемыхКандидатов как СтатусыРассматриваемыхКандидатов
        По РассматриваемыеКандидаты.Ссылка == СтатусыРассматриваемыхКандидатов.Кандидат
	Сгруппировать По
		РассматриваемыеКандидаты.Ссылка,
		СтатусыРассматриваемыхКандидатов.Статус
	;
	Выбрать
        РассматриваемыеКандидаты.Вакансия как Вакансия,
        РассматриваемыеКандидаты.НомерЗаявки как НомерЗаявки,
        РассматриваемыеКандидаты.Подразделение как Подразделение,
        РассматриваемыеКандидаты.Рекрутер как Рекрутер,
        СтатусыВоронки.Порядок как ПорядокВоронки,
        СтатусыРассматриваемыхКандидатов.Период как Период,
        СтатусыРассматриваемыхКандидатов.Статус.ЗаменитьNull(Неопределено) как СтатусВоронки,
        СтатусыРассматриваемыхКандидатов.КоличествоПосещений как КоличествоПосещений,
        РассматриваемыеКандидаты.Кандидат как Кандидат
    Из
        втРассматриваемыеКандидаты как РассматриваемыеКандидаты
        Внутреннее Соединение втСтатусыРассматриваемыхКандидатов как СтатусыРассматриваемыхКандидатов
        По РассматриваемыеКандидаты.Кандидат == СтатусыРассматриваемыхКандидатов.Кандидат
        Внутреннее Соединение СтатусыВоронки как СтатусыВоронки
        По СтатусыРассматриваемыхКандидатов.Статус == СтатусыВоронки.Ссылка
    Упорядочить По 
        РассматриваемыеКандидаты.Кандидат,
        СтатусыВоронки.Порядок
    }
    пер ЭтапыВоронкиКандидатаПоДатам: Соответствие<Момент, ДанныеВоронкиПодбора.Запись>?
    пер Кандидат: РассматриваемыеКандидаты.Ссылка?
    знч ЭтапыВоронкиВсе = СтатусыВоронки.ВсеПоПорядку()
    
    исп КонтекстДоступа.Привилегированный()
    знч Результат = Запрос.Выполнить()
    если не Результат.Пусто()
        знч НаборЗаписей = новый ДанныеВоронкиПодбора.НаборЗаписей()
        НаборЗаписей.Фильтр.Установить()
        НаборЗаписей.Записать(Истина)
    
        для СтрокаРезультата из Результат
            знч НачалоЭтапа = СтрокаРезультата.Период.ВДатаВремя(ЧасовойПояс.Текущий()).Дата
            если СтрокаРезультата.Кандидат != Кандидат
                если Кандидат != Неопределено
                    пер ВсеЭтапыКандидата = ЗаполнитьДлительность(ЭтапыВоронкиКандидатаПоДатам)
                    если ВсеЭтапыКандидата.Размер() > 1
                        ВсеЭтапыКандидата.ВставитьВсе(ПромежуточныеЭтапы(ВсеЭтапыКандидата, ЭтапыВоронкиВсе))
                    ;
                    для Этап из ВсеЭтапыКандидата.Значения()
                        НаборЗаписей.Добавить(Этап)               
                    ;
                ;
                Кандидат = СтрокаРезультата.Кандидат
                ЭтапыВоронкиКандидатаПоДатам = новый Соответствие<Момент, ДанныеВоронкиПодбора.Запись>()
            ;
            ЭтапыВоронкиКандидатаПоДатам.Вставить(
                СтрокаРезультата.Период,
                новый ДанныеВоронкиПодбора.Запись(
                    Вакансия = СтрокаРезультата.Вакансия,
                    НомерЗаявки = СтрокаРезультата.НомерЗаявки,
                    Подразделение = СтрокаРезультата.Подразделение,
                    РассматриваемыйКандидат = СтрокаРезультата.Кандидат,
                    Рекрутер = СтрокаРезультата.Рекрутер,
                    ЭтапВоронки = СтрокаРезультата.СтатусВоронки,
                    ПорядокВоронки = СтрокаРезультата.ПорядокВоронки,
                    ДатаНачалаЭтапа = НачалоЭтапа,
                    ДлительностьЭтапа = 0,
                    КоличествоПосещений = СтрокаРезультата.КоличествоПосещений
                )               
            )
        ;
        если ЭтапыВоронкиКандидатаПоДатам.Размер() > 0
            пер ВсеЭтапыКандидата = ЗаполнитьДлительность(ЭтапыВоронкиКандидатаПоДатам)
            если ВсеЭтапыКандидата.Размер() > 1
                ВсеЭтапыКандидата.ВставитьВсе(ПромежуточныеЭтапы(ВсеЭтапыКандидата, ЭтапыВоронкиВсе))
            ;
            для Этап из ВсеЭтапыКандидата.Значения()
                НаборЗаписей.Добавить(Этап)               
            ;
        ;
        НаборЗаписей.Записать()
    ;
;


@ВПодсистеме
метод ПромежуточныеЭтапы(ЭтапыВоронкиКандидата: Соответствие<Число, ДанныеВоронкиПодбора.Запись>,
            ЭтапыВоронкиВсе: Соответствие<Число, СтатусыВоронки.Ссылка>): Соответствие<Число, ДанныеВоронкиПодбора.Запись>
    знч ЭтапыПоПорядку = ЭтапыВоронкиКандидата.Ключи().Сортировать(НаправлениеСортировки.ПоВозрастанию)
    знч ВсеЭтапыВоронки = новый Соответствие<Число, ДанныеВоронкиПодбора.Запись>()
    пер ИндексЭтапа = 0
    для Ключ = 1 по ЭтапыПоПорядку.Последний()
        если не ЭтапыВоронкиВсе.СодержитКлюч(Ключ)
            продолжить
        ;
        если не ЭтапыВоронкиКандидата.СодержитКлюч(Ключ)
            знч ЭтапЗапись = ЭтапыВоронкиКандидата[ЭтапыПоПорядку[ИндексЭтапа]].СоздатьКопию()
            ЭтапЗапись.ЭтапВоронки = ЭтапыВоронкиВсе[Ключ]
            ЭтапЗапись.ПорядокВоронки = Ключ
            ЭтапЗапись.ДлительностьЭтапа = 0
            ЭтапЗапись.КоличествоПосещений = 0
            ВсеЭтапыВоронки.Вставить(Ключ, ЭтапЗапись)
        иначе
            ИндексЭтапа += 1    
        ;
    ;
    возврат ВсеЭтапыВоронки
;	

@ВПодсистеме
метод ЗаполнитьДлительность(ЭтапыВоронкиКандидата: Соответствие<Момент, ДанныеВоронкиПодбора.Запись>): Соответствие<Число, ДанныеВоронкиПодбора.Запись>
    знч ЭтапыПоДатам = ЭтапыВоронкиКандидата.Ключи().Сортировать(НаправлениеСортировки.ПоВозрастанию)
    для Индекс = 0 по ЭтапыПоДатам.Граница() - 1
        знч ДатаОкончанияЭтапа = ЭтапыВоронкиКандидата[ЭтапыПоДатам[Индекс + 1]].ДатаНачалаЭтапа
        знч ДатаНачалаЭтапа = ЭтапыВоронкиКандидата[ЭтапыПоДатам[Индекс]].ДатаНачалаЭтапа
        если ДатаОкончанияЭтапа > ДатаНачалаЭтапа
            ЭтапыВоронкиКандидата[ЭтапыПоДатам[Индекс]].ДлительностьЭтапа = (ДатаОкончанияЭтапа - ДатаНачалаЭтапа).Дни
        ;
    ;
    знч ЭтапыВоронкиСгруппированные = ЭтапыВоронкиКандидата.Значения().ГруппироватьПо(Элемент -> Элемент.ПорядокВоронки)
    знч ЭтапыВоронки = новый Соответствие<Число, ДанныеВоронкиПодбора.Запись>()
    для Ключ из ЭтапыВоронкиСгруппированные.Ключи()
        знч ГруппаЭтапов = ЭтапыВоронкиСгруппированные[Ключ]
        пер ДлительностьЭтапаСумма = 0
        для Этап из ГруппаЭтапов
            ДлительностьЭтапаСумма += Этап.ДлительностьЭтапа
        ;
        ГруппаЭтапов.Первый().ДлительностьЭтапа = ДлительностьЭтапаСумма
        ЭтапыВоронки.Вставить(Ключ, ГруппаЭтапов.Первый())
    ;
    возврат ЭтапыВоронки
;