импорт ОбщиеСтандартные
импорт ВебApi
импорт ОбменДанными

@ВПроекте
@НаСервере @НаКлиенте
структура ЭтапВоронки
    обз пер Ид: СтатусыВоронки.Ссылка?
    обз пер Наименование: Строка
    обз пер Порядок: Число
    обз пер ДоступноУдаление: Булево
;

//КонтрольДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат ПодборПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаСтатусовВоронки()
;

//Конец КонтрольДоступа

// Область ПрограммныйИнтерфейс
@ВПроекте
@НаСервере @ДоступноСКлиента
метод СтатусНаправленЗаказчику(): СтатусыВоронки.Ссылка?
    возврат НастройкиПодбораПерсонала.СтатусРассматриваемогоКандидатаПоТриггеру(ТриггерыПодбораПерсонала.ПриНаправленииЗаказчику)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СтатусСогласованоИнициатором(): СтатусыВоронки.Ссылка?
    возврат НастройкиПодбораПерсонала.СтатусРассматриваемогоКандидатаПоТриггеру(ТриггерыПодбораПерсонала.ПриСогласованииЗаказчиком)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СтатусВоронкиПоУмолчанию(): СтатусыВоронки.Ссылка?
    знч Запрос = Запрос{
        ВЫБРАТЬ ПЕРВЫЕ 1
            СтатусыВоронки.Ссылка КАК Статус
        ИЗ 
            СтатусыВоронки КАК СтатусыВоронки
        УПОРЯДОЧИТЬ ПО
            СтатусыВоронки.Порядок ВОЗР
    }
    исп Результат = Запрос.Выполнить()
    возврат Результат.ЕдинственныйИлиУмолчание()?.Статус
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод Завершающий(): СтатусыВоронки.Ссылка?
    знч Запрос = Запрос{
        ВЫБРАТЬ ПЕРВЫЕ 1
            СтатусыВоронки.Ссылка КАК Статус
        ИЗ 
            СтатусыВоронки КАК СтатусыВоронки
        УПОРЯДОЧИТЬ ПО
            СтатусыВоронки.Порядок УБЫВ
    }
    исп Результат = Запрос.Выполнить()
    возврат Результат.ЕдинственныйИлиУмолчание()?.Статус
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ДоступныеПредставления(): Массив<Представляемое>
    знч Представления = новый Массив<Представляемое>()
    знч Запрос = Запрос{
        ВЫБРАТЬ
            СтатусыВоронки.Ссылка
        ИЗ 
            СтатусыВоронки Как СтатусыВоронки
        УПОРЯДОЧИТЬ ПО
            СтатусыВоронки.Порядок
    }
    
    для Элемент из Запрос.Выполнить()
        Представления.Добавить(Элемент.Ссылка)
    ;
    возврат Представления
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ВсеЭтапы(): Множество<ЭтапВоронки>
    знч Запрос = Запрос{
       Выбрать 
            СтатусыВоронки.Ссылка как Ссылка,
            СтатусыВоронки.Порядок как Порядок,
            СтатусыВоронки.Наименование как Наименование,
		    Количество(ДанныеВоронки.ЭтапВоронки) как КоличествоСсылок
        Из
            СтатусыВоронки как СтатусыВоронки
            Левое Соединение ДанныеВоронкиПодбора как ДанныеВоронки
            По ДанныеВоронки.ЭтапВоронки == СтатусыВоронки.Ссылка
        Сгруппировать По
            СтатусыВоронки.Ссылка,
            СтатусыВоронки.Порядок,
            СтатусыВоронки.Наименование
        Упорядочить По
            СтатусыВоронки.Порядок
    }
    знч АктуальныеЭтапы = новый Множество<ЭтапВоронки>()
    исп КонтекстДоступа.Привилегированный()
    знч РезультатЗапроса = Запрос.Выполнить()
    если не РезультатЗапроса.Пусто()
        для СтрокаРезультата из РезультатЗапроса
            АктуальныеЭтапы.Добавить(
                новый ЭтапВоронки(
                    СтрокаРезультата.Ссылка,
                    СтрокаРезультата.Наименование, 
                    СтрокаРезультата.Порядок,
                    ДоступноУдаление = (СтрокаРезультата.КоличествоСсылок == 0)
                )
            )
        ;
    ;
    возврат АктуальныеЭтапы
;

@ВПодсистеме
метод ВсеПоПорядку(): Соответствие<Число, СтатусыВоронки.Ссылка>
    знч Запрос = Запрос{
        Выбрать 
            СтатусыВоронки.Ссылка как Статус,
            СтатусыВоронки.Порядок как Порядок
        Из
            СтатусыВоронки как СтатусыВоронки
        Упорядочить По
            СтатусыВоронки.Порядок
    }
    знч АктуальныеЭтапы = новый Соответствие<Число, СтатусыВоронки.Ссылка>()
    исп КонтекстДоступа.Привилегированный()
    знч РезультатЗапроса = Запрос.Выполнить()
    если не РезультатЗапроса.Пусто()
        для СтрокаРезультата из РезультатЗапроса
            АктуальныеЭтапы.Вставить(СтрокаРезультата.Порядок, СтрокаРезультата.Статус)
        ;
    ;
    возврат АктуальныеЭтапы
;

@ВПроекте
@НаСервере @НаКлиенте
перечисление НаправлениеСдвига
    ВВерх, ВНиз
;

@ВПроекте
@НаСервере
метод МаксимальноеЗначениеПорядка(): Число
    знч Запрос = Запрос{
        ВЫБРАТЬ ПЕРВЫЕ 1
            СтатусыВоронки.Порядок КАК Порядок
        ИЗ
            СтатусыВоронки КАК СтатусыВоронки
        УПОРЯДОЧИТЬ ПО 
            Порядок убыв
    }
    
    для Элемент из Запрос.Выполнить()
        возврат Элемент.Порядок
    ;
    
    возврат 0
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ИзменитьПорядокСтатуса(Статус: СтатусыВоронки.Ссылка, Направление: НаправлениеСдвига)
    
    знч Условие = Направление == НаправлениеСдвига.ВВерх ? "<=" : ">="
    знч Порядок = Направление == НаправлениеСдвига.ВВерх ? "убыв" : "возр"
    знч ТекстЗапроса = 
    "
        ВЫБРАТЬ
            СтатусыВоронки.Порядок КАК Порядок
        ПОМЕСТИТЬ
                ПорядокТекущегоСтатуса
        ИЗ
            СтатусыВоронки КАК СтатусыВоронки
        ГДЕ
            СтатусыВоронки.Ссылка == &Статус
        ;
        ВЫБРАТЬ ПЕРВЫЕ 2
            СтатусыВоронки.Ссылка КАК Ссылка,
            СтатусыВоронки.Порядок КАК Порядок
        ИЗ
            СтатусыВоронки КАК СтатусыВоронки
        ВНУТРЕННЕЕ СОЕДИНЕНИЕ
            ПорядокТекущегоСтатуса КАК ПорядокТекущегоСтатуса
            ПО 
                СтатусыВоронки.Порядок %{Условие} ПорядокТекущегоСтатуса.Порядок
        УПОРЯДОЧИТЬ 
            ПО Порядок %{Порядок}  
    "
    знч Запрос = новый ПроизвольныйЗапрос(ТекстЗапроса)
    Запрос.УстановитьПараметр("Статус", Статус)
    знч Выборка = новый ЧитаемыйМассив(Запрос.Выполнить())
    если Выборка.Размер() < 2
        возврат
    ;
        
    исп Транзакции.Начать()     
    
    знч Объект1 = (Выборка[0].Ссылка как СтатусыВоронки.Ссылка).ЗагрузитьОбъект()
    знч Объект2 = (Выборка[1].Ссылка как СтатусыВоронки.Ссылка).ЗагрузитьОбъект()
    
    знч Порядок1 = Объект1.Порядок
    Объект1.Порядок = Объект2.Порядок
    Объект1.Записать()
    Объект2.Порядок = Порядок1
    Объект2.Записать()
    
;
// КонецОбласти ПрограммныйИнтерфейс
// Область НачальноеЗаполнение

конст СТАТУСЫ_ТРИГГЕРЫ = {
    "Отбор" : ТриггерыПодбораПерсонала.ПриДобавленииКандидатаВВакансию,
    "Предварительное тестирование" : Неопределено,
    "Направлен заказчику" : ТриггерыПодбораПерсонала.ПриНаправленииЗаказчику,
    "Согласован заказчиком" : ТриггерыПодбораПерсонала.ПриСогласованииЗаказчиком,
    "Направлен на собеседование" : ТриггерыПодбораПерсонала.ПриНазначенииСобеседования,
    "Отправлен на тестирование" : ТриггерыПодбораПерсонала.ПриНазначенииТестирования,
    "Приглашен на работу" : ТриггерыПодбораПерсонала.ПриОтправкеОффера,
    "Принял оффер" : ТриггерыПодбораПерсонала.ПриПринятииОффера}

@ВПроекте
@НаСервере
метод ВыполнитьНачальноеЗаполнение()
    знч СтатусыТриггеры: Массив<НастройкиПодбораПерсонала.СтатусыРассматриваемыхКандидатов>
    пер Счетчик = 1
    для КлючЗначение из СТАТУСЫ_ТРИГГЕРЫ
        знч НовыйСтатус = Добавить(КлючЗначение.Ключ, Счетчик)
        Счетчик += 1
        если КлючЗначение.Значение != Неопределено
            СтатусыТриггеры.Добавить(
                новый НастройкиПодбораПерсонала.СтатусыРассматриваемыхКандидатов(
                    Статус = НовыйСтатус, Триггер = КлючЗначение.Значение))
        ;
    ;

    НастройкиПодбораПерсонала.ЗаписатьТриггерыСтатусовРассматриваемыхКандидатов(СтатусыТриггеры)
;

метод Добавить(Наименование: Строка, Порядок: Число): СтатусыВоронки.Ссылка
    знч СтатусОбъект = новый СтатусыВоронки.Объект()
    СтатусОбъект.Наименование = Наименование
    СтатусОбъект.Порядок = Порядок
    СтатусОбъект.Записать()
    
    ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(СтатусОбъект.Ссылка, Истина)
    РегистрацияИзменений.ЗарегистрироватьИзменение(СтатусОбъект.Ссылка, Неопределено, ХарактерыИзменений.Изменение)
    
    возврат СтатусОбъект.Ссылка
;

@ВПроекте
@НаСервере
метод ОбновитьСтатусыИТриггеры()
    знч СтатусыТриггеры = [
    новый НастройкиПодбораПерсонала.СтатусыРассматриваемыхКандидатов(
        Статус = ОбновитьИлиДобавить("Отбор", 1), Триггер = ТриггерыПодбораПерсонала.ПриДобавленииКандидатаВВакансию),
    новый НастройкиПодбораПерсонала.СтатусыРассматриваемыхКандидатов(
        Статус = ОбновитьИлиДобавить("Направлен заказчику", 3), Триггер = ТриггерыПодбораПерсонала.ПриНаправленииЗаказчику),
    новый НастройкиПодбораПерсонала.СтатусыРассматриваемыхКандидатов(
        Статус = ОбновитьИлиДобавить("Согласован заказчиком", 4), Триггер = ТриггерыПодбораПерсонала.ПриСогласованииЗаказчиком),
    новый НастройкиПодбораПерсонала.СтатусыРассматриваемыхКандидатов(
        Статус = ОбновитьИлиДобавить("Направлен на собеседование", 5), Триггер = ТриггерыПодбораПерсонала.ПриНазначенииСобеседования),
    новый НастройкиПодбораПерсонала.СтатусыРассматриваемыхКандидатов(
        Статус = ОбновитьИлиДобавить("Отправлен на тестирование", 6), Триггер = ТриггерыПодбораПерсонала.ПриНазначенииТестирования),
    новый НастройкиПодбораПерсонала.СтатусыРассматриваемыхКандидатов(
        Статус = ОбновитьИлиДобавить("Принял оффер", 8), Триггер = ТриггерыПодбораПерсонала.ПриПринятииОффера),
    новый НастройкиПодбораПерсонала.СтатусыРассматриваемыхКандидатов(
        Статус = ОбновитьИлиДобавить("Отклонен", 99), Триггер = ТриггерыПодбораПерсонала.ПриОтклоненииОффера)]  
    
    НастройкиПодбораПерсонала.ЗаписатьТриггерыСтатусовРассматриваемыхКандидатов(СтатусыТриггеры)
;

метод ОбновитьИлиДобавить(Наименование: Строка, Порядок: Число): СтатусыВоронки.Ссылка
    знч Ссылка = СтатусыВоронки.НайтиПоНаименованию(Наименование)
    пер СтатусОбъект: СтатусыВоронки.Объект?
    если Ссылка == Неопределено
        СтатусОбъект = новый СтатусыВоронки.Объект()
    иначе
        СтатусОбъект = Ссылка.ЗагрузитьОбъект()
    ;
    СтатусОбъект.Наименование = Наименование
    СтатусОбъект.Порядок = Порядок
    СтатусОбъект.Записать()
    
    ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(СтатусОбъект.Ссылка, Истина)
    РегистрацияИзменений.ЗарегистрироватьИзменение(СтатусОбъект.Ссылка, Неопределено, ХарактерыИзменений.Изменение)
    
    возврат СтатусОбъект.Ссылка
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ОбновитьИлиДобавить(ЭтапыВоронки: Массив<ЭтапВоронки>)
    знч ИсходныеЭтапыВоронки = ВсеЭтапы()
    для ИсходныйЭтап из ИсходныеЭтапыВоронки
        знч ЭтапНаПроверку = ЭтапыВоронки.Фильтровать(Этап -> Этап.Ид == ИсходныйЭтап.Ид).ПервыйИлиУмолчание()
        если ЭтапНаПроверку != Неопределено
            если ЭтапНаПроверку.Наименование != ИсходныйЭтап.Наименование или ЭтапНаПроверку.Порядок != ИсходныйЭтап.Порядок
                знч ЭтапОбъект = ЭтапНаПроверку.Ид.ЗагрузитьОбъект()
                ЭтапОбъект.Наименование = ЭтапНаПроверку.Наименование
                ЭтапОбъект.Порядок = ЭтапНаПроверку.Порядок
                ЭтапОбъект.Записать()
            ;
        иначе
            ИсходныйЭтап.Ид.ЗагрузитьОбъект().Удалить()
        ;
    ;
    знч НовыеЭтапы = ЭтапыВоронки.Фильтровать(Этап -> Этап.Ид == Неопределено)
    для НовыйЭтап из НовыеЭтапы
        знч ЭтапОбъект = новый СтатусыВоронки.Объект(
            Наименование = НовыйЭтап.Наименование,
            Порядок = НовыйЭтап.Порядок
        )
        ЭтапОбъект.Записать()
    ;
;

метод ДобавитьПредопределенныйЭлемент(Наименование: Строка, Порядок: Число, Идентификатор: Строка)
    знч Ууид = новый Ууид(Идентификатор)
    если СтатусыВоронки.ПолучитьСсылку(Ууид).ЗагрузитьОбъект() == Неопределено
        знч СтатусОбъект = новый СтатусыВоронки.Объект(Ид = Ууид, Наименование = Наименование, Порядок = Порядок, Предопределенный = Истина) 
        СтатусОбъект.Записать()    
    ;
;

// КонецОбласти НачальноеЗаполнение
// JSON

@ВПодсистеме
метод ТипОбъектаJson(): Строка
    возврат "funnelStatus"
;

@ВПроекте
структура СтатусВоронки_2_0
    @JsonСвойство(Имя = "ID")
    обз знч Идентификатор: Строка
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка
    @JsonСвойство(Имя = "order")
    обз знч Порядок: Число
    @JsonСвойство(Имя = "predefined")
    обз знч Предопределенный: Булево
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
   
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{2.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    
    если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<СтатусВоронки_2_0>
    ;
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(СтатусВоронки: СтатусВоронки_2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать()
    знч ЗагружаемыйОбъект = Сервисы.ПрочитатьОбъект(СтатусВоронки.Идентификатор, &СтатусыВоронки.Объект.новый(Ууид), Тип<СтатусыВоронки.Ссылка>) как СтатусыВоронки.Объект
    ЗагружаемыйОбъект.Наименование = СтатусВоронки.Наименование
    ЗагружаемыйОбъект.Порядок = СтатусВоронки.Порядок
    ЗагружаемыйОбъект.Предопределенный = СтатусВоронки.Предопределенный
    
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ЗагружаемыйОбъект, СтатусВоронки.Идентификатор), Сервисы.ИнструментыМенеджераОбъекта)     
;

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> СтатусыВоронки.ПолучитьСсылку(Ууид))
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"funnelStatuses": ИсходящиеДанныеВJson(Ссылки, Сервисы)}
;

метод ИсходящиеДанныеВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеОбъектов(Ссылки)
        Данные.Добавить(ДанныеОбъектаВJson_V2_0(КлючИЗначение.Значение, Сервисы))
    ;
    возврат Данные
;

метод ДанныеОбъектов(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<СтатусыВоронки.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Данные: Соответствие<СтатусыВоронки.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>> 
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Наименование,
            Порядок,
            Предопределенный
        Из
            СтатусыВоронки
        Где
            Ссылка В (%Ссылки)        
    }
    исп Результат = Запрос.Выполнить() 
    для СтрокаРезультата из Результат
        Данные.Вставить(
            СтрокаРезультата.Ссылка,
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(СтрокаРезультата, Результат)
        )
    ;
    
    возврат Данные    
;

метод ДанныеОбъектаВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): СтатусВоронки_2_0
    пер СтатусВоронки = новый СтатусВоронки_2_0(
        Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Ссылка"] как СтатусыВоронки.Ссылка),
        ДанныеОбъекта["Наименование"] как Строка,
        ДанныеОбъекта["Порядок"] как Число,
        ДанныеОбъекта["Предопределенный"] как Булево)   
    возврат СтатусВоронки        
;

// Конец JSON

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: СтатусыВоронки.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Ссылка, Истина)
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, Неопределено, ХарактерыИзменений.Изменение)
    ;
;

@ВПодсистеме
метод ПослеУдаленияДополнение(Ссылка: СтатусыВоронки.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьУдаление(Ссылка)
    ;
;