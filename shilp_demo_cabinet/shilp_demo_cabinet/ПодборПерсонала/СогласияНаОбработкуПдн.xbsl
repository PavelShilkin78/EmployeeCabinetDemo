импорт ВебApi
импорт ОбщиеСтандартные
импорт ОбменДанными
импорт УниверсальныеМеханизмы
импорт КонтрольДоступа

//КонтрольДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат ПодборПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаСогласийНаОбработкуДанных()
;

//Конец КонтрольДоступа

@ВПроекте
метод ТекстСогласия(): Строка
    исп ПотокЗаписи = новый ВременныйПотокЗаписи() 
    знч ЗаполненноеСогласие = МакетСогласия(Подписан = Ложь, МоментПодписания = Неопределено)
    ЗаполненноеСогласие.Экспортировать(ФорматЭкспортаТабличногоДокумента.Html5, ПотокЗаписи)

    возврат ПотокЗаписи.ОткрытьПотокЧтения().ПрочитатьКакСтроку()
;

@ВПроекте
метод СогласиеСубъекта(Субъект: Кандидаты.Ссылка|Отклики.Ссылка): СогласияНаОбработкуПдн.Ссылка?
    знч Запрос = Запрос{
        Выбрать Первые 1
            Ссылка
        Из СогласияНаОбработкуПдн
        Где Субъект == %Субъект}
        
    исп КонтекстДоступа.Привилегированный()
    исп Результат = Запрос.Выполнить()
    
   возврат Результат.ЕдинственныйИлиУмолчание()?.Ссылка ?? Неопределено
;

@ВПроекте
метод СтатусПоСубъекту(Субъект: Кандидаты.Ссылка): СтатусыСогласийНаОбработкуПдн?
    знч Запрос = Запрос{
        Выбрать Первые 1
            Статус
        Из СогласияНаОбработкуПдн
        Где Субъект == %Субъект}
        
    исп КонтекстДоступа.Привилегированный()
    исп Результат = Запрос.Выполнить()
    
   возврат Результат.ЕдинственныйИлиУмолчание()?.Статус ?? Неопределено
;

@ВПроекте
метод СтатусПоПользователю(ИдПользователя: Ууид): СтатусыСогласийНаОбработкуПдн?
    знч Запрос = Запрос{
        Выбрать Первые 1
            Статус
        Из СогласияНаОбработкуПдн
        Где ИдПользователя == %ИдПользователя}
        
    исп КонтекстДоступа.Привилегированный()
    исп Результат = Запрос.Выполнить()
    
   возврат Результат.ЕдинственныйИлиУмолчание()?.Статус ?? Неопределено
;

@ВПроекте
метод СогласиеПоИдПользователя(ИдПользователя: Ууид): СогласияНаОбработкуПдн.Ссылка?
    знч Запрос = Запрос{
        Выбрать Первые 1
            Ссылка
        Из СогласияНаОбработкуПдн
        Где ИдПользователя == %ИдПользователя}
        
    исп КонтекстДоступа.Привилегированный()
    исп Результат = Запрос.Выполнить()
    
   возврат Результат.ЕдинственныйИлиУмолчание()?.Ссылка ?? Неопределено
;

@ВПроекте
метод СформироватьСогласиеЕслиНеСоздано(Субъект: Кандидаты.Ссылка?, ИдПользователя: Ууид?, ПодписатьСразу: Булево)
    если СогласиеСформировано(Субъект, ИдПользователя)
        возврат
    ;
    
    СформироватьСогласие(Субъект, ИдПользователя, ПодписатьСразу)
;

@ВПроекте
метод СогласиеСформировано(Субъект: Кандидаты.Ссылка?, ИдПользователя: Ууид?): Булево
    
    если Субъект != Неопределено
        возврат СтатусПоСубъекту(Субъект) != Неопределено
    ;
    
    если ИдПользователя != Неопределено
        возврат СтатусПоПользователю(ИдПользователя) != Неопределено
    ;
    
    возврат Ложь
;

@ВПроекте
метод СогласиеПодписано(Субъект: Кандидаты.Ссылка?, ИдПользователя: Ууид?): Булево
    
    если Субъект != Неопределено
        возврат СтатусПоСубъекту(Субъект) == СтатусыСогласийНаОбработкуПдн.Подписано
    ;
    
    если ИдПользователя != Неопределено
        возврат СтатусПоПользователю(ИдПользователя) == СтатусыСогласийНаОбработкуПдн.Подписано
    ;
    
    возврат Ложь
;

@ВПроекте
метод СформироватьСогласие(Субъект: Кандидаты.Ссылка?, ИдПользователя: Ууид?, ПодписатьСразу: Булево)

    знч Согласие = новый СогласияНаОбработкуПдн.Объект()
    
    Согласие.МоментСоздания = Момент.Сейчас()
    Согласие.Субъект = Субъект
    Согласие.ИдПользователя = ИдПользователя
    если ПодписатьСразу
        Согласие.Статус = СтатусыСогласийНаОбработкуПдн.Подписано
        Согласие.МоментПодписания = Момент.Сейчас()
    иначе
        Согласие.Статус = СтатусыСогласийНаОбработкуПдн.Сформировано
    ;
    Согласие.Наименование = Субъект?.Представление() ?? ИдПользователя.ВСтроку()
    
    исп КонтекстДоступа.Привилегированный()
    Согласие.Записать()
    
    если ПодписатьСразу
        ПрикрепитьПодписанныйPdf(Согласие.Ссылка, Согласие.МоментПодписания)
    ;
;

@ВПроекте
метод ПодписатьСогласие(Субъект: Кандидаты.Ссылка)
    знч СогласиеСубъекта = СогласиеСубъекта(Субъект)
    если СогласиеСубъекта != Неопределено
        знч ОбъектСогласия = СогласиеСубъекта.ЗагрузитьОбъект()
        ОбъектСогласия.Статус = СтатусыСогласийНаОбработкуПдн.Подписано
        ОбъектСогласия.МоментПодписания = Момент.Сейчас()
        исп КонтекстДоступа.Привилегированный()
        ОбъектСогласия.Записать()
        ПрикрепитьПодписанныйPdf(СогласиеСубъекта, ОбъектСогласия.МоментПодписания)
    ;
;

метод ПрикрепитьПодписанныйPdf(Согласие: СогласияНаОбработкуПдн.Ссылка, МоментПодписания: Момент)
    знч СогласиеPdf = СогласиеPdf(МоментПодписания)
    знч ФайлСогласияPdf = Файлы.НовыйФайл(СогласиеPdf)
    ФайлСогласияPdf.Владелец = Согласие
    ФайлСогласияPdf.Наименование = "Согласие_на_обработку_ПДн"
    ФайлСогласияPdf.Расширение = "pdf"
    исп КонтекстДоступа.Привилегированный()
    ФайлСогласияPdf.Записать()
;

метод СогласиеPdf(МоментПодписания: Момент): ДвоичныйОбъект
    знч МакетСогласия = МакетСогласия(Подписан = Истина, МоментПодписания = МоментПодписания)
    возврат МенеджерТабличныхДокументов.ВPdf(МакетСогласия)
;

метод МакетСогласия(Подписан: Булево, МоментПодписания: Момент?): ТабличныйДокумент
    знч МакетСогласия = МенеджерТабличныхДокументов.ИзРесурса(Ресурс{ШаблонСогласия.mxl})
    
    пер ТабличныйДокумент = новый ТабличныйДокумент()
    пер ОбластьШапка = МакетСогласия.ПолучитьОбласть("Шапка")
    пер ОбластьКонтентТоп = МакетСогласия.ПолучитьОбласть("КонтентТоп")
    пер ОбластьСписокОбработчиков = МакетСогласия.ПолучитьОбласть("СписокОбработчиков")
    пер ОбластьКонтентБот = МакетСогласия.ПолучитьОбласть("КонтентБот")
    пер ОбластьПодвал = МакетСогласия.ПолучитьОбласть("Подвал")
    
    пер Писатель = ТабличныйДокумент.Запись
    знч ПараметрыСогласия = НастройкиПерсональныхДанных.ЗначенияНастройки()
    Писатель.ВывестиВертикально(ОбластьШапка.ВВыводимуюОбласть())
    Писатель.ВывестиВертикально(ОбластьКонтентТоп.ВВыводимуюОбласть().ЗаполнитьПараметры(
            {"НаименованиеКомпании": ПараметрыСогласия.НаименованиеОператора,
            "АдресКомпании": ПараметрыСогласия.ЮридическийАдресОператора}))
    для Обработчик из ПараметрыСогласия.Обработчики
        Писатель.ВывестиВертикально(ОбластьСписокОбработчиков.ВВыводимуюОбласть().ЗаполнитьПараметры(
            {"НаименованиеОбработчика": Обработчик.Наименование,
            "Инн": Обработчик.Инн,
            "Огрн": Обработчик.Огрн,
            "Адрес": Обработчик.ЮридическийАдрес}))
    ;

    Писатель.ВывестиВертикально(ОбластьКонтентБот.ВВыводимуюОбласть().ЗаполнитьПараметры(
            {"АдресДляОтзываСогласия": ПараметрыСогласия.АдресПочтыДляОтзывовСогласий}))
          
    если Подписан
        Писатель.ВывестиВертикально(ОбластьПодвал.ВВыводимуюОбласть().ЗаполнитьПараметры(
                {"Дата": МенеджерДат.ФорматМомента(МоментПодписания, "дд ММММ гггг, ЧЧ:мм")}))
    ; 

    возврат ТабличныйДокумент
;

@НаСервере
структура ПараметрыСогласия
    обз знч НаименованиеКомпании: Строка
    обз знч ЮридическийАдрес: Строка
    обз знч ПочтаДляОтзываСогласия: Строка
    пер Обработчики: Массив<ДанныеОбработчикаПерсональныхДанных>
;

структура ДанныеОбработчикаПерсональныхДанных
    обз знч НаименованиеОбработчика: Строка
    обз знч Инн: Строка
    обз знч Огрн: Строка
    обз знч Адрес: Строка
;

// JSON

@ВПодсистеме
метод ТипОбъектаJson(): Строка
    возврат "dataProcessingAreement"
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{3.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;

    возврат Тип<ДанныеJson_V3_0>

;

@ВПодсистеме
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{3.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    возврат Тип<Массив<ДанныеJson_V3_0>>
;

@ВПроекте
структура ДанныеJson_V3_0
    обз знч ID: Строка
    обз знч name: Строка
    обз знч subject: ОбменДанными.ЭлементКонтрактаСущностиJson?
    обз знч dateCreated: ДатаВремя
    обз знч dateSigned: ДатаВремя?
    обз знч status: СтатусыСогласийНаОбработкуПдн_V3_0?
    обз знч userID: Строка?
    пер attachedFiles: Массив<МенеджерФайлов.ДанныеФайлаJson>?
;

перечисление СтатусыСогласийНаОбработкуПдн_V3_0
    created,
    signed,
    declined
;

@ВПодсистеме
метод ПолучитьДанныеJson(Ссылка: СогласияНаОбработкуПдн.Ссылка, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Объект
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{3.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    возврат ПолучитьОдноСогласие(Ссылка, Сервисы)
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(ДанныеJson: Объект?, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    ЗагрузитьСогласие(ДанныеJson как ДанныеJson_V3_0, Сервисы)
;

метод ЗагрузитьСогласие(ДанныеJson: ДанныеJson_V3_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать()
      
    знч Согласие = Сервисы.ПрочитатьОбъект(ДанныеJson.ID, &СогласияНаОбработкуПдн.Объект.новый(Ууид), Тип<СогласияНаОбработкуПдн.Ссылка>) как СогласияНаОбработкуПдн.Объект
    
    Согласие.Наименование = ДанныеJson.name
    знч СервисыКонтракта = СубъектыСогласийApi.ПолучитьСервисы()
    пер ВнешняяСсылка: ВебApiСервер.ВнешняяСсылка?
    
    если ДанныеJson.subject != Неопределено
        для СервисКонтракта из СервисыКонтракта
            ВнешняяСсылка = СервисКонтракта.ВнешняяСсылкаСубъектыСогласий(ДанныеJson.subject)
            если ВнешняяСсылка != Неопределено
                Согласие.Субъект = Сервисы.ПолучитьСсылку(ВнешняяСсылка) как СубъектСогласияНаОбработкуПдн.Ссылка
                прервать
            ;
        ;
    ;
    
    если ДанныеJson.userID != Неопределено
        Согласие.ИдПользователя = новый Ууид(ДанныеJson.userID!)
    ;
    Согласие.МоментСоздания = ДанныеJson.dateCreated.ВМомент(МенеджерДат.ЧасовойПоясТекущий())
    если ДанныеJson.dateSigned != Неопределено
        Согласие.МоментПодписания= ДанныеJson.dateSigned!.ВМомент(МенеджерДат.ЧасовойПоясТекущий())
    ;
    Согласие.Статус = ПреобразоватьСтатус(ДанныеJson.status)
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(Согласие, ДанныеJson.ID), Сервисы.ИнструментыМенеджераОбъекта)
    
    если ДанныеJson.attachedFiles != Неопределено
        знч ВложенныеФайлы = Файлы.ВложенияИзJson(ДанныеJson.attachedFiles, Сервисы, Согласие.Ссылка)
        Файлы.ЗаписатьФайлыПоВладельцу(ВложенныеФайлы, Согласие.Ссылка)
    ;
    
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<СогласияНаОбработкуПдн.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{3.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;   
    возврат {"dataProcessingAreement": ПолучитьСогласия(Ссылки, Сервисы)}    
;

метод ПолучитьОдноСогласие(Ссылка: СогласияНаОбработкуПдн.Ссылка, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДанныеJson_V3_0
    возврат ПолучитьСогласия([Ссылка], Сервисы).Первый()! как ДанныеJson_V3_0
;

метод ПолучитьСогласия(Ссылки: ЧитаемаяКоллекция<СогласияНаОбработкуПдн.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>
    знч Данные: Массив<Объект?>
    если Ссылки.Пусто()
        возврат Данные
    ;
    
    знч ДанныеСогласий = ПрочитатьДанные(Ссылки)
    
    для КлючЗначение из ДанныеСогласий
        
        знч Согласие = КлючЗначение.Ключ
        знч ЗначенияРеквизитовСогласия = КлючЗначение.Значение
        знч СервисыКонтракта = СубъектыСогласийApi.ПолучитьСервисы()
        пер ОписаниеЭлемента: ОбменДанными.ЭлементКонтрактаСущностиJson?
        если ЗначенияРеквизитовСогласия.Субъект != Неопределено
            для СервисКонтракта из СервисыКонтракта
                ОписаниеЭлемента = СервисКонтракта.ОписаниеЭлементаСубъектыСогласий(
                    ЗначенияРеквизитовСогласия.Субъект,
                    Сервисы    
                )
            ;
        ;
        
        пер ДанныеJson = новый ДанныеJson_V3_0(
            ID = Сервисы.ПолучитьИдентификатор(Согласие),
            name = ЗначенияРеквизитовСогласия.Наименование,
            subject = ОписаниеЭлемента,
            dateCreated = ЗначенияРеквизитовСогласия.МоментСоздания.ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий()),
            dateSigned = ЗначенияРеквизитовСогласия.МоментПодписания?.ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий()) ?? Неопределено,
            status = ПреобразоватьСтатус(ЗначенияРеквизитовСогласия.Статус),
            userID = ЗначенияРеквизитовСогласия.ИдПользователя?.ВСтроку() ?? Неопределено
        )
        
        знч ПрисоединенныеФайлыДляВыгрузки = ПрисоединенныеФайлыМенеджер.ПрисоединенныеФайлы(Согласие)
        если не ПрисоединенныеФайлыДляВыгрузки.Файлы.Пусто()
            знч ПрисоединенныеФайлыДанные = новый Массив<МенеджерФайлов.ДанныеФайлаJson>()
            для ФайлДляВыгрузки из ПрисоединенныеФайлыДляВыгрузки.Файлы
                ПрисоединенныеФайлыДанные.Добавить(
                    Файлы.ДанныеФайлаJson(ФайлДляВыгрузки.Ссылка, Сервисы)    
                )
            ;
            ДанныеJson.attachedFiles = ПрисоединенныеФайлыДанные
        ; 
        
        Данные.Добавить(ДанныеJson)
        
        
    ;    
    возврат Данные
    
;

метод ПрочитатьДанные(Согласия: ЧитаемаяКоллекция<СогласияНаОбработкуПдн.Ссылка>): Соответствие<СогласияНаОбработкуПдн.Ссылка, ЗначенияРеквизитов>
    если Согласия.Пусто()
        возврат {:}
    ;
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Наименование,
            Субъект,
            МоментСоздания,
            МоментПодписания,
            Статус,
            ИдПользователя
        Породить ЗначенияРеквизитов
        Из
            СогласияНаОбработкуПдн
        Где
            Ссылка В (%Согласия)
    }
    знч Результат: Соответствие<СогласияНаОбработкуПдн.Ссылка, ЗначенияРеквизитов>
    исп РезультатЗапроса = Запрос.Выполнить()
    для СтрокаРезультата из РезультатЗапроса
        Результат.Вставить(СтрокаРезультата.Ссылка, СтрокаРезультата)
    ;

    возврат Результат
;

метод ПреобразоватьСтатус(Статус: СтатусыСогласийНаОбработкуПдн): СтатусыСогласийНаОбработкуПдн_V3_0
    выбор Статус
    когда Сформировано
        возврат СтатусыСогласийНаОбработкуПдн_V3_0.created
    когда Подписано
        возврат СтатусыСогласийНаОбработкуПдн_V3_0.signed
    когда Отклонено   
        возврат СтатусыСогласийНаОбработкуПдн_V3_0.declined
    иначе
        выбросить новый ИсключениеВыполнения("Неизвестный статус: %Статус")
    ; 
;

метод ПреобразоватьСтатус(Статус: СтатусыСогласийНаОбработкуПдн_V3_0): СтатусыСогласийНаОбработкуПдн
    выбор Статус
    когда created
        возврат СтатусыСогласийНаОбработкуПдн.Сформировано
    когда signed
        возврат СтатусыСогласийНаОбработкуПдн.Подписано
    когда declined
        возврат СтатусыСогласийНаОбработкуПдн.Отклонено
    ;
;

// конец JSON

@ВПодсистеме
метод ПослеУдаленияДополнение(Ссылка: СогласияНаОбработкуПдн.Ссылка, ПараметрыУдаления: СогласияНаОбработкуПдн.ПараметрыУдаления)
    если не ПараметрыУдаления.РежимЗагрузкиДанных
        РегистрацияИзменений.ЗарегистрироватьУдаление(Ссылка)
    ;
;

@ВПроекте
метод СвязатьОткликССогласиемНаОбработкуПерсональныхДанных(Отклик: Отклики.Ссылка)
    
    знч ИдПользователяСистемы = ПользователиСистемы.ИдПользователяСистемы(Пользователи.ТекущийПользователь)
    знч Согласие = СогласиеПоИдПользователя(ИдПользователяСистемы)
    знч ОбъектСогласия = Согласие.ЗагрузитьОбъект()
    ОбъектСогласия.Субъект = Отклик
    
    исп КонтекстДоступа.Привилегированный()
    ОбъектСогласия.Записать()
;

@ВПроекте
метод ИзменитьСубъектСогласия(Источник:ИсточникиКандидатов, Отклик: Отклики.Ссылка, Кандидат: Кандидаты.Ссылка)
    если Источник != ИсточникиКандидатов.ВитринаВакансий
        возврат
    ;
    
    знч Согласие = СогласиеСубъекта(Отклик)
    знч СогласиеОбъект = Согласие.ЗагрузитьОбъект()
    СогласиеОбъект.Субъект = Кандидат
    СогласиеОбъект.Записать()
;