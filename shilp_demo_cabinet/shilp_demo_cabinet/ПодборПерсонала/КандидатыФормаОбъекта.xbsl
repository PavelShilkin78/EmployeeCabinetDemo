импорт ИнтерфейсныеКомпонентыСтандартные
импорт ОбщиеСтандартные
импорт СтандартноеПриложение
импорт УниверсальныеМеханизмы
импорт ФизическиеЛица
импорт УправлениеПерсоналом


@ВПодсистеме
@НаКлиенте @НаСервере
структура ДополнительныеДанные
    пер КонтактнаяИнформация: ЛичныеКонтакты.КонтактнаяИнформация?
    пер Фотография: ПрисоединенныйФайл?
    пер ЗарплатныеОжидания: ОписаниеОплаты
    пер СертификатыРезюме: Массив<СертификатыРезюме.ДанныеСертификатаРезюме>
    пер ПортфолиоРезюме: Массив<ПортфолиоРезюме.ДанныеПортфолиоРезюме>
;

@НаСервере @ДоступноСКлиента
статический метод ДополнительныеДанные(Кандидат: Кандидаты.Ссылка, ФотографияСсылка: Файлы.Ссылка?,
            РассматриваемыйКандидат: РассматриваемыеКандидаты.Ссылка?): ДополнительныеДанные

    знч ДополнительныеДанные = новый ДополнительныеДанные()
    ДополнительныеДанные.КонтактнаяИнформация = ЛичныеКонтакты.ПрочитатьКонтактыВладельца(Кандидат)
    если ФотографияСсылка != Неопределено
        ДополнительныеДанные.Фотография = ПрисоединенныеФайлыМенеджер.ПрисоединенныйФайл(ФотографияСсылка)
    ;
    
    если РассматриваемыйКандидат != Неопределено
        исп Результат = Запрос{
        ВЫБРАТЬ
            РассматриваемыеКандидаты.ЗарплатныеОжидания КАК ЗарплатныеОжидания
        ИЗ
            РассматриваемыеКандидаты КАК РассматриваемыеКандидаты
        ГДЕ
            РассматриваемыеКандидаты.Ссылка == %РассматриваемыйКандидат}.Выполнить()
        ДополнительныеДанные.ЗарплатныеОжидания = Результат.Единственный().ЗарплатныеОжидания       
    ;    
    
    ДополнительныеДанные.СертификатыРезюме.ДобавитьВсе(СертификатыРезюме.ПолучитьСертификатыВладельца(Кандидат))
    ДополнительныеДанные.ПортфолиоРезюме.ДобавитьВсе(ПортфолиоРезюме.ПолучитьПортфолиоВладельца(Кандидат))
    возврат ДополнительныеДанные
;

@Обработчик
метод ПослеЧтения()
    если КлючОбъекта != Неопределено
        ДополнительныеДанные = ДополнительныеДанные(
            Кандидат = КлючОбъекта, 
            ФотографияСсылка = Объект.Фотография,
            РассматриваемыйКандидат = РассматриваемыйКандидат)
        Компоненты.Контакты.УстановитьКонтакты(ДополнительныеДанные.КонтактнаяИнформация, Ложь)
    ;
    Компоненты.КлючевыеНавыки.УстановитьЗначения(Объект.Навыки)
    ИнтерфейсныеКомпоненты.ИнициализироватьПодчиненныеКомпоненты(Компоненты)   
    СобственнаяМодифицированность = Ложь     
;

@Обработчик
метод ПередЗаписьюОбъекта()
    Объект.ВодительскиеКатегории.Очистить()
    для Элемент из Компоненты.ВодительскиеКатегории.ПолучитьЗначения()
        Объект.ВодительскиеКатегории.Добавить(Элемент как ВодительскиеКатегории)
    ;
    
    Объект.Навыки.Очистить()
    для Элемент из Компоненты.КлючевыеНавыки.ПолучитьЗначения()
        Объект.Навыки.Добавить(Элемент как КлючевыеНавыки.Ссылка)
    ;
    
    ЗаполнитьПараметрыЗаписи(ПараметрыЗаписи)
;

@НаСервере @ДоступноСКлиента
статический метод ЗаписатьЗарплатныеОжидания(РассматриваемыйКандидат: РассматриваемыеКандидаты.Ссылка, ЗарплатныеОжидания: ОписаниеОплаты)
    знч КандидатОбъект = РассматриваемыйКандидат.ЗагрузитьОбъект()
    если КандидатОбъект.ЗарплатныеОжидания != ЗарплатныеОжидания
        КандидатОбъект.ЗарплатныеОжидания = ЗарплатныеОжидания
        КандидатОбъект.Записать()
    ;
;

@Обработчик
метод ПослеЗаписиОбъекта()
    если РассматриваемыйКандидат != Неопределено
        ЗаписатьЗарплатныеОжидания(РассматриваемыйКандидат, ДополнительныеДанные.ЗарплатныеОжидания)
    ;
    
    КандидатПослеИзменения.Оповестить(КлючОбъекта)
    СобственнаяМодифицированность = Ложь
;

метод ЗаполнитьПараметрыЗаписи(ПараметрыЗаписи: Кандидаты.ПараметрыЗаписи)
    ПараметрыЗаписи.Фотография = ДополнительныеДанные.Фотография
    ПараметрыЗаписи.КонтактнаяИнформация = Компоненты.Контакты.ПолучитьКонтакты()
    ПараметрыЗаписи.СертификатыРезюме = новый Массив<СертификатыРезюме.ДанныеСертификатаРезюме>(ДополнительныеДанные.СертификатыРезюме)
    ПараметрыЗаписи.ПортфолиоРезюме = новый Массив<ПортфолиоРезюме.ДанныеПортфолиоРезюме>(ДополнительныеДанные.ПортфолиоРезюме)
;

метод ЗаголовокФормы(): Строка
    возврат ЭтоНовый() ? "Новый кандидат" : "Редактирование кандидата"
;

метод ИсточникСписокВыбора():  Массив<ЭлементСпискаЗначений<ИсточникиКандидатов>>
    
    знч ИсточникСписокВыбора: Массив<ЭлементСпискаЗначений<ИсточникиКандидатов>>
    
    для Источник из ИсточникиКандидатов.Элементы()
        если Источник == ИсточникиКандидатов.ВитринаВакансий
            продолжить
        ;
        ИсточникСписокВыбора.Добавить(новый ЭлементСпискаЗначений<ИсточникиКандидатов>(Источник))
    ;

    возврат ИсточникСписокВыбора
;


метод Фотография(): ДвоичныйОбъект.Ссылка
    если (ДополнительныеДанные.Фотография?.Хранилище == Неопределено)
        или (ДополнительныеДанные.Фотография?.Удален == Истина)
        возврат СтандартноеПриложение.ПараметрыСеанса().АватарПоУмолчанию
    иначе
        возврат ДополнительныеДанные.Фотография?.Хранилище
    ;
;

метод ФотографияПриИзменении(Источник: ВыборФайлов, Событие: СобытиеПриИзменении<ЧитаемыйМассив<ВыбранныйФайл>>)
    знч ВыбранныеФайлы: ЧитаемыйМассив<ВыбранныйФайл> = Событие.НовоеЗначение
    ВыполнитьВыборФайлов(ВыбранныеФайлы)
;

метод ФотографияПриПеретаскивании(Источник: Компонент, Событие: СобытиеПриПеретаскивании)
    если (Событие.Значение это Массив<неизвестно>)
        если не Событие.Значение.Пусто() и (Событие.Значение[0] это ВыбранныйФайл)
            ВыполнитьВыборФайлов(Событие.Значение)
        ;
    ;
;

метод ВыполнитьВыборФайлов(ВыбранныеФайлы: ЧитаемыйМассив<ВыбранныйФайл>)
    знч ВыбранныйФайл = ВыбранныеФайлы.Первый()
    
    пер Ошибки = новый Массив<Строка>()
    знч МаксимальныйРазмерФайла = ПрисоединенныеФайлыКлиентСервер.МаксимальноДопустимыйРазмерФайлаВМегабайтах() * МенеджерФайловКлиентСервер.МЕГАБАЙТ
    если не МенеджерФайловКлиентСервер.ЭтоРасширениеФайлаКартинки(ВыбранныйФайл.Расширение)
        Ошибки.Добавить("Выбранный файл не является изображением.")
    ;
    если ВыбранныйФайл.Размер > МаксимальныйРазмерФайла
        Ошибки.Добавить("Файл слишком большой. Допустимый размер файла %{МенеджерФайловКлиентСервер.ПредставлениеРазмера(МаксимальныйРазмерФайла)}")
    ;
    если Ошибки.Размер() > 0
        пер ТекстСообщения = Строки.Соединить(Ошибки, "\n")
        СообщениеОбОшибке.ОткрытьВМодальномОкне(ТекстСообщения = ТекстСообщения)
        возврат
    ;  
    
    знч ЗагруженныйФайл = ЗагрузкаФайлов.НачатьЗагрузку(ВыбранныйФайл).ПолучитьРезультат()
    знч ПодготовленнаяФотография = Кандидаты.ОбработатьФотографию(ЗагруженныйФайл)
    
    если ДополнительныеДанные.Фотография == Неопределено
        ДополнительныеДанные.Фотография = новый ПрисоединенныйФайл()
    ;
    ДополнительныеДанные.Фотография.Хранилище = ПодготовленнаяФотография
    ДополнительныеДанные.Фотография.Наименование = ВыбранныйФайл.Имя     
    ДополнительныеДанные.Фотография.Расширение = ВыбранныйФайл.Расширение
    если не ДополнительныеДанные.Фотография.Расширение.Пусто()
        ДополнительныеДанные.Фотография.Наименование 
            = ДополнительныеДанные.Фотография.Наименование.Заменить("." + ДополнительныеДанные.Фотография.Расширение, "")
    ;
    ДополнительныеДанные.Фотография.Размер = ВыбранныйФайл.Размер
    ДополнительныеДанные.Фотография.ДатаСоздания = МенеджерДат.ТекущаяДатаВремя()
    ДополнительныеДанные.Фотография.Удален = Ложь
    СобственнаяМодифицированность = Истина
;

метод УдалитьФотографиюОбработчик(Команда: ОбычнаяКоманда)
    если ДополнительныеДанные.Фотография == Неопределено
        возврат
    ;
    ДополнительныеДанные.Фотография.Удален = Истина
    СобственнаяМодифицированность = Истина
;

метод УдалитьФотографиюДоступность(): Булево
    если ДополнительныеДанные.Фотография == Неопределено
        возврат Ложь
    ;
    если ДополнительныеДанные.Фотография.Удален
        возврат Ложь
    ;
    если ДополнительныеДанные.Фотография.Ссылка == Неопределено
        и ДополнительныеДанные.Фотография.Хранилище == Неопределено
        возврат Ложь
    ;
    возврат Истина
;

метод ДатаРожденияСообщениеПредупреждение(): Строка
    знч Мвт = УправлениеПерсоналом.МИНИМАЛЬНЫЙ_ВОЗРАСТ_ТРУДОУСТРОЙСТВА
    возврат МенеджерСтрок.ФормаПредметаИсчисления(Мвт,
                Форма1 = "Еще не исполнился $Мвт год",
                Форма2 = "Еще не исполнилось $Мвт года",
                Форма5 = "Еще не исполнилось $Мвт лет")
;

метод ДатаРожденияРезультатПроверкиДанных(): РезультатПроверкиДанных
    если ФизЛица.ПолныхЛет(Объект.ДатаРождения) < УправлениеПерсоналом.МИНИМАЛЬНЫЙ_ВОЗРАСТ_ТРУДОУСТРОЙСТВА
        возврат РезультатПроверкиДанных.Предупреждение
    иначе
        возврат РезультатПроверкиДанных.Отсутствует    
    ;    
;

метод СохранитьОбработчик(Команда: ОбычнаяКоманда)
    Записать()
    Компоненты.Контакты.УстановитьКонтакты(ДополнительныеДанные.КонтактнаяИнформация, Ложь)
    
    СтандартныеФормы.ПоказатьУведомление("Сохранение!", "Изменения успешно сохранены")
;

метод ЭтоТелефон(): Булево
    возврат КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон
;

метод ПолеВыбораЗначенийИзСпискаПриИзменении(Источник: ПолеВыбораЗначенийИзСписка, Событие: СобытиеСДанными<Массив<Представляемое>>)
    СобственнаяМодифицированность = Истина
;

метод ПортфолиоПриИзменении(Источник: КомпонентПортфолио, Событие: СобытиеСДанными<Массив<ПортфолиоРезюме.ДанныеПортфолиоРезюме>>)
    СобственнаяМодифицированность = Истина
;

метод ЗарплатныеОжиданияПриИзменении(Источник: ОписаниеОплатыКомпонент, Событие: СобытиеКомпонента)
    СобственнаяМодифицированность = Истина
;

метод СертификатыПриИзменении(Источник: КомпонентСертификаты, Событие: СобытиеСДанными<Массив<СертификатыРезюме.ДанныеСертификатаРезюме>>)
    СобственнаяМодифицированность = Истина
;

метод КонтактыПриИзменении(Источник: ЛичныеКонтактыКомпонент, Событие: СобытиеКомпонента)
   СобственнаяМодифицированность = Истина 
;

метод ОсновнаяИнформацияПроцентЗаполнения(): Число
    знч РезультатыПроверкиЗаполнения =[
        не Объект.Фамилия.Пусто(),
        не Объект.Имя.Пусто(),
        Объект.Пол != Неопределено,
        Объект.ДатаРождения != Дата{}]
    возврат Рубрикатор.ПроцентЗаполнения(РезультатыПроверкиЗаполнения)
;

метод КонтактыПроцентЗаполнения(): Число
    если ДополнительныеДанные.КонтактнаяИнформация == Неопределено
        возврат 0
    ;
    
    знч РезультатыПроверкиЗаполнения =[
        не (ДополнительныеДанные.КонтактнаяИнформация.МобильныйТелефон.Пусто()
        и ДополнительныеДанные.КонтактнаяИнформация.ЭлектроннаяПочта.Пусто()
        и ДополнительныеДанные.КонтактнаяИнформация.ДомашнийТелефон.Пусто()
        и ДополнительныеДанные.КонтактнаяИнформация.Скайп.Пусто())]
    возврат Рубрикатор.ПроцентЗаполнения(РезультатыПроверкиЗаполнения)
;

метод ОпытРаботыПроцентЗаполнения(): Число
    знч РезультатыПроверкиЗаполнения =[
        не Объект.ОпытРаботы.Пусто()]
    возврат Рубрикатор.ПроцентЗаполнения(РезультатыПроверкиЗаполнения)
;

метод ОбразованиеПроцентЗаполнения(): Число
    знч РезультатыПроверкиЗаполнения =[
        не Объект.Образование.Пусто()]
    возврат Рубрикатор.ПроцентЗаполнения(РезультатыПроверкиЗаполнения)
;