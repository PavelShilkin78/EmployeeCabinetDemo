импорт ОбщиеСтандартные
импорт ФизическиеЛица


@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ОтразитьЗаписиУчетаВремени(ЗаписьУчетаВремени: УчетВремени.ДанныеЗаписиУчетаВремени)
    пер УчетРабочегоВремени = новый УчетРабочегоВремени.Объект(
                                Дата = ЗаписьУчетаВремени.Дата, 
                                Период = ЗаписьУчетаВремени.Период,
                                ФизическоеЛицо = ЗаписьУчетаВремени.ФизическоеЛицо, 
                                Статус = ЗаписьУчетаВремени.Статус,
                                Комментарий = ЗаписьУчетаВремени.Комментарий)
    УчетРабочегоВремени.Записать()
    ОбработатьОтражениеВДиапазоне(ЗаписьУчетаВремени)
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ОбработатьОтражениеВДиапазоне(ЗаписьУчетаВремени: УчетВремени.ДанныеЗаписиУчетаВремени)
    если ЗаписьУчетаВремени.Статус == УчетВремениСтатусы.Присутствует
        или ЗаписьУчетаВремени.Статус == УчетВремениСтатусы.Отсутствует
        // ищем присутствие, введеное на момент после записанного статуса
        знч Запрос = Запрос{
            Выбрать
                УчетРабочегоВремени.Ссылка,
                УчетРабочегоВремени.Дата Как Дата,
                УчетРабочегоВремени.ФизическоеЛицо Как ФизическоеЛицо,
                УчетРабочегоВремени.Период Как Период, 
                Минимум(СледующийУчетРабочегоВремени.Период.ЗаменитьNull(Момент{})) Как ПериодОкончание 
            Поместить ВТУчетРабочегоВремени
            Из
                УчетРабочегоВремени КАК УчетРабочегоВремени
                Левое соединение УчетРабочегоВремени КАК СледующийУчетРабочегоВремени
                    По УчетРабочегоВремени.ФизическоеЛицо == СледующийУчетРабочегоВремени.ФизическоеЛицо
                    И УчетРабочегоВремени.Дата == СледующийУчетРабочегоВремени.Дата
                    И УчетРабочегоВремени.Период < СледующийУчетРабочегоВремени.Период
            Где
                УчетРабочегоВремени.Дата == %{ЗаписьУчетаВремени.Дата}
                И УчетРабочегоВремени.Период == %{ЗаписьУчетаВремени.Период}
                И УчетРабочегоВремени.ФизическоеЛицо == %{ЗаписьУчетаВремени.ФизическоеЛицо}
            Сгруппировать по
                УчетРабочегоВремени.Ссылка,
                УчетРабочегоВремени.Дата,
                УчетРабочегоВремени.Период,
                УчетРабочегоВремени.ФизическоеЛицо
            ;
            Выбрать
                СледующийУчетРабочегоВремени.Ссылка Как Ссылка,
                СледующийУчетРабочегоВремени.Дата Как Дата,
                СледующийУчетРабочегоВремени.Период Как Период,
                СледующийУчетРабочегоВремени.ФизическоеЛицо Как ФизическоеЛицо,
                СледующийУчетРабочегоВремени.Статус Как Статус 
            Из 
                ВТУчетРабочегоВремени КАК ВТУчетРабочегоВремени
                Внутреннее Соединение УчетРабочегоВремени КАК СледующийУчетРабочегоВремени
                    ПО ВТУчетРабочегоВремени.Дата == СледующийУчетРабочегоВремени.Дата
                    И ВТУчетРабочегоВремени.ФизическоеЛицо == СледующийУчетРабочегоВремени.ФизическоеЛицо
                    И ВТУчетРабочегоВремени.ПериодОкончание == СледующийУчетРабочегоВремени.Период
                    И ВТУчетРабочегоВремени.Ссылка != СледующийУчетРабочегоВремени.Ссылка
            }
        исп Результат = Запрос.Выполнить()
        знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
        если (не РезультатСтроки.Пусто()) и (РезультатСтроки[0].Статус == УчетВремениСтатусы.Присутствует или РезультатСтроки[0].Статус == УчетВремениСтатусы.Отсутствует)
            // найдено присутствие или уход после продолжения или завершения - учет времени отражен раньше установленного срока, удалим лишний статус
            исп Транзакции.Начать()
            РезультатСтроки[0].Ссылка.ЗагрузитьОбъект(Истина).Удалить()
        ;
    ;
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ПолучитьЗначенияПараметровСеанса(): УчетВремени.ПараметрыСеанса
    возврат УчетВремени.ПолучитьЗначенияПараметровСеанса()
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ПолучитьРабочееВремяФизическогоЛицаНаДату(ФизическоеЛицо: ФизическиеЛица.Ссылка?, Момент: Момент): Длительность
    если ФизическоеЛицо == Неопределено
        возврат Длительность.ИзМиллисекунд(0)
    ;
    знч Запрос = Запрос{
        Выбрать
            УчетРабочегоВремени.Период Как Период, 
            Минимум(СледующийУчетРабочегоВремени.Период.ЗаменитьNull(Момент{})) Как ПериодОкончание, 
            УчетРабочегоВремени.ФизическоеЛицо Как ФизическоеЛицо, 
            УчетРабочегоВремени.Статус Как Статус 
        Из
            УчетРабочегоВремени КАК УчетРабочегоВремени
            Левое соединение УчетРабочегоВремени КАК СледующийУчетРабочегоВремени
                По УчетРабочегоВремени.ФизическоеЛицо == СледующийУчетРабочегоВремени.ФизическоеЛицо
                И УчетРабочегоВремени.Дата == СледующийУчетРабочегоВремени.Дата
                И УчетРабочегоВремени.Период < СледующийУчетРабочегоВремени.Период
        Где
            УчетРабочегоВремени.ФизическоеЛицо == %ФизическоеЛицо 
            И УчетРабочегоВремени.Статус == %{УчетВремениСтатусы.Присутствует}
            И УчетРабочегоВремени.Период >= %{МенеджерДат.НачалоДня(Момент)}
            И УчетРабочегоВремени.Период <= %Момент
        Сгруппировать по
            УчетРабочегоВремени.Период,
            УчетРабочегоВремени.ФизическоеЛицо, 
            УчетРабочегоВремени.Статус  
        }
    пер ДлительностьПрисутствий = Длительность.ИзМиллисекунд(0)
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        если РезультатСтрока.ПериодОкончание != Момент{} и РезультатСтрока.ПериодОкончание <= Момент
            ДлительностьПрисутствий = ДлительностьПрисутствий + (РезультатСтрока.ПериодОкончание - РезультатСтрока.Период - 1с)
        ;
    ;
    возврат ДлительностьПрисутствий
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ФиксацияРабочегоВремениПоУмолчаниюВключена(): Булево
    знч Запрос = Запрос{
        Выбрать Первые 1
            ФиксацияРабочегоВремени
        Из 
            НастройкиУчетаВремени
        Где
            Подразделение == Неопределено
            И ФиксацияРабочегоВремени != Неопределено
        }
    исп РезультатЗапроса = Запрос.Выполнить()
    знч РезультатЗапросаСтроки = новый ЧитаемыйМассив(РезультатЗапроса)
    если (не РезультатЗапросаСтроки.Пусто())
        возврат РезультатЗапросаСтроки[0].ФиксацияРабочегоВремени
    ;
    возврат Ложь
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод МножествоТипа(Тип: Тип): Множество<Тип>
    возврат {Тип}
;