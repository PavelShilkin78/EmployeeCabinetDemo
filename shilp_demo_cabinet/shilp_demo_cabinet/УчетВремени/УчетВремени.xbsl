импорт Компания
импорт ФизическиеЛица
импорт ИнтерфейсныеКомпонентыСтандартные
импорт ОбщиеСтандартные
импорт СтандартноеПриложение
импорт КонтрольДоступа

@ВПроекте
конст ИД_РАЗДЕЛА_УЧЕТ_ВРЕМЕНИ = "УчетВремени"
@ВПроекте
конст ИД_ВИДЖЕТА_УЧЕТ_ВРЕМЕНИ_ПЛЕЕР = "УчетВремениПлеер"

@ВПроекте
конст ИД_ПОДСИСТЕМЫ = "УчетВремени"

@ВПроекте
@НаКлиенте
метод ПараметрыСеанса(): ПараметрыСеанса
    возврат ПараметрыСеансаСервис.ПолучитьСервис().ПараметрПоКлючу(КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА) как ПараметрыСеанса
;

@ВПроекте
@НаКлиенте
метод ИконкаЦвет(Статус: УчетВремениСтатусы?, Альфа: Число = 1): Цвет | Авто
    возврат БиблиотекаЦветов.Цвет(ВидЦветаПоСтатусу(Статус), Альфа)
;

@ВПроекте
@НаКлиенте
метод ВидЦветаПоСтатусу(Статус: УчетВремениСтатусы?): БиблиотекаЦветов.ВидыЦвета
    пер ВидЦвета: БиблиотекаЦветов.ВидыЦвета
    выбор Статус
    когда Присутствует
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.Зеленый
    когда ВременноОтсутствует
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.Оранжевый
    когда Отсутствует
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.Красный
    когда Неопределено
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.ТемноСерый
    ;
    возврат ВидЦвета
;

@ВПроекте
@НаКлиенте
метод ПредставлениеПоСтатусу(Статус: УчетВремениСтатусы?): Строка
    возврат Статус == Неопределено ? "Нет на месте" : Статус.Представление()
        ;

@ВПроекте
@НаКлиенте
метод УчетВремениВиджетЗаголовок(): Строка
    знч ДатаСегодня = Дата.Сейчас(ЧасовойПояс.Текущий())
    знч УчетВремениВиджетЗаголовок = "Рабочий день, %{МенеджерДат.ФорматДаты(ДатаСегодня, "дд ММММ")}"
    возврат УчетВремениВиджетЗаголовок
;

@ВПодсистеме
@НаКлиенте
метод ПеречитатьПараметрыСеансаФиксацииРабочегоВремени()
    пер УчетВремениПараметрыСеанса = ВызовСервера.ПолучитьЗначенияПараметровСеанса()
    УчетВремени.ПараметрыСеанса().ФиксацияРабочегоВремени = УчетВремениПараметрыСеанса.ФиксацияРабочегоВремени
;

@ВПодсистеме
метод ЗначокКоннотация(Статус: УчетВремениСтатусы?): ОценкаИнформации
    пер КоннотацияПоСтатусу: ОценкаИнформации = ОценкаИнформации.Обычная
    выбор Статус
    когда Присутствует
        КоннотацияПоСтатусу = ОценкаИнформации.Положительная
    когда ВременноОтсутствует
        КоннотацияПоСтатусу = ОценкаИнформации.Предупреждающая
    когда Отсутствует
        КоннотацияПоСтатусу = ОценкаИнформации.Отрицательная
    ;
    возврат КоннотацияПоСтатусу
;

@ВПодсистеме
метод ЗначокРезультатПроверки(Статус: УчетВремениСтатусы?): РезультатПроверкиДанных
    пер КоннотацияПоСтатусу = РезультатПроверкиДанных.Отсутствует
    выбор Статус
    когда Присутствует
        КоннотацияПоСтатусу = РезультатПроверкиДанных.Успех
    когда ВременноОтсутствует
        КоннотацияПоСтатусу = РезультатПроверкиДанных.Предупреждение
    когда Отсутствует
        КоннотацияПоСтатусу = РезультатПроверкиДанных.Ошибка
    ;
    возврат КоннотацияПоСтатусу
;

@ВПодсистеме
конст КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: Строка = "УчетВремениПараметрыСеанса" 

@ВПодсистеме
структура ДанныеЗаписиУчетаВремени
    обз знч Дата: Дата
    обз знч Период: Момент
    обз знч ФизическоеЛицо: ФизическиеЛица.Ссылка
    обз знч Статус: УчетВремениСтатусы
    обз знч Комментарий: Строка
;

@ВПроекте
структура ПараметрыСеанса
    пер ТекущийСтатусФизическогоЛица: УчетВремениСтатусы?
    пер МоментТекущегоСтатусаФизическогоЛица: Момент
    пер ДлительностьСменыСтатуса: Длительность?
    пер ФиксацияРабочегоВремени: Булево
;

@ВПодсистеме
структура ДанныеКарточкиДня
    пер ЗапросДатаНачала: Дата
    пер ЗапросДатаОкончания: Дата
    пер ЗапросВремяНачала: Время
    пер ЗапросВремяОкончания: Время
    пер ЗапросЦветКартинки: Цвет
    пер ЗапросПредставление: Строка
    пер ЗапросПериод: Строка
    пер ВремяОтсутствия: ЗакрытыйДиапазон<Время>?
    пер Период: Момент
    пер ПериодОкончание: Момент
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка?
    пер Статус: УчетВремениСтатусы?
    пер ПоследнийПередОтсутствием: Булево
    пер Добавлено: Булево
    пер Удалено: Булево
;

@ВПодсистеме
структура ДанныеКарточкиДняДляЗапроса
    пер ЗапросДатаНачала: Дата
    пер ЗапросДатаОкончания: Дата
    пер ЗапросВремяНачала: Время
    пер ЗапросВремяОкончания: Время
    пер Период: Момент
    пер ПериодОкончание: Момент
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка?
    пер Статус: УчетВремениСтатусы?
    пер Добавлено: Булево
    пер Удалено: Булево
;

@ВПодсистеме
структура ДанныеУчетаВремениСотрудников
    пер Дата: Дата
    пер Период: ДатаВремя
    пер ПериодОкончания: ДатаВремя
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка?
    пер ФизическоеЛицоПредставление: Строка
    пер Статус: УчетВремениСтатусы?
    пер СтатусДляОтображения: УчетВремениСтатусы?
    пер Комментарий: Строка
    пер КомментарийДлительногоОтсутствия: Строка
    пер ПричинаДлительногоОтсутствия: Строка
    пер ЛичныйКабинетСоздан: Булево
    пер Миниатюра: ДвоичныйОбъект.Ссылка?
;

@ВПодсистеме
структура ДанныеНастройкиИсключенийУчетаВремени
    пер Подразделение: СтруктураПредприятия.Ссылка?
    пер ПодразделениеПредставление: Строка
    пер ФиксацияРабочегоВремени: Булево?
    пер Добавлено: Булево
    пер Удалено: Булево
;

@ВПодсистеме
метод ПредставлениеПоСтатусуДляКарточкиДня(Статус: УчетВремениСтатусы?): Строка
    пер ПредставлениеВКарточкеДня: Строка
    выбор Статус
    когда Присутствует
        ПредставлениеВКарточкеДня ="Приход"
    когда ВременноОтсутствует
        ПредставлениеВКарточкеДня = "Перерыв"
    когда Отсутствует
        ПредставлениеВКарточкеДня = "Уход"
    когда Неопределено
        ПредставлениеВКарточкеДня = "-"
    ;
    возврат ПредставлениеВКарточкеДня
;

@ВПодсистеме
метод ПересчитатьПоследнийПередОтсутствием(КоллекцияДанных:Массив<УчетВремени.ДанныеКарточкиДня>)
    если КоллекцияДанных.Пусто()
        возврат
    ;
    пер ПоследнийПередОтсутствиемНайден: Булево
    пер ПоследнийЭлемент = КоллекцияДанных.Последний()
    пер Индекс = КоллекцияДанных.Граница()
    пока Индекс >= 0
        пер ДанныеСтроки = КоллекцияДанных.Получить(Индекс)
        ДанныеСтроки.ПоследнийПередОтсутствием = Ложь
        если не ПоследнийПередОтсутствиемНайден и ПоследнийЭлемент == ДанныеСтроки и ДанныеСтроки.Статус != УчетВремениСтатусы.Отсутствует
            ДанныеСтроки.ПоследнийПередОтсутствием = Истина
            ПоследнийПередОтсутствиемНайден = Истина
        ;
        если не ПоследнийПередОтсутствиемНайден и КоллекцияДанных.Граница() > 0 
            и КоллекцияДанных.Получить(КоллекцияДанных.Граница()-1) == ДанныеСтроки и ПоследнийЭлемент.Статус == УчетВремениСтатусы.Отсутствует
            ДанныеСтроки.ПоследнийПередОтсутствием = Истина
            ПоследнийПередОтсутствиемНайден = Истина
        ;
        Индекс -= 1
    ;
;

@ВПодсистеме
@НаСервере
метод ПолучитьЗначенияПараметровСеанса(): УчетВремени.ПараметрыСеанса
    пер ПараметрыСеанса = новый УчетВремени.ПараметрыСеанса()
    пер ФизическоеЛицо = ПользователиСистемы.ТекущееФизическоеЛицо()
    если ФизическоеЛицо == Неопределено
        возврат ПараметрыСеанса
    ;
    пер ТекущийМомент: Момент = Момент.Сейчас()
    знч Запрос = Запрос{
        Выбрать Первые 1
            УчетРабочегоВремени.Период Как Период, 
            Минимум(СледующийУчетРабочегоВремени.Период.ЗаменитьNull(Момент{})) Как ПериодОкончание, 
            УчетРабочегоВремени.ФизическоеЛицо Как ФизическоеЛицо, 
            УчетРабочегоВремени.Статус Как Статус 
        Из
            УчетРабочегоВремени КАК УчетРабочегоВремени
            Левое соединение УчетРабочегоВремени КАК СледующийУчетРабочегоВремени
                По УчетРабочегоВремени.ФизическоеЛицо == СледующийУчетРабочегоВремени.ФизическоеЛицо
                И УчетРабочегоВремени.Дата == СледующийУчетРабочегоВремени.Дата
                И УчетРабочегоВремени.Период < СледующийУчетРабочегоВремени.Период
        Где
            УчетРабочегоВремени.ФизическоеЛицо == %ФизическоеЛицо 
            И УчетРабочегоВремени.Период >= %{МенеджерДат.НачалоДня(ТекущийМомент)}
            И УчетРабочегоВремени.Период <= %ТекущийМомент
        Сгруппировать по
            УчетРабочегоВремени.Период,
            УчетРабочегоВремени.ФизическоеЛицо, 
            УчетРабочегоВремени.Статус
        Упорядочить по
            УчетРабочегоВремени.Период Убыв
        }
    исп Результат = Запрос.Выполнить()    
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто()) 
        ПараметрыСеанса.ТекущийСтатусФизическогоЛица = РезультатСтроки[0].Статус
        ПараметрыСеанса.МоментТекущегоСтатусаФизическогоЛица = РезультатСтроки[0].Период
        если РезультатСтроки[0].ПериодОкончание != Момент{}
            ПараметрыСеанса.ДлительностьСменыСтатуса = РезультатСтроки[0].ПериодОкончание - ТекущийМомент + 1с
        иначе
            ПараметрыСеанса.ДлительностьСменыСтатуса = Неопределено
        ;
    ;
    знч ЗапросНастроек = Запрос{
        Выбрать 
            НастройкиУчетаВремени.ФиксацияРабочегоВремени.ЗаменитьNull(Ложь) Как ФиксацияРабочегоВремени
        Из 
            ПодразделенияИСотрудники Как ПодразделенияИСотрудники
            ЛЕВОЕ СОЕДИНЕНИЕ НастройкиУчетаВремени Как НастройкиУчетаВремени
                ПО ПодразделенияИСотрудники.Подразделение == НастройкиУчетаВремени.Подразделение
                    И НастройкиУчетаВремени.ФиксацияРабочегоВремени != Неопределено
        Где
            ПодразделенияИСотрудники.ФизическоеЛицо == %ФизическоеЛицо
            И ПодразделенияИСотрудники.ОсновноеМестоРаботы
            И Не НастройкиУчетаВремени.ФиксацияРабочегоВремени Есть Null
        }
    исп РезультатЗапросаНастроек = ЗапросНастроек.Выполнить() 
    знч РезультатЗапросаНастроекСтроки = новый ЧитаемыйМассив(РезультатЗапросаНастроек)
    если (не РезультатЗапросаНастроекСтроки.Пусто())  
        ПараметрыСеанса.ФиксацияРабочегоВремени = РезультатЗапросаНастроекСтроки[0].ФиксацияРабочегоВремени 
    иначе
        ПараметрыСеанса.ФиксацияРабочегоВремени = ВызовСервера.ФиксацияРабочегоВремениПоУмолчаниюВключена()    
    ;
    возврат ПараметрыСеанса
;
