импорт ВладельцыКабинетов
импорт ИнтерфейсныеКомпонентыСтандартные

@Обработчик
метод ПослеСоздания()
    Компоненты.УчетВремениКарточкаДня.ОбновитьДанные()
;

метод ПанельОсновнаяЗаписатьИЗакрыть(Источник: КоманднаяПанельФорм, Событие: СобытиеКомпонента)
    ОтразитьСтатусУчетаВремениФизическогоЛица()
    Закрыть()
;

метод  ПанельОсновнаяСохранитьЧерновик(Источник: КоманднаяПанельФорм, Событие: СобытиеКомпонента)
    Закрыть()
;

метод ОтразитьСтатусУчетаВремениФизическогоЛица()
    пер КоллекцияИсточника = Компоненты.УчетВремениКарточкаДня.КоллекцияИсточника()
    если КоллекцияИсточника.Пусто()
        возврат
    ;
    пер КоллекцияДанных = новый Массив<УчетВремени.ДанныеКарточкиДня>()
    для Элемент из КоллекцияИсточника
        КоллекцияДанных.Добавить(Элемент)    
    ;
    // изменяем данные статусов и обновляем параметры сеанса
    пер УчетВремениПараметрыСеанса = ОтразитьЗаписиИПолучитьПараметрыСеанса(КоллекцияДанных)
    УчетВремени.ПараметрыСеанса().ТекущийСтатусФизическогоЛица = УчетВремениПараметрыСеанса.ТекущийСтатусФизическогоЛица
    УчетВремени.ПараметрыСеанса().МоментТекущегоСтатусаФизическогоЛица = УчетВремениПараметрыСеанса.МоментТекущегоСтатусаФизическогоЛица
    УчетВремени.ПараметрыСеанса().ДлительностьСменыСтатуса = УчетВремениПараметрыСеанса.ДлительностьСменыСтатуса
    ИзмененСтатусУчетаВремениФизическогоЛица.Оповестить()
;

@НаСервере @ДоступноСКлиента
статический метод ОтразитьЗаписиИПолучитьПараметрыСеанса(Данные: ЧитаемыйМассив<УчетВремени.ДанныеКарточкиДня>): УчетВремени.ПараметрыСеанса
    ОтразитьЗаписиУчетаВремени(Данные)
    возврат ВызовСервера.ПолучитьЗначенияПараметровСеанса()   
;

@НаСервере
статический метод ОтразитьЗаписиУчетаВремени(Данные: ЧитаемыйМассив<УчетВремени.ДанныеКарточкиДня>)
    // удаляем помеченные данные учета времени
    УдалитьУчетыВремени(Данные)
    // добавляем новые или изменяем отредактированные
    ДобавитьИзменитьУчетыВремени(Данные)
;

@НаСервере
статический метод УдалитьУчетыВремени(Данные: ЧитаемыйМассив<УчетВремени.ДанныеКарточкиДня>)
    // готовим данные
    если Данные.Пусто()
        возврат
    ;
    пер Источник = новый Массив<УчетВремени.ДанныеКарточкиДняДляЗапроса>()
    для СтрокаДанные из Данные
        Источник.Добавить(новый УчетВремени.ДанныеКарточкиДняДляЗапроса(
                ЗапросДатаНачала = СтрокаДанные.ЗапросДатаНачала,
                Период = СтрокаДанные.Период,
                ПериодОкончание = СтрокаДанные.ПериодОкончание,
                ФизическоеЛицо = СтрокаДанные.ФизическоеЛицо,
                Удалено = СтрокаДанные.Удалено                    
            )
        )
    ;
    // собираем помеченные на удаление
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч Запрос = Запрос{
        Выбрать
            ЗапросДатаНачала,
            Период,
            ПериодОкончание,
            ФизическоеЛицо
        Поместить ВТДанные
        Из
            %Источник
        Где
            Удалено
        ;
        Выбрать 
            УчетРабочегоВремени.Ссылка Как Ссылка
        Из 
            УчетРабочегоВремени КАК УчетРабочегоВремени
            Внутреннее соединение ВТДанные как ВТДанные
            ПО УчетРабочегоВремени.Дата == ВТДанные.ЗапросДатаНачала
                И УчетРабочегоВремени.ФизическоеЛицо == ВТДанные.ФизическоеЛицо
                И УчетРабочегоВремени.Период == ВТДанные.Период
        Объединить Все
        Выбрать 
            УчетРабочегоВремени.Ссылка.ЗаменитьNull(Неопределено)
        Из 
            УчетРабочегоВремени КАК УчетРабочегоВремени
            Внутреннее соединение ВТДанные как ВТДанные
            ПО УчетРабочегоВремени.Дата == ВТДанные.ЗапросДатаНачала
                И УчетРабочегоВремени.ФизическоеЛицо == ВТДанные.ФизическоеЛицо
                И УчетРабочегоВремени.Период == ВТДанные.ПериодОкончание 
        Где 
            УчетРабочегоВремени.Статус == УчетВремениСтатусы.Присутствует
        }
    исп РезультатЗапроса = Запрос.Выполнить() 
    ПривилегированныйРежим.Закрыть()
    // удаляем данные учета времени
    исп Транзакции.Начать()
    для СтрокаЗапроса из РезультатЗапроса
        знч ЭлементРабочегоВремени = СтрокаЗапроса.Ссылка.ЗагрузитьОбъект(Истина)
        если ЭлементРабочегоВремени != Неопределено
            ЭлементРабочегоВремени.Удалить()
        ;
    ;
;

@НаСервере
статический метод ДобавитьИзменитьУчетыВремени(Данные: ЧитаемыйМассив<УчетВремени.ДанныеКарточкиДня>)
    // готовим данные
    пер Источник = новый Массив<УчетВремени.ДанныеКарточкиДняДляЗапроса>()
    для СтрокаДанные из Данные
        Источник.Добавить(новый УчетВремени.ДанныеКарточкиДняДляЗапроса(
                ЗапросДатаНачала = СтрокаДанные.ЗапросДатаНачала,
                ЗапросВремяНачала = СтрокаДанные.ЗапросВремяНачала,
                ЗапросВремяОкончания = СтрокаДанные.ЗапросВремяОкончания,
                Период = СтрокаДанные.Период,
                ПериодОкончание = СтрокаДанные.ПериодОкончание,
                ФизическоеЛицо = СтрокаДанные.ФизическоеЛицо,
                Статус = СтрокаДанные.Статус,
                Добавлено = СтрокаДанные.Добавлено,
                Удалено = СтрокаДанные.Удалено                    
            )
        )
    ;
    // собираем данные учета времени
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч Запрос = Запрос{
        Выбрать
            ЗапросДатаНачала,
            ЗапросВремяНачала,
            ЗапросВремяОкончания,
            Период,
            ПериодОкончание,
            ФизическоеЛицо,
            Статус,
            Добавлено
        Поместить ВТДанные
        Из
            %Источник
        Где
            Не Удалено
        ;
        Выбрать 
            ВТДанные.ЗапросДатаНачала Как ЗапросДатаНачала,
            ВТДанные.ЗапросВремяНачала Как ЗапросВремяНачала,
            ВТДанные.ЗапросВремяОкончания Как ЗапросВремяОкончания,
            ВТДанные.Период Как Период,
            ВТДанные.ФизическоеЛицо Как ФизическоеЛицо,
            ВТДанные.Статус Как Статус,
            УчетРабочегоВремени.Ссылка.ЗаменитьNull(Неопределено) Как Ссылка,
            ВТДанные.Добавлено Как Добавлено,
            Ложь КАК ПолеПериодОкончание
        Из 
            ВТДанные КАК ВТДанные
            Левое соединение УчетРабочегоВремени как УчетРабочегоВремени
            ПО ВТДанные.ЗапросДатаНачала == УчетРабочегоВремени.Дата
                И ВТДанные.ФизическоеЛицо == УчетРабочегоВремени.ФизическоеЛицо
                И ВТДанные.Период == УчетРабочегоВремени.Период
        Объединить Все
        Выбрать 
            ВТДанные.ЗапросДатаНачала Как ЗапросДатаНачала,
            ВТДанные.ЗапросВремяНачала Как ЗапросВремяНачала,
            ВТДанные.ЗапросВремяОкончания Как ЗапросВремяОкончания,
            ВТДанные.ПериодОкончание Как Период,
            ВТДанные.ФизическоеЛицо Как ФизическоеЛицо,
            УчетРабочегоВремени.Статус.ЗаменитьNull(УчетВремениСтатусы.Отсутствует) Как Статус,
            УчетРабочегоВремени.Ссылка.ЗаменитьNull(Неопределено) Как Ссылка,
            ВТДанные.Добавлено Как Добавлено,
            Истина КАК ПолеПериодОкончание
        Из 
            ВТДанные КАК ВТДанные
            Левое соединение УчетРабочегоВремени как УчетРабочегоВремени
            ПО ВТДанные.ЗапросДатаНачала == УчетРабочегоВремени.Дата
                И ВТДанные.ФизическоеЛицо == УчетРабочегоВремени.ФизическоеЛицо
                И ВТДанные.ПериодОкончание == УчетРабочегоВремени.Период 
        Где 
            УчетРабочегоВремени.Статус == УчетВремениСтатусы.Присутствует
        }
    исп РезультатЗапроса = Запрос.Выполнить() 
    ПривилегированныйРежим.Закрыть()
    // рассчитываем периоды
    пер Период: Момент
    пер ПериодОкончание: Момент
    исп Транзакции.Начать()
    для СтрокаРезультата из РезультатЗапроса
        пер ЧасовойПоясТекущегоФизическогоЛица = ВладельцыКабинетов.ЧасовойПоясФизическогоЛица(СтрокаРезультата.ФизическоеЛицо)
        Период = новый Момент(СтрокаРезультата.ЗапросДатаНачала, СтрокаРезультата.ЗапросВремяНачала, ЧасовойПоясТекущегоФизическогоЛица)
        ПериодОкончание = новый Момент(СтрокаРезультата.ЗапросДатаНачала, СтрокаРезультата.ЗапросВремяОкончания, ЧасовойПоясТекущегоФизическогоЛица)
        если СтрокаРезультата.Добавлено
            // добавляем 
            пер ЭлементРабочегоВремени = новый УчетРабочегоВремени.Объект(
                                            Дата = СтрокаРезультата.ЗапросДатаНачала,
                                            Период = Период,
                                            ФизическоеЛицо = СтрокаРезультата.ФизическоеЛицо,
                                            Статус = СтрокаРезультата.Статус,
                                            Комментарий = "")
            ЭлементРабочегоВремени.Записать()   
            если СтрокаРезультата.Статус == УчетВремениСтатусы.ВременноОтсутствует и ПериодОкончание != Момент{}
                // добавляем окончание периода
                пер ЭлементРабочегоВремениОкончание = новый УчетРабочегоВремени.Объект(
                                                        Дата = СтрокаРезультата.ЗапросДатаНачала,
                                                        Период = ПериодОкончание,
                                                        ФизическоеЛицо = СтрокаРезультата.ФизическоеЛицо,
                                                        Статус = УчетВремениСтатусы.Присутствует,
                                                        Комментарий = "")
                ЭлементРабочегоВремениОкончание.Записать()     
            ;
        иначе если СтрокаРезультата.Ссылка != Неопределено      
            пер ЭлементРабочегоВремени = СтрокаРезультата.Ссылка.ЗагрузитьОбъект(Истина)
            если ЭлементРабочегоВремени.Период != Период и не СтрокаРезультата.ПолеПериодОкончание
                // редактируем
                ЭлементРабочегоВремени.Дата = СтрокаРезультата.ЗапросДатаНачала
                ЭлементРабочегоВремени.Период = Период
                ЭлементРабочегоВремени.ФизическоеЛицо = СтрокаРезультата.ФизическоеЛицо
                ЭлементРабочегоВремени.Статус = СтрокаРезультата.Статус
                ЭлементРабочегоВремени.Комментарий = ""
                ЭлементРабочегоВремени.Записать()    
            ;
            если ЭлементРабочегоВремени.Период != ПериодОкончание и СтрокаРезультата.ПолеПериодОкончание
                // редактируем окончание периода
                ЭлементРабочегоВремени.Дата = СтрокаРезультата.ЗапросДатаНачала
                ЭлементРабочегоВремени.Период = ПериодОкончание
                ЭлементРабочегоВремени.ФизическоеЛицо = СтрокаРезультата.ФизическоеЛицо
                ЭлементРабочегоВремени.Статус = СтрокаРезультата.Статус
                ЭлементРабочегоВремени.Комментарий = ""
                ЭлементРабочегоВремени.Записать()    
            ;        
        ;        
    ;
;