импорт ЛичныеКабинетыПользователей

@Обработчик
метод ПослеСоздания()
    ШиринаПоляВводаВремени = КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон ? 136 : 152
;

метод ЗначениеВремяОтсутствия(): ЗакрытыйДиапазон<Время>? 
    возврат ДанныеСтроки.ВремяОтсутствия
;

метод ВремяОтсутствияПриИзмененииЗначения(Источник: ПолеВвода<ЗакрытыйДиапазон<Время>?>, Событие: СобытиеПриИзменении<ЗакрытыйДиапазон<Время>?>)
    пер Время: ЗакрытыйДиапазон<Время>? = ДанныеСтроки.ВремяОтсутствия
    если Время != Неопределено
        ДанныеСтроки.ЗапросВремяНачала = Время.От
        ДанныеСтроки.ЗапросВремяОкончания = Время.До
    ;
;

метод ВидимостьВремениОкончания(Статус: УчетВремениСтатусы?): Булево
    возврат Статус == УчетВремениСтатусы.ВременноОтсутствует
;

метод КоллекцияИсточника(): Массив<УчетВремени.ДанныеКарточкиДня>
    возврат этот.СписокВладелец.Источник.Данные
;

метод УчетВремениПерерывКнопкаПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    пер КоллекцияИсточника = КоллекцияИсточника()
    если КоллекцияИсточника.Пусто()
        возврат
    ;
    пер КоллекцияДанных = новый Массив<УчетВремени.ДанныеКарточкиДня>()
    для Элемент из КоллекцияИсточника
        КоллекцияДанных.Добавить(Элемент)    
    ;
    КомпонентДанных.Добавлено = Истина
    КомпонентДанных.Удалено = Ложь
    КомпонентДанных.ФизическоеЛицо = ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
    КомпонентДанных.ЗапросДатаНачала = КоллекцияДанных.Первый().ЗапросДатаНачала
    КомпонентДанных.ЗапросВремяНачала = Время.Сейчас()
    КомпонентДанных.ЗапросДатаОкончания = КомпонентДанных.ЗапросДатаНачала
    КомпонентДанных.ЗапросВремяОкончания = Время.Сейчас().КонецЧаса()
    КомпонентДанных.ВремяОтсутствия = новый ЗакрытыйДиапазон<Время>(КомпонентДанных.ЗапросВремяНачала, КомпонентДанных.ЗапросВремяОкончания)       
    КомпонентДанных.Статус = УчетВремениСтатусы.ВременноОтсутствует
    КомпонентДанных.ЗапросПредставление = УчетВремени.ПредставлениеПоСтатусуДляКарточкиДня(КомпонентДанных.Статус)
    если (КоллекцияДанных.Последний().Статус == УчетВремениСтатусы.Отсутствует)
        КоллекцияДанных.Вставить(КоллекцияДанных.Граница(),КомпонентДанных)     
    иначе      
        КоллекцияДанных.Добавить(КомпонентДанных)    
    ;
    ПересчитатьПоследнийПередОтсутствием(КоллекцияДанных)
;

метод КартинкаУдалитьПриНажатии(Источник: Картинка, Событие: СобытиеПриНажатии)
    ДанныеСтроки.Удалено = Истина
    если ДанныеСтроки.Добавлено и ДанныеСтроки.Удалено
        пер КоллекцияИсточника = КоллекцияИсточника()
        пер КоллекцияДанных = новый Массив<УчетВремени.ДанныеКарточкиДня>()
        для Элемент из КоллекцияИсточника
            КоллекцияДанных.Добавить(Элемент)
        ;
        КоллекцияДанных.Удалить(ДанныеСтроки)
        ПересчитатьПоследнийПередОтсутствием(КоллекцияДанных)
    ;
;

метод ПересчитатьПоследнийПередОтсутствием(КоллекцияДанных: Массив<УчетВремени.ДанныеКарточкиДня>)
    УчетВремени.ПересчитатьПоследнийПередОтсутствием(КоллекцияДанных)
    пер КоллекцияИсточника = КоллекцияИсточника()
    КоллекцияИсточника.Очистить()
    КоллекцияИсточника.ДобавитьВсе(КоллекцияДанных)
;

метод ВремяОтсутствияВидимость(): Булево
    возврат ВидимостьВремениОкончания(ДанныеСтроки.Статус) и не ДанныеСтроки.Удалено
;

метод ПолеВремяНачалаВидимость(): Булево
    возврат не ВидимостьВремениОкончания(ДанныеСтроки.Статус) и не ДанныеСтроки.Удалено
;