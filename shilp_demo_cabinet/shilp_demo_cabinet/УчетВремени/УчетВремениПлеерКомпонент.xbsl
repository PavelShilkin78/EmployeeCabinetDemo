импорт ОбщиеСтандартные
импорт ИнтерфейсныеКомпонентыСтандартные
импорт ФизическиеЛица
импорт ЛичныеКабинетыПользователей

@Обработчик
метод ПослеСоздания()
    ФизическоеЛицо = ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо    
    ПеречитатьДанныеПоСтатусуФизическогоЛица()
    ИзмененаНастройкаФиксацииРабочегоВремени.ПодключитьОбработчик(&УчетВремени.ПеречитатьПараметрыСеансаФиксацииРабочегоВремени)
    ИзмененСтатусУчетаВремениФизическогоЛица.ПодключитьОбработчик(&ПриИзмененииСтатусаФизическогоЛица)
    ОбработкаСекундомера()
    ПодключитьОбработчикТаймера(&ОбработкаСекундомера, 10с)
;

метод ПриИзмененииСтатусаФизическогоЛица()
    ПеречитатьДанныеПоСтатусуФизическогоЛица()
    ОбработкаСекундомера()
;

метод ПеречитатьДанныеПоСтатусуФизическогоЛица()
    ВремяРабочееДлительность = ВызовСервера.ПолучитьРабочееВремяФизическогоЛицаНаДату(ФизическоеЛицо, Момент.Сейчас())
    пер ПеременаСтатусаДлительность = УчетВремени.ПараметрыСеанса().ДлительностьСменыСтатуса
    если ПеременаСтатусаДлительность != Неопределено
        ПодключитьОбработчикТаймера(&ОтразитьСтатусУчетаВремениФизическогоЛица, ПеременаСтатусаДлительность, Истина)        
    ;
;

метод ОбработкаСекундомера()
    ДлительностьТекущегоСтатуса = УчетВремени.ПараметрыСеанса().МоментТекущегоСтатусаФизическогоЛица == Момент{} ? Длительность.ИзМиллисекунд(0) : Момент.Сейчас() - УчетВремени.ПараметрыСеанса().МоментТекущегоСтатусаФизическогоЛица
;

метод ВремяРабочееЗаголовок(): Строка
    пер ВремяРабочееЗаголовок: Строка
    если ВремяРабочееДлительность != Неопределено и ДлительностьТекущегоСтатуса != Неопределено
        пер Время = Время{}
        Время += ВремяРабочееДлительность
        если УчетВремени.ПараметрыСеанса().ТекущийСтатусФизическогоЛица == УчетВремениСтатусы.Присутствует
            Время += ДлительностьТекущегоСтатуса
        ;
        ВремяРабочееЗаголовок = Время.Представление("ЧЧ:мм")
    ;
    возврат ВремяРабочееЗаголовок
;

метод ВремяПерерываЗаголовок(): Строка
    пер ВремяПерерываЗаголовок: Строка
    если УчетВремени.ПараметрыСеанса().ТекущийСтатусФизическогоЛица == УчетВремениСтатусы.ВременноОтсутствует и ДлительностьТекущегоСтатуса != Неопределено
        пер ВремяПерерыва = Время{}
        ВремяПерерыва += ДлительностьТекущегоСтатуса
        ВремяПерерываЗаголовок = ВремяПерерыва.Представление("ЧЧ:мм")
    ;
    возврат ВремяПерерываЗаголовок
;

метод НачатьРабочийДеньПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ОтразитьСтатусУчетаВремениФизическогоЛица(ФизическоеЛицо, УчетВремениСтатусы.Присутствует, Истина)
;

метод ПерерывПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ОтразитьСтатусУчетаВремениФизическогоЛица(ФизическоеЛицо, УчетВремениСтатусы.ВременноОтсутствует, Истина)
;

метод ПродолжитьПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ОтразитьСтатусУчетаВремениФизическогоЛица(ФизическоеЛицо, УчетВремениСтатусы.Присутствует, Истина)
;

метод ЗавершитьРабочийДеньПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ОтразитьСтатусУчетаВремениФизическогоЛица(ФизическоеЛицо, УчетВремениСтатусы.Отсутствует, Истина)
;

метод ОтразитьСтатусУчетаВремениФизическогоЛица(ФизическоеЛицо: ФизическиеЛица.Ссылка?, Статус: УчетВремениСтатусы, ИзменитьПараметрыСеанса: Булево = Ложь)
    // изменяем статус физического лица
    если ФизическоеЛицо == Неопределено
        возврат
    ;    
    пер Период = Момент.Сейчас()
    пер ДатаВремя = Период.ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий())
    пер ОсновнаяЗапись: УчетВремени.ДанныеЗаписиУчетаВремени = новый УчетВремени.ДанныеЗаписиУчетаВремени(
            ДатаВремя.Дата,
            Период,
            ФизическоеЛицо,
            Статус,
            "")   
    ВызовСервера.ОтразитьЗаписиУчетаВремени(ОсновнаяЗапись)
    если ИзменитьПараметрыСеанса
        УчетВремени.ПараметрыСеанса().ТекущийСтатусФизическогоЛица = Статус
        УчетВремени.ПараметрыСеанса().МоментТекущегоСтатусаФизическогоЛица = Период
        ИзмененСтатусУчетаВремениФизическогоЛица.Оповестить()
    ;
    ОбработкаСекундомера()
;

метод ОтразитьСтатусУчетаВремениФизическогоЛица()
    // обновляем параметры сеанса
    пер УчетВремениПараметрыСеанса = ВызовСервера.ПолучитьЗначенияПараметровСеанса()
    УчетВремени.ПараметрыСеанса().ТекущийСтатусФизическогоЛица = УчетВремениПараметрыСеанса.ТекущийСтатусФизическогоЛица
    УчетВремени.ПараметрыСеанса().МоментТекущегоСтатусаФизическогоЛица = УчетВремениПараметрыСеанса.МоментТекущегоСтатусаФизическогоЛица
    УчетВремени.ПараметрыСеанса().ДлительностьСменыСтатуса = УчетВремениПараметрыСеанса.ДлительностьСменыСтатуса
    ИзмененСтатусУчетаВремениФизическогоЛица.Оповестить()
;

метод ШиринаКнопокПлеера(): Число
    пер МинимальнаяШиринаПолуинтервалы: Число
    если КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон
        МинимальнаяШиринаПолуинтервалы = 18
    иначе
        МинимальнаяШиринаПолуинтервалы = 20
    ;      
    возврат МинимальнаяШиринаПолуинтервалы * Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА
;

метод ЗавершитьРабочийДеньШирина(): Число
    если КлиентскоеУстройство.ШиринаОкнаПриложения < 46 * Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА
        возврат 12 * Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА
    иначе
        возврат ШиринаКнопокПлеера()
    ;
;

@ВПодсистеме
метод КартинкаСобытияПлеера(Статус: УчетВремениСтатусы?): ДвоичныйОбъект.Ссылка
    пер Картинка: ДвоичныйОбъект.Ссылка?
    выбор Статус
    когда Присутствует
        Картинка = Ресурс{ПиктограммаКнопкиСтарт.svg}.Ссылка
    когда ВременноОтсутствует
        Картинка = Ресурс{ПиктограммаКнопкиПауза.svg}.Ссылка
    когда Отсутствует
        Картинка = Ресурс{ПиктограммаКнопкиСтоп.svg}.Ссылка
    когда Неопределено
        Картинка = Неопределено
    ;
    возврат Картинка
;
