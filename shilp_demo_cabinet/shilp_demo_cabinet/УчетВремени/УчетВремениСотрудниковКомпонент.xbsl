импорт ИнтерфейсныеКомпонентыСтандартные
импорт Компания
импорт ФизическиеЛица
импорт Отсутствия
импорт СтандартноеПриложение
импорт ЛичныеКабинетыПользователей
импорт ВладельцыКабинетов

@ВПодсистеме
метод СтрокаПоискаВыполнитьПоиск(Источник: СтрокаПоиска, Событие: СобытиеСДанными<Строка>)
    СтрокаПоиска = Событие.Данные
    ОбновитьДанные()
;

@Обработчик
метод ПослеСоздания()
    ИнтерфейсныеКомпоненты.ИнициализироватьТаблицу(Таблица = Компоненты.ТаблицаУчетВремениСотрудников) 
    ИзмененСтатусУчетаВремениФизическогоЛица.ПодключитьОбработчик(&ПриИзмененииСтатусаФизическогоЛица)
    ДатаТекущегоДня = ДатаВремя.Сейчас().Дата
    ОбновитьДанные()
;

метод ПриИзмененииСтатусаФизическогоЛица()
    ОбновитьДанные()
;

метод ПолеДатаТекущегоДняПриИзмененииЗначения(Источник: ПолеВвода<Дата>, Событие: СобытиеПриИзменении<Дата>)
    ОбновитьДанные()
;

метод МиниатюраФизическоеЛицо(ДанныеЭлемента: УчетВремени.ДанныеУчетаВремениСотрудников): ДвоичныйОбъект.Ссылка?
    если ДанныеЭлемента.Миниатюра != Неопределено
        возврат ДанныеЭлемента.Миниатюра!
    ;
    возврат СтандартноеПриложение.ПараметрыСеанса().АватарПоУмолчанию
;

метод УчетВремениСотрудниковПриНажатииЭлемента(Источник: Список<ИсточникДанныхМассив<УчетВремени.ДанныеУчетаВремениСотрудников>>, Событие: СобытиеСДанными<СтрокаСписка<УчетВремени.ДанныеУчетаВремениСотрудников>>)
    пер ФизическоеЛицоСтрокиТаблицы: ФизическиеЛица.Ссылка = Событие.Данные.ДанныеСтроки.ФизическоеЛицо
    если Событие.Данные.ДанныеСтроки.Период.Дата == ДатаТекущегоДня
        КарточкаДня.ОткрытьВМодальномОкне(ОжидатьЗакрытия = Истина, ДатаДня = ДатаТекущегоДня, ФизическоеЛицо = ФизическоеЛицоСтрокиТаблицы)
    ;
;

@ВПодсистеме
метод КоллекцияИсточника(): Массив<УчетВремени.ДанныеУчетаВремениСотрудников>
    возврат Компоненты.ТаблицаУчетВремениСотрудников.Источник.Данные
;

@ВПодсистеме
метод ОбновитьДанные()
    пер Параметры = новый ПараметрыЧтенияДанных(
        ДатаТекущегоДня, 
        ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо, 
        СтрокаПоиска, 
        ВариантОтображения,
        Компания.ПараметрыСеанса().ПодразделенияРуководителя
    )
    пер ПараметрыПрочтения = ПрочитатьДанные(Параметры)
    ЗаполнитьДанные(ПараметрыПрочтения.КоллекцияДанных)
    КоличествоФизическихЛицОбщее = ПараметрыПрочтения.КоличествоОбщее
    КоличествоФизическихЛицОтображаемых = ПараметрыПрочтения.КоличествоОтображаемых
;

метод ЗаполнитьДанные(Данные: ЧитаемыйМассив<УчетВремени.ДанныеУчетаВремениСотрудников>): Булево
    пер КоллекцияДанных = КоллекцияИсточника()
    КоллекцияДанных.Очистить()
    КоллекцияДанных.ДобавитьВсе(Данные) 
    возврат не Данные.Пусто()
;

метод СтатусЗначокЗначение(ДанныеЭлемента: УчетВремени.ДанныеУчетаВремениСотрудников): Строка
    если не ДанныеЭлемента.ЛичныйКабинетСоздан 
        возврат "Нет кабинета"    
    ;
    если не ДанныеЭлемента.ПричинаДлительногоОтсутствия.Пусто()
        возврат "Недоступен" // непосредственно причину длительного отсутствия не отображаем   
    ;
    если ДанныеЭлемента.Период.Дата != ДатаТекущегоДня
        возврат УчетВремени.ПредставлениеПоСтатусу(Неопределено)
    иначе
        возврат УчетВремени.ПредставлениеПоСтатусу(ДанныеЭлемента.СтатусДляОтображения)   
    ;
;

метод СтатусЗначокЦвет(ДанныеЭлемента: УчетВремени.ДанныеУчетаВремениСотрудников): Цвет | Авто
    если ДанныеЭлемента.Период.Дата != ДатаТекущегоДня
        или не ДанныеЭлемента.ПричинаДлительногоОтсутствия.Пусто()
        или не ДанныеЭлемента.ЛичныйКабинетСоздан 
        возврат УчетВремени.ИконкаЦвет(УчетВремениСтатусы.Отсутствует)
    иначе
        возврат УчетВремени.ИконкаЦвет(ДанныеЭлемента.СтатусДляОтображения)
    ;
;  

метод НадписьДействияСтатусаЗаголовок(ДанныеЭлемента: УчетВремени.ДанныеУчетаВремениСотрудников): Строка
    если не ДанныеЭлемента.ПричинаДлительногоОтсутствия.Пусто()
        или не ДанныеЭлемента.ЛичныйКабинетСоздан 
        возврат ""
    ;    
    возврат ДанныеЭлемента.Период.Дата != ДатаТекущегоДня ? "":ДанныеЭлемента.ПериодОкончания.Дата == ДатаТекущегоДня и ДанныеЭлемента.ПериодОкончания > ДанныеЭлемента.Период ? "до %{ДанныеЭлемента.ПериодОкончания.Представление("ЧЧ:мм")}":(ДанныеЭлемента.Период > ДатаВремя.Сейчас() ? "до ":"с ") + "%{ДанныеЭлемента.Период.Представление("ЧЧ:мм")}"    
;

метод КомментарийЗаголовок(ДанныеЭлемента: УчетВремени.ДанныеУчетаВремениСотрудников): Строка
    пер Комментарий = ДанныеЭлемента.Период.Дата != ДатаТекущегоДня ? "":ДанныеЭлемента.Комментарий
    возврат ДанныеЭлемента.КомментарийДлительногоОтсутствия.Пусто() ? Комментарий:ДанныеЭлемента.КомментарийДлительногоОтсутствия+(Комментарий.Пусто() ? "":" (%{Комментарий})")
;

метод БыстрыйФильтрПриНажатии(Источник: КомпонентВыбора, Событие: СобытиеПриНажатии)
    пер Компонент:  КомпонентВыбора = Источник
    ВариантОтображения = Компонент.ДополнительныеДанные как Массив<УчетВремениСтатусы>?
    ОбновитьДанные()
;

метод ПоискШиринаВКолонках(): ШиринаВКолонках | Авто
    возврат КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон ? ШиринаВКолонках.Половинная : ШиринаВКолонках.Тройная
;

метод ПолеДатаТекущегоДняШиринаВКолонках(): ШиринаВКолонках | Авто
    возврат КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон ? ШиринаВКолонках.Половинная : ШиринаВКолонках.Одинарная
;

@НаСервере @НаКлиенте
структура ПараметрыЧтенияДанных
    обз пер ДатаДня: Дата
    обз пер ФизическоеЛицоСеанса: ФизическиеЛица.Ссылка
    обз пер СтрокаПоиска:Строка
    обз пер ВариантОтображения: Массив<УчетВремениСтатусы>?
    обз пер ПодразделенияРуководителя: Массив<СтруктураПредприятия.Ссылка>
; 

@НаСервере @НаКлиенте
структура ПараметрыПрочтенияДанных
    пер КоллекцияДанных: Массив<УчетВремени.ДанныеУчетаВремениСотрудников>
    пер КоличествоОбщее: Число
    пер КоличествоОтображаемых: Число   
; 

@НаСервере @ДоступноСКлиента
статический метод ПрочитатьДанные(Параметры: ПараметрыЧтенияДанных): ПараметрыПрочтенияДанных  
    // подготавливаем необходимые параметры
    пер ПараметрыПрочтенияДанных = новый ПараметрыПрочтенияДанных()
    пер ЧасовойПоясТекущегоФизическогоЛица = ВладельцыКабинетов.ЧасовойПоясФизическогоЛица(Параметры.ФизическоеЛицоСеанса)
    пер КомпонентДанных: УчетВремени.ДанныеУчетаВремениСотрудников
    // собираем данные учета времени
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    исп Результат = ДанныеУчетаВремениФизическихЛиц(Параметры, ЧасовойПоясТекущегоФизическогоЛица)
    ПривилегированныйРежим.Закрыть()
    // обрабатываем данные учета времени
    для СтрокаРезультата из Результат
        пер СтатусОтображения = СтрокаРезультата.Дата != Параметры.ДатаДня ? УчетВремениСтатусы.Отсутствует : СтрокаРезультата.Статус
        если Параметры.ВариантОтображения == Неопределено
            или Параметры.ВариантОтображения.Содержит(СтатусОтображения)
            КомпонентДанных = новый УчетВремени.ДанныеУчетаВремениСотрудников()
            КомпонентДанных.Дата = СтрокаРезультата.Дата
            КомпонентДанных.Период = СтрокаРезультата.Период.ВДатаВремя(ЧасовойПоясТекущегоФизическогоЛица)
            КомпонентДанных.ПериодОкончания = СтрокаРезультата.ПериодОкончания.ВДатаВремя(ЧасовойПоясТекущегоФизическогоЛица)
            КомпонентДанных.ФизическоеЛицо = СтрокаРезультата.ФизическоеЛицо
            КомпонентДанных.ФизическоеЛицоПредставление = СтрокаРезультата.ФизическоеЛицоПредставление            
            КомпонентДанных.Статус = СтрокаРезультата.Статус   
            КомпонентДанных.СтатусДляОтображения = КомпонентДанных.Период > ДатаВремя.Сейчас(ЧасовойПоясТекущегоФизическогоЛица) ? КомпонентДанных.Статус == УчетВремениСтатусы.Присутствует ? УчетВремениСтатусы.ВременноОтсутствует:УчетВремениСтатусы.Присутствует:КомпонентДанных.Статус
            КомпонентДанных.Комментарий = СтрокаРезультата.Комментарий
            КомпонентДанных.КомментарийДлительногоОтсутствия = СтрокаРезультата.КомментарийДлительногоОтсутствия.Найти(",") > 0
                                                                ? СтрокаРезультата.КомментарийДлительногоОтсутствия.ПодстрокаСНачала(СтрокаРезультата.КомментарийДлительногоОтсутствия.Найти(",")) : СтрокаРезультата.КомментарийДлительногоОтсутствия
            КомпонентДанных.ПричинаДлительногоОтсутствия = СтрокаРезультата.ПричинаДлительногоОтсутствия != Неопределено ? СтрокаРезультата.ПричинаДлительногоОтсутствия.Представление() : ""
            КомпонентДанных.ЛичныйКабинетСоздан = СтрокаРезультата.ЛичныйКабинетСоздан
            КомпонентДанных.Миниатюра = СтрокаРезультата.Миниатюра
            если КомпонентДанных.ФизическоеЛицо == Параметры.ФизическоеЛицоСеанса
                ПараметрыПрочтенияДанных.КоллекцияДанных.Вставить(0, КомпонентДанных)
            иначе      
                ПараметрыПрочтенияДанных.КоллекцияДанных.Добавить(КомпонентДанных)
            ;
            ПараметрыПрочтенияДанных.КоличествоОтображаемых +=1
        ;
        ПараметрыПрочтенияДанных.КоличествоОбщее +=1
    ;
    возврат ПараметрыПрочтенияДанных  
;

@НаСервере
статический метод ДанныеУчетаВремениФизическихЛиц(Параметры: ПараметрыЧтенияДанных, ЧасовойПоясТекущегоФизическогоЛица: ЧасовойПояс): РезультатЗапроса<ДанныеУчетаВремени>
    знч Начало = новый Момент(Параметры.ДатаДня, Время{00:00:00.000}, ЧасовойПоясТекущегоФизическогоЛица)
    знч Окончание = Дата.Сейчас(ЧасовойПоясТекущегоФизическогоЛица) == Параметры.ДатаДня ? Момент.Сейчас() : новый Момент(Параметры.ДатаДня, Время{23:59:59.999}, ЧасовойПоясТекущегоФизическогоЛица)
    знч Запрос = Запрос{
        Выбрать
            УчетРабочегоВремени.ФизическоеЛицо Как ФизическоеЛицо,
            Максимум(УчетРабочегоВремени.Период) Как Период, 
            Минимум(СледующийУчетРабочегоВремени.Период.ЗаменитьNull(Момент{})) Как ПериодОкончание 
        Поместить ВТУчетРабочегоВремени
        Из
            УчетРабочегоВремени КАК УчетРабочегоВремени
            Левое соединение УчетРабочегоВремени КАК СледующийУчетРабочегоВремени
                По УчетРабочегоВремени.ФизическоеЛицо == СледующийУчетРабочегоВремени.ФизическоеЛицо
                И УчетРабочегоВремени.Дата == СледующийУчетРабочегоВремени.Дата
                И УчетРабочегоВремени.Период < СледующийУчетРабочегоВремени.Период
        Где
            УчетРабочегоВремени.Период >= %Начало
            И УчетРабочегоВремени.Период <= %Окончание
        Сгруппировать по
            УчетРабочегоВремени.ФизическоеЛицо
        ;
        Выбрать 
            ПодразделенияИСотрудники.ФизическоеЛицо Как ФизическоеЛицо, 
            ПодразделенияИСотрудники.ФизическоеЛицо.Представление.ЗаменитьNull("") Как ФизическоеЛицоПредставление,
            ПодразделенияИСотрудники.ФизическоеЛицо.Миниатюра.Хранилище.ЗаменитьNull(Неопределено) Как Миниатюра,
            ВТУчетРабочегоВремени.Период.ЗаменитьNull(Момент{}) Как Период,
            ВТУчетРабочегоВремени.ПериодОкончание.ЗаменитьNull(Момент{}) Как ПериодОкончания,
            УчетРабочегоВремени.Дата.ЗаменитьNull(Дата{}) Как Дата,
            УчетРабочегоВремени.Статус.ЗаменитьNull(Неопределено) Как Статус,
            УчетРабочегоВремени.Комментарий.ЗаменитьNull("") Как Комментарий,
            ЗаписиОтсутствий.ПредставлениеОтсутствия.ЗаменитьNull("") Как КомментарийДлительногоОтсутствия,
            ЗаписиОтсутствий.Причина.ЗаменитьNull(Неопределено) Как ПричинаДлительногоОтсутствия,
            Выбор
                Когда ЛичныеКабинеты.Состояние.ЗаменитьNull(СостоянияЛичногоКабинета.НеСоздан) != СостоянияЛичногоКабинета.НеСоздан
                    и ЛичныеКабинеты.Доступность.ЗаменитьNull(Неопределено) == ДоступностьЛичногоКабинета.Включен
                    Тогда Истина
                Иначе Ложь
            Конец Как ЛичныйКабинетСоздан
        Породить ДанныеУчетаВремени
        Из
            ПодразделенияИСотрудники КАК ПодразделенияИСотрудники
            Левое Соединение ВТУчетРабочегоВремени КАК ВТУчетРабочегоВремени
                Внутреннее Соединение УчетРабочегоВремени КАК УчетРабочегоВремени
                    ПО ВТУчетРабочегоВремени.ФизическоеЛицо == УчетРабочегоВремени.ФизическоеЛицо
                    И ВТУчетРабочегоВремени.Период == УчетРабочегоВремени.Период
                ПО ПодразделенияИСотрудники.ФизическоеЛицо == ВТУчетРабочегоВремени.ФизическоеЛицо
            Левое Соединение ЗаписиОтсутствий Как ЗаписиОтсутствий
                ПО ПодразделенияИСотрудники.ФизическоеЛицо == ЗаписиОтсутствий.ФизическоеЛицо
                И %{Параметры.ДатаДня} >=| ЗаписиОтсутствий.ДатаНачала И %{Параметры.ДатаДня} <=| ЗаписиОтсутствий.ДатаОкончания
            Левое Соединение ЛичныеКабинеты Как ЛичныеКабинеты
                ПО ПодразделенияИСотрудники.ФизическоеЛицо == ЛичныеКабинеты.ФизическоеЛицо
            Левое Соединение НастройкиУчетаВремени Как НастройкиУчетаВремени
                ПО ПодразделенияИСотрудники.Подразделение == НастройкиУчетаВремени.Подразделение
        Где
            ПодразделенияИСотрудники.ОсновноеМестоРаботы
            И (%{Параметры.СтрокаПоиска.Пусто()}
                Или ПодразделенияИСотрудники.ФизическоеЛицо.Представление Подобно %{"\%%{Параметры.СтрокаПоиска}\%"})
            И (ПодразделенияИСотрудники.Подразделение В(%{ОрганизационнаяСтруктура.ПодразделенияФизическогоЛица(Параметры.ФизическоеЛицоСеанса)})
                Или ПодразделенияИСотрудники.Подразделение В(%{Параметры.ПодразделенияРуководителя}))
            И НастройкиУчетаВремени.ФиксацияРабочегоВремени.ЗаменитьNull(%{ВызовСервера.ФиксацияРабочегоВремениПоУмолчаниюВключена()}) == Истина
        Сгруппировать по
            ПодразделенияИСотрудники.ФизическоеЛицо, 
            ВТУчетРабочегоВремени.Период,
            ВТУчетРабочегоВремени.ПериодОкончание,
            УчетРабочегоВремени.Дата,
            УчетРабочегоВремени.Статус,
            УчетРабочегоВремени.Комментарий,
            ЗаписиОтсутствий.ПредставлениеОтсутствия,
            ЗаписиОтсутствий.Причина,
            ЛичныеКабинеты.Состояние,
            ЛичныеКабинеты.Доступность 
        Упорядочить по
            ПодразделенияИСотрудники.ФизическоеЛицо.Представление
        }
    возврат Запрос.Выполнить() 
;        