импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт ВладельцыКабинетов
импорт ЛичныеКабинетыПользователей

@ВПодсистеме
метод КоллекцияИсточника(): Массив<УчетВремени.ДанныеКарточкиДня>
    возврат Компоненты.ТаблицаУчетВремениСотрудника.Источник.Данные
;

@ВПодсистеме
метод ОбновитьДанные()
    ЗаполнитьДанные(ПрочитатьДанные(ФизическоеЛицо, ДатаДня, ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо))
;

метод ЗаполнитьДанные(Данные: ЧитаемыйМассив<УчетВремени.ДанныеКарточкиДня>): Булево
    пер КоллекцияДанных = КоллекцияИсточника()
    КоллекцияДанных.Очистить()
    КоллекцияДанных.ДобавитьВсе(Данные) 
    возврат не Данные.Пусто()
;

метод ТаблицаУчетВремениСотрудникаПослеСозданияСтроки(Источник: Список<ИсточникДанныхМассив<УчетВремени.ДанныеКарточкиДня>>, Событие: СобытиеСДанными<СтрокаСписка<УчетВремени.ДанныеКарточкиДня>>)
    пер КомпонентСтроки: УчетВремениКарточкаДняСтрока = Событие.Данные как УчетВремениКарточкаДняСтрока
    КомпонентСтроки.СписокВладелец = Источник как ПроизвольныйСписок<ИсточникДанныхМассив<УчетВремени.ДанныеКарточкиДня>>
;

@НаСервере @ДоступноСКлиента
статический метод ПрочитатьДанные(ФизическоеЛицо: ФизическиеЛица.Ссылка, ДатаДня: Дата, ФизическоеЛицоСеанса: ФизическиеЛица.Ссылка): Массив<УчетВремени.ДанныеКарточкиДня> 
    пер КоллекцияДанных = новый Массив<УчетВремени.ДанныеКарточкиДня>() 
    пер ЧасовойПоясФизическогоЛицаСеанса = ВладельцыКабинетов.ЧасовойПоясФизическогоЛица(ФизическоеЛицоСеанса)
    знч МоментНачала = новый Момент(ДатаДня, Время{00:00:00.000}, ЧасовойПоясФизическогоЛицаСеанса)
    знч МоментОкончания = новый Момент(ДатаДня, Время{23:59:59.999}, ЧасовойПоясФизическогоЛицаСеанса)
    знч Запрос = Запрос{
        Выбрать
            УчетРабочегоВремени.Период Как Период, 
            Минимум(СледующийУчетРабочегоВремени.Период.ЗаменитьNull(Момент{})) Как ПериодОкончание, 
            УчетРабочегоВремени.ФизическоеЛицо Как ФизическоеЛицо, 
            УчетРабочегоВремени.Статус Как Статус 
        Из
            УчетРабочегоВремени КАК УчетРабочегоВремени
            Левое соединение УчетРабочегоВремени КАК СледующийУчетРабочегоВремени
                По УчетРабочегоВремени.ФизическоеЛицо == СледующийУчетРабочегоВремени.ФизическоеЛицо
                И УчетРабочегоВремени.Дата == СледующийУчетРабочегоВремени.Дата
                И УчетРабочегоВремени.Период < СледующийУчетРабочегоВремени.Период
        Где
            УчетРабочегоВремени.ФизическоеЛицо == %ФизическоеЛицо 
            И УчетРабочегоВремени.Период >= %МоментНачала
            И УчетРабочегоВремени.Период <= %МоментОкончания
        Сгруппировать по
            УчетРабочегоВремени.Период,
            УчетРабочегоВремени.ФизическоеЛицо, 
            УчетРабочегоВремени.Статус 
        Упорядочить По
            УчетРабочегоВремени.Период 
        }
    пер ПриходОтражен: Булево
    пер КомпонентДанных: УчетВремени.ДанныеКарточкиДня
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        пер ДатаВремяПериода: ДатаВремя? = РезультатСтрока.Период.ВДатаВремя(ЧасовойПоясФизическогоЛицаСеанса)
        пер ДатаВремяПериодаОкончание: ДатаВремя? = РезультатСтрока.ПериодОкончание.ВДатаВремя(ЧасовойПоясФизическогоЛицаСеанса)
        пер Статус: УчетВремениСтатусы = РезультатСтрока.Статус
        если ПриходОтражен и Статус == УчетВремениСтатусы.Присутствует
            продолжить
        ;
        КомпонентДанных = новый УчетВремени.ДанныеКарточкиДня()
        КомпонентДанных.Период = РезультатСтрока.Период
        КомпонентДанных.ФизическоеЛицо = ФизическоеЛицо
        КомпонентДанных.ЗапросДатаНачала = ДатаВремяПериода.Дата
        КомпонентДанных.ЗапросВремяНачала = ДатаВремяПериода.Время
        если ДатаВремяПериодаОкончание != ДатаВремя{}
            КомпонентДанных.ПериодОкончание = РезультатСтрока.ПериодОкончание
            КомпонентДанных.ЗапросДатаОкончания = ДатаВремяПериодаОкончание.Дата
            КомпонентДанных.ЗапросВремяОкончания = ДатаВремяПериодаОкончание.Время
            если КомпонентДанных.ЗапросВремяНачала < КомпонентДанных.ЗапросВремяОкончания
                КомпонентДанных.ВремяОтсутствия = новый ЗакрытыйДиапазон<Время>(КомпонентДанных.ЗапросВремяНачала, КомпонентДанных.ЗапросВремяОкончания)
            ;
        ;        
        КомпонентДанных.Статус = Статус
        пер Представление: Строка
        пер ПредставлениеПериода: Строка
        Представление = УчетВремени.ПредставлениеПоСтатусуДляКарточкиДня(КомпонентДанных.Статус)
        если КомпонентДанных.Статус == УчетВремениСтатусы.Присутствует
            ПриходОтражен = Истина
            ПредставлениеПериода = "с %{ДатаВремяПериода.Представление("ЧЧ:мм")}"
        иначе если КомпонентДанных.Статус == УчетВремениСтатусы.ВременноОтсутствует
            ПриходОтражен = Истина
            ПредставлениеПериода = МенеджерДат.ПредставлениеПериодаВремени(КомпонентДанных.ЗапросВремяНачала, КомпонентДанных.ЗапросВремяОкончания)
        иначе если КомпонентДанных.Статус == УчетВремениСтатусы.Отсутствует
            ПриходОтражен = Ложь
            ПредставлениеПериода = "в %{ДатаВремяПериода.Представление("ЧЧ:мм")}"
        иначе
            ПредставлениеПериода = "-"
        ; 
        КомпонентДанных.ЗапросПредставление = Представление
        КомпонентДанных.ЗапросПериод = ПредставлениеПериода
        КоллекцияДанных.Добавить(КомпонентДанных)
    ;
    УчетВремени.ПересчитатьПоследнийПередОтсутствием(КоллекцияДанных)
    возврат КоллекцияДанных
;