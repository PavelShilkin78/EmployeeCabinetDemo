импорт ИнтерфейсныеКомпонентыСтандартные
импорт ЛичныеКабинетыПользователей

@ВПроекте
метод ЗаполнитьИсточникДанных(Данные: ЧитаемыйМассив<СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков>): Булево
    КоллекцияИсточника.ДобавитьВсе(Данные)
    Компоненты.ИнформацияОЗапланированныхОтпусках.УстановитьЭлементы(ЭлементыДиаграммы(Данные))
    возврат не Данные.Пусто()        
;

метод ЭлементыДиаграммы(Данные: ЧитаемыйМассив<СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков>): Массив<ЭлементДиаграммыГанта<СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков, СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска>>
    знч ЭлементыДиаграммы: Массив<ЭлементДиаграммыГанта<СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков, СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска>>
    для ЗаписьДанных из Данные   
       пер Интервалы: Массив<ИнтервалДиаграммыГанта<СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска>>
       для ЗапланированныйПериод из ЗаписьДанных.ЗапланированоПоПериодам
            знч ИнтервалДиаграммы: ИнтервалДиаграммыГанта<СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска>
            ИнтервалДиаграммы.Данные = ЗапланированныйПериод
            ИнтервалДиаграммы.Диапазон = новый ЗакрытыйДиапазон<Момент>(
                новый Момент(ЗапланированныйПериод.ДатаНачалаПериода, Время{}, ЧасовойПояс.Текущий()),
                новый Момент(ЗапланированныйПериод.ДатаОкончанияПериода, Время{23:59:59.999}, ЧасовойПояс.Текущий())
            ) 
            ИнтервалДиаграммы.Цвет = СборГрафиковОтпусков.ИконкаЦвет(ЗапланированныйПериод.СостояниеЗапланированногоОтпуска)
            ИнтервалДиаграммы.Ид = ЗапланированныйПериод.ПериодОтпускаСсылка.Ид            
            ИнтервалДиаграммы.Наименование = ЗапланированныйПериод.КоличествоДнейВПериоде.ВСтроку()
            Интервалы.Добавить(ИнтервалДиаграммы)   
        ;
        пер ЭлементДиаграммы = новый ЭлементДиаграммыГанта<СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков, СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска>(
            Наименование = "",
            Данные = ЗаписьДанных, 
            Интервалы = Интервалы
        )
        ЭлементыДиаграммы.Добавить(ЭлементДиаграммы)        
    ;
    возврат ЭлементыДиаграммы     
; 

метод КолонкаФизическоеЛицоКомпактно(): Булево
    возврат ФормФактор != ФормФакторГрафикаОтпусков.Полный
;

метод ДополнительнаяИнформацияЦвет(ДанныеСтроки: Объект?): Цвет | Авто
    если ДанныеСтроки == Неопределено
        возврат БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Серый)
    ;
    пер ДанныеГрафикаОтпусков = (ДанныеСтроки как ЭлементДиаграммыГанта<СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков, СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска>).Данные
    если ДанныеГрафикаОтпусков.ОтпускНеПланирует или не ДанныеГрафикаОтпусков.ЛичныйКабинетСоздан
        возврат БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Серый)
    ;
    возврат ДанныеГрафикаОтпусков.ЛичныйКабинетСоздан ? 
                БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Зеленый)
                : БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Серый)
;

метод ФизическоеЛицоПредставление(ДанныеСтроки: Объект?): Строка
    если ДанныеСтроки == Неопределено
        возврат "нет данных"
    ;
    пер ДанныеГрафикаОтпусков = (ДанныеСтроки как ЭлементДиаграммыГанта<СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков, СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска>).Данные
    если КолонкаФизическоеЛицоКомпактно()
        возврат ДанныеГрафикаОтпусков.ФизическоеЛицоФамилияИО
    иначе
        возврат ДанныеГрафикаОтпусков.ФизическоеЛицоПредставление
    ;
;

метод ДополнительнаяИнформация(ДанныеСтроки: Объект?): Строка
    если ДанныеСтроки == Неопределено
        возврат ""
    ;
    пер ДанныеГрафикаОтпусков = (ДанныеСтроки как ЭлементДиаграммыГанта<СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков, СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска>).Данные
    если не ДанныеГрафикаОтпусков.ОтпускНеПланирует и ДанныеГрафикаОтпусков.ЛичныйКабинетСоздан
        возврат ДанныеГрафикаОтпусков.ЗапланированоПредставлениеОбщее
    ;
    возврат ДанныеГрафикаОтпусков.ЛичныйКабинетСоздан ? "Не планирует" : "Нет кабинета"
;

метод ИнформацияОЗапланированныхОтпускахОтображаемыйДиапазон(): Диапазон<Момент>|Авто
    если ГодТекущейКомпании > 0
        возврат новый Диапазон<Момент>(
                            новый Момент(новый Дата(ГодТекущейКомпании, 1, 1), Время{}, ЧасовойПояс.Текущий()),
                            новый Момент(новый Дата(ГодТекущейКомпании, 12, 31), Время{23:59:59.999}, ЧасовойПояс.Текущий()))
    ;
    возврат Авто
;

метод ОткрытьЗапланированныеОтпуска(Команда: КомандаСПараметром<Объект>, Параметр: Объект)
    ПриНажатииЭлемента(новый СобытиеСДанными(Параметр как ЭлементДиаграммыГанта<СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков, СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска>))                 
;

метод ИнформацияОЗапланированныхОтпускахПриВыделенииЭлемента(Источник: ДиаграммаГанта<СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков, СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска>, Событие: СобытиеПриВыделенииЭлементаДиаграммыГанта<СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков, СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска>)  
    пер ДанныеСоставленияГрафикаОтпусков = Событие.Элемент.Данные
    если ДанныеСоставленияГрафикаОтпусков.ОтпускНеПланирует
        или ДанныеСоставленияГрафикаОтпусков.ПервичноеСостояниеКампанииПодразделения == СостояниеГрафикаОтпусков.Утверждено
        возврат
    ;
    пер ПериодЗапланированногоОтпуска = Событие.Данные?.Данные
    если не (ПериодЗапланированногоОтпуска != Неопределено
           и Событие.Элемент.Данные.ОтветственныйГрафикаСтруктурнойЕдиницы == ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо)
        возврат
    ;

    СборГрафиковОтпусков.ЗаполнитьПунктыМенюСогласования(Согласовать, ПериодЗапланированногоОтпуска.СостояниеЗапланированногоОтпуска)   
    ПериодОтпускаСсылкаВыделенногоЭлемента = ПериодЗапланированногоОтпуска.ПериодОтпускаСсылка
    если не Согласовать.Открыто
        Согласовать.Открыть()
    ;
;   

метод СогласоватьПриВыбореЭлемента(Компонент: ВсплывающееМеню, СобытиеСДанными: СобытиеСДанными<ЭлементМеню>)
    пер СостояниеСогласования = СобытиеСДанными.Данные.ДополнительныеПараметры как СостояниеГрафикаОтпусков
    Компонент.Закрыть()
    если ПериодОтпускаСсылкаВыделенногоЭлемента != Неопределено
        пер ПериодыОтпуска = новый Массив<ПериодыОтпуска.Ссылка>([ПериодОтпускаСсылкаВыделенногоЭлемента])
        если не ПериодыОтпуска.Пусто()
            СборГрафиковОтпусков.ИзменитьСостояниеПериодовОтпуска(
                СостояниеСогласования, 
                ПериодыОтпуска)
            ИзмененЗапланированныйОтпускФизическогоЛица.Оповестить()
        ;
    ;
;