импорт ВебApi
импорт Компания
импорт Обсуждения
импорт СтандартноеПриложение
импорт ФизическиеЛица
импорт ОбщиеСтандартные
импорт ОбменДанными
импорт КонтрольДоступа
импорт Криптография
импорт ЛичныеКабинетыПользователей
импорт УниверсальныеМеханизмы
импорт УниверсальныеМеханизмы::Взаимодействия

// Контракт ПараметрыСеансаПоставщик
@ВПроекте
@Реализация
метод КоллекцияПараметровСеанса(МобильныйИнтерфейс: Булево): Соответствие<Строка, Объект>
    пер ПараметрыСеанса = новый ГрафикОтпусков.ПараметрыСеанса()
    ЗаполнитьПараметрыСеанса(ПараметрыСеанса)
    возврат {ГрафикОтпусков.КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: ПараметрыСеанса}
;
// Конец ПараметрыСеансаПоставщик

@ВПодсистеме
метод ЗаполнитьПараметрыСеанса(ПараметрыСеанса: ГрафикОтпусков.ПараметрыСеанса)
    ПараметрыСеанса.ФункциональныеОпции = ИспользуемаяФункциональность.ФункциональныеОпции()
    ПараметрыСеанса.ФункциональныеОпции.ИспользованиеПодсистемы = ИспользуемаяФункциональность.ПодсистемаИспользуется()
;

// Контракт ПодсистемаПриложения

@ВПроекте
@Реализация
метод ОписаниеПодсистемы(): СтандартноеПриложение.ОписаниеПодсистемы
    возврат новый СтандартноеПриложение.ОписаниеПодсистемы(
        СборГрафиковОтпусков.ИД_ПОДСИСТЕМЫ,
        {
            КонтрольДоступа.ИД_ПОДСИСТЕМЫ, 
            ФизЛица.ИД_ПОДСИСТЕМЫ,
            Компания.ИД_ПОДСИСТЕМЫ,
            ОбменДанными.ИД_ПОДСИСТЕМЫ,
            Криптография.ИД_ПОДСИСТЕМЫ,
            Обсуждения.ИД_ПОДСИСТЕМЫ,
            ЛичныеКабинетыПользователей.ИД_ПОДСИСТЕМЫ,
            УниверсальныеМеханизмы.ИД_ПОДСИСТЕМЫ
        }
    )
;

// Конец ПодсистемаПриложения

// Контракт ОбновляемаяПодсистема

@ВПроекте
@Реализация
метод ОбработчикиЗаполнения(): Массив<СтандартноеПриложение.ОписаниеОбработчикаЗаполнения>
    возврат []
;

@ВПроекте
@Реализация
метод ОбработчикиОбновления(): Массив<СтандартноеПриложение.ОписаниеОбработчикаОбновления>
    возврат []
;

// Конец ОбновляемаяПодсистема


//Контракт ДанныеApi

@ВПроекте
@Реализация
метод МассивТипов(Получатель: ВидПриложения?, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>
    если Получатель == ВидПриложения.Hrm
        Типы.Добавить(Тип<ГрафикОтпусковСтруктурнойЕдиницы.Ссылка>)
        Типы.Добавить(Тип<ГрафикОтпусковПредприятия.Ссылка>)
    ;
    если Получатель == ВидПриложения.Hr
        Типы.Добавить(Тип<ГрафикОтпусковСтруктурнойЕдиницы.Ссылка>)
        Типы.Добавить(Тип<ГрафикОтпусковПредприятия.Ссылка>)
    ;
    если Получатель == ВидПриложения.Ess
        Типы.Добавить(Тип<ГрафикОтпусковСтруктурнойЕдиницы.Ссылка>)
        Типы.Добавить(Тип<ГрафикОтпусковПредприятия.Ссылка>)
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод ТипДанныхJson(ТипОбъекта: Тип, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>
    выбор ТипОбъекта
    когда Тип<ГрафикОтпусковПредприятия.Ссылка>
        Типы.Добавить(ГрафикОтпусковПредприятия.ТипДанныхJson(ВерсияФорматаОбмена))
    когда Тип<ГрафикОтпусковСтруктурнойЕдиницы.Ссылка>
        Типы.Добавить(ГрафикОтпусковСтруктурнойЕдиницы.ТипДанныхJson(ВерсияФорматаОбмена))
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод ТипКоллекцииДанныхJson(ТипОбъекта: Тип, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>
    выбор ТипОбъекта
    когда Тип<ГрафикОтпусковПредприятия.Ссылка>
        Типы.Добавить(ГрафикОтпусковПредприятия.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    когда Тип<ГрафикОтпусковСтруктурнойЕдиницы.Ссылка>
        Типы.Добавить(ГрафикОтпусковСтруктурнойЕдиницы.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод ИнструментыМенеджераОбъекта(ТипОбъекта: Тип): Массив<ВебApiСервер.ИнструментыМенеджераОбъекта>
    пер НаборИнструментыМенеджераОбъекта: Массив<ВебApiСервер.ИнструментыМенеджераОбъекта>
    пер ИнструментыМенеджераОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта
    выбор ТипОбъекта
    когда Тип<ГрафикОтпусковПредприятия.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как ГрафикОтпусковПредприятия.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    когда Тип<ГрафикОтпусковСтруктурнойЕдиницы.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как ГрафикОтпусковСтруктурнойЕдиницы.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    ;
    возврат НаборИнструментыМенеджераОбъекта
;

@ВПроекте
@Реализация
метод ПолучитьДанныеJson(ТипОбъекта: Тип, Ссылка: ВходящиеДанные.Ссылка|ИсходящиеДанные.Ссылка, 
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<Объект?>
    
    пер ДанныеJson: Массив<Объект?>
    выбор ТипОбъекта
    когда Тип<ГрафикОтпусковПредприятия.Ссылка>
        ДанныеJson.Добавить(ГрафикОтпусковПредприятия.ПолучитьДанныеJson(Ссылка как ГрафикОтпусковПредприятия.Ссылка, Сервисы))
    когда Тип<ГрафикОтпусковСтруктурнойЕдиницы.Ссылка>
        ДанныеJson.Добавить(ГрафикОтпусковСтруктурнойЕдиницы.ПолучитьДанныеJson(Ссылка как ГрафикОтпусковСтруктурнойЕдиницы.Ссылка, Сервисы, ВерсияФорматаОбмена))
    ;
    возврат ДанныеJson
;

@ВПроекте
@Реализация
метод МассивСсылокПоФильтру(ТипОбъекта: Тип, Фильтр: () -> ЧитаемыйМассив<Справочник.Ссылка>): Массив<ЧитаемыйМассив<Справочник.Ссылка>>
    пер МассивСсылок: Массив<ЧитаемыйМассив<Справочник.Ссылка>>
    возврат МассивСсылок
;

@ВПроекте
@Реализация
метод УдалитьОбъекты(ТипОбъекта: Тип, ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>, Сервисы: ВебApiСервер.СервисыУдаленияОбъектов)
    выбор ТипОбъекта
    когда Тип<ГрафикОтпусковПредприятия.Ссылка>
        ГрафикОтпусковПредприятия.УдалитьОбъекты(ПараметрыЗапроса, Сервисы)
    когда Тип<ГрафикОтпусковСтруктурнойЕдиницы.Ссылка>
        ГрафикОтпусковСтруктурнойЕдиницы.УдалитьОбъекты(ПараметрыЗапроса, Сервисы)
    ;    
;

@ВПроекте
@Реализация
метод ТипОбъектаJson(ТипОбъекта: Тип): Массив<Строка>
    пер ТипОбъектаJson: Массив<Строка>
    выбор ТипОбъекта
    когда Тип<ГрафикОтпусковПредприятия.Ссылка>
        ТипОбъектаJson.Добавить(ГрафикОтпусковПредприятия.ТипОбъектаJson())
    когда Тип<ГрафикОтпусковСтруктурнойЕдиницы.Ссылка>
        ТипОбъектаJson.Добавить(ГрафикОтпусковСтруктурнойЕдиницы.ТипОбъектаJson())
    ;
    возврат ТипОбъектаJson
;

@ВПроекте
@Реализация
метод ЗагрузитьОбъектИзJson(ТипОбъекта: Тип, ТипДанных: Тип, ДанныеJson: Объект?, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    выбор ТипОбъекта
    когда Тип<ГрафикОтпусковПредприятия.Ссылка>
        выбор ТипДанных
        когда Тип<ГрафикОтпусковПредприятия.ГрафикОтпусковПредприятия_1_1>
            ГрафикОтпусковПредприятия.ЗагрузитьОбъектИзJson(ДанныеJson как ГрафикОтпусковПредприятия.ГрафикОтпусковПредприятия_1_1, Сервисы)
        когда Тип<ГрафикОтпусковПредприятия.ГрафикОтпусковПредприятия_1_2>
            ГрафикОтпусковПредприятия.ЗагрузитьОбъектИзJson(ДанныеJson как ГрафикОтпусковПредприятия.ГрафикОтпусковПредприятия_1_2, Сервисы)
        когда Тип<ГрафикОтпусковПредприятия.ГрафикОтпусковПредприятия_2_0>
            ГрафикОтпусковПредприятия.ЗагрузитьОбъектИзJson(ДанныеJson как ГрафикОтпусковПредприятия.ГрафикОтпусковПредприятия_2_0, Сервисы)
        ;
    когда Тип<ГрафикОтпусковСтруктурнойЕдиницы.Ссылка>
        выбор ТипДанных
        когда Тип<ГрафикОтпусковСтруктурнойЕдиницы.ГрафикОтпусковСтруктурнойЕдиницы_2_0>
            ГрафикОтпусковСтруктурнойЕдиницы.ЗагрузитьОбъектИзJson(ДанныеJson как ГрафикОтпусковСтруктурнойЕдиницы.ГрафикОтпусковСтруктурнойЕдиницы_2_0, Сервисы)
        когда Тип<ГрафикОтпусковСтруктурнойЕдиницы.ГрафикОтпусковСтруктурнойЕдиницы_3_0>
            ГрафикОтпусковСтруктурнойЕдиницы.ЗагрузитьОбъектИзJson(ДанныеJson как ГрафикОтпусковСтруктурнойЕдиницы.ГрафикОтпусковСтруктурнойЕдиницы_3_0, Сервисы)
        ;
    ;
;

@ВПроекте
@Реализация
метод ПослеЗаписиГруппыОбъектов(ТипОбъекта: Тип, МассивОбъектовОтложенногоОбновления: Массив<ВебApiСервер.ОбъектОтложенногоОбновления>)
    выбор ТипОбъекта
    когда Тип<СтруктураПредприятия.Ссылка>
        пер ЗагруженныеПодразделения = новый Массив<СтруктураПредприятия.Ссылка>()
        для ОбъектОтложенногоОбновления из МассивОбъектовОтложенногоОбновления
            ЗагруженныеПодразделения.Добавить(ОбъектОтложенногоОбновления.ОбновляемыйОбъект как СтруктураПредприятия.Ссылка)
        ;
        исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
        СборГрафиковОтпусков.ОбновлениеПриИзмененииСтруктурыПредприятия(ЗагруженныеПодразделения)
        ПривилегированныйРежим.Закрыть()
    ;
;

@ВПроекте
@Реализация
метод ИзменитьОбъектИзJson(ТипОбъекта: Тип, ДанныеJson: Объект, Сервисы: ВебApiСервер.СервисыЗагрузкиJson, ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации)
;

@ВПроекте
@Реализация
метод ЗавершитьИзменениеОбъектИзJson(ТипОбъекта: Тип, МассивСсылок: ЧитаемыйМассив<ВходящиеДанные.Ссылка>, ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации)
;

@ВПроекте
@Реализация
метод ГруппаИзмененийВJson(ТипОбъекта: Тип, Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<ЧитаемоеСоответствие<Строка, Массив<Объект?>>>
    
    пер ДанныеJson: Массив<ЧитаемоеСоответствие<Строка, Массив<Объект?>>>
    выбор ТипОбъекта
    когда Тип<ГрафикОтпусковСтруктурнойЕдиницы.Ссылка>
        ДанныеJson.Добавить(ГрафикОтпусковСтруктурнойЕдиницы.ГруппаИзмененийВJson(Ссылки, Сервисы, ВерсияФорматаОбмена))
    когда Тип<ГрафикОтпусковПредприятия.Ссылка>
        ДанныеJson.Добавить(ГрафикОтпусковПредприятия.ГруппаИзмененийВJson(Ссылки, Сервисы))
    ;
    возврат ДанныеJson
;

//Конец ДанныеApi

// Контракт ПредметыОбсужденияПоставщик

@ВПроекте
@Реализация
метод СтруктураСохраненияОбсуждения(ПредметОбсуждения: ПредметОбсуждения.Ссылка?, ТекстСообщения: Строка, ТемаОбсуждения: Строка ): Обсуждения.СтруктураСохраненияОбсуждения?
    знч СтруктураСохраненияОбсуждения: Обсуждения.СтруктураСохраненияОбсуждения
    
    если ПредметОбсуждения это ГрафикОтпусковСотрудника.Ссылка или ПредметОбсуждения это ГрафикОтпусковСтруктурнойЕдиницы.Ссылка
        знч АвторОбсуждения = ПользователиСистемы.ТекущееФизическоеЛицо()
        
        СтруктураСохраненияОбсуждения.Тема = МенеджерСущности.ПредставлениеСсылки(ПредметОбсуждения)
        СтруктураСохраненияОбсуждения.Представление = СтруктураСохраненияОбсуждения.Тема
        СтруктураСохраненияОбсуждения.Участники = УчастникиОбсуждения(ПредметОбсуждения!)
        СтруктураСохраненияОбсуждения.УчастникиСохраняемые.ДобавитьВсе(УчастникиСохраняемогоОбсуждения(АвторОбсуждения, ПредметОбсуждения))
        СтруктураСохраненияОбсуждения.ТекстСообщения = ТекстСообщения
        СтруктураСохраненияОбсуждения.ПредметОбсуждения = ПредметОбсуждения
        СтруктураСохраненияОбсуждения.АвторОбсуждения = АвторОбсуждения
        СтруктураСохраненияОбсуждения.Видимость = ПредметОбсуждения это ГрафикОтпусковСотрудника.Ссылка
        если ПредметОбсуждения это ГрафикОтпусковСтруктурнойЕдиницы.Ссылка
            СтруктураСохраненияОбсуждения.ДопДанные = СериализацияJson.ЗаписатьОбъект(КонтекстОбсужденияГрафикОтпусков(АвторОбсуждения, ПредметОбсуждения))
        ;
        СтруктураСохраненияОбсуждения.Ключ = новый Ууид().ВСтроку()
        возврат СтруктураСохраненияОбсуждения
    иначе
        возврат Неопределено
    ;
;

метод УчастникиОбсуждения(ПредметОбсуждения: ПредметОбсуждения.Ссылка): Массив<Ууид>
    
    знч ИдТекущегоПользователяСВ = Обсуждения.ИдПользователяСистемыВзаимодействия(Пользователи.ТекущийПользователь)
    если ИдТекущегоПользователяСВ == Неопределено
        выбросить новый ИсключениеВыполнения("Пользователь с таким идентификатором не зарегистрирован!")       
    ;

    знч УчастникиОбсуждения: Массив<Ууид>
    УчастникиОбсуждения.Добавить(ИдТекущегоПользователяСВ)
    если ПредметОбсуждения это ГрафикОтпусковСтруктурнойЕдиницы.Ссылка 
        УчастникиОбсуждения.Добавить(Обсуждения.НастройкаСистемыВзаимодействияИлиИсключение().ИдМаршрутизатораОбсуждений)
    ;
        
    возврат УчастникиОбсуждения    
;

метод УчастникиСохраняемогоОбсуждения(АвторОбсуждения: ФизическиеЛица.Ссылка, Предмет: ПредметОбсуждения.Ссылка?): Массив<УчастникВзаимодействия.Ссылка>?
    
    пер УчастникиОбсужденияСистемыВзаимодействия: Массив<УчастникВзаимодействия.Ссылка>
    УчастникиОбсужденияСистемыВзаимодействия.Добавить(АвторОбсуждения)
 
    если Предмет это ГрафикОтпусковСотрудника.Ссылка
        исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
        знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Предмет как ГрафикОтпусковСотрудника.Ссылка, "ФизическоеЛицо")
        ПривилегированныйРежим.Закрыть()
        
        если ФизическоеЛицо != Неопределено            
            знч КоллегиФизическогоЛица = ОрганизационнаяСтруктура.КоллегиФизическогоЛица(ФизическоеЛицо, "")
            для КоллегаФизическогоЛица из КоллегиФизическогоЛица.СотрудникиПодразделения
                если не УчастникиОбсужденияСистемыВзаимодействия.Содержит(КоллегаФизическогоЛица)
                    УчастникиОбсужденияСистемыВзаимодействия.Добавить(КоллегаФизическогоЛица)
                ;
            ;
            если не УчастникиОбсужденияСистемыВзаимодействия.Содержит(ФизическоеЛицо)
                УчастникиОбсужденияСистемыВзаимодействия.Добавить(ФизическоеЛицо)
            ;
            если КоллегиФизическогоЛица.Руководитель != Неопределено и не УчастникиОбсужденияСистемыВзаимодействия.Содержит(КоллегиФизическогоЛица.Руководитель)
                УчастникиОбсужденияСистемыВзаимодействия.Добавить(КоллегиФизическогоЛица.Руководитель)
            ;
        ;
    ;

    возврат УчастникиОбсужденияСистемыВзаимодействия
;

метод КонтекстОбсужденияГрафикОтпусков(АвторОбсуждения: ФизическиеЛица.Ссылка, Предмет: ПредметОбсуждения.Ссылка): Обсуждения.КонтекстОбсуждения?
    
    пер КонтекстОбсуждения = новый Обсуждения.КонтекстОбсуждения()
    исп ПривилегированныйРежим = КонтекстДоступа.Привилегированный() 
    пер Запрос = новый ПроизвольныйЗапрос()
    выбор Предмет
    когда это ГрафикОтпусковСтруктурнойЕдиницы.Ссылка
        знч Объект: ГрафикОтпусковСтруктурнойЕдиницы.Ссылка = Предмет как ГрафикОтпусковСтруктурнойЕдиницы.Ссылка
        Запрос.Текст = 
            "Выбрать первые 1
                ГрафикОтпусковСтруктурнойЕдиницы.Ответственный.Ид как ФизическоеЛицоУуид,
                ГрафикОтпусковСтруктурнойЕдиницы.Ответственный как ФизическоеЛицо,
                ГрафикОтпусковСтруктурнойЕдиницы.Ссылка.Ид как ГрафикОтпусковУуид
            Из ГрафикОтпусковСтруктурнойЕдиницы как ГрафикОтпусковСтруктурнойЕдиницы
            Где 
                ГрафикОтпусковСтруктурнойЕдиницы.Ссылка == &Объект"
        Запрос.УстановитьПараметр("Объект", Объект)
    когда это ГрафикОтпусковСотрудника.Ссылка
        знч Объект: ГрафикОтпусковСотрудника.Ссылка = Предмет как ГрафикОтпусковСотрудника.Ссылка   
        Запрос.Текст = 
            "Выбрать первые 1
                ГрафикОтпусковСотрудника.ФизическоеЛицо.Ид как ФизическоеЛицоУуид,
                ГрафикОтпусковСотрудника.ФизическоеЛицо как ФизическоеЛицо,
                ГрафикОтпусковСотрудника.Ссылка.Ид как ГрафикОтпусковУуид
            Из ГрафикОтпусковСотрудника как ГрафикОтпусковСотрудника
            Где 
                ГрафикОтпусковСотрудника.Ссылка == &Объект"
        Запрос.УстановитьПараметр("Объект", Объект)
    ;
    исп РезультатЗапроса = Запрос.Выполнить()  
    ПривилегированныйРежим.Закрыть() 
    знч РезультатЗапросаСтроки = новый ЧитаемыйМассив(РезультатЗапроса)
    если (не РезультатЗапросаСтроки.Пусто())
        знч personID = РезультатЗапросаСтроки[0].ФизическоеЛицоУуид.ВСтроку()
        КонтекстОбсуждения.personID     = ФизическиеЛица.ВнешняяСсылка(personID).Идентификатор
        знч ОрганизацияПоОсновномуМесту = Сотрудники.ОрганизацияФизическогоЛицаПоОсновномуМестуРаботы(РезультатЗапросаСтроки[0].ФизическоеЛицо)
        КонтекстОбсуждения.employerID   = Организации.ВнешняяСсылка(ОрганизацияПоОсновномуМесту.Ид.ВСтроку()).Идентификатор
        КонтекстОбсуждения.documentID   = Неопределено
        КонтекстОбсуждения.applicationID = ИспользованиеОбсуждений.ПолучитьСервис().ИдТекущегоПриложения() 
    ; 
    возврат КонтекстОбсуждения
;

// Конец ПредметыОбсужденияПоставщик

// Контракт СтруктураПредприятияОбработчикСобытий

@ВПроекте
@Реализация
метод СтруктураПредприятияПослеЗаписи(ТекущееЗначение: СтруктураПредприятия.Объект, ПредыдущееЗначение: СтруктураПредприятия.Данные, ПараметрыЗаписи: СтруктураПредприятия.ПараметрыЗаписи)
    если не ТекущееЗначение.ЭтоНовый() и ТекущееЗначение.Руководитель == ПредыдущееЗначение.Руководитель
        возврат
    ;
    СборГрафиковОтпусков.ОбновитьГрафикОтпусковСтруктурнойЕдиницы(ТекущееЗначение.Ссылка, ТекущееЗначение.ЭтоНовый())
;

// Конец СтруктураПредприятияОбработчикСобытий


// Контракт КонтрольДоступаПоПолномочиямСервис

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеПолномочия()
    ГрафикОтпусков.ДобавитьПолномочия()
;

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеРоли()
;

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеТипыАтрибутов()
;

@ВПроекте
@Реализация
метод СоздатьНаборыОграниченийДоступа()
;

@ВПроекте
@Реализация
метод ТипыАтрибутовПоТипамЗначений(): ЧитаемоеСоответствие<Тип, ТипыАтрибутов.Ссылка>
    возврат {:}
;

// Конец КонтрольДоступаПоПолномочиямСервис