импорт Компания
импорт ФизическиеЛица
импорт ИнтерфейсныеКомпонентыСтандартные
импорт ОбщиеСтандартные
импорт УниверсальныеМеханизмы
импорт Обсуждения

@ВПроекте
конст ИД_ПОДСИСТЕМЫ = "ГрафикОтпусков"

@ВПроекте
структура ДанныеКампанииПодразделения
    пер ГрафикОтпусковПредприятия: ГрафикОтпусковПредприятия.Ссылка?
    пер ГрафикОтпусковПодразделения: ГрафикОтпусковСтруктурнойЕдиницы.Ссылка?
    пер СтруктурнаяЕдиница: СтруктураПредприятия.Ссылка?
    пер ОтветственныйЗаСбор: ФизическиеЛица.Ссылка?
    пер ПервичноеСостояниеКампанииПодразделения: СостояниеГрафикаОтпусков?
    пер КоличествоСотрудниковПодразделения: Число
    пер ЗаполнениеГрафикаЯвляетсяСкрытым: Булево?
;

@ВПроекте
структура ДанныеСоставленияГрафикаОтпусков
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка?
    пер ЛичныйКабинетСоздан: Булево
    пер Подразделение: СтруктураПредприятия.Ссылка?
    пер РуководительПодразделения: ФизическиеЛица.Ссылка?
    пер ЛичныйКабинетРуководителяСоздан: Булево
    пер ФизическоеЛицоПредставление: Строка
    пер ФизическоеЛицоФамилияИО: Строка
    пер ЗапланированоПредставлениеОбщее: Строка
    пер ЗапланированоСостояниеОбщее: СостояниеГрафикаОтпусков?
    пер ЗапланированоПоМесяцам: Массив<ДанныеЗапланированногоОтпуска>
    пер ЗапланированоПоПериодам: Массив<ПериодыЗапланированногоОтпуска>
    пер ГрафикОтпусковСотрудника: ГрафикОтпусковСотрудника.Ссылка?
    пер ОтпускНеПланирует: Булево
    пер ПраздничныеДни: Соответствие<Число, Массив<Дата>>
    пер ПервичноеСостояниеКампанииПодразделения: СостояниеГрафикаОтпусков?
    пер ОтветственныйГрафикаСтруктурнойЕдиницы: ФизическиеЛица.Ссылка?
    пер ДопустимаяПродолжнительностьОтпускаМенее14Дней: Число
;

@ВПроекте
структура ДанныеЗапланированногоОтпуска
    пер ПериодОтпускаСсылка: ПериодыОтпуска.Ссылка?
    пер НомерМесяца: Число
    пер СостояниеЗапланированногоОтпуска: СостояниеГрафикаОтпусков?
    пер КоличествоДнейВМесяце: Число
    пер ПредставлениеЗначкаМесяц: Строка
;

@ВПроекте
структура ПериодыЗапланированногоОтпуска
    пер ПериодОтпускаСсылка: ПериодыОтпуска.Ссылка?
    пер ДатаНачалаПериода: Дата
    пер ДатаОкончанияПериода: Дата
    пер ПериодЗапланированногоОтпуска: ЗакрытыйДиапазон<Дата>?
    пер СостояниеЗапланированногоОтпуска: СостояниеГрафикаОтпусков?
    пер КоличествоДнейВПериоде: Число
    пер ПредставлениеЗначкаПериод: Строка
    пер ПредставлениеЗначкаОстаток: Строка
    пер Добавлено: Булево
    пер Удалено: Булево
    пер ОшибкаЗаполнения: Булево
;

@ВПроекте
@НаКлиенте
метод ИконкаЦвет(Состояние: СостояниеГрафикаОтпусков?, Альфа: Число = 1): Цвет
    возврат БиблиотекаЦветов.Цвет(ВидЦветаПоСостоянию(Состояние), Альфа)
;

@ВПроекте
@НаКлиенте
метод ВидЦветаПоСостоянию(Состояние: СостояниеГрафикаОтпусков?): БиблиотекаЦветов.ВидыЦвета
    пер ВидЦвета: БиблиотекаЦветов.ВидыЦвета
    выбор Состояние
    когда Утверждено
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.Зеленый
    когда Черновик
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.Оранжевый
    когда Отказано
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.Красный
    когда Неопределено
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.ТемноСерый
    ;
    возврат ВидЦвета
;

@ВПроекте
@НаКлиенте
метод КоннотацияПоСостоянию(Состояние: СостояниеГрафикаОтпусков?): ОценкаИнформации
    пер КоннотацияПоСостоянию: ОценкаИнформации = ОценкаИнформации.Обычная
    выбор Состояние
    когда Утверждено
        КоннотацияПоСостоянию = ОценкаИнформации.Положительная
    когда Черновик
        КоннотацияПоСостоянию = ОценкаИнформации.Предупреждающая
    когда Отказано
        КоннотацияПоСостоянию = ОценкаИнформации.Отрицательная
    ;
    возврат КоннотацияПоСостоянию
;

@ВПроекте
@НаКлиенте
метод ЗаполнитьПунктыМенюСогласования(Согласовать: ВсплывающееМеню, ТекущееСостояние: СостояниеГрафикаОтпусков)
    Согласовать.Элементы.Очистить()
    если ТекущееСостояние != СостояниеГрафикаОтпусков.Утверждено
        пер ПунктМеню = новый ЭлементМеню()
        ПунктМеню.Заголовок = "Утвердить"
        ПунктМеню.ДополнительныеПараметры = СостояниеГрафикаОтпусков.Утверждено                
        Согласовать.Элементы.Добавить(ПунктМеню)                    
    ;
    если ТекущееСостояние != СостояниеГрафикаОтпусков.Отказано
        пер ПунктМеню = новый ЭлементМеню()
        ПунктМеню.Заголовок = "Отказать"
        ПунктМеню.ДополнительныеПараметры = СостояниеГрафикаОтпусков.Отказано                
        Согласовать.Элементы.Добавить(ПунктМеню)                    
    ;
    если ТекущееСостояние != СостояниеГрафикаОтпусков.Черновик
        пер ПунктМеню = новый ЭлементМеню()
        ПунктМеню.Заголовок = "В черновик"
        ПунктМеню.ДополнительныеПараметры = СостояниеГрафикаОтпусков.Черновик                
        Согласовать.Элементы.Добавить(ПунктМеню)   
    ; 
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод НачатьКампаниюПодразделения(ГрафикОтпусковПредприятия: ГрафикОтпусковПредприятия.Ссылка, ГрафикОтпусковПодразделения: ГрафикОтпусковСтруктурнойЕдиницы.Ссылка?, СтруктурнаяЕдиница: СтруктураПредприятия.Ссылка?): ДанныеКампанииПодразделения
    пер ПараметрыКампанииПодразделения = новый ДанныеКампанииПодразделения(
        ГрафикОтпусковПредприятия = ГрафикОтпусковПредприятия, 
        ГрафикОтпусковПодразделения = ГрафикОтпусковПодразделения, 
        СтруктурнаяЕдиница = СтруктурнаяЕдиница,
        ПервичноеСостояниеКампанииПодразделения = Неопределено    
    )
    ОбработатьГрафикОтпусковПодразделения(ПараметрыКампанииПодразделения)
    ОбработатьГрафикиОтпусковСотрудников(ПараметрыКампанииПодразделения)   
    если ПараметрыКампанииПодразделения.ГрафикОтпусковПодразделения != Неопределено
        исп Транзакции.Начать()
        пер ГрафикПодразделенияОбъект: ГрафикОтпусковСтруктурнойЕдиницы.Объект?
        ГрафикПодразделенияОбъект = ПараметрыКампанииПодразделения.ГрафикОтпусковПодразделения.ЗагрузитьОбъект(Истина)
        ГрафикПодразделенияОбъект.Записать(ПараметрыЗаписи = новый ГрафикОтпусковСтруктурнойЕдиницы.ПараметрыЗаписи(ТребуетсяРегистрацияИзменений = Истина))
    ;
    возврат ПараметрыКампанииПодразделения
;

@НаСервере @ДоступноСКлиента
метод ОбработатьГрафикОтпусковПодразделения(ПараметрыКампанииПодразделения: ДанныеКампанииПодразделения)
    пер ГрафикПодразделенияОбъект: ГрафикОтпусковСтруктурнойЕдиницы.Объект? = 
        ГрафикОтпусковСтруктурнойЕдиницы(
            ПараметрыКампанииПодразделения.ГрафикОтпусковПредприятия, 
            ПараметрыКампанииПодразделения.ГрафикОтпусковПодразделения, 
            ПараметрыКампанииПодразделения.СтруктурнаяЕдиница
        )
    если ГрафикПодразделенияОбъект != Неопределено  
        если ПараметрыКампанииПодразделения.ГрафикОтпусковПодразделения == Неопределено
            ПараметрыКампанииПодразделения.ГрафикОтпусковПодразделения = ГрафикПодразделенияОбъект.Ссылка
            ПараметрыКампанииПодразделения.ПервичноеСостояниеКампанииПодразделения = ГрафикПодразделенияОбъект.Состояние
        иначе 
            исп Транзакции.Начать()
            знч ДанныеНастроекГрафиковОтпусков = НастройкиГрафиковОтпусков.НастройкиГрафиковОтпусков()
            если ГрафикПодразделенияОбъект.Состояние != ДанныеНастроекГрафиковОтпусков.СостояниеГрафикаОтпусковСтруктурнойЕдиницыПоУмолчанию
                ГрафикПодразделенияОбъект.Состояние = ДанныеНастроекГрафиковОтпусков.СостояниеГрафикаОтпусковСтруктурнойЕдиницыПоУмолчанию 
                ГрафикПодразделенияОбъект.Записать()
                ПараметрыКампанииПодразделения.ПервичноеСостояниеКампанииПодразделения = ГрафикПодразделенияОбъект.Состояние
            ;
        ;
    ;
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ОбработатьГрафикиОтпусковСотрудников(ПараметрыКампанииПодразделения: ДанныеКампанииПодразделения)
    ОбработатьГрафикиОтпусковСотрудников(
        ПараметрыКампанииПодразделения.ГрафикОтпусковПредприятия,
        ПараметрыКампанииПодразделения.ГрафикОтпусковПодразделения,
        ПараметрыКампанииПодразделения.СтруктурнаяЕдиница
    )    
;

@ВПроекте 
@НаСервере @ДоступноСКлиента
метод ОбработатьГрафикиОтпусковСотрудников(ГрафикОтпусковПредприятия: ГрафикОтпусковПредприятия.Ссылка, ГрафикОтпусковПодразделения: ГрафикОтпусковСтруктурнойЕдиницы.Ссылка?, СтруктурнаяЕдиница: СтруктураПредприятия.Ссылка?)
    если ГрафикОтпусковПодразделения == Неопределено 
            или СтруктурнаяЕдиница == Неопределено
        возврат    
    ;
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч Запрос = Запрос{
        Выбрать 
            ПодразделенияИСотрудники.ФизическоеЛицо Как ФизическоеЛицо,
            ГрафикОтпусковСотрудника.Ссылка.ЗаменитьNull(Неопределено) Как ГрафикОтпусковСотрудника
        ИЗ 
            ПодразделенияИСотрудники КАК ПодразделенияИСотрудники
            Левое Соединение ГрафикОтпусковСотрудника КАК ГрафикОтпусковСотрудника
                Внутреннее соединение ГрафикОтпусковСтруктурнойЕдиницы КАК ГрафикОтпусковСтруктурнойЕдиницы
                    Внутреннее соединение ГрафикОтпусковПредприятия КАК ГрафикОтпусковПредприятияСсылка
                        ПО ГрафикОтпусковСтруктурнойЕдиницы.ГрафикОтпусковПредприятия == ГрафикОтпусковПредприятияСсылка.Ссылка
                            И ГрафикОтпусковПредприятияСсылка.Ссылка == %ГрафикОтпусковПредприятия
                    ПО ГрафикОтпусковСотрудника.ГрафикОтпусковПодразделения == ГрафикОтпусковСтруктурнойЕдиницы.Ссылка
                ПО ПодразделенияИСотрудники.ФизическоеЛицо == ГрафикОтпусковСотрудника.ФизическоеЛицо                     
         ГДЕ 
            ПодразделенияИСотрудники.ОсновноеМестоРаботы
            И ПодразделенияИСотрудники.Подразделение == %СтруктурнаяЕдиница
    }        
    исп Результат = Запрос.Выполнить()     
    для СтрокаРезультата из Результат
        если СтрокаРезультата.ГрафикОтпусковСотрудника == Неопределено
            пер ГрафикФизическогоЛица = новый ГрафикОтпусковСотрудника.Объект(
                ГрафикОтпусковПодразделения = ГрафикОтпусковПодразделения,
                ФизическоеЛицо = СтрокаРезультата.ФизическоеЛицо
            ) 
            ГрафикФизическогоЛица.Записать() 
        ;       
    ;    
    ПривилегированныйРежим.Закрыть()
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЗавершитьКампаниюПодразделения(ГрафикОтпусковПодразделения: ГрафикОтпусковСтруктурнойЕдиницы.Ссылка, Состояние: СостояниеГрафикаОтпусков)
    исп Транзакции.Начать()
    пер ГрафикПодразделения = ГрафикОтпусковПодразделения.ЗагрузитьОбъект(Истина)
    если МенеджерСущности.ЗначениеРеквизитаОбъекта(ГрафикПодразделения.ГрафикОтпусковПредприятия, "Состояние") != СостояниеГрафикаОтпусков.Отказано               
        ГрафикПодразделения.Состояние = Состояние    
        ГрафикПодразделения.Записать()
    ;
;

@ВПроекте
@НаСервере
метод ГрафикОтпусковСтруктурнойЕдиницы(ГрафикОтпусковПредприятия: ГрафикОтпусковПредприятия.Ссылка, ГрафикОтпусковПодразделения: ГрафикОтпусковСтруктурнойЕдиницы.Ссылка?, СтруктурнаяЕдиница: СтруктураПредприятия.Ссылка?): ГрафикОтпусковСтруктурнойЕдиницы.Объект? 
    пер КоличествоСотрудниковПодразделенияНаОсновнойРаботе: Число
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч Запрос = Запрос{
        Выбрать Различные
            Сотрудники.Подразделение Как Подразделение,
            Количество(Различные Выбор Когда Сотрудники.ОсновноеМестоРаботы Тогда Сотрудники.Ссылка Конец) Как КоличествоСотрудниковПодразделенияНаОсновнойРаботе
        Из 
            ПодразделенияИСотрудники Как Сотрудники
        Где
            Сотрудники.Подразделение == %СтруктурнаяЕдиница
        Сгруппировать по 
            Сотрудники.Подразделение                 
        }
    исп РезультатЗапроса = Запрос.Выполнить() 
    для РезультатЗапросаСтрока из РезультатЗапроса
        КоличествоСотрудниковПодразделенияНаОсновнойРаботе = РезультатЗапросаСтрока.КоличествоСотрудниковПодразделенияНаОсновнойРаботе 
    ;
    если КоличествоСотрудниковПодразделенияНаОсновнойРаботе == 0
        возврат Неопределено    
    ;
    если ГрафикОтпусковПодразделения == Неопределено
        пер ЗапросГрафикОтпусковСтруктурнойЕдиницы = Запрос{
        Выбрать Первые 1
            Ссылка
        Из
            ГрафикОтпусковСтруктурнойЕдиницы
        Где
            ГрафикОтпусковПредприятия == %{ГрафикОтпусковПредприятия}
            И СтруктурнаяЕдиница == %{СтруктурнаяЕдиница}
        }
        исп РезультатГрафикОтпусковСтруктурнойЕдиницы = ЗапросГрафикОтпусковСтруктурнойЕдиницы.Выполнить()
        для СтрокаРезультатаГрафикОтпусковСтруктурнойЕдиницы из РезультатГрафикОтпусковСтруктурнойЕдиницы
            ГрафикОтпусковПодразделения = СтрокаРезультатаГрафикОтпусковСтруктурнойЕдиницы.Ссылка 
        ;    
    ;
    ПривилегированныйРежим.Закрыть()
    пер ГрафикПодразделенияОбъект: ГрафикОтпусковСтруктурнойЕдиницы.Объект? 
    знч ДанныеНастроекГрафиковОтпусков = НастройкиГрафиковОтпусков.НастройкиГрафиковОтпусков()
    если ГрафикОтпусковПодразделения == Неопределено
        ГрафикПодразделенияОбъект = новый ГрафикОтпусковСтруктурнойЕдиницы.Объект(
            ГрафикОтпусковПредприятия = ГрафикОтпусковПредприятия,
            МоментСоздания = Момент.Сейчас(),
            СтруктурнаяЕдиница = СтруктурнаяЕдиница, 
            Ответственный = ОтветственныйЗаСборГрафикаПодразделенияРуководитель(СтруктурнаяЕдиница),
            Состояние = ДанныеНастроекГрафиковОтпусков.СостояниеГрафикаОтпусковСтруктурнойЕдиницыПоУмолчанию
        ) 
        ГрафикПодразделенияОбъект.Записать()
    иначе 
        исп Транзакции.Начать()
        ГрафикПодразделенияОбъект = ГрафикОтпусковПодразделения.ЗагрузитьОбъект(Истина)
        пер РуководительСтруктурнойЕдиницы: ФизическиеЛица.Ссылка? = 
            МенеджерСущности.ЗначениеРеквизитаОбъекта(ГрафикПодразделенияОбъект.СтруктурнаяЕдиница, "Руководитель")
        если ГрафикПодразделенияОбъект.Ответственный == Неопределено и ГрафикПодразделенияОбъект.Ответственный != РуководительСтруктурнойЕдиницы // появился Руководитель
            ИзменитьСостоянияПериодовОтпускаГрафикаПодразделения(
                ГрафикОтпусковПредприятия, 
                ГрафикПодразделенияОбъект.Ссылка, 
                СостояниеГрафикаОтпусков.Черновик
            )
            ГрафикПодразделенияОбъект.Ответственный = РуководительСтруктурнойЕдиницы       
            ГрафикПодразделенияОбъект.Записать()
        ;
        ОбработатьОбсужденияПоГрафикамСотрудников(ГрафикПодразделенияОбъект.Ссылка, ГрафикПодразделенияОбъект.Ответственный)
        
    ;   
    возврат ГрафикПодразделенияОбъект
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ОтветственныйЗаСборГрафикаПодразделенияРуководитель(СтруктурнаяЕдиница: СтруктураПредприятия.Ссылка?): ФизическиеЛица.Ссылка?
    если СтруктурнаяЕдиница == Неопределено
        возврат Неопределено
    ;
    пер НепосредственныйРуководитель: ФизическиеЛица.Ссылка? = МенеджерСущности.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "Руководитель")
    если НепосредственныйРуководитель == Неопределено
        пер ВышестоящееПодразделение: СтруктураПредприятия.Ссылка? = МенеджерСущности.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "Родитель")
        ВышестоящееПодразделение = (ВышестоящееПодразделение == Неопределено ? Неопределено : ВышестоящееПодразделение)
        пока ВышестоящееПодразделение != Неопределено
            пер НепосредственныйРуководительВышестоящегоПодразделения: ФизическиеЛица.Ссылка? = 
                МенеджерСущности.ЗначениеРеквизитаОбъекта(ВышестоящееПодразделение, "Руководитель")
            НепосредственныйРуководительВышестоящегоПодразделения = (НепосредственныйРуководительВышестоящегоПодразделения == Неопределено ? Неопределено : НепосредственныйРуководительВышестоящегоПодразделения)
            если НепосредственныйРуководительВышестоящегоПодразделения == Неопределено
                ВышестоящееПодразделение = МенеджерСущности.ЗначениеРеквизитаОбъекта(ВышестоящееПодразделение, "Родитель")
                ВышестоящееПодразделение = (ВышестоящееПодразделение == Неопределено ? Неопределено : ВышестоящееПодразделение)
            иначе
                возврат НепосредственныйРуководительВышестоящегоПодразделения   
            ;
        ;    
    иначе
        возврат НепосредственныйРуководитель
    ;
    возврат Неопределено
;

@ВПроекте 
@НаСервере
метод ГрафикОтпусковСотрудника(ГрафикОтпусковПредприятия: ГрафикОтпусковПредприятия.Ссылка, ГрафикОтпусковПодразделения: ГрафикОтпусковСтруктурнойЕдиницы.Ссылка?, СтруктурнаяЕдиница: СтруктураПредприятия.Ссылка?, ФизическоеЛицо: ФизическиеЛица.Ссылка?): ГрафикОтпусковСотрудника.Объект?
    пер ГрафикФизическогоЛицаОбъект: ГрафикОтпусковСотрудника.Объект?
    если ГрафикОтпусковПодразделения == Неопределено 
            или СтруктурнаяЕдиница == Неопределено
            или ФизическоеЛицо == Неопределено
        возврат ГрафикФизическогоЛицаОбъект   
    ;
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч Запрос = Запрос{
    Выбрать 
        ПодразделенияИСотрудники.ФизическоеЛицо Как ФизическоеЛицо,
        ГрафикОтпусковСотрудника.Ссылка.ЗаменитьNull(Неопределено) Как ГрафикОтпусковСотрудника 
    ИЗ 
        ПодразделенияИСотрудники КАК ПодразделенияИСотрудники
        Левое Соединение ГрафикОтпусковСотрудника КАК ГрафикОтпусковСотрудника
            Внутреннее соединение ГрафикОтпусковСтруктурнойЕдиницы КАК ГрафикОтпусковСтруктурнойЕдиницы
                Внутреннее соединение ГрафикОтпусковПредприятия КАК ГрафикОтпусковПредприятияСсылка
                    ПО ГрафикОтпусковСтруктурнойЕдиницы.ГрафикОтпусковПредприятия == ГрафикОтпусковПредприятияСсылка.Ссылка
                        И ГрафикОтпусковПредприятияСсылка.Ссылка == %ГрафикОтпусковПредприятия
                ПО ГрафикОтпусковСотрудника.ГрафикОтпусковПодразделения == ГрафикОтпусковСтруктурнойЕдиницы.Ссылка
            ПО ПодразделенияИСотрудники.ФизическоеЛицо == ГрафикОтпусковСотрудника.ФизическоеЛицо                     
        ГДЕ 
        ПодразделенияИСотрудники.ОсновноеМестоРаботы
        И ПодразделенияИСотрудники.ФизическоеЛицо == %ФизическоеЛицо
        И ПодразделенияИСотрудники.Подразделение == %СтруктурнаяЕдиница
    }
    исп Результат = Запрос.Выполнить()     
    для СтрокаРезультата из Результат
        если СтрокаРезультата.ГрафикОтпусковСотрудника == Неопределено
            ГрафикФизическогоЛицаОбъект = новый ГрафикОтпусковСотрудника.Объект(
                ГрафикОтпусковПодразделения = ГрафикОтпусковПодразделения,
                ФизическоеЛицо = СтрокаРезультата.ФизическоеЛицо
            ) 
            ГрафикФизическогоЛицаОбъект.Записать() 
        ;       
    ;
    ПривилегированныйРежим.Закрыть()
    возврат ГрафикФизическогоЛицаОбъект
;

@ВПроекте
@НаСервере
метод ОбработатьИзменениеСостоянияПериодовОтпускаГрафикаПодразделения(ГрафикОтпусковПредприятия: ГрафикОтпусковПредприятия.Ссылка, ГрафикОтпусковСтруктурнойЕдиницы: ГрафикОтпусковСтруктурнойЕдиницы.Ссылка, Состояние: СостояниеГрафикаОтпусков)
    ФоновыеЗадания.Выполнить(&ИзменитьСостоянияПериодовОтпускаГрафикаПодразделения, ГрафикОтпусковПредприятия, ГрафикОтпусковСтруктурнойЕдиницы, Состояние)
;

@ВПроекте
@НаСервере 
метод ИзменитьСостоянияПериодовОтпускаГрафикаПодразделения(ГрафикОтпусковПредприятия: ГрафикОтпусковПредприятия.Ссылка, ГрафикОтпусковСтруктурнойЕдиницы: ГрафикОтпусковСтруктурнойЕдиницы.Ссылка, Состояние: СостояниеГрафикаОтпусков)
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч Запрос = Запрос{
        Выбрать 
            ПериодыОтпуска.Ссылка Как ПериодОтпуска,
	        ПериодыОтпуска.Состояние Как Состояние
        Из 
            ПериодыОтпуска Как ПериодыОтпуска
            Внутреннее Соединение ГрафикОтпусковСотрудника КАК ГрафикОтпусковСотрудника
                Внутреннее соединение ГрафикОтпусковСтруктурнойЕдиницы КАК ГрафикОтпусковСтруктурнойЕдиницы
                    Внутреннее соединение ГрафикОтпусковПредприятия КАК ГрафикОтпусковПредприятияСсылка
                    По ГрафикОтпусковСтруктурнойЕдиницы.ГрафикОтпусковПредприятия == ГрафикОтпусковПредприятияСсылка.Ссылка
                        И ГрафикОтпусковПредприятияСсылка.Ссылка == %ГрафикОтпусковПредприятия
                По ГрафикОтпусковСотрудника.ГрафикОтпусковПодразделения == ГрафикОтпусковСтруктурнойЕдиницы.Ссылка
                    и ГрафикОтпусковСтруктурнойЕдиницы.Ссылка == %ГрафикОтпусковСтруктурнойЕдиницы
            По ПериодыОтпуска.ФизическоеЛицо == ГрафикОтпусковСотрудника.ФизическоеЛицо
        Где
            ПериодыОтпуска.ДатаНачала.Год == ГрафикОтпусковПредприятия.Год
            и ПериодыОтпуска.Состояние != %Состояние                
        }
    исп Результат = Запрос.Выполнить() 
    для СтрокаРезультата из Результат
        исп Транзакции.Начать()
        пер ПериодОтпуска = СтрокаРезультата.ПериодОтпуска.ЗагрузитьОбъект(Истина)
        ПериодОтпуска.Состояние = Состояние
        ПериодОтпуска.Записать()  
    ;
    ПривилегированныйРежим.Закрыть()
;

@ВПроекте
@НаСервере
метод ОбработатьОбсужденияПоГрафикамСотрудников(ГрафикОтпусковСтруктурнойЕдиницы: ГрафикОтпусковСтруктурнойЕдиницы.Ссылка, Руководитель: ФизическиеЛица.Ссылка?)
    если Руководитель == Неопределено 
        возврат
    ;
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч Запрос = Запрос{
        Выбрать 
            ДополнительныеДанныеОбсуждений.Ссылка Как Обсуждение
        Из 
            ГрафикОтпусковСтруктурнойЕдиницы Как ГрафикОтпусковСтруктурнойЕдиницы
            Внутреннее Соединение ГрафикОтпусковСотрудника Как ГрафикОтпусковСотрудника
                Внутреннее Соединение ДополнительныеДанныеОбсуждений Как ДополнительныеДанныеОбсуждений 
                    По ГрафикОтпусковСотрудника.Ссылка == ДополнительныеДанныеОбсуждений.ОбъектОбсуждения
                По ГрафикОтпусковСтруктурнойЕдиницы.Ссылка == ГрафикОтпусковСотрудника.ГрафикОтпусковПодразделения
                    и ГрафикОтпусковСтруктурнойЕдиницы.Ссылка == %ГрафикОтпусковСтруктурнойЕдиницы                  
        }
    исп Результат = Запрос.Выполнить() 
    для СтрокаРезультата из Результат
        исп Транзакции.Начать()  
        пер Обсуждение = СтрокаРезультата.Обсуждение.ЗагрузитьОбъект(Истина)
        если не Обсуждение.УчастникиОбсуждения.Содержит(Руководитель)
            Обсуждение.УчастникиОбсуждения.Добавить(Руководитель)
            Обсуждение.Записать()
            ДополнительныеДанныеОбсуждений.ПересчитатьРазрешенияДоступаДляОбъектов([Обсуждение!])
        ;      
    ;    
    ПривилегированныйРежим.Закрыть()
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ПоказыватьПерепискуПоГрафикуОтпусковСотрудника(ГрафикОтпусковСотрудника: ГрафикОтпусковСотрудника.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка): Булево
    пер ЭтоУчастникПереписки: Булево
    пер НетОбсужденияПоОбъектуПереписки: Булево
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч Запрос = Запрос{
        Выбрать 
            ДополнительныеДанныеОбсуждений.Ссылка Как Обсуждение
        Из 
            ГрафикОтпусковСотрудника Как ГрафикОтпусковСотрудника
            Внутреннее Соединение ДополнительныеДанныеОбсуждений Как ДополнительныеДанныеОбсуждений 
                По ГрафикОтпусковСотрудника.Ссылка == ДополнительныеДанныеОбсуждений.ОбъектОбсуждения
                    и ГрафикОтпусковСотрудника.Ссылка == %ГрафикОтпусковСотрудника                 
        }
    исп РезультатЗапроса = Запрос.Выполнить() 
    знч РезультатЗапросаСтроки = новый ЧитаемыйМассив(РезультатЗапроса)
    если (не РезультатЗапросаСтроки.Пусто()) 
        пер Обсуждение = РезультатЗапросаСтроки[0].Обсуждение.ЗагрузитьОбъект()
        если Обсуждение.УчастникиОбсуждения.Содержит(ФизическоеЛицо)
            ЭтоУчастникПереписки = Истина    
        ;
    иначе
        // обсуждение по объекту ещё не создано, список участников не сформирован 
        НетОбсужденияПоОбъектуПереписки = Истина
    ;    
    ПривилегированныйРежим.Закрыть()
    возврат ЭтоУчастникПереписки или НетОбсужденияПоОбъектуПереписки
;

@ВПроекте
@НаСервере @ДоступноСКлиента
статический метод АктуализироватьУчастниковОбсужденияСВ(Обсуждение: ДополнительныеДанныеОбсуждений.Ссылка?, ПредметОбсуждения: ГрафикОтпусковСтруктурнойЕдиницы.Ссылка|ГрафикОтпусковСотрудника.Ссылка|?)
    если ПредметОбсуждения != Неопределено и Обсуждение != Неопределено
        исп Транзакции.Начать()
        исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
        пер ОбсуждениеОбъект = Обсуждение.ЗагрузитьОбъект(Ложь)
        пер ПользователиСВ = Обсуждения.ПользователиСВПоПользователямПриложения([Пользователи.ТекущийПользователь])
        знч ОбсуждениеСВ = СистемаВзаимодействия.НайтиОбсуждение(ОбсуждениеОбъект.ИдОбсуждения)
        для ИдУчастникаОбсужденияСВ из ОбсуждениеСВ.ИдУчастников
            если не ПользователиСВ.Содержит(ИдУчастникаОбсужденияСВ)
                ПользователиСВ.Добавить(ИдУчастникаОбсужденияСВ)
            ;   
        ;        
        Обсуждения.ЗаполнитьУчастниковОбсуждения(
            ОбсуждениеОбъект.ИдОбсуждения, 
            ПользователиСВ, 
            Ложь
        )
        ПривилегированныйРежим.Закрыть()
    ;
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ПредставлениеВПадеже(Объект: Справочник.Ссылка, Падеж: Падежи): Строка
    возврат СклоненияПредставленийОбъектов.ПредставлениеВПадеже(Объект, Падеж)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ГрафикиОтпусковСтруктурнойЕдиницыОтветственного(Ответственный: ФизическиеЛица.Ссылка?, ГрафикОтпусковПредприятияТекущейКампании: ГрафикОтпусковПредприятия.Ссылка?): ЧитаемыйМассив<ГрафикОтпусковСтруктурнойЕдиницы.Ссылка>
    пер ГрафикиОтпусковСтруктурнойЕдиницыОтветственного: Массив<ГрафикОтпусковСтруктурнойЕдиницы.Ссылка>
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч Запрос = Запрос{
        Выбрать Различные
            ГрафикОтпусковСтруктурнойЕдиницы.Ссылка Как ГрафикОтпусковСтруктурнойЕдиницы,
            Количество(Различные Выбор Когда Сотрудники.ОсновноеМестоРаботы Тогда Сотрудники.Ссылка Конец) Как КоличествоСотрудниковПодразделения
        Из 
            ГрафикОтпусковСтруктурнойЕдиницы Как ГрафикОтпусковСтруктурнойЕдиницы
            Левое Соединение ПодразделенияИСотрудники Как Сотрудники
                По ГрафикОтпусковСтруктурнойЕдиницы.СтруктурнаяЕдиница == Сотрудники.Подразделение
        Где
            ГрафикОтпусковСтруктурнойЕдиницы.ГрафикОтпусковПредприятия == %ГрафикОтпусковПредприятияТекущейКампании
            и ГрафикОтпусковСтруктурнойЕдиницы.Ответственный.ЗаменитьNull(Неопределено) == %Ответственный
        Сгруппировать по 
            ГрафикОтпусковСтруктурнойЕдиницы.Ссылка                 
        }
    исп РезультатЗапроса = Запрос.Выполнить() 
    для РезультатЗапросаСтрока из РезультатЗапроса
        если РезультатЗапросаСтрока.КоличествоСотрудниковПодразделения > 0 
            ГрафикиОтпусковСтруктурнойЕдиницыОтветственного.Добавить(РезультатЗапросаСтрока.ГрафикОтпусковСтруктурнойЕдиницы)
        ;
    ;
    ПривилегированныйРежим.Закрыть()
    возврат ГрафикиОтпусковСтруктурнойЕдиницыОтветственного
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ПодразделенияОтветственногоИГрафикиОтпусков(Ответственный: ФизическиеЛица.Ссылка?, ГрафикОтпусковПредприятияТекущейКампании: ГрафикОтпусковПредприятия.Ссылка?): Соответствие<СтруктураПредприятия.Ссылка, ГрафикОтпусковСтруктурнойЕдиницы.Ссылка>
    знч ПодразделенияОтветственногоИГрафикиОтпусков: Соответствие<СтруктураПредприятия.Ссылка, ГрафикОтпусковСтруктурнойЕдиницы.Ссылка>
    если Ответственный == Неопределено
        или ГрафикОтпусковПредприятияТекущейКампании == Неопределено
        возврат ПодразделенияОтветственногоИГрафикиОтпусков
    ;
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч Запрос = Запрос{
        Выбрать Различные
            ГрафикОтпусковСтруктурнойЕдиницы.СтруктурнаяЕдиница Как Подразделение,
            ГрафикОтпусковСтруктурнойЕдиницы.Ссылка Как ГрафикОтпусковСтруктурнойЕдиницы,
            Количество(Различные Выбор Когда Сотрудники.ОсновноеМестоРаботы Тогда Сотрудники.Ссылка Конец) Как КоличествоСотрудниковПодразделения            
        Из 
            ГрафикОтпусковСтруктурнойЕдиницы Как ГрафикОтпусковСтруктурнойЕдиницы
            Левое Соединение ПодразделенияИСотрудники Как Сотрудники
                По ГрафикОтпусковСтруктурнойЕдиницы.СтруктурнаяЕдиница == Сотрудники.Подразделение
        Где 
            ГрафикОтпусковСтруктурнойЕдиницы.ГрафикОтпусковПредприятия == %ГрафикОтпусковПредприятияТекущейКампании
            и ГрафикОтпусковСтруктурнойЕдиницы.Ответственный.ЗаменитьNull(Неопределено) == %Ответственный
        Сгруппировать по 
            ГрафикОтпусковСтруктурнойЕдиницы.СтруктурнаяЕдиница,
            ГрафикОтпусковСтруктурнойЕдиницы.Ссылка
        }
    исп РезультатЗапроса = Запрос.Выполнить() 
    для РезультатЗапросаСтрока из РезультатЗапроса
        если РезультатЗапросаСтрока.КоличествоСотрудниковПодразделения > 0
            ПодразделенияОтветственногоИГрафикиОтпусков.Вставить(РезультатЗапросаСтрока.Подразделение, РезультатЗапросаСтрока.ГрафикОтпусковСтруктурнойЕдиницы)
        ;
    ;
    ПривилегированныйРежим.Закрыть()
    возврат ПодразделенияОтветственногоИГрафикиОтпусков
;

@ВПроекте
@НаСервере
метод ГрафикОтпусковПредприятияЗапрос(): РезультатЗапроса<неизвестно>
    пер ЗапросГрафикОтпусковПредприятия = Запрос{
        Выбрать Первые 1
            Ссылка,
            Год,
            Состояние,
            Инициатор
        Из
            ГрафикОтпусковПредприятия
        Где
            Состояние != СостояниеГрафикаОтпусков.Отказано
        Упорядочить По  
            Год Убыв
        }
    возврат ЗапросГрафикОтпусковПредприятия.Выполнить()
;

@ВПроекте
@НаСервере
метод ОбновитьГрафикОтпусковСтруктурнойЕдиницы(СтруктурнаяЕдиница: СтруктураПредприятия.Ссылка?, ЭтоНовый: Булево)
    если СтруктурнаяЕдиница == Неопределено
        возврат
    ;
    исп РезультатГрафикОтпусковПредприятия = ГрафикОтпусковПредприятияЗапрос()
    для СтрокаРезультатаГрафикОтпусковПредприятия из РезультатГрафикОтпусковПредприятия
        если СтрокаРезультатаГрафикОтпусковПредприятия.Состояние == СостояниеГрафикаОтпусков.Черновик
            если ЭтоНовый
                ФоновыеЗадания.Выполнить(
                    &НачатьКампаниюПодразделения,
                    СтрокаРезультатаГрафикОтпусковПредприятия.Ссылка,
                    Неопределено,
                    СтруктурнаяЕдиница
                ) 
            иначе
                ФоновыеЗадания.Выполнить(
                    &ГрафикОтпусковСтруктурнойЕдиницы,
                    СтрокаРезультатаГрафикОтпусковПредприятия.Ссылка,
                    Неопределено,
                    СтруктурнаяЕдиница    
                )   
            ;
        ;
    ;
;

@ВПроекте
@НаСервере
метод ОбновлениеПриИзмененииСтруктурыПредприятия(Подразделения: ЧитаемыйМассив<СтруктураПредприятия.Ссылка>)
    ФоновыеЗадания.Выполнить(&ПроверитьПодразделенияГрафиковОтпусковСотрудников)
;

@НаСервере
метод ПроверитьПодразделенияГрафиковОтпусковСотрудников()
    пер КампанияСоставленияГрафикаОтпусковАктивна: Булево
    пер ГрафикОтпусковПредприятия: ГрафикОтпусковПредприятия.Ссылка?
    исп РезультатГрафикОтпусковПредприятия = ГрафикОтпусковПредприятияЗапрос()
    для СтрокаРезультатаГрафикОтпусковПредприятия из РезультатГрафикОтпусковПредприятия
        КампанияСоставленияГрафикаОтпусковАктивна = (
            СтрокаРезультатаГрафикОтпусковПредприятия.Состояние == СостояниеГрафикаОтпусков.Черновик
            или СтрокаРезультатаГрафикОтпусковПредприятия.Состояние == СостояниеГрафикаОтпусков.ВРаботе
        )
        ГрафикОтпусковПредприятия = СтрокаРезультатаГрафикОтпусковПредприятия.Ссылка
    ;  
    если КампанияСоставленияГрафикаОтпусковАктивна и ГрафикОтпусковПредприятия != Неопределено 
        исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
        знч Запрос = Запрос{
        Выбрать 
            ПодразделенияИСотрудники.ФизическоеЛицо Как ФизическоеЛицо,
            ПодразделенияИСотрудники.Подразделение Как Подразделение,
            ГрафикОтпусковСотрудника.Ссылка.ЗаменитьNull(Неопределено) Как ГрафикОтпусковСотрудника,
            ГрафикОтпусковСтруктурнойЕдиницы.Ссылка.ЗаменитьNull(Неопределено) Как ГрафикОтпусковСтруктурнойЕдиницы 
        ИЗ 
            ПодразделенияИСотрудники КАК ПодразделенияИСотрудники
            Левое Соединение ГрафикОтпусковСотрудника КАК ГрафикОтпусковСотрудника
                Внутреннее соединение ГрафикОтпусковСтруктурнойЕдиницы КАК ГрафикОтпусковСтруктурнойЕдиницы
                    Внутреннее соединение ГрафикОтпусковПредприятия КАК ГрафикОтпусковПредприятияСсылка
                        ПО ГрафикОтпусковСтруктурнойЕдиницы.ГрафикОтпусковПредприятия == ГрафикОтпусковПредприятияСсылка.Ссылка
                            И ГрафикОтпусковПредприятияСсылка.Ссылка == %ГрафикОтпусковПредприятия
                    ПО ГрафикОтпусковСотрудника.ГрафикОтпусковПодразделения == ГрафикОтпусковСтруктурнойЕдиницы.Ссылка
                ПО ПодразделенияИСотрудники.ФизическоеЛицо == ГрафикОтпусковСотрудника.ФизическоеЛицо                     
        ГДЕ 
            ПодразделенияИСотрудники.ОсновноеМестоРаботы
            И ГрафикОтпусковСотрудника.Ссылка.ЗаменитьNull(Неопределено) != Неопределено
            И ГрафикОтпусковСтруктурнойЕдиницы.СтруктурнаяЕдиница.ЗаменитьNull(Неопределено) != ПодразделенияИСотрудники.Подразделение
        }
        исп Результат = Запрос.Выполнить()     
        для СтрокаРезультата из Результат
            исп Транзакции.Начать()
            пер ГрафикПодразделенияОбъект: ГрафикОтпусковСтруктурнойЕдиницы.Объект? =
                ГрафикОтпусковСтруктурнойЕдиницы(
                    ГрафикОтпусковПредприятия,
                    Неопределено,
                    СтрокаРезультата.Подразделение
                )
            пер ГрафикФизическогоЛицаОбъект = СтрокаРезультата.ГрафикОтпусковСотрудника.ЗагрузитьОбъект(Истина)
            ГрафикФизическогоЛицаОбъект.ГрафикОтпусковПодразделения = 
                ГрафикПодразделенияОбъект != Неопределено ? ГрафикПодразделенияОбъект.Ссылка : Неопределено
            ГрафикФизическогоЛицаОбъект.Записать() 
        ;
        ПривилегированныйРежим.Закрыть()       
    ; 
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ИзменитьСостояниеПериодовОтпуска(СостояниеСогласования: СостояниеГрафикаОтпусков?, ПериодыОтпуска: Массив<ПериодыОтпуска.Ссылка>)
    если СостояниеСогласования == Неопределено
        или ПериодыОтпуска.Пусто()
        возврат
    ;  
    исп Транзакции.Начать()
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    для ПериодОтпуска из ПериодыОтпуска      
        пер ЭлементПериодОтпуска = ПериодОтпуска.ЗагрузитьОбъект(Истина)
        если ЭлементПериодОтпуска != Неопределено   
            ЭлементПериодОтпуска.Состояние = СостояниеСогласования
            ЭлементПериодОтпуска.Записать()        
        ;
    ;
    ПривилегированныйРежим.Закрыть()
;

// JSON

@ВПодсистеме
перечисление СостояниеГрафикаОтпусковJson
    draft,
    inProgress,
    denied,
    approved 
;

конст СООТВЕТСТВИЕ_СОСТОЯНИЕ_ГРАФИКА_ОТПУСКОВ_JSON = {
    СостояниеГрафикаОтпусковJson.draft: СостояниеГрафикаОтпусков.Черновик,
    СостояниеГрафикаОтпусковJson.inProgress: СостояниеГрафикаОтпусков.ВРаботе,
    СостояниеГрафикаОтпусковJson.denied: СостояниеГрафикаОтпусков.Отказано,
    СостояниеГрафикаОтпусковJson.approved: СостояниеГрафикаОтпусков.Утверждено
}

@ВПодсистеме
метод СостояниеИзJson(СостояниеГрафикаОтпусковJson: СостояниеГрафикаОтпусковJson): СостояниеГрафикаОтпусков
    возврат СООТВЕТСТВИЕ_СОСТОЯНИЕ_ГРАФИКА_ОТПУСКОВ_JSON[СостояниеГрафикаОтпусковJson] 
;

@ВПодсистеме
метод СостояниеВJson(Состояние: СостояниеГрафикаОтпусков?): СостояниеГрафикаОтпусковJson?
     для КлючИЗначение из СООТВЕТСТВИЕ_СОСТОЯНИЕ_ГРАФИКА_ОТПУСКОВ_JSON
        если КлючИЗначение.Значение == Состояние
            возврат КлючИЗначение.Ключ
        ;    
    ;  
;

// Конец JSON@ВПроекте
@НаСервере @ДоступноСКлиента
метод ГрафикОтпусковСтруктурнойЕдиницыУтвержден(ГрафикОтпусковСтруктурнойЕдиницы: ГрафикОтпусковСтруктурнойЕдиницы.Ссылка?): Булево
    если ГрафикОтпусковСтруктурнойЕдиницы != Неопределено
        возврат ГрафикОтпусковСтруктурнойЕдиницы.ЗагрузитьОбъект(Ложь).Состояние == СостояниеГрафикаОтпусков.Утверждено
    ;
    возврат Ложь
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод УтвердитьВсеЧерновикиГрафиковОтпусковСтруктурнойЕдиницы(ГрафикОтпусковПредприятия: ГрафикОтпусковПредприятия.Ссылка?)
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч Запрос = Запрос{
        Выбрать 
            Ссылка
        Из
            ГрафикОтпусковСтруктурнойЕдиницы
        Где
            ГрафикОтпусковПредприятия == %ГрафикОтпусковПредприятия
            И Состояние В(СостояниеГрафикаОтпусков.Черновик, СостояниеГрафикаОтпусков.ВРаботе)
        }
    исп РезультатЗапроса = Запрос.Выполнить()
    ПривилегированныйРежим.Закрыть()
    для РезультатЗапросаСтрока из РезультатЗапроса
        исп Транзакции.Начать()
        пер ГрафикПодразделения = РезультатЗапросаСтрока.Ссылка.ЗагрузитьОбъект(Истина)
        ГрафикПодразделения.Состояние = СостояниеГрафикаОтпусков.Утверждено    
        ГрафикПодразделения.Записать()
    ;    
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ЗарегистрироватьПринудительноКОтправкеГрафикиОтпусковСтруктурнойЕдиницы(ГрафикОтпусковПредприятия: ГрафикОтпусковПредприятия.Ссылка?)
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч Запрос = Запрос{
        Выбрать 
            Ссылка,
            ГрафикОтпусковПредприятия,
            Состояние
        Из
            ГрафикОтпусковСтруктурнойЕдиницы
        Где
            ГрафикОтпусковПредприятия == %ГрафикОтпусковПредприятия
        }
    исп РезультатЗапроса = Запрос.Выполнить()
    ПривилегированныйРежим.Закрыть()
    для РезультатЗапросаСтрока из РезультатЗапроса
        знч ГрафикОтпусковСтруктурнойЕдиницы = РезультатЗапросаСтрока.Ссылка.ЗагрузитьОбъект()
        новый ГрафикОтпусковСтруктурнойЕдиницы.КонтекстРегистрацииИзменений(
            ТекущееЗначение = ГрафикОтпусковСтруктурнойЕдиницы,
            ПараметрыЗаписи = новый ГрафикОтпусковСтруктурнойЕдиницы.ПараметрыЗаписи(ТребуетсяРегистрацияИзменений = Истина),
            РегистрацияВОбменеДанными = () -> Истина
        ).Записать()          
    ;    
;