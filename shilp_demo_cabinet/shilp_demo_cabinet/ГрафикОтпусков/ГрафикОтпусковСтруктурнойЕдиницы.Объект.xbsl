импорт Компания
импорт ОбщиеСтандартные

//Область ОбработчикиСобытий

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПриЗаполнении()
    ЗаполнитьМоментСоздания()
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередЗаписью(ПрежнееЗначение: ГрафикОтпусковСтруктурнойЕдиницы.Данные, ПараметрыЗаписи: ГрафикОтпусковСтруктурнойЕдиницы.ПараметрыЗаписи)
    ЗаполнитьПредставление()
    ЗаполнитьМоментСоздания()
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередУдалением(ПараметрыУдаления: ГрафикОтпусковСтруктурнойЕдиницы.ПараметрыУдаления)
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<ГрафикОтпусковСотрудника>, "ГрафикОтпусковПодразделения")
;
@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПослеЗаписи(ПредыдущееЗначение: ГрафикОтпусковСтруктурнойЕдиницы.Данные, ПараметрыЗаписи: ГрафикОтпусковСтруктурнойЕдиницы.ПараметрыЗаписи) 
    исп КонтекстДоступа.Привилегированный()    
    новый ГрафикОтпусковСтруктурнойЕдиницы.КонтекстРегистрацииИзменений(
        ТекущееЗначение = этот,
        ПредыдущееЗначение = ПредыдущееЗначение,
        ПараметрыЗаписи = ПараметрыЗаписи,
        ЭтоНовый = ЭтоНовый(),
        РегистрацияВОбменеДанными = () -> ГрафикОтпусковРегистрацияИзменений.ПолучитьСервис().ГрафикОтпусковСтруктурнойЕдиницыТребуетсяРегистрация(Ссылка)
    ).Записать()    
;
//КонецОбласти

//Область СлужебныеПроцедурыИФункции

метод ЗаполнитьПредставление()
    пер ГрафикОтпусковПредприятияОбъект = ГрафикОтпусковПредприятия.ЗагрузитьОбъект()
    ПредставлениеДокумента = "Сбор графика отпусков %{СтруктурнаяЕдиница.Представление()}, %{ГрафикОтпусковПредприятияОбъект == Неопределено ? "" : ГрафикОтпусковПредприятияОбъект.Год.ВСтроку()}"
;

метод ЗаполнитьМоментСоздания()
    если МоментСоздания == Неопределено
        МоментСоздания = Момент.Сейчас()
    ;
;

//КонецОбласти
