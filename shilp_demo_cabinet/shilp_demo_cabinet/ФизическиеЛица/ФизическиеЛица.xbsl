импорт ВебApi
импорт ОбщиеСтандартные
импорт УниверсальныеМеханизмы
импорт ОбменДанными
импорт СтандартноеПриложение
импорт Классификаторы

конст КЛЮЧ_ЗАДАНИЯ_ПОСЛЕ_ЗАПИСИ_ГРУППЫ_ОБЪЕКТОВ = "ПослеЗаписиГруппыОбъектовФизическиеЛица"

@ВПроекте
структура Контакты
    пер Скайп: Строка
    пер АдресРегистрации: Строка
    пер АдресМестаПроживания: Строка
;
    
@ВПроекте
структура КонтактыРабочие
    пер РабочийТелефон: Строка
    пер МобильныйТелефон: Строка
    пер ЭлектроннаяПочта: Строка
;

@ВПроекте
исключение ИсключениеПереподчиненияДанныхФизическогоЛица
    обз пер Владелец: ФизическиеЛица.Ссылка? 
; 

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат ДанныеФизическихЛицПоставщикОграничений.ПолучитьСервис().ФизлицаРазрешения()
;

//КонецОбласти РазрешенияДоступа

// Контракт ФайлыОбработчикСобытий

@ВПроекте
@Реализация
метод ПослеЗаписиФайла(Владелец: ВладелецФайлы.Ссылка, Файл: Файлы.Ссылка)
    если Владелец это ФизическиеЛица.Ссылка
        знч ФизическоеЛицо = Владелец как ФизическиеЛица.Ссылка
        пер Фотография = МенеджерСущности.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "Фотография")
        если Фотография == Файл
            исп Транзакции.Начать()
            пер ФизическоеЛицоОбъект = ФизическоеЛицо.ЗагрузитьОбъект(Истина)
            ФизическоеЛицоОбъект.Миниатюра = МиниатюраФотографии(Фотография)
            ФизическоеЛицоОбъект.Записать()
        ;
    ;
;

// Конец ФайлыОбработчикСобытий

//Область СлужебныйПрограммныйИнтерфейс

@ВПроекте
метод Фотография(ФизическоеЛицо: ФизическиеЛица.Ссылка?): ДвоичныйОбъект.Ссылка?
    если ФизическоеЛицо == Неопределено
        возврат Неопределено
    ;
    возврат ФотографияИзФайла(ФайлФотографии(ФизическоеЛицо))
;

@ВПроекте
метод Миниатюра(ФизическоеЛицо: ФизическиеЛица.Ссылка?): ДвоичныйОбъект.Ссылка?
    если ФизическоеЛицо == Неопределено
        возврат Неопределено
    ;
    знч ФайлМиниатюры = МенеджерСущности.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "Миниатюра")
    возврат ФотографияИзФайла(ФайлМиниатюры)
;

@ВПроекте
метод АдресМиниатюры(ФизическоеЛицо: ФизическиеЛица.Ссылка?): Строка
    знч АдресПриложения = СтандартноеПриложение.НастройкиПриложения().АдресПриложения
    пер АдресМиниатюры: Строка = УниверсальныеМеханизмы.СсылкаНаРесурс(АдресПриложения, "Неизвестный.svg")
    если ФизическоеЛицо != Неопределено
        знч ФайлМиниатюры = МенеджерСущности.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "Миниатюра")
        если ФайлМиниатюры это Файлы.Ссылка
            АдресМиниатюры = Файлы.СсылкаНаСкачивание(АдресПриложения, ФайлМиниатюры)
        ;
    ;
    возврат АдресМиниатюры
;

метод ФайлФотографии(ФизическоеЛицо: ФизическиеЛица.Ссылка): Файлы.Ссылка?
    возврат МенеджерСущности.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "Фотография")
;

конст МАКСИМАЛЬНАЯ_ВЫСОТА_ФОТО = 240
конст МАКСИМАЛЬНАЯ_ШИРИНА_ФОТО = 240

@ВПроекте
метод НастройкиСжатияФотографииПриЗагрузке(): МенеджерФайлов.ОбработкаИзображения
    пер Настройки = новый МенеджерФайлов.ОбработкаИзображения(Уменьшать = Истина, Формат = ФорматИзображения.Jpeg)
    Настройки.Уменьшать = Истина
    Настройки.МаксимальнаяВысота = МАКСИМАЛЬНАЯ_ВЫСОТА_ФОТО
    Настройки.МаксимальнаяШирина = МАКСИМАЛЬНАЯ_ШИРИНА_ФОТО
    возврат Настройки
;

@ВПроекте
метод ФотографияИзФайла(ФайлФотографии: Файлы.Ссылка?): ДвоичныйОбъект.Ссылка?
    если ФайлФотографии != Неопределено
        возврат Файлы.СведенияОФайле(ФайлФотографии).Хранилище
    ;
    возврат Неопределено
;

метод ЗаписатьПодчиненныеДанные(ФизическоеЛицо: ФизическиеЛица.Объект, ДанныеФизлица: ФизЛица.ДанныеФизлица)
    // Создаем подчиненные объекты.
    пер ЛичныеДанные = ПодчиненныйОбъект(
        ФизическоеЛицо.Ссылка,
        ЛичныеДанныеФизическихЛиц.ЛичныеДанныеФизическогоЛица(ФизическоеЛицо.Ссылка),
        &ЛичныеДанныеФизическихЛиц.Объект.новый(Ууид))
    ЛичныеДанныеФизическихЛиц.Заполнить(ЛичныеДанные как ЛичныеДанныеФизическихЛиц.Объект, ДанныеФизлица)

    пер КонтактнаяИнформация = ПодчиненныйОбъект(
        ФизическоеЛицо.Ссылка, 
        РабочиеКонтактыФизическихЛиц.РабочиеКонтактыФизическихЛиц(ФизическоеЛицо.Ссылка), 
        &РабочиеКонтактыФизическихЛиц.Объект.новый(Ууид))
    РабочиеКонтактыФизическихЛиц.Заполнить(КонтактнаяИнформация как РабочиеКонтактыФизическихЛиц.Объект, ДанныеФизлица)
    
    исп Транзакции.Начать()
    (ЛичныеДанные как ЛичныеДанныеФизическихЛиц.Объект).Записать()
    (КонтактнаяИнформация как РабочиеКонтактыФизическихЛиц.Объект).Записать()
;

метод ДанныеФизическогоЛица(Ссылка: ФизическиеЛица.Ссылка): ФизЛица.ДанныеФизлица
    знч ЗапрашиваемыеДанные: ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц
    ЗапрашиваемыеДанные.ЛичныеДанные = Истина
    ЗапрашиваемыеДанные.ПерсональныеДанные = Истина
    ЗапрашиваемыеДанные.РабочаяКонтактнаяИнформация = Истина
    ЗапрашиваемыеДанные.ЛичнаяКонтактнаяИнформация = Истина
    ЗапрашиваемыеДанные.ПерсональныеДанные = Истина
    ЗапрашиваемыеДанные.УдостоверениеЛичности = Истина
    знч ДанныеФизлица = ФизЛица.ДанныеФизическогоЛица(Ссылка, ЗапрашиваемыеДанные)
    возврат  ДанныеФизлица
;

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "persons"
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    знч СервисыПоддержкаApi_V0 = ФизическиеЛицаПоддержкаApi_V0.ПолучитьСервисы()
    для Сервис из СервисыПоддержкаApi_V0
        Сервис.ЗагрузитьОбъектИзJson(ДанныеJson, Сервисы)
        прервать
    ;
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ФизическоеЛицо_V1_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    знч ДанныеФизлица: ФизЛица.ДанныеФизлица
    ЗаполнитьФизическоеЛицоИзJson(ДанныеФизлица, ДанныеJson)

    знч Вложения: Массив<Файлы.Объект>
    пер ФайлМиниатюры: Файлы.Объект?
    если ДанныеJson.picture != Неопределено
        знч ФайлФотографии = ЗагрузитьИзображение(
            ОбменДанными.ЗагруженныйФайл(ДанныеJson.picture!), 
            ДанныеJson.picture!)
        ДанныеФизлица.ЛичныеДанные.Фотография = ФайлФотографии.Ссылка
        Вложения.Добавить(ФайлФотографии)
        ФайлМиниатюры = ФайлМиниатюры(ФайлФотографии)
        ДанныеФизлица.ЛичныеДанные.Миниатюра = ФайлМиниатюры.Ссылка
        если ФайлМиниатюры.Ссылка != ФайлФотографии.Ссылка
            Вложения.Добавить(ФайлМиниатюры)
        ;
    ;
    исп Транзакция = Транзакции.Начать() 
    знч ФизическоеЛицо = Сервисы.ПрочитатьОбъект(ДанныеJson.ID, &ФизическиеЛица.Объект.новый(Ууид), Тип<ФизическиеЛица.Ссылка>) как ФизическиеЛица.Объект
    если ФайлМиниатюры == Неопределено
        если ФизическоеЛицо.Миниатюра != Неопределено
            знч ПрежнийФайлМиниатюры = ФизическоеЛицо.Миниатюра.ЗагрузитьОбъект()
            если ПрежнийФайлМиниатюры != Неопределено
                ФайлМиниатюры = ФайлМиниатюры(ПрежнийФайлМиниатюры.Хранилище.Загрузить(),
                    ПрежнийФайлМиниатюры.Наименование, ПрежнийФайлМиниатюры.Расширение)
            ;
        ;
        если ФайлМиниатюры == Неопределено
            ФайлМиниатюры = ФайлМиниатюрыПоУмолчанию(ДанныеФизлица.ЛичныеДанные.ФИО.Фамилия, ДанныеФизлица.ЛичныеДанные.ФИО.Имя)
        ;
        ДанныеФизлица.ЛичныеДанные.Миниатюра = ФайлМиниатюры.Ссылка
        Вложения.Добавить(ФайлМиниатюры)
    ;
    Заполнить(ФизическоеЛицо, ДанныеФизлица)
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ФизическоеЛицо, ДанныеJson.ID), Сервисы.ИнструментыМенеджераОбъекта)
    Транзакция.Фиксировать()
    ЗаписатьПодчиненныеДанные(ФизическоеЛицо, ДанныеФизлица)
    Файлы.ЗаписатьФайлыПоВладельцу(Вложения, ФизическоеЛицо.Ссылка)
    СклоненияПредставленийОбъектов.ЗаписатьСклоненияПредставления(ФизическоеЛицо.Ссылка, ДанныеФизлица.СклоненияФИО)
;


@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ФизическоеЛицо_V2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    знч ДанныеФизлица: ФизЛица.ДанныеФизлица
    ЗаполнитьФизическоеЛицоИзJson(ДанныеФизлица, ДанныеJson)

    знч Вложения: Массив<Файлы.Объект>
    пер ФайлМиниатюры: Файлы.Объект?
    если ДанныеJson.picture != Неопределено
        знч ФайлФотографии = ЗагрузитьИзображение(
            ОбменДанными.ЗагруженныйФайл(ДанныеJson.picture!), 
            ДанныеJson.picture!)
        ДанныеФизлица.ЛичныеДанные.Фотография = ФайлФотографии.Ссылка
        Вложения.Добавить(ФайлФотографии)
        ФайлМиниатюры = ФайлМиниатюры(ФайлФотографии)
        ДанныеФизлица.ЛичныеДанные.Миниатюра = ФайлМиниатюры.Ссылка
        если ФайлМиниатюры.Ссылка != ФайлФотографии.Ссылка
            Вложения.Добавить(ФайлМиниатюры)
        ;
    ;
    исп Транзакция = Транзакции.Начать() 
    знч ФизическоеЛицо = Сервисы.ПрочитатьОбъект(ДанныеJson.ID, &ФизическиеЛица.Объект.новый(Ууид), Тип<ФизическиеЛица.Ссылка>) как ФизическиеЛица.Объект
    если ФайлМиниатюры == Неопределено
        если ФизическоеЛицо.Миниатюра != Неопределено
            ФизическиеЛица.УдалитьфайлМиниатюры(ФизическоеЛицо.Миниатюра)
        ;
        если ФайлМиниатюры == Неопределено
            ФайлМиниатюры = ФайлМиниатюрыПоУмолчанию(ДанныеФизлица.ЛичныеДанные.ФИО.Фамилия, ДанныеФизлица.ЛичныеДанные.ФИО.Имя)
        ;
        ДанныеФизлица.ЛичныеДанные.Миниатюра = ФайлМиниатюры.Ссылка
        Вложения.Добавить(ФайлМиниатюры)
    ;
    Заполнить(ФизическоеЛицо, ДанныеФизлица)
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ФизическоеЛицо, ДанныеJson.ID), Сервисы.ИнструментыМенеджераОбъекта)
    Транзакция.Фиксировать()
    ЗаписатьПодчиненныеДанные(ФизическоеЛицо, ДанныеФизлица)
    Файлы.ЗаписатьФайлыПоВладельцу(Вложения, ФизическоеЛицо.Ссылка)
    СклоненияПредставленийОбъектов.ЗаписатьСклоненияПредставления(ФизическоеЛицо.Ссылка, ДанныеФизлица.СклоненияФИО)
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ФизическоеЛицо_V2_3, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    знч ДанныеФизлица: ФизЛица.ДанныеФизлица
    ЗаполнитьФизическоеЛицоИзJson(ДанныеФизлица, ДанныеJson)

    знч Вложения: Массив<Файлы.Объект>
    пер ФайлМиниатюры: Файлы.Объект?
    если ДанныеJson.picture != Неопределено
        знч ФайлФотографии = ЗагрузитьИзображение(
            ОбменДанными.ЗагруженныйФайл(ДанныеJson.picture!), 
            ДанныеJson.picture!)
        ДанныеФизлица.ЛичныеДанные.Фотография = ФайлФотографии.Ссылка
        Вложения.Добавить(ФайлФотографии)
        ФайлМиниатюры = ФайлМиниатюры(ФайлФотографии)
        ДанныеФизлица.ЛичныеДанные.Миниатюра = ФайлМиниатюры.Ссылка
        если ФайлМиниатюры.Ссылка != ФайлФотографии.Ссылка
            Вложения.Добавить(ФайлМиниатюры)
        ;
    ;
    исп Транзакция = Транзакции.Начать() 
    знч ФизическоеЛицо = Сервисы.ПрочитатьОбъект(ДанныеJson.ID, &ФизическиеЛица.Объект.новый(Ууид), Тип<ФизическиеЛица.Ссылка>) как ФизическиеЛица.Объект
    если ФайлМиниатюры == Неопределено
        если ФизическоеЛицо.Миниатюра != Неопределено
            знч ПрежнийФайлМиниатюры = ФизическоеЛицо.Миниатюра.ЗагрузитьОбъект()
            если ПрежнийФайлМиниатюры != Неопределено
                ФайлМиниатюры = ФайлМиниатюры(ПрежнийФайлМиниатюры.Хранилище.Загрузить(),
                    ПрежнийФайлМиниатюры.Наименование, ПрежнийФайлМиниатюры.Расширение)
            ;
        ;
        если ФайлМиниатюры == Неопределено
            ФайлМиниатюры = ФайлМиниатюрыПоУмолчанию(ДанныеФизлица.ЛичныеДанные.ФИО.Фамилия, ДанныеФизлица.ЛичныеДанные.ФИО.Имя)
        ;
        ДанныеФизлица.ЛичныеДанные.Миниатюра = ФайлМиниатюры.Ссылка
        Вложения.Добавить(ФайлМиниатюры)
    ;
    Заполнить(ФизическоеЛицо, ДанныеФизлица)
    если ДанныеJson.serviceShutdownDate == Неопределено
        ФизическоеЛицо.ДатаОтключения = Неопределено
    иначе
        ФизическоеЛицо.ДатаОтключения = ДанныеJson.serviceShutdownDate!
    ;
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ФизическоеЛицо, ДанныеJson.ID), Сервисы.ИнструментыМенеджераОбъекта)
    Транзакция.Фиксировать()
    ЗаписатьПодчиненныеДанные(ФизическоеЛицо, ДанныеФизлица)
    Файлы.ЗаписатьФайлыПоВладельцу(Вложения, ФизическоеЛицо.Ссылка)
    СклоненияПредставленийОбъектов.ЗаписатьСклоненияПредставления(ФизическоеЛицо.Ссылка, ДанныеФизлица.СклоненияФИО)
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ФизическоеЛицо_3_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    знч ДанныеФизлица: ФизЛица.ДанныеФизлица
    ЗаполнитьФизическоеЛицоИзJson(ДанныеФизлица, ДанныеJson)

    знч Вложения: Массив<Файлы.Объект>
    пер ФайлМиниатюры: Файлы.Объект?
    если ДанныеJson.picture != Неопределено
        знч ФайлФотографии = ЗагрузитьИзображение(
            ОбменДанными.ЗагруженныйФайл(ДанныеJson.picture!), 
            ДанныеJson.picture!)
        ДанныеФизлица.ЛичныеДанные.Фотография = ФайлФотографии.Ссылка
        Вложения.Добавить(ФайлФотографии)
        ФайлМиниатюры = ФайлМиниатюры(ФайлФотографии)
        ДанныеФизлица.ЛичныеДанные.Миниатюра = ФайлМиниатюры.Ссылка
        если ФайлМиниатюры.Ссылка != ФайлФотографии.Ссылка
            Вложения.Добавить(ФайлМиниатюры)
        ;
    ;
    исп Транзакция = Транзакции.Начать() 
    знч ФизическоеЛицо = Сервисы.ПрочитатьОбъект(ДанныеJson.ID, &ФизическиеЛица.Объект.новый(Ууид), Тип<ФизическиеЛица.Ссылка>) как ФизическиеЛица.Объект
    если ФайлМиниатюры == Неопределено
        если ФизическоеЛицо.Миниатюра != Неопределено
            знч ПрежнийФайлМиниатюры = ФизическоеЛицо.Миниатюра.ЗагрузитьОбъект()
            если ПрежнийФайлМиниатюры != Неопределено
                ФайлМиниатюры = ФайлМиниатюры(ПрежнийФайлМиниатюры.Хранилище.Загрузить(),
                    ПрежнийФайлМиниатюры.Наименование, ПрежнийФайлМиниатюры.Расширение)
            ;
        ;
        если ФайлМиниатюры == Неопределено
            ФайлМиниатюры = ФайлМиниатюрыПоУмолчанию(ДанныеФизлица.ЛичныеДанные.ФИО.Фамилия, ДанныеФизлица.ЛичныеДанные.ФИО.Имя)
        ;
        ДанныеФизлица.ЛичныеДанные.Миниатюра = ФайлМиниатюры.Ссылка
        Вложения.Добавить(ФайлМиниатюры)
    ;
    Заполнить(ФизическоеЛицо, ДанныеФизлица)
    если ДанныеJson.serviceShutdownDate == Неопределено
        ФизическоеЛицо.ДатаОтключения = Неопределено
    иначе
        ФизическоеЛицо.ДатаОтключения = ДанныеJson.serviceShutdownDate!
    ;
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ФизическоеЛицо, ДанныеJson.ID), Сервисы.ИнструментыМенеджераОбъекта)
    Транзакция.Фиксировать()
    ЗаписатьПодчиненныеДанные(ФизическоеЛицо, ДанныеФизлица)
    Файлы.ЗаписатьФайлыПоВладельцу(Вложения, ФизическоеЛицо.Ссылка)
    СклоненияПредставленийОбъектов.ЗаписатьСклоненияПредставления(ФизическоеЛицо.Ссылка, ДанныеФизлица.СклоненияФИО)
;

метод ИзменениеФизическогоЛица(ДанныеJson: Объект, Активность: Булево, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    знч ФизическоеЛицо: ФизическиеЛица.Ссылка = Сервисы.НайтиСсылку(ДанныеJson как Строка) как ФизическиеЛица.Ссылка
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка Как Ссылка
        Из
            ФизическиеЛица
        Где
            Активен != %Активность
            И Ссылка == %ФизическоеЛицо}
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        пер ФизическоеЛицоОбъект = РезультатСтрока.Ссылка.ЗагрузитьОбъект()
        ФизическоеЛицоОбъект.Активен = Активность
        Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ФизическоеЛицоОбъект, ДанныеJson как Строка), 
            Сервисы.ИнструментыМенеджераОбъекта)
    ;
;

метод ПриОкончанииДеактивацииФизическогоЛица(МассивСсылок: ЧитаемыйМассив<ВходящиеДанные.Ссылка>)
    пер Физлица: Массив<ФизическиеЛица.Ссылка>
    для СсылкаНаОбъект из МассивСсылок
        Физлица.Добавить(СсылкаНаОбъект как ФизическиеЛица.Ссылка)
    ;
    ПриДеактивацииФизическихЛиц(Физлица)
;

метод ПриДеактивацииФизическихЛиц(Физлица: Массив<ФизическиеЛица.Ссылка>)    
    знч Сервисы = ФизическиеЛицаОбработчикСобытий.ПолучитьСервисы()
    для Сервис из  Сервисы
        Сервис.ПослеДеактивацииФизлица(Физлица)
    ;
;

@ВПроекте
метод ИзменитьОбъектИзJson(ДанныеJson: Объект, Сервисы: ВебApiСервер.СервисыЗагрузкиJson, ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации)
    ЗаданиеМодификации.Обработка(ДанныеJson, Сервисы)
;

@ВПроекте
метод МассивСсылокПоФильтру(Фильтр: () -> ЧитаемыйМассив<Справочник.Ссылка>): ЧитаемыйМассив<Справочник.Ссылка>
    возврат Фильтр()
;

@ВПроекте
метод ЗавершитьИзменениеОбъектИзJson(МассивСсылок: ЧитаемыйМассив<ВходящиеДанные.Ссылка>, ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации)
    если ЗаданиеМодификации.ПриОкончанииОбработки != Неопределено
        ЗаданиеМодификации.ПриОкончанииОбработки(МассивСсылок)
    ;
;

@ВПроекте
метод ПослеЗаписиГруппыОбъектов(МассивОбъектовОтложенногоОбновления: Массив<ВебApiСервер.ОбъектОтложенногоОбновления>)
    знч ЗагруженныеФизическиеЛица: Массив<ФизическиеЛица.Ссылка>
    для ОбъектОтложенногоОбновления из МассивОбъектовОтложенногоОбновления
        ЗагруженныеФизическиеЛица.Добавить(ОбъектОтложенногоОбновления.ОбновляемыйОбъект как ФизическиеЛица.Ссылка)
    ;
    
    знч Сервисы = ФизическиеЛицаОбработчикСобытий.ПолучитьСервисы()
    для Сервис из Сервисы
        Сервис.ПослеЗаписиФизлицПриЗагрузке(ЗагруженныеФизическиеЛица)
    ;
;

метод ЗагрузитьИзображение(ДанныеЗагруженногоФайла: ДвоичныйОбъект.Ссылка, ДанныеИзображенияJson: МенеджерФайлов.ДанныеФайлаJson): Файлы.Объект

    пер ДанныеФайла: ДвоичныйОбъект?
    попытка 
        ДанныеФайла = МенеджерФайлов.ОбработатьИзображение(ДанныеЗагруженногоФайла.Загрузить(), НастройкиСжатияФотографииПриЗагрузке())
    поймать ОшибкаОбработки: МенеджерФайлов.ИсключениеОбработкиИзображения
        Журналирование.ЗарегистрироватьОшибку("ОшибкаЗагрузкиИзображения", Причина = ОшибкаОбработки,
            Описание = "Ошибка при загрузке изображения (%{ДанныеИзображенияJson.fileID}, %{ДанныеИзображенияJson.name}")
        ДанныеФайла = ДанныеЗагруженногоФайла.Загрузить()
    ;
    знч ФайлОбъект = Файлы.НовыйФайл(ДанныеФайла!, ДанныеФайла!.Размер.ВБайтах())
    ФайлОбъект.ЗаполнитьПоЗагруженномуФайлу(ДанныеИзображенияJson)
    возврат ФайлОбъект
;

@ВПроекте // видимость @ВПроекте установлена для поддержки формата из версии v0
метод ЗаполнитьФизическоеЛицоИзJson(ФизическоеЛицо: ФизЛица.ДанныеФизлица, ДанныеJson: ФизическоеЛицо_V1_0)
    
    ФизическоеЛицо.ЛичныеДанные.Пол = ПолФизическогоЛицаИзJson(ДанныеJson.gender)
    ФизическоеЛицо.ЛичныеДанные.ФИО.Фамилия = ДанныеJson.lastName
    ФизическоеЛицо.ЛичныеДанные.ФИО.Имя = ДанныеJson.firstName ?? ""
    ФизическоеЛицо.ЛичныеДанные.ФИО.Отчество = ДанныеJson.patronymic ?? ""
    ФизическоеЛицо.ЛичныеДанные.ФИО.ИнициалыИмени = ДанныеJson.initials ?? ""

    ФизическоеЛицо.ПерсональныеДанные.ИНН = ДанныеJson.taxID ?? ""
    ФизическоеЛицо.ПерсональныеДанные.СНИЛС = ДанныеJson.insuranceNumber ?? ""
    ФизическоеЛицо.ПерсональныеДанные.ДатаРождения = ДанныеJson.birthDate?.Дата
    ФизическоеЛицо.ПерсональныеДанные.МестоРождения = ДанныеJson.birthPlace ?? ""

    ФизическоеЛицо.ПерсональныеДанные.АдресРегистрации = ДанныеJson.registrationAddress ?? ""
    ФизическоеЛицо.ПерсональныеДанные.АдресМестаПроживания = ДанныеJson.residentialAddress ?? ""
    ФизическоеЛицо.ЛичнаяКонтактнаяИнформация.Скайп = ДанныеJson.skype ?? ""

    ФизическоеЛицо.РабочаяКонтактнаяИнформация.Телефон = ДанныеJson.phoneNumber ?? ""
    ФизическоеЛицо.РабочаяКонтактнаяИнформация.МобильныйТелефон = ДанныеJson.mobilePhoneNumber ?? ""
    ФизическоеЛицо.РабочаяКонтактнаяИнформация.ЭлектроннаяПочта = ДанныеJson.eMail ?? ""
  
    если ДанныеJson.identityDocument != Неопределено
        ФизическоеЛицо.УдостоверениеЛичности.Вид = ВидУдостоверенияЛичностиИзJson(ДанныеJson.identityDocument.identityDocumentType)
        ФизическоеЛицо.УдостоверениеЛичности.Номер = ДанныеJson.identityDocument.number ?? ""
        ФизическоеЛицо.УдостоверениеЛичности.Серия = ДанныеJson.identityDocument.serias ?? ""
        ФизическоеЛицо.УдостоверениеЛичности.ВыдавшийОрган = ДанныеJson.identityDocument.issuingAuthority ?? ""
        ФизическоеЛицо.УдостоверениеЛичности.КодВыдавшегоОргана = ДанныеJson.identityDocument.issuingAuthorityID ?? ""
        ФизическоеЛицо.УдостоверениеЛичности.ДатаВыдачи = ДанныеJson.identityDocument.issueDate?.Дата
    ;
    если ДанныеJson.presentationForms != Неопределено
        ФизическоеЛицо.СклоненияФИО = СклоненияФИОИзJson(ДанныеJson.presentationForms)
    ;
;

@ВПроекте // видимость @ВПроекте установлена для поддержки формата из версии v0
метод ЗаполнитьФизическоеЛицоИзJson(ФизическоеЛицо: ФизЛица.ДанныеФизлица, ДанныеJson: ФизическоеЛицо_V2_0)
    
    ФизическоеЛицо.ЛичныеДанные.Пол = ПолФизическогоЛицаИзJson(ДанныеJson.gender)
    ФизическоеЛицо.ЛичныеДанные.ФИО.Фамилия = ДанныеJson.lastName
    ФизическоеЛицо.ЛичныеДанные.ФИО.Имя = ДанныеJson.firstName ?? ""
    ФизическоеЛицо.ЛичныеДанные.ФИО.Отчество = ДанныеJson.patronymic ?? ""
    ФизическоеЛицо.ЛичныеДанные.ФИО.ИнициалыИмени = ДанныеJson.initials ?? ""

    ФизическоеЛицо.ПерсональныеДанные.ИНН = ДанныеJson.taxID ?? ""
    ФизическоеЛицо.ПерсональныеДанные.СНИЛС = ДанныеJson.insuranceNumber ?? ""
    ФизическоеЛицо.ПерсональныеДанные.ДатаРождения = ДанныеJson.birthDate?.Дата
    ФизическоеЛицо.ПерсональныеДанные.МестоРождения = ДанныеJson.birthPlace ?? ""

    ФизическоеЛицо.ПерсональныеДанные.АдресРегистрации = ДанныеJson.registrationAddress ?? ""
    ФизическоеЛицо.ПерсональныеДанные.АдресМестаПроживания = ДанныеJson.residentialAddress ?? ""
    ФизическоеЛицо.ЛичнаяКонтактнаяИнформация.Скайп = ДанныеJson.skype ?? ""

    ФизическоеЛицо.РабочаяКонтактнаяИнформация.Телефон = ДанныеJson.phoneNumber ?? ""
    ФизическоеЛицо.РабочаяКонтактнаяИнформация.МобильныйТелефон = ДанныеJson.mobilePhoneNumber ?? ""
    ФизическоеЛицо.РабочаяКонтактнаяИнформация.ЭлектроннаяПочта = ДанныеJson.eMail ?? ""
  
    если ДанныеJson.identityDocument != Неопределено
        ФизическоеЛицо.УдостоверениеЛичности.Вид = ВидУдостоверенияЛичностиИзJson(ДанныеJson.identityDocument.identityDocumentType)
        ФизическоеЛицо.УдостоверениеЛичности.Номер = ДанныеJson.identityDocument.number ?? ""
        ФизическоеЛицо.УдостоверениеЛичности.Серия = ДанныеJson.identityDocument.serias ?? ""
        ФизическоеЛицо.УдостоверениеЛичности.ВыдавшийОрган = ДанныеJson.identityDocument.issuingAuthority ?? ""
        ФизическоеЛицо.УдостоверениеЛичности.КодВыдавшегоОргана = ДанныеJson.identityDocument.issuingAuthorityID ?? ""
        ФизическоеЛицо.УдостоверениеЛичности.ДатаВыдачи = ДанныеJson.identityDocument.issueDate?.Дата
    ;
    если ДанныеJson.presentationForms != Неопределено
        ФизическоеЛицо.СклоненияФИО = СклоненияФИОИзJson(ДанныеJson.presentationForms)
    ;
;

@ВПроекте // видимость @ВПроекте установлена для поддержки формата из версии v0
метод ЗаполнитьФизическоеЛицоИзJson(ФизическоеЛицо: ФизЛица.ДанныеФизлица, ДанныеJson: ФизическоеЛицо_V2_3)
    
    ФизическоеЛицо.ЛичныеДанные.Пол = ПолФизическогоЛицаИзJson(ДанныеJson.gender)
    ФизическоеЛицо.ЛичныеДанные.ФИО.Фамилия = ДанныеJson.lastName
    ФизическоеЛицо.ЛичныеДанные.ФИО.Имя = ДанныеJson.firstName ?? ""
    ФизическоеЛицо.ЛичныеДанные.ФИО.Отчество = ДанныеJson.patronymic ?? ""
    ФизическоеЛицо.ЛичныеДанные.ФИО.ИнициалыИмени = ДанныеJson.initials ?? ""

    ФизическоеЛицо.ПерсональныеДанные.ИНН = ДанныеJson.taxID ?? ""
    ФизическоеЛицо.ПерсональныеДанные.СНИЛС = ДанныеJson.insuranceNumber ?? ""
    ФизическоеЛицо.ПерсональныеДанные.ДатаРождения = ДанныеJson.birthDate?.Дата
    ФизическоеЛицо.ПерсональныеДанные.МестоРождения = ДанныеJson.birthPlace ?? ""

    ФизическоеЛицо.ПерсональныеДанные.АдресРегистрации = ДанныеJson.registrationAddress ?? ""
    ФизическоеЛицо.ПерсональныеДанные.АдресМестаПроживания = ДанныеJson.residentialAddress ?? ""
    ФизическоеЛицо.ЛичнаяКонтактнаяИнформация.Скайп = ДанныеJson.skype ?? ""

    ФизическоеЛицо.РабочаяКонтактнаяИнформация.Телефон = ДанныеJson.phoneNumber ?? ""
    ФизическоеЛицо.РабочаяКонтактнаяИнформация.МобильныйТелефон = ДанныеJson.mobilePhoneNumber ?? ""
    ФизическоеЛицо.РабочаяКонтактнаяИнформация.ЭлектроннаяПочта = ДанныеJson.eMail ?? ""
  
    если ДанныеJson.identityDocument != Неопределено
        ФизическоеЛицо.УдостоверениеЛичности.Вид = ВидУдостоверенияЛичностиИзJson(ДанныеJson.identityDocument.identityDocumentType)
        ФизическоеЛицо.УдостоверениеЛичности.Номер = ДанныеJson.identityDocument.number ?? ""
        ФизическоеЛицо.УдостоверениеЛичности.Серия = ДанныеJson.identityDocument.serias ?? ""
        ФизическоеЛицо.УдостоверениеЛичности.ВыдавшийОрган = ДанныеJson.identityDocument.issuingAuthority ?? ""
        ФизическоеЛицо.УдостоверениеЛичности.КодВыдавшегоОргана = ДанныеJson.identityDocument.issuingAuthorityID ?? ""
        ФизическоеЛицо.УдостоверениеЛичности.ДатаВыдачи = ДанныеJson.identityDocument.issueDate?.Дата
    ;
    если ДанныеJson.presentationForms != Неопределено
        ФизическоеЛицо.СклоненияФИО = СклоненияФИОИзJson(ДанныеJson.presentationForms)
    ;
;

@ВПроекте // видимость @ВПроекте установлена для поддержки формата из версии v0
метод ЗаполнитьФизическоеЛицоИзJson(ФизическоеЛицо: ФизЛица.ДанныеФизлица, ДанныеJson: ФизическоеЛицо_3_0)
    
    ФизическоеЛицо.ЛичныеДанные.Пол = ПолФизическогоЛицаИзJson(ДанныеJson.gender)
    ФизическоеЛицо.ЛичныеДанные.ФИО.Фамилия = ДанныеJson.lastName
    ФизическоеЛицо.ЛичныеДанные.ФИО.Имя = ДанныеJson.firstName ?? ""
    ФизическоеЛицо.ЛичныеДанные.ФИО.Отчество = ДанныеJson.patronymic ?? ""
    ФизическоеЛицо.ЛичныеДанные.ФИО.ИнициалыИмени = ДанныеJson.initials ?? ""

    ФизическоеЛицо.ПерсональныеДанные.ИНН = ДанныеJson.taxID ?? ""
    ФизическоеЛицо.ПерсональныеДанные.СНИЛС = ДанныеJson.insuranceNumber ?? ""
    ФизическоеЛицо.ПерсональныеДанные.ДатаРождения = ДанныеJson.birthDate?.Дата
    ФизическоеЛицо.ПерсональныеДанные.МестоРождения = ДанныеJson.birthPlace ?? ""

    ФизическоеЛицо.ПерсональныеДанные.АдресРегистрации = ДанныеJson.registrationAddress ?? ""
    ФизическоеЛицо.ПерсональныеДанные.АдресМестаПроживания = ДанныеJson.residentialAddress ?? ""
    ФизическоеЛицо.ЛичнаяКонтактнаяИнформация.Скайп = ДанныеJson.skype ?? ""

    ФизическоеЛицо.РабочаяКонтактнаяИнформация.Телефон = ДанныеJson.phoneNumber ?? ""
    ФизическоеЛицо.РабочаяКонтактнаяИнформация.МобильныйТелефон = ДанныеJson.mobilePhoneNumber ?? ""
    ФизическоеЛицо.РабочаяКонтактнаяИнформация.ЭлектроннаяПочта = ДанныеJson.eMail ?? ""
  
    если ДанныеJson.identityDocument != Неопределено
        ФизическоеЛицо.УдостоверениеЛичности.Вид = ВидУдостоверенияЛичностиИзJson(ДанныеJson.identityDocument.identityDocumentType)
        ФизическоеЛицо.УдостоверениеЛичности.Номер = ДанныеJson.identityDocument.number ?? ""
        ФизическоеЛицо.УдостоверениеЛичности.Серия = ДанныеJson.identityDocument.serias ?? ""
        ФизическоеЛицо.УдостоверениеЛичности.ВыдавшийОрган = ДанныеJson.identityDocument.issuingAuthority ?? ""
        ФизическоеЛицо.УдостоверениеЛичности.КодВыдавшегоОргана = ДанныеJson.identityDocument.issuingAuthorityID ?? ""
        ФизическоеЛицо.УдостоверениеЛичности.ДатаВыдачи = ДанныеJson.identityDocument.issueDate?.Дата
        ФизическоеЛицо.УдостоверениеЛичности.Страна = ДанныеJson.citizenship != Неопределено ? СтраныМира.НайтиПоКоду(ДанныеJson.citizenship!) : Неопределено
    ;
    если ДанныеJson.presentationForms != Неопределено
        ФизическоеЛицо.СклоненияФИО = СклоненияФИОИзJson(ДанныеJson.presentationForms)
    ;
;

@ВПроекте
метод ПолучитьДанныеJson(Ссылка: ФизическиеЛица.Ссылка, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Объект?
    если ВерсияФорматаОбмена == Неопределено
        возврат ПолучитьДанныеJson(Ссылка, Сервисы)
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат ПолучитьДанныеJson_V1_0(Ссылка, Сервисы)
    ;
;

метод ПолучитьДанныеJson(Ссылка: ФизическиеЛица.Ссылка, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДанныеJson
    пер ДанныеJson: ДанныеJson?
    знч СервисыПоддержкаApi_V0 = ФизическиеЛицаПоддержкаApi_V0.ПолучитьСервисы()
    для Сервис из СервисыПоддержкаApi_V0
        ДанныеJson = Сервис.ПолучитьДанныеJson(Ссылка, Сервисы)
    ;
    возврат ДанныеJson
;

метод ПолучитьДанныеJson_V1_0(Ссылка: ФизическиеЛица.Ссылка, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ФизическоеЛицо_V1_0
    знч ФизическоеЛицо: ФизЛица.ДанныеФизлица = ДанныеФизическогоЛица(Ссылка)
    знч ДанныеJson = новый ФизическоеЛицо_V1_0(
        Сервисы.ПолучитьИдентификатор(Ссылка), 
        ФизическоеЛицо.ЛичныеДанные.ФИО.Фамилия, 
        ПолФизическогоЛицаВJson(ФизическоеЛицо.ЛичныеДанные.Пол))

    ДанныеJson.firstName = ФизическоеЛицо.ЛичныеДанные.ФИО.Имя
    ДанныеJson.patronymic = ФизическоеЛицо.ЛичныеДанные.ФИО.Отчество
    ДанныеJson.initials = ФизическоеЛицо.ЛичныеДанные.ФИО.ИнициалыИмени
    ДанныеJson.birthDate = ФизическоеЛицо.ПерсональныеДанные.ДатаРождения?.НачалоДня()
    ДанныеJson.birthPlace = ФизическоеЛицо.ПерсональныеДанные.МестоРождения
    ДанныеJson.taxID = ФизическоеЛицо.ПерсональныеДанные.ИНН
    ДанныеJson.insuranceNumber = ФизическоеЛицо.ПерсональныеДанные.СНИЛС
    ДанныеJson.registrationAddress = ФизическоеЛицо.ПерсональныеДанные.АдресРегистрации
    ДанныеJson.residentialAddress = ФизическоеЛицо.ПерсональныеДанные.АдресМестаПроживания
    ДанныеJson.phoneNumber = ФизическоеЛицо.РабочаяКонтактнаяИнформация.Телефон
    ДанныеJson.mobilePhoneNumber = ФизическоеЛицо.РабочаяКонтактнаяИнформация.МобильныйТелефон
    ДанныеJson.eMail = ФизическоеЛицо.РабочаяКонтактнаяИнформация.ЭлектроннаяПочта
    ДанныеJson.skype = ФизическоеЛицо.ЛичнаяКонтактнаяИнформация.Скайп
    ДанныеJson.identityDocument = ДокументУдостоверяющийЛичностьВJson(ФизическоеЛицо.УдостоверениеЛичности)
    
    если ФизическоеЛицо.ЛичныеДанные.Фотография != Неопределено
        ДанныеJson.picture = Файлы.ДанныеФайлаJson(ФизическоеЛицо.ЛичныеДанные.Фотография!, Сервисы)
    ;
    ДанныеJson.presentationForms = СклоненияФИОВJson(Ссылка)
    
    возврат ДанныеJson  
;

метод ПолучитьДанныеJson_V1_1(Ссылка: ФизическиеЛица.Ссылка, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ФизическоеЛицо_V1_1
    знч ФизическоеЛицо: ФизЛица.ДанныеФизлица = ДанныеФизическогоЛица(Ссылка)
    знч ДанныеJson = новый ФизическоеЛицо_V1_1(
        Сервисы.ПолучитьИдентификатор(Ссылка), 
        ФизическоеЛицо.ЛичныеДанные.ФИО.Фамилия, 
        ПолФизическогоЛицаВJson(ФизическоеЛицо.ЛичныеДанные.Пол))

    ДанныеJson.firstName = ФизическоеЛицо.ЛичныеДанные.ФИО.Имя
    ДанныеJson.patronymic = ФизическоеЛицо.ЛичныеДанные.ФИО.Отчество
    ДанныеJson.initials = ФизическоеЛицо.ЛичныеДанные.ФИО.ИнициалыИмени
    ДанныеJson.birthDate = ФизическоеЛицо.ПерсональныеДанные.ДатаРождения?.НачалоДня()
    ДанныеJson.birthPlace = ФизическоеЛицо.ПерсональныеДанные.МестоРождения
    ДанныеJson.taxID = ФизическоеЛицо.ПерсональныеДанные.ИНН
    ДанныеJson.insuranceNumber = ФизическоеЛицо.ПерсональныеДанные.СНИЛС
    ДанныеJson.registrationAddress = ФизическоеЛицо.ПерсональныеДанные.АдресРегистрации
    ДанныеJson.residentialAddress = ФизическоеЛицо.ПерсональныеДанные.АдресМестаПроживания
    ДанныеJson.phoneNumber = ФизическоеЛицо.РабочаяКонтактнаяИнформация.Телефон
    ДанныеJson.mobilePhoneNumber = ФизическоеЛицо.РабочаяКонтактнаяИнформация.МобильныйТелефон
    ДанныеJson.eMail = ФизическоеЛицо.РабочаяКонтактнаяИнформация.ЭлектроннаяПочта
    ДанныеJson.skype = ФизическоеЛицо.ЛичнаяКонтактнаяИнформация.Скайп
    ДанныеJson.identityDocument = ДокументУдостоверяющийЛичностьВJson(ФизическоеЛицо.УдостоверениеЛичности)
    
    если ФизическоеЛицо.ЛичныеДанные.Фотография != Неопределено
        ДанныеJson.picture = Файлы.ДанныеФайлаJson(ФизическоеЛицо.ЛичныеДанные.Фотография!, Сервисы)
    ;
    ДанныеJson.presentationForms = СклоненияФИОВJson(Ссылка)
    
    возврат ДанныеJson  
;

@ВПроекте
метод ДокументУдостоверяющийЛичностьВJson(ДокументЛичности: ФизЛица.УдостоверениеЛичности): ФизЛица.УдостоверениеЛичностиJson?
    знч ДокументJson = новый ФизЛица.УдостоверениеЛичностиJson(ВидУдостоверенияЛичностиВJson(ДокументЛичности.Вид))
    ДокументJson.number = ДокументЛичности.Номер
    ДокументJson.serias = ДокументЛичности.Серия
    ДокументJson.issueDate = ДокументЛичности.ДатаВыдачи?.НачалоДня()
    ДокументJson.issuingAuthority = ДокументЛичности.ВыдавшийОрган
    ДокументJson.issuingAuthorityID = ДокументЛичности.КодВыдавшегоОргана

    возврат ДокументJson
;

метод СклоненияФИОВJson(Ссылка: ФизическиеЛица.Ссылка): СклоненияПредставленийОбъектов.СклоненияПредставленияОбъектаJson?
    возврат СклоненияПредставленийОбъектов.СклоненияПредставленияОбъектаВJson(Ссылка)
;

метод СклоненияФИОИзJson(СклоненияФИОJson: СклоненияПредставленийОбъектов.СклоненияПредставленияОбъектаJson):
    УниверсальныеМеханизмы.СклоненияПредставленияОбъекта
        
    возврат СклоненияПредставленийОбъектов.СклоненияПредставленияОбъектаИзJson(СклоненияФИОJson)
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<ДанныеJson>
    иначе если ВерсияФорматаОбмена >= Версия{3.0}
        возврат Тип<ФизическоеЛицо_3_0>
    иначе если ВерсияФорматаОбмена >= Версия{2.4}
        возврат Тип<ФизическоеЛицо_V2_3>
    иначе если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<ФизическоеЛицо_V2_0>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<ФизическоеЛицо_V1_0>
    ;
;

@ВПроекте
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Массив<ДанныеJson>>
    иначе если ВерсияФорматаОбмена >= Версия{3.0}
        возврат Тип<Массив<ФизическоеЛицо_3_0>>
    иначе если ВерсияФорматаОбмена >= Версия{2.4}
        возврат Тип<Массив<ФизическоеЛицо_V2_3>>
    иначе если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<Массив<ФизическоеЛицо_V2_0>>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Массив<ФизическоеЛицо_V1_0>>
    ;
;

@ВПроекте // видимость @ВПроекте установлена для поддержки формата из версии v0
структура ДанныеJson
    обз знч ID: Строка
    обз знч lastName: Строка
    обз знч gender: ПолJson
    пер firstName: Строка?
    пер patronymic: Строка?
    пер initials: Строка?
    пер birthDate: ДатаВремя?
    пер taxID: Строка?
    пер insuranceNumber: Строка?
    пер identityDocument: ФизЛица.УдостоверениеЛичностиJson?
    пер birthPlace: Строка?
    пер preferredCommunicationType: СпособСвязиJson?
    пер phoneNumber: Строка?
    пер mobilePhoneNumber: Строка?
    пер eMail: Строка?
    пер workContactsAccess: ДоступностьКонтактнойИнформацииJson?
    пер skype: Строка?
    пер registrationAddress: Строка?
    пер residentialAddress: Строка?
    пер picture: МенеджерФайлов.ДанныеФайлаJson?
    пер presentationForms: СклоненияПредставленийОбъектов.СклоненияПредставленияОбъектаJson?
;

@ВПроекте // видимость @ВПроекте установлена для поддержки формата из версии v0
структура ФизическоеЛицо_V1_0
    обз знч ID: Строка
    обз знч lastName: Строка
    обз знч gender: ПолJson
    пер firstName: Строка?
    пер patronymic: Строка?
    пер initials: Строка?
    пер birthDate: ДатаВремя?
    пер taxID: Строка?
    пер insuranceNumber: Строка?
    пер identityDocument: ФизЛица.УдостоверениеЛичностиJson?
    пер birthPlace: Строка?
    пер phoneNumber: Строка?
    пер mobilePhoneNumber: Строка?
    пер eMail: Строка?
    пер workContactsAccess: ДоступностьКонтактнойИнформацииJson? //"Заглушка" для обратной совместимости
    пер skype: Строка?
    пер registrationAddress: Строка?
    пер residentialAddress: Строка?
    пер picture: МенеджерФайлов.ДанныеФайлаJson?
    пер presentationForms: СклоненияПредставленийОбъектов.СклоненияПредставленияОбъектаJson?
;

@ВПроекте // видимость @ВПроекте установлена для поддержки формата из версии v0
структура ФизическоеЛицо_V1_1
    обз знч ID: Строка
    обз знч lastName: Строка
    обз знч gender: ПолJson
    пер firstName: Строка?
    пер patronymic: Строка?
    пер initials: Строка?
    пер birthDate: ДатаВремя?
    пер taxID: Строка?
    пер insuranceNumber: Строка?
    пер identityDocument: ФизЛица.УдостоверениеЛичностиJson?
    пер birthPlace: Строка?
    пер phoneNumber: Строка?
    пер mobilePhoneNumber: Строка?
    пер eMail: Строка?
    пер skype: Строка?
    пер registrationAddress: Строка?
    пер residentialAddress: Строка?
    пер picture: МенеджерФайлов.ДанныеФайлаJson?
    пер presentationForms: СклоненияПредставленийОбъектов.СклоненияПредставленияОбъектаJson?
;

@ВПроекте // видимость @ВПроекте установлена для поддержки формата из версии v0
структура ФизическоеЛицо_V2_0
    обз знч ID: Строка
    обз знч lastName: Строка
    обз знч gender: ПолJson
    пер firstName: Строка?
    пер patronymic: Строка?
    пер initials: Строка?
    пер birthDate: ДатаВремя?
    пер taxID: Строка?
    пер insuranceNumber: Строка?
    пер identityDocument: ФизЛица.УдостоверениеЛичностиJson?
    пер birthPlace: Строка?
    пер phoneNumber: Строка?
    пер mobilePhoneNumber: Строка?
    пер eMail: Строка?
    пер skype: Строка?
    пер registrationAddress: Строка?
    пер residentialAddress: Строка?
    пер picture: МенеджерФайлов.ДанныеФайлаJson?
    пер presentationForms: СклоненияПредставленийОбъектов.СклоненияПредставленияОбъектаJson?
    пер version: Число?
;

@ВПроекте // видимость @ВПроекте установлена для поддержки формата из версии v0
структура ФизическоеЛицо_V2_3
    обз знч ID: Строка
    обз знч lastName: Строка
    обз знч gender: ПолJson
    пер firstName: Строка?
    пер patronymic: Строка?
    пер initials: Строка?
    пер birthDate: ДатаВремя?
    пер taxID: Строка?
    пер insuranceNumber: Строка?
    пер identityDocument: ФизЛица.УдостоверениеЛичностиJson?
    пер birthPlace: Строка?
    пер phoneNumber: Строка?
    пер mobilePhoneNumber: Строка?
    пер eMail: Строка?
    пер skype: Строка?
    пер registrationAddress: Строка?
    пер residentialAddress: Строка?
    пер picture: МенеджерФайлов.ДанныеФайлаJson?
    пер presentationForms: СклоненияПредставленийОбъектов.СклоненияПредставленияОбъектаJson?
    пер version: Число?
    пер serviceShutdownDate: Дата?
;

@ВПроекте // видимость @ВПроекте установлена для поддержки формата из версии v0
структура ФизическоеЛицо_3_0
    обз знч ID: Строка
    обз знч lastName: Строка
    обз знч gender: ПолJson
    пер firstName: Строка?
    пер patronymic: Строка?
    пер initials: Строка?
    пер birthDate: ДатаВремя?
    пер taxID: Строка?
    пер insuranceNumber: Строка?
    пер identityDocument: ФизЛица.УдостоверениеЛичностиJson?
    пер birthPlace: Строка?
    пер phoneNumber: Строка?
    пер mobilePhoneNumber: Строка?
    пер eMail: Строка?
    пер skype: Строка?
    пер registrationAddress: Строка?
    пер residentialAddress: Строка?
    пер picture: МенеджерФайлов.ДанныеФайлаJson?
    пер presentationForms: СклоненияПредставленийОбъектов.СклоненияПредставленияОбъектаJson?
    пер version: Число?
    пер serviceShutdownDate: Дата?
    пер citizenship: Строка?
;

@ВПроекте
перечисление ПолJson
    male,
    female
;

@ВПроекте
метод ПолФизическогоЛицаИзJson(ПолJson: ПолJson): ПолФизическогоЛица
    пер Пол: ПолФизическогоЛица
    выбор ПолJson
    когда male
        Пол = ПолФизическогоЛица.Мужской
    когда female
        Пол = ПолФизическогоЛица.Женский
    ;
    возврат Пол 
;

@ВПроекте
метод ПолФизическогоЛицаВJson(Пол: ПолФизическогоЛица): ПолJson?
    пер ПолФизлица: ПолJson?
    выбор Пол
    когда Мужской
        ПолФизлица = ПолJson.male
    когда Женский
        ПолФизлица = ПолJson.female
    ;
    возврат ПолФизлица
;

@ВПодсистеме
перечисление ДокументыУдостоверяющиеЛичностьJson
    passport,
    foreignPassport,
    residenceCard,
    residencePermission,
    identityCard,
    militaryIdentityCard,
    other
;

@ВПодсистеме
метод ВидУдостоверенияЛичностиВJson(ВидУдостоверения: ДокументыУдостоверяющиеЛичность): ДокументыУдостоверяющиеЛичностьJson?
    пер Вид: ДокументыУдостоверяющиеЛичностьJson?
    выбор ВидУдостоверения
    когда Паспорт
        Вид = ДокументыУдостоверяющиеЛичностьJson.passport
    когда ИностранныйПаспорт
        Вид = ДокументыУдостоверяющиеЛичностьJson.foreignPassport
    когда ВидНаЖительство
        Вид = ДокументыУдостоверяющиеЛичностьJson.residenceCard
    когда УдостоверениеЛичности
        Вид = ДокументыУдостоверяющиеЛичностьJson.identityCard
    когда РазрешениеНаПроживание
        Вид = ДокументыУдостоверяющиеЛичностьJson.residencePermission
    когда УдостоверениеЛичностиВоеннослужащего
        Вид = ДокументыУдостоверяющиеЛичностьJson.militaryIdentityCard
    когда ИнойДокумент
        Вид = ДокументыУдостоверяющиеЛичностьJson.other
    ;
    возврат Вид
;


метод ВидУдостоверенияЛичностиИзJson(ВидУдостоверения: ДокументыУдостоверяющиеЛичностьJson): ДокументыУдостоверяющиеЛичность?
    пер Вид: ДокументыУдостоверяющиеЛичность?
    выбор ВидУдостоверения
    когда passport
        Вид = ДокументыУдостоверяющиеЛичность.Паспорт
    когда foreignPassport
        Вид = ДокументыУдостоверяющиеЛичность.ИностранныйПаспорт
    когда residenceCard
        Вид = ДокументыУдостоверяющиеЛичность.ВидНаЖительство
    когда identityCard
        Вид = ДокументыУдостоверяющиеЛичность.УдостоверениеЛичности
    когда residencePermission
        Вид = ДокументыУдостоверяющиеЛичность.РазрешениеНаПроживание
    когда militaryIdentityCard
        Вид = ДокументыУдостоверяющиеЛичность.УдостоверениеЛичностиВоеннослужащего
    когда other
        Вид = ДокументыУдостоверяющиеЛичность.ИнойДокумент
    ;
    возврат Вид
;

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> ФизическиеЛица.ПолучитьСсылку(Ууид))
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    
    возврат {"persons": ФизическиеЛицаВJson(Ссылки, Сервисы, ВерсияФорматаОбмена)}
;

метод ФизическиеЛицаВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ВерсияФорматаОбмена: Версия?): Массив<Объект?>
    
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеФизическихЛиц(Ссылки)
        если ВерсияФорматаОбмена >= Версия{2.4}
            Данные.Добавить(ДанныеФизическогоЛицаВJson_V2_3(КлючИЗначение.Значение, Сервисы))
        иначе если ВерсияФорматаОбмена >= Версия{2.0}
            Данные.Добавить(ДанныеФизическогоЛицаВJson_V2_0(КлючИЗначение.Значение, Сервисы))
        ;
    ;
    возврат Данные
;

метод ДанныеФизическихЛиц(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    
    знч ДанныеФизическихЛиц: Соответствие<ФизическиеЛица.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    если Ссылки.Размер() == 0
        возврат ДанныеФизическихЛиц
    ;
    
    знч ФизическиеЛицаСсылки: Массив<ФизическиеЛица.Ссылка>
    для Ссылка из Ссылки 
        ФизическиеЛицаСсылки.Добавить(Ссылка как ФизическиеЛица.Ссылка)       
    ;
    
    знч Запрос = Запрос{
        Выбрать
            ФизическиеЛица.Ссылка как Ссылка,
            ФизическиеЛица.Фамилия как Фамилия,
            ФизическиеЛица.Имя как Имя,
            ФизическиеЛица.Отчество как Отчество,
            ФизическиеЛица.ИнициалыИмени как ИнициалыИмени,
            ФизическиеЛица.Пол как Пол,
            ЛичныеДанные.ДатаРождения.ЗаменитьNull(Неопределено) как ДатаРождения,
            ЛичныеДанные.ИНН.ЗаменитьNull(Неопределено) как ИНН,
            ЛичныеДанные.СНИЛС.ЗаменитьNull(Неопределено) как СНИЛС,
            ЛичныеДанные.ВидУдостоверенияЛичности.ЗаменитьNull(Неопределено) как ВидУдостоверенияЛичности,
            ЛичныеДанные.ДокументСерия.ЗаменитьNull(Неопределено) как ДокументСерия,
            ЛичныеДанные.ДокументНомер.ЗаменитьNull(Неопределено) как ДокументНомер,
            ЛичныеДанные.ДокументВыдавшийОрган.ЗаменитьNull(Неопределено) как ДокументВыдавшийОрган,
            ЛичныеДанные.ДокументКодВыдавшегоОргана.ЗаменитьNull(Неопределено) как ДокументКодВыдавшегоОргана,
            ЛичныеДанные.ДокументДатаВыдачи.ЗаменитьNull(Неопределено) как ДокументДатаВыдачи,
            ЛичныеДанные.МестоРождения.ЗаменитьNull(Неопределено) как МестоРождения,
            ЛичныеДанные.АдресРегистрации.ЗаменитьNull(Неопределено) как АдресРегистрации,
            ЛичныеДанные.АдресМестаПроживания.ЗаменитьNull(Неопределено) как АдресМестаПроживания,
            ЛичныеДанные.ДокументСтрана.ЗаменитьNull(Неопределено) как ДокументСтрана
        Из
            ФизическиеЛица как ФизическиеЛица
            Левое Соединение ЛичныеДанныеФизическихЛиц как ЛичныеДанные
                По ФизическиеЛица.Ссылка == ЛичныеДанные.Владелец
        Где
            ФизическиеЛица.Ссылка В (%ФизическиеЛицаСсылки)        
    }
    исп Результат = Запрос.Выполнить() 
    
    исп КонтекстДоступа.Привилегированный()
    знч КонтактыФизическихЛиц = ЛичныеКонтакты.ПолучитьКонтакты(ФизическиеЛицаСсылки)
    
    для СтрокаРезультата из Результат
        знч КонтактыФизическогоЛицаСсылка = КонтактыФизическихЛиц[СтрокаРезультата.Ссылка]
        
        знч ПоляФизическогоЛица: Соответствие<Строка, Объект?>
        ПоляФизическогоЛица.ВставитьВсе(МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(СтрокаРезультата, Результат))
        если КонтактыФизическогоЛицаСсылка != Неопределено
            знч КонтактыФизическогоЛица = КонтактыФизическогоЛицаСсылка.ЗагрузитьОбъект()
            знч МобильныйТелефон = КонтактыФизическогоЛица.МобильныйТелефон.ПервыйИлиУмолчание()?.Данные
            ПоляФизическогоЛица.Вставить("МобильныйТелефон", МобильныйТелефон)
            ПоляФизическогоЛица.Вставить("ДомашнийТелефон", КонтактыФизическогоЛица.ДомашнийТелефон)
            знч ЭлектроннаяПочта = КонтактыФизическогоЛица.ЭлектроннаяПочта.ПервыйИлиУмолчание()?.Данные
            ПоляФизическогоЛица.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочта)
            ПоляФизическогоЛица.Вставить("Скайп", КонтактыФизическогоЛица.Скайп)
        ;
        ДанныеФизическихЛиц.Вставить(СтрокаРезультата.Ссылка, ПоляФизическогоЛица)
    ;
    возврат ДанныеФизическихЛиц   
;

метод ДанныеФизическогоЛицаВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ФизическоеЛицо_V2_0
    
    знч ДанныеJson = новый ФизическоеЛицо_V2_0(
        (ДанныеОбъекта["Ссылка"] как ФизическиеЛица.Ссылка).Ид.ВСтроку(),
        ДанныеОбъекта["Фамилия"] как Строка,
        ПолФизическогоЛицаВJson(ДанныеОбъекта["Пол"] как ПолФизическогоЛица)    
    )
    ДанныеJson.firstName = ДанныеОбъекта["Имя"] как Строка
    ДанныеJson.patronymic = ДанныеОбъекта["Отчество"] как Строка
    ДанныеJson.initials = ДанныеОбъекта["ИнициалыИмени"] как Строка
    если ДанныеОбъекта["ДатаРождения"] != Неопределено 
        ДанныеJson.birthDate = новый ДатаВремя(ДанныеОбъекта["ДатаРождения"] как Дата, Время{})
    ;
    ДанныеJson.taxID = ДанныеОбъекта["ИНН"] как Строка?
    ДанныеJson.insuranceNumber = ДанныеОбъекта["СНИЛС"] как Строка?
    если ДанныеОбъекта["ВидУдостоверенияЛичности"] != Неопределено
        знч УдостоверениеЛичностиJson = новый ФизЛица.УдостоверениеЛичностиJson(
            ВидУдостоверенияЛичностиВJson(
                ДанныеОбъекта["ВидУдостоверенияЛичности"] как ДокументыУдостоверяющиеЛичность
            )    
        )    
        УдостоверениеЛичностиJson.number = ДанныеОбъекта["ДокументНомер"] как Строка?
        УдостоверениеЛичностиJson.serias = ДанныеОбъекта["ДокументСерия"] как Строка?
        если ДанныеОбъекта["ДокументДатаВыдачи"] != Неопределено
            УдостоверениеЛичностиJson.issueDate = новый ДатаВремя(ДанныеОбъекта["ДокументДатаВыдачи"] как Дата, Время{})
        ;
        УдостоверениеЛичностиJson.issuingAuthority = ДанныеОбъекта["ДокументВыдавшийОрган"] как Строка?
        УдостоверениеЛичностиJson.issuingAuthorityID = ДанныеОбъекта["ДокументКодВыдавшегоОргана"] как Строка?
        ДанныеJson.identityDocument = УдостоверениеЛичностиJson
    ;
    ДанныеJson.birthPlace = ДанныеОбъекта["МестоРождения"] как Строка?
    ДанныеJson.phoneNumber = ДанныеОбъекта.ПолучитьИлиУмолчание("ДомашнийТелефон") как Строка?
    ДанныеJson.mobilePhoneNumber = ДанныеОбъекта.ПолучитьИлиУмолчание("МобильныйТелефон") как Строка?
    ДанныеJson.eMail = ДанныеОбъекта.ПолучитьИлиУмолчание("ЭлектроннаяПочта") как Строка?
    ДанныеJson.skype = ДанныеОбъекта.ПолучитьИлиУмолчание("Скайп") как Строка?
    ДанныеJson.registrationAddress = ДанныеОбъекта["АдресРегистрации"] как Строка?
    ДанныеJson.residentialAddress = ДанныеОбъекта["АдресМестаПроживания"] как Строка?
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеJson.version = Сервисы.ПолучитьВерсию(ДанныеОбъекта["Ссылка"] как ФизическиеЛица.Ссылка)
    ;
    
    возврат ДанныеJson         
;

метод ДанныеФизическогоЛицаВJson_V2_3(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ФизическоеЛицо_V2_3
    
    знч ДанныеJson = новый ФизическоеЛицо_V2_3(
        (ДанныеОбъекта["Ссылка"] как ФизическиеЛица.Ссылка).Ид.ВСтроку(),
        ДанныеОбъекта["Фамилия"] как Строка,
        ПолФизическогоЛицаВJson(ДанныеОбъекта["Пол"] как ПолФизическогоЛица)    
    )
    ДанныеJson.firstName = ДанныеОбъекта["Имя"] как Строка
    ДанныеJson.patronymic = ДанныеОбъекта["Отчество"] как Строка
    ДанныеJson.initials = ДанныеОбъекта["ИнициалыИмени"] как Строка
    если ДанныеОбъекта["ДатаРождения"] != Неопределено 
        ДанныеJson.birthDate = новый ДатаВремя(ДанныеОбъекта["ДатаРождения"] как Дата, Время{})
    ;
    ДанныеJson.taxID = ДанныеОбъекта["ИНН"] как Строка?
    ДанныеJson.insuranceNumber = ДанныеОбъекта["СНИЛС"] как Строка?
    если ДанныеОбъекта["ВидУдостоверенияЛичности"] != Неопределено
        знч УдостоверениеЛичностиJson = новый ФизЛица.УдостоверениеЛичностиJson(
            ВидУдостоверенияЛичностиВJson(
                ДанныеОбъекта["ВидУдостоверенияЛичности"] как ДокументыУдостоверяющиеЛичность
            )    
        )    
        УдостоверениеЛичностиJson.number = ДанныеОбъекта["ДокументНомер"] как Строка?
        УдостоверениеЛичностиJson.serias = ДанныеОбъекта["ДокументСерия"] как Строка?
        если ДанныеОбъекта["ДокументДатаВыдачи"] != Неопределено
            УдостоверениеЛичностиJson.issueDate = новый ДатаВремя(ДанныеОбъекта["ДокументДатаВыдачи"] как Дата, Время{})
        ;
        УдостоверениеЛичностиJson.issuingAuthority = ДанныеОбъекта["ДокументВыдавшийОрган"] как Строка?
        УдостоверениеЛичностиJson.issuingAuthorityID = ДанныеОбъекта["ДокументКодВыдавшегоОргана"] как Строка?
        ДанныеJson.identityDocument = УдостоверениеЛичностиJson
    ;
    ДанныеJson.birthPlace = ДанныеОбъекта["МестоРождения"] как Строка?
    ДанныеJson.phoneNumber = ДанныеОбъекта.ПолучитьИлиУмолчание("ДомашнийТелефон") как Строка?
    ДанныеJson.mobilePhoneNumber = ДанныеОбъекта.ПолучитьИлиУмолчание("МобильныйТелефон") как Строка?
    ДанныеJson.eMail = ДанныеОбъекта.ПолучитьИлиУмолчание("ЭлектроннаяПочта") как Строка?
    ДанныеJson.skype = ДанныеОбъекта.ПолучитьИлиУмолчание("Скайп") как Строка?
    ДанныеJson.registrationAddress = ДанныеОбъекта["АдресРегистрации"] как Строка?
    ДанныеJson.residentialAddress = ДанныеОбъекта["АдресМестаПроживания"] как Строка?
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеJson.version = Сервисы.ПолучитьВерсию(ДанныеОбъекта["Ссылка"] как ФизическиеЛица.Ссылка)
    ;
    
    возврат ДанныеJson         
;

метод ДанныеФизическогоЛицаВJson_3_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ФизическоеЛицо_3_0
    
    знч ДанныеJson = новый ФизическоеЛицо_3_0(
        (ДанныеОбъекта["Ссылка"] как ФизическиеЛица.Ссылка).Ид.ВСтроку(),
        ДанныеОбъекта["Фамилия"] как Строка,
        ПолФизическогоЛицаВJson(ДанныеОбъекта["Пол"] как ПолФизическогоЛица)    
    )
    ДанныеJson.firstName = ДанныеОбъекта["Имя"] как Строка
    ДанныеJson.patronymic = ДанныеОбъекта["Отчество"] как Строка
    ДанныеJson.initials = ДанныеОбъекта["ИнициалыИмени"] как Строка
    если ДанныеОбъекта["ДатаРождения"] != Неопределено 
        ДанныеJson.birthDate = новый ДатаВремя(ДанныеОбъекта["ДатаРождения"] как Дата, Время{})
    ;
    ДанныеJson.taxID = ДанныеОбъекта["ИНН"] как Строка?
    ДанныеJson.insuranceNumber = ДанныеОбъекта["СНИЛС"] как Строка?
    если ДанныеОбъекта["ВидУдостоверенияЛичности"] != Неопределено
        знч УдостоверениеЛичностиJson = новый ФизЛица.УдостоверениеЛичностиJson(
            ВидУдостоверенияЛичностиВJson(
                ДанныеОбъекта["ВидУдостоверенияЛичности"] как ДокументыУдостоверяющиеЛичность
            )    
        )    
        УдостоверениеЛичностиJson.number = ДанныеОбъекта["ДокументНомер"] как Строка?
        УдостоверениеЛичностиJson.serias = ДанныеОбъекта["ДокументСерия"] как Строка?
        если ДанныеОбъекта["ДокументДатаВыдачи"] != Неопределено
            УдостоверениеЛичностиJson.issueDate = новый ДатаВремя(ДанныеОбъекта["ДокументДатаВыдачи"] как Дата, Время{})
        ;
        УдостоверениеЛичностиJson.issuingAuthority = ДанныеОбъекта["ДокументВыдавшийОрган"] как Строка?
        УдостоверениеЛичностиJson.issuingAuthorityID = ДанныеОбъекта["ДокументКодВыдавшегоОргана"] как Строка?
        ДанныеJson.identityDocument = УдостоверениеЛичностиJson
    ;
    ДанныеJson.birthPlace = ДанныеОбъекта["МестоРождения"] как Строка?
    ДанныеJson.phoneNumber = ДанныеОбъекта.ПолучитьИлиУмолчание("ДомашнийТелефон") как Строка?
    ДанныеJson.mobilePhoneNumber = ДанныеОбъекта.ПолучитьИлиУмолчание("МобильныйТелефон") как Строка?
    ДанныеJson.eMail = ДанныеОбъекта.ПолучитьИлиУмолчание("ЭлектроннаяПочта") как Строка?
    ДанныеJson.skype = ДанныеОбъекта.ПолучитьИлиУмолчание("Скайп") как Строка?
    ДанныеJson.registrationAddress = ДанныеОбъекта["АдресРегистрации"] как Строка?
    ДанныеJson.residentialAddress = ДанныеОбъекта["АдресМестаПроживания"] как Строка?
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеJson.version = Сервисы.ПолучитьВерсию(ДанныеОбъекта["Ссылка"] как ФизическиеЛица.Ссылка)
    ;
    ДанныеJson.citizenship = СтраныМира.СвойстваЭлемента(ДанныеОбъекта["ДокументСтрана"] как СтраныМира.Ссылка).Код
    
    возврат ДанныеJson         
;

//КонецОбласти

@ВПроекте // видимость @ВПроекте установлена для поддержки формата из версии v0
метод Заполнить(ФизическоеЛицо: ФизическиеЛица.Объект, ДанныеФизлица: ФизЛица.ДанныеФизлица)
    
    ФизическоеЛицо.Фамилия = ДанныеФизлица.ЛичныеДанные.ФИО.Фамилия
    ФизическоеЛицо.Имя = ДанныеФизлица.ЛичныеДанные.ФИО.Имя
    ФизическоеЛицо.Отчество = ДанныеФизлица.ЛичныеДанные.ФИО.Отчество
    ФизическоеЛицо.ИнициалыИмени = ДанныеФизлица.ЛичныеДанные.ФИО.ИнициалыИмени

    ФизическоеЛицо.Пол = ДанныеФизлица.ЛичныеДанные.Пол
    ФизическоеЛицо.Фотография = ДанныеФизлица.ЛичныеДанные.Фотография
    ФизическоеЛицо.Миниатюра = ДанныеФизлица.ЛичныеДанные.Миниатюра
;

метод ПодчиненныйОбъект(
        ФизическоеЛицоСсылка: ФизическиеЛица.Ссылка,
        ПодчиненныйОбъектСсылка: ЛичныеДанныеФизическихЛиц.Ссылка|РабочиеКонтактыФизическихЛиц.Ссылка|Неопределено,
        КонструкторОбъекта: (Ууид)->Объект): ЛичныеДанныеФизическихЛиц.Объект|РабочиеКонтактыФизическихЛиц.Объект
    
    пер ПодчиненнаяСсылка: неизвестно = ПодчиненныйОбъектСсылка
    пер ПодчиненныйОбъект: неизвестно
        
    если ПодчиненнаяСсылка == Неопределено
        ПодчиненныйОбъект = КонструкторОбъекта(новый Ууид())
        ПодчиненныйОбъект.Владелец = ФизическоеЛицоСсылка
    иначе
        ПодчиненныйОбъект = ПодчиненнаяСсылка.ЗагрузитьОбъект()
        если ПодчиненныйОбъект == Неопределено
            ПодчиненныйОбъект = КонструкторОбъекта(ПодчиненнаяСсылка.Ууид)
            ПодчиненныйОбъект.Владелец = ФизическоеЛицоСсылка
        ;
    ;
    возврат ПодчиненныйОбъект как ЛичныеДанныеФизическихЛиц.Объект|РабочиеКонтактыФизическихЛиц.Объект
;

@ВПодсистеме
метод МиниатюраФотографии(Фотография: Файлы.Ссылка): Файлы.Ссылка?
    пер ФотографияОбъект = Фотография.ЗагрузитьОбъект(Истина)
    если ФотографияОбъект == Неопределено
        возврат Неопределено
    ;
    знч МиниатюраОбъект = ФайлМиниатюры(ФотографияОбъект)
    если Фотография != МиниатюраОбъект.Ссылка
        Файлы.ЗаписатьФайлыПоВладельцу([МиниатюраОбъект], ФотографияОбъект.Владелец, Ложь)
    ;
    возврат МиниатюраОбъект.Ссылка
;

@ВПодсистеме
метод МиниатюраПоУмолчанию(ФизическоеЛицо: ФизическиеЛица.Ссылка, Фамилия: Строка, Имя: Строка): Файлы.Ссылка
    пер ФайлМиниатюры = ФайлМиниатюрыПоУмолчанию(Фамилия, Имя)
    Файлы.ЗаписатьФайлыПоВладельцу([ФайлМиниатюры], ФизическоеЛицо, Ложь)
    возврат ФайлМиниатюры.Ссылка
;

метод ФайлМиниатюрыПоУмолчанию(Фамилия: Строка, Имя: Строка): Файлы.Объект
    знч Инициалы = МенеджерСтрок.ПодстрокаСНачала(Имя, 1) + МенеджерСтрок.ПодстрокаСНачала(Фамилия, 1)
    знч ЦветФона = СлучайныйЦветФонаМиниатюры()
    знч ТелоФайла =
        "<svg viewBox=\"0 0 40 40\" width=\"40\" height=\"40\" xmlns=\"http://www.w3.org/2000/svg\">
        <style>.font {font:bold 24px Lucida Console;fill:#f0f0f0;}</style>
        <ellipse cx=\"20\" cy=\"20\" rx=\"20\" ry=\"20\" fill=\"%ЦветФона\"/>
        <text x=\"5\" y=\"27.5\" class=\"font\">%Инициалы</text>
        </svg>"
    знч ДанныеФайла = ОбъектноеХранилище.ЗагрузитьИзСтроки(ТелоФайла, "image/svg+xml")
    возврат ФайлМиниатюры(ДанныеФайла, "Миниатюра по умолчанию - %Фамилия %Имя", "svg")
;

метод СлучайныйЦветФонаМиниатюры(): Строка
    знч ЦветаФона = ["Olive", "DarkGoldenRod", "GoldenRod", "DarkOliveGreen",
        "IndianRed", "Indigo", "MediumPurple", "OliveDrab", "SlateGray", "Coral"]
    пер Генератор = новый СлучайныйГенератор()
    возврат ЦветаФона[Генератор.СлучайноеЦелое(0, ЦветаФона.Граница())]
;

метод ФайлМиниатюры(ФотографияОбъект: Файлы.Объект): Файлы.Объект
    попытка
        пер ОбработкаИзображения = новый МенеджерФайлов.ОбработкаИзображения(Истина, 128, 128)
        ОбработкаИзображения.ВырезатьКруг = Истина
        пер ДанныеМиниатюры: ДвоичныйОбъект = МенеджерФайлов.ОбработатьИзображение(
            ФотографияОбъект.Хранилище.Загрузить(), ОбработкаИзображения)
        возврат ФайлМиниатюры(ДанныеМиниатюры, "Миниатюра - " + ФотографияОбъект.Наименование, ФотографияОбъект.Расширение)
        
    поймать Ошибка: Исключение
        Журналирование.ЗарегистрироватьОшибку("ОшибкаПолученияМиниатюры", Причина = Ошибка,
            Описание = "Ошибка при получении миниатрюры (%{ФотографияОбъект.Наименование}, %{ФотографияОбъект.Ссылка.Ид})")
    ;
    возврат ФотографияОбъект
;

метод ФайлМиниатюры(ДанныеМиниатюры: ДвоичныйОбъект, Наименование: Строка, Расширение: Строка): Файлы.Объект
    пер МиниатюраОбъект: Файлы.Объект?
    МиниатюраОбъект = Файлы.НовыйФайл(ДанныеМиниатюры, ДанныеМиниатюры.Размер.ВБайтах())
    МиниатюраОбъект.Наименование = Наименование
    МиниатюраОбъект.Расширение = Расширение
    возврат МиниатюраОбъект
;

@ВПодсистеме
метод УдалитьфайлМиниатюры(Миниатюра: Файлы.Ссылка?)
    если Миниатюра != Неопределено
        Файлы.УдалитьФайл(Миниатюра)
    ;
;

@ВПроекте
метод ЗаполнитьДанныеФизическихЛиц(
        ЗапрашиваемыеДанные: ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц, 
        ДанныеФизическихЛиц: Соответствие<ФизическиеЛица.Ссылка, ФизЛица.ДанныеФизлица>)
    если ЗапрашиваемыеДанные.ЛичныеДанные 
        знч Физлица: ЧитаемоеМножество<ФизическиеЛица.Ссылка> = ДанныеФизическихЛиц.Ключи()
        знч Запрос = Запрос{
            Выбрать
                Фамилия,Имя,Отчество,ИнициалыИмени,Пол,Фотография,Миниатюра,Ссылка
            Из
                ФизическиеЛица
            Где
                Ссылка В (%Физлица)}
        исп Результат = Запрос.Выполнить()
        для СтрокаРезультата из Результат
            пер ДанныеФизическогоЛица: ФизЛица.ДанныеФизлица = ДанныеФизическихЛиц[СтрокаРезультата.Ссылка]
            ДанныеФизическогоЛица.ЛичныеДанные.ФИО.Фамилия = СтрокаРезультата.Фамилия
            ДанныеФизическогоЛица.ЛичныеДанные.ФИО.Имя = СтрокаРезультата.Имя
            ДанныеФизическогоЛица.ЛичныеДанные.ФИО.Отчество = СтрокаРезультата.Отчество
            ДанныеФизическогоЛица.ЛичныеДанные.ФИО.ИнициалыИмени = СтрокаРезультата.ИнициалыИмени
            ДанныеФизическогоЛица.ЛичныеДанные.Пол = СтрокаРезультата.Пол
            ДанныеФизическогоЛица.ЛичныеДанные.Фотография = СтрокаРезультата.Фотография
            ДанныеФизическогоЛица.ЛичныеДанные.Миниатюра = СтрокаРезультата.Миниатюра
        ;
    ;
;

@ВПроекте
метод ПараметрыАктивацииФизическогоЛица(ВерсияФорматаОбмена: Версия? = Неопределено): ВебApiСервер.ЗаданиеМодификации
    если ВерсияФорматаОбмена == Неопределено
        возврат новый ВебApiСервер.ЗаданиеМодификации(&АктивацияФизическогоЛица)
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат новый ВебApiСервер.ЗаданиеМодификации(&АктивацияФизическогоЛица)
    ;
;

@ВПроекте
метод ПараметрыДеактивацииФизическогоЛица(ВерсияФорматаОбмена: Версия? = Неопределено): ВебApiСервер.ЗаданиеМодификации
    если ВерсияФорматаОбмена == Неопределено
        возврат новый ВебApiСервер.ЗаданиеМодификации(&ДеактивацияФизическогоЛица, &ПриОкончанииДеактивацииФизическогоЛица)
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат новый ВебApiСервер.ЗаданиеМодификации(&ДеактивацияФизическогоЛица, &ПриОкончанииДеактивацииФизическогоЛица)
    ;
;

@ВПроекте
метод ПараметрыПолученияСсылокАктивныхФизическогоЛица(ВерсияФорматаОбмена: Версия? = Неопределено): () -> ЧитаемыйМассив<Справочник.Ссылка>
    если ВерсияФорматаОбмена == Неопределено
        возврат &СсылкиАктивныхФизическихЛиц
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат &СсылкиАктивныхФизическихЛиц
    ;
;

@ВПроекте
метод ПараметрыПолученияСсылокНеактивныхФизическогоЛица(ВерсияФорматаОбмена: Версия? = Неопределено): () -> ЧитаемыйМассив<Справочник.Ссылка>
    если ВерсияФорматаОбмена == Неопределено
        возврат &СсылкиНеактивныхФизическихЛиц
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат &СсылкиНеактивныхФизическихЛиц
    ;
;

@ВПроекте
метод СсылкиАктивныхФизическихЛиц(): ЧитаемыйМассив<ФизическиеЛица.Ссылка>
    возврат СсылкиФизическихЛиц(Истина)
;

@ВПроекте
метод СсылкиНеактивныхФизическихЛиц(): ЧитаемыйМассив<ФизическиеЛица.Ссылка>
    возврат СсылкиФизическихЛиц(Ложь)
;

@ВПроекте
метод СсылкиФизическихЛиц(Активность: Булево): ЧитаемыйМассив<ФизическиеЛица.Ссылка>
    пер МассивСсылок: Массив<ФизическиеЛица.Ссылка>
    знч Запрос = Запрос{
        Выбрать
            Ссылка Как Ссылка
        Из
            ФизическиеЛица
        Где
            Активен  == %Активность}
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        МассивСсылок.Добавить(РезультатСтрока.Ссылка)
    ;
    возврат МассивСсылок
;

метод АктивацияФизическогоЛица(ДанныеJson: Объект, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    ИзменениеФизическогоЛица(ДанныеJson, Истина, Сервисы)
;

метод ДеактивацияФизическогоЛица(ДанныеJson: Объект, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    ИзменениеФизическогоЛица(ДанныеJson, Ложь, Сервисы)
;

// для поддержки формата из версии v0
@ВПроекте
перечисление ДоступностьКонтактнойИнформацииJson
    grantEveryone,
    grantDivisionHeads,
    grantPeers
;

// для поддержки формата из версии v0
@ВПроекте
перечисление СпособСвязиJson
    phone,
    sms,
    eMail,
    skype
;

@ВПроекте
метод ЗаполнитьМиниатюрыПоУмолчанию()
    исп Транзакции.Начать()
    знч НачалоНаименованияМиниатюр = "Миниатюра по умолчанию - \%"
    знч Запрос = Запрос{
        Выбрать
            ФизическиеЛица.Ссылка Как Ссылка,
            ФизическиеЛица.Фамилия Как Фамилия,
            ФизическиеЛица.Имя Как Имя,
            ФизическиеЛица.Фотография Как Фотография
        Из
            ФизическиеЛица Как ФизическиеЛица
        Где
            ФизическиеЛица.Миниатюра.Наименование.ЗаменитьNull(Неопределено) == Неопределено
                или ФизическиеЛица.Фотография.ЗаменитьNull(Неопределено) != Неопределено
                    и ФизическиеЛица.Миниатюра.Наименование.ЗаменитьNull("") подобно %НачалоНаименованияМиниатюр}
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        пер ФизическоеЛицоОбъект = СтрокаРезультата.Ссылка.ЗагрузитьОбъект()
        если СтрокаРезультата.Фотография == Неопределено
            ФизическоеЛицоОбъект.Миниатюра = МиниатюраПоУмолчанию(
                СтрокаРезультата.Ссылка, СтрокаРезультата.Фамилия, СтрокаРезультата.Имя)
        иначе
            ФизическоеЛицоОбъект.Миниатюра = МиниатюраФотографии(СтрокаРезультата.Фотография)
        ;
        ФизическоеЛицоОбъект.Записать()
    ;
;

@ВПодсистеме
метод ЗапланироватьОтключениеОтСервиса()
    пер ДатаОчереднойПроверки: ДатаВремя?
    пер ОтключаемыеФизическиеЛица = новый Массив<ФизическиеЛица.Ссылка>()
    знч ТекущаяДата = МенеджерДат.НачалоДня(МенеджерДат.ТекущаяДатаВремя()).ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий())
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ДатаОтключения
        Из
            ФизическиеЛица
        Где
            Активен
            И ДатаОтключения != Неопределено}
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        если СтрокаРезультата.ДатаОтключения.НачалоДня().Сравнить(ТекущаяДата) > 0
            если ДатаОчереднойПроверки == Неопределено
                или СтрокаРезультата.ДатаОтключения.НачалоДня().Сравнить(ДатаОчереднойПроверки) < 0
                
                ДатаОчереднойПроверки = СтрокаРезультата.ДатаОтключения.НачалоДня()
            ;
        иначе
            ОтключаемыеФизическиеЛица.Добавить(СтрокаРезультата.Ссылка)
        ;
    ;
    если не ОтключаемыеФизическиеЛица.Пусто()
        исп Транзакция = Транзакции.Начать()
        для ОтключаемоеФизическоеЛицо из ОтключаемыеФизическиеЛица
            пер ФизическоеЛицоОбъект = ОтключаемоеФизическоеЛицо.ЗагрузитьОбъект(Истина)
            ФизическоеЛицоОбъект.Активен = Ложь
            ФизическоеЛицоОбъект.Записать()
        ;
        ПриДеактивацииФизическихЛиц(ОтключаемыеФизическиеЛица)
        Транзакция.Фиксировать()
    ;
    пер КлючЗадания = "ОтключениеДеактивированныхФизическихЛиц"
    МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
    если ДатаОчереднойПроверки != Неопределено
        пер Расписание = [Расписание.Однократно(
            ДатаОчереднойПроверки.ДобавитьЧасы(13).ВМомент(МенеджерДат.ЧасовойПоясТекущий()),
            ИсполнятьПропущенное = Истина)]
        пер ПовторыПриОшибке = СтратегияПовтораЗадания.Интервал(60, Длительность.ИзСекунд(60))
        если ЗапланированныеЗадания.ПолучитьПоКлючу(КлючЗадания) == Неопределено
            ЗапланированныеЗадания.Создать(&ЗапланироватьОтключениеОтСервиса)
                .Настроить(
                    Ключ = КлючЗадания,
                    Расписание = Расписание,
                    ПовторыПриОшибке = ПовторыПриОшибке
                )
                .Запланировать()
        иначе
            ЗапланированныеЗадания.Изменить(КлючЗадания)
                ?.Настроить(
                    Расписание = Расписание,
                    ПовторыПриОшибке = ПовторыПриОшибке
                )
                .Запланировать()
        ;
    иначе
        если ЗапланированныеЗадания.ПолучитьПоКлючу(КлючЗадания) != Неопределено
            ЗапланированныеЗадания.Отменить(КлючЗадания)
        ;
    ;
;