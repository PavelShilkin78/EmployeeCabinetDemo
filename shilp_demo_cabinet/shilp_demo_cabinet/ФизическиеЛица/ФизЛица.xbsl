импорт Классификаторы
импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт УниверсальныеМеханизмы
импорт ОбменДанными
импорт УниверсальныеМеханизмы::ШаблоныДокументов

@ВПроекте
@НаКлиенте
конст ТРЕБУЕТСЯ_ОБНОВЛЕНИЕ_ДАННЫХ_ФИЗИЧЕСКОГО_ЛИЦА = "ТребуетсяОбновлениеДанныхФизическогоЛица"

@ВПроекте
@НаКлиенте
конст ИД_РАЗДЕЛА_НАСТРОЙКИ: Строка = "Настройки"

@ВПроекте конст ИД_ПОДСИСТЕМЫ = "ФизическиеЛица"
@ВПодсистеме конст ИМЯ_ПОДСИСТЕМЫ = "Физические лица"

@ВПроекте
конст ТИП_DTO_ФИЗИЧЕСКИЕ_ЛИЦА = "ФизическиеЛица"

@ВПодсистеме
@НаСервере
метод ДобавитьТипDtoОбъекта()
    ДобавитьТипDtoОбъектаСтруктураФизическиеЛица()
;

@НаСервере
метод ДобавитьТипDtoОбъектаСтруктураФизическиеЛица()
    ТипыDtoОбъектов.ДобавитьТипDtoОбъекта(
        "Физические Лица",
        ТИП_DTO_ФИЗИЧЕСКИЕ_ЛИЦА
    )
;

@ВПроекте
структура ЗапрашиваемыеДанныеФизическихЛиц
    пер ЛичныеДанные: Булево
    пер ПерсональныеДанные: Булево
    пер УдостоверениеЛичности: Булево
    пер РабочаяКонтактнаяИнформация: Булево
    пер ЛичнаяКонтактнаяИнформация: Булево
;

@ВПроекте
структура ДанныеФизлица
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка?
    пер ЛичныеДанные: ФизЛица.ЛичныеДанные
    пер ПерсональныеДанные: ФизЛица.ПерсональныеДанные
    пер УдостоверениеЛичности: ФизЛица.УдостоверениеЛичности
    пер РабочаяКонтактнаяИнформация: ФизЛица.РабочаяКонтактнаяИнформацияФизлица
    пер ЛичнаяКонтактнаяИнформация: ФизЛица.ЛичнаяКонтактнаяИнформацияФизлица
    пер СклоненияФИО: УниверсальныеМеханизмы.СклоненияПредставленияОбъекта
;

@ВПроекте
структура ФИО
    пер Фамилия: Строка = ""
    пер Имя: Строка = ""
    пер Отчество: Строка = ""
    пер ИнициалыИмени: Строка = ""
    
    @ВПроекте
    метод ПредставлениеИмени(ВариантПредставления: ВариантПредставленияИмени = ВариантПредставленияИмени.ФамилияИмяОтчество): Строка
        пер ПредставлениеИмени: Строка
        Фамилия = Фамилия.Сократить()
        Имя = Имя.Сократить()
        Отчество = Отчество.Сократить()
        ИнициалыИмени = ИнициалыИмени.Сократить()
        если ИнициалыИмени.Пусто()
            ИнициалыИмени = МенеджерСтрок.ПодстрокаСНачала(Имя, 1)
        ;
        выбор ВариантПредставления
        когда ФамилияИмяОтчество
            ПредставлениеИмени = "%Фамилия %Имя %Отчество"          
        когда ИмяОтчествоФамилия
            ПредставлениеИмени = "%Имя %Отчество %Фамилия"          
        когда ФамилияИмя
            ПредставлениеИмени = "%Фамилия %Имя"
        когда ИмяФамилия
            ПредставлениеИмени = "%Имя %Фамилия"
        когда ИмяОтчество
            ПредставлениеИмени = "%Имя %Отчество"
        когда ФамилияИОРаздельно
            ПредставлениеИмени = "%Фамилия %ИнициалыИмени"
        когда ФамилияИОСлитно
            ПредставлениеИмени = "%Фамилия%{МенеджерСтрок.СтрокаТолькоИзБукв(ИнициалыИмени)}"
        когда Фамилия_И_О
            ПредставлениеИмени = "%{Фамилия}_%{МенеджерСтрок.ПодстрокаСНачала(Имя, 1)}_%{МенеджерСтрок.ПодстрокаСНачала(Отчество, 1)}"
        когда Фамилия_ИО
            ПредставлениеИмени = "%{Фамилия}_%{МенеджерСтрок.ПодстрокаСНачала(Имя, 1)}%{МенеджерСтрок.ПодстрокаСНачала(Отчество, 1)}"
        ;
        возврат ПредставлениеИмени.Сократить()
    ;
;

@ВПроекте
перечисление ВариантПредставленияИмени
    ФамилияИмяОтчество умолчание,
    ИмяОтчествоФамилия,
    ФамилияИмя,
    ИмяФамилия,
    ИмяОтчество,
    ФамилияИОРаздельно,
    ФамилияИОСлитно,
    Фамилия_И_О,
    Фамилия_ИО
;

@ВПроекте
перечисление ДиапазоныВозраста
    НеУказан умолчание,
    До18,
    С18по29,
    С30по39,
    С40по49,
    С50по59,
    Более60
;

@ВПроекте 
@НаСервере @ДоступноСКлиента
метод ПредставлениеИмени(Физлицо: ФизическиеЛица.Ссылка, ВариантПредставления: ВариантПредставленияИмени = ВариантПредставленияИмени.ФамилияИмяОтчество): Строка
    знч ЗапрашиваемыеДанные: ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц
    ЗапрашиваемыеДанные.ЛичныеДанные = Истина
    пер ДанныеФизическогоЛица = ФизЛица.ДанныеФизическогоЛица(Физлицо, ЗапрашиваемыеДанные)
    возврат ФизЛица.ДанныеФизическогоЛицаВФИО(ДанныеФизическогоЛица).ПредставлениеИмени(ВариантПредставления)
;

@ВПроекте
@НаКлиенте
метод ФИОПоПолям(Строка: СтрокаДинамическогоСписка, ПсевдонимПоля: Строка): ФИО
    возврат новый ФизЛица.ФИО(
        Строка.Данные["%{ПсевдонимПоля}Фамилия"] как Строка,
        Строка.Данные["%{ПсевдонимПоля}Имя"] как Строка,
        Строка.Данные["%{ПсевдонимПоля}Отчество"] как Строка,
        Строка.Данные["%{ПсевдонимПоля}ИнициалыИмени"] как Строка
    )
;

@ВПроекте
@НаКлиенте
метод ДобавитьПоляДляПредставленияИмени(Список: ДинамическийСписок, Выражение: Строка, Псевдоним: Строка)
    Список.Поля.Добавить(новый ПолеДинамическогоСписка(
        Выражение = "%Выражение.Фамилия",
        Псевдоним = "%{Псевдоним}Фамилия"
    ))    
    Список.Поля.Добавить(новый ПолеДинамическогоСписка(
        Выражение = "%Выражение.Имя",
        Псевдоним = "%{Псевдоним}Имя"
    ))    
    Список.Поля.Добавить(новый ПолеДинамическогоСписка(
        Выражение = "%Выражение.Отчество",
        Псевдоним = "%{Псевдоним}Отчество"
    ))    
    Список.Поля.Добавить(новый ПолеДинамическогоСписка(
        Выражение = "%Выражение.ИнициалыИмени",
        Псевдоним = "%{Псевдоним}ИнициалыИмени"
    ))    
;

@ВПроекте 
метод ДанныеФизическогоЛицаВФИО(ДанныеФизическогоЛица: ДанныеФизлица): ФизЛица.ФИО
    возврат новый ФизЛица.ФИО(
        ДанныеФизическогоЛица.ЛичныеДанные.ФИО.Фамилия, 
        ДанныеФизическогоЛица.ЛичныеДанные.ФИО.Имя, 
        ДанныеФизическогоЛица.ЛичныеДанные.ФИО.Отчество, 
        ДанныеФизическогоЛица.ЛичныеДанные.ФИО.ИнициалыИмени)
;

@ВПроекте
структура УдостоверениеЛичности
    пер Вид: ДокументыУдостоверяющиеЛичность
    пер Серия: Строка
    пер Номер: Строка
    пер ВыдавшийОрган: Строка
    пер КодВыдавшегоОргана: Строка
    пер ДатаВыдачи: Дата?
    пер Страна: СтраныМира.Ссылка?
;

@ВПроекте
структура ПерсональныеДанные
    пер ДатаРождения: Дата?
    пер ИНН: Строка
    пер СНИЛС: Строка
    пер МестоРождения: Строка
    пер АдресРегистрации: Строка
    пер АдресМестаПроживания: Строка
;

@ВПроекте
структура ЛичныеДанные
    пер ФИО: ФИО
    пер Пол: ПолФизическогоЛица?
    пер Фотография: Файлы.Ссылка?
    пер Миниатюра: Файлы.Ссылка?
;

@ВПроекте
структура РабочаяКонтактнаяИнформацияФизлица
    пер ЭлектроннаяПочта: Строка
    пер МобильныйТелефон: Строка
    пер Телефон: Строка
;

@ВПроекте
структура ЛичнаяКонтактнаяИнформацияФизлица
    пер МобильныйТелефон: Строка
    пер ДомашнийТелефон: Строка
    пер ЭлектроннаяПочта: Строка
    пер Скайп: Строка
;

@ВПроекте
@НаСервере
структура УдостоверениеЛичностиJson
    обз знч identityDocumentType: ФизическиеЛица.ДокументыУдостоверяющиеЛичностьJson
    пер number: Строка?
    пер serias: Строка?
    пер issueDate: ДатаВремя?
    пер issuingAuthority: Строка?
    пер issuingAuthorityID: Строка?
;

@ВПроекте
@НаСервере
метод ДанныеФизическихЛиц(СсылкиФизическихЛиц: ЧитаемоеМножество<ФизическиеЛица.Ссылка>, ЗапрашиваемыеДанные: ЗапрашиваемыеДанныеФизическихЛиц): ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, ДанныеФизлица>
    знч ДанныеФизлиц = новый Соответствие<ФизическиеЛица.Ссылка, ДанныеФизлица>()
    для ФизлицоСсылка из СсылкиФизическихЛиц
        ДанныеФизлиц.Вставить(ФизлицоСсылка, новый ДанныеФизлица(ФизлицоСсылка))
    ;
    ФизическиеЛица.ЗаполнитьДанныеФизическихЛиц(ЗапрашиваемыеДанные, ДанныеФизлиц)
    ЛичныеДанныеФизическихЛиц.ЗаполнитьДанныеФизическихЛиц(ЗапрашиваемыеДанные, ДанныеФизлиц)
    РабочиеКонтактыФизическихЛиц.ЗаполнитьДанныеФизическихЛиц(ЗапрашиваемыеДанные, ДанныеФизлиц)
    ЛичныеКонтакты.ЗаполнитьДанныеФизическихЛиц(ЗапрашиваемыеДанные, ДанныеФизлиц)

    возврат ДанныеФизлиц
;

@ВПроекте
@НаСервере
метод ДанныеФизическогоЛица(ФизическоеЛицо: ФизическиеЛица.Ссылка, ЗапрашиваемыеДанные: ЗапрашиваемыеДанныеФизическихЛиц): ДанныеФизлица
    возврат ДанныеФизическихЛиц({ФизическоеЛицо}, ЗапрашиваемыеДанные)[ФизическоеЛицо]
;

@ВПроекте
@НаСервере
метод Создать(Фио: ФИО, ДатаРождения: Дата?, Пол: ПолФизическогоЛица): ФизическиеЛица.Ссылка
    исп Транзакции.Начать()
    
    знч ФизическоеЛицо = новый ФизическиеЛица.Объект(
        Фамилия = Фио.Фамилия,
        Имя = Фио.Имя,
        Отчество = Фио.Отчество,
        ИнициалыИмени = Фио.ИнициалыИмени,
        Пол = Пол
    )
    ФизическоеЛицо.Записать()

    знч ЛичныеДанныеОбъект = новый ЛичныеДанныеФизическихЛиц.Объект(Владелец = ФизическоеЛицо.Ссылка, ДатаРождения = ДатаРождения)
    ЛичныеДанныеОбъект.Записать()

    возврат ФизическоеЛицо.Ссылка     
;

@ВПроекте
@НаСервере
метод НайтиПоОсновнымДанным(Фио: ФИО, ДатаРождения: Дата? = Неопределено, Пол: ПолФизическогоЛица? = Неопределено): Массив<ФизическиеЛица.Ссылка>
    знч Запрос = Запрос{
        ВЫБРАТЬ
            ФизическиеЛица.Ссылка КАК Ссылка 
        ИЗ
            ФизическиеЛица КАК ФизическиеЛица
            ЛЕВОЕ СОЕДИНЕНИЕ ЛичныеДанныеФизическихЛиц КАК ЛичныеДанныеФизическихЛиц
            ПО ФизическиеЛица.Ссылка == ЛичныеДанныеФизическихЛиц.Владелец
        ГДЕ
            ФизическиеЛица.Фамилия == %{Фио.Фамилия}
            И ФизическиеЛица.Имя == %{Фио.Имя}
            И ФизическиеЛица.Отчество == %{Фио.Отчество}
            И (%Пол != Неопределено И ФизическиеЛица.Пол == %Пол ИЛИ %Пол == Неопределено)
            И (%ДатаРождения != Неопределено И ЛичныеДанныеФизическихЛиц.ДатаРождения == %ДатаРождения ИЛИ %ДатаРождения == Неопределено)
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    возврат РезультатЗапроса.Преобразовать(С -> С.Ссылка)
;

@ВПроекте
метод ПолныхЛет(ДатаРождения: Дата, НаДату: Дата? = Неопределено): Число
    если НаДату == Неопределено
        НаДату = Дата.Сейчас()
    ;
    пер ПолныхЛет: Число = НаДату.Год - ДатаРождения.Год
    если ДатаРождения.Месяц > НаДату.Месяц или (ДатаРождения.Месяц == НаДату.Месяц и ДатаРождения.День > НаДату.День)
        ПолныхЛет = ПолныхЛет - 1
    ;
    возврат ПолныхЛет
;

@ВПроекте
метод ПолныхЛетСтрокой(ДатаРождения: Дата, НаДату: Дата? = Неопределено, ПредставлениеПустого : Строка = "не указан"): Строка
    если ДатаРождения == Дата{}
        возврат ПредставлениеПустого
    ;
    возврат "${ПолныхЛет(ДатаРождения, НаДату)}"
;

@ВПроекте
@НаКлиенте
метод НастройкиВводаВсе(Активны: Булево? = Истина): НастройкиВводаСсылок
    
    знч Настройка = новый НастройкиВводаСсылки(
        ПсевдонимОсновнойТаблицы = "ФизическиеЛица",
        Фильтр = новый ГруппаЭлементовФильтра(
            Элементы = [
                новый ЭлементФильтра(
                    Поле = "ФизическиеЛица.Активен",
                    ВидСравнения = ВидСравнения.Равно,
                    Значение = Активны ?? Истина,
                    Использовать = Активны != Неопределено)
            ]
        )
    )
    возврат новый НастройкиВводаСсылок({Тип<ФизическиеЛица.Ссылка>: Настройка})
;

@ВПроекте
@НаКлиенте
метод НастройкиВводаВсеКроме(ТекущееФизическоеЛицо: ФизическиеЛица.Ссылка, Активны: Булево? = Истина): НастройкиВводаСсылок 
    
    знч Настройки = НастройкиВводаВсе(Активны)
    знч Настройка = Настройки.НастройкиПоТипу[Тип<ФизическиеЛица.Ссылка>]
    Настройка.Фильтр.Элементы.Добавить(
        новый ЭлементФильтра(
            Поле = "ФизическиеЛица.Ссылка",
            ВидСравнения = ВидСравнения.НеРавно,
            Значение = ТекущееФизическоеЛицо,
            Использовать = Истина)
    )
    
    возврат Настройки
;

@ВПроекте
@НаКлиенте
метод НастройкиВводаОграниченныйСписок(Список: ЧитаемаяКоллекция<ФизическиеЛица.Ссылка>, Активны: Булево? = Истина): НастройкиВводаСсылок
    
    знч Настройки = НастройкиВводаВсе(Активны)
    знч Настройка = Настройки.НастройкиПоТипу[Тип<ФизическиеЛица.Ссылка>]
    Настройка.Фильтр.Элементы.Добавить(
        новый ЭлементФильтра(
            Поле = "ФизическиеЛица.Ссылка",
            ВидСравнения = ВидСравнения.ВСписке,
            Значение = Список,
            Использовать = Истина)
    )
    
    возврат Настройки  
;

@ВПроекте
метод ПолСокращенно(Пол: ПолФизическогоЛица): Строка
    пер ПолСокращенно: Строка
    выбор Пол
    когда Мужской
        ПолСокращенно = "М"
    когда Женский
        ПолСокращенно = "Ж"
    ;
    возврат ПолСокращенно
;

@ВПроекте
метод ВозрастнойДиапазон(Возраст: Число?): ДиапазоныВозраста
    если Возраст == Неопределено
        возврат ДиапазоныВозраста.НеУказан
    ;    
    пер ВозрастнойДиапазон = ДиапазоныВозраста.НеУказан
    выбор 
    когда Возраст > 0 и Возраст < 18
        ВозрастнойДиапазон = ДиапазоныВозраста.До18
    когда Возраст >= 18 и Возраст < 30
        ВозрастнойДиапазон = ДиапазоныВозраста.С18по29
    когда Возраст >= 30 и Возраст < 40
        ВозрастнойДиапазон = ДиапазоныВозраста.С30по39
    когда Возраст >= 40 и Возраст < 50
        ВозрастнойДиапазон = ДиапазоныВозраста.С40по49
    когда Возраст >= 50 и Возраст < 60
        ВозрастнойДиапазон = ДиапазоныВозраста.С50по59
    когда Возраст >= 60
        ВозрастнойДиапазон = ДиапазоныВозраста.Более60
    ;
    возврат ВозрастнойДиапазон
;

@ВПроекте
@НаСервере
метод ЗаполнитьПараметрыПолучателяВСообщении(ТекстыСообщений: Соответствие<Строка, Строка>, Получатель: ФизическиеЛица.Ссылка): Соответствие<Строка, Строка>
    
    пер ЗапрашиваемыеДанные: ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц
    ЗапрашиваемыеДанные.ЛичныеДанные = Истина
    пер ДанныеФизлица = ФизЛица.ДанныеФизическогоЛица(Получатель, ЗапрашиваемыеДанные)
    пер ДанныеФИО = ДанныеФизлица.ЛичныеДанные.ФИО
    пер ПолноеИмя = "%{ДанныеФИО.Фамилия} %{ДанныеФИО.Имя} %{ДанныеФИО.Отчество}"
    
    пер Тексты: Соответствие<Строка, Строка>
    для КлючИЗначение из ТекстыСообщений
        пер Текст = КлючИЗначение.Значение.Заменить("\%КМПолноеИмяПолучателя\%", ПолноеИмя)
        Текст = Текст.Заменить("\%КМФамилияПолучателя\%", "%{ДанныеФИО.Фамилия}")
        Текст = Текст.Заменить("\%КМИмяПолучателя\%", "%{ДанныеФИО.Имя}")
        Текст = Текст.Заменить("\%КМОтчествоПолучателя\%", "%{ДанныеФИО.Отчество}")
        Тексты.Вставить(КлючИЗначение.Ключ, Текст)
    ;
    
    возврат Тексты
    
;

@ВПроекте
@НаСервере
метод ЗаполнитьПолноеИмяФизическогоЛицаВСообщении(
    ТекстыСообщений: Соответствие<Строка, Строка>,
    ФизическоеЛицо: ФизическиеЛица.Ссылка?,
    ПараметрПолноеИмя: Строка,
    ВариантПредставления: ВариантПредставленияИмени = ВариантПредставленияИмени.ФамилияИмяОтчество): Соответствие<Строка, Строка>
    
    пер ПолноеИмя: Строка
    если ФизическоеЛицо != Неопределено
        пер ЗапрашиваемыеДанные: ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц
        ЗапрашиваемыеДанные.ЛичныеДанные = Истина
        пер ДанныеФизлица = ФизЛица.ДанныеФизическогоЛица(ФизическоеЛицо, ЗапрашиваемыеДанные)
        пер ДанныеФИО = ДанныеФизлица.ЛичныеДанные.ФИО
        ПолноеИмя = ДанныеФИО.ПредставлениеИмени(ВариантПредставления)
    ;
    
    пер Тексты: Соответствие<Строка, Строка>
    для КлючИЗначение из ТекстыСообщений
        пер Текст = КлючИЗначение.Значение.Заменить(ПараметрПолноеИмя, ПолноеИмя)
        Тексты.Вставить(КлючИЗначение.Ключ, Текст)
    ;
    
    возврат Тексты
    
;

@ВПроекте
метод ФИОПоЧастям(Фамилия: Строка, Имя: Строка, Отчество: Строка): ФИО
    возврат новый ФИО(
        Фамилия = Фамилия,
        Имя = Имя,
        Отчество = Отчество,
        ИнициалыИмени = ИнициалыИмени(Имя, Отчество)
    )    
;

@ВПроекте
метод ФИОПоПолномуИмени(ПолноеИмя: Строка): ФИО
    знч ЧастиИмени = ПолноеИмя.Разделить(" ", ВключаяПустые = Ложь)
    пер Фамилия: Строка
    пер Имя: Строка
    пер Отчество: Строка
    если ЧастиИмени.Размер() > 0
        Фамилия = ЧастиИмени[0]
    ;
    если ЧастиИмени.Размер() > 1
        Имя = ЧастиИмени[1]
    ;
    если ЧастиИмени.Размер() > 2
        Отчество = ЧастиИмени[2]
    ;
    возврат ФИОПоЧастям(Фамилия, Имя, Отчество)
;

@ВПроекте
метод ПредставлениеПолаИВозраста(Пол: ПолФизическогоЛица?, ДатаРождения: Дата): Строка
    пер ПолПредставление = ""
    если Пол != Неопределено
        ПолПредставление = Пол == ПолФизическогоЛица.Мужской ? "Мужчина" : "Женщина"
    ;
    знч Возраст = ФизЛица.ПолныхЛет(ДатаРождения)
    если ДатаРождения == Дата{}
        возврат ПолПредставление
    иначе если Возраст > 0
        знч Предмет = МенеджерСтрок.ФормаПредметаИсчисления(Возраст,
                Форма1 = "год",
                Форма2 = "года",
                Форма5 = "лет",
                Форма21 = "год")
        возврат "%ПолПредставление, %Возраст %Предмет"
    иначе
        возврат ПолПредставление
    ;
;

метод ИнициалыИмени(Имя: Строка, Отчество: Строка): Строка
    пер Инициалы: Строка
    если не Имя.Пусто()
        Инициалы += "${Имя.ПодстрокаСНачала(1)}."
    ;
    если не Отчество.Пусто()
        Инициалы += "${Отчество.ПодстрокаСНачала(1)}."
    ;
    возврат Инициалы    
;

@ВПроекте
@НаСервере
метод ФизическоеЛицоДанныхДокумента(ДанныеДокумента: ШаблоныДокументовМенеджер.ДанныеДляШаблонаПечатнойФормы, ФизлицоПоУмолчанию: ФизическиеЛица.Ссылка?): ФизическиеЛица.Ссылка?
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка?
    
    знч ДанныеОбъекта = ДанныеДокумента.ДанныеОбъекта.ПервыйИлиУмолчание()
    если ДанныеОбъекта != Неопределено
        пер ДанныеПервогоИдентификатора = ДанныеОбъекта.Значение.Данные
        
        если ДанныеПервогоИдентификатора.СодержитКлюч("ФизическоеЛицо")
            и ДанныеПервогоИдентификатора["ФизическоеЛицо"] это ФизическиеЛица.Ссылка
            
            ФизическоеЛицо = ДанныеПервогоИдентификатора["ФизическоеЛицо"] как ФизическиеЛица.Ссылка
        иначе если ДанныеПервогоИдентификатора.СодержитКлюч("ДанныеДокументаФизическоеЛицо")
            и ДанныеПервогоИдентификатора["ДанныеДокументаФизическоеЛицо"] это ФизическиеЛица.Ссылка
            
            ФизическоеЛицо = ДанныеПервогоИдентификатора["ДанныеДокументаФизическоеЛицо"] как ФизическиеЛица.Ссылка
        ;
    ;
    возврат ФизическоеЛицо ?? ФизлицоПоУмолчанию
;

@ВПроекте
@НаСервере
метод СотрудникиФизическогоЛицаУволены(ФизическоеЛицо: ФизическиеЛица.Ссылка): Булево
    возврат ДатаОтключенияКабинета(ФизическоеЛицо) != Неопределено
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ДатаОтключенияКабинета(ФизическоеЛицо: ФизическиеЛица.Ссылка): Дата?
    знч Запрос = Запрос{
        Выбрать
            ДатаОтключения
        Из
            ФизическиеЛица
        Где
            Ссылка == %ФизическоеЛицо}
    исп Результат = Запрос.Выполнить()
    знч СтрокаРезультата = Результат.ПервыйИлиУмолчание()
    если СтрокаРезультата.ДатаОтключения != Неопределено
        и СтрокаРезультата.ДатаОтключения.Сравнить(МенеджерДат.ТекущаяДатаВремя().ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий()).Дата) > 0
        возврат СтрокаРезультата.ДатаОтключения
    ;
    возврат Неопределено
;

@ВПроекте
метод ПредставлениеУдостоверенияЛичности(ДанныеДокумента: УдостоверениеЛичности): Строка
    знч ЭлементыПредставления = новый Массив<Строка>()
    ЭлементыПредставления.Добавить(ДанныеДокумента.Вид.Представление())
    если не ДанныеДокумента.Серия.Пусто()
        ЭлементыПредставления.Добавить("серия: %{ДанныеДокумента.Серия}")
    ;
    если не ДанныеДокумента.Номер.Пусто()
        ЭлементыПредставления.Добавить("№ %{ДанныеДокумента.Номер}")
    ;
    если ДанныеДокумента.ДатаВыдачи != Неопределено
        ЭлементыПредставления.Добавить("выдан: %{МенеджерДат.ФорматДаты(ДанныеДокумента.ДатаВыдачи)} года")
    ;
    если не ДанныеДокумента.ВыдавшийОрган.Пусто()
        ЭлементыПредставления.Добавить(ДанныеДокумента.ВыдавшийОрган)
    ;
    если ДанныеДокумента.Вид == ДокументыУдостоверяющиеЛичность.Паспорт
        и не ДанныеДокумента.КодВыдавшегоОргана.Пусто()
        
        ЭлементыПредставления.Добавить("код подр. %{ДанныеДокумента.КодВыдавшегоОргана}")
    ;
    возврат Строки.Соединить(ЭлементыПредставления, ", ")
;