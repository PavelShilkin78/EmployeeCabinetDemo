импорт ФизическиеЛица
импорт ВебApi
импорт КонтрольДоступа
импорт ВладельцыКабинетов
импорт Компания

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ЧтениеАутентифицированным(этот),
            КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот)]     
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<БудущиеИзмененияОстатковОтпуска.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<БудущиеИзмененияОстатковОтпуска.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<БудущиеИзмененияОстатковОтпуска.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПерсонально([Элемент.ФизическоеЛицо]))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПоПолномочиям(
            [Отпуск.ПолномочиеПросмотрОтпусков()],
            [Элемент.ФизическоеЛицо]
        ))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

//КонецОбласти

//Область JSON

@ВПодсистеме
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<ОстаткиОтпускаФизлица>
    иначе если ВерсияФорматаОбмена >= Версия{3.0}
        возврат Тип<ОстаткиОтпускаФизлица_3_0>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<ОстаткиОтпускаФизлица>
    ;
;

@ВПодсистеме
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Массив<ОстаткиОтпускаФизлица>>
    иначе если ВерсияФорматаОбмена >= Версия{3.0}
        возврат Тип<Массив<ОстаткиОтпускаФизлица_3_0>>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Массив<ОстаткиОтпускаФизлица>>
    ;
;

@ВПроекте
структура ОстаткиОтпускаФизлица
    @JsonСвойство(Имя = "personID")
    обз знч ФизическоеЛицо: Строка
    @JsonСвойство(Имя = "components")
    обз знч ОстаткиОтпусков: ЧитаемыйМассив<ОстатокОтпускаНаДату>?
;

@ВПодсистеме
структура ОстатокОтпускаНаДату
    @JsonСвойство(Имя = "date")
    обз знч Дата: ДатаВремя
    @JsonСвойство(Имя = "daysNotUsed")
    обз знч НеИспользованоДней: Число
;

@ВПроекте
структура ОстаткиОтпускаФизлица_3_0
    @JsonСвойство(Имя = "personID")
    обз знч ФизическоеЛицо: Строка
    @JsonСвойство(Имя = "components")
    обз знч ОстаткиОтпусков: ЧитаемыйМассив<ОстатокОтпускаНаДату_3_0>?
;

@ВПодсистеме
структура ОстатокОтпускаНаДату_3_0
    @JsonСвойство(Имя = "date")
    обз знч Дата: ДатаВремя
    @JsonСвойство(Имя = "employeeID")
    обз знч Сотрудник: Строка
    @JsonСвойство(Имя = "vacationTypeID")
    обз знч ВидОтпуска: Строка
    @JsonСвойство(Имя = "daysNotUsed")
    обз знч НеИспользованоДней: Число
;

@ВПодсистеме
метод ТипОбъектаJson(): Строка
    возврат "vacationUnusedDaysPredicted"
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(ОстаткиОтпускаФизлица: ОстаткиОтпускаФизлица, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    если ОстаткиОтпускаФизлица.ОстаткиОтпусков == Неопределено
        возврат
    ;

    знч СтрокиДанных: Массив<БудущиеИзмененияОстатковОтпуска.Объект>

    знч ФизическоеЛицо = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ОстаткиОтпускаФизлица.ФизическоеЛицо)) как ФизическиеЛица.Ссылка
    
    знч Ключ: Соответствие<Строка, Объект>
    Ключ.Вставить("ФизическоеЛицо", ФизическоеЛицо)
    
    для СтрокаБудущихОстатовОтпуска из ОстаткиОтпускаФизлица.ОстаткиОтпусков
        знч БудущиеИзмененияОстатковОтпускаОбъект: БудущиеИзмененияОстатковОтпуска.Объект
            = новый БудущиеИзмененияОстатковОтпуска.Объект()

        БудущиеИзмененияОстатковОтпускаОбъект.ФизическоеЛицо = ФизическоеЛицо
        БудущиеИзмененияОстатковОтпускаОбъект.Дата = СтрокаБудущихОстатовОтпуска.Дата.Дата
        БудущиеИзмененияОстатковОтпускаОбъект.ОстатокОтпуска = СтрокаБудущихОстатовОтпуска.НеИспользованоДней

        СтрокиДанных.Добавить(БудущиеИзмененияОстатковОтпускаОбъект)
    ;        

    Сервисы.ЗаписатьКоллекцию(СтрокиДанных, Ключ, Тип<БудущиеИзмененияОстатковОтпуска.Ссылка>, Сервисы.ИнструментыМенеджераОбъекта)
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(ОстаткиОтпускаФизлица: ОстаткиОтпускаФизлица_3_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    если ОстаткиОтпускаФизлица.ОстаткиОтпусков == Неопределено
        возврат
    ;

    знч СтрокиДанных: Массив<БудущиеИзмененияОстатковОтпуска.Объект>

    знч ФизическоеЛицо = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ОстаткиОтпускаФизлица.ФизическоеЛицо)) как ФизическиеЛица.Ссылка
    
    знч Ключ: Соответствие<Строка, Объект>
    Ключ.Вставить("ФизическоеЛицо", ФизическоеЛицо)
    
    для СтрокаБудущихОстатовОтпуска из ОстаткиОтпускаФизлица.ОстаткиОтпусков
        знч БудущиеИзмененияОстатковОтпускаОбъект: БудущиеИзмененияОстатковОтпуска.Объект
            = новый БудущиеИзмененияОстатковОтпуска.Объект()

        БудущиеИзмененияОстатковОтпускаОбъект.ФизическоеЛицо = ФизическоеЛицо
        БудущиеИзмененияОстатковОтпускаОбъект.Дата = СтрокаБудущихОстатовОтпуска.Дата.Дата
        БудущиеИзмененияОстатковОтпускаОбъект.РабочееМесто = Сервисы.ПолучитьСсылку(Сотрудники.ВнешняяСсылка(СтрокаБудущихОстатовОтпуска.Сотрудник)) как Сотрудники.Ссылка
        БудущиеИзмененияОстатковОтпускаОбъект.ВидОтпуска = Сервисы.ПолучитьСсылку(ВидыОтпусков.ВнешняяСсылка(СтрокаБудущихОстатовОтпуска.ВидОтпуска)) как ВидыОтпусков.Ссылка
        БудущиеИзмененияОстатковОтпускаОбъект.ОстатокОтпуска = СтрокаБудущихОстатовОтпуска.НеИспользованоДней

        СтрокиДанных.Добавить(БудущиеИзмененияОстатковОтпускаОбъект)
    ;        

    Сервисы.ЗаписатьКоллекцию(СтрокиДанных, Ключ, Тип<БудущиеИзмененияОстатковОтпуска.Ссылка>, Сервисы.ИнструментыМенеджераОбъекта)
;

@ВПодсистеме
метод УдалитьОбъекты(ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>, Сервисы: ВебApiСервер.СервисыУдаленияОбъектов)
    знч Ключ = {
        "ФизическоеЛицо": Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ПараметрыЗапроса["personID"] как Строка))
    }
    Сервисы.УдалитьКоллекцию(Ключ, Тип<БудущиеИзмененияОстатковОтпуска.Ссылка>)
;

//КонецОбласти

//Область СлужебныеПроцедурыИФункции

@ВПодсистеме
метод ДатаОтпускаФизическогоЛицаПоДлительности(ФизическоеЛицо: ФизическиеЛица.Ссылка, КоличествоДнейОтпуска: Число): Дата?
    пер Остаток = ИнформацияОбОтпуске.ОстатокОтпускаФизическогоЛица(ФизическоеЛицо)
    пер ЧасовойПояс: ЧасовойПояс = ВладельцыКабинетов.ЧасовойПоясФизическогоЛица(ФизическоеЛицо)
    если Остаток != Неопределено и Остаток >= КоличествоДнейОтпуска
        возврат Дата.Сейчас(ЧасовойПояс)
    ;
    знч Запрос = Запрос{
        Выбрать Первые 1
            БудущиеИзменения.Дата Как Дата
         Из
            БудущиеИзмененияОстатковОтпуска Как БудущиеИзменения
         Где
            БудущиеИзменения.ФизическоеЛицо == %ФизическоеЛицо
            И БудущиеИзменения.ОстатокОтпуска >= %КоличествоДнейОтпуска
         Упорядочить По
            БудущиеИзменения.Дата}
    исп Результат = Запрос.Выполнить() 
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        возврат РезультатСтроки[0].Дата.ДобавитьДни(1)
    ;
    возврат Неопределено
;

//КонецОбласти