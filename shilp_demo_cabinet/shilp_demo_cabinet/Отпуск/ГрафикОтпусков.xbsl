импорт ВебApi
импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт Компания
импорт КонтрольДоступа
импорт Отсутствия
импорт ВладельцыКабинетов
импорт Уведомления

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат КонтрольДоступа.РазрешенияДоступаТаблицыКонтентДанныхАбонентаЧтениеВсем()
;

//КонецОбласти

//Область СлужебныйПрограммныйИнтерфейс

@ВПроекте
структура ГрафикОтпусков
    @JsonСвойство(Имя = "personID")
    обз знч ФизическоеЛицо: Строка
    @JsonСвойство(Имя = "components")
    обз знч ЗаписиГрафика: ЧитаемыйМассив<ЗаписьГрафикаОтпусков>?
;

@ВПодсистеме
структура ЗаписьГрафикаОтпусков
    @JsonСвойство(Имя = "startDate")
    обз знч ДатаНачала: ДатаВремя?
    @JsonСвойство(Имя = "endDate")
    обз знч ДатаОкончания: ДатаВремя?
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<ГрафикОтпусков>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<ГрафикОтпусков>
    ;
;

@ВПроекте
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Массив<ГрафикОтпусков>>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Массив<ГрафикОтпусков>>
    ;
;

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "vacationsSchedule"
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ГрафикОтпусков: ГрафикОтпусков, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать() 
    знч СтрокиГрафика: Массив<ГрафикОтпусков.Объект>
    знч Ключ: Соответствие<Строка, Объект>
    Ключ.Вставить("ФизическоеЛицо", Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ГрафикОтпусков.ФизическоеЛицо)))
    
    если ГрафикОтпусков.ЗаписиГрафика!= Неопределено
        для ДанныеСтроки из ГрафикОтпусков.ЗаписиГрафика
            знч СтрокаГрафика = новый ГрафикОтпусков.Объект()
            СтрокаГрафика.ФизическоеЛицо = Ключ["ФизическоеЛицо"] как ФизическиеЛица.Ссылка
            СтрокаГрафика.ДатаНачала = ДанныеСтроки.ДатаНачала?.Дата
            СтрокаГрафика.ДатаОкончания = ДанныеСтроки.ДатаОкончания?.Дата
            СтрокиГрафика.Добавить(СтрокаГрафика)
        ;
    ;
    Сервисы.ЗаписатьКоллекцию(СтрокиГрафика, Ключ, Тип<ГрафикОтпусков.Ссылка>, Сервисы.ИнструментыМенеджераОбъекта)
;

@ВПроекте
метод УдалитьОбъекты(ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>, Сервисы: ВебApiСервер.СервисыУдаленияОбъектов)
    
    знч Ключ = {"ФизическоеЛицо": Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ПараметрыЗапроса["personID"] как Строка))}
    Сервисы.УдалитьКоллекцию(Ключ, Тип<ГрафикОтпусков.Ссылка>)

;

//КонецОбласти

//Область СлужебныеПроцедурыИФункции

@ВПодсистеме
метод ЗапланироватьНапоминанияОГрафикеОтпусков()
    
    пер Расписание = [Расписание.Ежедневно(Время{5:0:0})]
    пер КлючЗадания = "НапоминаниеОГрафикеОтпусков"
    
    МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
    если ЗапланированныеЗадания.ПолучитьПоКлючу(КлючЗадания) == Неопределено
        ЗапланированныеЗадания.Создать(&ГрафикОтпусков.ОтправитьНапоминанияОГрафикеОтпусков)
            .Настроить(
                Ключ = КлючЗадания,
                Расписание = Расписание)
            .Запланировать()
    иначе
        ЗапланированныеЗадания.Изменить(КлючЗадания)
            ?.Настроить(Расписание = Расписание)
            .Запланировать()
    ;   
    
;

@ВПодсистеме
метод ОтправитьНапоминанияОГрафикеОтпусков()
    
    знч Настройки = НастройкиГрафикаОтпусков.НастройкиГрафикаОтпусков()
    
    если не Настройки.НапоминатьОГрафикеОтпусков и не Настройки.НапоминатьОГрафикеОтпусковПодчиненных
        возврат
    ;
    
    если Настройки.НапоминатьОГрафикеОтпусков и Настройки.НапоминаниеОГрафикеОтпусковЧислоДней != 0
        пер ДанныеНапоминаний = ДанныеНапоминанийОГрафикеОтпусков(Настройки.НапоминаниеОГрафикеОтпусковЧислоДней)
        для ДанныеНапоминания из ДанныеНапоминаний
            ОтправитьНапоминаниеОГрафикеОтпусков(ДанныеНапоминания, Ложь)
        ;
    ;
    
    если Настройки.НапоминатьОГрафикеОтпусковПодчиненных и Настройки.НапоминаниеОГрафикеОтпусковПодчиненныхЧислоДней != 0
        пер ДанныеНапоминаний = ДанныеНапоминанийОГрафикеОтпусков(Настройки.НапоминаниеОГрафикеОтпусковПодчиненныхЧислоДней)
        для ДанныеНапоминания из ДанныеНапоминаний
            ОтправитьНапоминаниеОГрафикеОтпусков(ДанныеНапоминания, Истина)
        ;
    ;
;

/*структура ДанныеНапоминания
    пер Ссылка: ГрафикОтпусков.Ссылка
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка
    пер ФизическоеЛицоПредставление: Строка
    пер ДатаНачала: Дата
    пер ДатаОкончания: Дата
;*/

метод ДанныеНапоминанийОГрафикеОтпусков(КоличествоДней: Число): ЧитаемыйМассив<ДанныеНапоминания>
    пер НачалоОтпуска = Дата.Сейчас().ДобавитьДни(КоличествоДней)
    знч Запрос = Запрос{
        Выбрать
            ГрафикОтпусков.Ссылка Как Ссылка,
            ГрафикОтпусков.ФизическоеЛицо Как ФизическоеЛицо,
            ГрафикОтпусков.ФизическоеЛицо.Представление Как ФизическоеЛицоПредставление,
            ГрафикОтпусков.ДатаНачала Как ДатаНачала,
            ГрафикОтпусков.ДатаОкончания Как ДатаОкончания
        Породить ДанныеНапоминания
        Из
            ГрафикОтпусков Как ГрафикОтпусков
            Внутреннее Соединение ПодразделенияИСотрудники Как ПодразделенияИСотрудники
                По ГрафикОтпусков.ФизическоеЛицо == ПодразделенияИСотрудники.ФизическоеЛицо
                И ПодразделенияИСотрудники.ОсновноеМестоРаботы
        Где
            ГрафикОтпусков.ДатаНачала == %НачалоОтпуска}
    возврат новый ЧитаемыйМассив(Запрос.Выполнить())
;

метод ОтправитьНапоминаниеОГрафикеОтпусков(ДанныеНапоминания: ДанныеНапоминания, ЭтоРуководитель: Булево)
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка? = ДанныеНапоминания.ФизическоеЛицо
    /*пер Ссылка: ГрафикОтпусков.Ссылка = ДанныеНапоминания.Ссылка
    пер ПредставлениеФизическогоЛица: Строка = ДанныеНапоминания.ФизическоеЛицоПредставление
    пер ДатаНачала: Дата? = ДанныеНапоминания.ДатаНачала
    пер ДатаОкончания: Дата? = ДанныеНапоминания.ДатаОкончания*/
    
    если ЭтоРуководитель
        ФизическоеЛицо = ОрганизационнаяСтруктура.НепосредственныйРуководительФизическогоЛица(ФизическоеЛицо)
    ;
    
    если ФизическоеЛицо == Неопределено
        возврат
    ;
    
    пер ЧасовойПояс: ЧасовойПояс = ВладельцыКабинетов.ЧасовойПоясФизическогоЛица(ФизическоеЛицо)
    если ДанныеНапоминания.ДатаНачала == Неопределено или ДанныеНапоминания.ДатаОкончания == Неопределено или Дата.Сейчас(ЧасовойПояс) >= ДанныеНапоминания.ДатаНачала
        возврат
    ;
    
    пер ПредставлениеСтрокиГрафика =
        Отсутствия.ПредставлениеОтсутствия(ДанныеНапоминания.ДатаНачала, ДанныеНапоминания.ДатаОкончания, Неопределено)
        
    пер ШаблонТекстаСообщения = ЭтоРуководитель
        ? "Отпуск сотрудника $0 запланирован на $1."
        : "Отпуск запланирован на $0."
    
    пер ПараметрыШаблона = ЭтоРуководитель ? [ДанныеНапоминания.ФизическоеЛицоПредставление, ПредставлениеСтрокиГрафика] : [ПредставлениеСтрокиГрафика]
    пер ТекстСообщения = Строки.Шаблон(ШаблонТекстаСообщения, ПараметрыШаблона)
    пер Тема = "Запланированный отпуск"
    пер ДанныеУведомления = новый УведомленияСервер.ДанныеУведомления(Уведомления.ВидыУведомлений.ПерсональнаяИнформация, ДанныеНапоминания.Ссылка) 
    пер ТекстыУведомлений = новый УведомленияСервер.ТекстыСообщений(Тема, ТекстСообщения, ТекстСообщения, ТекстСообщения)
    УведомленияСервер.ОтправитьУведомление(ФизическоеЛицо, ТекстыУведомлений, ДанныеУведомления)
;

//КонецОбласти

//Область JSON

структура ДанныеГрафикаОтпусков
    обз знч ФизическоеЛицо: ФизическиеЛица.Ссылка
    обз знч Элементы: ЧитаемаяКоллекция<ЧитаемоеСоответствие<Строка, Объект?>>
;

метод ДанныеГрафикаОтпусковСотрудника(ФизическоеЛицо: ФизическиеЛица.Ссылка): ДанныеГрафикаОтпусков
    
    знч Запрос = Запрос{
        Выбрать 
            ДатаНачала Как Начало,
            ДатаОкончания Как Окончание                     
        Из 
            ГрафикОтпусков
        Где
            ФизическоеЛицо == %ФизическоеЛицо
        Упорядочить По
            Начало}
    знч ГрафикОтпусков: Массив<ЧитаемоеСоответствие<Строка, Объект?>>
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        ГрафикОтпусков.Добавить(МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат))
    ;
    возврат новый ДанныеГрафикаОтпусков(ФизическоеЛицо, ГрафикОтпусков)
;

//КонецОбласти