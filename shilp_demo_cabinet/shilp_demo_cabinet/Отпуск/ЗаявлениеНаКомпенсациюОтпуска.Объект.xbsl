импорт ОбщиеСтандартные
импорт ВладельцыКабинетов
импорт Компания
импорт КонтрольДоступа
импорт ОбменДанными
импорт Компания::Согласования
импорт Криптография

//Область ОбработчикиСобытий

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПриЗаполнении()
    ФизическоеЛицо = ПользователиСистемы.ТекущееФизическоеЛицо()
    если ФизическоеЛицо == Неопределено
        возврат
    ;
    пер ЧасовойПояс: ЧасовойПояс = ВладельцыКабинетов.ЧасовойПоясФизическогоЛица(ФизическоеЛицо)
    МоментСоздания = Момент.Сейчас()
    Дата = Дата.Сейчас(ЧасовойПояс)
    Организация = Сотрудники.ОрганизацияФизическогоЛицаПоОсновномуМестуРаботы(ФизическоеЛицо)
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередЗаписью(ПредыдущееЗначение: ЗаявлениеНаКомпенсациюОтпуска.Данные, ПараметрыЗаписи: ЗаявлениеНаКомпенсациюОтпуска.ПараметрыЗаписи)
    ЗаполнитьПредставление()
    ЗаполнитьМесяцСоздания()
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПослеЗаписи(ПредыдущееЗначение: ЗаявлениеНаКомпенсациюОтпуска.Данные, ПараметрыЗаписи: ЗаявлениеНаКомпенсациюОтпуска.ПараметрыЗаписи)
    исп КонтекстДоступа.Привилегированный()
    пер ТребуетсяРегистрацияИзменений = РегистрацияИзменений.ТребуетсяРегистрацияИзмененийОбъекта(этот, ПредыдущееЗначение)
    ЗаявлениеНаКомпенсациюОтпуска.ПослеЗаписиДополнение(Ссылка, ФизическоеЛицо, ТребуетсяРегистрацияИзменений)
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередУдалением(ПараметрыУдаления: ЗаявлениеНаКомпенсациюОтпуска.ПараметрыУдаления)
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<СогласованияДокументов>, "Документ")
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<ПодписиДокументов>, "Документ")
;

//КонецОбласти

//Область СлужебныеПроцедурыИФункции

метод ЗаполнитьПредставление()
    ПредставлениеДокумента = "Компенсация за %{КоличествоДнейКомпенсации.ВСтроку()} %{МенеджерСтрок.ТекстПоКоличеству("день", КоличествоДнейКомпенсации)}"
;


метод ЗаполнитьМесяцСоздания()
    МесяцСоздания = Дата.НачалоМесяца()
;

//КонецОбласти