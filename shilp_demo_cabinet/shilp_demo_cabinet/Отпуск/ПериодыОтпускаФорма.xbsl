импорт ВладельцыКабинетов
импорт ИнтерфейсныеКомпонентыКабинеты
импорт ИнтерфейсныеКомпонентыСтандартные
импорт Компания
импорт ОбщиеСтандартные
импорт ФизическиеЛица

@ВПодсистеме
метод Инициализировать()
    для СтрокаОтпуска из ИсходныеДанные 
        пер НоваяСтрока = новый ПериодыОтпускаСтрока(
            СтрокаОтпуска.ДатаНачала, 
            СтрокаОтпуска.ДатаОкончания, 
            СтрокаОтпуска.РабочееМесто,
            СтрокаОтпуска.ВидОтпуска,
            СтрокаОтпуска.ЗаСвойСчет,
            СтрокаОтпуска.КомпенсацияОтпуска,
            СтрокаОтпуска.КоличествоДнейКомпенсации,
            СтрокаОтпуска.Использовать)
        ОтпускаЗаявления.Добавить(НоваяСтрока)
    ;
    пер Сотрудники: Множество<Сотрудники.Ссылка?>
    для РабочееМесто из РабочиеМеста
        Сотрудники.Добавить(РабочееМесто.РабочееМесто)
        если РабочееМесто.Основное
            ОсновноеРабочееМесто = РабочееМесто.РабочееМесто
        ;
    ;
    знч ОстаткиОтпусковСотрудников = ПолучитьОстаткиОтпусковПоСотрудникам(Сотрудники)
    для ДанныеСотрудника из ОстаткиОтпусковСотрудников
        если не Сотрудники.Содержит(ДанныеСотрудника.РабочееМесто)
            продолжить
        ;
        для ДанныеВидаОтпуска из ДанныеСотрудника.ВидыОтпусков
            пер СтрокаОтпуска: ПериодыОтпускаСтрока?
            для ПериодОтпуска из ОтпускаЗаявления
                если ПериодОтпуска.РабочееМесто == ДанныеСотрудника.РабочееМесто и ПериодОтпуска.ВидОтпуска == ДанныеВидаОтпуска.ВидОтпуска
                    СтрокаОтпуска = ПериодОтпуска
                    прервать
                ;
            ;
            если СтрокаОтпуска == Неопределено
                СтрокаОтпуска = новый ПериодыОтпускаСтрока()
                СтрокаОтпуска.РабочееМесто = ДанныеСотрудника.РабочееМесто
                СтрокаОтпуска.ВидОтпуска = ДанныеВидаОтпуска.ВидОтпуска
            ;
            ЕжегодныйОтпуск.Добавить(СтрокаОтпуска)
        ;
        пер СтрокаОтпускаЗаСвойСчет: ПериодыОтпускаСтрока?
        для ПериодОтпуска из ОтпускаЗаявления
            если ПериодОтпуска.ЗаСвойСчет и ПериодОтпуска.РабочееМесто == ДанныеСотрудника.РабочееМесто
                СтрокаОтпускаЗаСвойСчет = ПериодОтпуска
                прервать
            ;
        ;
        если СтрокаОтпускаЗаСвойСчет == Неопределено
            СтрокаОтпускаЗаСвойСчет = новый ПериодыОтпускаСтрока()
            СтрокаОтпускаЗаСвойСчет.РабочееМесто = ДанныеСотрудника.РабочееМесто
            СтрокаОтпускаЗаСвойСчет.ЗаСвойСчет = Истина
        ;
        ОтпускЗаСвойСчет.Добавить(СтрокаОтпускаЗаСвойСчет)
    ;
    если не ЕжегодныйОтпуск.Пусто()
        ОсновнойОтпуск = ЕжегодныйОтпуск.Первый().ВидОтпуска
    ;
    пер ДанныеПредставлений = ДанныеПредставленийРабочихМест(РабочиеМеста)
    пер ДанныеИдентификаторов: Соответствие<Строка, Сотрудники.Ссылка?>
    пер ПервыйИдентификатор: Строка? = Неопределено
    Компоненты.РабочееМесто.СписокВыбора.Очистить()
    для РабочееМесто из РабочиеМеста
        если ДанныеПредставлений.СодержитКлюч(РабочееМесто.РабочееМесто)
            пер ПредставлениеИдентификатора = РабочееМесто.РабочееМесто.Ид.ВСтроку()
            если ПервыйИдентификатор == Неопределено
                ПервыйИдентификатор = ПредставлениеИдентификатора
            ;
            пер СтрокаСписка = новый ЭлементСпискаЗначений<Строка>()
            СтрокаСписка.Значение = ПредставлениеИдентификатора
            СтрокаСписка.Представление = ДанныеПредставлений.Получить(РабочееМесто.РабочееМесто)
            Компоненты.РабочееМесто.СписокВыбора.Добавить(СтрокаСписка)
            ДанныеИдентификаторов.Вставить(ПредставлениеИдентификатора, РабочееМесто.РабочееМесто)
        ;
    ;
    ПредставленияРабочихМест = новый ЧитаемоеСоответствие(ДанныеПредставлений)
    ИдентификаторыРабочихМест = новый ЧитаемоеСоответствие(ДанныеИдентификаторов)
    если ПервыйИдентификатор != Неопределено
        Компоненты.РабочееМесто.Значение = ПервыйИдентификатор
    ;
    ЗаполнитьРедактируемыеДанные()
    ЗаполнитьРедактируемыеДанныеЗаСвойСчет()
;

метод ПолучитьОстаткиОтпусковПоСотрудникам(Сотрудники: Множество<Сотрудники.Ссылка?>): Массив<Отпуск.ОстаткиОтпусковПоСотрудникам>    
    если Сотрудники.Пусто()
        возврат []
    ;
    знч ФизическоеЛицо = Компания.ФизическиеЛицаСотрудников({Сотрудники.ПервыйИлиУмолчание()!}).ПервыйИлиУмолчание()!    
    если ВладельцыКабинетов.ПараметрыСеанса().ФизическоеЛицо == ФизическоеЛицо 
        возврат Отпуск.ПараметрыСеанса().ОстаткиОтпусковСотрудников
    ;    
    возврат ДанныеОстатковОтпусковСотрудников(ФизическоеЛицо)
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеОстатковОтпусковСотрудников(ФизическоеЛицо: ФизическиеЛица.Ссылка): Массив<Отпуск.ОстаткиОтпусковПоСотрудникам>  
    возврат Отпуск.ДанныеОстатковОтпусковСотрудников(ФизическоеЛицо)
;

метод ЗаполнитьРедактируемыеДанные()
    пер РабочееМесто = ИдентификаторыРабочихМест.Получить(Компоненты.РабочееМесто.Значение)
    пер НайденнаяСтрока: ПериодыОтпускаСтрока?    
    Компоненты.ВидОтпуска.СписокВыбора.Очистить()
    для СтрокаОтпуска из ЕжегодныйОтпуск
        если СтрокаОтпуска.РабочееМесто != РабочееМесто
            продолжить
        ;
        если НайденнаяСтрока == Неопределено
            НайденнаяСтрока = СтрокаОтпуска
        ;
        пер СтрокаСписка = новый ЭлементСпискаЗначений<ВидыОтпусков.Ссылка?>(СтрокаОтпуска.ВидОтпуска)
        Компоненты.ВидОтпуска.СписокВыбора.Добавить(СтрокаСписка)
        если СтрокаОтпуска.ВидОтпуска == ТекущийВидОтпуска
            НайденнаяСтрока = СтрокаОтпуска
        ;
    ;
    РедактируемыеДанные = НайденнаяСтрока!
    ТекущийВидОтпуска = РедактируемыеДанные.ВидОтпуска
    ПериодОтсутствия = Неопределено
    если РедактируемыеДанные.ДатаНачала != Неопределено и РедактируемыеДанные.ДатаОкончания != Неопределено
        ПериодОтсутствия = новый ЗакрытыйДиапазон<Дата>(РедактируемыеДанные.ДатаНачала, РедактируемыеДанные.ДатаОкончания)
    ;
;

метод ЗаполнитьРедактируемыеДанныеЗаСвойСчет()
    пер РабочееМесто = ИдентификаторыРабочихМест.Получить(Компоненты.РабочееМесто.Значение)
    пер НайденнаяСтрока: ПериодыОтпускаСтрока?
    для СтрокаОтпуска из ОтпускЗаСвойСчет
        если СтрокаОтпуска.РабочееМесто != РабочееМесто
            продолжить
        ;
        НайденнаяСтрока = СтрокаОтпуска
        прервать
    ;
    РедактируемыеДанныеЗаСвойСчет = НайденнаяСтрока!
    ПериодОтсутствияЗаСвойСчет = Неопределено
    если РедактируемыеДанныеЗаСвойСчет.ДатаНачала != Неопределено и РедактируемыеДанныеЗаСвойСчет.ДатаОкончания != Неопределено
        ПериодОтсутствияЗаСвойСчет = новый ЗакрытыйДиапазон<Дата>(РедактируемыеДанныеЗаСвойСчет.ДатаНачала, РедактируемыеДанныеЗаСвойСчет.ДатаОкончания)
    ;
;

метод ПериодыОтпускаФормаВысота(): Число
    возврат 70 * Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА
;

метод ПанельОсновнаяЗаписатьИЗакрыть(Источник: КоманднаяПанельФорм, Событие: СобытиеКомпонента)
    если не ПроверитьЗаполнение()
        возврат
    ;
    ОтпускаЗаявления.Очистить()
    для СтрокаОтпуска из ЕжегодныйОтпуск
        если (СтрокаОтпуска.Использовать и СтрокаОтпуска.ДатаНачала != Неопределено и СтрокаОтпуска.ДатаОкончания != Неопределено)
            или СтрокаОтпуска.КомпенсацияОтпуска
            ОтпускаЗаявления.Добавить(СтрокаОтпуска)
        ;
    ;
    для СтрокаОтпуска из ОтпускЗаСвойСчет
         если СтрокаОтпуска.Использовать и СтрокаОтпуска.ДатаНачала != Неопределено и СтрокаОтпуска.ДатаОкончания != Неопределено
            ОтпускаЗаявления.Добавить(СтрокаОтпуска)
        ;
    ;
    Закрыть(ОтпускаЗаявления)
;

метод ПанельОсновнаяСохранитьЧерновик(Источник: КоманднаяПанельФорм, Событие: СобытиеКомпонента)
    Закрыть()
;

метод ПанельОсновнаяИспользованиеЗаписатьИЗакрыть(): Булево
    возврат не РежимПросмотра
;

метод РабочееМестоПриИзменении(Источник: ПолеВвода<Строка>, СобытиеПриИзменении: СобытиеПриИзменении<Строка>)
    ЗаполнитьРедактируемыеДанные()
    ЗаполнитьРедактируемыеДанныеЗаСвойСчет()
;

метод РабочееМестоВидимость(): Булево
    возврат Компоненты.РабочееМесто.СписокВыбора.Размер() > 1
;

метод ВидОтпускаПриИзменении(Источник: ПолеВвода<ВидыОтпусков.Ссылка?>, Событие: СобытиеПриИзменении<ВидыОтпусков.Ссылка?>)
    ЗаполнитьРедактируемыеДанные()
;

метод ВидОтпускаТолькоЧтение(): Булево
    если Компоненты.ВидОтпуска.СписокВыбора.Размер() > 1
        возврат Ложь
    ;
    возврат Истина
;

метод ИспользоватьВидОтпускаПриИзмененииЗначения(Источник: ФлажокРасширенный, Событие: СобытиеПриИзменении<Булево?>)
    если не РедактируемыеДанные.Использовать
        РедактируемыеДанные.ДатаНачала = Неопределено
        РедактируемыеДанные.ДатаОкончания = Неопределено
        ПериодОтсутствия = Неопределено
        ПриИзмененииПериодаОтпуска(РедактируемыеДанные)
    ;
;

метод ИспользоватьВидОтпускаВидимость(): Булево
    возврат не ТолькоКомпенсация
;

метод ИспользоватьВидОтпускаТолькоЧтение(): Булево
    возврат РедактируемыеДанные.ВидОтпуска == Неопределено или РежимПросмотра
;

метод ПериодОтсутствияПриИзмененииЗначения(Источник: ПолеВводаРасширенноеПериод, Событие: СобытиеПриИзменении<ЗакрытыйДиапазон<Дата>?>)
    пер НачалоОтпуска = ПериодОтсутствия?.От
    пер ОкончаниеОтпуска = ПериодОтсутствия?.До
    если НачалоОтпуска != Неопределено и НачалоОтпуска < ИсходнаяДатаНачала
        НачалоОтпуска = ИсходнаяДатаНачала
    ;
    если ОкончаниеОтпуска != Неопределено и ОкончаниеОтпуска < ИсходнаяДатаНачала
        ОкончаниеОтпуска = ИсходнаяДатаНачала
    ;
    если НачалоОтпуска != Неопределено и НачалоОтпуска > ИсходнаяДатаОкончания
        НачалоОтпуска = ИсходнаяДатаОкончания
    ;
    если ОкончаниеОтпуска != Неопределено и ОкончаниеОтпуска > ИсходнаяДатаОкончания
        ОкончаниеОтпуска = ИсходнаяДатаОкончания
    ;
    если НачалоОтпуска != Неопределено и ОкончаниеОтпуска != Неопределено
        ПериодОтсутствия = новый ЗакрытыйДиапазон<Дата>(НачалоОтпуска, ОкончаниеОтпуска)
    ;
    РедактируемыеДанные.ДатаНачала = ПериодОтсутствия?.От
    РедактируемыеДанные.ДатаОкончания = ПериодОтсутствия?.До
    ПриИзмененииПериодаОтпуска(РедактируемыеДанные)
;

метод ПриИзмененииПериодаОтпуска(ТекущиеДанные: ПериодыОтпускаСтрока)
    знч ОтпускаСотрудника = ЕжегодныйОтпуск.Фильтровать(Элемент -> Элемент.РабочееМесто == ТекущиеДанные.РабочееМесто)
    знч ОтпускаЗаСвойСчетСотрудника = ОтпускЗаСвойСчет.Фильтровать(Элемент -> Элемент.РабочееМесто == ТекущиеДанные.РабочееМесто)
    пер ИспользуемыеОтпуска: Массив<ПериодыОтпускаСтрока>
    для СтрокаОтпуска из ОтпускаСотрудника
        если СтрокаОтпуска.Использовать
            и СтрокаОтпуска.ДатаНачала != Неопределено и СтрокаОтпуска.ДатаОкончания != Неопределено
            ИспользуемыеОтпуска.Добавить(СтрокаОтпуска)
        ;
    ;
    для СтрокаОтпуска из ОтпускаЗаСвойСчетСотрудника
        если СтрокаОтпуска.Использовать
            и СтрокаОтпуска.ДатаНачала != Неопределено и СтрокаОтпуска.ДатаОкончания != Неопределено
            ИспользуемыеОтпуска.Добавить(СтрокаОтпуска)
        ;
    ;
    если ИспользуемыеОтпуска.Пусто()
        возврат
    ;
    пер УпорядоченныеОтпуска = ИспользуемыеОтпуска.СортироватьПо(Элемент -> Элемент.ДатаНачала!)
    пер ПредыдущаяСтрока: ПериодыОтпускаСтрока? = Неопределено
    для СтрокаОтпуска из УпорядоченныеОтпуска
        если ПредыдущаяСтрока == Неопределено
            ПредыдущаяСтрока = СтрокаОтпуска
            продолжить
        ;
        если СтрокаОтпуска.ДатаНачала <= ПредыдущаяСтрока.ДатаОкончания
            если СтрокаОтпуска == ТекущиеДанные
                ПредыдущаяСтрока.ДатаОкончания = СтрокаОтпуска.ДатаНачала.ДобавитьДни(-1)
            иначе
                СтрокаОтпуска.ДатаНачала = ПредыдущаяСтрока.ДатаОкончания.ДобавитьДни(1)
            ;
        ;
        если СтрокаОтпуска.ДатаНачала > ПредыдущаяСтрока.ДатаОкончания.ДобавитьДни(1)
            если СтрокаОтпуска == ТекущиеДанные
                ПредыдущаяСтрока.ДатаОкончания = СтрокаОтпуска.ДатаНачала.ДобавитьДни(-1)
            иначе
                СтрокаОтпуска.ДатаНачала = ПредыдущаяСтрока.ДатаОкончания.ДобавитьДни(1)
            ;
        ;
        если ПредыдущаяСтрока.ДатаНачала > ПредыдущаяСтрока.ДатаОкончания
            ПредыдущаяСтрока.ДатаНачала = Неопределено
            ПредыдущаяСтрока.ДатаОкончания = Неопределено
            ПредыдущаяСтрока.Использовать = Ложь
        ;
        если СтрокаОтпуска.ДатаНачала > СтрокаОтпуска.ДатаОкончания
            СтрокаОтпуска.ДатаНачала = Неопределено
            СтрокаОтпуска.ДатаОкончания = Неопределено
            СтрокаОтпуска.Использовать = Ложь
        ;
        если СтрокаОтпуска.Использовать
            ПредыдущаяСтрока = СтрокаОтпуска
        ;
    ;
    ЗаполнитьРедактируемыеДанные()
    ЗаполнитьРедактируемыеДанныеЗаСвойСчет()
;

метод ПериодОтсутствияВидимость(): Булево
    возврат не ТолькоКомпенсация и ИсходнаяДатаНачала != Неопределено и ИсходнаяДатаОкончания != Неопределено
;

метод ПериодОтсутствияТолькоЧтение(): Булево
    возврат не РедактируемыеДанные.Использовать или РедактируемыеДанные.ВидОтпуска == Неопределено или РежимПросмотра
;

метод ЗаСвойСчетПриИзмененииЗначения(Источник: ФлажокРасширенный, Событие: СобытиеПриИзменении<Булево?>)
    если не РедактируемыеДанныеЗаСвойСчет.Использовать
        РедактируемыеДанныеЗаСвойСчет.ДатаНачала = Неопределено
        РедактируемыеДанныеЗаСвойСчет.ДатаОкончания = Неопределено
        ПериодОтсутствияЗаСвойСчет = Неопределено
        ПриИзмененииПериодаОтпуска(РедактируемыеДанныеЗаСвойСчет)
    ;
;

метод ЗаСвойСчетВидимость(): Булево
    возврат не ТолькоКомпенсация и ИсходнаяДатаНачала != Неопределено и ИсходнаяДатаОкончания != Неопределено
        и Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОтпускЗаСвойСчет и ТекущийВидОтпуска == ОсновнойОтпуск
        и ИдентификаторыРабочихМест.Получить(Компоненты.РабочееМесто.Значение) != ОсновноеРабочееМесто
;

метод ПериодОтсутствияЗаСвойСчетПриИзмененииЗначения(Источник: ПолеВводаРасширенноеПериод, Событие: СобытиеПриИзменении<ЗакрытыйДиапазон<Дата>?>)
    пер НачалоОтпуска = ПериодОтсутствияЗаСвойСчет?.От
    пер ОкончаниеОтпуска = ПериодОтсутствияЗаСвойСчет?.До
    если НачалоОтпуска != Неопределено и НачалоОтпуска < ИсходнаяДатаНачала
        НачалоОтпуска = ИсходнаяДатаНачала
    ;
    если ОкончаниеОтпуска != Неопределено и ОкончаниеОтпуска < ИсходнаяДатаНачала
        ОкончаниеОтпуска = ИсходнаяДатаНачала
    ;
    если НачалоОтпуска != Неопределено и НачалоОтпуска > ИсходнаяДатаОкончания
        НачалоОтпуска = ИсходнаяДатаОкончания
    ;
    если ОкончаниеОтпуска != Неопределено и ОкончаниеОтпуска > ИсходнаяДатаОкончания
        ОкончаниеОтпуска = ИсходнаяДатаОкончания
    ;
    если НачалоОтпуска != Неопределено и ОкончаниеОтпуска != Неопределено
        ПериодОтсутствияЗаСвойСчет = новый ЗакрытыйДиапазон<Дата>(НачалоОтпуска, ОкончаниеОтпуска)
    ;
    РедактируемыеДанныеЗаСвойСчет.ДатаНачала = ПериодОтсутствияЗаСвойСчет?.От
    РедактируемыеДанныеЗаСвойСчет.ДатаОкончания = ПериодОтсутствияЗаСвойСчет?.До
    ПриИзмененииПериодаОтпуска(РедактируемыеДанныеЗаСвойСчет)
;

метод ПериодОтсутствияЗаСвойСчетВидимость(): Булево
    возврат не ТолькоКомпенсация и Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОтпускЗаСвойСчет и ТекущийВидОтпуска == ОсновнойОтпуск
        и ИдентификаторыРабочихМест.Получить(Компоненты.РабочееМесто.Значение) != ОсновноеРабочееМесто
;

метод КомпенсацияОтпускаГруппаВидимость(): Булево
    возврат ИсходноеКоличествоДнейКомпенсации > 0
;

метод КомпенсацияОтпускаПриИзмененииЗначения(Источник: ФлажокРасширенный, Событие: СобытиеПриИзменении<Булево?>)
    если не РедактируемыеДанные.КомпенсацияОтпуска
        РедактируемыеДанные.КоличествоДнейКомпенсации = 0
        ПриИзмененииКоличестваДнейКомпенсации()
    ;
;

метод КоличествоДнейКомпенсацииПриИзмененииЗначения(Источник: ПолеВводаРасширенноеЧисло, Событие: СобытиеПриИзменении<Число>)
    ПриИзмененииКоличестваДнейКомпенсации()
;

метод ПриИзмененииКоличестваДнейКомпенсации()
    знч ОтпускаСотрудника = ЕжегодныйОтпуск.Фильтровать(Элемент -> Элемент.РабочееМесто == РедактируемыеДанные.РабочееМесто)
    если ОтпускаСотрудника.Размер() == 1
        РедактируемыеДанные.КоличествоДнейКомпенсации = ИсходноеКоличествоДнейКомпенсации
        возврат
    ;
    если РедактируемыеДанные.КоличествоДнейКомпенсации > ИсходноеКоличествоДнейКомпенсации
        РедактируемыеДанные.КоличествоДнейКомпенсации = ИсходноеКоличествоДнейКомпенсации
    ;
    пер СуммаДней: Число
    для СтрокаОтпуска из ОтпускаСотрудника
        если СтрокаОтпуска.КомпенсацияОтпуска
            СуммаДней += СтрокаОтпуска.КоличествоДнейКомпенсации
        ;
    ;
    если СуммаДней != ИсходноеКоличествоДнейКомпенсации
        пер РазностьДней = СуммаДней - ИсходноеКоличествоДнейКомпенсации
        пер СтрокаОсновногоОтпуска: ПериодыОтпускаСтрока?
        для СтрокаОтпуска из ОтпускаСотрудника
            если СтрокаОтпуска == РедактируемыеДанные
                продолжить
            ;
            если СтрокаОтпуска.ВидОтпуска == ОсновнойОтпуск
                СтрокаОсновногоОтпуска = СтрокаОтпуска
                продолжить
            ;
            знч ДнейКомпенсацииСтроки = Макс(СтрокаОтпуска.КоличествоДнейКомпенсации - РазностьДней, 0)
            знч СписаноДней = СтрокаОтпуска.КоличествоДнейКомпенсации - ДнейКомпенсацииСтроки
            СтрокаОтпуска.КоличествоДнейКомпенсации = ДнейКомпенсацииСтроки
            СтрокаОтпуска.КомпенсацияОтпуска = СтрокаОтпуска.КоличествоДнейКомпенсации != 0
            РазностьДней -= СписаноДней
            если РазностьДней == 0
                прервать
            ;
        ;
        если РазностьДней != 0 и СтрокаОсновногоОтпуска != Неопределено
            знч ДнейКомпенсацииСтроки = Макс(СтрокаОсновногоОтпуска.КоличествоДнейКомпенсации - РазностьДней, 0)
            знч СписаноДней = СтрокаОсновногоОтпуска.КоличествоДнейКомпенсации - ДнейКомпенсацииСтроки
            СтрокаОсновногоОтпуска.КоличествоДнейКомпенсации = ДнейКомпенсацииСтроки
            СтрокаОсновногоОтпуска.КомпенсацияОтпуска = СтрокаОсновногоОтпуска.КоличествоДнейКомпенсации != 0
            РазностьДней -= СписаноДней
        ;
        если РазностьДней != 0
            РедактируемыеДанные.КоличествоДнейКомпенсации = Макс(РедактируемыеДанные.КоличествоДнейКомпенсации - РазностьДней, 0)
        ;
    ;
;

метод ПериодОтсутствияЗаСвойСчетТолькоЧтение(): Булево
    возврат не РедактируемыеДанныеЗаСвойСчет.Использовать или РежимПросмотра
;

метод КоличествоДнейКомпенсацииТолькоЧтение(): Булево
    возврат не РедактируемыеДанные.КомпенсацияОтпуска
;

метод РедактированиеРаспределенияПояснениеЗначение(): Строка
    возврат "Вы можете поменять распределение, выбрав вид отпуска и скорректировав даты и использование отпуска"
;

метод РаспределениеПоВидамОтпусковЗначение(): Строка
    пер ДанныеРаспределения: Строка
    пер РабочееМесто = ИдентификаторыРабочихМест.Получить(Компоненты.РабочееМесто.Значение)
    если ТолькоКомпенсация или РабочееМесто == Неопределено 
        или ИсходнаяДатаНачала == Неопределено или ИсходнаяДатаОкончания == Неопределено
        возврат ДанныеРаспределения
    ;
    знч ДатаНачалаСтрокой = МенеджерДат.ФорматДаты(ИсходнаяДатаНачала)
    знч ДатаОкончанияСтрокой = МенеджерДат.ФорматДаты(ИсходнаяДатаОкончания)
    ДанныеРаспределения = "Отпуск %ДатаНачалаСтрокой - %ДатаОкончанияСтрокой"
    пер КоличествоВидовОтпуска = Компоненты.ВидОтпуска.СписокВыбора.Размер()
    если РабочееМесто != ОсновноеРабочееМесто
        КоличествоВидовОтпуска += 1
    ;
    если КоличествоВидовОтпуска < 2
        возврат ДанныеРаспределения
    ;
    пер ИспользуемыеОтпуска: Массив<ПериодыОтпускаСтрока>
    для СтрокаОтпуска из ЕжегодныйОтпуск
        если СтрокаОтпуска.Использовать и СтрокаОтпуска.РабочееМесто == РабочееМесто
            и СтрокаОтпуска.ДатаНачала != Неопределено и СтрокаОтпуска.ДатаОкончания != Неопределено
            ИспользуемыеОтпуска.Добавить(СтрокаОтпуска)
        ;
    ;
    для СтрокаОтпуска из ОтпускЗаСвойСчет
        если СтрокаОтпуска.Использовать и СтрокаОтпуска.РабочееМесто == РабочееМесто
            и СтрокаОтпуска.ДатаНачала != Неопределено и СтрокаОтпуска.ДатаОкончания != Неопределено
            ИспользуемыеОтпуска.Добавить(СтрокаОтпуска)
        ;
    ;
    если ИспользуемыеОтпуска.Пусто()
        возврат ДанныеРаспределения
    ;
    знч КоличествоИспользуемыхОтпусков = ИспользуемыеОтпуска.Размер()
    знч КоличествоВидовОтпускаСтрокой = "%{КоличествоИспользуемыхОтпусков.ВСтроку()} %{МенеджерСтрок.ТекстПоКоличеству("вид", КоличествоИспользуемыхОтпусков)} отпуска"
    если КоличествоИспользуемыхОтпусков == 1
        ДанныеРаспределения += "\н" + "Использован %КоличествоВидовОтпускаСтрокой"
    иначе
        ДанныеРаспределения += "\н" + "Использовано %КоличествоВидовОтпускаСтрокой"
    ;
    пер УпорядоченныеОтпуска = ИспользуемыеОтпуска.СортироватьПо(Элемент -> Элемент.ДатаНачала!)
    для СтрокаОтпуска из УпорядоченныеОтпуска
        знч ВидОтпускаСтрокой = СтрокаОтпуска.ЗаСвойСчет ? "За свой счет" : СтрокаОтпуска.ВидОтпуска.Представление()
        знч НачалоПериода = МенеджерДат.ФорматДаты(СтрокаОтпуска.ДатаНачала, "дд.ММ.гггг")
        знч ОкончаниеПериода = МенеджерДат.ФорматДаты(СтрокаОтпуска.ДатаОкончания, "дд.ММ.гггг")
        ДанныеРаспределения += "\н" + "%НачалоПериода - %ОкончаниеПериода %ВидОтпускаСтрокой"
    ;
    возврат ДанныеРаспределения
;

метод НадписьРезультатПроверкиЗаполненияЗаголовок(): Строка
    возврат РезультатПроверкиЗаполнения
;

метод НадписьРезультатПроверкиЗаполненияВидимость(): Булево
    возврат не РезультатПроверкиЗаполнения.Пусто()
;

метод ПроверитьЗаполнение(): Булево
    РезультатПроверкиЗаполнения = ""
    пер РезультатПроверки: Булево = ПроверитьПериод()
    если не ПроверитьКомпенсацию()
        РезультатПроверки = Ложь
    ;
    возврат РезультатПроверки
;

метод ПроверитьПериод(): Булево
    пер РезультатПроверки = Истина
    если ТолькоКомпенсация или ИсходнаяДатаНачала == Неопределено или ИсходнаяДатаОкончания == Неопределено
        возврат РезультатПроверки
    ;
    для РабочееМесто из РабочиеМеста
        пер ИспользуемыеОтпуска: Массив<ПериодыОтпускаСтрока>
        для СтрокаОтпуска из ЕжегодныйОтпуск
            если СтрокаОтпуска.Использовать и СтрокаОтпуска.РабочееМесто == РабочееМесто.РабочееМесто
                и СтрокаОтпуска.ДатаНачала != Неопределено и СтрокаОтпуска.ДатаОкончания != Неопределено
                ИспользуемыеОтпуска.Добавить(СтрокаОтпуска)
            ;
        ;
        для СтрокаОтпуска из ОтпускЗаСвойСчет
            если СтрокаОтпуска.Использовать и СтрокаОтпуска.РабочееМесто == РабочееМесто.РабочееМесто
                и СтрокаОтпуска.ДатаНачала != Неопределено и СтрокаОтпуска.ДатаОкончания != Неопределено
                ИспользуемыеОтпуска.Добавить(СтрокаОтпуска)
            ;
        ;
        если ИспользуемыеОтпуска.Пусто()
            ДобавитьСообщениеОбОшибке("Не указаны периоды отпусков", РабочееМесто.РабочееМесто)
            РезультатПроверки = Ложь
        ;
        пер УпорядоченныеОтпуска = ИспользуемыеОтпуска.СортироватьПо(Элемент -> Элемент.ДатаНачала!)
        пер ПредыдущаяСтрока: ПериодыОтпускаСтрока? = Неопределено
        для СтрокаОтпуска из УпорядоченныеОтпуска
            если ПредыдущаяСтрока == Неопределено
                ПредыдущаяСтрока = СтрокаОтпуска
                продолжить
            ;
            если СтрокаОтпуска.ДатаНачала <= ПредыдущаяСтрока.ДатаОкончания
                пер ПредыдущийВидОтпуска = ПредыдущаяСтрока.ЗаСвойСчет ? "За свой счет" : ПредыдущаяСтрока.ВидОтпуска.Представление()
                пер ВидОтпускаСтроки = СтрокаОтпуска.ЗаСвойСчет ? "За свой счет" : СтрокаОтпуска.ВидОтпуска.Представление()
                ДобавитьСообщениеОбОшибке("Пересекаются периоды отпусков %ПредыдущийВидОтпуска и %ВидОтпускаСтроки", РабочееМесто.РабочееМесто)
                РезультатПроверки = Ложь
            ;
            если СтрокаОтпуска.ДатаНачала > ПредыдущаяСтрока.ДатаОкончания.ДобавитьДни(1)
                пер НачалоПериода = МенеджерДат.ФорматДаты(ПредыдущаяСтрока.ДатаОкончания.ДобавитьДни(1))
                пер ОкончаниеПериода = МенеджерДат.ФорматДаты(СтрокаОтпуска.ДатаНачала.ДобавитьДни(-1))
                пер СообщениеОбОшибке: Строка
                если НачалоПериода == ОкончаниеПериода
                    СообщениеОбОшибке = "Не указаны данные за %НачалоПериода"
                иначе
                    СообщениеОбОшибке = "Не указаны данные за период %НачалоПериода - %ОкончаниеПериода"
                ;
                ДобавитьСообщениеОбОшибке(СообщениеОбОшибке, РабочееМесто.РабочееМесто)
                РезультатПроверки = Ложь
            ;
            ПредыдущаяСтрока = СтрокаОтпуска
        ;
        пер ДатаНачалаОтпуска = УпорядоченныеОтпуска.Первый().ДатаНачала
        если ДатаНачалаОтпуска > ИсходнаяДатаНачала
            пер НачалоПериода = МенеджерДат.ФорматДаты(ДатаНачалаОтпуска)
            пер ОкончаниеПериода = МенеджерДат.ФорматДаты(ИсходнаяДатаНачала.ДобавитьДни(-1))
            ДобавитьСообщениеОбОшибке("Не указаны данные за период %НачалоПериода - %ОкончаниеПериода", РабочееМесто.РабочееМесто)
            РезультатПроверки = Ложь
        ;
        пер ДатаОкончанияОтпуска = УпорядоченныеОтпуска.Последний().ДатаОкончания
        если ДатаОкончанияОтпуска < ИсходнаяДатаОкончания
            пер НачалоПериода = МенеджерДат.ФорматДаты(ДатаОкончанияОтпуска.ДобавитьДни(1))
            пер ОкончаниеПериода = МенеджерДат.ФорматДаты(ИсходнаяДатаОкончания)
            ДобавитьСообщениеОбОшибке("Не указаны данные за период %НачалоПериода - %ОкончаниеПериода", РабочееМесто.РабочееМесто)
            РезультатПроверки = Ложь
        ;
    ;
    возврат РезультатПроверки
;

метод ДобавитьСообщениеОбОшибке(СообщениеОбОшибке: Строка, РабочееМесто: Сотрудники.Ссылка?)
    если не РезультатПроверкиЗаполнения.Пусто()
        РезультатПроверкиЗаполнения += "\н"
    ;
    если РабочееМестоВидимость()
        пер ПредставлениеРабочегоМеста = ПредставленияРабочихМест.Получить(РабочееМесто)
        РезультатПроверкиЗаполнения += ПредставлениеРабочегоМеста + "\н"
    ;
    РезультатПроверкиЗаполнения += СообщениеОбОшибке
;

метод ПроверитьКомпенсацию(): Булево
    пер РезультатПроверки = Истина
    если ИсходноеКоличествоДнейКомпенсации == 0
        возврат РезультатПроверки
    ;
    для РабочееМесто из РабочиеМеста
        пер ИспользуемыеДни: Число
        для СтрокаОтпуска из ЕжегодныйОтпуск
            если СтрокаОтпуска.КомпенсацияОтпуска и СтрокаОтпуска.РабочееМесто == РабочееМесто.РабочееМесто
                ИспользуемыеДни += СтрокаОтпуска.КоличествоДнейКомпенсации
            ;
        ;
        если ИспользуемыеДни != ИсходноеКоличествоДнейКомпенсации
            ДобавитьСообщениеОбОшибке("Сумма дней компенсации отпуска должна равняться %ИсходноеКоличествоДнейКомпенсации", РабочееМесто.РабочееМесто)
            РезультатПроверки = Ложь
        ;
    ;
    возврат РезультатПроверки
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеПредставленийРабочихМест(РабочиеМеста: Массив<РабочееМесто>): Соответствие<Сотрудники.Ссылка, Строка>
    пер Данные: Соответствие<Сотрудники.Ссылка, Строка>
    пер ОрганизацииРабочихМест = новый Массив<Организации.Ссылка>()
    для РабочееМесто из РабочиеМеста
        если не ОрганизацииРабочихМест.Содержит(РабочееМесто.Организация)
            ОрганизацииРабочихМест.Добавить(РабочееМесто.Организация)
        ;
    ;
    пер ПоказыватьОрганизацию = ОрганизацииРабочихМест.Размер() > 1
    для РабочееМесто из РабочиеМеста
        пер РабочееМестоПредставление: Строка = Сотрудники.ПредставлениеРабочегоМеста(
                                                    РабочееМесто.Позиция, 
                                                    РабочееМесто.Должность, 
                                                    РабочееМесто.МестоВСтруктуреПредприятия, 
                                                    РабочееМесто.Организация, 
                                                    ПоказыватьОрганизацию)
        Данные.Вставить(РабочееМесто.РабочееМесто, РабочееМестоПредставление)
    ;
    возврат Данные
;