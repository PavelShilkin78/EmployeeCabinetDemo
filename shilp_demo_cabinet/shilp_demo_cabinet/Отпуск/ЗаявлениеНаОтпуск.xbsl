
импорт Компания::Согласования
импорт УниверсальныеМеханизмы
импорт ОбщиеСтандартные
импорт ИнтерфейсныеКомпонентыСтандартные
импорт ФизическиеЛица
импорт ВладельцыКабинетов
импорт Компания
импорт ВебApi
импорт КонтрольДоступа
импорт ОбменДанными
импорт ОбщегоНазначения
импорт Отсутствия
импорт Уведомления
импорт УниверсальныеМеханизмы::ШаблоныДокументов
импорт СтандартноеПриложение
импорт Документы

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ПолныйДоступАутентифицированным(этот)]
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ЗаявлениеНаОтпуск.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ЗаявлениеНаОтпуск.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ЗаявлениеНаОтпуск.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияОбъекта: Множество<РазрешениеДоступа>
        Разрешения.Вставить(Элемент, РазрешенияОбъекта)
        
        РазрешенияОбъекта.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПоПолномочиям(
            [Отпуск.ПолномочиеПросмотрОтпусков()],
            Элемент.ФизическоеЛицо))
        РазрешенияОбъекта.ДобавитьВсе(КонтрольДоступа.ЧтениеРедактированиеУдалениеДанныхСправочниковПерсонально([Элемент.ФизическоеЛицо]))
        РазрешенияОбъекта.Добавить(КонтрольДоступа.ЧтениеИнформационнойСистеме(ЗаявлениеНаОтпуск))
    ;
    возврат Разрешения
;

//КонецОбласти

// Контракт СостояниеДокументовПоставщик

@ВПроекте
@Реализация
метод ПослеЗаписиСостоянияДокумента(ТекущееЗначение: СостояниеДокументов.Объект, ПредыдущееЗначение: СостояниеДокументов.Данные, ПараметрыЗаписи: СостояниеДокументов.ПараметрыЗаписи)
    если ТекущееЗначение.Документ это ЗаявлениеНаОтпуск.Ссылка
        если ТекущееЗначение.Состояние == СостоянияДокумента.Черновик и ПредыдущееЗначение.Состояние == СостоянияДокумента.Подготовлен
            если ОбменДанными.ЭтоОтправляемыйДокумент(ТекущееЗначение.Документ как ИсходящиеДанные.Ссылка)
                выбросить новый ОбменДанными.ИсключениеДокументУжеОтправлен("Документ уже отправлен", ТекущееЗначение.Документ)
            ;
            пер СписокПодписавших = СогласованияДокументов.СписокПодписавших(ТекущееЗначение.Документ)
            если не СписокПодписавших.Пусто()
                выбросить новый Согласования.ИсключениеДокументУжеПодписан("Документ уже подписан", ТекущееЗначение.Документ)
            ;
        ;
        
        ЗапланированныеОтсутствия.ПриИзмененииСогласования(ТекущееЗначение.Документ как ЗаявлениеНаОтпуск.Ссылка, ТекущееЗначение.Состояние)
        
        пер НастройкиОтложеннойОтправки = ОбщегоНазначения.НастройкиОтложеннойОтправкиУведомлений()
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        ЗапланированныеЗадания.Создать(&ПослеИзмененияСостоянияДополнение, ТекущееЗначение.Документ как ЗаявлениеНаОтпуск.Ссылка)
            .Настроить(Ключ = МенеджерЗаданий.КлючЗаданияПоСсылке(ТекущееЗначение.Документ, "ИСД"))
            .ЗапланироватьВТранзакции()
        
        ЗапланированныеЗадания.Создать(&ПослеИзмененияСостоянияДополнениеСПаузой,
            ТекущееЗначение.Документ как ЗаявлениеНаОтпуск.Ссылка, ТекущееЗначение.Состояние, ПредыдущееЗначение.Состояние)
            .Настроить(
                Ключ = (новый Ууид().ВСтроку()) + "ИСДП",
                Задержка = Длительность.ИзСекунд(НастройкиОтложеннойОтправки.Задержка))
            .Запланировать()
    ;
;

@ВПроекте
@Реализация
метод ЗаполнитьКартинкиДокументов(ДанныеЗапросов: ЧитаемыйМассив<СостояниеДокументаКомпонентДанных>)
    пер ДокументыЗаявленийНаОтпуск: Массив<ЗаявлениеНаОтпуск.Ссылка>
    пер ДокументыЗаявленийНаПереносИОтменуОтпуска: Массив<ЗаявлениеНаПереносОтпуска.Ссылка|АннулированияЗаявлений.Ссылка>
    
    для Элемент из ДанныеЗапросов
        пер Компонент: СостояниеДокументаКомпонентДанных = Элемент
        если Компонент.Документ это ЗаявлениеНаОтпуск.Ссылка
            ДокументыЗаявленийНаОтпуск.Добавить(Компонент.Документ как ЗаявлениеНаОтпуск.Ссылка)
        иначе если Компонент.Документ это ЗаявлениеНаКомпенсациюОтпуска.Ссылка
            Компонент.Картинка = Ресурс{ПиктограммаКомпенсацииОтпуска.svg}.Ссылка
            Компонент.ЦветКартинки = БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Оранжевый)
        иначе если Компонент.Документ это АннулированияЗаявлений.Ссылка
            ДокументыЗаявленийНаПереносИОтменуОтпуска.Добавить(Компонент.Документ как АннулированияЗаявлений.Ссылка)    
        иначе если Компонент.Документ это ЗаявлениеНаПереносОтпуска.Ссылка
            ДокументыЗаявленийНаПереносИОтменуОтпуска.Добавить(Компонент.Документ как ЗаявлениеНаПереносОтпуска.Ссылка)    
        ; 
    ;
    пер КартинкиДокументовПереносаИОтменыОтпуска: Соответствие<ЗаявлениеНаПереносОтпуска.Ссылка|АннулированияЗаявлений.Ссылка, ДвоичныйОбъект.Ссылка>
    если не ДокументыЗаявленийНаПереносИОтменуОтпуска.Пусто()
        знч Запрос = Запрос{
            Выбрать 
                ЗаявлениеНаПереносОтпуска.Ссылка Как Документ, 
                ЗаявлениеНаПереносОтпуска.ЗаСвойСчет Как ЗаСвойСчет,
                Истина Как ПереносОтпуска
            Из ЗаявлениеНаПереносОтпуска Как ЗаявлениеНаПереносОтпуска
            Где ЗаявлениеНаПереносОтпуска.Ссылка В (%ДокументыЗаявленийНаПереносИОтменуОтпуска)
            Объединить Все
            Выбрать 
                АннулированияЗаявлений.Ссылка Как Документ, 
                ОснованиеОтпуска.ЗаСвойСчет,
                Ложь
            Из АннулированияЗаявлений Как АннулированияЗаявлений
            Левое соединение Аннулирование как Аннулирование
            по АннулированияЗаявлений.Ссылка == Аннулирование.АннулирующийДокумент
            Внутреннее соединение ОснованиеОтпуска как ОснованиеОтпуска
            по Аннулирование.АннулируемыйДокумент == ОснованиеОтпуска.Ссылка
            Где АннулированияЗаявлений.Ссылка В (%ДокументыЗаявленийНаПереносИОтменуОтпуска)}
        исп Результат = Запрос.Выполнить() 
        для РезультатСтрока из Результат
            выбор РезультатСтрока.ПереносОтпуска
            когда Истина
                КартинкиДокументовПереносаИОтменыОтпуска.Вставить(РезультатСтрока.Документ, 
                    РезультатСтрока.ЗаСвойСчет == Истина ? Ресурс{ПиктограммаПереносОтпускаЗаСвойСчет.svg}.Ссылка : Ресурс{ПиктограммаПереносОтпуска.svg}.Ссылка)
            иначе
                КартинкиДокументовПереносаИОтменыОтпуска.Вставить(РезультатСтрока.Документ, 
                    РезультатСтрока.ЗаСвойСчет == Истина ? Ресурс{ПиктограммаОтменаОтпускаЗаСвойСчет.svg}.Ссылка : Ресурс{ПиктограммаОтменаОтпуска.svg}.Ссылка)
            ;
        ;   
    ;
    пер ВидыОтсутствий: Соответствие<ЗаявлениеНаОтпуск.Ссылка, ВидыОтсутствий>
    если не ДокументыЗаявленийНаОтпуск.Пусто()
        знч Запрос = Запрос{
            Выбрать 
                Ссылка Как Документ, 
                Выбор 
                Когда ЗаСвойСчет Тогда ВидыОтсутствий.ОтпускЗаСвойСчет
                Иначе ВидыОтсутствий.Отпуск
                Конец Как ВидОтсутствия
            Из ЗаявлениеНаОтпуск Как ЗаявлениеНаОтпуск
            Где Ссылка В (%ДокументыЗаявленийНаОтпуск)}
        исп Результат = Запрос.Выполнить()
        для РезультатСтрока из Результат
            ВидыОтсутствий.Вставить(РезультатСтрока.Документ, РезультатСтрока.ВидОтсутствия)
        ;
    ;
    пер КартинкиВидовОтсутствий: ЧитаемоеСоответствие<ВидыОтсутствий, ДвоичныйОбъект.Ссылка> = Отсутствия.КартинкиВидовОтсутствий()
    пер ЦветаВидовОтсутствий: ЧитаемоеСоответствие<ВидыОтсутствий, Цвет> = Отсутствия.ЦветаВидовОтсутствий()
    если не КартинкиДокументовПереносаИОтменыОтпуска.Пусто() или не ВидыОтсутствий.Пусто()
        для Компонент из ДанныеЗапросов
            если Компонент.Документ это ЗаявлениеНаОтпуск.Ссылка
                пер Документ: ЗаявлениеНаОтпуск.Ссылка = Компонент.Документ как ЗаявлениеНаОтпуск.Ссылка
                Компонент.Картинка = КартинкиВидовОтсутствий[ВидыОтсутствий[Документ]]
                Компонент.ЦветКартинки = ЦветаВидовОтсутствий[ВидыОтсутствий[Документ]]
            иначе если Компонент.Документ это ЗаявлениеНаПереносОтпуска.Ссылка
                пер Документ: ЗаявлениеНаПереносОтпуска.Ссылка = Компонент.Документ как ЗаявлениеНаПереносОтпуска.Ссылка
                Компонент.Картинка = КартинкиДокументовПереносаИОтменыОтпуска[Документ]
            иначе если Компонент.Документ это АннулированияЗаявлений.Ссылка
                пер Документ: АннулированияЗаявлений.Ссылка = Компонент.Документ как АннулированияЗаявлений.Ссылка
                Компонент.Картинка = КартинкиДокументовПереносаИОтменыОтпуска[Документ]
            ;
        ;
    ;

;

// Конец СостояниеДокументовПоставщик

//Область СлужебныйПрограммныйИнтерфейс

структура ЗаявлениеНаОтпуск
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка
    @JsonСвойство(Имя = "personID")
    пер ФизическоеЛицо: Строка
    @JsonСвойство(Имя = "employerID")
    пер Организация: Строка
    @JsonСвойство(Имя = "dateCreated")
    пер ДатаСоздания: Дата?
    @JsonСвойство(Имя = "startDate")
    пер ДатаНачала: Дата
    @JsonСвойство(Имя = "endDate")
    пер ДатаОкончания: Дата
    @JsonСвойство(Имя = "employeeID")
    пер Сотрудник: Строка
    @JsonСвойство(Имя = "electronicDocumentID")
    пер ЭлектронныйДокумент: Строка
    @JsonСвойство(Имя = "unpaid")
    пер ЗаСвойСчет: Булево
    @JsonСвойство(Имя = "communicationType")
    пер СпособСвязи: ВладельцыКабинетов.СпособСвязиJson?
    @JsonСвойство(Имя = "originalRequestID")
    пер ПервоначальноеЗаявление: Строка?
    @JsonСвойство(Имя = "note")
    пер Комментарий: Строка
    @JsonСвойство(Имя = "leaveEncashment")
    пер КомпенсироватьОтпуск: Булево
    @JsonСвойство(Имя = "leaveEncashmentDays")
    пер ДнейКомпенсации: Число
    @JsonСвойство(Имя = "attachments")
    пер Вложения: Массив<МенеджерФайлов.ДанныеФайлаJson>
    @JsonСвойство(Имя = "document")
    пер Документ: Файлы.ЭлектронныйДокументJson?
    @JsonСвойство(Имя = "deputyInfos")
    пер Заместители: ЧитаемыйМассив<ЗаявлениеНаОтпускЗаместители.ЗаместительНаВремяОтпуска>?
    @JsonСвойство(Имя = "version")
    пер Версия: Число?
;

структура ЗаявлениеНаОтпуск_1_0
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка
    @JsonСвойство(Имя = "personID")
    пер ФизическоеЛицо: Строка
    @JsonСвойство(Имя = "employerID")
    пер Организация: Строка
    @JsonСвойство(Имя = "dateCreated")
    пер ДатаСоздания: Дата?
    @JsonСвойство(Имя = "startDate")
    пер ДатаНачала: Дата
    @JsonСвойство(Имя = "endDate")
    пер ДатаОкончания: Дата
    @JsonСвойство(Имя = "employeeID")
    пер Сотрудник: Строка
    @JsonСвойство(Имя = "electronicDocumentID")
    пер ЭлектронныйДокумент: Строка
    @JsonСвойство(Имя = "unpaid")
    пер ЗаСвойСчет: Булево
    @JsonСвойство(Имя = "communicationType")
    пер СпособСвязи: ВладельцыКабинетов.СпособСвязиJson?
    @JsonСвойство(Имя = "originalRequestID")
    пер ПервоначальноеЗаявление: Строка?
    @JsonСвойство(Имя = "note")
    пер Комментарий: Строка
    @JsonСвойство(Имя = "leaveEncashment")
    пер КомпенсироватьОтпуск: Булево
    @JsonСвойство(Имя = "leaveEncashmentDays")
    пер ДнейКомпенсации: Число
    @JsonСвойство(Имя = "attachments")
    пер Вложения: Массив<МенеджерФайлов.ДанныеФайлаJson>
    @JsonСвойство(Имя = "document")
    пер Документ: Файлы.ЭлектронныйДокументJson?
    @JsonСвойство(Имя = "deputyInfos")
    пер Заместители: ЧитаемыйМассив<ЗаявлениеНаОтпускЗаместители.ЗаместительНаВремяОтпуска>?
    @JsonСвойство(Имя = "version")
    пер Версия: Число?
    @JsonСвойство(Имя = "oneТimeAdditionalVacationPayment")
    пер ОдноразоваяДоплатаКОтпуску: Булево
    @JsonСвойство(Имя = "vacationMaterialAid")
    пер МатериальнаяПомощьКОтпуску: Булево   
;

структура ЗаявлениеНаОтпуск_2_0
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка
    @JsonСвойство(Имя = "personID")
    пер ФизическоеЛицо: Строка
    @JsonСвойство(Имя = "employerID")
    пер Организация: Строка
    @JsonСвойство(Имя = "dateCreated")
    пер ДатаСоздания: Дата?
    @JsonСвойство(Имя = "startDate")
    пер ДатаНачала: Дата
    @JsonСвойство(Имя = "endDate")
    пер ДатаОкончания: Дата
    @JsonСвойство(Имя = "employeeID")
    пер Сотрудник: Строка
    @JsonСвойство(Имя = "electronicDocumentID")
    пер ЭлектронныйДокумент: Строка
    @JsonСвойство(Имя = "unpaid")
    пер ЗаСвойСчет: Булево
    @JsonСвойство(Имя = "communicationType")
    пер СпособСвязи: ВладельцыКабинетов.СпособСвязиJson?
    @JsonСвойство(Имя = "originalRequestID")
    пер ПервоначальноеЗаявление: Строка?
    @JsonСвойство(Имя = "note")
    пер Комментарий: Строка
    @JsonСвойство(Имя = "leaveEncashment")
    пер КомпенсироватьОтпуск: Булево
    @JsonСвойство(Имя = "leaveEncashmentDays")
    пер ДнейКомпенсации: Число
    @JsonСвойство(Имя = "oneТimeAdditionalVacationPayment")
    пер ОдноразоваяДоплатаКОтпуску: Булево
    @JsonСвойство(Имя = "vacationMaterialAid")
    пер МатериальнаяПомощьКОтпуску: Булево   
    @JsonСвойство(Имя = "attachments")
    пер Вложения: Массив<МенеджерФайлов.ДанныеФайлаJson>
    @JsonСвойство(Имя = "document")
    пер Документ: Файлы.ЭлектронныйДокументJson_V2_0?
    @JsonСвойство(Имя = "deputyInfos")
    пер Заместители: ЧитаемыйМассив<ЗаявлениеНаОтпускЗаместители.ЗаместительНаВремяОтпуска>?
    @JsonСвойство(Имя = "version")
    пер Версия: Число?
;

структура ЗаявлениеНаОтпуск_2_1
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка
    @JsonСвойство(Имя = "personID")
    пер ФизическоеЛицо: Строка
    @JsonСвойство(Имя = "employerID")
    пер Организация: Строка
    @JsonСвойство(Имя = "dateCreated")
    пер ДатаСоздания: Дата?
    @JsonСвойство(Имя = "startDate")
    пер ДатаНачала: Дата
    @JsonСвойство(Имя = "endDate")
    пер ДатаОкончания: Дата
    @JsonСвойство(Имя = "employeeID")
    пер Сотрудник: Строка
    @JsonСвойство(Имя = "electronicDocumentID")
    пер ЭлектронныйДокумент: Строка
    @JsonСвойство(Имя = "unpaid")
    пер ЗаСвойСчет: Булево
    @JsonСвойство(Имя = "communicationType")
    пер СпособСвязи: ВладельцыКабинетов.СпособСвязиJson?
    @JsonСвойство(Имя = "originalRequestID")
    пер ПервоначальноеЗаявление: Строка?
    @JsonСвойство(Имя = "note")
    пер Комментарий: Строка
    @JsonСвойство(Имя = "leaveEncashment")
    пер КомпенсироватьОтпуск: Булево
    @JsonСвойство(Имя = "leaveEncashmentDays")
    пер ДнейКомпенсации: Число
    @JsonСвойство(Имя = "oneТimeAdditionalVacationPayment")
    пер ОдноразоваяДоплатаКОтпуску: Булево
    @JsonСвойство(Имя = "vacationMaterialAid")
    пер МатериальнаяПомощьКОтпуску: Булево   
    @JsonСвойство(Имя = "attachments")
    пер Вложения: Массив<МенеджерФайлов.ДанныеФайлаJson>
    @JsonСвойство(Имя = "document")
    пер Документ: Файлы.ЭлектронныйДокументJson_V2_1?
    @JsonСвойство(Имя = "deputyInfos")
    пер Заместители: ЧитаемыйМассив<ЗаявлениеНаОтпускЗаместители.ЗаместительНаВремяОтпуска>?
    @JsonСвойство(Имя = "version")
    пер Версия: Число?
;

структура ЗаявлениеНаОтпуск_3_0
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка
    @JsonСвойство(Имя = "personID")
    пер ФизическоеЛицо: Строка
    @JsonСвойство(Имя = "employerID")
    пер Организация: Строка
    @JsonСвойство(Имя = "dateCreated")
    пер ДатаСоздания: Дата?
    @JsonСвойство(Имя = "startDate")
    пер ДатаНачала: Дата
    @JsonСвойство(Имя = "endDate")
    пер ДатаОкончания: Дата
    @JsonСвойство(Имя = "employeeID")
    пер Сотрудник: Строка
    @JsonСвойство(Имя = "electronicDocumentID")
    пер ЭлектронныйДокумент: Строка
    @JsonСвойство(Имя = "unpaid")
    пер ЗаСвойСчет: Булево
    @JsonСвойство(Имя = "communicationType")
    пер СпособСвязи: ВладельцыКабинетов.СпособСвязиJson?
    @JsonСвойство(Имя = "originalRequestID")
    пер ПервоначальноеЗаявление: Строка?
    @JsonСвойство(Имя = "note")
    пер Комментарий: Строка
    @JsonСвойство(Имя = "leaveEncashment")
    пер КомпенсироватьОтпуск: Булево
    @JsonСвойство(Имя = "leaveEncashmentDays")
    пер ДнейКомпенсации: Число
    @JsonСвойство(Имя = "oneТimeAdditionalVacationPayment")
    пер ОдноразоваяДоплатаКОтпуску: Булево
    @JsonСвойство(Имя = "vacationMaterialAid")
    пер МатериальнаяПомощьКОтпуску: Булево   
    @JsonСвойство(Имя = "attachments")
    пер Вложения: Массив<МенеджерФайлов.ДанныеФайлаJson>
    @JsonСвойство(Имя = "document")
    пер Документ: Файлы.ЭлектронныйДокументJson_V2_1?
    @JsonСвойство(Имя = "deputyInfos")
    пер Заместители: ЧитаемыйМассив<ЗаявлениеНаОтпускЗаместители.ЗаместительНаВремяОтпуска>?
    @JsonСвойство(Имя = "periods")
    пер ПериодыПодробно: ЧитаемыйМассив<ЗаявлениеНаОтпускПериоды.ПериодОтпускаЗаявления>?
    @JsonСвойство(Имя = "version")
    пер Версия: Число?
;

@ВПодсистеме
метод ГруппаИзмененийВJson(ИсходящиеДанные: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>

    пер ОбработкаДанныеЗаявленияВJson: ((ЧитаемоеСоответствие<Строка, Объект?>, ЧитаемыйМассив<ЧитаемоеСоответствие<Строка, Объект?>>?, ЧитаемыйМассив<ПериодыОтпускаСтрока>?, ВебApiСервер.СервисыУпаковкиJson, Булево, Отпуск.СотрудникиОрганизации?)->ЗаявлениеНаОтпуск|ЗаявлениеНаОтпуск_1_0|ЗаявлениеНаОтпуск_2_0|ЗаявлениеНаОтпуск_2_1|ЗаявлениеНаОтпуск_3_0) = &ДанныеЗаявленияВJson_v0
    
    если ВерсияФорматаОбмена != Неопределено и ВерсияФорматаОбмена >= Версия{3.0}
        ОбработкаДанныеЗаявленияВJson = &ДанныеЗаявленияВJson_V3_0
    иначе если ВерсияФорматаОбмена != Неопределено и ВерсияФорматаОбмена >= Версия{2.1}
        ОбработкаДанныеЗаявленияВJson = &ДанныеЗаявленияВJson_V2_1
    иначе если ВерсияФорматаОбмена != Неопределено и ВерсияФорматаОбмена >= Версия{2.0}
        ОбработкаДанныеЗаявленияВJson = &ДанныеЗаявленияВJson_V2_0
    иначе если ВерсияФорматаОбмена != Неопределено и ВерсияФорматаОбмена >= Версия{1.0}
        ОбработкаДанныеЗаявленияВJson = &ДанныеЗаявленияВJson_v1_0
    ;
    
    знч ГруппаИзмененийJson: Массив<Объект?>
    знч Ссылки: Массив<ЗаявлениеНаОтпуск.Ссылка>
    для Ссылка из ИсходящиеДанные
        Ссылки.Добавить(Ссылка как ЗаявлениеНаОтпуск.Ссылка)
    ;
    пер ДанныеЗаместителей: ЧитаемоеСоответствие<ОснованиеОтпуска.Ссылка, Массив<ЧитаемоеСоответствие<Строка, Объект?>>>
        = ЗаявлениеНаОтпускЗаместители.ДанныеЗаместителей(Ссылки)
    пер ДанныеПериодов: ЧитаемоеСоответствие<ОснованиеОтпуска.Ссылка, Массив<ПериодыОтпускаСтрока>>
        = ЗаявлениеНаОтпускПериоды.ДанныеПериодовОтпуска(Ссылки)

    для КлючИЗначение из ДанныеЗаявленийНаОтпуск(ИсходящиеДанные)
        пер ДанныеЗаявления: ЧитаемоеСоответствие<Строка, Объект?> = КлючИЗначение.Значение
        пер ДанныеЗаместителейЗаявления = ДанныеЗаместителей.ПолучитьИлиУмолчание(КлючИЗначение.Ключ)
        пер ДанныеПериодовЗаявления = ДанныеПериодов.ПолучитьИлиУмолчание(КлючИЗначение.Ключ)
        если (ДанныеЗаявления["Сотрудники"] как Массив<Отпуск.СотрудникиОрганизации>).Пусто()
            пер ЗаявлениеСсылка = (ДанныеЗаявления["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка).Ид.ВСтроку()
            Журналирование.ЗарегистрироватьОшибку("ВыгрузкаЗаявленийНаОтпуск", Важность = ВажностьСобытияЖурналаСобытий.Высокая,
                Описание = "В заявлении на отпуск %ЗаявлениеСсылка не указан сотрудник")
        иначе
            для Сотрудник из ДанныеЗаявления["Сотрудники"] как Массив<Отпуск.СотрудникиОрганизации>
                ГруппаИзмененийJson.Добавить(
                    ОбработкаДанныеЗаявленияВJson(ДанныеЗаявления, ДанныеЗаместителейЗаявления, ДанныеПериодовЗаявления, Сервисы, Ложь, Сотрудник))
            ;
        ;
    ;
    возврат {"vacationRequests": ГруппаИзмененийJson}
;

@ВПроекте
метод ПолучитьДанныеJson(Ссылка: ЗаявлениеНаОтпуск.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Объект?
    если Ссылка == Неопределено 
        возврат Неопределено
    ;
     
    возврат ГруппаИзмененийВJson([Ссылка], Сервисы, ВерсияФорматаОбмена)["vacationRequests"]
;

метод ПослеИзмененияСостоянияДополнение(Документ: ЗаявлениеНаОтпуск.Ссылка)
    знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Документ, "ФизическоеЛицо")
    РегистрацияИзменений.ЗарегистрироватьИзменение(Документ, ФизическоеЛицо)
;

метод ПослеИзмененияСостоянияДополнениеСПаузой(Документ: ЗаявлениеНаОтпуск.Ссылка, Состояние: СостоянияДокумента, ПрежнееСостояние: СостоянияДокумента?)
    пер ТекущееСостояние = СостДокументов.СостояниеДокумента(Документ)
    если ТекущееСостояние != Состояние
        возврат
    ;
    пер РеквизитыОтпуска = МенеджерСущности.ЗначенияРеквизитовОбъекта(Документ, 
            ["Ссылка", "ФизическоеЛицо", "ДатаНачала", "ДатаОкончания", "ЗаСвойСчет"])
    если РеквизитыОтпуска == Неопределено
        возврат
    ;
    
    ОбщегоНазначения.ПослеИзмененияСотоянияЗаявки(Документ, Состояние, РеквизитыОтпуска["ФизическоеЛицо"])
    
    СформироватьДвижения(Документ, Состояние, РеквизитыОтпуска["ФизическоеЛицо"])
    ОтправитьИнформационныеУведомленияСотрудникам(РеквизитыОтпуска, Состояние)
;
//Область ПослеПодписания

@ВПроекте
метод ПослеПодписания(Документ: ЗаявлениеНаОтпуск.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего)
    
    знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Документ, "ФизическоеЛицо")
    пер СостояниеДокумента: СостоянияДокумента = СостДокументов.СостояниеДокумента(Документ)
    // Состояние запроса сотрудника уже изменилось (запрос отозван или, напротив, уже обработан) 
    если (ФизическоеЛицо != ДанныеСогласующего.Согласующий и СостояниеДокумента == СостоянияДокумента.Черновик)
        или СостояниеДокумента == СостоянияДокумента.ПолученОтказ
        или СостояниеДокумента == СостоянияДокумента.Аннулирован
        выбросить новый ОбщегоНазначения.ИсключениеНедопустимоеСостояниеЗапроса("Недопустимое состояние документа при подписании", СостояниеДокумента)
    иначе если СостояниеДокумента == СостоянияДокумента.Выполнен
        возврат
    ;
    
    // Документ уже отправлен донор-приложению
    пер РолиПодписантовESS = Согласования.РолиПодписантовПриложения() 
    если РолиПодписантовESS.Содержит(ДанныеСогласующего.Роль) и ОбменДанными.ЭтоОтправляемыйДокумент(Документ)            
        выбросить новый ОбменДанными.ИсключениеДокументУжеОтправлен("Документ уже отправлен", Документ)
    ;
    
    пер НастройкиОтложеннойОтправки = ОбщегоНазначения.НастройкиОтложеннойОтправкиУведомлений()
    МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
    ЗапланированныеЗадания.Создать(&ЗаявлениеНаОтпуск.ПослеПодписанияДополнениеСПаузой,
        Документ, ДанныеСогласующего.Роль, ДанныеСогласующего.НомерШага, ФизическоеЛицо)
        .Настроить(
            Ключ = (новый Ууид().ВСтроку()) + "ОП",
            Задержка = Длительность.ИзСекунд(НастройкиОтложеннойОтправки.Задержка))
        .Запланировать()
;

@ВПроекте
метод ПослеПодписанияДополнениеСПаузой(Документ: ЗаявлениеНаОтпуск.Ссылка, РольСогласующего: РолиПодписантов.Ссылка,
    НомерШагаСогласования: Число, ФизическоеЛицо: ФизическиеЛица.Ссылка)
    
    знч ТекущиеСогласующие = Согласования.ТекущиеСогласующие(Документ, Отпуск.ВидСогласуемогоЗаявленияОтпуск(),
        ФизическоеЛицо)
        
    если РольСогласующего == Согласования.РольПодписантаИсполнитель()
        СостДокументов.УстановитьСостояниеДокумента(Документ, СостоянияДокумента.Выполнен)
    иначе если ТекущиеСогласующие.Пусто()
        РегистрацияИзменений.ЗарегистрироватьИзменение(Документ, ФизическоеЛицо)
        СогласованияДокументов.ПослеПолногоСогласования(Документ)
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Документ, Истина)
        СогласованияДокументов.ЗарегистрироватьПодписиОтправляемогоДокумента(Документ, Истина)
        ОтправитьУведомлениеОПодписании(Документ)
    иначе если ТекущиеСогласующие.Первый().НомерШага > НомерШагаСогласования
        пер РеквизитыОтпуска = МенеджерСущности.ЗначенияРеквизитовОбъекта(Документ, 
            ["Ссылка","ФизическоеЛицо", "ДатаНачала", "ДатаОкончания", "ЗаСвойСчет"])
        ОтправитьУведомленияСогласующим(РеквизитыОтпуска, ТекущиеСогласующие)
    ;
;

//КонецОбласти ПослеПодписания

@ВПодсистеме
метод ДанныеЗаявленияНаОтпуск(ЗаявлениеСсылка: ЗаявлениеНаОтпуск.Ссылка, РабочиеМестаЗаявления: РабочиеМеста? = Неопределено):
    ЧитаемоеСоответствие<Строка, Объект?>?
    
    пер РабочиеМестаЗаявлений: Соответствие<ДокументПоРабочимМестам.Ссылка, РабочиеМеста>?
    если РабочиеМестаЗаявления != Неопределено
        РабочиеМестаЗаявлений = новый Соответствие<ДокументПоРабочимМестам.Ссылка, РабочиеМеста>()
        РабочиеМестаЗаявлений.Вставить(ЗаявлениеСсылка, РабочиеМестаЗаявления)
    ;
    возврат ДанныеЗаявленийНаОтпуск([ЗаявлениеСсылка], РабочиеМестаЗаявлений)[ЗаявлениеСсылка]
;

метод ДанныеЗаявленийНаОтпуск(ЗаявленияСсылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>,
    РабочиеМестаЗаявлений: Соответствие<ДокументПоРабочимМестам.Ссылка, РабочиеМеста>? = Неопределено): 
    ЧитаемоеСоответствие<ЗаявлениеНаОтпуск.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>

    знч Заявления: Массив<ЗаявлениеНаОтпуск.Ссылка>
    для Заявление из ЗаявленияСсылки
        Заявления.Добавить(Заявление как ЗаявлениеНаОтпуск.Ссылка)
    ;
    знч ДанныеЗаявлений: Соответствие<ЗаявлениеНаОтпуск.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    если РабочиеМестаЗаявлений == Неопределено
        РабочиеМестаЗаявлений = РабочиеМестаДокументов.РабочиеМестаЗаявлений(ВебApiСервер.ИсходящиеДанныеКакСсылки(ЗаявленияСсылки))
    ;
    знч ПериодыОтпускаЗаявлений = ЗаявлениеНаОтпускПериоды.ДанныеПериодовОтпуска(Заявления)
    знч Запрос = Запрос{
        Выбрать 
            Ссылка, 
            Дата, 
            ФизическоеЛицо, 
            ДатаНачала, 
            ДатаОкончания,
            КомпенсацияОтпуска,
            КоличествоДнейКомпенсации,
            ЗаСвойСчет, 
            СпособСвязи, 
            Комментарий, 
            ПредставлениеДокумента,
            ПредоставитьЕдиновременнуюВыплатуКОтпуску,
            ПредоставитьМатериальнуюПомощьПриОтпуске
        Из 
            ЗаявлениеНаОтпуск
        Где 
            Ссылка В (%Заявления) 
            И ФизическоеЛицо != Неопределено}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        пер СотрудникиЗаявления = новый Массив<Отпуск.СотрудникиОрганизации>()
        пер ДанныеЗаявления =
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат) как Соответствие<Строка, неизвестно>
        если РабочиеМестаЗаявлений.СодержитКлюч(ДанныеЗаявления["Ссылка"])
            для ДанныеРабочегоМеста из РабочиеМестаЗаявлений[ДанныеЗаявления["Ссылка"]].РабочиеМеста
                если ДанныеРабочегоМеста.Оформление == ОформленияЗаявленийНаОтпуск.Оформлять
                    СотрудникиЗаявления.Добавить(новый Отпуск.СотрудникиОрганизации(
                            ДанныеРабочегоМеста.РабочееМесто, ДанныеРабочегоМеста.Организация))
                ; 
            ;
        ; 
        ДанныеЗаявления.Вставить("Сотрудники", СотрудникиЗаявления)
        ДанныеЗаявления.Вставить("Периоды", 
            ПериодыОтпускаЗаявлений.ПолучитьИлиУмолчание(ДанныеЗаявления["Ссылка"])?.Сортировать(&ЗаявлениеНаОтпускПериоды.КомпараторПериодовОтпуска))
        ДанныеЗаявлений.Вставить(ДанныеЗаявления["Ссылка"], ДанныеЗаявления)
    ;
    возврат ДанныеЗаявлений
;

//КонецОбласти

//Область СлужебныеПроцедурыИФункции

@ВПодсистеме
метод ФизическиеЛицаДокументов(Документы: ЧитаемыйМассив<ЗаявлениеНаОтпуск.Ссылка>): ЧитаемоеСоответствие<ЗаявлениеНаОтпуск.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч ФизическиеЛицаДокументов: Соответствие<ЗаявлениеНаОтпуск.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ФизическоеЛицо
        ИЗ
            ЗаявлениеНаОтпуск
        ГДЕ
            Ссылка в (%Документы)   
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ФизическиеЛицаДокументов.Вставить(СтрокаРезультата.Ссылка, [СтрокаРезультата.ФизическоеЛицо])    
    ;
    возврат ФизическиеЛицаДокументов
;

метод СформироватьДвижения(Документ: ЗаявлениеНаОтпуск.Ссылка, Состояние: СостоянияДокумента, ФизическоеЛицо: ФизическиеЛица.Ссылка?)
    пер ЗаписиОтсутствия: Массив<ЗаписиОтсутствий.ЗаписьОтсутствия>
    если Состояние == СостоянияДокумента.Выполнен
        ЗаполнитьЗаписиОтсутствия(ЗаписиОтсутствия, Документ)
    ;
    ЗаписиОтсутствий.ОбновитьЗаписиОтсутствияДокумента(ЗаписиОтсутствия, Документ)
    // Обновление измененных данных.
    если Состояние == СостоянияДокумента.Выполнен или Состояние == СостоянияДокумента.ПолученОтказ
        ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(ФизическоеЛицо, Истина)
    ;
;

метод ОтправитьУведомленияСогласующим(РеквизитыОтпуска: ЧитаемоеСоответствие<Строка, Объект?>,
    ТекущиеСогласующие: ЧитаемыйМассив<Согласования.ДанныеСогласующего>)
    
    знч Документ = РеквизитыОтпуска["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка 
    для Согласующий из ТекущиеСогласующие
        ОтправитьУведомление(
            Согласующий.Согласующий, 
            Документ, 
            Уведомления.ВидыУведомлений.Согласование, 
            Отпуск.ШаблонСообщения.СогласованиеОтпуска,
            ПараметрыУведомлений(РеквизитыОтпуска, РеквизитыОтпуска["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
        )
        ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(Согласующий.Согласующий, Истина)
    ;
;

метод ОтправитьИнформационныеУведомленияСотрудникам(РеквизитыОтпуска: ЧитаемоеСоответствие<Строка, Объект?>, Состояние: СостоянияДокумента)
    знч Документ = РеквизитыОтпуска["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка 
    знч ФизическоеЛицо = РеквизитыОтпуска["ФизическоеЛицо"] как ФизическиеЛица.Ссылка
    пер СписокУведомляемых = новый Соответствие<Отпуск.ШаблонСообщения, Множество<ФизическиеЛица.Ссылка>>()
    пер УведомляемыеСотрудники = новый Множество<ФизическиеЛица.Ссылка>()
    
    если Состояние == СостоянияДокумента.Выполнен
        знч Уведомляемые = УведомляемыеМенеджер.Уведомляемые(РеквизитыОтпуска["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка?)        
        для ДанныеУведомляемого из Уведомляемые.Уведомляемые
            УведомляемыеСотрудники.Добавить(ДанныеУведомляемого.Уведомляемый!)
        ;
        пер Заместители = ЗаместителиМенеджер.Заместители(РеквизитыОтпуска["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка?, Тип<ЗаявлениеНаОтпускЗаместители.Ссылка>)
        для ДанныеЗаместителя из Заместители.Заместители
            если не УведомляемыеСотрудники.Содержит(ДанныеЗаместителя.Заместитель)
                УведомляемыеСотрудники.Добавить(ДанныеЗаместителя.Заместитель!)
            ;
        ;
        пер УведомляемыеРуководители = ОрганизационнаяСтруктура.УведомляемыеРуководители(ФизическоеЛицо)
        пер Сотрудники = Сотрудники.СотрудникиФизическогоЛица(ФизическоеЛицо)
        если не Сотрудники.Пусто()
            пер Подразделение = МенеджерСущности.ЗначениеРеквизитаОбъекта(Сотрудники[0], "МестоВСтруктуреПредприятия")
            пер Коллеги = ОрганизационнаяСтруктура.ФизическиеЛицаПодразделения(Подразделение)
            Коллеги.Удалить(ФизическоеЛицо)
            для Коллега из Коллеги
                если не УведомляемыеСотрудники.Содержит(Коллега) и не УведомляемыеРуководители.Содержит(Коллега)
                    УведомляемыеСотрудники.Добавить(Коллега)
                ;
            ;
        ;
        СписокУведомляемых.Вставить(Отпуск.ШаблонСообщения.УведомлениеОбОтпуске, УведомляемыеСотрудники)
        СписокУведомляемых.Вставить(Отпуск.ШаблонСообщения.ОтпускСогласован, новый Множество([ФизическоеЛицо]))
        СписокУведомляемых.Вставить(Отпуск.ШаблонСообщения.УведомлениеРуководителюОбОтпуске, УведомляемыеРуководители)
    иначе если Состояние == СостоянияДокумента.ПолученОтказ
        знч ДанныеПодписей = СогласованияДокументов.ДанныеПодписейДокумента(Документ)
        знч РольПодписанта = Согласования.РольПодписантаИсполнитель()
        пер ШаблонСобщения = Отпуск.ШаблонСообщения.ОтпускНеСогласован
        если ДанныеПодписей.ЕстьСоответствия(Данные -> Данные.РольПодписанта == РольПодписанта)
            ШаблонСобщения = Отпуск.ШаблонСообщения.ОтпускНеСогласованКадровойСлужбой
        ;
        СписокУведомляемых.Вставить(ШаблонСобщения, новый Множество([ФизическоеЛицо]))
    ;
    ОтправитьУведомления(
        ОрганизационнаяСтруктура.УведомляемыеРуководители(ФизическоеЛицо), 
        Документ, 
        Уведомления.ВидыУведомлений.ПерсональнаяИнформация,
        СписокУведомляемых,
        ПараметрыУведомлений(РеквизитыОтпуска, ФизическоеЛицо)
    )
;

метод ОтправитьУведомлениеОПодписании(Документ: ЗаявлениеНаОтпуск.Ссылка)
    знч РеквизитыОтпуска: ЧитаемоеСоответствие<Строка, неизвестно> = МенеджерСущности.ЗначенияРеквизитовОбъекта(Документ, 
            ["Ссылка", "ФизическоеЛицо", "ДатаНачала", "ДатаОкончания", "ЗаСвойСчет"])
    знч Получатель: ФизическиеЛица.Ссылка = РеквизитыОтпуска["ФизическоеЛицо"]
    ОтправитьУведомление(
        Получатель, 
        Документ, 
        Уведомления.ВидыУведомлений.ПерсональнаяИнформация, 
        Отпуск.ШаблонСообщения.УведомлениеОПодписании,
        ПараметрыУведомлений(РеквизитыОтпуска, Получатель)
    )
;

метод ОтправитьУведомления(Получатели: Множество<ФизическиеЛица.Ссылка>, Документ: ЗаявлениеНаОтпуск.Ссылка, ВидУведомления: Уведомления.ВидыУведомлений, 
        Уведомляемые: Соответствие<Отпуск.ШаблонСообщения, Множество<ФизическиеЛица.Ссылка>>, Параметры: Соответствие<Строка, Строка>)
    для КлючИЗначение из Уведомляемые
        если не КлючИЗначение.Значение.Пусто()
            для Получатель из КлючИЗначение.Значение
                ОтправитьУведомление(Получатель, Документ, ВидУведомления, КлючИЗначение.Ключ, Параметры)
            ;
        ;
    ;
;

метод ОтправитьУведомление(Получатель: ФизическиеЛица.Ссылка, Документ: ЗаявлениеНаОтпуск.Ссылка, ВидУведомления: Уведомления.ВидыУведомлений,
        СтроковыйРесурс: Отпуск.ШаблонСообщения, Параметры: Соответствие<Строка, Строка>)

    пер ИменаРесурсов = новый Массив<Строка>()
    пер ПрефиксРесурса = СтроковыйРесурс.ВСтроку()
    для Элемент из Уведомления.ВидыТекстов.Элементы()
        ИменаРесурсов.Добавить(ПрефиксРесурса + Элемент.ВСтроку())
    ;
    пер ЗначенияРесурсов = УниверсальныеМеханизмы.ЗначенияРесурсовПодсистемы(Отпуск.ПОДСИСТЕМА_ОТПУСК, ИменаРесурсов)
    пер УниверсальныеПараметры = ОбщегоНазначения.УниверсальныеПараметрыСтроковыхРесурсов(ЗначенияРесурсов, новый ЧитаемоеМножество([Получатель]))
    для ИмяРесурса из ЗначенияРесурсов.Ключи()
        пер Содержание = ОбщегоНазначения.ЗаполнитьУниверсальныеПараметрыВСообщении(ЗначенияРесурсов[ИмяРесурса], УниверсальныеПараметры[Получатель])
        для Параметр из Параметры    
            Содержание = Содержание.Заменить("\%" + Параметр.Ключ + "\%", Параметр.Значение)
        ;
        ЗначенияРесурсов[ИмяРесурса] = Содержание
    ;
    пер ДанныеУведомления = новый УведомленияСервер.ДанныеУведомления(ВидУведомления, Документ)
    пер ТекстыУведомлений = новый УведомленияСервер.ТекстыСообщений(
        ЗначенияРесурсов.ПолучитьИлиУмолчание(ПрефиксРесурса + Уведомления.ВидыТекстов.ТемаПисьма, ""),
        ЗначенияРесурсов.ПолучитьИлиУмолчание(ПрефиксРесурса + Уведомления.ВидыТекстов.ТекстSms, ""),
        ЗначенияРесурсов.ПолучитьИлиУмолчание(ПрефиксРесурса + Уведомления.ВидыТекстов.ТекстPush, ""),
        ЗначенияРесурсов.ПолучитьИлиУмолчание(ПрефиксРесурса + Уведомления.ВидыТекстов.ТекстПисьма, "")
    )
    УведомленияСервер.ОтправитьУведомление(Получатель, ТекстыУведомлений, ДанныеУведомления)
;

метод ПараметрыУведомлений(РеквизитыОтпуска: ЧитаемоеСоответствие<Строка, Объект?>, ФизическоеЛицо: ФизическиеЛица.Ссылка): Соответствие<Строка, Строка>
    знч СотрудникФио = МенеджерСущности.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "Представление")
    знч ЗаСвойСчет = РеквизитыОтпуска["ЗаСвойСчет"] как Булево
    знч ДатаНачала = РеквизитыОтпуска["ДатаНачала"] как Дата?
    знч ДатаОкончания = РеквизитыОтпуска["ДатаОкончания"] как Дата?
    
    знч ДанныеОтказа = СогласованияДокументов.ДанныеПодписейДокумента(РеквизитыОтпуска["Ссылка"], Неопределено, [], РезультатыСогласования.Отказано)
    пер КомментарийПриОтказе = ""
    если не ДанныеОтказа.Пусто()
        КомментарийПриОтказе = ДанныеОтказа.Первый().Комментарий
    ;
    
    знч ПараметрыШаблона: Соответствие<Строка, Строка>
    ПараметрыШаблона.Вставить("СотрудникФио", СотрудникФио)
    ПараметрыШаблона.Вставить("ПредставлениеПериода", МенеджерДат.ПредставлениеПериода(ДатаНачала, ДатаОкончания))
    ПараметрыШаблона.Вставить("ЗаСвойСчет", ЗаСвойСчет ? "за свой счет" : "")
    ПараметрыШаблона.Вставить("КомментарийПриОтказе", КомментарийПриОтказе)
    возврат ПараметрыШаблона
;

@ВПодсистеме
метод УдалитьДокумент(Документ: ЗаявлениеНаОтпуск.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?)
    исп Транзакции.Начать()
    пер СписокПодписавших = СогласованияДокументов.СписокПодписавших(Документ)
    если не СписокПодписавших.Пусто()
        выбросить новый Согласования.ИсключениеДокументУжеПодписан("Документ уже подписан", Документ)
    ;
    СостДокументов.УдалитьСостояниеДокумента(Документ)
    Документ.ЗагрузитьОбъект().Удалить()

    ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(ФизическоеЛицо, Истина)
    пер Руководитель = ОрганизационнаяСтруктура.НепосредственныйРуководительФизическогоЛица(ФизическоеЛицо)
    ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(Руководитель, Истина)
;

метод ЗаполнитьЗаписиОтсутствия(ЗаписиОтсутствия: Массив<ЗаписиОтсутствий.ЗаписьОтсутствия>, ЗаявлениеСсылка: ЗаявлениеНаОтпуск.Ссылка)
    знч ДанныеЗаявления = ЗаявлениеНаОтпуск.ДанныеЗаявленияНаОтпуск(ЗаявлениеСсылка)
    
    пер Отсутствие: ЗаписиОтсутствий.ЗаписьОтсутствия = новый ЗаписиОтсутствий.ЗаписьОтсутствия()
    Отсутствие.ФизическоеЛицо = ДанныеЗаявления["ФизическоеЛицо"] как ФизическиеЛица.Ссылка
    Отсутствие.Причина = (ДанныеЗаявления["ЗаСвойСчет"] как Булево) ?
        ВидыОтсутствий.ОтпускЗаСвойСчет : ВидыОтсутствий.Отпуск
    
    пер ЧасовойПояс: ЧасовойПояс = ВладельцыКабинетов.ЧасовойПоясФизическогоЛица(Отсутствие.ФизическоеЛицо)
        
    Отсутствие.ДатаНачала = ДанныеЗаявления["ДатаНачала"] как Дата
    Отсутствие.ДатаОкончания = ДанныеЗаявления["ДатаОкончания"] как Дата
    Отсутствие.СпособСвязи = ДанныеЗаявления["СпособСвязи"] как СпособыСвязи
    Отсутствие.Документ = ДанныеЗаявления["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка
    Отсутствие.Комментарий = ДанныеЗаявления["Комментарий"] как Строка
    Отсутствие.Внутрисменное = Ложь
    Отсутствие.Начало = новый Момент(ДанныеЗаявления["ДатаНачала"] как Дата, Время{0:0:0}, ЧасовойПояс)
    Отсутствие.Окончание = новый Момент(ДанныеЗаявления["ДатаОкончания"] как Дата, Время{23:59:59}, ЧасовойПояс)
                
    ЗаписиОтсутствия.Добавить(Отсутствие)
;

//КонецОбласти

//Область JSON
метод ДанныеЗаявленияВJson_v0(
        ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
        ДанныеЗаместителейЗаявления: ЧитаемыйМассив<ЧитаемоеСоответствие<Строка, Объект?>>?,
        ДанныеПериодовЗаявления: ЧитаемыйМассив<ПериодыОтпускаСтрока>?,
        Сервисы: ВебApiСервер.СервисыУпаковкиJson, 
        ДляПредставления: Булево, 
        Сотрудник: Отпуск.СотрудникиОрганизации? = Неопределено): ЗаявлениеНаОтпуск

    знч ДанныеВJson = новый ЗаявлениеНаОтпуск((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка).Ид.ВСтроку())
    
    знч ИдентификаторыСсылок = новый Массив<ВходящиеДанные.Ссылка>()
    ИдентификаторыСсылок.Добавить(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    если Сотрудник != Неопределено
        ИдентификаторыСсылок.Добавить(Сотрудник.Сотрудник)
        ИдентификаторыСсылок.Добавить(Сотрудник.Организация)
    ;

    Сервисы.ПолучитьИдентификаторы(ИдентификаторыСсылок)

    ДанныеВJson.ДатаСоздания = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.ФизическоеЛицо = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.ДатаНачала = ДанныеОбъекта["ДатаНачала"] как Дата
    ДанныеВJson.ДатаОкончания = ДанныеОбъекта["ДатаОкончания"] как Дата

    если Сотрудник != Неопределено
        ДанныеВJson.Организация = Сервисы.ПолучитьИдентификатор(Сотрудник.Организация)
        ДанныеВJson.Сотрудник = Сервисы.ПолучитьИдентификатор(Сотрудник.Сотрудник)
        ДанныеВJson.ЭлектронныйДокумент = Файлы.ИдентификаторЭлектронногоДокумента(
            ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка, Сотрудник.Сотрудник)
    ;

    ДанныеВJson.ЗаСвойСчет = ДанныеОбъекта["ЗаСвойСчет"] как Булево
    ДанныеВJson.СпособСвязи = ВладельцыКабинетов.СпособСвязиВJson(ДанныеОбъекта["СпособСвязи"] как СпособыСвязи)
    
    если ДанныеОбъекта["КомпенсацияОтпуска"] как Булево
        пер ОсновнойСотрудник: Сотрудники.Ссылка? = 
            Сотрудники.ОсновнойСотрудникФизическогоЛицаОрганизации(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, Сотрудник.Организация)
        если Сотрудник == Неопределено или Сотрудник.Сотрудник == ОсновнойСотрудник
            ДанныеВJson.КомпенсироватьОтпуск = Истина
            ДанныеВJson.ДнейКомпенсации = ДанныеОбъекта["КоличествоДнейКомпенсации"] как Число
        ;
    ;

    ДанныеВJson.Заместители = ЗаявлениеНаОтпускЗаместители.ДанныеЗаместителейВJson(ДанныеЗаместителейЗаявления, Сервисы)    
    ДанныеВJson.Комментарий = ДанныеОбъекта["Комментарий"] как Строка

    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson(ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка,
        ДляПредставления, Сервисы, ДанныеВJson.ЭлектронныйДокумент)
    
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.Документ = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.Вложения = ДанныеФайлов.Вложения
    ;
    
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.Версия = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка))
    ;

    возврат ДанныеВJson

;

метод ДанныеЗаявленияВJson_v1_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    ДанныеЗаместителейЗаявления: ЧитаемыйМассив<ЧитаемоеСоответствие<Строка, Объект?>>?,
    ДанныеПериодовЗаявления: ЧитаемыйМассив<ПериодыОтпускаСтрока>?,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево, Сотрудник: Отпуск.СотрудникиОрганизации? = Неопределено): ЗаявлениеНаОтпуск_1_0

    знч ДанныеВJson = новый ЗаявлениеНаОтпуск_1_0((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка).Ид.ВСтроку())
    
    знч ИдентификаторыСсылок = новый Массив<ВходящиеДанные.Ссылка>()
    ИдентификаторыСсылок.Добавить(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    если Сотрудник != Неопределено
        ИдентификаторыСсылок.Добавить(Сотрудник.Сотрудник)
        ИдентификаторыСсылок.Добавить(Сотрудник.Организация)
    ;

    Сервисы.ПолучитьИдентификаторы(ИдентификаторыСсылок)

    ДанныеВJson.ДатаСоздания = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.ФизическоеЛицо = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.ДатаНачала = ДанныеОбъекта["ДатаНачала"] как Дата
    ДанныеВJson.ДатаОкончания = ДанныеОбъекта["ДатаОкончания"] как Дата

    если Сотрудник != Неопределено
        ДанныеВJson.Организация = Сервисы.ПолучитьИдентификатор(Сотрудник.Организация)
        ДанныеВJson.Сотрудник = Сервисы.ПолучитьИдентификатор(Сотрудник.Сотрудник)
        ДанныеВJson.ЭлектронныйДокумент = Файлы.ИдентификаторЭлектронногоДокумента(
            ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка, Сотрудник.Сотрудник)
    ;

    ДанныеВJson.ЗаСвойСчет = ДанныеОбъекта["ЗаСвойСчет"] как Булево
    ДанныеВJson.СпособСвязи = ВладельцыКабинетов.СпособСвязиВJson(ДанныеОбъекта["СпособСвязи"] как СпособыСвязи)
    
    если ДанныеОбъекта["КомпенсацияОтпуска"] как Булево
        пер ОсновнойСотрудник: Сотрудники.Ссылка? = 
            Сотрудники.ОсновнойСотрудникФизическогоЛицаОрганизации(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, Сотрудник.Организация)
        если Сотрудник == Неопределено или Сотрудник.Сотрудник == ОсновнойСотрудник
            ДанныеВJson.КомпенсироватьОтпуск = Истина
            ДанныеВJson.ДнейКомпенсации = ДанныеОбъекта["КоличествоДнейКомпенсации"] как Число
        ;
    ;

    ДанныеВJson.Заместители = ЗаявлениеНаОтпускЗаместители.ДанныеЗаместителейВJson(ДанныеЗаместителейЗаявления, Сервисы)
    ДанныеВJson.ОдноразоваяДоплатаКОтпуску = ДанныеОбъекта["ПредоставитьЕдиновременнуюВыплатуКОтпуску"] как Булево
    ДанныеВJson.МатериальнаяПомощьКОтпуску = ДанныеОбъекта["ПредоставитьМатериальнуюПомощьПриОтпуске"] как Булево
    
    
    ДанныеВJson.Комментарий = ДанныеОбъекта["Комментарий"] как Строка

    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson(ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка,
        ДляПредставления, Сервисы, ДанныеВJson.ЭлектронныйДокумент)
        
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.Документ = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.Вложения = ДанныеФайлов.Вложения
    ;
    
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.Версия = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка))
    ;

    возврат ДанныеВJson

;

метод ДанныеЗаявленияВJson_V2_0(
        ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
        ДанныеЗаместителейЗаявления: ЧитаемыйМассив<ЧитаемоеСоответствие<Строка, Объект?>>?,
        ДанныеПериодовЗаявления: ЧитаемыйМассив<ПериодыОтпускаСтрока>?,
        Сервисы: ВебApiСервер.СервисыУпаковкиJson, 
        ДляПредставления: Булево, 
        Сотрудник: Отпуск.СотрудникиОрганизации? = Неопределено): ЗаявлениеНаОтпуск_2_0

    знч ДанныеВJson = новый ЗаявлениеНаОтпуск_2_0(
        (ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка).Ид.ВСтроку())
    
    знч ИдентификаторыСсылок = новый Массив<ВходящиеДанные.Ссылка>()
    ИдентификаторыСсылок.Добавить(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    если Сотрудник != Неопределено
        ИдентификаторыСсылок.Добавить(Сотрудник.Сотрудник)
        ИдентификаторыСсылок.Добавить(Сотрудник.Организация)
    ;

    Сервисы.ПолучитьИдентификаторы(ИдентификаторыСсылок)

    ДанныеВJson.ДатаСоздания = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.ФизическоеЛицо = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.ДатаНачала = ДанныеОбъекта["ДатаНачала"] как Дата
    ДанныеВJson.ДатаОкончания = ДанныеОбъекта["ДатаОкончания"] как Дата

    если Сотрудник != Неопределено
        ДанныеВJson.Организация = Сервисы.ПолучитьИдентификатор(Сотрудник.Организация)
        ДанныеВJson.Сотрудник = Сервисы.ПолучитьИдентификатор(Сотрудник.Сотрудник)
        ДанныеВJson.ЭлектронныйДокумент = Файлы.ИдентификаторЭлектронногоДокумента(
            ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка, Сотрудник.Сотрудник)
    ;

    ДанныеВJson.ЗаСвойСчет = ДанныеОбъекта["ЗаСвойСчет"] как Булево
    ДанныеВJson.СпособСвязи = ВладельцыКабинетов.СпособСвязиВJson(ДанныеОбъекта["СпособСвязи"] как СпособыСвязи)
    
    если ДанныеОбъекта["КомпенсацияОтпуска"] как Булево
        пер ОсновнойСотрудник: Сотрудники.Ссылка? = 
            Сотрудники.ОсновнойСотрудникФизическогоЛицаОрганизации(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, Сотрудник.Организация)
        если Сотрудник == Неопределено или Сотрудник.Сотрудник == ОсновнойСотрудник
            ДанныеВJson.КомпенсироватьОтпуск = Истина
            ДанныеВJson.ДнейКомпенсации = ДанныеОбъекта["КоличествоДнейКомпенсации"] как Число
        ;
    ;

    ДанныеВJson.Заместители = ЗаявлениеНаОтпускЗаместители.ДанныеЗаместителейВJson(ДанныеЗаместителейЗаявления, Сервисы)
    ДанныеВJson.ОдноразоваяДоплатаКОтпуску = ДанныеОбъекта["ПредоставитьЕдиновременнуюВыплатуКОтпуску"] как Булево
    ДанныеВJson.МатериальнаяПомощьКОтпуску = ДанныеОбъекта["ПредоставитьМатериальнуюПомощьПриОтпуске"] как Булево
    ДанныеВJson.Комментарий = ДанныеОбъекта["Комментарий"] как Строка

    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_0(ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка,
        ДляПредставления, Сервисы, ДанныеВJson.ЭлектронныйДокумент)
        
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.Документ = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.Вложения = ДанныеФайлов.Вложения
    ;
    
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.Версия = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка))
    ;
    возврат ДанныеВJson
;

метод ДанныеЗаявленияВJson_V2_1(
        ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
        ДанныеЗаместителейЗаявления: ЧитаемыйМассив<ЧитаемоеСоответствие<Строка, Объект?>>?,
        ДанныеПериодовЗаявления: ЧитаемыйМассив<ПериодыОтпускаСтрока>?,
        Сервисы: ВебApiСервер.СервисыУпаковкиJson, 
        ДляПредставления: Булево, 
        Сотрудник: Отпуск.СотрудникиОрганизации? = Неопределено): ЗаявлениеНаОтпуск_2_1

    знч ДанныеВJson = новый ЗаявлениеНаОтпуск_2_1((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка).Ид.ВСтроку())
    
    знч ИдентификаторыСсылок = новый Массив<ВходящиеДанные.Ссылка>()
    ИдентификаторыСсылок.Добавить(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    если Сотрудник != Неопределено
        ИдентификаторыСсылок.Добавить(Сотрудник.Сотрудник)
        ИдентификаторыСсылок.Добавить(Сотрудник.Организация)
    ;

    Сервисы.ПолучитьИдентификаторы(ИдентификаторыСсылок)

    ДанныеВJson.ДатаСоздания = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.ФизическоеЛицо = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.ДатаНачала = ДанныеОбъекта["ДатаНачала"] как Дата
    ДанныеВJson.ДатаОкончания = ДанныеОбъекта["ДатаОкончания"] как Дата

    если Сотрудник != Неопределено
        ДанныеВJson.Организация = Сервисы.ПолучитьИдентификатор(Сотрудник.Организация)
        ДанныеВJson.Сотрудник = Сервисы.ПолучитьИдентификатор(Сотрудник.Сотрудник)
        ДанныеВJson.ЭлектронныйДокумент = Файлы.ИдентификаторЭлектронногоДокумента(
            ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка, Сотрудник.Сотрудник)
    ;

    ДанныеВJson.ЗаСвойСчет = ДанныеОбъекта["ЗаСвойСчет"] как Булево
    ДанныеВJson.СпособСвязи = ВладельцыКабинетов.СпособСвязиВJson(ДанныеОбъекта["СпособСвязи"] как СпособыСвязи)
    
    если ДанныеОбъекта["КомпенсацияОтпуска"] как Булево
        пер ОсновнойСотрудник: Сотрудники.Ссылка? = 
            Сотрудники.ОсновнойСотрудникФизическогоЛицаОрганизации(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, Сотрудник.Организация)
        если Сотрудник == Неопределено или Сотрудник.Сотрудник == ОсновнойСотрудник
            ДанныеВJson.КомпенсироватьОтпуск = Истина
            ДанныеВJson.ДнейКомпенсации = ДанныеОбъекта["КоличествоДнейКомпенсации"] как Число
        ;
    ;

    ДанныеВJson.Заместители = ЗаявлениеНаОтпускЗаместители.ДанныеЗаместителейВJson(ДанныеЗаместителейЗаявления, Сервисы)
    ДанныеВJson.ОдноразоваяДоплатаКОтпуску = ДанныеОбъекта["ПредоставитьЕдиновременнуюВыплатуКОтпуску"] как Булево
    ДанныеВJson.МатериальнаяПомощьКОтпуску = ДанныеОбъекта["ПредоставитьМатериальнуюПомощьПриОтпуске"] как Булево
    ДанныеВJson.Комментарий = ДанныеОбъекта["Комментарий"] как Строка

    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_1(ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка,
        ДляПредставления, Сервисы, ДанныеВJson.ЭлектронныйДокумент)
        
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.Документ = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.Вложения = ДанныеФайлов.Вложения
    ;
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.Версия = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка))
    ;
    возврат ДанныеВJson
;

метод ДанныеЗаявленияВJson_V3_0(
        ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
        ДанныеЗаместителейЗаявления: ЧитаемыйМассив<ЧитаемоеСоответствие<Строка, Объект?>>?,
        ДанныеПериодовЗаявления: ЧитаемыйМассив<ПериодыОтпускаСтрока>?,
        Сервисы: ВебApiСервер.СервисыУпаковкиJson, 
        ДляПредставления: Булево, 
        Сотрудник: Отпуск.СотрудникиОрганизации? = Неопределено): ЗаявлениеНаОтпуск_3_0

    знч ДанныеВJson = новый ЗаявлениеНаОтпуск_3_0((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка).Ид.ВСтроку())
    
    знч ИдентификаторыСсылок = новый Массив<ВходящиеДанные.Ссылка>()
    ИдентификаторыСсылок.Добавить(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    если Сотрудник != Неопределено
        ИдентификаторыСсылок.Добавить(Сотрудник.Сотрудник)
        ИдентификаторыСсылок.Добавить(Сотрудник.Организация)
    ;

    Сервисы.ПолучитьИдентификаторы(ИдентификаторыСсылок)

    ДанныеВJson.ДатаСоздания = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.ФизическоеЛицо = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.ДатаНачала = ДанныеОбъекта["ДатаНачала"] как Дата
    ДанныеВJson.ДатаОкончания = ДанныеОбъекта["ДатаОкончания"] как Дата

    если Сотрудник != Неопределено
        ДанныеВJson.Организация = Сервисы.ПолучитьИдентификатор(Сотрудник.Организация)
        ДанныеВJson.Сотрудник = Сервисы.ПолучитьИдентификатор(Сотрудник.Сотрудник)
        ДанныеВJson.ЭлектронныйДокумент = Файлы.ИдентификаторЭлектронногоДокумента(
            ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка, Сотрудник.Сотрудник)
    ;

    ДанныеВJson.ЗаСвойСчет = ДанныеОбъекта["ЗаСвойСчет"] как Булево
    ДанныеВJson.СпособСвязи = ВладельцыКабинетов.СпособСвязиВJson(ДанныеОбъекта["СпособСвязи"] как СпособыСвязи)
    
    если ДанныеОбъекта["КомпенсацияОтпуска"] как Булево
        пер ОсновнойСотрудник: Сотрудники.Ссылка? = 
            Сотрудники.ОсновнойСотрудникФизическогоЛицаОрганизации(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, Сотрудник.Организация)
        если Сотрудник == Неопределено или Сотрудник.Сотрудник == ОсновнойСотрудник
            ДанныеВJson.КомпенсироватьОтпуск = Истина
            ДанныеВJson.ДнейКомпенсации = ДанныеОбъекта["КоличествоДнейКомпенсации"] как Число
        ;
    ;

    ДанныеВJson.Заместители = ЗаявлениеНаОтпускЗаместители.ДанныеЗаместителейВJson(ДанныеЗаместителейЗаявления, Сервисы)
    ДанныеВJson.ПериодыПодробно = ЗаявлениеНаОтпускПериоды.ДанныеПериодовОтпускаВJson(ДанныеПериодовЗаявления, Сервисы, Сотрудник?.Сотрудник)
    ДанныеВJson.ОдноразоваяДоплатаКОтпуску = ДанныеОбъекта["ПредоставитьЕдиновременнуюВыплатуКОтпуску"] как Булево
    ДанныеВJson.МатериальнаяПомощьКОтпуску = ДанныеОбъекта["ПредоставитьМатериальнуюПомощьПриОтпуске"] как Булево
    ДанныеВJson.Комментарий = ДанныеОбъекта["Комментарий"] как Строка

    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_1(ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка,
        ДляПредставления, Сервисы, ДанныеВJson.ЭлектронныйДокумент)
        
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.Документ = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.Вложения = ДанныеФайлов.Вложения
    ;
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.Версия = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаОтпуск.Ссылка))
    ;
    возврат ДанныеВJson
;

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: ЗаявлениеНаОтпуск.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, ФизическоеЛицо)
    ;
    пер Состояние = СостДокументов.СостояниеДокумента(Ссылка)
    если Состояние == СостоянияДокумента.Выполнен
        СформироватьДвижения(Ссылка, Состояние, ФизическоеЛицо)  
    ;
    ОбщегоНазначения.ПослеЗаписиОбъектаСЭлектоннымиДокументамиПредставлений(Ссылка, ТребуетсяРегистрацияИзменений)
;

@ВПроекте
метод ПредставленияИдентификаторовЭлектронныхДокументов(ДокументСсылка: ЗаявлениеНаОтпуск.Ссылка): Соответствие<Строка, Строка>
    пер ПредставленияДокументов = новый Соответствие<Строка, Строка>()
    пер Организации = новый Массив<Организации.Ссылка>()
    пер ТаблицаРабочиеМеста = РабочиеМестаДокументов.РабочиеМестаЗаявления(ДокументСсылка)
    если ТаблицаРабочиеМеста.РабочиеМеста.Пусто()
        ПредставленияДокументов.Вставить("", "")
    иначе
        для СтрокаРабочегоМеста из ТаблицаРабочиеМеста.РабочиеМеста
            если не Организации.Содержит(СтрокаРабочегоМеста.Организация)
                Организации.Добавить(СтрокаРабочегоМеста.Организация)
            ;
        ;
        знч ПоказыватьОрганизацию = Организации.Размер() > 1
        для СтрокаРабочегоМеста из ТаблицаРабочиеМеста.РабочиеМеста
            ПредставленияДокументов.Вставить(
                Файлы.ИдентификаторЭлектронногоДокумента(ДокументСсылка, СтрокаРабочегоМеста.РабочееМесто),
                Сотрудники.ПредставлениеРабочегоМеста(СтрокаРабочегоМеста.Позиция, СтрокаРабочегоМеста.Должность,
                    СтрокаРабочегоМеста.МестоВСтруктуреПредприятия, СтрокаРабочегоМеста.Организация, ПоказыватьОрганизацию))
        ;
    ;
    возврат ПредставленияДокументов
;

//КонецОбласти

// Область Обновление
@ВПодсистеме
метод ЗапланированныеОтсутствияНачальноеЗаполнение()
  
   знч Запрос = Запрос{
       Выбрать 
            СостояниеДокументов.Документ Как Ссылка,
             СостояниеДокументов.Состояние Как Состояние,
			 ЗаявлениеНаОтпуск.ФизическоеЛицо КАК ФизическоеЛицо,
             Выбор
                Когда ЗаявлениеНаОтпуск.ЗаСвойСчет
                     Тогда %{ВидыОтсутствий.ОтпускЗаСвойСчет}
                 Иначе %{ВидыОтсутствий.Отпуск}
             Конец Как Причина,
             ЗаявлениеНаОтпуск.ДатаНачала Как ДатаНачала,
			 Неопределено Как ВремяНачала,
             ЗаявлениеНаОтпуск.ДатаОкончания Как ДатаОкончания,
			 Неопределено Как ВремяОкончания,
			 Неопределено КАК ДатаОтсутствия,
			 Истина КАК ПолныйДень,
			 Сотрудники.Организация.ЗаменитьNull(Неопределено) Как Организация 
          Из 
             СостояниеДокументов Как СостояниеДокументов
				Внутреннее Соединение ЗаявлениеНаОтпуск Как ЗаявлениеНаОтпуск
			  По СостояниеДокументов.Документ == ЗаявлениеНаОтпуск.Ссылка
				 И (СостояниеДокументов.Состояние В(%{[СостоянияДокумента.Выполнен, СостоянияДокумента.Подготовлен]}))
			ЛЕВОЕ СОЕДИНЕНИЕ РабочиеМестаДокументов КАК РабочиеМеста
				ПО РабочиеМеста.Владелец == ЗаявлениеНаОтпуск.Ссылка
			ЛЕВОЕ СОЕДИНЕНИЕ Сотрудники КАК Сотрудники ПО 
				РабочиеМеста.РабочееМесто == Сотрудники.Ссылка
    } 

    исп Результат = Запрос.Выполнить()
    для Элемент из Результат
        если Элемент.ПолныйДень
            знч Запись =
                новый ЗапланированныеОтсутствия.Запись(
                    НачалоПериода = Элемент.ДатаНачала.НачалоДня(),
                    ОкончаниеПериода = Элемент.ДатаОкончания.КонецДня(), 
                    ФизическоеЛицо = Элемент.ФизическоеЛицо,
                    ВидОтсутствия = Элемент.Причина, 
                    Организация = Элемент.Организация,
                    Отсутствие = Элемент.Ссылка как ЗаявлениеНаОтпуск.Ссылка, 
                    Внутрисменное = Ложь)
            ЗапланированныеОтсутствия.Записать(Запись)
        ;    
    ;
;

@ВПодсистеме
метод ДанныеДокументаДляПечатнойФормы(ДокументСсылка: Объект, РабочиеМеста: РабочиеМеста?): Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>
    
    пер ДанныеДокумента = новый Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>()
    пер ДанныеЗаявления: Соответствие<Строка, Объект?>? =
        ДанныеЗаявленияНаОтпуск(ДокументСсылка как ЗаявлениеНаОтпуск.Ссылка, РабочиеМеста) как Соответствие<Строка, Объект?>?
    если ДанныеЗаявления != Неопределено
        пер ПоставляемыеДанные = ПредставленияДокументов.ДанныеПредставленияДокумента(ДанныеЗаявления)
        если (ДанныеЗаявления!["Сотрудники"] как Массив<Отпуск.СотрудникиОрганизации>).Пусто()
            ДанныеДокумента.Вставить("", новый ШаблоныДокументовМенеджер.ДанныеПечатныхФорм(Данные = ПоставляемыеДанные))
        иначе
            для СотрудникОрганизации из ДанныеЗаявления!["Сотрудники"] как Массив<Отпуск.СотрудникиОрганизации>
                знч ИдентификаторЭлектронногоДокумента = Файлы.ИдентификаторЭлектронногоДокумента(ДокументСсылка как ЗаявлениеНаОтпуск.Ссылка, СотрудникОрганизации.Сотрудник)
                пер ПоставляемыеДанныеИдентификатора = новый Соответствие<Строка, Объект?>()
                ПоставляемыеДанныеИдентификатора.ВставитьВсе(ПоставляемыеДанные)
                ПоставляемыеДанныеИдентификатора.Вставить("Организация", СотрудникОрганизации.Организация)
                ПоставляемыеДанныеИдентификатора.Вставить("Сотрудник", СотрудникОрганизации.Сотрудник)
                если ДанныеЗаявления["Периоды"] != Неопределено
                    ПоставляемыеДанныеИдентификатора.Вставить("Периоды", (ДанныеЗаявления["Периоды"] как Массив<ПериодыОтпускаСтрока>).Фильтровать(Элемент -> Элемент.РабочееМесто == СотрудникОрганизации.Сотрудник))
                ;
                ДанныеДокумента.Вставить(ИдентификаторЭлектронногоДокумента,
                    новый ШаблоныДокументовМенеджер.ДанныеПечатныхФорм(
                        ИдентификаторЭлектронногоДокумента,
                        ПоставляемыеДанныеИдентификатора))
            ;
        ;
    ;
    ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента)
    возврат ДанныеДокумента 
;

@ВПодсистеме
метод ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента: Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>)
    для ДанныеИдентификатора из ДанныеДокумента
        пер ПоставляемыеДанные = ДанныеИдентификатора.Значение.Данные
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаНаименование", "Заявление")
        
        пер ПериодОтпуска = ""
        если ПоставляемыеДанные["ДанныеДокументаДатаНачала"] == ПоставляемыеДанные["ДанныеДокументаДатаОкончания"]
            ПериодОтпуска = МенеджерДат.ФорматДаты(ПоставляемыеДанные["ДанныеДокументаДатаНачала"] как Дата?, "д ММММ гггг")
        иначе
            знч Начало = МенеджерДат.ФорматДаты(ПоставляемыеДанные["ДанныеДокументаДатаНачала"] как Дата?, "д ММММ гггг")
            знч Окончание = МенеджерДат.ФорматДаты(ПоставляемыеДанные["ДанныеДокументаДатаОкончания"] как Дата?, "д ММММ гггг")
            ПериодОтпуска = "с %{Начало} по %{Окончание} включительно"
        ;
        ПоставляемыеДанные.Вставить("ДанныеДокументаПериодОтпуска", ПериодОтпуска)
        пер Текст: Строка
        пер ПериодыТекст: Строка
        если ПоставляемыеДанные["ДанныеДокументаЗаСвойСчет"] как Булево?
            Текст = "Прошу предоставить отпуск без сохранения заработной платы %ПериодОтпуска"
        иначе если (ПоставляемыеДанные.ПолучитьИлиУмолчание("Периоды") как Массив<ПериодыОтпускаСтрока>?) != Неопределено
            Текст = "Прошу предоставить отпуск"
            пер ПраздничныеДни: Соответствие<Число, Массив<Дата>>
            если ПоставляемыеДанные["ФизическоеЛицо"] != Неопределено
                знч ГрафикРаботы: ГрафикиРаботы.Ссылка? = ОрганизационнаяСтруктура.ГрафикРаботыФизическогоЛица(ПоставляемыеДанные["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
                ПраздничныеДни = ГрафикиРаботы.ПраздничныеДниГрафикаРаботы(ГрафикРаботы)
            ;
            для СтрокаОтпуска из ПоставляемыеДанные["Периоды"] как Массив<ПериодыОтпускаСтрока>
                Текст += "\н"
                ПериодыТекст = ПериодыТекст.Пусто() ? "" : ПериодыТекст + "\н"
                пер ПериодВидаОтпуска = ""
                если СтрокаОтпуска.Использовать
                    если СтрокаОтпуска.ДатаНачала == СтрокаОтпуска.ДатаОкончания
                        ПериодВидаОтпуска = "на 1 календарный день " + МенеджерДат.ФорматДаты(СтрокаОтпуска.ДатаНачала, "д ММММ гггг")
                    иначе
                        знч ДлительностьОтпуска: Отпуск.ДлительностьОтпуска = Отпуск.ПродолжительностьОтпуска(СтрокаОтпуска.ДатаНачала, СтрокаОтпуска.ДатаОкончания, ПраздничныеДни)
                        знч КоличествоДней = ДлительностьОтпуска.КалендарныхДней - ДлительностьОтпуска.ПраздничныхДней
                        знч ДнейСтрокой = МенеджерСтрок.ТекстПоКоличеству("День", КоличествоДней)
                        знч ДнейОтпускаСтрокой = "%{КоличествоДней.ВСтроку()} календарных %{ДнейСтрокой.ВНижнийРегистр()}"
                        знч Начало = МенеджерДат.ФорматДаты(СтрокаОтпуска.ДатаНачала, "д ММММ гггг")
                        знч Окончание = МенеджерДат.ФорматДаты(СтрокаОтпуска.ДатаОкончания, "д ММММ гггг")
                        ПериодВидаОтпуска = "с %Начало по %Окончание включительно на %ДнейОтпускаСтрокой"
                    ;
                ;
                знч ВидОтпуска = СтрокаОтпуска.ЗаСвойСчет ? "За свой счет" : СтрокаОтпуска.ВидОтпуска.Представление()
                если СтрокаОтпуска.КомпенсацияОтпуска
                    знч ДнейСтрокой = МенеджерСтрок.ТекстПоКоличеству("День", СтрокаОтпуска.КоличествоДнейКомпенсации)
                    знч ДнейКомпенсацииСтрокой = "%{СтрокаОтпуска.КоличествоДнейКомпенсации.ВСтроку()} %{ДнейСтрокой.ВНижнийРегистр()}"
                    если СтрокаОтпуска.Использовать
                        Текст += "%ВидОтпуска %ПериодВидаОтпуска и компенсацию отпуска за %ДнейКомпенсацииСтрокой"
                        ПериодыТекст += "%ВидОтпуска %ПериодВидаОтпуска и компенсацию отпуска за %ДнейКомпенсацииСтрокой"
                    иначе
                        Текст += "Компенсацию отпуска %ВидОтпуска за %ДнейКомпенсацииСтрокой"
                        ПериодыТекст +="Компенсацию отпуска %ВидОтпуска за %ДнейКомпенсацииСтрокой"
                    ;
                иначе
                    Текст += "%ВидОтпуска %ПериодВидаОтпуска"
                    ПериодыТекст += "%ВидОтпуска %ПериодВидаОтпуска"
                ;
            ;
        иначе если ПоставляемыеДанные["ДанныеДокументаКомпенсацияОтпуска"] как Булево?
            знч ДнейКомпенсации = (ПоставляемыеДанные["ДанныеДокументаКоличествоДнейКомпенсации"] как Число)
            знч ДнейСтрокой = МенеджерСтрок.ТекстПоКоличеству("День", ДнейКомпенсации)
            знч ДнейКомпенсацииСтрокой = "%{ДнейКомпенсации.ВСтроку()} %{ДнейСтрокой.ВНижнийРегистр()}"
            ПоставляемыеДанные.Вставить("ДанныеДокументаДнейКомпенсацииОтпускаСтрокой", ДнейКомпенсацииСтрокой)
            Текст = "Прошу предоставить отпуск %ПериодОтпуска и компенсацию отпуска за %ДнейКомпенсацииСтрокой"
        иначе
            Текст = "Прошу предоставить отпуск %ПериодОтпуска"
        ;
        если ПоставляемыеДанные["ДанныеДокументаПредоставитьЕдиновременнуюВыплатуКОтпуску"] как Булево
            Текст = "%Текст, единовременную выплату к отпуску"
        ;
        если ПоставляемыеДанные["ДанныеДокументаПредоставитьМатериальнуюПомощьПриОтпуске"] как Булево
            Текст = "%Текст, материальную помощь к отпуску"
        ;
        
        знч Заместители = ЗаместителиМенеджер.ТекстПредставленияЗаместителей(
            ПоставляемыеДанные["ДанныеДокументаСсылка"] как ЗаявлениеНаОтпуск.Ссылка, Тип<ЗаявлениеНаОтпускЗаместители.Ссылка>)
        ПоставляемыеДанные.Вставить("ДанныеДокументаЗаместители", Заместители)
        если не Заместители.Пусто()
            Текст = "%Текст\н%Заместители."
        ;
        
        Текст = ПредставленияДокументов.ТекстДокументаДополненныйКомментарием(Текст, ПоставляемыеДанные["ДанныеДокументаКомментарий"] как Строка)
        
        знч ОписаниеВложений = ПрисоединенныеФайлыМенеджер.ТекстОписанияПриложенныхФайлов(ПоставляемыеДанные["ДанныеДокументаСсылка"] как ЗаявлениеНаОтпуск.Ссылка)
        ПоставляемыеДанные.Вставить("ДанныеДокументаВложения", ОписаниеВложений)
        Текст = ПрисоединенныеФайлыМенеджер.ТекстCОписаниемПриложенныхФайлов(Текст, ОписаниеВложений)
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаТекст", Текст)
            
        ПоставляемыеДанные.Вставить("ДанныеДокументаЕстьУведомляемые", Ложь)
        ПоставляемыеДанные.Вставить("ДанныеДокументаЕстьЗаместители", Ложь)
        ПоставляемыеДанные.Вставить("ДанныеДокументаПериодыТекст", ПериодыТекст)
                
    ;
;

@ВПодсистеме
метод ДанныеДокументаДляПодготовкиОписаний(СсылкаНаДокумент: Сущность.Ключ): Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>
    
    пер ДанныеДокумента = новый Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>()
    знч ДанныеЗаявления = ДанныеЗаявленияНаОтпуск(СсылкаНаДокумент как ЗаявлениеНаОтпуск.Ссылка)
    пер Наименование = "Заявление на отпуск"
    пер Код = ШаблоныДокументов.КОД_ДОКУМЕНТА_КЭДО_ПРОЧЕЕ
    если ДанныеЗаявления["ЗаСвойСчет"] как Булево?
        Наименование = "Заявление работника о предоставлении отпуска без сохранения заработной платы"
        Код = "02.015"
    ;
    если (ДанныеЗаявления["Сотрудники"] как Массив<Отпуск.СотрудникиОрганизации>).Пусто()
        ДанныеДокумента.Вставить("",
            новый Согласования.ДанныеДляПодготовкиОписания(
                Сотрудники.ОрганизацияФизическогоЛицаПоОсновномуМестуРаботы(ДанныеЗаявления["ФизическоеЛицо"] как ФизическиеЛица.Ссылка),
                ДанныеЗаявления["Дата"] как Дата,
                Наименование,
                Код
            )
        )
    иначе
        для СотрудникОрганизации из (ДанныеЗаявления["Сотрудники"] как Массив<Отпуск.СотрудникиОрганизации>)
            знч ИдентификаторЭлектронногоДокумента = Файлы.ИдентификаторЭлектронногоДокумента(СсылкаНаДокумент как ЗаявлениеНаОтпуск.Ссылка, СотрудникОрганизации.Сотрудник)
            ДанныеДокумента.Вставить(ИдентификаторЭлектронногоДокумента,
                новый Согласования.ДанныеДляПодготовкиОписания(
                    СотрудникОрганизации.Организация,
                    ДанныеЗаявления["Дата"] как Дата,
                    Наименование,
                    Код
                )
            )
        ;
    ;
    возврат ДанныеДокумента
;

// КонецОбласти