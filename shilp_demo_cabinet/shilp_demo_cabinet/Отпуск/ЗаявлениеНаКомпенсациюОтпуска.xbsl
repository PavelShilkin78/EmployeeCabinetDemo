импорт ВебApi
импорт УниверсальныеМеханизмы
импорт Компания::Согласования
импорт Компания
импорт КонтрольДоступа
импорт ОбменДанными
импорт ОбщегоНазначения
импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт ВладельцыКабинетов
импорт Уведомления
импорт УниверсальныеМеханизмы::ШаблоныДокументов

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ПолныйДоступАутентифицированным(этот)] 
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ЗаявлениеНаКомпенсациюОтпуска.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ЗаявлениеНаКомпенсациюОтпуска.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ЗаявлениеНаКомпенсациюОтпуска.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ЧтениеИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПоПолномочиям(
            [Отпуск.ПолномочиеПросмотрОтпусков()],
            Элемент.ФизическоеЛицо
        ))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеРедактированиеУдалениеДанныхСправочниковПерсонально([Элемент.ФизическоеЛицо]))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

//КонецОбласти

// Контракт СостояниеДокументовПоставщик

@ВПроекте
@Реализация
метод ПослеЗаписиСостоянияДокумента(ТекущееЗначение: СостояниеДокументов.Объект, ПредыдущееЗначение: СостояниеДокументов.Данные, ПараметрыЗаписи: СостояниеДокументов.ПараметрыЗаписи)
    если ТекущееЗначение.Документ это ЗаявлениеНаКомпенсациюОтпуска.Ссылка
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        ЗапланированныеЗадания.Создать(&ПослеИзмененияСостоянияДополнение,
            ТекущееЗначение.Документ как ЗаявлениеНаКомпенсациюОтпуска.Ссылка, ТекущееЗначение.Состояние, ПредыдущееЗначение.Состояние)
            .Настроить(Ключ = МенеджерЗаданий.КлючЗаданияПоСсылке(ТекущееЗначение.Документ, "ИСД"))
            .ЗапланироватьВТранзакции()
    ;
;

@ВПроекте
@Реализация
метод ЗаполнитьКартинкиДокументов(ДанныеЗапросов: ЧитаемыйМассив<СостояниеДокументаКомпонентДанных>)
;

// Конец СостояниеДокументовПоставщик

// Контракт ФайлыОбработчикСобытий

@ВПроекте
@Реализация
метод ПослеЗаписиФайла(Владелец: ВладелецФайлы.Ссылка, Файл: Файлы.Ссылка)
    если Владелец это ЗаявлениеНаКомпенсациюОтпуска.Ссылка
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        ЗапланированныеЗадания.Создать(&ПослеЗаписиФайлаДополнение, Владелец как ЗаявлениеНаКомпенсациюОтпуска.Ссылка)
            .Настроить(Ключ = МенеджерЗаданий.КлючЗаданияПоСсылке(Владелец, "ПЗФ"))
            .ЗапланироватьВТранзакции()
    ;
;

// Конец ФайлыОбработчикСобытий

//Область СлужебныйПрограммныйИнтерфейс

@ВПодсистеме
метод ГруппаИзмененийВJson(
        Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, 
        Сервисы: ВебApiСервер.СервисыУпаковкиJson,
        ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    
    возврат {"leaveEncashmentRequests": ДанныеЗаявленийВJson(Ссылки, Сервисы, ВерсияФорматаОбмена)}
;

метод ДанныеЗаявленийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ВерсияФорматаОбмена: Версия?, ДляПредставления: Булево = Ложь): Массив<Объект?>
    знч Данные: Массив<Объект?>
    знч Заявления: Массив<ЗаявлениеНаКомпенсациюОтпуска.Ссылка>
    для Ссылка из Ссылки
        Заявления.Добавить(Ссылка как ЗаявлениеНаКомпенсациюОтпуска.Ссылка)
    ;
    знч ДанныеДнейКомпенсации: ЧитаемоеСоответствие<ЗаявлениеНаКомпенсациюОтпуска.Ссылка, Массив<ПериодыОтпускаСтрока>>
        = ЗаявлениеНаКомпенсациюОтпускаДниКомпенсации.ДанныеДнейКомпенсации(Заявления)
    для КлючИЗначение из ДанныеЗаявленийНаКомпенсациюОтпуска(Ссылки)
        пер ДанныеДнейКомпенсацииЗаявления = ДанныеДнейКомпенсации.ПолучитьИлиУмолчание(КлючИЗначение.Ключ)
        если ВерсияФорматаОбмена != Неопределено и ВерсияФорматаОбмена >= Версия{3.0}
            для Сотрудник из КлючИЗначение.Значение["Сотрудники"] как Массив<Отпуск.СотрудникиОрганизации>
                Данные.Добавить(ДанныеЗаявленияНаКомпенсациюОтпускаВJson_V3_0(КлючИЗначение.Значение, ДанныеДнейКомпенсацииЗаявления, Сервисы, ДляПредставления, Сотрудник))
            ;
        иначе если ВерсияФорматаОбмена != Неопределено и ВерсияФорматаОбмена >= Версия{2.1}
            Данные.Добавить(ДанныеЗаявленияНаКомпенсациюОтпускаВJson_V2_1(КлючИЗначение.Значение, ДанныеДнейКомпенсацииЗаявления, Сервисы, ДляПредставления))
        иначе если ВерсияФорматаОбмена != Неопределено и ВерсияФорматаОбмена >= Версия{2.0}
            Данные.Добавить(ДанныеЗаявленияНаКомпенсациюОтпускаВJson_V2_0(КлючИЗначение.Значение, ДанныеДнейКомпенсацииЗаявления, Сервисы, ДляПредставления))
        иначе
            Данные.Добавить(ДанныеЗаявленияНаКомпенсациюОтпускаВJson(КлючИЗначение.Значение, ДанныеДнейКомпенсацииЗаявления, Сервисы, ДляПредставления))
        ;
    ;
    возврат Данные
;

@ВПроекте
метод ПолучитьДанныеJson(Ссылка: ЗаявлениеНаКомпенсациюОтпуска.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Объект?
    если Ссылка == Неопределено 
        возврат Неопределено
    ;
    возврат ГруппаИзмененийВJson([Ссылка], Сервисы, ВерсияФорматаОбмена)["leaveEncashmentRequests"]
;

структура ЗаявлениеНаКомпенсацию
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка
    @JsonСвойство(Имя = "personID")
    обз знч ФизическеЛицо: Строка
    @JsonСвойство(Имя = "leaveEncashmentDays")
    обз знч ДниКомпенсации: Число
    @JsonСвойство(Имя = "dateCreated")
    пер ДатаСоздания: Дата?
    @JsonСвойство(Имя = "note")
    пер Комментарий: Строка?
    @JsonСвойство(Имя = "document")
    пер Документ: Файлы.ЭлектронныйДокументJson?
    @JsonСвойство(Имя = "attachments")
    пер Вложения: Массив<МенеджерФайлов.ДанныеФайлаJson>
    @JsonСвойство(Имя = "employerID")
    пер Организация: Строка?
    @JsonСвойство(Имя = "version")
    пер Версия: Число?
;

структура ЗаявлениеНаКомпенсацию_2_0
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка
    @JsonСвойство(Имя = "personID")
    обз знч ФизическеЛицо: Строка
    @JsonСвойство(Имя = "leaveEncashmentDays")
    обз знч ДниКомпенсации: Число
    @JsonСвойство(Имя = "dateCreated")
    пер ДатаСоздания: Дата?
    @JsonСвойство(Имя = "note")
    пер Комментарий: Строка?
    @JsonСвойство(Имя = "document")
    пер Документ: Файлы.ЭлектронныйДокументJson_V2_0?
    @JsonСвойство(Имя = "attachments")
    пер Вложения: Массив<МенеджерФайлов.ДанныеФайлаJson>
    @JsonСвойство(Имя = "employerID")
    пер Организация: Строка?
    @JsonСвойство(Имя = "version")
    пер Версия: Число?
;

структура ЗаявлениеНаКомпенсацию_2_1
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка
    @JsonСвойство(Имя = "personID")
    обз знч ФизическеЛицо: Строка
    @JsonСвойство(Имя = "leaveEncashmentDays")
    обз знч ДниКомпенсации: Число
    @JsonСвойство(Имя = "dateCreated")
    пер ДатаСоздания: Дата?
    @JsonСвойство(Имя = "note")
    пер Комментарий: Строка?
    @JsonСвойство(Имя = "document")
    пер Документ: Файлы.ЭлектронныйДокументJson_V2_1?
    @JsonСвойство(Имя = "attachments")
    пер Вложения: Массив<МенеджерФайлов.ДанныеФайлаJson>
    @JsonСвойство(Имя = "employerID")
    пер Организация: Строка?
    @JsonСвойство(Имя = "version")
    пер Версия: Число?
;

структура ЗаявлениеНаКомпенсацию_3_0
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка
    @JsonСвойство(Имя = "personID")
    обз знч ФизическеЛицо: Строка
    @JsonСвойство(Имя = "leaveEncashmentDays")
    обз знч ДниКомпенсации: Число
    @JsonСвойство(Имя = "dateCreated")
    пер ДатаСоздания: Дата?
    @JsonСвойство(Имя = "note")
    пер Комментарий: Строка?
    @JsonСвойство(Имя = "document")
    пер Документ: Файлы.ЭлектронныйДокументJson_V2_1?
    @JsonСвойство(Имя = "attachments")
    пер Вложения: Массив<МенеджерФайлов.ДанныеФайлаJson>
    @JsonСвойство(Имя = "employerID")
    пер Организация: Строка?
    @JsonСвойство(Имя = "employeeID")
    пер Сотрудник: Строка
    @JsonСвойство(Имя = "electronicDocumentID")
    пер ЭлектронныйДокумент: Строка
    @JsonСвойство(Имя = "leaveEncashmentDaysComponents")
    пер ДниКомпенсацииПодробно: ЧитаемыйМассив<ЗаявлениеНаКомпенсациюОтпускаДниКомпенсации.ДниКомпенсацииЗаявления>?
    @JsonСвойство(Имя = "version")
    пер Версия: Число?
;

метод ДанныеЗаявленияНаКомпенсациюОтпускаВJson(
        ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, 
        ДанныеДнейКомпенсацииОтпусков: ЧитаемыйМассив<ПериодыОтпускаСтрока>?, 
        Сервисы: ВебApiСервер.СервисыУпаковкиJson, 
        ДляПредставления: Булево): ЗаявлениеНаКомпенсацию
    
    знч ДанныеВJson = новый ЗаявлениеНаКомпенсацию(
        (ДанныеОбъекта["Ссылка"] как ЗаявлениеНаКомпенсациюОтпуска.Ссылка).Ид.ВСтроку(),
        Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка),
        ДанныеОбъекта["КоличествоДнейКомпенсации"] как Число)
    
    ДанныеВJson.ДатаСоздания = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.Комментарий = ДанныеОбъекта["Комментарий"] как Строка
    
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson(
        ДанныеОбъекта["Ссылка"] как ЗаявлениеНаКомпенсациюОтпуска.Ссылка, ДляПредставления, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.Документ = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.Вложения = ДанныеФайлов.Вложения
    ;
    
    ДанныеВJson.Организация = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Организация"] как Организации.Ссылка)
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.Версия = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаКомпенсациюОтпуска.Ссылка))
    ;
    возврат ДанныеВJson 
;

метод ДанныеЗаявленияНаКомпенсациюОтпускаВJson_V2_0(
        ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
        ДанныеДнейКомпенсацииОтпусков: ЧитаемыйМассив<ПериодыОтпускаСтрока>?,
        Сервисы: ВебApiСервер.СервисыУпаковкиJson, 
        ДляПредставления: Булево): ЗаявлениеНаКомпенсацию_2_0
    
    знч ДанныеВJson = новый ЗаявлениеНаКомпенсацию_2_0(
        (ДанныеОбъекта["Ссылка"] как ЗаявлениеНаКомпенсациюОтпуска.Ссылка).Ид.ВСтроку(),
        Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка),
        ДанныеОбъекта["КоличествоДнейКомпенсации"] как Число)
    
    ДанныеВJson.ДатаСоздания = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.Комментарий = ДанныеОбъекта["Комментарий"] как Строка
    
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_0(
        ДанныеОбъекта["Ссылка"] как ЗаявлениеНаКомпенсациюОтпуска.Ссылка, ДляПредставления, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.Документ = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.Вложения = ДанныеФайлов.Вложения
    ;
    
    ДанныеВJson.Организация = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Организация"] как Организации.Ссылка)
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.Версия = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаКомпенсациюОтпуска.Ссылка))
    ;
    возврат ДанныеВJson 
;

метод ДанныеЗаявленияНаКомпенсациюОтпускаВJson_V2_1(
        ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
        ДанныеДнейКомпенсацииОтпусков: ЧитаемыйМассив<ПериодыОтпускаСтрока>?,
        Сервисы: ВебApiСервер.СервисыУпаковкиJson, 
        ДляПредставления: Булево): ЗаявлениеНаКомпенсацию_2_1
    
    знч ДанныеВJson = новый ЗаявлениеНаКомпенсацию_2_1(
        (ДанныеОбъекта["Ссылка"] как ЗаявлениеНаКомпенсациюОтпуска.Ссылка).Ид.ВСтроку(),
        Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка),
        ДанныеОбъекта["КоличествоДнейКомпенсации"] как Число)
    
    ДанныеВJson.ДатаСоздания = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.Комментарий = ДанныеОбъекта["Комментарий"] как Строка
    
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_1(
        ДанныеОбъекта["Ссылка"] как ЗаявлениеНаКомпенсациюОтпуска.Ссылка, ДляПредставления, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.Документ = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.Вложения = ДанныеФайлов.Вложения
    ;
    
    ДанныеВJson.Организация = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Организация"] как Организации.Ссылка)
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.Версия = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаКомпенсациюОтпуска.Ссылка))
    ;
    возврат ДанныеВJson 
;

метод ДанныеЗаявленияНаКомпенсациюОтпускаВJson_V3_0(
        ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
        ДанныеДнейКомпенсацииОтпусков: ЧитаемыйМассив<ПериодыОтпускаСтрока>?,
        Сервисы: ВебApiСервер.СервисыУпаковкиJson, 
        ДляПредставления: Булево, 
        Сотрудник: Отпуск.СотрудникиОрганизации? = Неопределено): ЗаявлениеНаКомпенсацию_3_0
    
    знч ДанныеВJson = новый ЗаявлениеНаКомпенсацию_3_0(
        (ДанныеОбъекта["Ссылка"] как ЗаявлениеНаКомпенсациюОтпуска.Ссылка).Ид.ВСтроку(),
        Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка),
        ДанныеОбъекта["КоличествоДнейКомпенсации"] как Число)
    
    знч ИдентификаторыСсылок = новый Массив<ВходящиеДанные.Ссылка>()
    ИдентификаторыСсылок.Добавить(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    если Сотрудник != Неопределено
        ИдентификаторыСсылок.Добавить(Сотрудник.Сотрудник)
        ИдентификаторыСсылок.Добавить(Сотрудник.Организация)
    ;
    Сервисы.ПолучитьИдентификаторы(ИдентификаторыСсылок)

    ДанныеВJson.ДатаСоздания = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.Комментарий = ДанныеОбъекта["Комментарий"] как Строка
    
    если Сотрудник != Неопределено
        ДанныеВJson.Сотрудник = Сервисы.ПолучитьИдентификатор(Сотрудник.Сотрудник)
        ДанныеВJson.Организация = Сервисы.ПолучитьИдентификатор(Сотрудник.Организация)
        ДанныеВJson.ЭлектронныйДокумент = Файлы.ИдентификаторЭлектронногоДокумента(
            ДанныеОбъекта["Ссылка"] как ЗаявлениеНаКомпенсациюОтпуска.Ссылка, Сотрудник.Сотрудник)
    ;

    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_1(ДанныеОбъекта["Ссылка"] как ЗаявлениеНаКомпенсациюОтпуска.Ссылка, 
        ДляПредставления, Сервисы, ДанныеВJson.ЭлектронныйДокумент)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.Документ = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.Вложения = ДанныеФайлов.Вложения
    ;
    ДанныеВJson.ДниКомпенсацииПодробно = ЗаявлениеНаКомпенсациюОтпускаДниКомпенсации.ДанныеДнейКомпенсацииВJson(ДанныеДнейКомпенсацииОтпусков, Сервисы, Сотрудник?.Сотрудник)
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.Версия = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаКомпенсациюОтпуска.Ссылка))
    ;
    возврат ДанныеВJson 
;

@ВПодсистеме
метод УдалитьДокумент(Документ: ЗаявлениеНаКомпенсациюОтпуска.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?)
    
    исп Транзакции.Начать()
    пер СписокПодписавших = СогласованияДокументов.СписокПодписавших(Документ)
    если не СписокПодписавших.Пусто()
        выбросить новый Согласования.ИсключениеДокументУжеПодписан("Документ уже подписан", Документ)
    ;
    
    СостДокументов.УдалитьСостояниеДокумента(Документ)
    Документ.ЗагрузитьОбъект().Удалить()

    ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(ФизическоеЛицо, Истина)
    
;

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: ЗаявлениеНаКомпенсациюОтпуска.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?, ТребуетсяРегистрацияИзменений: Булево)

    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, ФизическоеЛицо)
    ;
    ОбщегоНазначения.ПослеЗаписиОбъектаСЭлектоннымиДокументамиПредставлений(Ссылка, ТребуетсяРегистрацияИзменений)
;

метод ПослеИзмененияСостоянияДополнение(Документ: ЗаявлениеНаКомпенсациюОтпуска.Ссылка, Состояние: СостоянияДокумента, ПрежнееСостояние: СостоянияДокумента?)
    пер РеквизитыДокумента = МенеджерСущности.ЗначенияРеквизитовОбъекта(Документ, ["Ссылка", "ФизическоеЛицо", "КоличествоДнейКомпенсации"])
    
    знч ФизическоеЛицо: ФизическиеЛица.Ссылка = РеквизитыДокумента["ФизическоеЛицо"] как ФизическиеЛица.Ссылка
    ОбщегоНазначения.ПослеИзмененияСотоянияЗаявки(Документ, Состояние, ФизическоеЛицо)

    ОтправитьУведомлениеПриИзмененииСостояния(РеквизитыДокумента, Состояние)
;

@ВПроекте
метод ПослеПодписания(Документ: ЗаявлениеНаКомпенсациюОтпуска.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего)
    если ДанныеСогласующего.Роль == Согласования.РольПодписантаИсполнитель()
        СостДокументов.УстановитьСостояниеДокумента(Документ, СостоянияДокумента.Выполнен)
        возврат
    ;
    
    знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Документ, "ФизическоеЛицо")
    
    исп Транзакции.Начать()
    ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Документ, Истина)
    РегистрацияИзменений.ЗарегистрироватьИзменение(Документ, ФизическоеЛицо)
    СогласованияДокументов.ЗарегистрироватьПодписиОтправляемогоДокумента(Документ, Истина)
;

метод ПослеЗаписиФайлаДополнение(Документ: ЗаявлениеНаКомпенсациюОтпуска.Ссылка)
    знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Документ, "ФизическоеЛицо")
    РегистрацияИзменений.ЗарегистрироватьИзменение(Документ, ФизическоеЛицо)
;

метод ОтправитьУведомлениеПриИзмененииСостояния(РеквизитыДокумента: ЧитаемоеСоответствие<Строка, Объект?>, Состояние: СостоянияДокумента)
    пер Получатель: ФизическиеЛица.Ссылка? = РеквизитыДокумента["ФизическоеЛицо"] как ФизическиеЛица.Ссылка?
    пер КоличествоДней: Число = РеквизитыДокумента["КоличествоДнейКомпенсации"] как Число
    
    пер Тема: Строка
    пер ТекстСообщения: Строка
    пер ВидУведомления: Уведомления.ВидыУведомлений = Уведомления.ВидыУведомлений.ПерсональнаяИнформация
    пер КоличествоДнейКомпенсации: Строка = КоличествоДней.ВСтроку() + " " + МенеджерСтрок.ТекстПоКоличеству("день", КоличествоДней)
    
    выбор Состояние
    когда СостоянияДокумента.Выполнен
        Тема = "Согласование компенсации отпуска"
        ТекстСообщения = "Согласовано заявление на компенсацию %КоличествоДнейКомпенсации отпуска"
    когда СостоянияДокумента.ПолученОтказ
        Тема = "Компенсация отпуска не согласована"
        ТекстСообщения = "Не согласовано заявление на компенсацию %КоличествоДнейКомпенсации отпуска"
    ;
    
    если не ТекстСообщения.Пусто()
        пер ДанныеУведомления = новый УведомленияСервер.ДанныеУведомления(ВидУведомления, РеквизитыДокумента["Ссылка"] как Справочник.Ссылка?) 
        пер ТекстыУведомлений = новый УведомленияСервер.ТекстыСообщений(Тема, ТекстСообщения, ТекстСообщения, ТекстСообщения)
        УведомленияСервер.ОтправитьУведомление(Получатель, ТекстыУведомлений, ДанныеУведомления)
    ;
    
;

метод ДанныеЗаявленийНаКомпенсациюОтпуска(ЗаявленияСсылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): 
    ЧитаемоеСоответствие<ЗаявлениеНаКомпенсациюОтпуска.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    
    знч РабочиеМестаЗаявлений = РабочиеМестаДокументов.РабочиеМестаЗаявлений(ВебApiСервер.ИсходящиеДанныеКакСсылки(ЗаявленияСсылки))
    возврат ДанныеЗаявленийНаКомпенсациюОтпуска(ЗаявленияСсылки, РабочиеМестаЗаявлений)
;

метод ДанныеЗаявленийНаКомпенсациюОтпуска(ЗаявленияСсылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>,
    РабочиеМестаЗаявлений: Соответствие<ДокументПоРабочимМестам.Ссылка, РабочиеМеста>?):  
    ЧитаемоеСоответствие<ЗаявлениеНаКомпенсациюОтпуска.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    
    знч Заявления: Массив<ЗаявлениеНаКомпенсациюОтпуска.Ссылка>
    для Заявление из ЗаявленияСсылки
        Заявления.Добавить(Заявление как ЗаявлениеНаКомпенсациюОтпуска.Ссылка)
    ;
    знч ДанныеЗаявлений: Соответствие<ЗаявлениеНаКомпенсациюОтпуска.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    если РабочиеМестаЗаявлений == Неопределено или РабочиеМестаЗаявлений.Пусто()
        РабочиеМестаЗаявлений = РабочиеМестаДокументов.РабочиеМестаЗаявлений(ВебApiСервер.ИсходящиеДанныеКакСсылки(ЗаявленияСсылки))
    ;
    знч ДниКомпенсацииЗаявлений = ЗаявлениеНаКомпенсациюОтпускаДниКомпенсации.ДанныеДнейКомпенсации(Заявления)
    знч Запрос = Запрос{
        Выбрать 
            Ссылка, 
            Дата,
            МесяцСоздания, 
            ФизическоеЛицо,
            КоличествоДнейКомпенсации,
            Комментарий, 
            ПредставлениеДокумента,
            Организация
         Из 
            ЗаявлениеНаКомпенсациюОтпуска
         Где 
            Ссылка В (%Заявления) 
            И ФизическоеЛицо != Неопределено}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        пер СотрудникиЗаявления = новый Массив<Отпуск.СотрудникиОрганизации>()
        пер ДанныеЗаявления = 
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат) как Соответствие<Строка, неизвестно>
        если РабочиеМестаЗаявлений.СодержитКлюч(РезультатСтрока.Ссылка)
            для ДанныеРабочегоМеста из РабочиеМестаЗаявлений[РезультатСтрока.Ссылка].РабочиеМеста
                если ДанныеРабочегоМеста.Оформление == ОформленияЗаявленийНаОтпуск.Оформлять
                    СотрудникиЗаявления.Добавить(новый Отпуск.СотрудникиОрганизации(
                            ДанныеРабочегоМеста.РабочееМесто, ДанныеРабочегоМеста.Организация))
                ;
            ;
        ; 
        ДанныеЗаявления.Вставить("Сотрудники", СотрудникиЗаявления)
        ДанныеЗаявления.Вставить("ДниКомпенсацииПодробно", ДниКомпенсацииЗаявлений.ПолучитьИлиУмолчание(ДанныеЗаявления["Ссылка"]))
        ДанныеЗаявлений.Вставить(ДанныеЗаявления["Ссылка"], ДанныеЗаявления)
    ;

    возврат ДанныеЗаявлений
;

//КонецОбласти

@ВПодсистеме
метод ПодписываемыйФайлаДокумента(Документ: ЗаявлениеНаКомпенсациюОтпуска.Ссылка): Файлы.Ссылка?
    возврат Файлы.ЭлектронныйДокументОбъекта(Документ)    
;

@ВПодсистеме
метод ОрганизацияДокумента(Документ: ЗаявлениеНаКомпенсациюОтпуска.Ссылка): Организации.Ссылка?
    знч Запрос = Запрос{
        Выбрать Первые 1
            Организация
        Из
            ЗаявлениеНаКомпенсациюОтпуска
        Где
            Ссылка == %Документ
    }
    исп Результат = Запрос.Выполнить()
    возврат Результат.ЕдинственныйИлиУмолчание().Организация
;

@ВПодсистеме
метод ФизическиеЛицаДокументов(Документы: ЧитаемыйМассив<ЗаявлениеНаКомпенсациюОтпуска.Ссылка>): ЧитаемоеСоответствие<ЗаявлениеНаКомпенсациюОтпуска.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч ФизическиеЛицаДокументов: Соответствие<ЗаявлениеНаКомпенсациюОтпуска.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ФизическоеЛицо
        ИЗ
            ЗаявлениеНаКомпенсациюОтпуска
        ГДЕ
            Ссылка в (%Документы)   
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ФизическиеЛицаДокументов.Вставить(СтрокаРезультата.Ссылка, [СтрокаРезультата.ФизическоеЛицо])    
    ;
    возврат ФизическиеЛицаДокументов
;

@ВПроекте
метод ПредставленияИдентификаторовЭлектронныхДокументов(ДокументСсылка: ЗаявлениеНаКомпенсациюОтпуска.Ссылка): Соответствие<Строка, Строка>
    пер ПредставленияДокументов = новый Соответствие<Строка, Строка>()
    пер Организации = новый Массив<Организации.Ссылка>()
    пер ТаблицаРабочиеМеста = РабочиеМестаДокументов.РабочиеМестаЗаявления(ДокументСсылка)
    знч ФункциональныеОпции = Отпуск.ПолучитьФункциональныеОпции()
    если не ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
        или ТаблицаРабочиеМеста.РабочиеМеста.Пусто()
        ПредставленияДокументов.Вставить("", "")
    иначе
        для СтрокаРабочегоМеста из ТаблицаРабочиеМеста.РабочиеМеста
            если не Организации.Содержит(СтрокаРабочегоМеста.Организация)
                Организации.Добавить(СтрокаРабочегоМеста.Организация)
            ;
        ;
        знч ПоказыватьОрганизацию = Организации.Размер() > 1
        для СтрокаРабочегоМеста из ТаблицаРабочиеМеста.РабочиеМеста
            ПредставленияДокументов.Вставить(
                Файлы.ИдентификаторЭлектронногоДокумента(ДокументСсылка, СтрокаРабочегоМеста.РабочееМесто),
                Сотрудники.ПредставлениеРабочегоМеста(СтрокаРабочегоМеста.Позиция, СтрокаРабочегоМеста.Должность,
                    СтрокаРабочегоМеста.МестоВСтруктуреПредприятия, СтрокаРабочегоМеста.Организация, ПоказыватьОрганизацию))
        ;
    ;
    возврат ПредставленияДокументов
;

метод ДанныеЗаявленияНаКомпенсациюОтпуска(ДокументСсылка: ЗаявлениеНаКомпенсациюОтпуска.Ссылка):
    ЧитаемоеСоответствие<Строка, Объект?>

    знч РабочиеМестаЗаявлений = новый Соответствие<ДокументПоРабочимМестам.Ссылка, РабочиеМеста>()
    возврат ДанныеЗаявленийНаКомпенсациюОтпуска([ДокументСсылка], РабочиеМестаЗаявлений)[ДокументСсылка]   
;

метод ДанныеЗаявленияНаКомпенсациюОтпуска(ДокументСсылка: ЗаявлениеНаКомпенсациюОтпуска.Ссылка, РабочиеМестаЗаявления: РабочиеМеста?):
    ЧитаемоеСоответствие<Строка, Объект?>
    
    если РабочиеМестаЗаявления == Неопределено
        возврат ДанныеЗаявленияНаКомпенсациюОтпуска(ДокументСсылка) 
    ;
       
    знч РабочиеМестаЗаявлений = новый Соответствие<ДокументПоРабочимМестам.Ссылка, РабочиеМеста>()
    РабочиеМестаЗаявлений.Вставить(ДокументСсылка, РабочиеМестаЗаявления)
    возврат ДанныеЗаявленийНаКомпенсациюОтпуска([ДокументСсылка], РабочиеМестаЗаявлений)[ДокументСсылка]
;

@ВПодсистеме
метод ДанныеДокументаДляПечатнойФормы(ДокументСсылка: Объект, РабочиеМеста: РабочиеМеста?): Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>
    
    пер ДанныеДокумента = новый Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>()
    пер ДанныеЗаявления: Соответствие<Строка, Объект?>? =
        ДанныеЗаявленияНаКомпенсациюОтпуска(ДокументСсылка как ЗаявлениеНаКомпенсациюОтпуска.Ссылка, РабочиеМеста) как Соответствие<Строка, Объект?>?
    если ДанныеЗаявления != Неопределено
        пер ПоставляемыеДанные = ПредставленияДокументов.ДанныеПредставленияДокумента(ДанныеЗаявления)
        знч ФункциональныеОпции = Отпуск.ПолучитьФункциональныеОпции()
        если не ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
            или (ДанныеЗаявления!["Сотрудники"] как Массив<Отпуск.СотрудникиОрганизации>).Пусто()
            ДанныеДокумента.Вставить("", новый ШаблоныДокументовМенеджер.ДанныеПечатныхФорм(Данные = ПоставляемыеДанные))
        иначе
            для СотрудникОрганизации из ДанныеЗаявления!["Сотрудники"] как Массив<Отпуск.СотрудникиОрганизации>
                знч ИдентификаторЭлектронногоДокумента = Файлы.ИдентификаторЭлектронногоДокумента(
                    ДокументСсылка как ЗаявлениеНаКомпенсациюОтпуска.Ссылка, СотрудникОрганизации.Сотрудник)
                пер ПоставляемыеДанныеИдентификатора = новый Соответствие<Строка, Объект?>()
                ПоставляемыеДанныеИдентификатора.ВставитьВсе(ПоставляемыеДанные)
                ПоставляемыеДанныеИдентификатора.Вставить("Организация", СотрудникОрганизации.Организация)
                ПоставляемыеДанныеИдентификатора.Вставить("Сотрудник", СотрудникОрганизации.Сотрудник)
                если ДанныеЗаявления["ДниКомпенсацииПодробно"] != Неопределено
                    ПоставляемыеДанныеИдентификатора.Вставить("ДниКомпенсацииПодробно", (ДанныеЗаявления["ДниКомпенсацииПодробно"] как Массив<ПериодыОтпускаСтрока>).Фильтровать(Элемент -> Элемент.РабочееМесто == СотрудникОрганизации.Сотрудник))
                ;
                ДанныеДокумента.Вставить(ИдентификаторЭлектронногоДокумента,
                    новый ШаблоныДокументовМенеджер.ДанныеПечатныхФорм(
                        ИдентификаторЭлектронногоДокумента,
                        ПоставляемыеДанныеИдентификатора))
            ;
        ;
    ;
    ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента)
    возврат ДанныеДокумента 
;

@ВПодсистеме
метод ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента: Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>)
    для ДанныеИдентификатора из ДанныеДокумента
        пер ПоставляемыеДанные = ДанныеИдентификатора.Значение.Данные
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаНаименование", "Заявление")
        пер Текст: Строка
        знч ДнейКомпенсации = (ПоставляемыеДанные["ДанныеДокументаКоличествоДнейКомпенсации"] как Число)
        пер ДнейСтрокой = МенеджерСтрок.ТекстПоКоличеству("День", ДнейКомпенсации)
        пер ДнейКомпенсацииСтрокой = "%{ДнейКомпенсации.ВСтроку()} %{ДнейСтрокой.ВНижнийРегистр()}"
        ПоставляемыеДанные.Вставить("ДанныеДокументаДнейКомпенсацииОтпускаСтрокой", ДнейКомпенсацииСтрокой)
        если (ПоставляемыеДанные.ПолучитьИлиУмолчание("ДниКомпенсацииПодробно") как Массив<ПериодыОтпускаСтрока>?) != Неопределено
            Текст = "Прошу предоставить компенсацию отпуска"
            для СтрокаОтпуска из ПоставляемыеДанные["ДниКомпенсацииПодробно"] как Массив<ПериодыОтпускаСтрока>
                Текст += "\н"
                ДнейСтрокой = МенеджерСтрок.ТекстПоКоличеству("День", СтрокаОтпуска.КоличествоДнейКомпенсации)
                ДнейКомпенсацииСтрокой = "%{СтрокаОтпуска.КоличествоДнейКомпенсации.ВСтроку()} %{ДнейСтрокой.ВНижнийРегистр()}"
                Текст += "%{СтрокаОтпуска.ВидОтпуска.Представление()} за %ДнейКомпенсацииСтрокой"
            ;
        иначе    
            Текст = "Прошу предоставить компенсацию отпуска за %ДнейКомпенсацииСтрокой."
        ;
        Текст = ПредставленияДокументов.ТекстДокументаДополненныйКомментарием(Текст, ПоставляемыеДанные["ДанныеДокументаКомментарий"] как Строка)
        
        знч ОписаниеВложений = ПрисоединенныеФайлыМенеджер.ТекстОписанияПриложенныхФайлов(ПоставляемыеДанные["ДанныеДокументаСсылка"] как ЗаявлениеНаКомпенсациюОтпуска.Ссылка)
        ПоставляемыеДанные.Вставить("ДанныеДокументаВложения", ОписаниеВложений)
        Текст = ПрисоединенныеФайлыМенеджер.ТекстCОписаниемПриложенныхФайлов(Текст, ОписаниеВложений)
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаТекст", Текст)
        
    ;
;

@ВПодсистеме
метод ДанныеДокументаДляПодготовкиОписаний(СсылкаНаДокумент: Сущность.Ключ): Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>
    
    пер ДанныеДокумента = новый Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>()
    знч ДанныеЗаявления = ДанныеЗаявленияНаКомпенсациюОтпуска(СсылкаНаДокумент как ЗаявлениеНаКомпенсациюОтпуска.Ссылка)
    знч Код = "02.014"
    знч Наименование = "Заявление на компенсацию отпуска"
    если (ДанныеЗаявления["Сотрудники"] как Массив<Отпуск.СотрудникиОрганизации>).Пусто()
        ДанныеДокумента.Вставить("",
            новый Согласования.ДанныеДляПодготовкиОписания(
                Сотрудники.ОрганизацияФизическогоЛицаПоОсновномуМестуРаботы(ДанныеЗаявления["ФизическоеЛицо"] как ФизическиеЛица.Ссылка),
                ДанныеЗаявления["Дата"] как Дата,
                Наименование,
                Код
            )
        )
    иначе
        для СотрудникОрганизации из (ДанныеЗаявления["Сотрудники"] как Массив<Отпуск.СотрудникиОрганизации>)
            знч ИдентификаторЭлектронногоДокумента = Файлы.ИдентификаторЭлектронногоДокумента(
                СсылкаНаДокумент как ЗаявлениеНаКомпенсациюОтпуска.Ссылка, СотрудникОрганизации.Сотрудник)
            ДанныеДокумента.Вставить(ИдентификаторЭлектронногоДокумента,
                новый Согласования.ДанныеДляПодготовкиОписания(
                    СотрудникОрганизации.Организация,
                    ДанныеЗаявления["Дата"] как Дата,
                    Наименование,
                    Код
                )
            )
        ;
    ;
    возврат ДанныеДокумента
;
