импорт ВебApi
импорт ИнтерфейсныеКомпонентыСтандартные
импорт ИнтерфейсныеКомпонентыКабинеты
импорт Компания
импорт КонтрольДоступа
импорт ОбменДанными
импорт ОбщегоНазначения
импорт Компания::Согласования
импорт УниверсальныеМеханизмы
импорт ОбщиеСтандартные
импорт Отсутствия
импорт ФизическиеЛица
импорт ВладельцыКабинетов
импорт ЛичныеКабинетыПользователей
импорт УниверсальныеМеханизмы::ШаблоныДокументов
импорт Документы

// Контракт ДокументСотрудникаКомпонент

@ВПроекте
@Реализация
метод УстановитьТекущееЗаявление(Заявление: Объект)
    если Заявление это ЗаявлениеНаОтпуск.Объект
        Объект = Заявление как ЗаявлениеНаОтпуск.Объект
        ПрочитатьОбъект()
    иначе если Заявление это ЗаявлениеНаПереносОтпуска.Объект
        Объект = Заявление как ЗаявлениеНаПереносОтпуска.Объект
        ПрочитатьОбъект()
    ;
;

// Конец ДокументСотрудникаКомпонент

метод ПрочитатьОбъект()
    ДокументОбъектСсылка = 
        (Объект это ЗаявлениеНаОтпуск.Объект) ? (Объект как ЗаявлениеНаОтпуск.Объект).Ссылка : (Объект как ЗаявлениеНаПереносОтпуска.Объект).Ссылка
    ЭтоПереносОтпуска = ДокументОбъектСсылка это ЗаявлениеНаПереносОтпуска.Ссылка
    ДанныеДокумента = ДополнительныеДанныеДокумента(
        Объект.ЭтоНовый(), 
        ДокументОбъектСсылка,
        Объект.ФизическоеЛицо,
        ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо,
        АннулируемыйДокумент
    )
    
    ДанныеСогласующего = ДанныеДокумента.ДанныеСогласующего
    
    пер МаксимальныйШагСогласования: Число
    пер ТекущийШагСогласования: Число
    для Элемент из ДанныеДокумента.ТабличныеЧасти.ТаблицаСогласующие.Согласующие
        если Элемент.Результат == РезультатыСогласования.НаСогласовании
            продолжить
        ;
        МаксимальныйШагСогласования = Макс(МаксимальныйШагСогласования, Элемент.НомерШагаСогласования)
        если Элемент.УчастникСогласования == ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
            ПодписанТекущимФизическимЛицом = Истина
            ТекущийШагСогласования = Элемент.НомерШагаСогласования
        ;
    ;
    
    ПодписанПослеАвтора = ТекущийШагСогласования < МаксимальныйШагСогласования
    
    РежимСогласования = Согласования.ЭтоРежимСогласования(
        ДанныеДокумента.Состояние, ДанныеДокумента.Отправлен, ПодписанТекущимФизическимЛицом, 
        Объект.ФизическоеЛицо, 
        ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо,
        ДанныеСогласующего
    )
    
    РедактированиеЗапрещено = ОбщегоНазначения.РедактированиеЗапрещено(
        ДанныеДокумента.Состояние, 
        Объект.ФизическоеЛицо, 
        ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
    )
    
    если Объект.ДатаНачала != Неопределено и Объект.ДатаОкончания != Неопределено
        ПериодОтсутствия = новый ЗакрытыйДиапазон<Дата>(Объект.ДатаНачала, Объект.ДатаОкончания)
        ДлительностьОтпуска = Отпуск.ПродолжительностьОтпуска(ПериодОтсутствия?.От, ПериодОтсутствия?.До, ДанныеДокумента.ПраздничныеДни)
        если Объект.ЭтоНовый()
            если АннулируемыйДокумент == Неопределено
                ЗаполнитьРаспределениеДнейОтпуска()
            иначе
                СдвинутьПериоды()
            ;
        ;
    ;
    
    если не РежимПросмотра
        ОтслеживатьИзменениеДанных(Компоненты.ПрисоединенныеФайлы, Истина)
        ОтслеживатьИзменениеДанных(Компоненты.Заместители, Истина)
        ОтслеживатьИзменениеДанных(Компоненты.Уведомляемые, Истина)
        ОтслеживатьИзменениеДанных(Компоненты.РабочиеМестаДокумента, Истина)
        ОтслеживатьИзменениеДанных(Компоненты.ДополнительныеРеквизиты, Истина)
        ЗавершеноЧтениеДанных(новый СобытиеКомпонента())
    ;
    ИнтерфейсныеКомпоненты.ИнициализироватьПодчиненныеКомпоненты(Компоненты)
    если Объект.ЭтоНовый()
        Компоненты.Заместители.СобственнаяМодифицированность = не ДанныеДокумента.ТабличныеЧасти.ТаблицаЗаместители.Заместители.Пусто()
        Компоненты.Уведомляемые.СобственнаяМодифицированность = не ДанныеДокумента.ТабличныеЧасти.ТаблицаУведомляемые.Уведомляемые.Пусто()
        Компоненты.РабочиеМестаДокумента.СобственнаяМодифицированность = не ДанныеДокумента.ТабличныеЧасти.ТаблицаРабочиеМеста.РабочиеМеста.Пусто()
        Компоненты.ДополнительныеРеквизиты.СобственнаяМодифицированность = не ДанныеДокумента.ТабличныеЧасти.ДополнительныеРеквизиты.Реквизиты.Пусто()
    иначе
        СброситьМодифицированностьТабличныхЧастей()
        СобственнаяМодифицированность = Ложь
        если ЭтоПереносОтпуска
           ПричинаПереносаОтпуска = (Объект как ЗаявлениеНаПереносОтпуска.Объект).Причина
        ;
    ;
    
    если ЭтоПереносОтпуска и АннулируемыйДокумент == Неопределено
        АннулируемыйДокумент = Аннулирование.АннулируемыйДокумент(ДокументОбъектСсылка как АннулирующийДокумент.Ссылка)
    ;
    
    ЗаполнитьАннулирующийДокумент()
  
;

метод ПереносОтпускаГруппаВидимость(): Булево
    возврат ЭтоПереносОтпуска       
;

метод АннулируемыйОтпускЗаголовок(): Строка
    если АннулируемыйДокумент == Неопределено
        возврат ""
    ;
    знч Представление = Отпуск.ПредставлениеОтпуска(АннулируемыйДокумент как ОснованиеОтпуска.Ссылка)
    возврат "Переносится %Представление"
;

метод СдвинутьПериоды()
    если ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Периоды.Пусто()
        возврат
    ;
    
    знч ПериодыОтпуска = ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Периоды
    пер ПервыйПериодОтпуска = ПериодыОтпуска[0]
    если ПериодыОтпуска.Граница() >= 1
        для ИндексПериодаОтпуска = 1 по ПериодыОтпуска.Граница()
            если ПериодыОтпуска[ИндексПериодаОтпуска].ДатаНачала < ПервыйПериодОтпуска.ДатаНачала
                ПервыйПериодОтпуска = ПериодыОтпуска[ИндексПериодаОтпуска]
            ;
        ;
    ;
    знч ДвигаемВперед = ПериодОтсутствия?.От >= ПервыйПериодОтпуска.ДатаНачала
    пер СдвигДней = 0
    если ДвигаемВперед
        СдвигДней = Отпуск.ПродолжительностьОтпуска(ПервыйПериодОтпуска.ДатаНачала, ПериодОтсутствия?.От,
            ДанныеДокумента.ПраздничныеДни).КалендарныхДней - 1
    иначе
        СдвигДней = Отпуск.ПродолжительностьОтпуска(ПериодОтсутствия?.От, ПервыйПериодОтпуска.ДатаНачала,  
            ДанныеДокумента.ПраздничныеДни).КалендарныхДней - 1
    ;
    
    если не ДвигаемВперед 
        СдвигДней = -СдвигДней
    ;
       
    для Период из ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Периоды
        если Период.ДатаНачала == Неопределено или Период.ДатаОкончания == Неопределено
            продолжить
        ;
        знч КоличествоДней = Отпуск.ПродолжительностьОтпуска(Период.ДатаНачала, Период.ДатаОкончания, ДанныеДокумента.ПраздничныеДни).КалендарныхДней
   
        Период.ДатаНачала = Период.ДатаНачала.ДобавитьДни(СдвигДней)
        Период.ДатаОкончания = Период.ДатаНачала.ДобавитьДни(КоличествоДней -1)
    ;
    
    ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Модифицированность = Истина
;

метод ЗаполнитьАннулирующийДокумент()
    АннулирующийДокумент = АннулирующийДокумент(ДокументОбъектСсылка как АннулируемыйДокумент.Ссылка)
;

метод ОсновноеСодержаниеФормыТолькоЧтение(): Булево
    возврат РежимСогласования или РедактированиеЗапрещено 
;

метод ПодписанТекущимФизическимЛицом(Согласующие: Согласующие): Булево
    для Элемент из Согласующие.Согласующие
        если Элемент.УчастникСогласования == ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
            возврат Истина
        ;
    ;
    возврат Ложь
;

метод ПричинаПриИзмененииЗначения(Источник: ПолеВвода<Строка>, Событие: СобытиеПриИзменении<Строка>)
    если ЭтоПереносОтпуска
        (Объект как ЗаявлениеНаПереносОтпуска.Объект).Причина = ПричинаПереносаОтпуска
    ;
;

метод ПериодОтсутствияПриИзмененииЗначения(Источник: ПолеВводаРасширенноеПериод, Событие: СобытиеПриИзменении<ЗакрытыйДиапазон<Дата>?>)
    
    если ПериодОтсутствия == Неопределено
        возврат
    ;
    
    Объект.ДатаНачала = ПериодОтсутствия?.От
    
    если ЭтоПереносОтпуска 
        Объект.ДатаОкончания = Объект.ДатаНачала.ДобавитьДни(ДлительностьОтпуска.КалендарныхДней-1)
        ПериодОтсутствия = новый ЗакрытыйДиапазон<Дата>(Объект.ДатаНачала, Объект.ДатаОкончания)
        СдвинутьПериоды()
        ДлительностьОтпуска = Отпуск.ПродолжительностьОтпуска(ПериодОтсутствия?.От, ПериодОтсутствия?.До, ДанныеДокумента.ПраздничныеДни)
    иначе
        Объект.ДатаОкончания = ПериодОтсутствия?.До
        ДлительностьОтпуска = Отпуск.ПродолжительностьОтпуска(ПериодОтсутствия?.От, ПериодОтсутствия?.До, ДанныеДокумента.ПраздничныеДни)
        ЗаполнитьРаспределениеДнейОтпуска()
    ;

    СброситьПредупрежденияПериода()
    
;

метод ЗаполнитьРаспределениеДнейОтпуска()
    если Объект.ЗаСвойСчет 
        или Объект.ДатаНачала == Неопределено 
        или Объект.ДатаОкончания == Неопределено
        или Объект.ФизическоеЛицо == Неопределено 
        или ДанныеДокумента == Неопределено
        или не Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
        возврат
    ;
    пер РаспределениеДнейКомпенсации: Массив<ПериодыОтпускаСтрока>
    если Объект.КомпенсацияОтпуска
        РаспределениеДнейКомпенсации = ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Периоды.Фильтровать(Элемент -> Элемент.КомпенсацияОтпуска)
    ;
    знч РабочиеМеста = РабочиеМестаДокументаТаблицаРабочихМест().РабочиеМеста
    ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Периоды = Отпуск.РаспределениеДнейОтпускаЗаявления(Объект.ФизическоеЛицо, Объект.ДатаНачала, Объект.ДатаОкончания, РабочиеМеста, ДанныеДокумента.ПраздничныеДни)
    ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Модифицированность = Истина
    если не РаспределениеДнейКомпенсации.Пусто()
        ДобавитьРаспределениеДнейКомпенсации(РаспределениеДнейКомпенсации)
    ;
;

метод ЗаполнитьРаспределениеДнейКомпенсации()
    если Объект.ЗаСвойСчет 
        или Объект.ФизическоеЛицо == Неопределено 
        или ДанныеДокумента == Неопределено
        или не Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
        возврат
    ;
    знч РабочиеМеста = РабочиеМестаДокументаТаблицаРабочихМест().РабочиеМеста
    знч РаспределениеДнейКомпенсации = Отпуск.РаспределениеДнейКомпенсацииЗаявления(Объект.ФизическоеЛицо, Отпуск.ПараметрыСеанса().ОстаткиОтпусковСотрудников, РабочиеМеста, Объект.КоличествоДнейКомпенсации)
    ДобавитьРаспределениеДнейКомпенсации(РаспределениеДнейКомпенсации)
;

метод ДобавитьРаспределениеДнейКомпенсации(РаспределениеДнейКомпенсации: Массив<ПериодыОтпускаСтрока>)
    для СтрокаОтпуска из ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Периоды
        СтрокаОтпуска.КомпенсацияОтпуска = Ложь
        СтрокаОтпуска.КоличествоДнейКомпенсации = 0
    ;
    для СтрокаКомпенсации из РаспределениеДнейКомпенсации
        пер ДанныеУчтены = Ложь
        для СтрокаОтпуска из ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Периоды
            если СтрокаКомпенсации.РабочееМесто == СтрокаОтпуска.РабочееМесто
                и СтрокаКомпенсации.ВидОтпуска == СтрокаОтпуска.ВидОтпуска
                СтрокаОтпуска.КомпенсацияОтпуска = Истина
                СтрокаОтпуска.КоличествоДнейКомпенсации = СтрокаКомпенсации.КоличествоДнейКомпенсации
                ДанныеУчтены = Истина
                прервать
            ;
        ;
        если не ДанныеУчтены
            пер СтрокаОтпуска = новый ПериодыОтпускаСтрока()
            СтрокаОтпуска.РабочееМесто = СтрокаКомпенсации.РабочееМесто
            СтрокаОтпуска.ВидОтпуска = СтрокаКомпенсации.ВидОтпуска
            СтрокаОтпуска.КомпенсацияОтпуска = Истина
            СтрокаОтпуска.КоличествоДнейКомпенсации = СтрокаКомпенсации.КоличествоДнейКомпенсации
            ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Периоды.Добавить(СтрокаОтпуска)
        ;
    ;
    ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Модифицированность = Истина
;

метод ЗаСвойСчетПриИзмененииЗначения(Источник: ФлажокРасширенный, Событие: СобытиеПриИзменении<Булево?>)
    ЗаполнитьРаспределениеДнейОтпуска()
;

метод ОрганизацияПриИзмененииЗначения(Источник: РабочиеМестаДокументаКомпонент, Событие: СобытиеКомпонента)
   СброситьПредупрежденияПериода()
;

метод КомпенсацияОтпускаГруппаВидимость(): Булево
    возврат Отпуск.ПараметрыСеанса().ФункциональныеОпции.ЗаявленияНаКомпенсациюОтпуска 
                и Клиент.КомпенсацияОтпускаДоступна() 
                и не Объект.ЗаСвойСчет  
;

метод ПеренестиОтменитьПоказывать(): Булево
    возврат (ДанныеДокумента?.Отправлен ?? Ложь)
        и (не Объект.ЭтоНовый()) и АннулирующийДокумент == Неопределено
        и (Объект.ФизическоеЛицо == ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо)
        и Отпуск.ДанныеОснованияОтпуска(ДокументОбъектСсылка).ДатаНачала 
            > Дата.Сейчас().ДобавитьДни(ДнейДоСобытияДляИзмененияЗаявки(Объект.ЗаСвойСчет)-1)
;

@ВПодсистеме
метод МодифицированныеТабличныеЧасти(): ТабличныеЧасти
    пер ТабличныеЧасти: ТабличныеЧасти
    если Компоненты.ПрисоединенныеФайлы.СобственнаяМодифицированность
        ОбщегоНазначения.ОчиститьКлиентскиеДанные(ДанныеДокумента.ТабличныеЧасти.ТаблицаФайлы)    
        ТабличныеЧасти.ТаблицаФайлы = ДанныеДокумента.ТабличныеЧасти.ТаблицаФайлы
    ;
    если Компоненты.Заместители.СобственнаяМодифицированность
        ТабличныеЧасти.ТаблицаЗаместители = ДанныеДокумента.ТабличныеЧасти.ТаблицаЗаместители
    ;
    если Компоненты.Уведомляемые.СобственнаяМодифицированность
        ТабличныеЧасти.ТаблицаУведомляемые = ДанныеДокумента.ТабличныеЧасти.ТаблицаУведомляемые
    ;
    Компоненты.РабочиеМестаДокумента.УстановитьОформление()
    если Компоненты.РабочиеМестаДокумента.СобственнаяМодифицированность
        ТабличныеЧасти.ТаблицаРабочиеМеста = ДанныеДокумента.ТабличныеЧасти.ТаблицаРабочиеМеста
    ;
    если Компоненты.ДополнительныеРеквизиты.СобственнаяМодифицированность
        ТабличныеЧасти.ДополнительныеРеквизиты = ДанныеДокумента.ТабличныеЧасти.ДополнительныеРеквизиты
    ;
    УдалитьПериодыОтпускаСотрудников()
    если ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Модифицированность
        ТабличныеЧасти.ТаблицаПериодыОтпуска = ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска
    ;
    возврат ТабличныеЧасти
;

@ВПодсистеме 
метод СброситьМодифицированностьТабличныхЧастей()
    Компоненты.ПрисоединенныеФайлы.СобственнаяМодифицированность = Ложь
    Компоненты.Заместители.СобственнаяМодифицированность = Ложь
    Компоненты.Уведомляемые.СобственнаяМодифицированность = Ложь
    Компоненты.РабочиеМестаДокумента.СобственнаяМодифицированность = Ложь
    Компоненты.ДополнительныеРеквизиты.СобственнаяМодифицированность = Ложь
;

@ВПодсистеме 
метод ЗаголовокФормы(): Строка
    если ЭтоПереносОтпуска
        возврат (Объект?.ЗаСвойСчет ?? Ложь)? "Перенос отпуска за свой счет" : "Перенос отпуска"
    иначе
        возврат (Объект?.ЗаСвойСчет ?? Ложь)? "Отпуск за свой счет" : "Отпуск"
    ;
;

метод ПериодОтсутствияЗаголовок(): Строка
    возврат ЭтоПереносОтпуска ? "Новые даты отпуска" : "Даты отпуска"
;

метод ЗаявлениеНаОтпускКомпонентЗаголовок(): Строка
    пер ЗаявлениеНаОтпускКомпонентЗаголовок: Строка
    если РежимПросмотра
        ЗаявлениеНаОтпускКомпонентЗаголовок = ЗаголовокФормы()
    ;
    возврат ЗаявлениеНаОтпускКомпонентЗаголовок
;

метод ЗаявлениеНаОтпускКомпонентОтступПоВертикали(): РазмерОтступа | Авто
    возврат РежимПросмотра ? РазмерОтступа.Двойной : РазмерОтступа.Отсутствует
;

метод ФизическоеЛицоВидимость(): Булево
    возврат Объект != Неопределено и Объект.ФизическоеЛицо != ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
;

метод ФизическоеЛицоЗаголовок(): Строка
    пер ФизическоеЛицоЗаголовок: Строка
    если ДанныеДокумента != Неопределено
        ФизическоеЛицоЗаголовок = ДанныеДокумента.ФизическоеЛицоЗаголовок
    ;
    возврат ФизическоеЛицоЗаголовок
;

метод ЗаявлениеНаОтпускКомпонентМаксимальнаяШиринаПоля(): Число
    если КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон 
        возврат 376
    иначе
        возврат 280
    ;
;

метод ЗаявлениеНаОтпускКомпонентМинимальнаяШиринаПоля(): Число
    возврат 280
;

метод ОстатокОтпускаЗаголовок(): Строка
    пер ОстатокОтпускаЗаголовок: Строка
    если Объект.ФизическоеЛицо == Неопределено или ДанныеДокумента == Неопределено
        возврат ОстатокОтпускаЗаголовок
    ;
    если ДлительностьОтпуска.КалендарныхДней == 0 или (ПериодОтсутствия != Неопределено и ПериодОтсутствия.От <= Дата.Сейчас())
        возврат ОстатокОтпускаЗаголовок
    ;
    если Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
        возврат ОстатокОтпускаСотрудниковЗаголовок(ДлительностьОтпуска)
    ;
    пер ОстатокОтпускаНаДатуНачала: Число? = ВызовСервера.ОстатокОтпускаНаДату(Объект.ФизическоеЛицо, ПериодОтсутствия.От)
    если ЭтоПереносОтпуска
        ОстатокОтпускаНаДатуНачала = ОстатокОтпускаНаДатуНачала + РасходОстаткаПереносимогоОтпуска
    ;
    ОстатокОтпускаЗаголовок = ОстатокОтпускаПредставлениеСтроки(ДлительностьОтпуска, ОстатокОтпускаНаДатуНачала)
    возврат ОстатокОтпускаЗаголовок
;

метод ОстатокОтпускаСотрудниковЗаголовок(ДлительностьОтпуска: Отпуск.ДлительностьОтпуска): Строка
    пер ОстатокОтпускаЗаголовок: Строка
    пер ОстатокОтпускаСотрудников = Отпуск.ОстатокОтпускаСотрудниковНаДату(Объект.ФизическоеЛицо, ПериодОтсутствия.От)
    пер РабочиеМеста = РабочиеМестаДокументаТаблицаРабочихМест().РабочиеМеста
    если ОстатокОтпускаСотрудников.Пусто() или РабочиеМеста.Пусто()
        возврат ОстатокОтпускаЗаголовок
    ;
    если РабочиеМеста.Размер() == 1
        пер ОстатокОтпуска = ОстатокОтпускаСотрудников.Получить(РабочиеМеста[0].РабочееМесто)
        если ЭтоПереносОтпуска
            ОстатокОтпуска = ОстатокОтпуска + РасходОстаткаПереносимогоОтпуска
        ;
        ОстатокОтпускаЗаголовок = ОстатокОтпускаПредставлениеСтроки(ДлительностьОтпуска, ОстатокОтпуска)
    иначе
        для РабочееМесто из РабочиеМеста
            пер РабочееМестоПредставление: Строка = Сотрудники.ПредставлениеРабочегоМеста(
                                                    РабочееМесто.Позиция, 
                                                    РабочееМесто.Должность, 
                                                    РабочееМесто.МестоВСтруктуреПредприятия, 
                                                    РабочееМесто.Организация, 
                                                    Ложь)
            ОстатокОтпускаЗаголовок += "\н" + РабочееМестоПредставление
            пер ОстатокОтпуска = ОстатокОтпускаСотрудников.ПолучитьИлиУмолчание(РабочееМесто.РабочееМесто)
            если ЭтоПереносОтпуска
                ОстатокОтпуска = ОстатокОтпуска + РасходОстаткаПереносимогоОтпуска
            ;
            ОстатокОтпускаЗаголовок += " - " + ОстатокОтпускаПредставлениеСтроки(ДлительностьОтпуска, ОстатокОтпуска)
        ;
    ;
    возврат ОстатокОтпускаЗаголовок
;

метод ОстатокОтпускаПредставлениеСтроки(ДлительностьОтпуска: Отпуск.ДлительностьОтпуска, ОстатокОтпускаНаДатуНачала: Число?): Строка
    пер ОстатокОтпускаЗаголовок: Строка
    если ОстатокОтпускаНаДатуНачала == Неопределено
        ОстатокОтпускаЗаголовок = "Пока не ясно сколько дней отпуска можно взять."
    иначе если РежимСогласования
        знч ФорматнаяСтрока = "д ММММ"
        пер ДатаНачала: Строка = МенеджерДат.ФорматДаты(ПериодОтсутствия.От, ФорматнаяСтрока)
        пер КоличествоДней: Строка = (ОстатокОтпускаНаДатуНачала!).ВСтроку() + " " + МенеджерСтрок.ТекстПоКоличеству("день", ОстатокОтпускаНаДатуНачала!) 
        если ОстатокОтпускаНаДатуНачала != Неопределено
            и ОстатокОтпускаНаДатуНачала! < ДлительностьОтпуска.КалендарныхДней - ДлительностьОтпуска.ПраздничныхДней
            ОстатокОтпускаЗаголовок = "На %ДатаНачала сотрудник будет иметь право только на %КоличествоДней отпуска"
        иначе
            ОстатокОтпускаЗаголовок = "На %ДатаНачала сотрудник будет иметь право на %КоличествоДней отпуска"
        ;
    иначе
        знч ФорматнаяСтрока = "д ММММ"
        пер ДатаНачала: Строка = МенеджерДат.ФорматДаты(ПериодОтсутствия.От, ФорматнаяСтрока)
        пер КоличествоДней: Строка = (ОстатокОтпускаНаДатуНачала!).ВСтроку() + " " + МенеджерСтрок.ТекстПоКоличеству("день", ОстатокОтпускаНаДатуНачала!) 
        если ОстатокОтпускаНаДатуНачала! >= ДлительностьОтпуска.КалендарныхДней - ДлительностьОтпуска.ПраздничныхДней
            ОстатокОтпускаЗаголовок = "На %ДатаНачала вы будете иметь право на %КоличествоДней отпуска"
        иначе
            ОстатокОтпускаЗаголовок = "На %ДатаНачала вы будете иметь право только на %КоличествоДней отпуска"
        ;
    ;
    возврат ОстатокОтпускаЗаголовок
;

метод ОстатокОтпускаВидимость(): Булево    
    возврат РежимПросмотра и ПоказыватьОстатокОтпуска()
;

метод ПоказыватьОстатокОтпуска(): Булево
    возврат 
        Отпуск.ПараметрыСеанса().ФункциональныеОпции.ИнформацияОбОтпусках
        и не Объект.ЗаСвойСчет 
        и Отпуск.ПараметрыСеанса().ФункциональныеОпции.ИнформацияОбОстаткахОтпусков
        и не Объект.ЗаСвойСчет

        и ПериодОтсутствия != Неопределено 
        и ПериодОтсутствия.От > Дата.Сейчас() 
        и (РежимСогласования или Объект.ФизическоеЛицо == ВладельцыКабинетов.ПараметрыСеанса().ФизическоеЛицо)
;

метод ПродолжительностьОтпускаЗаголовок(): Строка

    если ДлительностьОтпуска.КалендарныхДней == 0
        возврат ""
    ;
    
    пер ПродолжительностьПредставление = ДлительностьОтпуска.КалендарныхДней.ВСтроку() + " " + МенеджерСтрок.ТекстПоКоличеству("день", ДлительностьОтпуска.КалендарныхДней)
    если ДлительностьОтпуска.ПраздничныхДней > 0
        ПродолжительностьПредставление += ", в том числе " + ДлительностьОтпуска.ПраздничныхДней.ВСтроку() + " " + МенеджерСтрок.ТекстПоКоличеству("праздничный день", ДлительностьОтпуска.ПраздничныхДней) + (ДлительностьОтпуска.ПраздничныхДней == 1 ? " который не оплачивается" : " которые не оплачиваются")
    ;
    возврат ПродолжительностьПредставление
;

метод НадписьПоясненияЗаголовок(): Строка
    пер Пояснение = ПродолжительностьОтпускаЗаголовок()
    если ПериодОтсутствия != Неопределено
        и Объект.ЗаСвойСчет
        Пояснение += ", за свой счет"
    ;
    
    если ПоказыватьОстатокОтпуска()
        Пояснение += ". "
        Пояснение += ОстатокОтпускаЗаголовок()
    ;
    возврат Пояснение
;

метод НадписьПоясненияВидимость(): Булево
    возврат не РежимПросмотра
;

метод КоличествоДнейКомпенсацииТолькоЧтение(): Булево
   возврат не Объект.КомпенсацияОтпуска
;

метод КоличествоДнейКомпенсацииВидимость(): Булево
    возврат Объект.КомпенсацияОтпуска и КомпенсацияОтпускаВидимость()
;

метод КомпенсацияОтпускаВидимость(): Булево
    пер КомпенсацияОтпускаВидимость: Булево
    если Отпуск.ПараметрыСеанса().ФункциональныеОпции.ЗаявленияНаКомпенсациюОтпуска
        КомпенсацияОтпускаВидимость = Клиент.КомпенсацияОтпускаДоступна() и не ЭтоПереносОтпуска
    ;
    возврат КомпенсацияОтпускаВидимость
;

метод КомпенсацияОтпускаПояснениеЗаголовок(): Строка
    возврат Клиент.КомпенсацияОтпускаПояснение(Отпуск.ПараметрыСеанса().КоличествоДнейКомпенсации, РабочиеМестаДокументаТаблицаРабочихМест().РабочиеМеста)
;

метод КомпенсацияОтпускаПояснениеВидимость(): Булево
    пер КомпенсацияОтпускаПояснениеВидимость: Булево
    если ДанныеДокумента != Неопределено
        КомпенсацияОтпускаПояснениеВидимость = Объект.КомпенсацияОтпуска и КомпенсацияОтпускаВидимость() и ДанныеДокумента != Неопределено и (ДанныеДокумента.Состояние == СостоянияДокумента.Черновик или ДанныеДокумента.Состояние == Неопределено)
    ;
    возврат КомпенсацияОтпускаПояснениеВидимость
;

метод ЗаявлениеНаОтпускПодробнееВидимость(): Булево
    пер ПодробнееВидимость: Булево
    знч РабочиеМеста = РабочиеМестаДокументаТаблицаРабочихМест().РабочиеМеста
    если не Объект.ЗаСвойСчет
        и Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
        и (РабочиеМеста.Размер() > 1 или Отпуск.ИспользуетсяНесколькоВидовОтпусков())
        ПодробнееВидимость = Истина
    ;
    возврат ПодробнееВидимость
;

метод ЗаявлениеНаОтпускПодробнееПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    знч ФормаПериодыОтпуска = новый ПериодыОтпускаФорма(
        РежимПросмотра = АннулируемыйДокумент == Неопределено ? РедактированиеЗапрещено : Истина,
        ИсходныеДанные = ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Периоды,
        РабочиеМеста = Компоненты.РабочиеМестаДокумента.ОтмеченныеРабочиеМеста(),
        ИсходнаяДатаНачала = Объект.ДатаНачала,
        ИсходнаяДатаОкончания = Объект.ДатаОкончания,
        ИсходноеКоличествоДнейКомпенсации = Объект.КоличествоДнейКомпенсации)
    ФормаПериодыОтпуска.Инициализировать()
    знч ИзмененныеПериодыОтпуска = ФормаПериодыОтпуска.ОткрытьВМодальномОкне()
    если ИзмененныеПериодыОтпуска != Неопределено
        ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Периоды = ИзмененныеПериодыОтпуска
        ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Модифицированность = Истина
        СобственнаяМодифицированность = Истина
    ;
;

метод УдалитьПериодыОтпускаСотрудников()
    если Объект.ЗаСвойСчет
        ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Периоды.Очистить()
        ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Модифицированность = Истина
        возврат
    ;
    пер Сотрудники: Множество<Сотрудники.Ссылка?>
    пер ОтмеченныеРабочиеМеста = Компоненты.РабочиеМестаДокумента.ОтмеченныеРабочиеМеста()
    для РабочееМесто из ОтмеченныеРабочиеМеста
        Сотрудники.Добавить(РабочееМесто.РабочееМесто)
    ;
    пер ПеридыКУдалению: Массив<ПериодыОтпускаСтрока>
    для ПериодОтпуска из ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Периоды
        если не Сотрудники.Содержит(ПериодОтпуска.РабочееМесто)
            ПеридыКУдалению.Добавить(ПериодОтпуска)
        ;
    ;
    для ПериодОтпуска из ПеридыКУдалению
        ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Периоды.Удалить(ПериодОтпуска)
        ДанныеДокумента.ТабличныеЧасти.ТаблицаПериодыОтпуска.Модифицированность = Истина
    ;
;

метод ПрисоединенныеФайлыДобавлятьФайлы(): Булево
   возврат не (РедактированиеЗапрещено или РежимСогласования)
;

метод ЗаместителиТолькоЧтение(): Булево
    возврат РежимСогласования или РедактированиеЗапрещено или РежимПросмотра
;

метод УведомляемыеТолькоЧтение(): Булево
    возврат РежимСогласования или РедактированиеЗапрещено
;

метод СогласованиеДокументаВидимость(): Булево
    возврат ДанныеДокумента != Неопределено и ДанныеДокумента.Состояние != Неопределено
;

метод СогласующиеСостояние(): СостоянияДокумента
    возврат СостояниеДокумента()
;

метод СостояниеДокумента(): СостоянияДокумента
    пер Состояние: СостоянияДокумента
    если ДанныеДокумента != Неопределено
        Состояние = ДанныеДокумента.Состояние
    ;
    возврат Состояние
;

метод УведомляемыеСостояние(): СостоянияДокумента
    возврат СостояниеДокумента()
;

метод СогласующиеТаблицаСогласующие(): Согласующие
    пер Таблица: Согласующие
    если ДанныеДокумента != Неопределено
        Таблица = ДанныеДокумента.ТабличныеЧасти.ТаблицаСогласующие
    ;
    возврат Таблица 
;

метод ЗаместителиТаблицаЗаместители(): Заместители
    возврат ТаблицаЗаместители()
;

метод УведомляемыеТаблицаУведомляемые(): Уведомляемые
    пер Таблица: Уведомляемые
    если ДанныеДокумента != Неопределено
        Таблица = ДанныеДокумента.ТабличныеЧасти.ТаблицаУведомляемые
    ;
    возврат Таблица 
;

метод УведомляемыеТаблицаЗаместители(): Заместители
    возврат ТаблицаЗаместители()
;

метод ПрисоединенныеФайлыТаблицаФайлы(): ПрисоединенныеФайлы
    пер Таблица: ПрисоединенныеФайлы
    если ДанныеДокумента != Неопределено
        Таблица = ДанныеДокумента.ТабличныеЧасти.ТаблицаФайлы
    ;
    возврат Таблица 
;

метод ТаблицаЗаместители(): Заместители
    пер Таблица: Заместители
    если ДанныеДокумента != Неопределено
        Таблица = ДанныеДокумента.ТабличныеЧасти.ТаблицаЗаместители
    ;
    возврат Таблица 
;

метод РабочиеМестаДокументаТаблицаРабочихМест(): РабочиеМеста
    если ДанныеДокумента == Неопределено
        возврат новый РабочиеМеста()
    ;
    возврат ДанныеДокумента.ТабличныеЧасти.ТаблицаРабочиеМеста
;

метод ДополнительныеРеквизитыТаблицаПараметров(): РеквизитыШаблона
    пер Таблица: РеквизитыШаблона
    если ДанныеДокумента != Неопределено
        Таблица = ДанныеДокумента.ТабличныеЧасти.ДополнительныеРеквизиты
    ;
    возврат Таблица 
;

@ВПодсистеме
метод ПроверитьЗаполнение(): Булево
    пер РезультатПроверки = ПроверитьПериод()
    если не ПроверитьКомпенсацию()
        РезультатПроверки = Ложь
    ;
    если не Компоненты.РабочиеМестаДокумента.ПроверитьЗаполнение()
        РезультатПроверки = Ложь
    ;
    возврат РезультатПроверки
;

метод ПроверитьКомпенсацию(): Булево
    пер РезультатПроверки = Истина
    пер АктивнаКомпенсацияОтпуска = Объект.КомпенсацияОтпуска
    пер КоличествоДней = Объект.КоличествоДнейКомпенсации
    пер МаксимальноеКоличествоДнейКомпенсации = Отпуск.ПараметрыСеанса().КоличествоДнейКомпенсации
    пер ПредставлениеСотрудника: Строка
    если Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
        пер ВыбранныеРабочиеМеста = Компоненты.РабочиеМестаДокумента.ОтмеченныеРабочиеМеста()
        знч ДанныеРабочегоМеста = Клиент.МаксимальноеКоличествоДнейКомпенсацииОтпуска(ВыбранныеРабочиеМеста)
        МаксимальноеКоличествоДнейКомпенсации = ДанныеРабочегоМеста.ДнейКомпенсации
        ПредставлениеСотрудника = ДанныеРабочегоМеста.ПредставлениеСотрудника
    ;    
    КоличествоДнейКомпенсацииСообщениеОбОшибкеВвода = ""
    если АктивнаКомпенсацияОтпуска 
        если КоличествоДней == 0
            КоличествоДнейКомпенсацииСообщениеОбОшибкеВвода = "Не указано количество дней компенсации"
            РезультатПроверки = Ложь
        иначе если КоличествоДней > МаксимальноеКоличествоДнейКомпенсации
            если не ПредставлениеСотрудника.Пусто() и РабочиеМестаДокументаТаблицаРабочихМест().РабочиеМеста.Размер() > 1
                если МаксимальноеКоличествоДнейКомпенсации == 0
                    КоличествоДнейКомпенсацииСообщениеОбОшибкеВвода = 
                        "По рабочему месту %ПредставлениеСотрудника компенсация отпуска недоступна"
                иначе
                    КоличествоДнейКомпенсацииСообщениеОбОшибкеВвода = 
                        "По рабочему месту %ПредставлениеСотрудника нельзя компенсировать больше чем 
                        %МаксимальноеКоличествоДнейКомпенсации %{МенеджерСтрок.ТекстПоКоличеству("день", МаксимальноеКоличествоДнейКомпенсации)} отпуска"
                ;
            иначе
                КоличествоДнейКомпенсацииСообщениеОбОшибкеВвода = 
                    "Вы не можете компенсировать больше чем 
                    %МаксимальноеКоличествоДнейКомпенсации %{МенеджерСтрок.ТекстПоКоличеству("день", МаксимальноеКоличествоДнейКомпенсации)} отпуска"
            ;
            РезультатПроверки = Ложь
        ;
    ;
    возврат РезультатПроверки
;  

метод ПроверитьПериод(): Булево
  
    попытка
            
        если не ПериодЗаполнен()
            выбросить новый ИсключениеВалидации("Не заполнен период")
        ;
            
        если ПрошедшийПериод()
            выбросить новый ИсключениеВалидации("Дата начала меньше текущей даты")
        ;
        
        если ЭтоПереносОтпуска и ОдинаковыйПериод()
            выбросить новый ИсключениеВалидации("Период переноса отпуска совпадает с периодом исходного отпуска")
        ;
            
        МенеджерДат.ДатаМожетБытьПереданаВV8(ПериодОтсутствия?.До)
            
        знч ПересекающиесяПериоды = ПересекающиесяПериоды(ДанныеДокумента.ТабличныеЧасти.ТаблицаРабочиеМеста, ПериодОтсутствия?.От, ПериодОтсутствия?.До, 
            Объект.ЗаСвойСчет, Объект.ФизическоеЛицо, ДокументОбъектСсылка, АннулируемыйДокумент как ОснованиеОтпуска.Ссылка?)

        если не ПересекающиесяПериоды.Предупреждения.Пусто()
            РезультатПредупрежденияЗаполненияПериода = ПересекающиесяПериоды.Предупреждения
        ;

        если не ПересекающиесяПериоды.Ошибки.Пусто()
            выбросить новый ИсключениеВалидации(ПересекающиесяПериоды.Ошибки)
        ;            
         
    поймать Ошибка: Исключение
        РезультатПроверкиЗаполненияПериода = Ошибка.Описание
        Компоненты.ПериодОтсутствия.Активировать()
        
        возврат Ложь      
    ;
    
    возврат Истина
;

метод ПериодЗаполнен(): Булево
    возврат ПериодОтсутствия != Неопределено
;

метод ПрошедшийПериод(): Булево
    если ОформлятьОтпускаЗаднимЧислом(Объект.ЗаСвойСчет)
        возврат Ложь
    иначе
        возврат ПериодОтсутствия.От < Дата.Сейчас()
    ;
;

метод ОдинаковыйПериод(): Булево
    знч ДанныеИсходногоОтпуска = Отпуск.ДанныеОснованияОтпуска(АннулируемыйДокумент как ОснованиеОтпуска.Ссылка)
    возврат ПериодОтсутствия.От == ДанныеИсходногоОтпуска.ДатаНачала 
        и ПериодОтсутствия.До == ДанныеИсходногоОтпуска.ДатаОкончания
;

@НаСервере @ДоступноСКлиента
статический метод ОформлятьОтпускаЗаднимЧислом(ЗаСвойСчет: Булево): Булево
    возврат ЗаСвойСчет
        ? НастройкиОтсутствий.НастройкиПоВидуОтсутствия(ВидыОтсутствий.ОтпускЗаСвойСчет).ОформлятьЗаднимЧислом
        : НастройкиОтсутствий.НастройкиПоВидуОтсутствия(ВидыОтсутствий.Отпуск).ОформлятьЗаднимЧислом
;

@НаСервере @ДоступноСКлиента
статический метод ДнейДоСобытияДляИзмененияЗаявки(ЗаСвойСчет: Булево): Число
    возврат ЗаСвойСчет 
        ? НастройкиОтсутствий.НастройкиПоВидуОтсутствия(ВидыОтсутствий.ОтпускЗаСвойСчет).ДнейДоСобытияДляИзмененияЗаявки 
        : НастройкиОтсутствий.НастройкиПоВидуОтсутствия(ВидыОтсутствий.Отпуск).ДнейДоСобытияДляИзмененияЗаявки    
;

метод КомпенсацияОтпускаПриИзмененииЗначения(Источник: ФлажокРасширенный, Событие: СобытиеПриИзменении<Булево?>)
    Объект.КоличествоДнейКомпенсации = Объект.КомпенсацияОтпуска 
        ? Отпуск.ПараметрыСеанса().КоличествоДнейКомпенсации : 0
    КоличествоДнейКомпенсацииСообщениеОбОшибкеВвода = ""
    ЗаполнитьРаспределениеДнейКомпенсации()
;

метод КоличествоДнейКомпенсацииПриИзмененииЗначения(Источник: ПолеВводаРасширенноеЧисло, Событие: СобытиеПриИзменении<Число>)
    ЗаполнитьРаспределениеДнейКомпенсации()
;

// Контракт ВладелецПрисоединенныеФайлыКомпонент
@Реализация
@ВПроекте
метод ПрисоединенныеФайлыНачатаЗагрузкаФайлов(Источник: ПрисоединенныеФайлыКомпонент, Событие: неизвестно, ИдКомпонента: Строка = "")
    ИзменениеСостоянияЗагрузкиФайлов(новый СобытиеСДанными(Истина))
;

@Реализация
@ВПроекте
метод ПрисоединенныеФайлыЗавершенаЗагрузкаФайлов(Источник: ПрисоединенныеФайлыКомпонент, Событие: неизвестно, ИдКомпонента: Строка = "")
    ИзменениеСостоянияЗагрузкиФайлов(новый СобытиеСДанными(Ложь))
;
// Конец ВладелецПрисоединенныеФайлыКомпонент

метод ПрисоединенныеФайлыВидимость(): Булево
    возврат РежимПросмотра и ДанныеДокумента != Неопределено и ДанныеДокумента.ТабличныеЧасти.ТаблицаФайлы.Файлы.Размер() > 0 
            или не РежимПросмотра  
;

метод СогласующиеДатаСостояния(): Момент?
    пер ДатаСостояния: Момент?
    если ДанныеДокумента != Неопределено
        ДатаСостояния = ДанныеДокумента.ДатаСостояния
    ;
    возврат ДатаСостояния
;

метод ПериодОтсутствияСообщениеОбОшибкеВвода(): Строка
    пер СообщениеОшибка: Строка
    если ДанныеДокумента == Неопределено или ПериодОтсутствия == Неопределено
        возврат СообщениеОшибка
    ;
    если РезультатПроверкиЗаполненияПериода.Пусто() и не Объект.ЗаСвойСчет
        если не Отпуск.ПроверитьКоличествоДнейДоНачалаОтпуска(ПериодОтсутствия, ДанныеДокумента.НастройкиОтпусков)
            пер ДопустимоеКоличествоДней = ДанныеДокумента.НастройкиОтпусков.ДопустимоеКоличествоДнейДоНачалаОтпуска
            СообщениеОшибка = "Заявление должно быть подано не менее чем за %ДопустимоеКоличествоДней дней до начала отпуска"
        иначе если не Отпуск.ПроверитьПродолжительностьОтпуска(ПериодОтсутствия, ДанныеДокумента.НастройкиОтпусков, ДанныеДокумента.ПраздничныеДни, ДанныеДокумента.ДопустимаяПродолжнительностьОтпускаМенее14Дней)
            пер ДопустимаяПродолжительность = ДанныеДокумента.ДопустимаяПродолжнительностьОтпускаМенее14Дней
            если ДопустимаяПродолжительность == 0
                СообщениеОшибка = "Можно взять не менее 14 дней отпуска, чтобы одна часть отпуска была 14 дней (ст. 125 ТК РФ)"
            иначе
                СообщениеОшибка = "Можно взять не менее 14 дней отпуска, или не более %ДопустимаяПродолжительность дней, чтобы одна часть отпуска была 14 дней (ст. 125 ТК РФ)"
            ;
        иначе если не ПроверитьКоличествоДнейОтпускаАвансом()
            пер КоличествоДнейОтпускаАвансом = ДанныеДокумента.НастройкиОтпусков.МаксимальноеКоличествоДнейОтпускаАвансом
            если КоличествоДнейОтпускаАвансом == 0
                СообщениеОшибка = "Отпуск авансом не предоставляется"
            иначе
                СообщениеОшибка = "Можно взять не более %КоличествоДнейОтпускаАвансом дней отпуска авансом"
            ;
        иначе если не Отпуск.ПроверитьНаличиеРабочихДнейВОтпуске(ПериодОтсутствия, ДанныеДокумента.НастройкиОтпусков, ДанныеДокумента.ФизическоеЛицо)
            СообщениеОшибка = "Период отпуска должен включать хотя бы один рабочий день"
        ;
    иначе    
        СообщениеОшибка = РезультатПроверкиЗаполненияПериода
    ;
    возврат СообщениеОшибка
;

метод ПроверитьКоличествоДнейДоНачалаОтпуска(): Булево
    пер РезультатПроверки = Истина
    если не ДанныеДокумента.НастройкиОтпусков.КонтролироватьКоличествоДнейДоНачалаОтпуска
        возврат РезультатПроверки
    ;
    если ПериодОтсутствия == Неопределено
        возврат РезультатПроверки
    ;
    пер ТекущаяДата: Дата = Дата.Сейчас()
    пер КоличествоДней = (ПериодОтсутствия.От - ТекущаяДата).ВДнях()
    РезультатПроверки = КоличествоДней >= ДанныеДокумента.НастройкиОтпусков.ДопустимоеКоличествоДнейДоНачалаОтпуска
    возврат РезультатПроверки
;

метод ПроверитьКоличествоДнейОтпускаАвансом(): Булево
    пер РезультатПроверки = Истина
    если не ДанныеДокумента.НастройкиОтпусков.ОграничиватьКоличествоДнейОтпускаАвансом
        возврат РезультатПроверки
    ;
    если ПериодОтсутствия == Неопределено
        возврат РезультатПроверки
    ;
    если Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
        возврат ПроверитьКоличествоДнейОтпускаСотрудниковАвансом(РезультатПроверки)
    ;
    пер ОстатокОтпускаНаДатуНачала: Число? = ВызовСервера.ОстатокОтпускаНаДату(Объект.ФизическоеЛицо, ПериодОтсутствия.От)
    если ОстатокОтпускаНаДатуНачала == Неопределено
        возврат РезультатПроверки
    иначе если ЭтоПереносОтпуска
        ОстатокОтпускаНаДатуНачала = ОстатокОтпускаНаДатуНачала + РасходОстаткаПереносимогоОтпуска
    ;
    РезультатПроверки = ДанныеДокумента.НастройкиОтпусков.МаксимальноеКоличествоДнейОтпускаАвансом + ОстатокОтпускаНаДатуНачала >= (ДлительностьОтпуска.КалендарныхДней - ДлительностьОтпуска.ПраздничныхДней)
    возврат РезультатПроверки
;

метод ПроверитьКоличествоДнейОтпускаСотрудниковАвансом(РезультатПроверки: Булево): Булево
    пер ОстатокОтпускаСотрудников = Отпуск.ОстатокОтпускаСотрудниковНаДату(Объект.ФизическоеЛицо, ПериодОтсутствия.От)
    если ОстатокОтпускаСотрудников.Пусто()
        возврат РезультатПроверки
    ;
    пер РабочиеМеста = РабочиеМестаДокументаТаблицаРабочихМест().РабочиеМеста
    для РабочееМесто из РабочиеМеста
        если ОстатокОтпускаСотрудников.СодержитКлюч(РабочееМесто.РабочееМесто)
            пер ОстатокОтпуска = ОстатокОтпускаСотрудников.Получить(РабочееМесто.РабочееМесто)
            если ЭтоПереносОтпуска
               ОстатокОтпуска = ОстатокОтпуска + РасходОстаткаПереносимогоОтпуска
            ;
            если ДанныеДокумента.НастройкиОтпусков.МаксимальноеКоличествоДнейОтпускаАвансом + ОстатокОтпуска < (ДлительностьОтпуска.КалендарныхДней - ДлительностьОтпуска.ПраздничныхДней)
                РезультатПроверки = Ложь
                прервать
            ;
        ;
    ;
    возврат РезультатПроверки
;

метод ПроверитьНаличиеРабочихДнейВОтпуске(): Булево
    пер РезультатПроверки = Истина
    если не ДанныеДокумента.НастройкиОтпусков.ПроверятьНаличиеРабочихДнейВОтпуске
        возврат РезультатПроверки
    ;
    если ПериодОтсутствия == Неопределено
        возврат РезультатПроверки
    ;
    РезультатПроверки = ЕстьРабочиеДниВПериоде(Объект.ФизическоеЛицо, ПериодОтсутствия.От, ПериодОтсутствия.До)
    возврат РезультатПроверки
;

метод РабочиеМестаДокументаДоступность(): Булево
    возврат не РежимПросмотра и не ОсновноеСодержаниеФормыТолькоЧтение() и не ЭтоПереносОтпуска
;

метод РабочиеМестаДокументаВидимость(): Булево
    возврат Отсутствия.ПараметрыСеанса().ФункциональныеОпции.ЗапросМестаРаботыВЗаявлениях
            и РабочиеМестаДокументаТаблицаРабочихМест().РабочиеМеста.Размер() > 1
;

метод ПредоставитьЕдиновременнуюВыплатуКОтпускуВидимость(): Булево
    возврат Отпуск.ПараметрыСеанса().ФункциональныеОпции.ИспользоватьЕдиновременнуюВыплатуКОтпуску
        и (не ЭтоПереносОтпуска или Объект.ПредоставитьЕдиновременнуюВыплатуКОтпуску)
;

метод ПредоставитьМатериальнуюПомощьПриОтпускеВидимость(): Булево
    возврат Отпуск.ПараметрыСеанса().ФункциональныеОпции.ИспользоватьМатериальнуюПомощьПриОтпуске
        и (не ЭтоПереносОтпуска или Объект.ПредоставитьМатериальнуюПомощьПриОтпуске)
;

метод ЗаСвойСчетВидимость(): Булево
    возврат Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОтпускЗаСвойСчет
        и (не ЭтоПереносОтпуска или Объект.ЗаСвойСчет)
;

@НаСервере @НаКлиенте
@ВПодсистеме
структура ДополнительныеДанныеДокумента
    пер Состояние: СостоянияДокумента?
    пер ДатаСостояния: Момент?
    пер Отправлен: Булево
    пер ФизическоеЛицоЗаголовок: Строка
    пер ОстатокОтпускаНаДатуНачала: Число?
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка?
    пер ПраздничныеДни: Соответствие<Число, Массив<Дата>>
    пер ДопустимаяПродолжнительностьОтпускаМенее14Дней: Число
    пер ТабличныеЧасти: ТабличныеЧасти
    пер НастройкиОтпусков: Отпуск.НастройкиОтпусков
    пер ДанныеСогласующего: Согласования.ДанныеСогласующего?
;

@НаСервере @НаКлиенте
@ВПодсистеме
структура ТабличныеЧасти
    пер ТаблицаФайлы: ПрисоединенныеФайлы?
    пер ТаблицаЗаместители: Заместители?
    пер ТаблицаУведомляемые: Уведомляемые?
    пер ТаблицаСогласующие: Согласующие?
    пер ТаблицаРабочиеМеста: РабочиеМеста?
    пер ТаблицаПериодыОтпуска: ПериодыОтпуска?
    пер ДополнительныеРеквизиты: РеквизитыШаблона?
;

@НаСервере @ДоступноСКлиента
статический метод ДополнительныеДанныеДокумента(ЭтоНовый: Булево, Ссылка: ОснованиеОтпуска.Ссылка,
    ФизическоеЛицо: ФизическиеЛица.Ссылка?, ТекущееФизическоеЛицо: ФизическиеЛица.Ссылка?, АннулируемыйДокумент: АннулируемыйДокумент.Ссылка?):
    ДополнительныеДанныеДокумента
    
    если ТекущееФизическоеЛицо == Неопределено
        ТекущееФизическоеЛицо = ПользователиСистемы.ТекущееФизическоеЛицо()
    ;
    пер ДополнительныеДанныеДокумента = новый ДополнительныеДанныеДокумента()
    ДополнительныеДанныеДокумента.ФизическоеЛицо = ТекущееФизическоеЛицо 
    ДополнительныеДанныеДокумента.ФизическоеЛицоЗаголовок = МенеджерСущности.ПредставлениеСсылки(ФизическоеЛицо)
    ДополнительныеДанныеДокумента.ПраздничныеДни = ПраздничныеДни(ФизическоеЛицо)
    если не ЭтоНовый
        ДополнительныеДанныеДокумента.Отправлен = ЭтоОтправляемыйДокумент(Ссылка)
        ДополнительныеДанныеДокумента.ТабличныеЧасти = ДанныеТабличныхЧастей(Ссылка, ФизическоеЛицо)
        знч Согласовавшие: Массив<ФизическиеЛица.Ссылка>
        пер НомерШагаСогласования = 1
        для Согласующий из ДополнительныеДанныеДокумента.ТабличныеЧасти.ТаблицаСогласующие.Согласующие
            если Согласующий.УчастникСогласования != Неопределено
                и Согласующий.Результат != РезультатыСогласования.НаСогласовании
                
                Согласовавшие.Добавить(Согласующий.УчастникСогласования)
            ;
            НомерШагаСогласования = Макс(НомерШагаСогласования, Согласующий.НомерШагаСогласования)
        ;
        ДополнительныеДанныеДокумента.ДанныеСогласующего = Согласования.ДанныеСогласующего(
            ТекущееФизическоеЛицо,
            Отпуск.ВидСогласуемогоЗаявленияОтпуск(),
            ФизическоеЛицо,
            НомерШагаСогласования,
            Согласовавшие
        )
    иначе
        ДополнительныеДанныеДокумента.ТабличныеЧасти =
            ДанныеТабличныхЧастейПоУмолчанию(Ссылка, ФизическоеЛицо, АннулируемыйДокумент)
    ;
    ЗаполнитьДанныеСостояния(Ссылка, ДополнительныеДанныеДокумента)
    ЗаполнитьДопустимуюПродолжнительностьОтпуска(ФизическоеЛицо, ДополнительныеДанныеДокумента)
    ДополнительныеДанныеДокумента.НастройкиОтпусков = Отпуск.ТекущиеНастройкиОтпусков()
    возврат ДополнительныеДанныеДокумента
;

@НаСервере
статический метод ЭтоОтправляемыйДокумент(Ссылка: ОснованиеОтпуска.Ссылка): Булево
    возврат ОбменДанными.ЭтоОтправляемыйДокумент(Ссылка как ИсходящиеДанные.Ссылка)
;

@НаСервере
статический метод ЗаполнитьДанныеСостояния(Ссылка: ОснованиеОтпуска.Ссылка, ДополнительныеДанныеДокумента: ДополнительныеДанныеДокумента)
    пер ДанныеСостояния = СостДокументов.ДанныеСостоянияДокумента(Ссылка как Справочник.Ссылка)
    ДополнительныеДанныеДокумента.Состояние = ДанныеСостояния.Состояние
    ДополнительныеДанныеДокумента.ДатаСостояния = ДанныеСостояния.Дата
;

 
@НаСервере
статический метод ДанныеТабличныхЧастей(Владелец: ОснованиеОтпуска.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?): ТабличныеЧасти
    пер ДанныеТабличныхЧастей: ТабличныеЧасти
    ДанныеТабличныхЧастей.ТаблицаФайлы = ПрисоединенныеФайлыМенеджер.ПрисоединенныеФайлы(Владелец как ВладелецФайлы.Ссылка)
    ДанныеТабличныхЧастей.ТаблицаЗаместители = ЗаместителиМенеджер.Заместители(Владелец как ОснованиеОтсутствия.Ссылка, Тип<ЗаявлениеНаОтпускЗаместители.Ссылка>)
    ДанныеТабличныхЧастей.ТаблицаУведомляемые = УведомляемыеМенеджер.Уведомляемые(Владелец как ДокументОтсутствияСУведомляемыми.Ссылка)
    ДанныеТабличныхЧастей.ТаблицаСогласующие = Согласования.Согласующие(Владелец как ПодписываемыйДокумент.Ссылка,
        Отпуск.ВидСогласуемогоЗаявленияОтпуск(), ФизическоеЛицо)
    ДанныеТабличныхЧастей.ТаблицаРабочиеМеста = РабочиеМестаДокументов.РабочиеМестаЗаявления(Владелец как ДокументПоРабочимМестам.Ссылка)
    ДанныеТабличныхЧастей.ТаблицаПериодыОтпуска = ЗаявлениеНаОтпускПериоды.ПериодыОтпускаЗаявления(Владелец)
    ДанныеТабличныхЧастей.ДополнительныеРеквизиты = ШаблоныДокументовМенеджер.РеквизитыШаблона(
        Владелец как ОбъектСПечатнойФормой.Ссылка, УниверсальныеМеханизмы.Ид(Отпуск.ИД_ПОДСИСТЕМЫ, Отпуск.ШАБЛОН_ЗАЯВЛЕНИЯ_НА_ОТПУСК))
    возврат ДанныеТабличныхЧастей
;


@НаСервере
статический метод РабочиеМеста(Заявление: ОснованиеОтпуска.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка): РабочиеМеста
    пер РабочиеМеста = РабочиеМестаДокументов.РабочиеМеста(ФизическоеЛицо)
    РабочиеМеста.Владелец = Заявление как ДокументПоРабочимМестам.Ссылка
    возврат РабочиеМеста
;

@НаСервере
статический метод ДанныеТабличныхЧастейПоУмолчанию(Заявление: ОснованиеОтпуска.Ссылка, 
                                                    ФизическоеЛицо: ФизическиеЛица.Ссылка, 
                                                    АннулируемыйДокумент: АннулируемыйДокумент.Ссылка?): ТабличныеЧасти
    пер ДанныеТабличныхЧастей: ТабличныеЧасти
    пер ТаблицаФайлы: ПрисоединенныеФайлы
    ТаблицаФайлы.Владелец = Заявление как ВладелецФайлы.Ссылка
    пер Заместители: Заместители = ЗаместителиМенеджер.Заместители(ФизическоеЛицо, Тип<ЗаместителиНаВремяОтсутствия.Ссылка>)
    Заместители.Владелец = Заявление 
    для ДанныеЗаместителя из Заместители.Заместители
        ДанныеЗаместителя.Ссылка = Неопределено
    ;
    знч Уведомляемые: Уведомляемые = УведомляемыеМенеджер.УведомляемыеПоУмолчанию(Заявление как ДокументОтсутствияСУведомляемыми.Ссылка, ФизическоеЛицо) 
    пер Согласующие: Согласующие
    Согласующие.Владелец = Заявление как ПодписываемыйДокумент.Ссылка
    
    
    пер РабочиеМеста = РабочиеМеста(Заявление, ФизическоеЛицо)
    
    пер ПериодыОтпуска: ПериодыОтпуска
    ПериодыОтпуска.Владелец = Заявление
    
    если Заявление это ЗаявлениеНаПереносОтпуска.Ссылка
        знч ПериодыОтменяемогоОтпуска = ЗаявлениеНаОтпускПериоды.ПериодыОтпускаЗаявления(АннулируемыйДокумент как ОснованиеОтпуска.Ссылка)
        ПериодыОтпуска.Периоды = ПериодыОтменяемогоОтпуска.Периоды
        знч РабочиеМестаАннулируемого = РабочиеМестаДокументов.РабочиеМестаЗаявления(АннулируемыйДокумент как ДокументПоРабочимМестам.Ссылка)
        РабочиеМеста.Владелец = Заявление как ДокументПоРабочимМестам.Ссылка
        РабочиеМеста.РабочиеМеста = РабочиеМестаАннулируемого.РабочиеМеста
            .Преобразовать(А -> новый РабочееМесто(
                Ссылка = Неопределено,
                Должность = А.Должность,
                МестоВСтруктуреПредприятия = А.МестоВСтруктуреПредприятия, 
                Организация = А.Организация, 
                Позиция = А.Позиция, 
                РабочееМесто = А.РабочееМесто, 
                Основное = А.Основное, 
                Оформление = А.Оформление
            ))
        ;
    
    пер ДополнительныеРеквизиты = ШаблоныДокументовМенеджер.РеквизитыШаблона(
        Неопределено, УниверсальныеМеханизмы.Ид(Отпуск.ИД_ПОДСИСТЕМЫ, Отпуск.ШАБЛОН_ЗАЯВЛЕНИЯ_НА_ОТПУСК))
    ДополнительныеРеквизиты.Владелец = Заявление как ОбъектСПечатнойФормой.Ссылка
    
    ДанныеТабличныхЧастей.ТаблицаФайлы = ТаблицаФайлы
    ДанныеТабличныхЧастей.ТаблицаЗаместители = Заместители
    ДанныеТабличныхЧастей.ТаблицаУведомляемые = Уведомляемые
    ДанныеТабличныхЧастей.ТаблицаСогласующие = Согласующие
    ДанныеТабличныхЧастей.ТаблицаРабочиеМеста = РабочиеМеста
    ДанныеТабличныхЧастей.ТаблицаПериодыОтпуска = ПериодыОтпуска
    ДанныеТабличныхЧастей.ДополнительныеРеквизиты = ДополнительныеРеквизиты
    возврат ДанныеТабличныхЧастей
;

@НаСервере @ДоступноСКлиента
статический метод ПересекающиесяПериоды(РабочиеМеста: РабочиеМеста?, ДатаНачала: Дата?, ДатаОкончания: Дата?, ЗаСвойСчет: Булево, ФизическоеЛицо: ФизическиеЛица.Ссылка?, Ссылка: ОснованиеОтпуска.Ссылка?, ИсключаемоеЗаявление: ОснованиеОтпуска.Ссылка?): Отсутствия.ПересечениеПериодов
    пер ПричинаОтсутствия = ЗаСвойСчет ? ВидыОтсутствий.ОтпускЗаСвойСчет : ВидыОтсутствий.Отпуск
    
    пер Организации: Массив<Организации.Ссылка>
    если РабочиеМеста != Неопределено и РабочиеМеста.РабочиеМеста.Размер() > 0 
        для Элемент из РабочиеМеста.РабочиеМеста
            Организации.Добавить(Элемент.Организация)    
        ;     
    ; 
    если ИсключаемоеЗаявление != Неопределено
        знч ИсключаемыеДокументы: Массив<ОснованиеОтсутствия.Ссылка>
        ИсключаемыеДокументы.Добавить(Ссылка как ОснованиеОтсутствия.Ссылка)
        ИсключаемыеДокументы.Добавить(ИсключаемоеЗаявление как ОснованиеОтсутствия.Ссылка)
        возврат Отсутствия.ПересекающиесяПериоды(Организации, ДатаНачала.НачалоДня(), ДатаОкончания.КонецДня(), ПричинаОтсутствия, ФизическоеЛицо, ИсключаемыеДокументы)
    иначе
        возврат Отсутствия.ПересекающиесяПериоды(Организации, ДатаНачала.НачалоДня(), ДатаОкончания.КонецДня(), ПричинаОтсутствия, ФизическоеЛицо, Ссылка как ОснованиеОтсутствия.Ссылка)
    ;
;

@НаСервере
статический метод ПраздничныеДни(ФизическоеЛицо: ФизическиеЛица.Ссылка?): Соответствие<Число, Массив<Дата>>
    возврат Отпуск.ПраздничныеДни(ФизическоеЛицо)
;

@НаСервере
статический метод ЗаполнитьДопустимуюПродолжнительностьОтпуска(ФизическоеЛицо: ФизическиеЛица.Ссылка?, ДополнительныеДанныеДокумента: ДополнительныеДанныеДокумента)
    если ФизическоеЛицо == Неопределено
        возврат
    ;
    пер ДанныеИнформацииОбОтпуске = ИнформацияОбОтпуске.ДанныеИнформацииОбОтпуске(<ФизическиеЛица.Ссылка>[ФизическоеЛицо!])
    если ДанныеИнформацииОбОтпуске.СодержитКлюч(ФизическоеЛицо)
        пер ДанныеФизическогоЛица = ДанныеИнформацииОбОтпуске[ФизическоеЛицо]
        ДополнительныеДанныеДокумента.ДопустимаяПродолжнительностьОтпускаМенее14Дней = ДанныеФизическогоЛица["ДопустимаяПродолжнительностьОтпускаМенее14Дней"] как Число
    ;
;

@НаСервере @ДоступноСКлиента
статический метод ЕстьРабочиеДниВПериоде(ФизическоеЛицо: ФизическиеЛица.Ссылка?, ДатаНачала: Дата?, ДатаОкончания: Дата?): Булево
    пер ГрафикРаботы: ГрафикиРаботы.Ссылка? = ОрганизационнаяСтруктура.ГрафикРаботыФизическогоЛица(ФизическоеЛицо!)
    возврат ГрафикиРаботы.ЕстьРабочиеДниВПериоде(ГрафикРаботы, ДатаНачала, ДатаОкончания)
;

@ВПроекте
метод ДополнительныеПараметрыФормированияПредставлений(): Соответствие<Строка, Объект>
    пер ДополнительныеПараметры = новый Соответствие<Строка, Объект>()
    ДополнительныеПараметры.Вставить("РабочиеМеста",  ДанныеДокумента.ТабличныеЧасти.ТаблицаРабочиеМеста)
    возврат ДополнительныеПараметры
;

@НаКлиенте
метод СброситьПредупрежденияПериода()
    РезультатПредупрежденияЗаполненияПериода = ""
    РезультатПроверкиЗаполненияПериода = ""   
;

@НаСервере @ДоступноСКлиента
статический метод АннулирующийДокумент(Документ: АннулируемыйДокумент.Ссылка): АннулирующийДокумент.Ссылка?
    возврат Аннулирование.АннулирующийДокумент(Документ, Истина)
;

@НаСервере @ДоступноСКлиента
статический метод АннулируемыйДокумент(Документ: АннулирующийДокумент.Ссылка): АннулируемыйДокумент.Ссылка?
    возврат Аннулирование.АннулируемыйДокумент(Документ)
;