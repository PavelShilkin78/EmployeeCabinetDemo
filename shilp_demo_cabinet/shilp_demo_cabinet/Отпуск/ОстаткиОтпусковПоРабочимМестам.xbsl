импорт Компания
импорт ЛичныеКабинетыПользователей
импорт ОбщиеСтандартные

@Обработчик
метод ПослеСоздания()
    если не ИнформацияОбОстаткахОтпусковДоступна()
        возврат    
    ;
    НесколькоВидовОтпусков = Отпуск.ИспользуетсяНесколькоВидовОтпусков()
    ТаблицаРабочихМест = Отпуск.РабочиеМестаФизическогоЛица(ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо)
    пер ОрганизацииРабочихМест = новый Массив<Организации.Ссылка>()
    для РабочееМесто из ТаблицаРабочихМест
        если не ОрганизацииРабочихМест.Содержит(РабочееМесто.Организация)
            ОрганизацииРабочихМест.Добавить(РабочееМесто.Организация)
        ;
    ;
    ПоказыватьОрганизацию = ОрганизацииРабочихМест.Размер() > 1
    если ТаблицаРабочихМест.Размер() > 1
        ОтображаемыеРабочиеМеста = ТаблицаРабочихМест.ПодМассив(1)
    ;
;

метод ТаблицаИсточникДанные(): Массив<РабочееМесто>
    возврат ОтображаемыеРабочиеМеста
;

метод РабочиеМестаВидимость(): Булево
    если не ИнформацияОбОстаткахОтпусковДоступна()
        возврат Ложь    
    ;
    возврат не ОтображаемыеРабочиеМеста.Пусто()
;

метод ИнформацияОбОстаткахОтпусковДоступна(): Булево
    возврат Отпуск.ПараметрыСеанса().ФункциональныеОпции.ИнформацияОбОтпусках 
        и Отпуск.ПараметрыСеанса().ФункциональныеОпции.ИнформацияОбОстаткахОтпусков
        и Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
;

метод РабочееМестоПредставление(ДанныеЭлемента: РабочееМесто): Строка
    пер РабочееМестоПредставление: Строка = Сотрудники.ПредставлениеРабочегоМеста(
                                            ДанныеЭлемента.Позиция, 
                                            ДанныеЭлемента.Должность, 
                                            ДанныеЭлемента.МестоВСтруктуреПредприятия, 
                                            ДанныеЭлемента.Организация, 
                                            ПоказыватьОрганизацию)
    возврат РабочееМестоПредставление
;

метод ОстатокОтпускаПредставление(ДанныеЭлемента: РабочееМесто): Строка
    знч ОстаткиОтпусковСотрудников = Отпуск.ПараметрыСеанса().ОстаткиОтпусковСотрудников
    пер ОстатокОтпуска: Число
    пер КоличествоДнейКомпенсации: Число
    пер РасшифровкаОстатка: Строка
    для ДанныеСотрудника из ОстаткиОтпусковСотрудников
        если ДанныеСотрудника.РабочееМесто == ДанныеЭлемента.РабочееМесто
            ОстатокОтпуска = ДанныеСотрудника.ОстатокОтпуска
            КоличествоДнейКомпенсации = ДанныеСотрудника.КоличествоДнейКомпенсации
            для ДанныеВидаОтпуска из ДанныеСотрудника.ВидыОтпусков
                РасшифровкаОстатка += (РасшифровкаОстатка.Пусто() ? "" : ", ") + ДанныеВидаОтпуска.ВидОтпуска.Представление() + " %{ДанныеВидаОтпуска.ОстатокОтпуска}"
            ;
        ;
    ;
    пер ИнформацияОбОстаткеОтпуска = "Доступно %{ОстатокОтпуска.ВСтроку()} %{МенеджерСтрок.ТекстПоКоличеству("день", ОстатокОтпуска)} отпуска."
    если НесколькоВидовОтпусков и не РасшифровкаОстатка.Пусто()
        ИнформацияОбОстаткеОтпуска = "Доступно %{ОстатокОтпуска.ВСтроку()} %{МенеджерСтрок.ТекстПоКоличеству("день", ОстатокОтпуска)} отпуска (%РасшифровкаОстатка)."
    ;
    если ИспользуетсяКомпенсацияОтпуска(КоличествоДнейКомпенсации)
        ИнформацияОбОстаткеОтпуска += " " + КомпенсацияОтпускаЗаголовок(ОстатокОтпуска, КоличествоДнейКомпенсации)
    ;
    возврат ИнформацияОбОстаткеОтпуска
;

метод ИспользуетсяКомпенсацияОтпуска(КоличествоДнейКомпенсации: Число): Булево
    если не Отпуск.ПараметрыСеанса().ФункциональныеОпции.ЗаявленияНаКомпенсациюОтпуска
        возврат Ложь
    ;
    возврат КоличествоДнейКомпенсации > 0
;

метод КомпенсацияОтпускаЗаголовок(ОстатокОтпуска: Число, КоличествоДнейКомпенсации: Число): Строка
    пер Компенсация: Строка
    если КоличествоДнейКомпенсации < ОстатокОтпуска
        Компенсация = "Из них %{КоличествоДнейКомпенсации} %{МенеджерСтрок.ТекстПоКоличеству("день", КоличествоДнейКомпенсации)} можно заменить компенсацией."
    иначе
        Компенсация = "Их можно заменить компенсацией."
    ;
    возврат Компенсация
;
