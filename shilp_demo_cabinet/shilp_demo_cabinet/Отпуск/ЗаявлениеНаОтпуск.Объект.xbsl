импорт Компания
импорт ОбщиеСтандартные
импорт ВладельцыКабинетов
импорт КонтрольДоступа
импорт ОбменДанными
импорт Компания::Согласования
импорт Отсутствия
импорт УниверсальныеМеханизмы
импорт Криптография

//Область ОбработчикиСобытий

@Обработчик
метод ПриЗаполнении()
    ФизическоеЛицо = ПользователиСистемы.ТекущееФизическоеЛицо()
    если ФизическоеЛицо == Неопределено
        возврат
    ;
    пер ЧасовойПояс: ЧасовойПояс = ВладельцыКабинетов.ЧасовойПоясФизическогоЛица(ФизическоеЛицо)    
    МоментСоздания = Момент.Сейчас()
    Дата = Дата.Сейчас(ЧасовойПояс)
    пер ТекущаяДатаЧерезНеделю: Дата = Дата.ДобавитьДни(7)
    ДатаНачала = ТекущаяДатаЧерезНеделю.СДнемНедели(ДеньНедели.Понедельник)
    ДатаОкончания = ТекущаяДатаЧерезНеделю.СДнемНедели(ДеньНедели.Воскресенье)
;

@Обработчик
метод ПередЗаписью(ПредыдущееЗначение: ЗаявлениеНаОтпуск.Данные, ПараметрыЗаписи: ЗаявлениеНаОтпуск.ПараметрыЗаписи)
    ЗаполнитьПредставление()
    ЗаполнитьМесяцСоздания()
    ЗаполнитьКоличествоДнейКомпенсации()
;

@Обработчик
метод ПослеЗаписи(ПредыдущееЗначение: ЗаявлениеНаОтпуск.Данные, ПараметрыЗаписи: ЗаявлениеНаОтпуск.ПараметрыЗаписи)
    исп КонтекстДоступа.Привилегированный()
    пер ТребуетсяРегистрацияИзменений = РегистрацияИзменений.ТребуетсяРегистрацияИзмененийОбъекта(этот, ПредыдущееЗначение)
    ЗаявлениеНаОтпуск.ПослеЗаписиДополнение(Ссылка, ФизическоеЛицо, ТребуетсяРегистрацияИзменений)
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередУдалением(ПараметрыУдаления: ЗаявлениеНаОтпуск.ПараметрыУдаления)
    ЗапланированныеОтсутствия.УдалитьЗапланированноеОтсутствие(Ссылка)
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<СогласованияДокументов>, "Документ")
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<ПодписиДокументов>, "Документ")
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<ВерсииДанныхОбъектов>, "Объект")
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<ЗаписиОтсутствий>, "Документ")
;

//КонецОбласти

//Область СлужебныеПроцедурыИФункции

метод ЗаполнитьПредставление()
    пер Причина = ЗаСвойСчет ? ВидыОтсутствий.ОтпускЗаСвойСчет : ВидыОтсутствий.Отпуск
    ПредставлениеВидаОтсутствия = Причина.Представление()
    ПредставлениеДокумента =
        Отсутствия.ПредставлениеОтсутствия(ДатаНачала, ДатаОкончания, Причина, ФизическоеЛицо)
;

метод ЗаполнитьМесяцСоздания()
    МесяцСоздания = Дата.НачалоМесяца()
;

метод ЗаполнитьКоличествоДнейКомпенсации()
    если не КомпенсацияОтпуска
        КоличествоДнейКомпенсации = 0
    ;
;

@ВПодсистеме
метод ЗапланироватьОтсутствие(РабочиеМеста: РабочиеМеста?)
    
    знч ТекущееСостояние = СостДокументов.СостояниеДокумента(Ссылка) 
    если не [СостоянияДокумента.Выполнен, СостоянияДокумента.Подготовлен].Содержит(ТекущееСостояние)
        возврат
    ;
    
    пер Организации : Массив<Организации.Ссылка>
    если РабочиеМеста != Неопределено и РабочиеМеста.РабочиеМеста.Размер() > 0
        для Элемент из РабочиеМеста.РабочиеМеста
          Организации.Добавить(Элемент.Организация)
        ;
    ;
    
    пер НачалоПериода: ДатаВремя = ДатаНачала.НачалоДня()
    пер ОкончаниеПериода: ДатаВремя = ДатаОкончания.КонецДня()
    знч ВидОтсутствия =  ЗаСвойСчет ? ВидыОтсутствий.ОтпускЗаСвойСчет : ВидыОтсутствий.Отпуск
  
    ЗапланированныеОтсутствия.ЗаписатьЗапланированныеОтсутствия(
        Отсутствие = Ссылка,
        ВидОтсутствия =  ВидОтсутствия,
        НачалоПериода = НачалоПериода,
        ОкончаниеПериода = ОкончаниеПериода,
        ФизическоеЛицо = ФизическоеЛицо,
        Организации = Организации,
        Внутрисменное = Ложь 
    ) 
    
;

//КонецОбласти