импорт ВебApi
импорт Компания
импорт КонтрольДоступа

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемыйМассив<РазрешениеДоступа>
    возврат КонтрольДоступа.РазрешенияДоступаТаблицыСФизическимЛицомСПравомУдаления()
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ЗаявлениеНаОтпускПериоды.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ЗаявлениеНаОтпускПериоды.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ЗаявлениеНаОтпускПериоды.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        Разрешения.Вставить(Элемент, КонтрольДоступа.РазрешенияДоступаОбъекта(Элемент.Владелец))
    ;
    возврат Разрешения
;

//КонецОбласти

@ВПодсистеме
метод ПериодыОтпускаЗаявления(Владелец: ОснованиеОтпуска.Ссылка?): ПериодыОтпуска
    знч ПериодыОтпуска: ПериодыОтпуска
    ПериодыОтпуска.Владелец = Владелец
    если Владелец == Неопределено
        возврат ПериодыОтпуска
    ;
    пер ДанныеПериодов = ДанныеПериодовОтпуска([Владелец])
    если ДанныеПериодов.СодержитКлюч(Владелец)
        ПериодыОтпуска.Периоды = ДанныеПериодов[Владелец]
    ;
    возврат ПериодыОтпуска
;

@ВПодсистеме
метод ДанныеПериодовОтпуска(ЗаявленияСсылки: ЧитаемаяКоллекция<ОснованиеОтпуска.Ссылка>): ЧитаемоеСоответствие<ОснованиеОтпуска.Ссылка, Массив<ПериодыОтпускаСтрока>>

    знч Данные: Соответствие<ОснованиеОтпуска.Ссылка, Массив<ПериодыОтпускаСтрока>>
    знч Запрос = Запрос{
        Выбрать
            Владелец,
            РабочееМесто,
            ДатаНачала,
            ДатаОкончания,
            ВидОтпуска,
            ЗаСвойСчет,
            КомпенсацияОтпуска,
            КоличествоДнейКомпенсации
        Из
            ЗаявлениеНаОтпускПериоды
        Где
            Владелец В (%ЗаявленияСсылки)}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        если не Данные.СодержитКлюч(РезультатСтрока.Владелец)
            Данные.Вставить(РезультатСтрока.Владелец, новый Массив<ПериодыОтпускаСтрока>())
        ;
        пер НовыеДанные = новый ПериодыОтпускаСтрока()
        НовыеДанные.ДатаНачала = РезультатСтрока.ДатаНачала
        НовыеДанные.ДатаОкончания = РезультатСтрока.ДатаОкончания
        НовыеДанные.РабочееМесто = РезультатСтрока.РабочееМесто
        НовыеДанные.ВидОтпуска = РезультатСтрока.ВидОтпуска
        НовыеДанные.ЗаСвойСчет = РезультатСтрока.ЗаСвойСчет
        НовыеДанные.КомпенсацияОтпуска = РезультатСтрока.КомпенсацияОтпуска
        НовыеДанные.КоличествоДнейКомпенсации = РезультатСтрока.КоличествоДнейКомпенсации
        НовыеДанные.Использовать = НовыеДанные.ДатаНачала != Неопределено
        Данные[РезультатСтрока.Владелец].Добавить(НовыеДанные)
    ;
    возврат Данные
;

@ВПодсистеме
метод ЗаписатьПериодыОтпускаЗаявления(ПериодыОтпуска: ПериодыОтпуска)
    если ПериодыОтпуска.Владелец == Неопределено
        возврат
    ;
    знч Запрос = Запрос{
        Выбрать
            Ссылка
        Из
            ЗаявлениеНаОтпускПериоды
        Где
            Владелец == %{ПериодыОтпуска.Владелец}}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        РезультатСтрока.Ссылка.ЗагрузитьОбъект()?.Удалить()
    ;
    для ПериодОтпуска из ПериодыОтпуска.Периоды
        знч ПериодОтпускаЗаявления: ЗаявлениеНаОтпускПериоды.Объект
        ПериодОтпускаЗаявления.Владелец = ПериодыОтпуска.Владелец как ОснованиеОтпуска.Ссылка
        ПериодОтпускаЗаявления.РабочееМесто = ПериодОтпуска.РабочееМесто
        ПериодОтпускаЗаявления.ДатаНачала = ПериодОтпуска.ДатаНачала
        ПериодОтпускаЗаявления.ДатаОкончания = ПериодОтпуска.ДатаОкончания
        ПериодОтпускаЗаявления.ВидОтпуска = ПериодОтпуска.ВидОтпуска
        ПериодОтпускаЗаявления.ЗаСвойСчет = ПериодОтпуска.ЗаСвойСчет
        ПериодОтпускаЗаявления.КомпенсацияОтпуска = ПериодОтпуска.КомпенсацияОтпуска
        ПериодОтпускаЗаявления.КоличествоДнейКомпенсации = ПериодОтпуска.КоличествоДнейКомпенсации
        ПериодОтпускаЗаявления.Записать()
    ;
;

@ВПроекте
структура ПериодОтпускаЗаявления
    @JsonСвойство(Имя = "startDate")
    пер ДатаНачала: Дата?
    @JsonСвойство(Имя = "endDate")
    пер ДатаОкончания: Дата?
    @JsonСвойство(Имя = "vacationTypeID")
    пер ВидОтпуска: Строка
    @JsonСвойство(Имя = "unpaid")
    пер ЗаСвойСчет: Булево
    @JsonСвойство(Имя = "leaveEncashment")
    пер КомпенсацияОтпуска: Булево
    @JsonСвойство(Имя = "leaveEncashmentDays")
    пер КоличествоДнейКомпенсации: Число
;

@ВПодсистеме
метод ДанныеПериодовОтпускаВJson(
        ДанныеПериодовОтпуска: ЧитаемыйМассив<ПериодыОтпускаСтрока>?,
        Сервисы: ВебApiСервер.СервисыУпаковкиJson,
        Сотрудник: Сотрудники.Ссылка? = Неопределено): ЧитаемыйМассив<ПериодОтпускаЗаявления>?

    если ДанныеПериодовОтпуска == Неопределено
        возврат Неопределено
    ;
    пер ДанныеJson: Массив<ПериодОтпускаЗаявления>
    для ДанныеПериодаОтпуска из ДанныеПериодовОтпуска
        если Сотрудник == Неопределено или ДанныеПериодаОтпуска.РабочееМесто == Сотрудник
            ДанныеJson.Добавить(ДанныеПериодаОтпускаВJson(ДанныеПериодаОтпуска, Сервисы))
        ;
    ;
    если ДанныеJson.Пусто()
        возврат Неопределено
    ;
    возврат ДанныеJson
;

метод ДанныеПериодаОтпускаВJson(
        ДанныеПериодаОтпуска: ПериодыОтпускаСтрока, 
        Сервисы: ВебApiСервер.СервисыУпаковкиJson): ПериодОтпускаЗаявления
        
    знч ДанныеJson = новый ПериодОтпускаЗаявления()
    ДанныеJson.ДатаНачала = ДанныеПериодаОтпуска.ДатаНачала
    ДанныеJson.ДатаОкончания = ДанныеПериодаОтпуска.ДатаОкончания
    если ДанныеПериодаОтпуска.ВидОтпуска != Неопределено
        ДанныеJson.ВидОтпуска = Сервисы.ПолучитьИдентификатор(ДанныеПериодаОтпуска.ВидОтпуска)
    ;
    ДанныеJson.ЗаСвойСчет = ДанныеПериодаОтпуска.ЗаСвойСчет
    ДанныеJson.КомпенсацияОтпуска = ДанныеПериодаОтпуска.КомпенсацияОтпуска
    ДанныеJson.КоличествоДнейКомпенсации = ДанныеПериодаОтпуска.КоличествоДнейКомпенсации
    возврат ДанныеJson
;

@ВПодсистеме
метод КомпараторПериодовОтпуска(Первый: ПериодыОтпускаСтрока, Второй: ПериодыОтпускаСтрока): Число
    если Первый.ДатаНачала == Неопределено 
        возврат 1
    иначе если Второй.ДатаНачала == Неопределено 
        возврат -1
    иначе если Первый.ДатаНачала >= Второй.ДатаНачала
        возврат 1
    иначе если Первый.ДатаНачала < Второй.ДатаНачала
        возврат -1
    ;
;