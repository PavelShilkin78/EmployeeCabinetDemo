импорт ВладельцыКабинетов
импорт ИнтерфейсныеКомпонентыСтандартные
импорт Компания
импорт Компания::Согласования
импорт Криптография
импорт ЛичныеКабинетыПользователей
импорт ОбщегоНазначения
импорт ОбщиеСтандартные
импорт СтандартноеПриложение
импорт УниверсальныеМеханизмы
импорт УниверсальныеМеханизмы::ШаблоныДокументов
импорт ФизическиеЛица
импорт Документы

@Обработчик
метод ПослеЧтения()
    если ЭтоНовый() и АннулируемыйДокумент != Неопределено
        знч ДанныеАннулируемогоЗаявления = Отпуск.ДанныеОснованияОтпуска(АннулируемыйДокумент как ОснованиеОтпуска.Ссылка)
        Объект.ЗаСвойСчет = ДанныеАннулируемогоЗаявления.ЗаСвойСчет
        Объект.КомпенсацияОтпуска= ДанныеАннулируемогоЗаявления.КомпенсацияОтпуска
        Объект.КоличествоДнейКомпенсации = ДанныеАннулируемогоЗаявления.КоличествоДнейКомпенсации
        Объект.ПредоставитьЕдиновременнуюВыплатуКОтпуску= ДанныеАннулируемогоЗаявления.ПредоставитьЕдиновременнуюВыплатуКОтпуску
        Объект.ПредоставитьМатериальнуюПомощьПриОтпуске= ДанныеАннулируемогоЗаявления.ПредоставитьМатериальнуюПомощьПриОтпуске
        
        знч ПразничныеДни = ПраздничныеДни(Объект.ФизическоеЛицо)
        знч ПродолжительностьОтпуска = Отпуск.ПродолжительностьОтпуска(ДанныеАннулируемогоЗаявления.ДатаНачала, 
            ДанныеАннулируемогоЗаявления.ДатаОкончания, ПразничныеДни)
        РасходОстаткаПереносимогоОтпуска = ПродолжительностьОтпуска.КалендарныхДней - ПродолжительностьОтпуска.ПраздничныхДней
            
        Объект.ДатаОкончания = Объект.ДатаНачала.ДобавитьДни(ПродолжительностьОтпуска.КалендарныхДней-1)
    иначе
        АннулируемыйДокумент = Аннулирование.АннулируемыйДокумент(Объект.Ссылка)
    ;

    Компоненты.ЗаявлениеНаОтпуск.АннулируемыйДокумент = АннулируемыйДокумент
    Компоненты.ЗаявлениеНаОтпуск.УстановитьТекущееЗаявление(Объект)

    если не ЭтоНовый() 
        ТребуетсяПодпись = ТребуетсяПодпись(
            Объект.Ссылка,
            Объект.ФизическоеЛицо,
            ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо,
            Компоненты.ЗаявлениеНаОтпуск.ДанныеДокумента.Состояние
        )
    ;
    УстановитьРежимПросмотра()
    ИнтерфейсныеКомпоненты.ИнициализироватьПодчиненныеКомпоненты(Компоненты)
    
    СформированоАннулирование.ПодключитьОбработчик(&ПослеЗаписиАннулирования)

;

метод ПослеЗаписиАннулирования()
    Закрыть()
;

метод ПереносОтпускаГруппаТолькоЧтение(): Булево
    возврат Компоненты.ЗаявлениеНаОтпуск.РежимСогласования 
        или Компоненты.ЗаявлениеНаОтпуск.РедактированиеЗапрещено
;
метод ЗаявлениеНаПереносОтпускаЗавершеноЧтениеДанных(Источник: ЗаявлениеНаОтпускКомпонент, Событие: СобытиеКомпонента)
    Компоненты.ГлавнаяГруппа.ЧтениеДанныхЗавершено = Истина
;

метод ЗаявлениеНаПереносОтпускаФормаДокументаВысота(): Число
    возврат ОсновнойИнтерфейс.ВысотаФормыДокумента(100)
;

метод ЗаявлениеНаПереносОтпускаФормаДокументаЗаголовок(): Строка
    возврат Компоненты.ЗаявлениеНаОтпуск.ЗаголовокФормы()
;

метод ЗаголовокКнопкиЗаписатьИЗакрыть(): Строка
    возврат ОбщегоНазначения.ЗаголовокКнопкиЗаписатьИЗакрыть(
        ОбщегоНазначения.ЭтоЧерновик(Компоненты.ЗаявлениеНаОтпуск.ДанныеДокумента?.Состояние),
        Компоненты.ЗаявлениеНаОтпуск.РедактированиеЗапрещено или Компоненты.ЗаявлениеНаОтпуск.РежимПросмотра,
        Истина)
;

метод ВидКнопкиЗаписатьИЗакрыть(): ВидКнопки?
    возврат ОбщегоНазначения.ВидКнопкиЗаписатьИЗакрыть(
        ОбщегоНазначения.ЭтоЧерновик(Компоненты.ЗаявлениеНаОтпуск.ДанныеДокумента?.Состояние),
        Компоненты.ЗаявлениеНаОтпуск.РедактированиеЗапрещено или Компоненты.ЗаявлениеНаОтпуск.РежимПросмотра,
        Истина)
;

метод ИспользованиеКнопкиСохранитьЧерновик(): Булево
    возврат ОбщегоНазначения.ИспользованиеКнопкиСохранитьЧерновик(
        Объект.ФизическоеЛицо,
        Компоненты.ЗаявлениеНаОтпуск.ПодписанПослеАвтора,
        Компоненты.ЗаявлениеНаОтпуск.РежимПросмотра или (Компоненты.ЗаявлениеНаОтпуск.ДанныеДокумента?.Отправлен ?? Ложь))
;

метод ЗаголовокКнопкиСохранитьЧерновик(): Строка
    возврат ОбщегоНазначения.ЗаголовокКнопкиСохранитьЧерновик(ОбщегоНазначения.ЭтоЧерновик(Компоненты.ЗаявлениеНаОтпуск.ДанныеДокумента?.Состояние))
;

метод ИспользованиеКнопкиУдалить(): Булево
    возврат ОбщегоНазначения.ИспользованиеКнопкиУдалить(
        Компоненты.ЗаявлениеНаОтпуск.ДанныеДокумента?.Состояние,
        Объект.ФизическоеЛицо, 
        ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо, 
        ЭтоНовый(), 
        Компоненты.ЗаявлениеНаОтпуск.ДанныеДокумента?.Отправлен ?? Ложь, 
        Компоненты.ЗаявлениеНаОтпуск.ПодписанТекущимФизическимЛицом,
        Компоненты.ЗаявлениеНаОтпуск.ПодписанПослеАвтора)
;

метод ЗаголовокКнопкиУдалить(): Строка
    возврат ОбщегоНазначения.ЗаголовокКнопкиУдалить(Компоненты.ЗаявлениеНаОтпуск.ПодписанТекущимФизическимЛицом)
;

метод ПанельОсновнаяЗаписатьИЗакрыть(Источник: КоманднаяПанельФорм, Событие: СобытиеКомпонента)
    ЗаписатьДокумент(ОтправитьНаСогласование = Истина)
;

метод ПанельОсновнаяСохранитьЧерновик(Источник: КоманднаяПанельФорм, Событие: СобытиеКомпонента)
    ЗаписатьДокумент(Ложь)
;

метод ЗаписатьДокумент(ОтправитьНаСогласование: Булево)
    если Компоненты.ЗаявлениеНаОтпуск.РежимПросмотра
        или (Объект.ФизическоеЛицо != ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
            или Компоненты.ЗаявлениеНаОтпуск.РедактированиеЗапрещено 
                и не (ОтправитьНаСогласование == Ложь
                    и Компоненты.ЗаявлениеНаОтпуск.ДанныеДокумента.Состояние == СостоянияДокумента.Подготовлен))
                
        Закрыть(СтандартныеФормы.ДействиеВФорме.НеИзменен)
        возврат
    ;
       
    если Компоненты.ЗаявлениеНаОтпуск.ОшибкаЗагрузки
        ОбщегоНазначения.УведомлениеОшибкиЗагрузкиФайлов()
        возврат
    ;

    если ОтправитьНаСогласование
        знч РезультатПроверки = Компоненты.ЗаявлениеНаОтпуск.ПроверитьЗаполнение()
        если Компоненты.ЗаявлениеНаОтпуск.РезультатПредупрежденияЗаполненияПериода.Пусто() == Ложь
            и Компоненты.ЗаявлениеНаОтпуск.ОзнакомленСПредупреждениями == Ложь
                возврат
        ;
        если не РезультатПроверки
            возврат
        ;
        если Компоненты.ЗаявлениеНаОтпуск.РедактированиеЗапрещено
            Закрыть(СтандартныеФормы.ДействиеВФорме.НеИзменен)
            возврат
        ;
        если ТребуетсяПодпись и не Криптография.ВвестиПарольЗакрытогоКлюча(
            Объект.ФизическоеЛицо,
            Объект.Ссылка)
            возврат
        ;
    ;
    // Признак ЭтоНовый получаем до записи 
    пер ЭтоНовый: Булево = ЭтоНовый()
    пер Состояние: СостоянияДокумента 
    если ОтправитьНаСогласование
        Состояние = СостоянияДокумента.Подготовлен
    ;
    пер ОтменитьОтправку: Булево
    если не ОтправитьНаСогласование и не (Компоненты.ЗаявлениеНаОтпуск.ДанныеДокумента.Состояние == Неопределено или Компоненты.ЗаявлениеНаОтпуск.ДанныеДокумента.Состояние == СостоянияДокумента.Черновик)
        ОтменитьОтправку = Истина
    ;
    
    пер ТабличныеЧасти: ЗаявлениеНаОтпускКомпонент.ТабличныеЧасти = Компоненты.ЗаявлениеНаОтпуск.МодифицированныеТабличныеЧасти()
    пер ДанныеДокумента = новый ДанныеДокумента()
    ДанныеДокумента.Ссылка = Объект.Ссылка
    ДанныеДокумента.ФизическоеЛицо = Объект.ФизическоеЛицо
    ДанныеДокумента.Дата = Объект.Дата
    ДанныеДокумента.ДатаНачала = Компоненты.ЗаявлениеНаОтпуск.ПериодОтсутствия?.От
    ДанныеДокумента.ДатаОкончания = Компоненты.ЗаявлениеНаОтпуск.ПериодОтсутствия?.До
    ДанныеДокумента.ЗаСвойСчет = Объект.ЗаСвойСчет
    ДанныеДокумента.КоличествоДнейКомпенсации = Объект.КоличествоДнейКомпенсации
    ДанныеДокумента.КомпенсацияОтпуска = Объект.КомпенсацияОтпуска
    ДанныеДокумента.ПредоставитьЕдиновременнуюВыплатуКОтпуску = Объект.ПредоставитьЕдиновременнуюВыплатуКОтпуску
    ДанныеДокумента.ПредоставитьМатериальнуюПомощьПриОтпуске = Объект.ПредоставитьМатериальнуюПомощьПриОтпуске
    ДанныеДокумента.СпособСвязи = Объект.СпособСвязи
    ДанныеДокумента.Комментарий = Объект.Комментарий
    ДанныеДокумента.Причина = Объект.Причина
    
    знч РезультатПодписания = Записать(
        ЭтоНовый(), 
        ДанныеДокумента, 
        ТабличныеЧасти, 
        ОтправитьНаСогласование, 
        Криптография.ПараметрыСеанса().ПарольЗакрытогоКлючаПользователя,
        ОтменитьОтправку,
        АннулируемыйДокумент)
    если РезультатПодписания.ЕстьОшибки
        СтандартныеФормы.ПоказатьУведомление(
            "Ошибка подписания документа",
            РезультатПодписания.ТекстОшибки,
            ОценкаИнформации.Отрицательная
        )
        возврат
    ;
    если ОтправитьНаСогласование
        если Криптография.УстановитьПодписьВСервисеПодписания(
            Объект.Ссылка, ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо,
            Согласования.РольПодписантаСотрудник()) == Ложь
            
            СостДокументов.УстановитьСостояниеДокумента(Объект.Ссылка, СостоянияДокумента.Черновик)
            Прочитать(Объект.Ссылка)
            возврат
        ;
    ;
    Компоненты.ЗаявлениеНаОтпуск.СброситьМодифицированностьТабличныхЧастей()
    Компоненты.ЗаявлениеНаОтпуск.РедактированиеЗапрещено = Истина
    Компоненты.ЗаявлениеНаОтпуск.ДанныеДокумента.Состояние = СостоянияДокумента.Подготовлен
    если РассчитаннаяМодифицированность
        СобственнаяМодифицированность = Ложь
    ;
    // Опровещение выполянем перед закрытием - когда уже записаны все данные, сопровождающие запись документа
    знч ДанныеСостояния = новый СостояниеДокументаКомпонентДанных()
    ДанныеСостояния.Документ = ДанныеДокумента.Ссылка// как неизвестно
    ДанныеСостояния.ДатаДокумента = ДанныеДокумента.Дата
    ДанныеСостояния.Состояние = Состояние
    ДанныеСостояния.ДополнительноеПредставление = СостДокументов.ПредставлениеПериодаДокумента(
        ДатаДокумента = ДанныеСостояния.ДатаДокумента,
        ДатаНачала = ДанныеДокумента.ДатаНачала,
        ДатаОкончания = ДанныеДокумента.ДатаОкончания)
    ИзмененоСостояниеДокумента.Оповестить(ДанныеСостояния, ЭтоНовый)
    если ОтправитьНаСогласование
        СтандартныеФормы.ПоказатьУведомление("Отправлено", "Заявление отправлено на согласование. После согласования или отклонения заявления вы получите уведомление.")
    ;
    СформированоАннулирование.Оповестить()
    Закрыть(СтандартныеФормы.ДействиеВФорме.Изменен)
;

метод ПанельОсновнаяУдалить(Источник: КоманднаяПанельФорм, Событие: СобытиеКомпонента)
    СобственнаяМодифицированность = Ложь
    если Объект.ФизическоеЛицо != ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
        ОтменитьСогласование(Объект.Ссылка, ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо)
        МенеджерГлобальныхКлиентскихСобытий.Оповестить(Согласования.СОГЛАСОВАНИЕ_ОТМЕНЕНО, Объект.Ссылка)    
    иначе
        УдалитьДокумент(Объект.Ссылка, Объект.ФизическоеЛицо)
        УдаленДокумент.Оповестить(Объект.Ссылка, Объект.Дата)
    ;
    Закрыть(СтандартныеФормы.ДействиеВФорме.Удален)
;

метод ПанельСогласованияВыполненоСогласование(Источник: КоманднаяПанельСогласования, Событие: СобытиеКомпонента)
    Закрыть(СтандартныеФормы.ДействиеВФорме.Изменен)
;

метод СогласованиеДокументаВидимость(): Булево
    возврат Компоненты.ЗаявлениеНаОтпуск.ДанныеДокумента?.Состояние != Неопределено
;

метод УстановитьДоступностьКоманд(Доступность: Булево)
    пер ГлавнаяГруппа: КорневойКомпонентМодальнойФормы = Компоненты.ГлавнаяГруппа
    для КоманднаяПанель из ГлавнаяГруппа.КомандныеПанели
         КоманднаяПанель.Доступность = Доступность
    ;
;

метод ПанельСогласованияВидимость(): Булево
    возврат Компоненты.ЗаявлениеНаОтпуск.РежимСогласования
;

метод ДанныеСогласующего(): Согласования.ДанныеСогласующего?
    возврат Компоненты.ЗаявлениеНаОтпуск.ДанныеСогласующего
;

метод ПанельОсновнаяВидимость(): Булево
    возврат не ПанельСогласованияВидимость()
;

метод ЗаявлениеНаПереносОтпускаИзменениеСостоянияЗагрукиФайлов(Источник: ЗаявлениеНаОтпускКомпонент, Событие: СобытиеСДанными<Булево>)
    УстановитьДоступностьКоманд(не Событие.Данные)
;

метод ПанельСогласованияОшибкаПриВыполненииКоманды(Источник: КоманднаяПанельСогласования, Событие: СобытиеСДанными<Исключение>)
    ПоказатьОшибку(Событие.Данные)
;

метод ПанельОсновнаяОшибкаПриВыполненииКоманды(Источник: КоманднаяПанельФорм, Событие: СобытиеСДанными<Исключение>)
    ПоказатьОшибку(Событие.Данные)
;

метод ПоказатьОшибку(Ошибка: Исключение)
    Криптография.СброситьПарольЗакрытогоКлючаПриОшибкеВводаПароля(Ошибка)
    Компоненты.ГлавнаяГруппа.ПоказатьОшибку(
        ОбщегоНазначения.ОписаниеОшибкиПриДействииСДокументом(
            Ошибка, 
            Объект.ФизическоеЛицо, 
            Компоненты.ЗаявлениеНаОтпуск.ПодписанТекущимФизическимЛицом))
;

метод НазваниеПредставления(): Строка
    возврат Отпуск.НазваниеПредставления()
;

@НаСервере @НаКлиенте
структура ДанныеДокумента
    пер Ссылка: ЗаявлениеНаПереносОтпуска.Ссылка?
    пер Дата: Дата?
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка?
    пер ДатаНачала: Дата?
    пер ДатаОкончания: Дата?
    пер КомпенсацияОтпуска: Булево
    пер КоличествоДнейКомпенсации: Число
    пер ПредоставитьЕдиновременнуюВыплатуКОтпуску: Булево
    пер ПредоставитьМатериальнуюПомощьПриОтпуске: Булево
    пер Комментарий: Строка
    пер ЗаСвойСчет: Булево
    пер СпособСвязи: СпособыСвязи
    пер АннулируемыйДокумент: ОснованиеОтпуска.Ссылка?
    пер Причина: Строка
;

@НаСервере @ДоступноСКлиента
статический метод ТребуетсяПодпись(Ссылка: ЗаявлениеНаПереносОтпуска.Ссылка,
                       ФизическоеЛицо: ФизическиеЛица.Ссылка,
                       Согласующий: ФизическиеЛица.Ссылка,
                       Состояние: СостоянияДокумента): Булево
    
    пер ТекущиеСогласующие = Согласования.ТекущиеСогласующие(
        Ссылка,
        Отпуск.ВидСогласуемогоЗаявленияОтпуск(),
        ФизическоеЛицо
    )

    пер ТребуетсяПодпись = ОбщегоНазначения.ЭтоЧерновик(Состояние)
    для ТекущийСогласующий из ТекущиеСогласующие 
        если ТекущийСогласующий.Согласующий == Согласующий 
            ТребуетсяПодпись = (ТекущийСогласующий.ТребуемаяПодпись == ВидыТребуемойПодписи.УНЭП)
            прервать
        ;
    ;

    возврат ТребуетсяПодпись
;

@НаСервере @ДоступноСКлиента
статический метод ОтменитьСогласование(Ссылка: ЗаявлениеНаПереносОтпуска.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?)
    СогласованияДокументов.ОтозватьПодпись(Ссылка, ФизическоеЛицо)
    СостДокументов.УстановитьСостояниеДокумента(Ссылка, СостоянияДокумента.Подготовлен)
;

@НаСервере @ДоступноСКлиента
статический метод УдалитьДокумент(Ссылка: ЗаявлениеНаПереносОтпуска.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?)
    СогласованияДокументов.ОтозватьПодпись(Ссылка, ФизическоеЛицо)
    ЗаявлениеНаПереносОтпуска.УдалитьДокумент(Ссылка, ФизическоеЛицо)
;

@НаСервере @ДоступноСКлиента
статический метод Записать(ЭтоНовый: Булево, 
                ДанныеДокумента: ДанныеДокумента, 
                ТабличныеЧасти: ЗаявлениеНаОтпускКомпонент.ТабличныеЧасти, 
                ОтправитьНаСогласование: Булево,
                ПарольЗакрытогоКлюча: Строка?,
                ОтменитьОтправку: Булево,
                АннулируемыйДокумент: АннулируемыйДокумент.Ссылка): Криптография.РезультатПодписания
                
    пер Заявление: ЗаявлениеНаПереносОтпуска.Объект?
    пер ЗаявлениеСсылка: ЗаявлениеНаПереносОтпуска.Ссылка? = ДанныеДокумента.Ссылка
    если ЭтоНовый
        Заявление = новый ЗаявлениеНаПереносОтпуска.Объект(ЗаявлениеСсылка.Ид).Заполнить()
    иначе
        Заявление = ЗаявлениеСсылка.ЗагрузитьОбъект()
    ;
    Заявление!.ФизическоеЛицо = ДанныеДокумента.ФизическоеЛицо
    Заявление!.Дата = ДанныеДокумента.Дата
    Заявление!.ДатаНачала = ДанныеДокумента.ДатаНачала
    Заявление!.ДатаОкончания = ДанныеДокумента.ДатаОкончания
    Заявление!.ЗаСвойСчет = ДанныеДокумента.ЗаСвойСчет
    Заявление!.КоличествоДнейКомпенсации = ДанныеДокумента.КоличествоДнейКомпенсации
    если ДанныеДокумента.ЗаСвойСчет == Истина
        Заявление!.КомпенсацияОтпуска = Ложь
    иначе
        Заявление!.КомпенсацияОтпуска = ДанныеДокумента.КомпенсацияОтпуска
    ;
    Заявление!.ПредоставитьЕдиновременнуюВыплатуКОтпуску = ДанныеДокумента.ПредоставитьЕдиновременнуюВыплатуКОтпуску
    Заявление!.ПредоставитьМатериальнуюПомощьПриОтпуске = ДанныеДокумента.ПредоставитьМатериальнуюПомощьПриОтпуске
    Заявление!.СпособСвязи = ДанныеДокумента.СпособСвязи
    Заявление!.Комментарий = ДанныеДокумента.Комментарий
    Заявление!.Причина = ДанныеДокумента.Причина
    
    исп Транзакции.Начать()
    Заявление.ЗаписатьАннулирование(АннулируемыйДокумент)
    Заявление.Записать()
    ПрисоединенныеФайлыМенеджер.Записать(ТабличныеЧасти.ТаблицаФайлы)
    если не ТабличныеЧасти.ТаблицаЗаместители == Неопределено
        ЗаместителиМенеджер.Записать(ТабличныеЧасти.ТаблицаЗаместители, () -> новый ЗаявлениеНаОтпускЗаместители.Объект())
    ;
    если не ТабличныеЧасти.ТаблицаУведомляемые == Неопределено
        УведомляемыеМенеджер.Записать(ТабличныеЧасти.ТаблицаУведомляемые)
    ;
    если не ТабличныеЧасти.ТаблицаРабочиеМеста == Неопределено
        РабочиеМестаДокументов.ЗаписатьРабочиеМеста(ТабличныеЧасти.ТаблицаРабочиеМеста)
    ;
    если не ТабличныеЧасти.ТаблицаПериодыОтпуска == Неопределено
        ЗаявлениеНаОтпускПериоды.ЗаписатьПериодыОтпускаЗаявления(ТабличныеЧасти.ТаблицаПериодыОтпуска)
    ;
    ШаблоныДокументовМенеджер.СохранитьРеквизиты(ТабличныеЧасти.ДополнительныеРеквизиты)
    ПредставленияДокументов.СформироватьПредставленияДокумента(ЗаявлениеСсылка, Истина)
    пер РезультатПодписания: Криптография.РезультатПодписания
    если ОтправитьНаСогласование
        знч ДанныеСогласующего = новый Согласования.ДанныеСогласующего(ДанныеДокумента.ФизическоеЛицо, Согласования.РольПодписантаСотрудник())
        РезультатПодписания = Согласования.ПодписатьИУстановитьСостояниеДокумента(
            ЗаявлениеСсылка, ДанныеСогласующего, ПарольЗакрытогоКлюча, СостоянияДокумента.Подготовлен, ДанныеДокумента.ФизическоеЛицо)
        если РезультатПодписания.ЕстьОшибки
            возврат РезультатПодписания
        ;
    ;
    если ОтменитьОтправку
        СогласованияДокументов.ОтозватьПодпись(ЗаявлениеСсылка, ДанныеДокумента.ФизическоеЛицо)
        СостДокументов.УстановитьСостояниеДокумента(ЗаявлениеСсылка, СостоянияДокумента.Черновик)
    иначе
        Заявление!.ЗапланироватьОтсутствие(ТабличныеЧасти.ТаблицаРабочиеМеста)
    ;
    
    возврат РезультатПодписания
;

метод ОсновнойКомпонентПанели(): Компонент
    возврат Компоненты.ЗаявлениеНаОтпуск
;

метод ЗаявлениеНаПереносОтпускаИзменениеСостоянияЗагрукиФайлов(ЗагрузкаВыполняется: Булево)
    УстановитьДоступностьКоманд(не ЗагрузкаВыполняется)
;

метод ВидимостьОзнакомленСПредупреждениями(): Булево
    возврат не Компоненты.ЗаявлениеНаОтпуск.РезультатПредупрежденияЗаполненияПериода.Пусто()  
        и Компоненты.ЗаявлениеНаОтпуск.РезультатПроверкиЗаполненияПериода.Пусто()
;

метод ОзнакомленСПредупреждениямиПриИзменении(Источник: Флажок, Событие: СобытиеПриИзменении<Булево?>)
    Компоненты.ЗаявлениеНаОтпуск.ОзнакомленСПредупреждениями = Источник.Значение ?? Ложь   
;

метод УстановитьРежимПросмотра()
    если не Компания.ПараметрыСеанса().ТекущийПользовательСотрудник
        Компоненты.ЗаявлениеНаОтпуск.РежимПросмотра = Истина
    ;
;

@ВПодсистеме
@НаСервере @НаКлиенте
структура РеквизитыЗаявления
    обз знч ЗаСвойСчет: Булево
    обз знч КомпенсацияОтпуска: Булево
    обз знч КоличествоДнейКомпенсации: Число
    обз знч ПредоставитьЕдиновременнуюВыплатуКОтпуску: Булево
    обз знч ПредоставитьМатериальнуюПомощьПриОтпуске: Булево
;

@НаСервере @ДоступноСКлиента
статический метод ПраздничныеДни(ФизическоеЛицо: ФизическиеЛица.Ссылка?): Соответствие<Число, Массив<Дата>>
    возврат Отпуск.ПраздничныеДни(ФизическоеЛицо)
;
