импорт Компания
импорт ОбщиеСтандартные

@ВПодсистеме
конст ЗАГОЛОВОК_КОМАНДЫ_ПОДАТЬ_ЗАЯВЛЕНИЕ: Строка = "Подать заявление" 

@ВПодсистеме
перечисление ВидыЗаявленийНаОтпуск
    Отпуск умолчание,
    ОтпускЗаСвойСчет,
    КомпенсацияОтпуска,
    ОтменаОтпуска,
    ПереносОтпуска
;

@ВПодсистеме 
метод СоздатьЗаявлениеНаОтпуск(Действие: ВидыЗаявленийНаОтпуск)
    выбор Действие
    когда Отпуск
        СтатистикаИспользованияПриложения.ЗарегистрироватьЦель("ОтпускОтпуск")
        ЗаявлениеНаОтпускФормаДокумента.ОткрытьВМодальномОкне()
    когда ОтпускЗаСвойСчет
        СтатистикаИспользованияПриложения.ЗарегистрироватьЦель("ОтпускОтпускЗаСвойСчет")
        пер ДанныеЗаполнения: Отпуск.ДанныеЗаполненияОтпуска
        ДанныеЗаполнения.ЗаСвойСчет = Истина
        ЗаявлениеНаОтпускФормаДокумента.ОткрытьВМодальномОкне(ДанныеЗаполнения = ДанныеЗаполнения)
    когда КомпенсацияОтпуска
        СтатистикаИспользованияПриложения.ЗарегистрироватьЦель("ОтпускКомпенсацияОтпуска")
        ЗаявлениеНаКомпенсациюОтпускаФормаДокумента.ОткрытьВМодальномОкне()
    ;
;

@ВПодсистеме
метод КомпенсацияОтпускаПояснение(КоличествоДнейКомпенсации: Число, РабочиеМеста: Массив<РабочееМесто>): Строка
    если Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
        возврат КомпенсацияОтпускаСотрудниковПояснение(РабочиеМеста)
    ;
    возврат КомпенсацияОтпускаПредставлениеСтроки(КоличествоДнейКомпенсации)
;

метод КомпенсацияОтпускаСотрудниковПояснение(РабочиеМеста: Массив<РабочееМесто>): Строка
    пер КомпенсацияОтпускаЗаголовок: Строка
    пер ОстаткиОтпусковСотрудников = Отпуск.ПараметрыСеанса().ОстаткиОтпусковСотрудников
    если ОстаткиОтпусковСотрудников.Пусто() или РабочиеМеста.Пусто()
        возврат КомпенсацияОтпускаЗаголовок
    ;
    если РабочиеМеста.Размер() == 1
        КомпенсацияОтпускаЗаголовок = КомпенсацияОтпускаПредставлениеСтроки(ОстаткиОтпусковСотрудников.Первый().КоличествоДнейКомпенсации)
    иначе
        для РабочееМесто из РабочиеМеста
            пер РабочееМестоПредставление: Строка = Сотрудники.ПредставлениеРабочегоМеста(
                                                    РабочееМесто.Позиция, 
                                                    РабочееМесто.Должность, 
                                                    РабочееМесто.МестоВСтруктуреПредприятия, 
                                                    РабочееМесто.Организация, 
                                                    Ложь)
            если не КомпенсацияОтпускаЗаголовок.Пусто()
                КомпенсацияОтпускаЗаголовок += "\н" 
            ;
            КомпенсацияОтпускаЗаголовок += РабочееМестоПредставление
            пер КоличествоДней: Число
            для ДанныеСотрудника из ОстаткиОтпусковСотрудников
                если ДанныеСотрудника.РабочееМесто == РабочееМесто.РабочееМесто
                    КоличествоДней = ДанныеСотрудника.КоличествоДнейКомпенсации
                    прервать
                ;
            ;
            КомпенсацияОтпускаЗаголовок += " - " + КомпенсацияОтпускаПредставлениеСтроки(КоличествоДней)
        ;
    ;
    возврат КомпенсацияОтпускаЗаголовок
;

метод КомпенсацияОтпускаПредставлениеСтроки(КоличествоДнейКомпенсации: Число): Строка
    если КоличествоДнейКомпенсации == 0
        возврат "Компенсация отпуска недоступна"
    ;
    возврат "Можно компенсировать не больше чем %{КоличествоДнейКомпенсации.ВСтроку()} %{МенеджерСтрок.ТекстПоКоличеству("день", КоличествоДнейКомпенсации)} отпуска"
;

@ВПодсистеме
метод КомпенсацияОтпускаДоступна(): Булево
    пер КомпенсацияОтпускаДоступна: Булево
    если Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
        пер ОстаткиОтпусковСотрудников = Отпуск.ПараметрыСеанса().ОстаткиОтпусковСотрудников
        для ДанныеСотрудника из ОстаткиОтпусковСотрудников
            если ДанныеСотрудника.КоличествоДнейКомпенсации > 0
                КомпенсацияОтпускаДоступна = Истина
                прервать
            ;
        ;
    иначе
        КомпенсацияОтпускаДоступна = Отпуск.ПараметрыСеанса().КоличествоДнейКомпенсации > 0
    ;
    возврат КомпенсацияОтпускаДоступна
;


@ВПодсистеме
структура ДниКомпенсацииСотрудника
    пер ПредставлениеСотрудника: Строка
    пер ДнейКомпенсации: Число
;

@ВПодсистеме
метод МаксимальноеКоличествоДнейКомпенсацииОтпуска(ВыбранныеРабочиеМеста: Массив<РабочееМесто>): ДниКомпенсацииСотрудника
    пер КоличествоДнейКомпенсации: ДниКомпенсацииСотрудника
    пер ВыбранныеСотрудники: Соответствие<Сотрудники.Ссылка?, Строка>
    для РабочееМесто из ВыбранныеРабочиеМеста
        пер РабочееМестоПредставление: Строка = Сотрудники.ПредставлениеРабочегоМеста(
                                                    РабочееМесто.Позиция, 
                                                    РабочееМесто.Должность, 
                                                    РабочееМесто.МестоВСтруктуреПредприятия, 
                                                    РабочееМесто.Организация, 
                                                    Ложь)
        ВыбранныеСотрудники.Вставить(РабочееМесто.РабочееМесто, РабочееМестоПредставление)
    ;
    пер ОстаткиОтпусковСотрудников = Отпуск.ПараметрыСеанса().ОстаткиОтпусковСотрудников
    для ДанныеСотрудника из ОстаткиОтпусковСотрудников
        если ВыбранныеСотрудники.СодержитКлюч(ДанныеСотрудника.РабочееМесто)
            если КоличествоДнейКомпенсации.ПредставлениеСотрудника.Пусто() 
                или ДанныеСотрудника.КоличествоДнейКомпенсации < КоличествоДнейКомпенсации.ДнейКомпенсации
                КоличествоДнейКомпенсации.ПредставлениеСотрудника = ВыбранныеСотрудники.Получить(ДанныеСотрудника.РабочееМесто)
                КоличествоДнейКомпенсации.ДнейКомпенсации = ДанныеСотрудника.КоличествоДнейКомпенсации
            ;
        ;
    ;
    возврат КоличествоДнейКомпенсации
;

@ВПодсистеме
метод ОстатокОтпускаНаДату(Дата: Дата): Число?
    возврат Отпуск.ПараметрыСеанса().ОстатокОтпуска
;
