импорт Документы
импорт ИнтерфейсныеКомпонентыСтандартные 
импорт ИнтерфейсныеКомпонентыКабинеты
импорт УниверсальныеМеханизмы
импорт ОбщиеСтандартные
импорт Справки
импорт ФизическиеЛица
импорт ЛичныеКабинетыПользователей
импорт Компания

конст ТИПИЧНЫЙ_ОТПУСК: Число = 14

@Обработчик
метод ПослеСоздания()
    
    КомандыСоздания = СформироватьКомандыСоздания(
        Клиент.ЗАГОЛОВОК_КОМАНДЫ_ПОДАТЬ_ЗАЯВЛЕНИЕ,
        Отпуск.СписокВидовЗаявлений(),
        &ФормаРазделаПриНажатииКомандыСоздания
    )
    пер ОстатокОтпуска = Отпуск.ПараметрыСеанса().ОстатокОтпуска ?? 0
    если Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
        для ДанныеСотрудника из Отпуск.ПараметрыСеанса().ОстаткиОтпусковСотрудников
            если ДанныеСотрудника.ОсновноеМестоРаботы
                ОстатокОтпуска = 0
                для ДанныеВидаОтпуска из ДанныеСотрудника.ВидыОтпусков
                    ОстатокОтпуска += ДанныеВидаОтпуска.ОстатокОтпуска.ЦелаяЧасть()
                ;
                прервать
            ;
        ;
    ;
    КоличествоДнейОтпуска = ОстатокОтпуска.ЦелаяЧасть() > ТИПИЧНЫЙ_ОТПУСК ? ОстатокОтпуска.ЦелаяЧасть() : ТИПИЧНЫЙ_ОТПУСК
    ДатаОтпуска = Дата.Сейчас()
    НесколькоВидовОтпусков = Отпуск.ИспользуетсяНесколькоВидовОтпусков()
    
    ЗаполнитьТаблицуРабочихМест()
    ЗаполнитьДатыОтпускаСотрудников()
    ЗаполнитьОстатокОтпускаСотрудников()
    
    ЗаполнитьРасчетнуюДатуОтпуска()
    ЗаполнитьРасчетноеКоличествоДнейОтпуска()
    
    знч Сервисы = ОтпускДополнительныеЭлементыПоставщик.ПолучитьСервисы()
    знч ДополнительныеКомпоненты: Массив<Отпуск.КомпонентФормыРаздела>
    для Сервис из Сервисы
        для ОписаниеКомпонента из Сервис.КомпонентыРаздела()
            ДополнительныеКомпоненты.Добавить(ОписаниеКомпонента)
        ;    
    ;
    если не ДополнительныеКомпоненты.Пусто()
        знч ИнициализируемыеКомпоненты: Массив<Компонент>
        знч ОсновноеСодержимое = Содержимое
        ИнициализируемыеКомпоненты.Добавить(ОсновноеСодержимое)
        знч Страницы = новый Страницы()
        Страницы.РастягиватьПоГоризонтали = Истина
        Страницы.РастягиватьПоВертикали = Истина
        знч ОснованяСтраница = новый Страница()
        ОснованяСтраница.Заголовок = "Информация"
        ОснованяСтраница.Содержимое = ОсновноеСодержимое
        Страницы.Страницы.Добавить(ОснованяСтраница)
        для ОписаниеКомпонента из ДополнительныеКомпоненты
            знч Страница = новый Страница()
            Страница.Заголовок = ОписаниеКомпонента.Наименование
            Страница.Содержимое = ОписаниеКомпонента.Компонент
            Страницы.Страницы.Добавить(Страница)
            ИнициализируемыеКомпоненты.Добавить(ОписаниеКомпонента.Компонент)
        ;
        Содержимое = новый ПроизвольныйШаблонФормы(Содержимое = Страницы)
        ИнтерфейсныеКомпоненты.ИнициализироватьПодчиненныеКомпоненты(ИнициализируемыеКомпоненты)
    ;
    ИнтерфейсныеКомпоненты.ИнициализироватьПодчиненныеКомпоненты(Компоненты)
;

метод ФормаРазделаПриНажатииКомандыСоздания(Действие: ЭлементСпискаЗначений<Клиент.ВидыЗаявленийНаОтпуск>)
    СтатистикаИспользованияПриложения.ЗарегистрироватьЦель("ОтсутствиеФормаВызовИзРаздела")
    Клиент.СоздатьЗаявлениеНаОтпуск(Действие.Значение)
;

метод СформироватьКомандыСоздания(ЗаголовокГруппы: Строка, Действия: ЧитаемыйМассив<ЭлементСпискаЗначений<Клиент.ВидыЗаявленийНаОтпуск>>, Обработчик: (ЭлементСпискаЗначений<Клиент.ВидыЗаявленийНаОтпуск>) -> ничто): Команда | ГруппаКомандногоИнтерфейса<Команда>?
    если не Компания.ПараметрыСеанса().ТекущийПользовательСотрудник
        возврат Неопределено
    ;
    если Действия.Пусто()
        возврат Неопределено
    ;

    если Действия.Размер() == 1
        пер Действие = Действия[0]
        пер Команда = новый ОбычнаяКоманда(метод (Команда: ОбычнаяКоманда) ->
            Обработчик(Действие)
        ;, Действие.Представление)
        возврат Команда
    ;

    пер ДействияКомандыСоздания = <Команда>[]
    для Действие из Действия
        пер Команда = новый ОбычнаяКоманда(метод (Команда: ОбычнаяКоманда) ->
            Обработчик(Действие)
        ;, Действие.Представление)
        ДействияКомандыСоздания.Добавить(Команда)
    ;

    возврат новый ГруппаКомандногоИнтерфейса<Команда>(ЗаголовокГруппы, Неопределено, ДействияКомандыСоздания)
;

метод ЗапросПоДнямДнейПриИзменении(Источник: ПолеВвода<Число>, Событие: СобытиеПриИзменении<Число>)
    СтатистикаИспользованияПриложения.ЗарегистрироватьЦель("КалькуляторОтпускаДни")
    ЗаполнитьДатыОтпускаСотрудников()
    ЗаполнитьРасчетнуюДатуОтпуска()
;

метод ЗаполнитьРасчетнуюДатуОтпуска()
    ДатаОтпускаРасчетная = ""
    пер РасчетнаяДатаОтпуска: Дата?
    если Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
        если не ТаблицаРабочихМест.Пусто() и ДатаОтпускаСотрудников.СодержитКлюч(ТаблицаРабочихМест[0].РабочееМесто)
            РасчетнаяДатаОтпуска = ДатаОтпускаСотрудников.Получить(ТаблицаРабочихМест[0].РабочееМесто)
        ;
    иначе если КоличествоДнейОтпуска > 0
        РасчетнаяДатаОтпуска = ДатаОтпускаФизическогоЛицаПоДлительности(ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо!, КоличествоДнейОтпуска)
    ;
    если РасчетнаяДатаОтпуска != Неопределено
        ДатаОтпускаРасчетная = "Начиная с " + МенеджерДат.ФорматДаты(РасчетнаяДатаОтпуска, "дд ММММ гггг")
    иначе
        ДатаОтпускаРасчетная = "Неизвестно"
    ;
;

метод ЗапросПоДатеДатаПриИзмененииЗначения(Источник: ПолеВводаРасширенноеДата, Событие: СобытиеПриИзменении<Объект?>)
    СтатистикаИспользованияПриложения.ЗарегистрироватьЦель("КалькуляторОтпускаДата")
    ЗаполнитьОстатокОтпускаСотрудников()
    ЗаполнитьРасчетноеКоличествоДнейОтпуска()
; 

метод ЗаполнитьРасчетноеКоличествоДнейОтпуска()
    КоличествоДнейОтпускаРасчетное = ""
    пер РасшифровкаОстатка = ""
    пер ОстатокОтпуска: Число?
    если Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
        если не ТаблицаРабочихМест.Пусто() и ОстатокОтпускаСотрудников.СодержитКлюч(ТаблицаРабочихМест[0].РабочееМесто)
            пер ОстаткиВидовОтпуска = ОстатокОтпускаСотрудников.Получить(ТаблицаРабочихМест[0].РабочееМесто)
            ОстатокОтпуска = 0
            для ДанныеВидаОтпуска из ОстаткиВидовОтпуска
                ОстатокОтпуска += ДанныеВидаОтпуска.ОстатокОтпуска.ЦелаяЧасть()
                РасшифровкаОстатка += (РасшифровкаОстатка.Пусто() ? "" : ", ") + ДанныеВидаОтпуска.ВидОтпуска.Представление() + " %{ДанныеВидаОтпуска.ОстатокОтпуска.ЦелаяЧасть()}"
            ;
        ;
    иначе если ДатаОтпуска != Неопределено
        ОстатокОтпуска = ВызовСервера.ОстатокОтпускаНаДату(ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо!, ДатаОтпуска!)
    ;
    если ОстатокОтпуска != Неопределено
        КоличествоДнейОтпускаРасчетное = ОстатокОтпуска!.ВСтроку() + " " + МенеджерСтрок.ТекстПоКоличеству("день", ОстатокОтпуска!)
        если НесколькоВидовОтпусков и не РасшифровкаОстатка.Пусто()
            КоличествоДнейОтпускаРасчетное += "  (%РасшифровкаОстатка)"
        ;
    ;
;

метод ЗаполнитьОстатокОтпускаСотрудников()
    если не Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
        возврат
    ;
    если ДатаОтпуска != Неопределено
        ОстатокОтпускаСотрудников = ОстаткиВидовОтпускаСотрудниковНаДату(ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо, ДатаОтпуска!)
    ;
;

метод ЗапросПоДатеРабочиеМестаДанные(): Массив<РабочееМесто>
    возврат ТаблицаРабочихМест
;

метод ЗапросПоДатеРабочиеМестаВидимость(): Булево
    возврат Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам и ЗапросПоДатеРабочиеМестаВидимость
;

метод ЗапросПоДатеРабочееМестоПредставление(ДанныеЭлемента: РабочееМесто): Строка
    пер РабочееМестоПредставление: Строка = Сотрудники.ПредставлениеРабочегоМеста(
                                            ДанныеЭлемента.Позиция, 
                                            ДанныеЭлемента.Должность, 
                                            ДанныеЭлемента.МестоВСтруктуреПредприятия, 
                                            ДанныеЭлемента.Организация, 
                                            ПоказыватьОрганизацию)
    возврат РабочееМестоПредставление
;

метод ЗапросПоДатеОстатокОтпускаПредставление(ДанныеЭлемента: РабочееМесто): Строка
    пер ОстатокОтпускаПредставление: Строка = ""
    пер РасшифровкаОстатка: Строка = ""
    если ОстатокОтпускаСотрудников.СодержитКлюч(ДанныеЭлемента.РабочееМесто)
        пер ОстаткиВидовОтпуска = ОстатокОтпускаСотрудников.Получить(ДанныеЭлемента.РабочееМесто)
        пер ОстатокОтпуска = 0
        для ДанныеВидаОтпуска из ОстаткиВидовОтпуска
            ОстатокОтпуска += ДанныеВидаОтпуска.ОстатокОтпуска.ЦелаяЧасть()
            РасшифровкаОстатка += (РасшифровкаОстатка.Пусто() ? "" : ", ") + ДанныеВидаОтпуска.ВидОтпуска.Представление() + " %{ДанныеВидаОтпуска.ОстатокОтпуска.ЦелаяЧасть()}"
        ;
        ОстатокОтпускаПредставление = ОстатокОтпуска.ВСтроку() + " " + МенеджерСтрок.ТекстПоКоличеству("день", ОстатокОтпуска)
        если НесколькоВидовОтпусков и не РасшифровкаОстатка.Пусто()
            ОстатокОтпускаПредставление += "  (%РасшифровкаОстатка)"
        ;
    ;
    возврат ОстатокОтпускаПредставление
;

метод ПодробнаяИнформацияВидимость(): Булево
    возврат Отпуск.ПараметрыСеанса().ПараметрыИнициализированы
;

метод ПредыдущийБудущийОтпускаГруппировка(): ОриентацияСодержимого
    возврат КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Компьютер ? ОриентацияСодержимого.Горизонтальная : ОриентацияСодержимого.Вертикальная
;

метод СледующийОтпускГруппаВидимость(): Булево
    знч СведенияОбОтпуске: Отпуск.ПараметрыСеанса = Отпуск.ПараметрыСеанса()
    возврат СведенияОбОтпуске.ДнейСледующегоОтпуска > 0
;

метод ПредыдущийОтпускГруппаВидимость(): Булево
    знч СведенияОбОтпуске: Отпуск.ПараметрыСеанса = Отпуск.ПараметрыСеанса()
    возврат СведенияОбОтпуске.ДнейПредыдущегоОтпуска > 0
;

метод ПредыдущийОтпускДнейЗаголовок(): Строка
    пер ДнейОтпуска: Число = Отпуск.ПараметрыСеанса().ДнейПредыдущегоОтпуска
    возврат "Предыдущий отпуск %{ДнейОтпуска.ВСтроку()} %{МенеджерСтрок.ТекстПоКоличеству("день", ДнейОтпуска)}" 
;

метод ПредыдущийОтпускПериодЗаголовок(): Строка
    знч СведенияОбОтпуске: Отпуск.ПараметрыСеанса = Отпуск.ПараметрыСеанса()
    возврат ПериодОтпуска(СведенияОбОтпуске.ДатаНачалаПредыдущегоОтпуска, СведенияОбОтпуске.ДатаОкончанияПредыдущегоОтпуска, СведенияОбОтпуске.ПояснениеПредыдущегоОтпуска)
;

метод ПериодОтпуска(НачалоОтпуска: Дата?, ОкончаниеОтпуска: Дата?, ПояснениеОтпуска: Строка = ""): Строка
    пер ПериодОтпуска: Строка
    если НачалоОтпуска != Неопределено и ОкончаниеОтпуска != Неопределено
        ПериодОтпуска = МенеджерДат.ПредставлениеПериода(НачалоОтпуска, ОкончаниеОтпуска) + 
            (ПояснениеОтпуска.Пусто() ? "" : " (" + ПояснениеОтпуска + ")")
    ;
    возврат ПериодОтпуска    
;

метод ЗапросГруппировка(): ОриентацияСодержимого
    возврат КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Компьютер ? ОриентацияСодержимого.Горизонтальная : ОриентацияСодержимого.Вертикальная
;

метод ЗапросСправкиВидимость(): Булево
    возврат Отпуск.ПараметрыСеанса().ФункциональныеОпции.ИнформацияОбОтпусках
        и Справки.ПараметрыСеанса().ФункциональныеОпции.СправкаПоОстаткамОтпуска
        и Справки.ПараметрыСеанса().ФункциональныеОпции.ИнформацияОСправках
;

метод ЗапросСправкиПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    СтатистикаИспользованияПриложения.ЗарегистрироватьЦель("ОтпускСправкаПоИспользованнымОтпускам")
    ЗапросСправкиПоОстаткамОтпускаФормаДокумента.ОткрытьВМодальномОкне()
;

метод ЗаявленияНаКомпенсациюОтпускаВидимость(): Булево
    возврат Отпуск.ПараметрыСеанса().ФункциональныеОпции.ЗаявленияНаКомпенсациюОтпуска
;

метод ГрафикВидимость(): Булево
    возврат Компоненты.ГрафикОтпусков.Видимость 
        и Отпуск.ПараметрыСеанса().ФункциональныеОпции.ИнформацияОГрафикеОтпусков
;

метод ЗапросПоДнямДатаВысотаЗначения(): Число
    возврат Метрики.ВысотаПоляВвода()
;

метод ЗаполнитьТаблицуРабочихМест()
    если не Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
        возврат
    ;
    ТаблицаРабочихМест = Отпуск.РабочиеМестаФизическогоЛица(ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо)
    пер ОрганизацииРабочихМест = новый Массив<Организации.Ссылка>()
    для РабочееМесто из ТаблицаРабочихМест
        если не ОрганизацииРабочихМест.Содержит(РабочееМесто.Организация)
            ОрганизацииРабочихМест.Добавить(РабочееМесто.Организация)
        ;
    ;
    ПоказыватьОрганизацию = ОрганизацииРабочихМест.Размер() > 1
;

метод ЗаполнитьДатыОтпускаСотрудников()
    если не Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
        возврат
    ;
    ДатаОтпускаСотрудников = ДатаОтпускаСотрудниковПоДлительности(ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо, КоличествоДнейОтпуска)
;

метод ЗапросПоДнямРабочиеМестаДанные(): Массив<РабочееМесто>
    возврат ТаблицаРабочихМест
;

метод ЗапросПоДнямРабочиеМестаВидимость(): Булево
    возврат Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам и ЗапросПоДнямРабочиеМестаВидимость
;

метод ЗапросПоДнямРабочееМестоПредставление(ДанныеЭлемента: РабочееМесто): Строка
    пер РабочееМестоПредставление: Строка = Сотрудники.ПредставлениеРабочегоМеста(
                                            ДанныеЭлемента.Позиция, 
                                            ДанныеЭлемента.Должность, 
                                            ДанныеЭлемента.МестоВСтруктуреПредприятия, 
                                            ДанныеЭлемента.Организация, 
                                            ПоказыватьОрганизацию)
    возврат РабочееМестоПредставление
;

метод ЗапросПоДнямДатаОтпускаПредставление(ДанныеЭлемента: РабочееМесто): Строка
    пер ДатаОтпускаПредставление: Строка = "Неизвестно"
    если ДатаОтпускаСотрудников.СодержитКлюч(ДанныеЭлемента.РабочееМесто)
        ДатаОтпускаПредставление = "Начиная с " + МенеджерДат.ФорматДаты(ДатаОтпускаСотрудников.Получить(ДанныеЭлемента.РабочееМесто), "дд ММММ гггг")
    ;
    возврат ДатаОтпускаПредставление
;

метод ЗапросПоДатеДнейВысотаЗначения(): Число
    возврат Метрики.ВысотаПоляВвода()
;

метод КалькуляторВидимость(): Булево
    возврат Отпуск.ПараметрыСеанса().ФункциональныеОпции.ИнформацияОбОтпусках и Отпуск.ПараметрыСеанса().ФункциональныеОпции.ИнформацияОбОстаткахОтпусков
;

метод ПояснениеИСправкаВидимость(): Булево
    возврат Отпуск.ПараметрыСеанса().ФункциональныеОпции.ИнформацияОбОтпусках и Отпуск.ПараметрыСеанса().ФункциональныеОпции.ИнформацияОбОстаткахОтпусков и Справки.ПараметрыСеанса().ФункциональныеОпции.СправкаПоОстаткамОтпуска
;

метод ЗапросПоДнямПодробнееЗаголовок(): Строка
    возврат ЗапросПоДнямРабочиеМестаВидимость ? "Скрыть подробности" : "Подробнее"
;

метод ЗапросПоДнямПодробнееВидимость(): Булево
    возврат Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам и ТаблицаРабочихМест.Размер() > 1
;

метод ЗапросПоДнямПодробнееПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ЗапросПоДнямРабочиеМестаВидимость = не ЗапросПоДнямРабочиеМестаВидимость
;

метод ЗапросПоДатеПодробнееЗаголовок(): Строка
    возврат ЗапросПоДатеРабочиеМестаВидимость ? "Скрыть подробности" : "Подробнее"
;

метод ЗапросПоДатеПодробнееВидимость(): Булево
    возврат Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам и ТаблицаРабочихМест.Размер() > 1
;

метод ЗапросПоДатеПодробнееПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ЗапросПоДатеРабочиеМестаВидимость = не ЗапросПоДатеРабочиеМестаВидимость
;

@НаСервере @ДоступноСКлиента
статический метод ДатаОтпускаФизическогоЛицаПоДлительности(ФизическоеЛицо: ФизическиеЛица.Ссылка, КоличествоДнейОтпуска: Число): Дата?
    возврат БудущиеИзмененияОстатковОтпуска.ДатаОтпускаФизическогоЛицаПоДлительности(ФизическоеЛицо, КоличествоДнейОтпуска)
;

@НаСервере @ДоступноСКлиента
статический метод ДатаОтпускаСотрудниковПоДлительности(ФизическоеЛицо: ФизическиеЛица.Ссылка, КоличествоДнейОтпуска: Число): ЧитаемоеСоответствие<Сотрудники.Ссылка, Дата?>
    возврат Отпуск.ДатаОтпускаСотрудниковПоДлительности(ФизическоеЛицо, КоличествоДнейОтпуска)
;

@НаСервере @ДоступноСКлиента
статический метод ОстаткиВидовОтпускаСотрудниковНаДату(ФизическоеЛицо: ФизическиеЛица.Ссылка, ДатаОтпуска: Дата): ЧитаемоеСоответствие<Сотрудники.Ссылка, Массив<Отпуск.ОстаткиПоВидамОтпусков>>
    возврат Отпуск.ОстаткиВидовОтпускаСотрудниковНаДату(ФизическоеЛицо, ДатаОтпуска)
;

// Контракт ВладелецСостояниеДокументовКомпонент

@ВПроекте
@Реализация
метод ПредставленияДокументов(): ЧитаемаяКоллекция<СостояниеДокументаКомпонентДанных>
    возврат Отпуск.ПредставленияЗаявленийФизлица(ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо, Ложь, Ложь, Истина)
;

@ВПроекте
@Реализация
метод ПриНажатии(Документ: ДокументИмеющийСостояние.Ссылка, ИдКомпонента: Строка = "")
    если Документ это ЗаявлениеНаОтпуск.Ссылка
        ЗаявлениеНаОтпускФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = Документ как ЗаявлениеНаОтпуск.Ссылка)
    иначе если Документ это ЗаявлениеНаПереносОтпуска.Ссылка
        ЗаявлениеНаПереносОтпускаФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = Документ как ЗаявлениеНаПереносОтпуска.Ссылка)
    иначе если Документ это ЗаявлениеНаКомпенсациюОтпуска.Ссылка
        ЗаявлениеНаКомпенсациюОтпускаФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = Документ как ЗаявлениеНаКомпенсациюОтпуска.Ссылка)
    иначе если Документ это АннулированияЗаявлений.Ссылка
        знч ЗаголовокФормы = Документы.ЗаголовокАннулирующего(Документ как АннулирующийДокумент.Ссылка)
        АннулированияЗаявленийФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = Документ как АннулированияЗаявлений.Ссылка, ЗаголовокФормы = ЗаголовокФормы)
    ;
;

@ВПроекте
@Реализация
метод ТипыОтображаемыхДокументов(): Массив<Тип>
    возврат []
;

// Конец ВладелецСостояниеДокументовКомпонент
