импорт СтандартноеПриложение
импорт УниверсальныеМеханизмы
импорт Компания::Согласования
импорт ИнтерфейсныеКомпонентыСтандартные
импорт КонтрольДоступа
импорт Криптография
импорт ОбменДанными
импорт ОбщегоНазначения
импорт ОбщиеСтандартные
импорт Отсутствия
импорт ФизическиеЛица
импорт ВладельцыКабинетов
импорт ЛичныеКабинетыПользователей
импорт УниверсальныеМеханизмы::ШаблоныДокументов
импорт Компания

@Обработчик
метод ПослеЧтения()
    ПрочитатьДополнительныеДанныеДокумента()
    если Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам и ЭтоНовый()
        знч СотрудникиБезКомпенсации: Множество<Сотрудники.Ссылка>
        знч ОстаткиОтпусковСотрудников = Отпуск.ПараметрыСеанса().ОстаткиОтпусковСотрудников
        для ДанныеСотрудника из ОстаткиОтпусковСотрудников
            если ДанныеСотрудника.КоличествоДнейКомпенсации == 0
                СотрудникиБезКомпенсации.Добавить(ДанныеСотрудника.РабочееМесто)
            ;
        ;
        знч РабочиеМеста = РабочиеМестаДокументаТаблицаРабочихМест().РабочиеМеста
        для РабочееМесто из РабочиеМеста
            если СотрудникиБезКомпенсации.Содержит(РабочееМесто.РабочееМесто)
                РабочееМесто.Оформление = ОформленияЗаявленийНаОтпуск.НеОформлять
            ;
        ;
    ;
    ИнтерфейсныеКомпоненты.ИнициализироватьПодчиненныеКомпоненты(Компоненты)
    ЧтениеДанныхЗавершено = Истина
    если ЭтоНовый()
        Компоненты.ДополнительныеРеквизиты.СобственнаяМодифицированность =
            не ДополнительныеДанныеДокумента.ТабличныеЧасти.ДополнительныеРеквизиты.Реквизиты.Пусто()
        Компоненты.РабочиеМестаДокумента.СобственнаяМодифицированность =
            не ДополнительныеДанныеДокумента.ТабличныеЧасти.ТаблицаРабочиеМеста.РабочиеМеста.Пусто()
    иначе
        Компоненты.ДополнительныеРеквизиты.СобственнаяМодифицированность = Ложь
        Компоненты.РабочиеМестаДокумента.СобственнаяМодифицированность = Ложь
    ;
    ОтслеживатьИзменениеДанных(Компоненты.ДополнительныеРеквизиты, Истина)
    ОтслеживатьИзменениеДанных(Компоненты.РабочиеМестаДокумента, Истина)
    УстановитьРежимПросмотра()
;

метод ПрочитатьДополнительныеДанныеДокумента()
    ДополнительныеДанныеДокумента = ДополнительныеДанныеДокумента(
        ЭтоНовый(),
        Объект.Ссылка,
        Объект.ФизическоеЛицо,
        ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
    )
    если ЭтоНовый()
        Объект.КоличествоДнейКомпенсации = ДополнительныеДанныеДокумента.КоличествоДнейКомпенсации
        если Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
            знч ОстаткиОтпусковСотрудников = Отпуск.ПараметрыСеанса().ОстаткиОтпусковСотрудников
            для ДанныеСотрудника из ОстаткиОтпусковСотрудников
                если ДанныеСотрудника.КоличествоДнейКомпенсации != 0 и Объект.КоличествоДнейКомпенсации > ДанныеСотрудника.КоличествоДнейКомпенсации
                    Объект.КоличествоДнейКомпенсации = ДанныеСотрудника.КоличествоДнейКомпенсации
                ;
            ;
        ;
        ЗаполнитьРаспределениеДнейКомпенсации()
    ;
    МаксимальноеКоличествоДнейКомпенсации = ДополнительныеДанныеДокумента.КоличествоДнейКомпенсации
    ОтслеживатьИзменениеДанных(Компоненты.ПрисоединенныеФайлы, Истина)
;

метод ПояснениеЗаголовок(): Строка
    пер Пояснение: Строка
    если ВозможноРедактирование()
        Пояснение = "Вы можете часть своего отпуска компенсировать деньгами."
    иначе
        пер ДатаОтправки: Момент? = Объект.МоментСоздания
        если ДополнительныеДанныеДокумента.Состояние != Неопределено 
            пер ВремяОтправки: Строка
            если МенеджерДат.НачалоДня(ДатаОтправки) == МенеджерДат.НачалоДня(МенеджерДат.ТекущаяДатаВремя())
                 ВремяОтправки = "сегодня, в " + МенеджерДат.ФорматМомента(ДатаОтправки, "ЧЧ:мм")
            иначе если МенеджерДат.НачалоДня(МенеджерДат.ДобавитьДни(ДатаОтправки, 1)) == МенеджерДат.НачалоДня(МенеджерДат.ТекущаяДатаВремя())
                 ВремяОтправки = "вчера, в " + МенеджерДат.ФорматМомента(ДатаОтправки, "ЧЧ:мм")
            иначе
                ВремяОтправки = МенеджерДат.ФорматМомента(ДатаОтправки, "дд ММММ гггг")
            ;
            пер СтатусЗапроса: Строка
            если ДополнительныеДанныеДокумента.Состояние == СостоянияДокумента.Выполнен
                СтатусЗапроса = " и уже согласовано. Компенсация может быть начислена при расчете зарплаты."
            иначе если ДополнительныеДанныеДокумента.Состояние == СостоянияДокумента.Подготовлен
                СтатусЗапроса = ", но еще находится в обработке."
            иначе если ДополнительныеДанныеДокумента.Состояние == СостоянияДокумента.ПолученОтказ
                СтатусЗапроса = ", но по нему получен отказ. Причины можно уточнить в бухгалтерии."
            ;
            Пояснение = "Заявление на компенсацию дней отпуска было отправлено %ВремяОтправки%СтатусЗапроса."
        ;
    ;
    возврат Пояснение
;

метод ПанельОсновнаяЗаголовокКнопкиЗаписатьИЗакрыть(): Строка
    возврат ВозможноРедактирование() и не РежимПросмотра ? "Отправить" : "Закрыть"
;

метод ПанельОсновнаяИспользованиеСохранитьЧерновик(): Булево
    возврат ВозможноРедактирование() и не РежимПросмотра
;

метод ПанельОсновнаяИспользованиеУдалить(): Булево
    возврат ВозможноРедактирование() и не ЭтоНовый()
;

метод ФормаДокументаВысота(): Число
    возврат ОсновнойИнтерфейс.ВысотаФормыДокумента(100)
;

метод ВозможноРедактирование(): Булево
    возврат ДополнительныеДанныеДокумента.Состояние == СостоянияДокумента.Черновик или ДополнительныеДанныеДокумента.Состояние == Неопределено
;

метод КомпенсацияОтпускаПояснениеЗаголовок(): Строка
    возврат Клиент.КомпенсацияОтпускаПояснение(ДополнительныеДанныеДокумента.КоличествоДнейКомпенсации, РабочиеМестаДокументаТаблицаРабочихМест().РабочиеМеста)
;

метод КомпенсацияОтпускаПодробнееВидимость(): Булево
    пер ПодробнееВидимость: Булево
    знч РабочиеМеста = РабочиеМестаДокументаТаблицаРабочихМест().РабочиеМеста
    если Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
        и (РабочиеМеста.Размер() > 1 или Отпуск.ИспользуетсяНесколькоВидовОтпусков())
        ПодробнееВидимость = Истина
    ;
    возврат ПодробнееВидимость
;

метод КомпенсацияОтпускаПодробнееПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    знч ФормаПериодыОтпуска = новый ПериодыОтпускаФорма(
        ТолькоЧтение = ТолькоЧтение,
        ИсходныеДанные = ДополнительныеДанныеДокумента.ТабличныеЧасти.ТаблицаДниКомпенсации.Периоды,
        РабочиеМеста = Компоненты.РабочиеМестаДокумента.ОтмеченныеРабочиеМеста(),
        ТолькоКомпенсация = Истина,
        ИсходноеКоличествоДнейКомпенсации = Объект.КоличествоДнейКомпенсации)
    ФормаПериодыОтпуска.Инициализировать()
    знч ИзмененныеПериодыОтпуска = ФормаПериодыОтпуска.ОткрытьВМодальномОкне()
    если ИзмененныеПериодыОтпуска != Неопределено
        ДополнительныеДанныеДокумента.ТабличныеЧасти.ТаблицаДниКомпенсации.Периоды = ИзмененныеПериодыОтпуска
        ДополнительныеДанныеДокумента.ТабличныеЧасти.ТаблицаДниКомпенсации.Модифицированность = Истина
    ;
    СобственнаяМодифицированность = Истина
;

метод ПанельОсновнаяЗаписатьИЗакрыть(Источник: КоманднаяПанельФорм, Событие: СобытиеКомпонента)
    ЗаписатьДокумент(ОтправитьНаСогласование = Истина)
;

метод ПанельОсновнаяСохранитьЧерновик(Источник: КоманднаяПанельФорм, Событие: СобытиеКомпонента)
    ЗаписатьДокумент(ОтправитьНаСогласование = Ложь)
;

метод ЗаписатьДокумент(ОтправитьНаСогласование: Булево)
    если не ВозможноРедактирование() или РежимПросмотра
        Закрыть()
        возврат
    ;
    если не ПроверитьЗаполнение()
        возврат
    ;
    если ОтправитьНаСогласование
        и не Криптография.ВвестиПарольЗакрытогоКлюча(
            Объект.ФизическоеЛицо, Объект.Ссылка)
        
        возврат
    ;
    пер ТабличныеЧасти: ТабличныеЧасти
    если Компоненты.ПрисоединенныеФайлы.СобственнаяМодифицированность
        если Компоненты.ПрисоединенныеФайлы.ОшибкаЗагрузки
            ОбщегоНазначения.УведомлениеОшибкиЗагрузкиФайлов()
            возврат
        ;
        ОбщегоНазначения.ОчиститьКлиентскиеДанные(ДополнительныеДанныеДокумента.ТабличныеЧасти.ТаблицаФайлы)
        ТабличныеЧасти.ТаблицаФайлы = ДополнительныеДанныеДокумента.ТабличныеЧасти.ТаблицаФайлы
    ;
    если Компоненты.ДополнительныеРеквизиты.СобственнаяМодифицированность
        ТабличныеЧасти.ДополнительныеРеквизиты = ДополнительныеДанныеДокумента.ТабличныеЧасти.ДополнительныеРеквизиты
    ;
    Компоненты.РабочиеМестаДокумента.УстановитьОформление()
    если Компоненты.РабочиеМестаДокумента.СобственнаяМодифицированность
        ТабличныеЧасти.ТаблицаРабочиеМеста = ДополнительныеДанныеДокумента.ТабличныеЧасти.ТаблицаРабочиеМеста
    ;
    УдалитьДниКомпенсацииСотрудников()
    если ДополнительныеДанныеДокумента.ТабличныеЧасти.ТаблицаДниКомпенсации.Модифицированность
        ТабличныеЧасти.ТаблицаДниКомпенсации = ДополнительныеДанныеДокумента.ТабличныеЧасти.ТаблицаДниКомпенсации
    ;
    // Признак ЭтоНовый получаем до записи 
    пер ЭтоНовый: Булево = ЭтоНовый()
    пер ТекущееСостояние: СостоянияДокумента 
    если ОтправитьНаСогласование
        ТекущееСостояние = СостоянияДокумента.Подготовлен
    ;
        
    пер ДанныеДокумента = новый ДанныеДокумента()
    ДанныеДокумента.Ссылка = Объект.Ссылка
    ДанныеДокумента.Дата = Объект.Дата
    ДанныеДокумента.ФизическоеЛицо = Объект.ФизическоеЛицо
    ДанныеДокумента.КоличествоДнейКомпенсации = Объект.КоличествоДнейКомпенсации
    ДанныеДокумента.Комментарий = Объект.Комментарий
    пер СостояниеОбмена: ОбменДанными.СостояниеОбмена
    знч РезультатПодписания = Записать(
            ЭтоНовый(), 
            ДанныеДокумента, 
            ТабличныеЧасти, 
            ОтправитьНаСогласование,
            Криптография.ПараметрыСеанса().ПарольЗакрытогоКлючаПользователя, 
            ВладельцыКабинетов.ПараметрыСеанса().ИнформационныеСистемы, СостояниеОбмена)
    если РезультатПодписания.ЕстьОшибки
        СтандартныеФормы.ПоказатьУведомление(
            "Ошибка подписания документа",
            РезультатПодписания.ТекстОшибки,
            ОценкаИнформации.Отрицательная
        )
        возврат
    ;
    если ОтправитьНаСогласование
        ТекущееСостояние = СостоянияДокумента.Подготовлен
        если Криптография.УстановитьПодписьВСервисеПодписания(
            Объект.Ссылка, ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо, Согласования.РольПодписантаСотрудник()) == Ложь
            
            Прочитать(Объект.Ссылка)
            возврат
        ;
    ;
    Компоненты.ПрисоединенныеФайлы.СобственнаяМодифицированность = Ложь
    Компоненты.ДополнительныеРеквизиты.СобственнаяМодифицированность = Ложь
    Компоненты.РабочиеМестаДокумента.СобственнаяМодифицированность = Ложь
    если РассчитаннаяМодифицированность
        СобственнаяМодифицированность = Ложь
    ;
    // Опровещение выполянем перед закрытием - когда уже записаны все данные, сопровождающие запись документа
    знч ДанныеСостояния = СостояниеДокументаКомпонентДанных.Создать()
    ДанныеСостояния.Документ = ДанныеДокумента.Ссылка
    ДанныеСостояния.ДатаДокумента = ДанныеДокумента.Дата
    ДанныеСостояния.Состояние = ТекущееСостояние
    ДанныеСостояния.ДополнительноеПредставление = СостДокументов.ПредставлениеПериодаДокумента(ДатаДокумента = ДанныеДокумента.Дата)
    ИзмененоСостояниеДокумента.Оповестить(ДанныеСостояния, ЭтоНовый)
    если ОтправитьНаСогласование
        пер ЗаголовокУведомления = "Отправлено"
        пер ТекстУведомления = "Заявление отправлено в кадровую службу. После согласования или отклонения заявления вы получите уведомление."
        пер КоннотацияУведомления: ОценкаИнформации = ОценкаИнформации.Обычная
        если СостояниеОбмена.ОповеститьОбОтсутствииОбмена
            ЗаголовокУведомления = "Приостановлена отправка заявления"
            ТекстУведомления = "Заявление сейчас не может быть отправлено. Заявление будет отправлено в кадровую службу, как только появится такая возможность." 
            если СостояниеОбмена.ОповеститьСотрудникаОВозобновленииОбмена
                ТекстУведомления += " Вы получите уведомление после его отправки."
            ;
            КоннотацияУведомления = ОценкаИнформации.Предупреждающая
        ;
        СтандартныеФормы.ПоказатьУведомление(ЗаголовокУведомления, ТекстУведомления, КоннотацияУведомления)
    ;
    Закрыть()
;

метод ПанельОсновнаяУдалить(Источник: КоманднаяПанельФорм, Событие: СобытиеКомпонента)
    СобственнаяМодифицированность = Ложь
    УдалитьДокумент(Объект.Ссылка, Объект.ФизическоеЛицо)
    УдаленДокумент.Оповестить(Объект.Ссылка, Объект.Дата)
    Закрыть()
;

метод КоличествоДнейКомпенсацииРезультатПроверкиДанных(): РезультатПроверкиДанных
    возврат КоличествоДнейКомпенсацииСообщениеОбОшибкеВвода.Пусто() ? РезультатПроверкиДанных.Отсутствует : РезультатПроверкиДанных.Ошибка    
;

метод ПроверитьЗаполнение(): Булево
    пер РезультатПроверки = Истина
    пер КоличествоДнейКомпенсации = Объект.КоличествоДнейКомпенсации
    пер ПредставлениеСотрудника: Строка
    если Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
        пер ВыбранныеРабочиеМеста = Компоненты.РабочиеМестаДокумента.ОтмеченныеРабочиеМеста()
        знч ДанныеРабочегоМеста = Клиент.МаксимальноеКоличествоДнейКомпенсацииОтпуска(ВыбранныеРабочиеМеста)
        МаксимальноеКоличествоДнейКомпенсации = ДанныеРабочегоМеста.ДнейКомпенсации
        ПредставлениеСотрудника = ДанныеРабочегоМеста.ПредставлениеСотрудника
    ; 
    если КоличествоДнейКомпенсации == 0
        КоличествоДнейКомпенсацииСообщениеОбОшибкеВвода = "Не указано количество дней компенсации"
        РезультатПроверки = Ложь
    иначе если КоличествоДнейКомпенсации.ВСтроку().Длина() > 10
        КоличествоДнейКомпенсацииСообщениеОбОшибкеВвода = "Поле Количество дней не должно содержать более 10 символов"
        РезультатПроверки = Ложь
    иначе если КоличествоДнейКомпенсации > МаксимальноеКоличествоДнейКомпенсации
        если не ПредставлениеСотрудника.Пусто() и РабочиеМестаДокументаТаблицаРабочихМест().РабочиеМеста.Размер() > 1
            если МаксимальноеКоличествоДнейКомпенсации == 0
                КоличествоДнейКомпенсацииСообщениеОбОшибкеВвода = 
                    "По рабочему месту %ПредставлениеСотрудника компенсация отпуска недоступна"
            иначе
                КоличествоДнейКомпенсацииСообщениеОбОшибкеВвода = 
                    "По рабочему месту %ПредставлениеСотрудника нельзя компенсировать больше чем 
                    %МаксимальноеКоличествоДнейКомпенсации %{МенеджерСтрок.ТекстПоКоличеству("день", МаксимальноеКоличествоДнейКомпенсации)} отпуска"
            ;
        иначе
            КоличествоДнейКомпенсацииСообщениеОбОшибкеВвода = 
                "Вы не можете компенсировать больше чем 
                %МаксимальноеКоличествоДнейКомпенсации %{МенеджерСтрок.ТекстПоКоличеству("день", МаксимальноеКоличествоДнейКомпенсации)} отпуска"
        ;
        РезультатПроверки = Ложь
    ;
    если не Компоненты.РабочиеМестаДокумента.ПроверитьЗаполнение()
        РезультатПроверки = Ложь
    ;
    возврат РезультатПроверки
;

метод УдалитьДниКомпенсацииСотрудников()
    пер Сотрудники: Множество<Сотрудники.Ссылка?>
    знч ОтмеченныеРабочиеМеста = Компоненты.РабочиеМестаДокумента.ОтмеченныеРабочиеМеста()
    для РабочееМесто из ОтмеченныеРабочиеМеста
        Сотрудники.Добавить(РабочееМесто.РабочееМесто)
    ;
    знч ДниКомпенсацииКУдалению: Массив<ПериодыОтпускаСтрока>
    для ДниКомпенсации из ДополнительныеДанныеДокумента.ТабличныеЧасти.ТаблицаДниКомпенсации.Периоды
        если не Сотрудники.Содержит(ДниКомпенсации.РабочееМесто)
            ДниКомпенсацииКУдалению.Добавить(ДниКомпенсации)
        ;
    ;
    для ДниКомпенсации из ДниКомпенсацииКУдалению
        ДополнительныеДанныеДокумента.ТабличныеЧасти.ТаблицаДниКомпенсации.Периоды.Удалить(ДниКомпенсации)
        ДополнительныеДанныеДокумента.ТабличныеЧасти.ТаблицаДниКомпенсации.Модифицированность = Истина
    ;
;

метод КоличествоДнейКомпенсацииПриИзменении(Источник: ПолеВвода<Число>, Событие: СобытиеПриИзменении<Число>)
    ЗаполнитьРаспределениеДнейКомпенсации()
;

метод ЗаполнитьРаспределениеДнейКомпенсации()
    если Объект.ФизическоеЛицо == Неопределено 
        или не Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
        возврат
    ;
    пер РабочиеМеста = РабочиеМестаДокументаТаблицаРабочихМест().РабочиеМеста
    ДополнительныеДанныеДокумента.ТабличныеЧасти.ТаблицаДниКомпенсации.Периоды = Отпуск.РаспределениеДнейКомпенсацииЗаявления(Объект.ФизическоеЛицо, Отпуск.ПараметрыСеанса().ОстаткиОтпусковСотрудников, РабочиеМеста, Объект.КоличествоДнейКомпенсации)
    ДополнительныеДанныеДокумента.ТабличныеЧасти.ТаблицаДниКомпенсации.Модифицированность = Истина
;

// Контракт ВладелецПрисоединенныеФайлыКомпонент
@ВПроекте
@Реализация
метод ПрисоединенныеФайлыНачатаЗагрузкаФайлов(Источник: ПрисоединенныеФайлыКомпонент, Событие: неизвестно, ИдКомпонента: Строка = "")
    УстановитьДоступностьКоманд(Ложь)
;

@ВПроекте
@Реализация
метод ПрисоединенныеФайлыЗавершенаЗагрузкаФайлов(Источник: ПрисоединенныеФайлыКомпонент, Событие: неизвестно, ИдКомпонента: Строка = "")
    УстановитьДоступностьКоманд(Истина)
;
// Конец ВладелецПрисоединенныеФайлыКомпонент

метод УстановитьДоступностьКоманд(Доступность: Булево)
    пер ГлавнаяГруппа: КорневойКомпонентМодальнойФормы = Компоненты.ГлавнаяГруппа
    для КоманднаяПанель из ГлавнаяГруппа.КомандныеПанели
         КоманднаяПанель.Доступность = Доступность
    ;
;

метод ОшибкаПриВыполненииКоманды(Источник: КоманднаяПанельФорм, Событие: СобытиеСДанными<Исключение>)
    Криптография.СброситьПарольЗакрытогоКлючаПриОшибкеВводаПароля(Событие.Данные)
    Компоненты.ГлавнаяГруппа.ПоказатьОшибку(
        ОбщегоНазначения.ОписаниеОшибкиПриДействииСДокументом(Событие.Данные, Объект.ФизическоеЛицо))
;

@НаСервере @НаКлиенте
структура ДанныеДокумента
    пер Ссылка: ЗаявлениеНаКомпенсациюОтпуска.Ссылка?
    пер Дата: Дата?
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка?
    пер КоличествоДнейКомпенсации: Число
    пер Комментарий: Строка
;

@НаСервере @НаКлиенте
@ВПодсистеме
структура ДополнительныеДанныеДокумента
    пер Состояние: СостоянияДокумента?
    пер ДатаСостояния: Момент?
    пер ФизическоеЛицоЗаголовок: Строка
    пер КоличествоДнейКомпенсации: Число
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка?
    пер ТабличныеЧасти: ТабличныеЧасти
;

@НаСервере @НаКлиенте
структура ТабличныеЧасти
    пер ТаблицаФайлы: ПрисоединенныеФайлы?
    пер ТаблицаСогласующие: Согласующие?
    пер ДополнительныеРеквизиты: РеквизитыШаблона?
    пер ТаблицаРабочиеМеста: РабочиеМеста?
    пер ТаблицаДниКомпенсации: ПериодыОтпуска?
;

метод ДополнительныеРеквизитыТаблицаПараметров(): РеквизитыШаблона
    пер Таблица: РеквизитыШаблона
    если ДополнительныеДанныеДокумента.ТабличныеЧасти.ДополнительныеРеквизиты != Неопределено
        Таблица = ДополнительныеДанныеДокумента.ТабличныеЧасти.ДополнительныеРеквизиты
    ;
    возврат Таблица 
;

@НаСервере @ДоступноСКлиента
статический метод Записать( ЭтоНовый: Булево, 
                ДанныеДокумента: ДанныеДокумента, 
                ТабличныеЧасти: ТабличныеЧасти, 
                ОтправитьНаСогласование: Булево, 
                ПарольЗакрытогоКлюча: Строка?,
                ИнформационныеСистемы: Соответствие<ИнформационныеСистемы.Ссылка, ОбменДанными.НастройкиИнформационнойСистемы>, 
                СостояниеОбмена: ОбменДанными.СостояниеОбмена): Криптография.РезультатПодписания
    
    пер Заявление: ЗаявлениеНаКомпенсациюОтпуска.Объект?
    пер ЗаявлениеСсылка: ЗаявлениеНаКомпенсациюОтпуска.Ссылка? = ДанныеДокумента.Ссылка
    если ЭтоНовый
        Заявление = новый ЗаявлениеНаКомпенсациюОтпуска.Объект(ЗаявлениеСсылка.Ид).Заполнить()
    иначе
        Заявление = ЗаявлениеСсылка.ЗагрузитьОбъект()
    ;
    Заявление!.ФизическоеЛицо = ДанныеДокумента.ФизическоеЛицо
    Заявление!.Дата = ДанныеДокумента.Дата
    Заявление!.КоличествоДнейКомпенсации = ДанныеДокумента.КоличествоДнейКомпенсации
    Заявление!.Комментарий = ДанныеДокумента.Комментарий
    
    исп Транзакции.Начать()
    Заявление.Записать()
    если не ТабличныеЧасти.ТаблицаФайлы == Неопределено
        ПрисоединенныеФайлыМенеджер.Записать(ТабличныеЧасти.ТаблицаФайлы)
    ;
    если не ТабличныеЧасти.ТаблицаРабочиеМеста == Неопределено
        РабочиеМестаДокументов.ЗаписатьРабочиеМеста(ТабличныеЧасти.ТаблицаРабочиеМеста)
    ;
    если не ТабличныеЧасти.ТаблицаДниКомпенсации == Неопределено
        ЗаявлениеНаКомпенсациюОтпускаДниКомпенсации.ЗаписатьДниКомпенсацииЗаявления(ТабличныеЧасти.ТаблицаДниКомпенсации)
    ;
    
    ШаблоныДокументовМенеджер.СохранитьРеквизиты(ТабличныеЧасти.ДополнительныеРеквизиты)
    ПредставленияДокументов.СформироватьПредставленияДокумента(ЗаявлениеСсылка, Истина)
    пер РезультатПодписания: Криптография.РезультатПодписания
    если ОтправитьНаСогласование
        знч ДанныеСогласующего = новый Согласования.ДанныеСогласующего(ДанныеДокумента.ФизическоеЛицо, Согласования.РольПодписантаСотрудник())
        РезультатПодписания = Согласования.ПодписатьИУстановитьСостояниеДокумента(ЗаявлениеСсылка, ДанныеСогласующего, ПарольЗакрытогоКлюча, СостоянияДокумента.Подготовлен, ДанныеДокумента.ФизическоеЛицо)
        если РезультатПодписания.ЕстьОшибки
            возврат РезультатПодписания
        ;
        СостояниеОбмена = ВладельцыКабинетов.ПроверитьСостояниеОбмена(ДанныеДокумента.ФизическоеЛицо)
    ;
    возврат РезультатПодписания 
;

@НаСервере @ДоступноСКлиента
статический метод УдалитьДокумент(Ссылка: ЗаявлениеНаКомпенсациюОтпуска.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?)
    ЗаявлениеНаКомпенсациюОтпуска.УдалитьДокумент(Ссылка, ФизическоеЛицо)
;

@НаСервере @ДоступноСКлиента
статический метод ДополнительныеДанныеДокумента(ЭтоНовый: Булево, Ссылка: ЗаявлениеНаКомпенсациюОтпуска.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?, ТекущееФизическоеЛицо: ФизическиеЛица.Ссылка?): ДополнительныеДанныеДокумента
    
    если ТекущееФизическоеЛицо == Неопределено
        ТекущееФизическоеЛицо = ПользователиСистемы.ТекущееФизическоеЛицо()
    ;
        
    пер ДополнительныеДанныеДокумента: ДополнительныеДанныеДокумента
    ДополнительныеДанныеДокумента.ФизическоеЛицо = ТекущееФизическоеЛицо 
    ДополнительныеДанныеДокумента.ФизическоеЛицоЗаголовок = МенеджерСущности.ПредставлениеСсылки(ФизическоеЛицо)
    
    если не ЭтоНовый
        ДополнительныеДанныеДокумента.ТабличныеЧасти = ДанныеТабличныхЧастей(Ссылка)
    иначе
        ДополнительныеДанныеДокумента.ТабличныеЧасти = ДанныеТабличныхЧастейПоУмолчанию(Ссылка, ТекущееФизическоеЛицо)
    ;
    ЗаполнитьДанныеСостояния(Ссылка, ДополнительныеДанныеДокумента)
    ЗаполнитьДанныеКомпенсации(ДополнительныеДанныеДокумента)
    возврат ДополнительныеДанныеДокумента
;

@НаСервере
статический метод ЗаполнитьДанныеСостояния(Ссылка: ЗаявлениеНаКомпенсациюОтпуска.Ссылка, ДополнительныеДанныеДокумента: ДополнительныеДанныеДокумента)
    пер ДанныеСостояния = СостДокументов.ДанныеСостоянияДокумента(Ссылка)
    ДополнительныеДанныеДокумента.Состояние = ДанныеСостояния.Состояние
    ДополнительныеДанныеДокумента.ДатаСостояния = ДанныеСостояния.Дата
;

@НаСервере
статический метод ЗаполнитьДанныеКомпенсации(ДополнительныеДанныеДокумента: ДополнительныеДанныеДокумента)
    если ДополнительныеДанныеДокумента.Состояние == Неопределено или ДополнительныеДанныеДокумента.Состояние == СостоянияДокумента.Черновик
        пер ДанныеОбОтпуске = ИнформацияОбОтпуске.ДанныеИнформацииОбОтпуске(<ФизическиеЛица.Ссылка>[ДополнительныеДанныеДокумента.ФизическоеЛицо])
        если ДанныеОбОтпуске.СодержитКлюч(ДополнительныеДанныеДокумента.ФизическоеЛицо)
            ДополнительныеДанныеДокумента.КоличествоДнейКомпенсации = ДанныеОбОтпуске[ДополнительныеДанныеДокумента.ФизическоеЛицо]["КоличествоДнейКомпенсации"] как Число
        ;
    ;
;

 
@НаСервере
статический метод ДанныеТабличныхЧастей(Владелец: ЗаявлениеНаКомпенсациюОтпуска.Ссылка): ТабличныеЧасти
    пер ДанныеТабличныхЧастей: ТабличныеЧасти
    ДанныеТабличныхЧастей.ТаблицаФайлы = ПрисоединенныеФайлыМенеджер.ПрисоединенныеФайлы(Владелец)
    ДанныеТабличныхЧастей.ТаблицаСогласующие = Согласования.Согласующие(Владелец)
    ДанныеТабличныхЧастей.ДополнительныеРеквизиты = ШаблоныДокументовМенеджер.РеквизитыШаблона(
        Владелец, УниверсальныеМеханизмы.Ид(Отпуск.ИД_ПОДСИСТЕМЫ, Отпуск.ШАБЛОН_ЗАЯВЛЕНИЯ_НА_КОМПЕНСАЦИЮ_ОТПУСКА))
    ДанныеТабличныхЧастей.ТаблицаРабочиеМеста = РабочиеМестаДокументов.РабочиеМестаЗаявления(Владелец)
    ДанныеТабличныхЧастей.ТаблицаДниКомпенсации = ЗаявлениеНаКомпенсациюОтпускаДниКомпенсации.ДниКомпенсацииЗаявления(Владелец)
    возврат ДанныеТабличныхЧастей
;

 
@НаСервере
статический метод ДанныеТабличныхЧастейПоУмолчанию(Заявление: ЗаявлениеНаКомпенсациюОтпуска.Ссылка,
    ФизическоеЛицо: ФизическиеЛица.Ссылка): ТабличныеЧасти
    
    пер ДанныеТабличныхЧастей: ТабличныеЧасти
    пер ТаблицаФайлы: ПрисоединенныеФайлы
    ТаблицаФайлы.Владелец = Заявление
    пер Согласующие: Согласующие
    Согласующие.Владелец = Заявление
    пер ПериодыОтпуска: ПериодыОтпуска
    ПериодыОтпуска.Владелец = Заявление
    ДанныеТабличныхЧастей.ТаблицаФайлы = ТаблицаФайлы
    ДанныеТабличныхЧастей.ТаблицаСогласующие = Согласующие
    ДанныеТабличныхЧастей.ДополнительныеРеквизиты = ШаблоныДокументовМенеджер.РеквизитыШаблона(
        Неопределено, УниверсальныеМеханизмы.Ид(Отпуск.ИД_ПОДСИСТЕМЫ, Отпуск.ШАБЛОН_ЗАЯВЛЕНИЯ_НА_КОМПЕНСАЦИЮ_ОТПУСКА))
    ДанныеТабличныхЧастей.ДополнительныеРеквизиты.Владелец = Заявление
    ДанныеТабличныхЧастей.ТаблицаРабочиеМеста = РабочиеМеста(Заявление, ФизическоеЛицо)
    ДанныеТабличныхЧастей.ТаблицаДниКомпенсации = ПериодыОтпуска
    
    возврат ДанныеТабличныхЧастей
;

метод ОсновнойКомпонентПанели(): Компонент
    возврат этот
;

метод ДополнительныеРеквизитыТолькоЧтение(): Булево
    возврат не ВозможноРедактирование()
;

метод РабочиеМестаДокументаТаблицаРабочихМест(): РабочиеМеста
    возврат ДополнительныеДанныеДокумента.ТабличныеЧасти.ТаблицаРабочиеМеста
;

метод РабочиеМестаДокументаДоступность(): Булево
    возврат ВозможноРедактирование()
;

метод РабочиеМестаДокументаВидимость(): Булево
    возврат Отсутствия.ПараметрыСеанса().ФункциональныеОпции.ЗапросМестаРаботыВЗаявлениях
            и Отпуск.ПараметрыСеанса().ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
            и РабочиеМестаДокументаТаблицаРабочихМест().РабочиеМеста.Размер() > 0
;

метод РабочееМестоПриИзмененииЗначения(Источник: РабочиеМестаДокументаКомпонент, Событие: СобытиеКомпонента)
    ЗаполнитьРаспределениеДнейКомпенсации()
;

@НаСервере
статический метод РабочиеМеста(Заявление: ЗаявлениеНаКомпенсациюОтпуска.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка): РабочиеМеста
    пер РабочиеМеста = РабочиеМестаДокументов.РабочиеМеста(ФизическоеЛицо)
    РабочиеМеста.Владелец = Заявление
    возврат РабочиеМеста
;

метод УстановитьРежимПросмотра()
    если не Компания.ПараметрыСеанса().ТекущийПользовательСотрудник
        РежимПросмотра = Истина
    ;
;