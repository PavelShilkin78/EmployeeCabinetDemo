импорт ОбщиеСтандартные
импорт Компания
импорт ФизическиеЛица
импорт ВебApi
импорт КонтрольДоступа

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ЧтениеАутентифицированным(этот),
            КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот)]
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ИнформацияОбОтпуске.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ИнформацияОбОтпуске.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ИнформацияОбОтпуске.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПерсонально([Элемент.ФизическоеЛицо]))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПоПолномочиям(
            [Отпуск.ПолномочиеПросмотрОтпусков()],
            [Элемент.ФизическоеЛицо]
        ))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

//КонецОбласти

//Область JSON

@ВПодсистеме
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<ИнформацияОбОтпусках>
    иначе если ВерсияФорматаОбмена >= Версия{3.0}
        возврат Тип<ИнформацияОбОтпусках_3_0>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<ИнформацияОбОтпусках>
    ;
;

@ВПодсистеме
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Массив<ИнформацияОбОтпусках>>
    иначе если ВерсияФорматаОбмена >= Версия{3.0}
        возврат Тип<Массив<ИнформацияОбОтпусках_3_0>>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Массив<ИнформацияОбОтпусках>>
    ;
;

@ВПроекте
структура ИнформацияОбОтпусках
    @JsonСвойство(Имя = "personID")
    обз знч ФизическоеЛицо: Строка
    @JsonСвойство(Имя = "daysNotUsed")
    обз знч НеИспользованоДней: Число?
    @JsonСвойство(Имя = "leaveEncashmentDays")
    обз знч ДнейКомпенсации: Число?
    @JsonСвойство(Имя = "minVacationLength")
    обз знч МинимальнаяПродолжительностьОтпуска: Число?
    @JsonСвойство(Имя = "previousVacation")
    обз знч ПредыдущийОтпуск: ИнформацияОбОтпуске?
    @JsonСвойство(Имя = "nextVacation")
    обз знч СледующийОтпуск: ИнформацияОбОтпуске?
;

@ВПроекте
структура ИнформацияОбОтпусках_3_0
    @JsonСвойство(Имя = "personID")
    обз знч ФизическоеЛицо: Строка
    @JsonСвойство(Имя = "components")
    обз знч Отпуска: ЧитаемыйМассив<ИнформацияОбОтпускеСотрудника>?
;

@ВПроекте
структура ИнформацияОбОтпускеСотрудника
    @JsonСвойство(Имя = "employeeID")
    обз знч Сотрудник: Строка
    @JsonСвойство(Имя = "daysNotUsed")
    обз знч НеИспользованоДней: Число?
    @JsonСвойство(Имя = "leaveEncashmentDays")
    обз знч ДнейКомпенсации: Число?
    @JsonСвойство(Имя = "minVacationLength")
    обз знч МинимальнаяПродолжительностьОтпуска: Число?
    @JsonСвойство(Имя = "previousVacation")
    обз знч ПредыдущийОтпуск: ИнформацияОбОтпуске?
    @JsonСвойство(Имя = "nextVacation")
    обз знч СледующийОтпуск: ИнформацияОбОтпуске?
;

@ВПодсистеме
структура ИнформацияОбОтпуске
    @JsonСвойство(Имя = "days")
    обз знч Дней: Число?
    @JsonСвойство(Имя = "description")
    обз знч Описание: Строка?
    @JsonСвойство(Имя = "startDate")
    обз знч ДатаНачала: ДатаВремя
    @JsonСвойство(Имя = "endDate")
    обз знч ДатаОкончания: ДатаВремя
;

@ВПодсистеме
метод ТипОбъектаJson(): Строка
    возврат "vacations"
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(ИнформацияОбОтпусках: ИнформацияОбОтпусках, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    знч СтрокиДанных: Массив<ИнформацияОбОтпуске.Объект>
    знч ФизическоеЛицо = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ИнформацияОбОтпусках.ФизическоеЛицо)) как ФизическиеЛица.Ссылка
    знч Ключ: Соответствие<Строка, Объект>
    Ключ.Вставить("ФизическоеЛицо", ФизическоеЛицо)
    знч ИнформацияОбОтпускеОбъект: ИнформацияОбОтпуске.Объект = новый ИнформацияОбОтпуске.Объект()

    ИнформацияОбОтпускеОбъект.ФизическоеЛицо = ФизическоеЛицо
    ИнформацияОбОтпускеОбъект.ОстатокОтпуска = ИнформацияОбОтпусках.НеИспользованоДней ?? 0
    ИнформацияОбОтпускеОбъект.КоличествоДнейКомпенсации = ИнформацияОбОтпусках.ДнейКомпенсации ?? 0
    ИнформацияОбОтпускеОбъект.ДопустимаяПродолжнительностьОтпускаМенее14Дней = ИнформацияОбОтпусках.МинимальнаяПродолжительностьОтпуска ?? 0    

    если ИнформацияОбОтпусках.ПредыдущийОтпуск != Неопределено
        ИнформацияОбОтпускеОбъект.ДатаНачалаПредыдущегоОтпуска = ИнформацияОбОтпусках.ПредыдущийОтпуск.ДатаНачала.Дата
        ИнформацияОбОтпускеОбъект.ДатаОкончанияПредыдущегоОтпуска = ИнформацияОбОтпусках.ПредыдущийОтпуск.ДатаОкончания.Дата
        ИнформацияОбОтпускеОбъект.ПояснениеПредыдущегоОтпуска = ИнформацияОбОтпусках.ПредыдущийОтпуск.Описание ?? ""
        ИнформацияОбОтпускеОбъект.ДнейПредыдущегоОтпуска = ИнформацияОбОтпусках.ПредыдущийОтпуск.Дней ?? 0
    ;

    если ИнформацияОбОтпусках.СледующийОтпуск != Неопределено
        ИнформацияОбОтпускеОбъект.ДатаНачалаСледующегоОтпуска = ИнформацияОбОтпусках.СледующийОтпуск.ДатаНачала.Дата
        ИнформацияОбОтпускеОбъект.ДатаОкончанияСледующегоОтпуска = ИнформацияОбОтпусках.СледующийОтпуск.ДатаОкончания.Дата
        ИнформацияОбОтпускеОбъект.ПояснениеСледующегоОтпуска = ИнформацияОбОтпусках.СледующийОтпуск.Описание ?? ""
        ИнформацияОбОтпускеОбъект.ДнейСледующегоОтпуска = ИнформацияОбОтпусках.СледующийОтпуск.Дней ?? 0
    ;

    СтрокиДанных.Добавить(ИнформацияОбОтпускеОбъект)

    Сервисы.ЗаписатьКоллекцию(СтрокиДанных, Ключ, Тип<ИнформацияОбОтпуске.Ссылка>, Сервисы.ИнструментыМенеджераОбъекта)
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(ИнформацияОбОтпусках: ИнформацияОбОтпусках_3_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    знч СтрокиДанных: Массив<ИнформацияОбОтпуске.Объект>
    знч ФизическоеЛицо = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ИнформацияОбОтпусках.ФизическоеЛицо)) как ФизическиеЛица.Ссылка
    знч Ключ: Соответствие<Строка, Объект>
    Ключ.Вставить("ФизическоеЛицо", ФизическоеЛицо)
    для СтрокаСотрудника из ИнформацияОбОтпусках.Отпуска
        знч ИнформацияОбОтпускеОбъект: ИнформацияОбОтпуске.Объект = новый ИнформацияОбОтпуске.Объект()

        ИнформацияОбОтпускеОбъект.ФизическоеЛицо = ФизическоеЛицо
        ИнформацияОбОтпускеОбъект.РабочееМесто = Сервисы.ПолучитьСсылку(Сотрудники.ВнешняяСсылка(СтрокаСотрудника.Сотрудник)) как Сотрудники.Ссылка
        ИнформацияОбОтпускеОбъект.ОстатокОтпуска = СтрокаСотрудника.НеИспользованоДней ?? 0
        ИнформацияОбОтпускеОбъект.КоличествоДнейКомпенсации = СтрокаСотрудника.ДнейКомпенсации ?? 0
        ИнформацияОбОтпускеОбъект.ДопустимаяПродолжнительностьОтпускаМенее14Дней = СтрокаСотрудника.МинимальнаяПродолжительностьОтпуска ?? 0

        если СтрокаСотрудника.ПредыдущийОтпуск != Неопределено
            ИнформацияОбОтпускеОбъект.ДатаНачалаПредыдущегоОтпуска = СтрокаСотрудника.ПредыдущийОтпуск.ДатаНачала.Дата
            ИнформацияОбОтпускеОбъект.ДатаОкончанияПредыдущегоОтпуска = СтрокаСотрудника.ПредыдущийОтпуск.ДатаОкончания.Дата
            ИнформацияОбОтпускеОбъект.ПояснениеПредыдущегоОтпуска = СтрокаСотрудника.ПредыдущийОтпуск.Описание ?? ""
            ИнформацияОбОтпускеОбъект.ДнейПредыдущегоОтпуска = СтрокаСотрудника.ПредыдущийОтпуск.Дней ?? 0
        ;

        если СтрокаСотрудника.СледующийОтпуск != Неопределено
            ИнформацияОбОтпускеОбъект.ДатаНачалаСледующегоОтпуска = СтрокаСотрудника.СледующийОтпуск.ДатаНачала.Дата
            ИнформацияОбОтпускеОбъект.ДатаОкончанияСледующегоОтпуска = СтрокаСотрудника.СледующийОтпуск.ДатаОкончания.Дата
            ИнформацияОбОтпускеОбъект.ПояснениеСледующегоОтпуска = СтрокаСотрудника.СледующийОтпуск.Описание ?? ""
            ИнформацияОбОтпускеОбъект.ДнейСледующегоОтпуска = СтрокаСотрудника.СледующийОтпуск.Дней ?? 0
        ;
    
        СтрокиДанных.Добавить(ИнформацияОбОтпускеОбъект)
    ;
    
    Сервисы.ЗаписатьКоллекцию(СтрокиДанных, Ключ, Тип<ИнформацияОбОтпуске.Ссылка>, Сервисы.ИнструментыМенеджераОбъекта)
;

@ВПодсистеме
метод УдалитьОбъекты(ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>, Сервисы: ВебApiСервер.СервисыУдаленияОбъектов)
    знч Ключ = {
        "ФизическоеЛицо": Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ПараметрыЗапроса["personID"] как Строка))
    }
    Сервисы.УдалитьКоллекцию(Ключ, Тип<ИнформацияОбОтпуске.Ссылка>)
;

@ВПодсистеме
метод ДанныеИнформацииОбОтпуске(ФизическиеЛицаСсылки: Массив<ФизическиеЛица.Ссылка>): ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    пер ДанныеОбОтпуске: Соответствие<ФизическиеЛица.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч ОстаткиОтпусковПоРабочимМестам = Отпуск.ПолучитьФункциональныеОпции().ОстаткиОтпусковПоРабочимМестам
    знч Запрос = Запрос{
        Выбрать 
            ИнформацияОбОтпуске.ФизическоеЛицо,
            ИнформацияОбОтпуске.РабочееМесто,
            ИнформацияОбОтпуске.ОстатокОтпуска,
            ИнформацияОбОтпуске.КоличествоДнейКомпенсации,
            ИнформацияОбОтпуске.ДатаНачалаПредыдущегоОтпуска,
            ИнформацияОбОтпуске.ДатаОкончанияПредыдущегоОтпуска,
            ИнформацияОбОтпуске.ДнейПредыдущегоОтпуска,
            ИнформацияОбОтпуске.ПояснениеПредыдущегоОтпуска,
            ИнформацияОбОтпуске.ДатаНачалаСледующегоОтпуска,
            ИнформацияОбОтпуске.ДатаОкончанияСледующегоОтпуска,
            ИнформацияОбОтпуске.ДнейСледующегоОтпуска,
            ИнформацияОбОтпуске.ПояснениеСледующегоОтпуска,
            ИнформацияОбОтпуске.ДопустимаяПродолжнительностьОтпускаМенее14Дней
        Из
            ИнформацияОбОтпуске Как ИнформацияОбОтпуске 
            Левое Соединение ПодразделенияИСотрудники Как ПодразделенияИСотрудники
                По ИнформацияОбОтпуске.РабочееМесто == ПодразделенияИСотрудники.Объект
                    И %ОстаткиОтпусковПоРабочимМестам
        Где
            ИнформацияОбОтпуске.ФизическоеЛицо В (%ФизическиеЛицаСсылки)
            И (не %ОстаткиОтпусковПоРабочимМестам
                или ПодразделенияИСотрудники.ОсновноеМестоРаботы.ЗаменитьNull(Ложь))}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        ДанныеОбОтпуске.Вставить(
            РезультатСтрока.ФизическоеЛицо, 
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат))
    ;
    возврат ДанныеОбОтпуске
;

@ВПодсистеме
метод ДанныеИнформацииОбОтпускеСотрудников(ФизическоеЛицо: ФизическиеЛица.Ссылка): ЧитаемоеСоответствие<Сотрудники.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    пер ДанныеОбОтпуске: Соответствие<Сотрудники.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Запрос = Запрос{
        Выбрать 
            ИнформацияОбОтпуске.РабочееМесто,
            ИнформацияОбОтпуске.ОстатокОтпуска,
            ИнформацияОбОтпуске.КоличествоДнейКомпенсации,
            ИнформацияОбОтпуске.ДатаНачалаПредыдущегоОтпуска,
            ИнформацияОбОтпуске.ДатаОкончанияПредыдущегоОтпуска,
            ИнформацияОбОтпуске.ДнейПредыдущегоОтпуска,
            ИнформацияОбОтпуске.ПояснениеПредыдущегоОтпуска,
            ИнформацияОбОтпуске.ДатаНачалаСледующегоОтпуска,
            ИнформацияОбОтпуске.ДатаОкончанияСледующегоОтпуска,
            ИнформацияОбОтпуске.ДнейСледующегоОтпуска,
            ИнформацияОбОтпуске.ПояснениеСледующегоОтпуска,
            ИнформацияОбОтпуске.ДопустимаяПродолжнительностьОтпускаМенее14Дней,
            ПодразделенияИСотрудники.ОсновноеМестоРаботы.ЗаменитьNull(Ложь) Как ОсновноеМестоРаботы
        Из
            ИнформацияОбОтпуске Как ИнформацияОбОтпуске
            Левое Соединение ПодразделенияИСотрудники Как ПодразделенияИСотрудники
                По ИнформацияОбОтпуске.РабочееМесто == ПодразделенияИСотрудники.Объект
        Где
            ИнформацияОбОтпуске.ФизическоеЛицо == %ФизическоеЛицо}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        ДанныеОбОтпуске.Вставить(
            РезультатСтрока.РабочееМесто, 
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат))
    ;
    возврат ДанныеОбОтпуске
;

//КонецОбласти

@ВПодсистеме
метод ОстатокОтпускаФизическогоЛица(ТекущееФизическоеЛицо: ФизическиеЛица.Ссылка): Число?
    знч Запрос = Запрос{
        Выбрать Первые 1
            Информация.ОстатокОтпуска Как ОстатокОтпуска
         Из
            ИнформацияОбОтпуске Как Информация
         Где
            Информация.ФизическоеЛицо == %ТекущееФизическоеЛицо}
    исп Результат = Запрос.Выполнить() 
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        возврат РезультатСтроки[0].ОстатокОтпуска
    ;
    возврат Неопределено
;

@ВПодсистеме
метод ОстатокОтпускаСотрудников(ТекущееФизическоеЛицо: ФизическиеЛица.Ссылка): ЧитаемоеСоответствие<Сотрудники.Ссылка, Число>
    пер ОстатокОтпуска: Соответствие<Сотрудники.Ссылка, Число>
    знч Запрос = Запрос{
        Выбрать
            Информация.РабочееМесто Как РабочееМесто,
            Информация.ОстатокОтпуска Как ОстатокОтпуска
         Из
            ИнформацияОбОтпуске Как Информация
         Где
            Информация.ФизическоеЛицо == %ТекущееФизическоеЛицо
            И Информация.РабочееМесто != Неопределено}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        ОстатокОтпуска.Вставить(РезультатСтрока.РабочееМесто, РезультатСтрока.ОстатокОтпуска)
    ;
    возврат ОстатокОтпуска
;

@ВПроекте
метод ЗаполнитьРабочиеМеста()
    исп Транзакции.Начать()
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ФизическоеЛицо
        Из
            ИнформацияОбОтпуске
        Где
            РабочееМесто == Неопределено
            И ФизическоеЛицо != Неопределено}
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        знч РабочееМесто = Сотрудники.ОсновнойСотрудникФизическогоЛица(СтрокаРезультата.ФизическоеЛицо)
        если РабочееМесто != Неопределено
            знч ИнформацияОбОтпускеОбъект = СтрокаРезультата.Ссылка.ЗагрузитьОбъект(Истина)
            ИнформацияОбОтпускеОбъект.РабочееМесто = РабочееМесто
            ИнформацияОбОтпускеОбъект.Записать()
        ;
    ;
;