импорт ВладельцыКабинетов
импорт Документы
импорт ИнтерфейсныеКомпонентыСтандартные
импорт Компания
импорт Криптография
импорт ЛичныеКабинетыПользователей
импорт ОбщиеСтандартные
импорт Отсутствия
импорт СтандартноеПриложение
импорт Уведомления
импорт УниверсальныеМеханизмы

// Контракт ОсновнойИнтерфейсПоставщик
@ВПроекте
@Реализация
метод РазделыПриложения(): ЧитаемаяКоллекция<ОсновнойИнтерфейс.ОписаниеРаздела>
    знч Разделы: Массив<ОсновнойИнтерфейс.ОписаниеРаздела>
    если ИспользованиеРазделаОтпуск()
        Разделы.Добавить(ОписаниеРазделаОтпуск())
    ;
    возврат Разделы
;

@ВПроекте
@Реализация
метод Виджеты(): ЧитаемаяКоллекция<ОсновнойИнтерфейс.ОписаниеВиджета>
    знч Виджеты: Массив<ОсновнойИнтерфейс.ОписаниеВиджета>
    если ИспользованиеРазделаОтпуск()
        Виджеты.Добавить(ОписаниеВиджетаОтпуск())
    ;
    возврат Виджеты
;

@ВПроекте
@Реализация
метод КомандыВсеФункции(): ЧитаемаяКоллекция<ОсновнойИнтерфейс.ОписательКомандыВсеФункции>
    знч Группа = новый ОсновнойИнтерфейс.ОписательГруппыКомандВсеФункции(Отпуск.ИМЯ_РАЗДЕЛА_ОТПУСК, 5)
    возврат [
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Будущие изменения остатков отпуска",
            СоздательФормыСписка = метод()-> возврат новый БудущиеИзмененияОстатковОтпуска.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый БудущиеИзмененияОстатковОтпуска.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Виды отпусков",
            СоздательФормыСписка = метод()-> возврат новый ВидыОтпусков.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ВидыОтпусков.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "График отпусков",
            СоздательФормыСписка = метод()-> возврат новый ГрафикОтпусков.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ГрафикОтпусков.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Заявление на компенсацию отпуска",
            СоздательФормыСписка = метод()-> возврат новый ЗаявлениеНаКомпенсациюОтпуска.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ЗаявлениеНаКомпенсациюОтпуска.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Заявление на отпуск",
            СоздательФормыСписка = метод()-> возврат новый ЗаявлениеНаОтпуск.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ЗаявлениеНаОтпуск.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Заявление на перенос отпуска",
            СоздательФормыСписка = метод()-> возврат новый ЗаявлениеНаПереносОтпуска.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ЗаявлениеНаПереносОтпуска.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Заместители (Заявление на отпуск)",
            СоздательФормыСписка = метод()-> возврат новый ЗаявлениеНаОтпускЗаместители.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ЗаявлениеНаОтпускЗаместители.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Рабочие места (Заявление на отпуск / компенсацию отпуска)",
            СоздательФормыСписка = метод()-> возврат новый РабочиеМестаДокументов.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый РабочиеМестаДокументов.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Уведомляемые (Заявление на отпуск) (устарело)",
            СоздательФормыСписка = () -> новый ЗаявлениеНаОтпускУведомляемыеУстарело.АвтоматическаяФормаСписка(),
            СоздательФормыОбъекта = () -> новый ЗаявлениеНаОтпускУведомляемыеУстарело.АвтоматическаяФормаОбъекта()
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Информация об отпуске",
            СоздательФормыСписка = метод()-> возврат новый ИнформацияОбОтпуске.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ИнформацияОбОтпуске.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Настройки графика отпусков",
            СоздательФормыСписка = метод()-> возврат новый НастройкиГрафикаОтпусков.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый НастройкиГрафикаОтпусков.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Настройки отпусков",
            СоздательФормыСписка = метод()-> возврат новый НастройкиОтпусков.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый НастройкиОтпусков.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Используемая функциональность (Отпуска)",
            СоздательФормыСписка = метод()-> возврат новый ИспользуемаяФункциональность.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ИспользуемаяФункциональность.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Остатки отпусков",
            СоздательФормыСписка = метод()-> возврат новый ОстаткиОтпусков.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ОстаткиОтпусков.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Периоды отпуска (Заявление на отпуск)",
            СоздательФормыСписка = метод()-> возврат новый ЗаявлениеНаОтпускПериоды.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ЗаявлениеНаОтпускПериоды.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Дни компенсации (Заявление на компенсацию отпуска)",
            СоздательФормыСписка = метод()-> возврат новый ЗаявлениеНаКомпенсациюОтпускаДниКомпенсации.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ЗаявлениеНаКомпенсациюОтпускаДниКомпенсации.АвтоматическаяФормаОбъекта();
            )
    ]
;

@ВПроекте
@Реализация
метод ДополнительныеКоманды(): ЧитаемыйМассив<Команда>
    возврат []
;

@ВПроекте
@Реализация
метод КомандыПанелиДействий(): ЧитаемыйМассив<Команда>
    возврат []
;

@ВПроекте
@Реализация
метод ДополнительныеКомандыПанелиГлавное(): ЧитаемыйМассив<Команда>
    возврат []
;
// Конец ОсновнойИнтерфейсПоставщик

// Контракт PushУведомленияОбработчик
@ВПроекте 
@Реализация
метод ВыполнитьДействие(ДанныеPush: PushУведомления.ДанныеPush)
    выбор
    когда ДанныеPush.Ссылка это ЗаявлениеНаКомпенсациюОтпуска.Ссылка
        ЗаявлениеНаКомпенсациюОтпускаФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = ДанныеPush.Ссылка как ЗаявлениеНаКомпенсациюОтпуска.Ссылка)
    когда ДанныеPush.Ссылка это ЗаявлениеНаОтпуск.Ссылка
        пер Заявление: ЗаявлениеНаОтпуск.Ссылка = ДанныеPush.Ссылка как ЗаявлениеНаОтпуск.Ссылка
        пер ДействиеPushУведомления: ВызовСервера.ДействиеPushУведомленияОбОтсутствии = Отсутствия::ВызовСервера.ДействиеPushУведомления(Заявление, ДанныеPush.Действие, ДанныеPush.Текст, Отпуск.ВидСогласуемогоЗаявленияОтпуск(), Криптография.ПараметрыСеанса().ПарольЗакрытогоКлючаПользователя)
        если ДействиеPushУведомления == ВызовСервера.ДействиеPushУведомленияОбОтсутствии.ОткрытьФормуДокумента
            ЗаявлениеНаОтпускФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = Заявление)
        ;
    когда ДанныеPush.Ссылка это ЗаявлениеНаПереносОтпуска.Ссылка
        пер Заявление: ЗаявлениеНаПереносОтпуска.Ссылка = ДанныеPush.Ссылка как ЗаявлениеНаПереносОтпуска.Ссылка
        пер ДействиеPushУведомления: ВызовСервера.ДействиеPushУведомленияОбОтсутствии = Отсутствия::ВызовСервера.ДействиеPushУведомления(Заявление, ДанныеPush.Действие, ДанныеPush.Текст, Отпуск.ВидСогласуемогоЗаявленияОтпуск(), Криптография.ПараметрыСеанса().ПарольЗакрытогоКлючаПользователя)
        если ДействиеPushУведомления == ВызовСервера.ДействиеPushУведомленияОбОтсутствии.ОткрытьФормуДокумента
            ЗаявлениеНаПереносОтпускаФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = Заявление)
        ;
    ;
;
// Конец PushУведомленияОбработчик

// Контракт ДокументыСотрудниковПоставщик

@ВПроекте
@Реализация
метод КомандыСоздатьЗаявление(): ЧитаемыйМассив<ЭлементСпискаЗначений<Объект?>>
    возврат []
;

@ВПроекте
@Реализация
метод КомпонентДокумента(Заявление: ДокументСотрудника.Ссылка): ДокументСотрудникаКомпонент?
    выбор Заявление
    когда это ЗаявлениеНаОтпуск.Ссылка
        возврат новый ЗаявлениеНаОтпускКомпонент()
    когда это ЗаявлениеНаПереносОтпуска.Ссылка
        возврат новый ЗаявлениеНаОтпускКомпонент()
    иначе
        возврат Неопределено
    ;
;

@ВПроекте
@Реализация
метод ОткрытьЗаявлениеМодально(Заявление: ДокументСотрудника.Ссылка): СтандартныеФормы.ДействиеВФорме?
    если Заявление это ЗаявлениеНаПереносОтпуска.Ссылка
        знч ЗаявлениеНаПереносОтпуска = Заявление как ЗаявлениеНаПереносОтпуска.Ссылка
        возврат ЗаявлениеНаПереносОтпускаФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = ЗаявлениеНаПереносОтпуска)
    иначе если Заявление это ЗаявлениеНаОтпуск.Ссылка 
        знч ЗаявлениеНаОтпуск = Заявление как ЗаявлениеНаОтпуск.Ссылка
        возврат ЗаявлениеНаОтпускФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = ЗаявлениеНаОтпуск)
    иначе 
        возврат Неопределено
    ;
;

@ВПроекте
@Реализация
метод ВыполнитьКомандуСоздать(Действие: ЭлементСпискаЗначений<Объект?>)
    если не (Действие.Значение это ВидыОтсутствий)
            или (Действие.Значение != ВидыОтсутствий.Отпуск и Действие.Значение != ВидыОтсутствий.ОтпускЗаСвойСчет) 
        возврат    
    ;
    
    пер Данные: Отпуск.ДанныеЗаполненияОтпуска
    Данные.ЗаСвойСчет = (Действие.Значение == ВидыОтсутствий.ОтпускЗаСвойСчет)
    ЗаявлениеНаОтпускФормаДокумента.ОткрытьВМодальномОкне(ДанныеЗаполнения = Данные)   
;

@ВПроекте
@Реализация
метод ПредставленияДокументов(): ЧитаемаяКоллекция<СостояниеДокументаКомпонентДанных>
    знч ФизЛицо = ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
    возврат Отпуск.ПредставленияЗаявленийФизлица(ФизЛицо, 
                                                ТолькоОтсутствия = Ложь, 
                                                ВыводитьБудущие = Истина, 
                                                ВыводитьПрошлые = Истина, 
                                                ВыводитьКомпенсацию = Ложь)    
;

// Конец ДокументыСотрудниковПоставщик

// Контракт ДокументОтсутствия

@ВПроекте
@Реализация
метод Создать(ВидОтсутствия: ВидыОтсутствий): Булево
    если ВидОтсутствия == ВидыОтсутствий.Отпуск или ВидОтсутствия == ВидыОтсутствий.ОтпускЗаСвойСчет
        пер Данные: Отпуск.ДанныеЗаполненияОтпуска
        Данные.ЗаСвойСчет = (ВидОтсутствия == ВидыОтсутствий.ОтпускЗаСвойСчет)
        ЗаявлениеНаОтпускФормаДокумента.ОткрытьВМодальномОкне(ДанныеЗаполнения = Данные)
        возврат Истина
    ;
    возврат Ложь
;

@ВПроекте
@Реализация
метод Компонент(Отсутствие: ОснованиеОтсутствия.Ссылка): Компонент?
    пер Компонент: ЗаявлениеНаОтпускКомпонент?
    если Отсутствие это ЗаявлениеНаОтпуск.Ссылка
        или Отсутствие это ЗаявлениеНаПереносОтпуска.Ссылка
        Компонент = новый ЗаявлениеНаОтпускКомпонент()
        Компонент.УстановитьТекущееЗаявление(МенеджерСущности.ОбъектПоСсылке(Отсутствие))
        Компонент.РежимПросмотра = Истина
    ;
    возврат Компонент
;



@ВПроекте
@Реализация
метод Форма(Отсутствие: ОснованиеОтсутствия.Ссылка): Форма<неизвестно>?
    пер Форма: ЗаявлениеНаОтпускФормаДокумента|ЗаявлениеНаПереносОтпускаФормаДокумента?
    если Отсутствие это ЗаявлениеНаОтпуск.Ссылка
        Форма = новый ЗаявлениеНаОтпускФормаДокумента(КлючОбъекта = Отсутствие как ЗаявлениеНаОтпуск.Ссылка)
    иначе если Отсутствие это ЗаявлениеНаПереносОтпуска.Ссылка
        Форма = новый ЗаявлениеНаПереносОтпускаФормаДокумента(КлючОбъекта = Отсутствие как ЗаявлениеНаПереносОтпуска.Ссылка)
    ;
    возврат Форма
;

@ВПроекте
@Реализация
метод ДоступныеВидыОтсутствия(): ЧитаемыйМассив<ВидыОтсутствий>
    знч ДоступныеВидыОтсутствия: Массив<ВидыОтсутствий>
    пер ФункциональныеОпцииОтпуск: Отпуск.ФункциональныеОпции = Отпуск.ПараметрыСеанса().ФункциональныеОпции
    если ФункциональныеОпцииОтпуск.Отпуск
        ДоступныеВидыОтсутствия.Добавить(ВидыОтсутствий.Отпуск)
    ;
    если  ФункциональныеОпцииОтпуск.ОтпускЗаСвойСчет
        ДоступныеВидыОтсутствия.Добавить(ВидыОтсутствий.ОтпускЗаСвойСчет)
    ;
    возврат ДоступныеВидыОтсутствия
;

// Конец ДокументОтсутствия

метод ИспользованиеРазделаОтпуск(): Булево
    возврат ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо != Неопределено и 
        (Компания.ПараметрыСеанса().ТекущийПользовательСотрудник
            или ВладельцыКабинетов.ПараметрыСеанса().ДнейДоОтключенияКабинета != Неопределено) и
        (Отпуск.ПараметрыСеанса().ФункциональныеОпции.ИнформацияОбОтпусках 
            или Отпуск.ПараметрыСеанса().ФункциональныеОпции.ИнформацияОГрафикеОтпусков)
;

метод ОписаниеРазделаОтпуск(): ОсновнойИнтерфейс.ОписаниеРаздела
    возврат новый ОсновнойИнтерфейс.ОписаниеРаздела(
        Ид = Отпуск.ИД_РАЗДЕЛА_ОТПУСК,
        Имя = Отпуск.ИМЯ_РАЗДЕЛА_ОТПУСК,
        Пиктограмма = НавигацияОтпуск.Изображение,
        ЦветПиктограммы = БиблиотекаЦветов.ВидыЦвета.Оранжевый,
        НавигационнаяКомандаРаздела = НавигацияОтпуск,
        ШиринаДляПанелиНавигации = 138)
;

@НаКлиенте
метод ОписаниеВиджетаОтпуск(): ОсновнойИнтерфейс.ОписаниеВиджета
    пер Команда: Команда?
    если Отпуск.ПараметрыСеанса().ФункциональныеОпции.Отпуск
        и Компания.ПараметрыСеанса().ТекущийПользовательСотрудник
        
        Команда = новый ОбычнаяКоманда((КомандаВиджета)->Клиент.СоздатьЗаявлениеНаОтпуск(Клиент.ВидыЗаявленийНаОтпуск.Отпуск), "Подать заявление")
    ;
    возврат новый ОсновнойИнтерфейс.ОписаниеВиджета(
        Ид = Отпуск.ИД_РАЗДЕЛА_ОТПУСК,
        ИдРаздела = Отпуск.ИД_РАЗДЕЛА_ОТПУСК,
        Имя = Отпуск.ИМЯ_РАЗДЕЛА_ОТПУСК,
        Компонент = новый ОтпускВиджетСодержимое(),
        Команда = Команда)
;

// Контракт ПараметрыФормированияПредставленийПоставщик

@ВПроекте
@Реализация
метод ЭтоОбъектСДополнительнымиПараметрамиПредставления(Объект: Справочник.Ссылка): Булево
    выбор Объект
    когда это ОснованиеОтпуска.Ссылка
        возврат Истина
    ;
    возврат Ложь
;

// Конец ПараметрыФормированияПредставленийПоставщик

// Контракт АннулируемыйИнтерфейсПоставщик

@ВПроекте
@Реализация
метод МетодыПредставленияАннулируемого(): ЧитаемоеСоответствие<Тип, (АннулируемыйДокумент.Ссылка) -> Строка?>
    возврат {Тип<ЗаявлениеНаОтпуск.Ссылка> : &ПредставлениеАннулируемого,
            Тип<ЗаявлениеНаПереносОтпуска.Ссылка> : &ПредставлениеАннулируемого}
;

@ВПроекте
@Реализация
метод МетодыПолученияЗаголовкаАннулирующего(): ЧитаемоеСоответствие<Тип, (АннулируемыйДокумент.Ссылка) -> Строка?>
    возврат {Тип<ЗаявлениеНаОтпуск.Ссылка> : &ЗаголовокАннулирующего,
            Тип<ЗаявлениеНаПереносОтпуска.Ссылка> : &ЗаголовокАннулирующего}
;

// Конец АннулируемыйИнтерфейсПоставщик

// Контракт АннулирующийИнтерфейсПоставщик

@ВПроекте
@Реализация
метод МетодыПолученияТекстаАннулирования(): ЧитаемоеСоответствие<Тип, (АннулирующийДокумент.Ссылка) -> Строка?>
    возврат {Тип<ЗаявлениеНаПереносОтпуска.Ссылка> : &ТекстАннулирования,
            Тип<АннулированияЗаявлений.Ссылка> : &ТекстАннулирования}
;

@ВПроекте
@Реализация
метод МетодыПолученияФормыАннулирующего(): ЧитаемоеСоответствие<Тип, (АннулирующийДокумент.Ссылка) -> Форма?>
    возврат {Тип<ЗаявлениеНаПереносОтпуска.Ссылка> : &ФормаАннулирующего}
;

//Конец АннулирующийИнтерфесПоставщик

метод ФормаАннулирующего(Документ: АннулирующийДокумент.Ссылка): Форма<неизвестно>?
    знч Форма = новый ЗаявлениеНаПереносОтпускаФормаДокумента(КлючОбъекта = Документ как ЗаявлениеНаПереносОтпуска.Ссылка)
    возврат Форма
;

метод ТекстАннулирования(Документ: АннулирующийДокумент.Ссылка): Строка?
    если Документ это АннулированияЗаявлений.Ссылка
        возврат "Отпуск отменен"
    иначе если Документ это ЗаявлениеНаПереносОтпуска.Ссылка
        знч ДанныеОтпуска = Отпуск.ДанныеОснованияОтпуска(Документ как ОснованиеОтпуска.Ссылка)
        знч ДатаНачалаОтпуска = ДанныеОтпуска.ДатаНачала.Представление("дд.ММ.гггг")
        знч ДатаОкончанияОтпуска = ДанныеОтпуска.ДатаОкончания.Представление("дд.ММ.гггг")

        возврат "Отпуск перенесен на период с %ДатаНачалаОтпуска г. по %ДатаОкончанияОтпуска г."
    ;
    
    возврат Неопределено
;

метод ПредставлениеАннулируемого(АннулируемыйДокумент: АннулируемыйДокумент.Ссылка): Строка?
    возврат Отпуск.ПредставлениеОтпуска(АннулируемыйДокумент как ОснованиеОтпуска.Ссылка)
;

метод ЗаголовокАннулирующего(АннулируемыйДокумент: АннулируемыйДокумент.Ссылка): Строка?
    если АннулируемыйДокумент это не ОснованиеОтпуска.Ссылка
        возврат Неопределено
    ;
    знч РеквизитыОтпуска = Отпуск.ДанныеОснованияОтпуска(АннулируемыйДокумент как ОснованиеОтпуска.Ссылка)
    если РеквизитыОтпуска.ЗаСвойСчет 
        возврат "Отмена отпуска за свой счет"
    иначе
        возврат "Отмена отпуска"
    ;
;