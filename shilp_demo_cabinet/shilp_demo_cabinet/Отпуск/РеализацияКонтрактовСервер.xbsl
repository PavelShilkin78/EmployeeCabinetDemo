импорт ВебApi
импорт ВладельцыКабинетов
импорт Документы
импорт ИнтерфейсныеКомпонентыСтандартные
импорт КлиентСервисаПодписания
импорт Компания
импорт Компания::Согласования
импорт КонтрольДоступа
импорт Криптография
импорт ЛичныеКабинетыПользователей
импорт ОбменДанными
импорт ОбщегоНазначения
импорт ОбщиеСтандартные
импорт Отсутствия
импорт Справки
импорт СтандартноеПриложение
импорт Статистика
импорт Уведомления
импорт УниверсальныеМеханизмы
импорт УниверсальныеМеханизмы::ШаблоныДокументов
импорт ФизическиеЛица

//Контракт ОбменДаннымиТипыDtoОбъектовСервис

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеТипыDtoОбъектов()
    Отпуск.ДобавитьТипDtoОбъекта()
;

//Конец ОбменДаннымиТипыDtoОбъектовСервис

// Контракт ПараметрыСеансаПоставщик
@ВПроекте
@Реализация
метод КоллекцияПараметровСеанса(МобильныйИнтерфейс: Булево): Соответствие<Строка, Объект>
    пер ПараметрыСеанса = новый Отпуск.ПараметрыСеанса()
    ЗаполнитьПараметрыСеанса(ПараметрыСеанса)
    возврат {Отпуск.КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: ПараметрыСеанса}
;
// Конец ПараметрыСеансаПоставщик

// Контракт ПодсистемаПриложения

@ВПроекте
@Реализация
метод ОписаниеПодсистемы(): СтандартноеПриложение.ОписаниеПодсистемы
    возврат новый СтандартноеПриложение.ОписаниеПодсистемы(
        Отпуск.ИД_ПОДСИСТЕМЫ,
        {
            ВладельцыКабинетов.ИД_ПОДСИСТЕМЫ, 
            ФизЛица.ИД_ПОДСИСТЕМЫ,
            Криптография.ИД_ПОДСИСТЕМЫ,
            КонтрольДоступа.ИД_ПОДСИСТЕМЫ, 
            Компания.ИД_ПОДСИСТЕМЫ,
            ОбменДанными.ИД_ПОДСИСТЕМЫ,
            Отсутствия.ИД_ПОДСИСТЕМЫ, 
            Справки.ИД_ПОДСИСТЕМЫ,
            ПолученныеДокументы.ИД_ПОДСИСТЕМЫ,
            ЛичныеКабинетыПользователей.ИД_ПОДСИСТЕМЫ, 
            Уведомления.ИД_ПОДСИСТЕМЫ,
            Статистика.ИД_ПОДСИСТЕМЫ, 
            УниверсальныеМеханизмы.ИД_ПОДСИСТЕМЫ
        }
    )
;

// Конец ПодсистемаПриложения

// Контракт ОбновляемаяПодсистема

@ВПроекте
@Реализация
метод ОбработчикиЗаполнения(): Массив<СтандартноеПриложение.ОписаниеОбработчикаЗаполнения>
    пер Обработчики: Массив<СтандартноеПриложение.ОписаниеОбработчикаЗаполнения>
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаЗаполнения(
                Отпуск.ИД_ПОДСИСТЕМЫ, 
                "ОтпускОбновитьСтроковыеРесурсы", 
                &Отпуск.ОбновитьСтроковыеРесурсы()))
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаЗаполнения(
                Отпуск.ИД_ПОДСИСТЕМЫ, 
                "ПереносОтпускаОбновитьСтроковеРесурсы", 
                &Отпуск.ОбновитьСтроковыеРесурсыПереносОтпуска()))
    возврат Обработчики
;

@ВПроекте
@Реализация
метод ОбработчикиОбновления(): Массив<СтандартноеПриложение.ОписаниеОбработчикаОбновления>
    пер Обработчики: Массив<СтандартноеПриложение.ОписаниеОбработчикаОбновления>
    пер Сервис = ОтпускПоставщикВерсииПриложения.ПолучитьСервис()
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаОбновления(
                Отпуск.ИД_ПОДСИСТЕМЫ, 
                "ОтпускОбновитьСтроковыеРесурсы", 
                &Отпуск.ОбновитьСтроковыеРесурсы(),
                Сервис.ОтпускОбновитьСтроковыеРесурсы()))
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаОбновления(
                Отпуск.ИД_ПОДСИСТЕМЫ, 
                "ИнформацияОбОтпускеЗаполнитьРабочиеМеста", 
                &ИнформацияОбОтпуске.ЗаполнитьРабочиеМеста(),
                Сервис.ИнформацияОбОтпускеЗаполнитьРабочиеМеста()))
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаОбновления(
                Отпуск.ИД_ПОДСИСТЕМЫ, 
                "ПереносОтпускаОбновитьСтроковеРесурсы", 
                &Отпуск.ОбновитьСтроковыеРесурсыПереносОтпуска(),
                Сервис.ПереносОтпускаОбновитьСтроковыеРесурсы()))
    
    возврат Обработчики
;

// Конец ОбновляемаяПодсистема

метод ЗаполнитьПараметрыСеанса(ПараметрыСеанса: Отпуск.ПараметрыСеанса)
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка? = ПользователиСистемы.ТекущееФизическоеЛицо()
    ПараметрыСеанса.ФункциональныеОпции = ИспользуемаяФункциональность.ФункциональныеОпции()
    если ФизическоеЛицо == Неопределено
        возврат
    ;
    знч ДанныеИнформацииОбОтпусках = ИнформацияОбОтпуске.ДанныеИнформацииОбОтпуске([ФизическоеЛицо])
    если не ДанныеИнформацииОбОтпусках.Пусто()
        знч ДанныеИнформацииОбОтпуске = ДанныеИнформацииОбОтпусках[ФизическоеЛицо]
        
        ПараметрыСеанса.ОстатокОтпуска = ДанныеИнформацииОбОтпуске.Получить("ОстатокОтпуска") как Число
        ПараметрыСеанса.ДатаНачалаПредыдущегоОтпуска 
            = ДанныеИнформацииОбОтпуске.Получить("ДатаНачалаПредыдущегоОтпуска") как Дата?
        ПараметрыСеанса.ДатаОкончанияПредыдущегоОтпуска 
            = ДанныеИнформацииОбОтпуске.Получить("ДатаОкончанияПредыдущегоОтпуска") как Дата?
        ПараметрыСеанса.ДнейПредыдущегоОтпуска 
            = ДанныеИнформацииОбОтпуске.Получить("ДнейПредыдущегоОтпуска") как Число
        ПараметрыСеанса.ПояснениеПредыдущегоОтпуска 
            = ДанныеИнформацииОбОтпуске.Получить("ПояснениеПредыдущегоОтпуска") как Строка
        ПараметрыСеанса.ДатаНачалаСледующегоОтпуска 
            = ДанныеИнформацииОбОтпуске.Получить("ДатаНачалаСледующегоОтпуска") как Дата?
        ПараметрыСеанса.ДатаОкончанияСледующегоОтпуска 
            = ДанныеИнформацииОбОтпуске.Получить("ДатаОкончанияСледующегоОтпуска") как Дата?
        ПараметрыСеанса.ДнейСледующегоОтпуска 
            = ДанныеИнформацииОбОтпуске.Получить("ДнейСледующегоОтпуска") как Число
        ПараметрыСеанса.ПояснениеСледующегоОтпуска 
            = ДанныеИнформацииОбОтпуске.Получить("ПояснениеСледующегоОтпуска") как Строка
        ПараметрыСеанса.КоличествоДнейКомпенсации 
            = ДанныеИнформацииОбОтпуске.Получить("КоличествоДнейКомпенсации") как Число
        ПараметрыСеанса.ДопустимаяПродолжнительностьОтпускаМенее14Дней 
            = ДанныеИнформацииОбОтпуске.Получить("ДопустимаяПродолжнительностьОтпускаМенее14Дней") как Число
        если ПараметрыСеанса.ФункциональныеОпции.ОстаткиОтпусковПоРабочимМестам
            ПараметрыСеанса.ОстаткиОтпусковСотрудников = Отпуск.ДанныеОстатковОтпусковСотрудников(ФизическоеЛицо)
        ;
        ПараметрыСеанса.ПараметрыИнициализированы = Истина
    ;
;

//Контракт КонтрольДоступаПоПолномочиямСервис

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеПолномочия()
    Отпуск.ДобавитьПолномочия()
;

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеРоли()
    Отпуск.ДобавитьРоли()
;

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеТипыАтрибутов()
;

@ВПроекте
@Реализация
метод СоздатьНаборыОграниченийДоступа()
;

@ВПроекте
@Реализация
метод ТипыАтрибутовПоТипамЗначений(): ЧитаемоеСоответствие<Тип, ТипыАтрибутов.Ссылка>
    возврат {:}
;

//Конец КонтрольДоступаПоПолномочиямСервис

//Контракт ДанныеApi
@ВПроекте
@Реализация
метод МассивТипов(Получатель: ВидПриложения?, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>
    если Получатель == ВидПриложения.Hrm или Получатель == ВидПриложения.Ess
        Типы.Добавить(Тип<ЗаявлениеНаКомпенсациюОтпуска.Ссылка>)
        Типы.Добавить(Тип<ЗаявлениеНаОтпуск.Ссылка>)
        Типы.Добавить(Тип<ЗаявлениеНаПереносОтпуска.Ссылка>)
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод ТипДанныхJson(ТипОбъекта: Тип, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>
    выбор ТипОбъекта
    когда Тип<БудущиеИзмененияОстатковОтпуска.Ссылка>
        Типы.Добавить(БудущиеИзмененияОстатковОтпуска.ТипДанныхJson(ВерсияФорматаОбмена))
    когда Тип<ГрафикОтпусков.Ссылка>
        Типы.Добавить(ГрафикОтпусков.ТипДанныхJson(ВерсияФорматаОбмена))
    когда Тип<ИнформацияОбОтпуске.Ссылка>
        Типы.Добавить(ИнформацияОбОтпуске.ТипДанныхJson(ВерсияФорматаОбмена))
    когда Тип<НастройкиОтпусков.Ссылка>
        Типы.Добавить(НастройкиОтпусков.ТипДанныхJson(ВерсияФорматаОбмена))
    когда Тип<ОстаткиОтпусков.Ссылка>
        Типы.Добавить(ОстаткиОтпусков.ТипДанныхJson(ВерсияФорматаОбмена))
    когда Тип<ВидыОтпусков.Ссылка>
        Типы.Добавить(ВидыОтпусков.ТипДанныхJson(ВерсияФорматаОбмена))
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод ТипКоллекцииДанныхJson(ТипОбъекта: Тип, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>
    выбор ТипОбъекта
    когда Тип<БудущиеИзмененияОстатковОтпуска.Ссылка>
        Типы.Добавить(БудущиеИзмененияОстатковОтпуска.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    когда Тип<ГрафикОтпусков.Ссылка>
        Типы.Добавить(ГрафикОтпусков.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    когда Тип<ИнформацияОбОтпуске.Ссылка>
        Типы.Добавить(ИнформацияОбОтпуске.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    когда Тип<НастройкиОтпусков.Ссылка>
        Типы.Добавить(НастройкиОтпусков.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    когда Тип<ОстаткиОтпусков.Ссылка>
        Типы.Добавить(ОстаткиОтпусков.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    когда Тип<ВидыОтпусков.Ссылка>
        Типы.Добавить(ВидыОтпусков.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод ИнструментыМенеджераОбъекта(ТипОбъекта: Тип): Массив<ВебApiСервер.ИнструментыМенеджераОбъекта>
    пер НаборИнструментыМенеджераОбъекта: Массив<ВебApiСервер.ИнструментыМенеджераОбъекта>
    пер ИнструментыМенеджераОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта
    выбор ТипОбъекта
    когда Тип<БудущиеИзмененияОстатковОтпуска.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как БудущиеИзмененияОстатковОтпуска.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    когда Тип<ГрафикОтпусков.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как ГрафикОтпусков.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    когда Тип<ИнформацияОбОтпуске.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как ИнформацияОбОтпуске.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    когда Тип<НастройкиОтпусков.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как НастройкиОтпусков.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    когда Тип<ОстаткиОтпусков.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как ОстаткиОтпусков.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    когда Тип<ВидыОтпусков.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как ВидыОтпусков.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    ;
    возврат НаборИнструментыМенеджераОбъекта
;

@ВПроекте
@Реализация
метод ПолучитьДанныеJson(ТипОбъекта: Тип, Ссылка: ВходящиеДанные.Ссылка|ИсходящиеДанные.Ссылка, 
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<Объект?>
    
    пер ДанныеJson: Массив<Объект?>
    выбор ТипОбъекта
    когда Тип<ЗаявлениеНаКомпенсациюОтпуска.Ссылка>
        ДанныеJson.Добавить(ЗаявлениеНаКомпенсациюОтпуска.ПолучитьДанныеJson(Ссылка как ЗаявлениеНаКомпенсациюОтпуска.Ссылка, Сервисы, ВерсияФорматаОбмена))
    когда Тип<ЗаявлениеНаОтпуск.Ссылка>
        ДанныеJson.Добавить(ЗаявлениеНаОтпуск.ПолучитьДанныеJson(Ссылка как ЗаявлениеНаОтпуск.Ссылка, Сервисы, ВерсияФорматаОбмена))
    когда Тип<ЗаявлениеНаПереносОтпуска.Ссылка>
        ДанныеJson.Добавить(ЗаявлениеНаПереносОтпуска.ПолучитьДанныеJson(Ссылка как ЗаявлениеНаПереносОтпуска.Ссылка, Сервисы, ВерсияФорматаОбмена))
    ;
    возврат ДанныеJson
;

@ВПроекте
@Реализация
метод МассивСсылокПоФильтру(ТипОбъекта: Тип, Фильтр: () -> ЧитаемыйМассив<Справочник.Ссылка>): Массив<ЧитаемыйМассив<Справочник.Ссылка>>
    пер МассивСсылок: Массив<ЧитаемыйМассив<Справочник.Ссылка>>
    возврат МассивСсылок
;

@ВПроекте
@Реализация
метод УдалитьОбъекты(ТипОбъекта: Тип, ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>, Сервисы: ВебApiСервер.СервисыУдаленияОбъектов)
    выбор ТипОбъекта
    когда Тип<БудущиеИзмененияОстатковОтпуска.Ссылка>
        БудущиеИзмененияОстатковОтпуска.УдалитьОбъекты(ПараметрыЗапроса, Сервисы)
    когда Тип<ГрафикОтпусков.Ссылка>
        ГрафикОтпусков.УдалитьОбъекты(ПараметрыЗапроса, Сервисы)
    когда Тип<ИнформацияОбОтпуске.Ссылка>
        ИнформацияОбОтпуске.УдалитьОбъекты(ПараметрыЗапроса, Сервисы)
    когда Тип<ОстаткиОтпусков.Ссылка>
        ОстаткиОтпусков.УдалитьОбъекты(ПараметрыЗапроса, Сервисы)
    ;
;

@ВПроекте
@Реализация
метод ТипОбъектаJson(ТипОбъекта: Тип): Массив<Строка>
    пер ТипОбъектаJson: Массив<Строка>
    выбор ТипОбъекта
    когда Тип<БудущиеИзмененияОстатковОтпуска.Ссылка>
        ТипОбъектаJson.Добавить(БудущиеИзмененияОстатковОтпуска.ТипОбъектаJson())
    когда Тип<ГрафикОтпусков.Ссылка>
        ТипОбъектаJson.Добавить(ГрафикОтпусков.ТипОбъектаJson())
    когда Тип<ИнформацияОбОтпуске.Ссылка>
        ТипОбъектаJson.Добавить(ИнформацияОбОтпуске.ТипОбъектаJson())
    когда Тип<НастройкиОтпусков.Ссылка>
        ТипОбъектаJson.Добавить(НастройкиОтпусков.ТипОбъектаJson())
    когда Тип<ОстаткиОтпусков.Ссылка>
        ТипОбъектаJson.Добавить(ОстаткиОтпусков.ТипОбъектаJson())
    когда Тип<ВидыОтпусков.Ссылка>
        ТипОбъектаJson.Добавить(ВидыОтпусков.ТипОбъектаJson())
    ;
    возврат ТипОбъектаJson
;

@ВПроекте
@Реализация
метод ЗагрузитьОбъектИзJson(ТипОбъекта: Тип, ТипДанных: Тип, ДанныеJson: Объект?, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    выбор ТипОбъекта
    когда Тип<БудущиеИзмененияОстатковОтпуска.Ссылка>
        выбор ТипДанных
        когда Тип<БудущиеИзмененияОстатковОтпуска.ОстаткиОтпускаФизлица>
            БудущиеИзмененияОстатковОтпуска.ЗагрузитьОбъектИзJson(ДанныеJson как БудущиеИзмененияОстатковОтпуска.ОстаткиОтпускаФизлица, Сервисы)
        когда Тип<БудущиеИзмененияОстатковОтпуска.ОстаткиОтпускаФизлица_3_0>
            БудущиеИзмененияОстатковОтпуска.ЗагрузитьОбъектИзJson(ДанныеJson как БудущиеИзмененияОстатковОтпуска.ОстаткиОтпускаФизлица_3_0, Сервисы)
        ;
    когда Тип<ГрафикОтпусков.Ссылка>
        выбор ТипДанных
        когда Тип<ГрафикОтпусков.ГрафикОтпусков>
            ГрафикОтпусков.ЗагрузитьОбъектИзJson(ДанныеJson как ГрафикОтпусков.ГрафикОтпусков, Сервисы)
        ;
    когда Тип<ИнформацияОбОтпуске.Ссылка>
        выбор ТипДанных
        когда Тип<ИнформацияОбОтпуске.ИнформацияОбОтпусках>
            ИнформацияОбОтпуске.ЗагрузитьОбъектИзJson(ДанныеJson как ИнформацияОбОтпуске.ИнформацияОбОтпусках, Сервисы)
        когда Тип<ИнформацияОбОтпуске.ИнформацияОбОтпусках_3_0>
            ИнформацияОбОтпуске.ЗагрузитьОбъектИзJson(ДанныеJson как ИнформацияОбОтпуске.ИнформацияОбОтпусках_3_0, Сервисы)
        ;
    когда Тип<НастройкиОтпусков.Ссылка>
        выбор ТипДанных
        когда Тип<НастройкиОтпусков.НастройкиОтпусков>
            НастройкиОтпусков.ЗагрузитьОбъектИзJson(ДанныеJson как НастройкиОтпусков.НастройкиОтпусков, Сервисы)
        ;
    когда Тип<ОстаткиОтпусков.Ссылка>
        выбор ТипДанных
        когда Тип<ОстаткиОтпусков.ОстаткиОтпусковФизлица>
            ОстаткиОтпусков.ЗагрузитьОбъектИзJson(ДанныеJson как ОстаткиОтпусков.ОстаткиОтпусковФизлица, Сервисы)
        ;
    когда Тип<ВидыОтпусков.Ссылка>
        выбор ТипДанных
        когда Тип<ВидыОтпусков.ВидОтпуска>
            ВидыОтпусков.ЗагрузитьОбъектИзJson(ДанныеJson как ВидыОтпусков.ВидОтпуска, Сервисы)
        ;
    ;
;

@ВПроекте
@Реализация
метод ПослеЗаписиГруппыОбъектов(ТипОбъекта: Тип, МассивОбъектовОтложенногоОбновления: Массив<ВебApiСервер.ОбъектОтложенногоОбновления>)
;

@ВПроекте
@Реализация
метод ИзменитьОбъектИзJson(ТипОбъекта: Тип, ДанныеJson: Объект, Сервисы: ВебApiСервер.СервисыЗагрузкиJson, ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации)
;

@ВПроекте
@Реализация
метод ЗавершитьИзменениеОбъектИзJson(ТипОбъекта: Тип, МассивСсылок: ЧитаемыйМассив<ВходящиеДанные.Ссылка>, ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации)
;

@ВПроекте
@Реализация
метод ГруппаИзмененийВJson(ТипОбъекта: Тип, Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<ЧитаемоеСоответствие<Строка, Массив<Объект?>>>
    
    пер ДанныеJson: Массив<ЧитаемоеСоответствие<Строка, Массив<Объект?>>>
    выбор ТипОбъекта
    когда Тип<ЗаявлениеНаКомпенсациюОтпуска.Ссылка>
        ДанныеJson.Добавить(ЗаявлениеНаКомпенсациюОтпуска.ГруппаИзмененийВJson(Ссылки, Сервисы, ВерсияФорматаОбмена))
    когда Тип<ЗаявлениеНаПереносОтпуска.Ссылка>
        ДанныеJson.Добавить(ЗаявлениеНаПереносОтпуска.ГруппаИзмененийВJson(Ссылки, Сервисы, ВерсияФорматаОбмена))
    когда Тип<ЗаявлениеНаОтпуск.Ссылка>
        ДанныеJson.Добавить(ЗаявлениеНаОтпуск.ГруппаИзмененийВJson(Ссылки, Сервисы, ВерсияФорматаОбмена))
    ;
    возврат ДанныеJson
;

//Конец ДанныеApi

// Контракт СогласованияПользователь
@ВПроекте
@Реализация
метод СформироватьПредставленияДокумента(Документ: ПодписываемыйДокумент.Ссылка)
    выбор Документ
    когда это ОснованиеОтпуска.Ссылка,
        это ЗаявлениеНаКомпенсациюОтпуска.Ссылка
        
        ПредставленияДокументов.СформироватьПредставленияДокумента(Документ как Справочник.Ссылка, Ложь)
    ;
;

@ВПроекте
@Реализация
метод ДокументСогласованияJson(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson): СогласованияДокументов.ДокументСогласованияJson?
    
    знч Документ = ДанныеОбъекта["Документ"] как Справочник.Ссылка
    выбор Документ
    когда это ОснованиеОтпуска.Ссылка,
        это ЗаявлениеНаКомпенсациюОтпуска.Ссылка
        
        возврат новый СогласованияДокументов.ДокументСогласованияJson(
            Документ.Ид.ВСтроку()
        )
    ;
    
    возврат Неопределено
;

@ВПроекте
@Реализация
метод ПослеПодписанияДокумента(Документ: ПодписываемыйДокумент.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего, ОбновитьПредставление: Булево)
    пер ЭтоДокументПодсистемы = Ложь
    выбор Документ
    когда это ЗаявлениеНаОтпуск.Ссылка
        ЭтоДокументПодсистемы = Истина
        ЗаявлениеНаОтпуск.ПослеПодписания(Документ как ЗаявлениеНаОтпуск.Ссылка, ДанныеСогласующего)
    когда это ЗаявлениеНаКомпенсациюОтпуска.Ссылка
        ЭтоДокументПодсистемы = Истина
        ЗаявлениеНаКомпенсациюОтпуска.ПослеПодписания(Документ как ЗаявлениеНаКомпенсациюОтпуска.Ссылка, ДанныеСогласующего)
    когда это ЗаявлениеНаПереносОтпуска.Ссылка
        ЭтоДокументПодсистемы = Истина
        ЗаявлениеНаПереносОтпуска.ПослеПодписания(Документ как ЗаявлениеНаПереносОтпуска.Ссылка, ДанныеСогласующего)
    ;
    если ЭтоДокументПодсистемы и ОбновитьПредставление
        СформироватьПредставленияДокумента(Документ)
    ;
;

@ВПроекте
@Реализация
метод ОтправлятьСогласование(Документ: ПодписываемыйДокумент.Ссылка): Булево
    выбор Документ
    когда   это ЗаявлениеНаОтпуск.Ссылка,
            это ЗаявлениеНаКомпенсациюОтпуска.Ссылка,
            это ЗаявлениеНаПереносОтпуска.Ссылка
        возврат ОбменДанными.ЭтоОтправляемыйДокумент(Документ как ИсходящиеДанные.Ссылка)
    ;
    
    возврат Ложь
;

@ВПроекте
@Реализация
метод ДокументыНаСогласовании(Согласующий: ФизическиеЛица.Ссылка): ЧитаемыйМассив<ПодписываемыйДокумент.Ссылка>
    знч Документы: Массив<ПодписываемыйДокумент.Ссылка>
    знч Запрос = Запрос{
        Выбрать Различные
            ЗаявлениеНаОтпуск.Ссылка как Документ,
            ЗаявлениеНаОтпуск.ФизическоеЛицо как ФизическоеЛицо
        Из
            ЗаявлениеНаОтпуск как ЗаявлениеНаОтпуск
            Внутреннее соединение СостояниеДокументов как СостояниеДокументов
                по СостояниеДокументов.Документ == ЗаявлениеНаОтпуск.Ссылка
            Внутреннее соединение СогласующиеЗаявленийСотрудников как СогласующиеЗаявленийСотрудников
                по ЗаявлениеНаОтпуск.ФизическоеЛицо == СогласующиеЗаявленийСотрудников.Сотрудник
                и СогласующиеЗаявленийСотрудников.ВидСогласуемогоЗаявления == %{Отпуск.ВидСогласуемогоЗаявленияОтпуск()}
                и (СогласующиеЗаявленийСотрудников.Согласующий == %Согласующий
                    или (СогласующиеЗаявленийСотрудников.СпособЗамещения == СпособыЗамещения.ВместеССогласующим)
                        и СогласующиеЗаявленийСотрудников.ПервичныйСогласующий == %Согласующий)
            Левое соединение СогласованияДокументов как СогласованияДокументов
                по СогласованияДокументов.Документ == СостояниеДокументов.Документ
                    и (СогласованияДокументов.НомерШагаСогласования > СогласующиеЗаявленийСотрудников.ШагСогласования
                            или СогласованияДокументов.УчастникСогласования == %Согласующий)
            Левое соединение ОтправляемыеДокументы как ОтправляемыеДокументы
                по ОтправляемыеДокументы.Владелец == СостояниеДокументов.Документ
        Где
            СостояниеДокументов.Состояние != СостоянияДокумента.Черновик
            и СостояниеДокументов.Состояние != СостоянияДокумента.ПолученОтказ
            и СостояниеДокументов.Состояние != СостоянияДокумента.Выполнен
            и СостояниеДокументов.Состояние != СостоянияДокумента.Аннулирован
            и ОтправляемыеДокументы.Владелец Есть Null 
            и СогласованияДокументов.Документ Есть Null
            и не 1 в 
                (Выбрать Первые 1
                    1 как поле
                из
                    СогласованияДокументов как СогласованияВСервисеПодписания
                где
                    СогласованияВСервисеПодписания.Документ == ЗаявлениеНаОтпуск.Ссылка
                    и СогласованияВСервисеПодписания.УчастникСогласования == ЗаявлениеНаОтпуск.ФизическоеЛицо
                    и СогласованияВСервисеПодписания.Результат == РезультатыСогласования.НаПодписанииВСервисеПодписания)
            и не 1 в 
                (Выбрать Первые 1
                    1 как поле
                из
                    Аннулирование как Аннулирование
                где
                    Аннулирование.АннулируемыйДокумент == СостояниеДокументов.Документ
                    и Аннулирование.Активно == Истина)
        Объединить все
        Выбрать Различные
            ЗаявлениеНаПереносОтпуска.Ссылка как Документ,
            ЗаявлениеНаПереносОтпуска.ФизическоеЛицо как ФизическоеЛицо
        Из
            ЗаявлениеНаПереносОтпуска как ЗаявлениеНаПереносОтпуска
            Внутреннее соединение СостояниеДокументов как СостояниеДокументов
                по СостояниеДокументов.Документ == ЗаявлениеНаПереносОтпуска.Ссылка
            Внутреннее соединение СогласующиеЗаявленийСотрудников как СогласующиеЗаявленийСотрудников
                по ЗаявлениеНаПереносОтпуска.ФизическоеЛицо == СогласующиеЗаявленийСотрудников.Сотрудник
                и СогласующиеЗаявленийСотрудников.ВидСогласуемогоЗаявления == %{Отпуск.ВидСогласуемогоЗаявленияОтпуск()}
                и (СогласующиеЗаявленийСотрудников.Согласующий == %Согласующий
                    или (СогласующиеЗаявленийСотрудников.СпособЗамещения == СпособыЗамещения.ВместеССогласующим)
                        и СогласующиеЗаявленийСотрудников.ПервичныйСогласующий == %Согласующий)
            Левое соединение СогласованияДокументов как СогласованияДокументов
                по СогласованияДокументов.Документ == СостояниеДокументов.Документ
                    и (СогласованияДокументов.НомерШагаСогласования > СогласующиеЗаявленийСотрудников.ШагСогласования
                            или СогласованияДокументов.УчастникСогласования == %Согласующий)
            Левое соединение ОтправляемыеДокументы как ОтправляемыеДокументы
                по ОтправляемыеДокументы.Владелец == СостояниеДокументов.Документ
        Где
            СостояниеДокументов.Состояние != СостоянияДокумента.Черновик
            и СостояниеДокументов.Состояние != СостоянияДокумента.ПолученОтказ
            и СостояниеДокументов.Состояние != СостоянияДокумента.Выполнен
            и СостояниеДокументов.Состояние != СостоянияДокумента.Аннулирован
            и ОтправляемыеДокументы.Владелец Есть Null 
            и СогласованияДокументов.Документ Есть Null
            и не 1 в 
                (Выбрать Первые 1
                    1 как поле
                из
                    СогласованияДокументов как СогласованияВСервисеПодписания
                где
                    СогласованияВСервисеПодписания.Документ == ЗаявлениеНаПереносОтпуска.Ссылка
                    и СогласованияВСервисеПодписания.УчастникСогласования == ЗаявлениеНаПереносОтпуска.ФизическоеЛицо
                    и СогласованияВСервисеПодписания.Результат == РезультатыСогласования.НаПодписанииВСервисеПодписания)
            и не 1 в 
                (Выбрать Первые 1
                    1 как поле
                из
                    Аннулирование как Аннулирование
                где
                    Аннулирование.АннулируемыйДокумент == СостояниеДокументов.Документ)
        }
    
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        пер ДолженСогласовать = Ложь
        знч ТекущиеСогласующие = Согласования.ТекущиеСогласующие(
            РезультатСтрока.Документ, Отпуск.ВидСогласуемогоЗаявленияОтпуск(), РезультатСтрока.ФизическоеЛицо)
            
        для ТекущийСогласующий из ТекущиеСогласующие
            если ТекущийСогласующий.Согласующий == Согласующий
                ДолженСогласовать = Истина
                прервать
            ;
        ;
        если не ДолженСогласовать
            продолжить
        ;

        Документы.Добавить(РезультатСтрока.Документ)
    ;
    
    возврат Документы
;

@ВПроекте
@Реализация
метод ДокументыСогласованные(Согласующий: ФизическиеЛица.Ссылка): ЧитаемыйМассив<ПодписываемыйДокумент.Ссылка>
    знч Документы: Массив<ПодписываемыйДокумент.Ссылка>
    
    знч Запрос = Запрос{
        Выбрать Различные
            ЗаявлениеНаОтпуск.Ссылка как Документ
        Из
            ЗаявлениеНаОтпуск как ЗаявлениеНаОтпуск
            Внутреннее соединение СостояниеДокументов как СостояниеДокументов
                по СостояниеДокументов.Документ == ЗаявлениеНаОтпуск.Ссылка
            Внутреннее соединение СогласующиеЗаявленийСотрудников как СогласующиеЗаявленийСотрудников
                по ЗаявлениеНаОтпуск.ФизическоеЛицо == СогласующиеЗаявленийСотрудников.Сотрудник
                и СогласующиеЗаявленийСотрудников.ВидСогласуемогоЗаявления == %{Отпуск.ВидСогласуемогоЗаявленияОтпуск()}
                и (СогласующиеЗаявленийСотрудников.Согласующий == %Согласующий
                    или (СогласующиеЗаявленийСотрудников.СпособЗамещения == СпособыЗамещения.ВместеССогласующим)
                        и СогласующиеЗаявленийСотрудников.ПервичныйСогласующий == %Согласующий)
            Внутреннее соединение СогласованияДокументов как СогласованияДокументов
                по СогласованияДокументов.Документ == СостояниеДокументов.Документ
                    и (СогласованияДокументов.НомерШагаСогласования > СогласующиеЗаявленийСотрудников.ШагСогласования
                        или СогласованияДокументов.УчастникСогласования == %Согласующий)
        Где
            СостояниеДокументов.Состояние != СостоянияДокумента.Черновик
        Объединить все
        Выбрать Различные
            ЗаявлениеНаПереносОтпуска.Ссылка как Документ
        Из
            ЗаявлениеНаПереносОтпуска как ЗаявлениеНаПереносОтпуска
            Внутреннее соединение СостояниеДокументов как СостояниеДокументов
                по СостояниеДокументов.Документ == ЗаявлениеНаПереносОтпуска.Ссылка
            Внутреннее соединение СогласующиеЗаявленийСотрудников как СогласующиеЗаявленийСотрудников
                по ЗаявлениеНаПереносОтпуска.ФизическоеЛицо == СогласующиеЗаявленийСотрудников.Сотрудник
                и СогласующиеЗаявленийСотрудников.ВидСогласуемогоЗаявления == %{Отпуск.ВидСогласуемогоЗаявленияОтпуск()}
                и (СогласующиеЗаявленийСотрудников.Согласующий == %Согласующий
                    или (СогласующиеЗаявленийСотрудников.СпособЗамещения == СпособыЗамещения.ВместеССогласующим)
                        и СогласующиеЗаявленийСотрудников.ПервичныйСогласующий == %Согласующий)
            Внутреннее соединение СогласованияДокументов как СогласованияДокументов
                по СогласованияДокументов.Документ == СостояниеДокументов.Документ
                    и (СогласованияДокументов.НомерШагаСогласования > СогласующиеЗаявленийСотрудников.ШагСогласования
                        или СогласованияДокументов.УчастникСогласования == %Согласующий)
        Где
            СостояниеДокументов.Состояние != СостоянияДокумента.Черновик
    }
    
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        Документы.Добавить(РезультатСтрока.Документ)
    ;
    
    возврат Документы
;

@ВПроекте
@Реализация
метод ДокументДляОзнакомления(Документ: ПодписываемыйДокумент.Ссылка): Булево
    возврат Ложь
;

@ВПроекте
@Реализация
метод ПравилаСогласованияПоУмолчанию(): ЧитаемыйМассив<Согласования.ПравилоСогласования>
    знч ПравилоСогласования = новый Согласования.ПравилоСогласования(
        ВидСогласуемогоЗаявления = Отпуск.ВидСогласуемогоЗаявленияОтпуск(),
        ТипПравила = ТипыПравилСогласования.ДляВсех,
        ПоУмолчанию = Истина)
    ПравилоСогласования.ШагиПравила.Добавить(
        новый Согласования.ШагПравилаСогласования(
            1,
            ТипыШаговСогласования.ВсеСогласующие,
            [Согласования.РольПодписантаНепосредственныйРуководитель()]
        )
    )
    
    возврат [ПравилоСогласования]
;

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеВидыСогласуемыхЗаявлений()
    ВидыСогласуемыхЗаявлений.ДобавитьПредопределенныйВидСогласуемогоЗаявления(
        "Согласование отпусков",
        "vacationRequests",
        Отпуск.ВИД_СОГЛАСОВАНИЯ_ОТПУСКОВ,
        ВидыСогласуемыхЗаявленийУстарело.ЗаявлениеНаОтпуск,
        Истина
    )
;

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеРолиПодписантов()
;

конст ЗАЯВЛЕНИЕ_НА_ОТПУСК = "ЗаявлениеНаОтпуск"
конст ЗАЯВЛЕНИЕ_НА_КОМПЕНСАЦИЮ_ОТПУСКА = "ЗаявлениеНаКомпенсациюОтпуска"
конст ЗАЯВЛЕНИЕ_НА_ПЕРЕНОС_ОТПУСКА = "ЗаявлениеНаПереносОтпуска"


@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеТипыСогласуемыхДокументов()
    Согласования.ДобавитьПредопределенныйТипСогласуемогоДокумента(ЗАЯВЛЕНИЕ_НА_ОТПУСК)
    Согласования.ДобавитьПредопределенныйТипСогласуемогоДокумента(ЗАЯВЛЕНИЕ_НА_КОМПЕНСАЦИЮ_ОТПУСКА)
    Согласования.ДобавитьПредопределенныйТипСогласуемогоДокумента(ЗАЯВЛЕНИЕ_НА_ПЕРЕНОС_ОТПУСКА)
;

@ВПроекте
@Реализация
метод ТипСогласуемогоДокумента(ОбъектСогласования: ПодписываемыйДокумент.Ссылка|ВидыСогласуемыхЗаявлений.Ссылка): ТипыСогласуемыхДокументов.Ссылка?
    выбор ОбъектСогласования
    когда это ЗаявлениеНаОтпуск.Ссылка
        возврат Согласования.НайтиТипСогласуемогоДокумента(ЗАЯВЛЕНИЕ_НА_ОТПУСК)
    когда это ЗаявлениеНаКомпенсациюОтпуска.Ссылка
        возврат Согласования.НайтиТипСогласуемогоДокумента(ЗАЯВЛЕНИЕ_НА_КОМПЕНСАЦИЮ_ОТПУСКА)
    когда это ЗаявлениеНаПереносОтпуска.Ссылка
        возврат Согласования.НайтиТипСогласуемогоДокумента(ЗАЯВЛЕНИЕ_НА_ПЕРЕНОС_ОТПУСКА)
    ;
    
    если ОбъектСогласования == Отпуск.ВидСогласуемогоЗаявленияОтпуск()
        возврат Согласования.НайтиТипСогласуемогоДокумента(ЗАЯВЛЕНИЕ_НА_ОТПУСК)
    ;
    
    возврат Неопределено
;

@ВПроекте
@Реализация
метод ТипыСогласуемыхДокументовПолучателя(Получатель: ВидПриложения?): Массив<ТипыСогласуемыхДокументов.Ссылка>
    пер Типы: Массив<ТипыСогласуемыхДокументов.Ссылка>
    если Получатель == ВидПриложения.Hrm
        Типы.Добавить(Согласования.НайтиТипСогласуемогоДокумента(ЗАЯВЛЕНИЕ_НА_ОТПУСК))
        Типы.Добавить(Согласования.НайтиТипСогласуемогоДокумента(ЗАЯВЛЕНИЕ_НА_КОМПЕНСАЦИЮ_ОТПУСКА))
        Типы.Добавить(Согласования.НайтиТипСогласуемогоДокумента(ЗАЯВЛЕНИЕ_НА_ПЕРЕНОС_ОТПУСКА))
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод РольСогласующегоЗаявления(ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка): Роли.Ссылка?
    если ВидЗаявления == Отпуск.ВидСогласуемогоЗаявленияОтпуск()
        возврат Отпуск.РольСогласованиеОтпусков()
    иначе
        возврат Неопределено
    ;
;

@ВПроекте
@Реализация
метод ВидСогласуемогоЗаявления(Документ: ПодписываемыйДокумент.Ссылка): ВидыСогласуемыхЗаявлений.Ссылка?
    если Документ это ОснованиеОтпуска.Ссылка
        возврат Отпуск.ВидСогласуемогоЗаявленияОтпуск()
    иначе
        возврат Неопределено
    ;
;

@ВПроекте
@Реализация
метод Согласуемый(Документ: ПодписываемыйДокумент.Ссылка): ФизическиеЛица.Ссылка?
    если Документ это ЗаявлениеНаОтпуск.Ссылка
        возврат ЗаявлениеНаОтпуск.ФизическиеЛицаДокументов(новый Массив([Документ как ЗаявлениеНаОтпуск.Ссылка]))[Документ как ЗаявлениеНаОтпуск.Ссылка].ЕдинственныйИлиУмолчание()
    иначе если Документ это ЗаявлениеНаПереносОтпуска.Ссылка
        возврат ЗаявлениеНаПереносОтпуска.ФизическиеЛицаДокументов(новый Массив([Документ как ЗаявлениеНаПереносОтпуска.Ссылка]))[Документ как ЗаявлениеНаПереносОтпуска.Ссылка].ЕдинственныйИлиУмолчание()
    иначе 
        возврат Неопределено
    ;
;

@ВПроекте
@Реализация
метод ИдентификаторыЭлектронныхДокументов(Документ: ПодписываемыйДокумент.Ссылка): ЧитаемыйМассив<Строка>
    знч ИдентификаторыЭлектронныхДокументов: Массив<Строка>
    если Документ это ЗаявлениеНаОтпуск.Ссылка
        или Документ это ЗаявлениеНаКомпенсациюОтпуска.Ссылка
        или Документ это ЗаявлениеНаПереносОтпуска.Ссылка
        
        пер РабочиеМестаДокумента = РабочиеМестаДокументов.РабочиеМестаЗаявления(Документ как ДокументПоРабочимМестам.Ссылка)
        для РабочееМестоДокумента из РабочиеМестаДокумента.РабочиеМеста
            ИдентификаторыЭлектронныхДокументов.Добавить(
                Файлы.ИдентификаторЭлектронногоДокумента(Документ, РабочееМестоДокумента.РабочееМесто))
        ;
    ;
    возврат ИдентификаторыЭлектронныхДокументов
;

// Конец СогласованияПользователь

// Контракт ПодписываемыйДокументПоставщикОграничений

@ВПроекте
@Реализация
метод РазрешенияДоступаПодписываемыхДокументов(Документы: ЧитаемыйМассив<ПодписываемыйДокумент.Ссылка>): ЧитаемоеСоответствие<ПодписываемыйДокумент.Ссылка, ЧитаемыйМассив<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ПодписываемыйДокумент.Ссылка, ЧитаемыйМассив<РазрешениеДоступа>>
    знч ВладельцыСогласуемыхДокументов: Соответствие<ПодписываемыйДокумент.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч ДокументыЗаявлениеНаОтпуск: Массив<ЗаявлениеНаОтпуск.Ссылка>
    знч ДокументыЗаявлениеНаКомпенсациюОтпуска: Массив<ЗаявлениеНаКомпенсациюОтпуска.Ссылка>
    знч ДокументыЗаявлениеНаПереносОтпуска: Массив<ЗаявлениеНаПереносОтпуска.Ссылка>
    
    знч ДокументыПодсистемы: Массив<ПодписываемыйДокумент.Ссылка>
    для Документ из Документы
        выбор Документ
        когда это ЗаявлениеНаОтпуск.Ссылка
            ДокументыЗаявлениеНаОтпуск.Добавить(Документ как ЗаявлениеНаОтпуск.Ссылка)
            ДокументыПодсистемы.Добавить(Документ)
        когда это ЗаявлениеНаКомпенсациюОтпуска.Ссылка
            ДокументыЗаявлениеНаКомпенсациюОтпуска.Добавить(Документ как ЗаявлениеНаКомпенсациюОтпуска.Ссылка)
            ДокументыПодсистемы.Добавить(Документ)
        когда это ЗаявлениеНаПереносОтпуска.Ссылка
            ДокументыЗаявлениеНаПереносОтпуска.Добавить(Документ как ЗаявлениеНаПереносОтпуска.Ссылка)
            ДокументыПодсистемы.Добавить(Документ)
        ;
    ;   
        
    ВладельцыСогласуемыхДокументов.ВставитьВсе(ЗаявлениеНаОтпуск.ФизическиеЛицаДокументов(ДокументыЗаявлениеНаОтпуск))
    ВладельцыСогласуемыхДокументов.ВставитьВсе(ЗаявлениеНаКомпенсациюОтпуска.ФизическиеЛицаДокументов(ДокументыЗаявлениеНаКомпенсациюОтпуска))
    ВладельцыСогласуемыхДокументов.ВставитьВсе(ЗаявлениеНаПереносОтпуска.ФизическиеЛицаДокументов(ДокументыЗаявлениеНаПереносОтпуска))
    
    для Документ из ДокументыПодсистемы
        знч РазрешенияДокумента: Массив<РазрешениеДоступа>
        РазрешенияДокумента.ДобавитьВсе(
            КонтрольДоступа.ЧтениеДанныхСправочниковПерсонально(ВладельцыСогласуемыхДокументов.ПолучитьИлиУмолчание(Документ)))
        РазрешенияДокумента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПоПолномочиям(
            [Отпуск.ПолномочиеПросмотрОтпусков()],
            ВладельцыСогласуемыхДокументов.ПолучитьИлиУмолчание(Документ, [])
        ))
        Разрешения.Вставить(Документ, РазрешенияДокумента)
    ;
    
    возврат Разрешения
;

// Конец ПодписываемыйДокументПоставщикОграничений

// Контракт Документы

@ВПроекте
@Реализация
метод СтрокиДокументовНаСогласовании(Документы: ЧитаемыйМассив<ПодписываемыйДокумент.Ссылка>): ЧитаемоеСоответствие<ПодписываемыйДокумент.Ссылка, СтрокаСпискаСМиниатюройКомпонентДанных>
    знч ПредставлениеДокументов: Соответствие<ПодписываемыйДокумент.Ссылка, СтрокаСпискаСМиниатюройКомпонентДанных>
    
    знч ДокументыЗаявленияНаОтпуск: Массив<ОснованиеОтпуска.Ссылка>
    для Документ из Документы
        если Документ это ОснованиеОтпуска.Ссылка
            ДокументыЗаявленияНаОтпуск.Добавить(Документ как ОснованиеОтпуска.Ссылка)
        ;
    ;
    
    знч Запрос = Запрос{
        Выбрать Различные
            ЗаявлениеНаОтпуск.Ссылка как Документ,
            СостояниеДокументов.Состояние как Состояние,
            ЗаявлениеНаОтпуск.ДатаНачала как ДатаНачала,
            ЗаявлениеНаОтпуск.ДатаОкончания как ДатаОкончания,
            ЗаявлениеНаОтпуск.ФизическоеЛицо как ФизическоеЛицо,
            ЗаявлениеНаОтпуск.ФизическоеЛицо.Представление.ЗаменитьNull("") как ФизическоеЛицоПредставление,
            ЗаявлениеНаОтпуск.ФизическоеЛицо.Миниатюра.ЗаменитьNull(Неопределено) как Миниатюра,
            Выбор 
                Когда ЗаявлениеНаОтпуск.ЗаСвойСчет
                    Тогда ВидыОтсутствий.ОтпускЗаСвойСчет
                Иначе ВидыОтсутствий.Отпуск
            Конец как Причина
        Из
            ЗаявлениеНаОтпуск как ЗаявлениеНаОтпуск
            Внутреннее соединение СостояниеДокументов как СостояниеДокументов
                по СостояниеДокументов.Документ == ЗаявлениеНаОтпуск.Ссылка
        Где
            СостояниеДокументов.Документ В (%ДокументыЗаявленияНаОтпуск)
        Объединить все
        Выбрать Различные
            ЗаявлениеНаПереносОтпуска.Ссылка как Документ,
            СостояниеДокументов.Состояние как Состояние,
            ЗаявлениеНаПереносОтпуска.ДатаНачала как ДатаНачала,
            ЗаявлениеНаПереносОтпуска.ДатаОкончания как ДатаОкончания,
            ЗаявлениеНаПереносОтпуска.ФизическоеЛицо как ФизическоеЛицо,
            ЗаявлениеНаПереносОтпуска.ФизическоеЛицо.Представление.ЗаменитьNull("") как ФизическоеЛицоПредставление,
            ЗаявлениеНаПереносОтпуска.ФизическоеЛицо.Миниатюра.ЗаменитьNull(Неопределено) как Миниатюра,
            Выбор 
                Когда ЗаявлениеНаПереносОтпуска.ЗаСвойСчет
                    Тогда ВидыОтсутствий.ОтпускЗаСвойСчет
                Иначе ВидыОтсутствий.Отпуск
            Конец как Причина
        Из
            ЗаявлениеНаПереносОтпуска как ЗаявлениеНаПереносОтпуска
            Внутреннее соединение СостояниеДокументов как СостояниеДокументов
                по СостояниеДокументов.Документ == ЗаявлениеНаПереносОтпуска.Ссылка
        Где
            СостояниеДокументов.Документ В (%ДокументыЗаявленияНаОтпуск)
        Упорядочить По
            ДатаНачала Убыв
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        знч ДанныеПредставления = новый СтрокаСпискаСМиниатюройКомпонентДанных()
        ДанныеПредставления.Представление = СтрокаРезультата.ФизическоеЛицоПредставление
        ДанныеПредставления.ДополнительноеПредставление =
            Отсутствия.ПредставлениеОтсутствия(
                СтрокаРезультата.ДатаНачала,
                СтрокаРезультата.ДатаОкончания,
                СтрокаРезультата.Причина)
        
        ДанныеПредставления.Изображение = ФизическиеЛица.ФотографияИзФайла(СтрокаРезультата.Миниатюра)
        
        ПредставлениеДокументов.Вставить(СтрокаРезультата.Документ, ДанныеПредставления)
    ;
    
    возврат ПредставлениеДокументов
;

// Конец Документы

// Контракт СтатистикаПоставщик

@ВПроекте
@Реализация
метод СтатистикаСправочников(): Массив<СтатистикаДанных.Справочник>
    знч СправочникиСтатистика: Массив<СтатистикаДанных.Справочник>
    возврат СправочникиСтатистика
;

@ВПроекте
@Реализация
метод СтатистикаДокументов(): Массив<СтатистикаДанных.Документ>
    знч ДокументыСтатистика: Массив<СтатистикаДанных.Документ>
    ДокументыСтатистика.ДобавитьВсе(СтатистикаДанных.СтатистикаПоДокументу(ЗаявлениеНаКомпенсациюОтпуска))
    ДокументыСтатистика.ДобавитьВсе(СтатистикаДанных.СтатистикаПоДокументу(ЗаявлениеНаОтпуск))
    возврат ДокументыСтатистика
;

// Конец СтатистикаПоставщик

// Контракт ДанныеПодписанияСервис
@ВПроекте
@Реализация
метод ДанныеОрганизации(ДокументСсылка: ДокументПодписываемыйВСервисеПодписания.Ссылка): Соответствие<Строка, ОрганизацияПодписываемогоДокумента.Ссылка?>?
    пер ОрганизацииДокумента: Соответствие<Строка, ОрганизацияПодписываемогоДокумента.Ссылка?>?
    если ДокументСсылка это ЗаявлениеНаКомпенсациюОтпуска.Ссылка
        ОрганизацииДокумента = новый Соответствие<Строка, ОрганизацияПодписываемогоДокумента.Ссылка?>()
        пер РабочиеМестаДокумента = РабочиеМестаДокументов.РабочиеМестаЗаявления(ДокументСсылка как ЗаявлениеНаКомпенсациюОтпуска.Ссылка)
        для РабочееМестоДокумента из РабочиеМестаДокумента.РабочиеМеста
            ОрганизацииДокумента.Вставить(
                Файлы.ИдентификаторЭлектронногоДокумента(ДокументСсылка, РабочееМестоДокумента.РабочееМесто),
                РабочееМестоДокумента.Организация)
        ;
    иначе если ДокументСсылка это ЗаявлениеНаОтпуск.Ссылка
        ОрганизацииДокумента = новый Соответствие<Строка, ОрганизацияПодписываемогоДокумента.Ссылка?>()
        пер РабочиеМестаОтпуска = РабочиеМестаДокументов.РабочиеМестаЗаявления(ДокументСсылка как ЗаявлениеНаОтпуск.Ссылка)
        для РабочееМестоОтпуска из РабочиеМестаОтпуска.РабочиеМеста
            ОрганизацииДокумента.Вставить(
                Файлы.ИдентификаторЭлектронногоДокумента(ДокументСсылка, РабочееМестоОтпуска.РабочееМесто),
                РабочееМестоОтпуска.Организация)
        ;
    иначе если ДокументСсылка это ЗаявлениеНаПереносОтпуска.Ссылка
        ОрганизацииДокумента = новый Соответствие<Строка, ОрганизацияПодписываемогоДокумента.Ссылка?>()
        пер РабочиеМестаОтпуска = РабочиеМестаДокументов.РабочиеМестаЗаявления(ДокументСсылка как ЗаявлениеНаПереносОтпуска.Ссылка)
        для РабочееМестоОтпуска из РабочиеМестаОтпуска.РабочиеМеста
            ОрганизацииДокумента.Вставить(
                Файлы.ИдентификаторЭлектронногоДокумента(ДокументСсылка, РабочееМестоОтпуска.РабочееМесто),
                РабочееМестоОтпуска.Организация)
        ;
    ;
    возврат ОрганизацииДокумента
;

@ВПроекте
@Реализация
метод ДанныеДокументов(ДокументСсылка: ДокументПодписываемыйВСервисеПодписания.Ссылка): Массив<ДокументПодписываемыйВСервисеПодписания.Ссылка>?
    возврат Неопределено
;
// Конец ДанныеПодписанияСервис

// Контракт СогласованияЗаместитель
@ВПроекте
@Реализация
метод ВидСогласуемыхЗаявлений(): ВидыСогласуемыхЗаявлений.Ссылка
    возврат Отпуск.ВидСогласуемогоЗаявленияОтпуск()
;
// Конец СогласованияЗаместитель

// Контракт ИсходящиеДокументыСОписанием

@ВПроекте
@Реализация
метод ДокументСнабжаетсяФайломОписания(СсылкаНаДокумент: Сущность.Ключ): Булево
    если СсылкаНаДокумент это ЗаявлениеНаКомпенсациюОтпуска.Ссылка
        возврат Истина
    иначе если СсылкаНаДокумент это ОснованиеОтпуска.Ссылка
        возврат Истина
    ;
    возврат Ложь
;

@ВПроекте
@Реализация
метод ДанныеДляПодготовкиОписаний(СсылкаНаДокумент: Сущность.Ключ): Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>?
    
    если СсылкаНаДокумент это ЗаявлениеНаКомпенсациюОтпуска.Ссылка
        возврат ЗаявлениеНаКомпенсациюОтпуска.ДанныеДокументаДляПодготовкиОписаний(СсылкаНаДокумент)
    иначе если СсылкаНаДокумент это ЗаявлениеНаОтпуск.Ссылка
        возврат ЗаявлениеНаОтпуск.ДанныеДокументаДляПодготовкиОписаний(СсылкаНаДокумент)
    иначе если СсылкаНаДокумент это ЗаявлениеНаПереносОтпуска.Ссылка
        возврат ЗаявлениеНаПереносОтпуска.ДанныеДокументаДляПодготовкиОписаний(СсылкаНаДокумент)
    ;
    возврат Неопределено
;

// Конец ИсходящиеДокументыСОписанием

// Контракт ПоставщикШаблонов

@ВПроекте
@Реализация
метод ДанныеШаблонаДокумента(ДокументСсылка: Справочник.Ссылка, ДополнительныеПараметры: Соответствие<Строка, Объект>? = Неопределено): ШаблоныДокументовМенеджер.ДанныеДляШаблонаПечатнойФормы?
    если ДокументСсылка это ЗаявлениеНаОтпуск.Ссылка или ДокументСсылка это ЗаявлениеНаКомпенсациюОтпуска.Ссылка
        или ДокументСсылка это ЗаявлениеНаПереносОтпуска.Ссылка
        пер РабочиеМеста: РабочиеМеста?
        если ДополнительныеПараметры это Соответствие<Строка, Объект>
            и ДополнительныеПараметры.СодержитКлюч("РабочиеМеста")
            
            РабочиеМеста = ДополнительныеПараметры["РабочиеМеста"] как РабочиеМеста
        ;
        выбор ДокументСсылка
        когда это ЗаявлениеНаОтпуск.Ссылка
            знч Ид = УниверсальныеМеханизмы.Ид(Отпуск.ПОДСИСТЕМА_ОТПУСК, Отпуск.ШАБЛОН_ЗАЯВЛЕНИЯ_НА_ОТПУСК)
            пер ДанныеДляШаблона = новый ШаблоныДокументовМенеджер.ДанныеДляШаблонаПечатнойФормы(
                УниверсальныеМеханизмы.ДвоичныеДанные(Ид),
                УсловияВыводаОбластейШаблонов.УсловияВыводаОбластей(Ид),
                ЗаявлениеНаОтпуск.ДанныеДокументаДляПечатнойФормы(ДокументСсылка, РабочиеМеста))
            ШаблоныДокументовМенеджер.ДополнитьДанныеДополнительнымиРеквизитами(ДанныеДляШаблона, ДокументСсылка, Ид)
            возврат ДанныеДляШаблона
        когда это ЗаявлениеНаКомпенсациюОтпуска.Ссылка
            знч Ид = УниверсальныеМеханизмы.Ид(Отпуск.ПОДСИСТЕМА_ОТПУСК, Отпуск.ШАБЛОН_ЗАЯВЛЕНИЯ_НА_КОМПЕНСАЦИЮ_ОТПУСКА)
            пер ДанныеДляШаблона = новый ШаблоныДокументовМенеджер.ДанныеДляШаблонаПечатнойФормы(
                УниверсальныеМеханизмы.ДвоичныеДанные(Ид),
                УсловияВыводаОбластейШаблонов.УсловияВыводаОбластей(Ид),
                ЗаявлениеНаКомпенсациюОтпуска.ДанныеДокументаДляПечатнойФормы(ДокументСсылка, РабочиеМеста))
            ШаблоныДокументовМенеджер.ДополнитьДанныеДополнительнымиРеквизитами(ДанныеДляШаблона, ДокументСсылка, Ид)
            возврат ДанныеДляШаблона
        когда это ЗаявлениеНаПереносОтпуска.Ссылка
            знч Ид = УниверсальныеМеханизмы.Ид(Отпуск.ПОДСИСТЕМА_ОТПУСК, Отпуск.ШАБЛОН_ЗАЯВЛЕНИЯ_НА_ПЕРЕНОС_ОТПУСКА)
            пер ДанныеДляШаблона = новый ШаблоныДокументовМенеджер.ДанныеДляШаблонаПечатнойФормы(
                УниверсальныеМеханизмы.ДвоичныеДанные(Ид),
                УсловияВыводаОбластейШаблонов.УсловияВыводаОбластей(Ид),
                ЗаявлениеНаПереносОтпуска.ДанныеДокументаДляПечатнойФормы(ДокументСсылка, РабочиеМеста))
            ШаблоныДокументовМенеджер.ДополнитьДанныеДополнительнымиРеквизитами(ДанныеДляШаблона, ДокументСсылка, Ид)
            возврат ДанныеДляШаблона
        ;
    ;
    возврат Неопределено
;

@ВПроекте
@Реализация
метод ДополнитьДанныеШаблонаДокумента(ДокументСсылка: Справочник.Ссылка, ДанныеДокумента: Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>): Булево
    выбор ДокументСсылка
    когда это ЗаявлениеНаОтпуск.Ссылка
        ЗаявлениеНаОтпуск.ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента)
        возврат Истина
    когда это ЗаявлениеНаКомпенсациюОтпуска.Ссылка
        ЗаявлениеНаКомпенсациюОтпуска.ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента)
        возврат Истина
    когда это ЗаявлениеНаПереносОтпуска.Ссылка
        ЗаявлениеНаПереносОтпуска.ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента)
        возврат Истина
    ;
    возврат Ложь
;

// Конец ПоставщикШаблонов

// Контракт СтроковыеРесурсыПоставщик

@ВПроекте
@Реализация
метод ИменаРесурсовПоГруппеРесурсов(УчитыватьИспользуемуюФункциональность: Булево): Соответствие<Строка, Коллекция<Строка>>
    знч Ресурсы = <Строка>[]

    Отпуск.ШаблонСообщения.Элементы()
        .ДляКаждого(ШаблонСообщения -> Уведомления.ВидыТекстов.Элементы()
                .ДляКаждого(ВидТекста -> Ресурсы.Добавить(ШаблонСообщения.ВСтроку() + ВидТекста.ВСтроку())))

    Отпуск.ШаблонСообщенияПереносОтпуска.Элементы()
        .ДляКаждого(ШаблонСообщения -> Уведомления.ВидыТекстов.Элементы()
                .ДляКаждого(ВидТекста -> Ресурсы.Добавить(ШаблонСообщения.ВСтроку() + ВидТекста.ВСтроку())))
                
    возврат {Отпуск.ГРУППА_РЕСУРСОВ_ОТПУСК: Ресурсы}
;

// Конец СтроковыеРесурсыПоставщик

// Контракт АннулированияЗаявленийПоставщикОграничений

@ВПроекте
@Реализация
метод РазрешенияДоступаАннулируемыхЗаявлений(Документы: Массив<Аннулирование.АннулирующиеАннулируемыеДокументы>): ЧитаемоеСоответствие<АннулированияЗаявлений.Ссылка, ЧитаемыйМассив<РазрешениеДоступа>>

    знч Разрешения: Соответствие<АннулированияЗаявлений.Ссылка, ЧитаемыйМассив<РазрешениеДоступа>>
    знч ВладельцыАннулируемыхДокументов: Соответствие<АннулируемыйДокумент.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч ДокументыЗаявлениеНаОтпуск: Массив<ЗаявлениеНаОтпуск.Ссылка>
    знч ДокументыЗаявлениеНаПереносОтпуска: Массив<ЗаявлениеНаПереносОтпуска.Ссылка>
    для Документ из Документы
        выбор Документ.АннулируемыйДокумент
        когда это ЗаявлениеНаОтпуск.Ссылка
            ДокументыЗаявлениеНаОтпуск.Добавить(Документ.АннулируемыйДокумент как ЗаявлениеНаОтпуск.Ссылка)
        когда это ЗаявлениеНаПереносОтпуска.Ссылка
            ДокументыЗаявлениеНаПереносОтпуска.Добавить(Документ.АннулируемыйДокумент как ЗаявлениеНаПереносОтпуска.Ссылка)
        ;
    ;   
        
    ВладельцыАннулируемыхДокументов.ВставитьВсе(ЗаявлениеНаОтпуск.ФизическиеЛицаДокументов(ДокументыЗаявлениеНаОтпуск))
    ВладельцыАннулируемыхДокументов.ВставитьВсе(ЗаявлениеНаПереносОтпуска.ФизическиеЛицаДокументов(ДокументыЗаявлениеНаПереносОтпуска))
    
    для Документ из Документы
        
        Разрешения.Вставить(Документ.АннулирующийДокумент как АннулированияЗаявлений.Ссылка, КонтрольДоступа.ЧтениеДанныхСправочниковПоПолномочиям(
            [Отпуск.ПолномочиеПросмотрОтпусков()],
            ВладельцыАннулируемыхДокументов.ПолучитьИлиУмолчание(Документ.АннулируемыйДокумент)))
    ;
    
    возврат Разрешения

;

//Конец АннулированияЗаявленийПоставщикОграничений

// АннулирующийПоставщик

@ВПроекте
@Реализация
метод МетодыПолученияРабочегоМестаАннулируемого(): ЧитаемоеСоответствие<Тип, (АннулируемыйДокумент.Ссылка) -> Массив<РабочиеМестаАннулирования>>
    возврат {Тип<ЗаявлениеНаОтпуск.Ссылка>: &РабочиеМестаАннулируемого,
            Тип<ЗаявлениеНаПереносОтпуска.Ссылка>: &РабочиеМестаАннулируемого}
;

@ВПроекте
@Реализация
метод МетодыПолученияРабочихМестАннулируемых(): ЧитаемоеСоответствие<Тип, (Массив<АннулируемыйДокумент.Ссылка>) -> ЧитаемоеСоответствие<АннулируемыйДокумент.Ссылка, Массив<РабочиеМестаАннулирования>>>
    возврат {Тип<ЗаявлениеНаОтпуск.Ссылка>: &РабочиеМестаАннулируемых,
            Тип<ЗаявлениеНаПереносОтпуска.Ссылка>: &РабочиеМестаАннулируемых}
;

@ВПроекте
@Реализация
метод МетодыДополненияДанныхДокументаДляПечатнойФормыДаннымиАннулируемого(): ЧитаемоеСоответствие<Тип, (Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>, АннулируемыйДокумент.Ссылка) -> ничто>
    возврат {Тип<ЗаявлениеНаОтпуск.Ссылка>: &ДополнитьДанныеДокументаДляПечатнойФормыДаннымиАннулируемого,
            Тип<ЗаявлениеНаПереносОтпуска.Ссылка>: &ДополнитьДанныеДокументаДляПечатнойФормыДаннымиАннулируемого}
;

@ВПроекте
@Реализация
метод МетодыПолученияНаименованияЗаявления(): ЧитаемоеСоответствие<Тип, (АннулируемыйДокумент.Ссылка)-> Строка>
    возврат {Тип<ЗаявлениеНаОтпуск.Ссылка>: &НаименованиеЗаявления,
            Тип<ЗаявлениеНаПереносОтпуска.Ссылка>: &НаименованиеЗаявления}
;

@ВПроекте
@Реализация
метод МетодыПолученияРазрезаДляИдентификатораЭлектронногоДокумента(): ЧитаемоеСоответствие<Тип, ()-> Тип>
    возврат {Тип<ЗаявлениеНаОтпуск.Ссылка>: &РазрезДляИдентификатораЭлектронногоДокумента,
            Тип<ЗаявлениеНаПереносОтпуска.Ссылка>: &РазрезДляИдентификатораЭлектронногоДокумента}
;

// Конец АннулирующийПоставщик

метод РазрезДляИдентификатораЭлектронногоДокумента(): Тип
    возврат Тип<Сотрудники.Ссылка>    
;

метод НаименованиеЗаявления(АннулируемыйДокумент: АннулируемыйДокумент.Ссылка): Строка
    возврат "Заявление на отмену отпуска"
;    


метод РабочиеМестаАннулируемых(АннулируемыеДокументы: Массив<АннулируемыйДокумент.Ссылка>): Соответствие<АннулируемыйДокумент.Ссылка, Массив<РабочиеМестаАннулирования>>

    знч РабочиеМестаАннулирований: Соответствие<АннулируемыйДокумент.Ссылка, Массив<РабочиеМестаАннулирования>>
    если АннулируемыеДокументы.Размер() == 0
        возврат РабочиеМестаАннулирований
    ;
    
    выбор АннулируемыеДокументы.ПервыйИлиУмолчание()
    когда это ОснованиеОтпуска.Ссылка
        знч Документы = АннулируемыеДокументы.Преобразовать(А -> А как ИсходящиеДанные.Ссылка)
        знч РабочиеМестаОтпусков = РабочиеМестаДокументов.РабочиеМестаЗаявлений(ВебApiСервер.ИсходящиеДанныеКакСсылки(Документы))
        для Документ из Документы
            знч РабочиеМестаАннулирования: Массив<РабочиеМестаАннулирования>
            для РабочееМесто из РабочиеМестаОтпусков[Документ как ДокументПоРабочимМестам.Ссылка].РабочиеМеста
                если РабочееМесто.Оформление == ОформленияЗаявленийНаОтпуск.Оформлять
                    РабочиеМестаАннулирования.Добавить(новый РабочиеМестаАннулирования(
                        Организация = РабочееМесто.Организация,
                        Сотрудник = РабочееМесто.РабочееМесто))
                ;
            ;
            РабочиеМестаАннулирований.Вставить(Документ как АннулируемыйДокумент.Ссылка, РабочиеМестаАннулирования)
        ;    
    ;
    
    возврат РабочиеМестаАннулирований

;

метод РабочиеМестаАннулируемого(АннулируемыйДокумент: АннулируемыйДокумент.Ссылка): Массив<РабочиеМестаАннулирования>
    
  пер МестаЗаявлений = РабочиеМестаАннулируемых([АннулируемыйДокумент])
    если МестаЗаявлений.СодержитКлюч(АннулируемыйДокумент)
        возврат МестаЗаявлений[АннулируемыйДокумент]
    ;
    возврат новый Массив<РабочиеМестаАннулирования>([новый РабочиеМестаАннулирования()])

;

метод ДополнитьДанныеДокументаДляПечатнойФормыДаннымиАннулируемого(ДанныеДокумента: Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>, Заявление: АннулируемыйДокумент.Ссылка)
    
    если Заявление это не ОснованиеОтпуска.Ссылка
        возврат
    ;
    
    знч ДанныеАннулируемогоЗаявления = Отпуск.ДанныеОснованияОтпуска(Заявление как ОснованиеОтпуска.Ссылка)
    знч ПериодыОтпуска = ЗаявлениеНаОтпускПериоды.ПериодыОтпускаЗаявления(Заявление как ОснованиеОтпуска.Ссылка).Периоды.СортироватьПо(Элемент -> Элемент.ДатаНачала!)
    пер Текст: Строка
    пер ПериодыТекст: Строка
    для ДанныеИдентификатора из ДанныеДокумента
        пер ПоставляемыеДанные = ДанныеИдентификатора.Значение.Данные
        
        если не ПериодыОтпуска.Пусто()
            знч ПериодыОтпускаСотрудника = ПериодыОтпуска.Фильтровать(Элемент -> Элемент.РабочееМесто == ПоставляемыеДанные["Сотрудник"])
            Текст = "Прошу отменить отпуск"
            пер ПраздничныеДни: Соответствие<Число, Массив<Дата>>
            если ПоставляемыеДанные["ФизическоеЛицо"] != Неопределено
                знч ГрафикРаботы: ГрафикиРаботы.Ссылка? = ОрганизационнаяСтруктура.ГрафикРаботыФизическогоЛица(ПоставляемыеДанные["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
                ПраздничныеДни = ГрафикиРаботы.ПраздничныеДниГрафикаРаботы(ГрафикРаботы)
            ;
            для СтрокаОтпуска из ПериодыОтпускаСотрудника
                Текст += "\н"
                ПериодыТекст = ПериодыТекст.Пусто() ? "" : ПериодыТекст + "\н"
                пер ПериодВидаОтпуска = ""
                если СтрокаОтпуска.Использовать
                    если СтрокаОтпуска.ДатаНачала == СтрокаОтпуска.ДатаОкончания
                        ПериодВидаОтпуска = "на 1 календарный день " + МенеджерДат.ФорматДаты(СтрокаОтпуска.ДатаНачала, "д ММММ гггг")
                    иначе
                        знч ДлительностьОтпуска: Отпуск.ДлительностьОтпуска = Отпуск.ПродолжительностьОтпуска(СтрокаОтпуска.ДатаНачала, СтрокаОтпуска.ДатаОкончания, ПраздничныеДни)
                        знч КоличествоДней = ДлительностьОтпуска.КалендарныхДней - ДлительностьОтпуска.ПраздничныхДней
                        знч ДнейСтрокой = МенеджерСтрок.ТекстПоКоличеству("День", КоличествоДней)
                        знч ДнейОтпускаСтрокой = "%{КоличествоДней.ВСтроку()} календарный %{ДнейСтрокой.ВНижнийРегистр()}"
                        знч Начало = МенеджерДат.ФорматДаты(СтрокаОтпуска.ДатаНачала, "д ММММ гггг")
                        знч Окончание = МенеджерДат.ФорматДаты(СтрокаОтпуска.ДатаОкончания, "д ММММ гггг")
                        ПериодВидаОтпуска = "с %Начало по %Окончание включительно на %ДнейОтпускаСтрокой"
                    ;
                ;
                знч ВидОтпуска = СтрокаОтпуска.ЗаСвойСчет ? "За свой счет" : СтрокаОтпуска.ВидОтпуска.Представление()
                Текст += "%ВидОтпуска %ПериодВидаОтпуска."
                ПериодыТекст += "%ВидОтпуска %ПериодВидаОтпуска."
            ;
            ПоставляемыеДанные.Вставить("ДанныеДокументаПериодыТекст", ПериодыТекст)
        иначе
            пер ПериодОтпуска = ""
            если ДанныеАннулируемогоЗаявления.ДатаНачала == ДанныеАннулируемогоЗаявления.ДатаОкончания
                ПериодОтпуска = МенеджерДат.ФорматДаты(ДанныеАннулируемогоЗаявления.ДатаНачала, "д ММММ гггг")
            иначе
                знч Начало = МенеджерДат.ФорматДаты(ДанныеАннулируемогоЗаявления.ДатаНачала, "д ММММ гггг")
                знч Окончание = МенеджерДат.ФорматДаты(ДанныеАннулируемогоЗаявления.ДатаОкончания, "д ММММ гггг")
                ПериодОтпуска = "с %{Начало} по %{Окончание} включительно"
            ;
            если  ДанныеАннулируемогоЗаявления.ЗаСвойСчет
                Текст = "Прошу отменить отпуск за свой счет %ПериодОтпуска."    
            иначе
                Текст = "Прошу отменить отпуск %ПериодОтпуска."
            ;
            ПоставляемыеДанные.Вставить("ДанныеДокументаПериодОтпуска", ПериодОтпуска)
        ;
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаТекст", Текст)
        ПоставляемыеДанные.Вставить("ДанныеДокументаНаименование", "Заявление")
        ПоставляемыеДанные.Вставить("ДанныеДокументаВидОтменяемогоЗаявления", "Отпуск")
        ПоставляемыеДанные.Вставить("ДанныеДокументаЗаСвойСчет", ДанныеАннулируемогоЗаявления.ЗаСвойСчет)
    ;
;
