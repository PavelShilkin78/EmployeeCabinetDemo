импорт ВебApi
импорт Компания
импорт КонтрольДоступа

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемыйМассив<РазрешениеДоступа>
    возврат КонтрольДоступа.РазрешенияДоступаТаблицыСФизическимЛицомСПравомУдаления()
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ЗаявлениеНаКомпенсациюОтпускаДниКомпенсации.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ЗаявлениеНаКомпенсациюОтпускаДниКомпенсации.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ЗаявлениеНаКомпенсациюОтпускаДниКомпенсации.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        Разрешения.Вставить(Элемент, КонтрольДоступа.РазрешенияДоступаОбъекта(Элемент.Владелец))
    ;
    возврат Разрешения
;

//КонецОбласти

@ВПодсистеме
метод ДниКомпенсацииЗаявления(Владелец: ЗаявлениеНаКомпенсациюОтпуска.Ссылка?): ПериодыОтпуска
    знч ПериодыОтпуска: ПериодыОтпуска
    ПериодыОтпуска.Владелец = Владелец
    если Владелец == Неопределено
        возврат ПериодыОтпуска
    ;
    знч ДниКомпенсации = ДанныеДнейКомпенсации([Владелец])
    если ДниКомпенсации.СодержитКлюч(Владелец)
        ПериодыОтпуска.Периоды = ДниКомпенсации[Владелец]
    ;
    возврат ПериодыОтпуска
;

@ВПодсистеме
метод ДанныеДнейКомпенсации(ЗаявленияСсылки: ЧитаемаяКоллекция<ЗаявлениеНаКомпенсациюОтпуска.Ссылка>): ЧитаемоеСоответствие<ЗаявлениеНаКомпенсациюОтпуска.Ссылка, Массив<ПериодыОтпускаСтрока>>

    знч Данные: Соответствие<ЗаявлениеНаКомпенсациюОтпуска.Ссылка, Массив<ПериодыОтпускаСтрока>>
    знч Запрос = Запрос{
        Выбрать
            Владелец,
            РабочееМесто,
            ВидОтпуска,
            КоличествоДнейКомпенсации
        Из
            ЗаявлениеНаКомпенсациюОтпускаДниКомпенсации
        Где
            Владелец В (%ЗаявленияСсылки)}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        если не Данные.СодержитКлюч(РезультатСтрока.Владелец)
            Данные.Вставить(РезультатСтрока.Владелец, новый Массив<ПериодыОтпускаСтрока>())
        ;
        знч НовыеДанные = новый ПериодыОтпускаСтрока()
        НовыеДанные.РабочееМесто = РезультатСтрока.РабочееМесто
        НовыеДанные.ВидОтпуска = РезультатСтрока.ВидОтпуска
        НовыеДанные.КомпенсацияОтпуска = Истина
        НовыеДанные.КоличествоДнейКомпенсации = РезультатСтрока.КоличествоДнейКомпенсации
        Данные[РезультатСтрока.Владелец].Добавить(НовыеДанные)
    ;
    возврат Данные
;

@ВПодсистеме
метод ЗаписатьДниКомпенсацииЗаявления(ПериодыОтпуска: ПериодыОтпуска)
    если ПериодыОтпуска.Владелец == Неопределено
        возврат
    ;
    знч Запрос = Запрос{
        Выбрать
            Ссылка
        Из
            ЗаявлениеНаКомпенсациюОтпускаДниКомпенсации
        Где
            Владелец == %{ПериодыОтпуска.Владелец}}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        РезультатСтрока.Ссылка.ЗагрузитьОбъект()?.Удалить()
    ;
    для ПериодОтпуска из ПериодыОтпуска.Периоды
        знч ДниКомпенсацииЗаявления: ЗаявлениеНаКомпенсациюОтпускаДниКомпенсации.Объект
        ДниКомпенсацииЗаявления.Владелец = ПериодыОтпуска.Владелец как ЗаявлениеНаКомпенсациюОтпуска.Ссылка
        ДниКомпенсацииЗаявления.РабочееМесто = ПериодОтпуска.РабочееМесто
        ДниКомпенсацииЗаявления.ВидОтпуска = ПериодОтпуска.ВидОтпуска
        ДниКомпенсацииЗаявления.КоличествоДнейКомпенсации = ПериодОтпуска.КоличествоДнейКомпенсации
        ДниКомпенсацииЗаявления.Записать()
    ;
;

@ВПроекте
структура ДниКомпенсацииЗаявления
    @JsonСвойство(Имя = "vacationTypeID")
    пер ВидОтпуска: Строка
    @JsonСвойство(Имя = "leaveEncashmentDays")
    пер КоличествоДнейКомпенсации: Число
;

@ВПодсистеме
метод ДанныеДнейКомпенсацииВJson(
        ДанныеДнейКомпенсацииОтпусков: ЧитаемыйМассив<ПериодыОтпускаСтрока>?,
        Сервисы: ВебApiСервер.СервисыУпаковкиJson,
        Сотрудник: Сотрудники.Ссылка? = Неопределено): ЧитаемыйМассив<ДниКомпенсацииЗаявления>?

    если ДанныеДнейКомпенсацииОтпусков == Неопределено
        возврат Неопределено
    ;
    пер ДанныеJson: Массив<ДниКомпенсацииЗаявления>
    для ДанныеДнейКомпенсацииОтпуска из ДанныеДнейКомпенсацииОтпусков
        если Сотрудник == Неопределено или ДанныеДнейКомпенсацииОтпуска.РабочееМесто == Сотрудник
            ДанныеJson.Добавить(ДанныеДнейКомпенсацииОтпускаВJson(ДанныеДнейКомпенсацииОтпуска, Сервисы))
        ;
    ;
    если ДанныеJson.Пусто()
        возврат Неопределено
    ;
    возврат ДанныеJson
;

метод ДанныеДнейКомпенсацииОтпускаВJson(
        ДанныеДнейКомпенсацииОтпуска: ПериодыОтпускаСтрока, 
        Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДниКомпенсацииЗаявления
        
    знч ДанныеJson = новый ДниКомпенсацииЗаявления()
    если ДанныеДнейКомпенсацииОтпуска.ВидОтпуска != Неопределено
        ДанныеJson.ВидОтпуска = Сервисы.ПолучитьИдентификатор(ДанныеДнейКомпенсацииОтпуска.ВидОтпуска)
    ;
    ДанныеJson.КоличествоДнейКомпенсации = ДанныеДнейКомпенсацииОтпуска.КоличествоДнейКомпенсации
    возврат ДанныеJson
;