импорт ВебApi
импорт Компания
импорт КонтрольДоступа
импорт ФизическиеЛица

//КонтрольДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ЧтениеАутентифицированным(этот),
            КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот)]     
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ОстаткиОтпусков.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ОстаткиОтпусков.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ОстаткиОтпусков.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПерсонально([Элемент.ФизическоеЛицо]))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПоПолномочиям(
            [Отпуск.ПолномочиеПросмотрОтпусков()],
            [Элемент.ФизическоеЛицо]
        ))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

//КонтрольДоступа

@ВПроекте
структура ОстаткиОтпусковФизлица
    @JsonСвойство(Имя = "personID")
    обз знч Физлицо: Строка
    @JsonСвойство(Имя = "components")
    обз знч ОстаткиОтпусков: ЧитаемыйМассив<ОстатокОтпускаСотрудникаJson>?
;

@ВПодсистеме
структура ОстатокОтпускаСотрудникаJson
    @JsonСвойство(Имя = "employeeID")
    обз знч Сотрудник: Строка
    @JsonСвойство(Имя = "vacationTypeID")
    обз знч ВидОтпуска: Строка
    @JsonСвойство(Имя = "daysNotUsed")
    обз знч НеИспользованоДней: Число
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<ОстаткиОтпусковФизлица>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<ОстаткиОтпусковФизлица>
    ;
;

@ВПроекте
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Массив<ОстаткиОтпусковФизлица>>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Массив<ОстаткиОтпусковФизлица>>
    ;
;

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "vacationUnusedDaysCurrent"
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(ОстаткиОтпусковФизлица: ОстаткиОтпусковФизлица, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    знч СтрокиДанных: Массив<ОстаткиОтпусков.Объект>
    знч ФизическоеЛицо = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ОстаткиОтпусковФизлица.Физлицо)) как ФизическиеЛица.Ссылка
    знч Ключ: Соответствие<Строка, Объект>
    Ключ.Вставить("ФизическоеЛицо", ФизическоеЛицо)
    для СтрокаСотрудника из ОстаткиОтпусковФизлица.ОстаткиОтпусков
        знч ОстаткиОтпусковОбъект: ОстаткиОтпусков.Объект = новый ОстаткиОтпусков.Объект()
        ОстаткиОтпусковОбъект.ФизическоеЛицо = ФизическоеЛицо
        ОстаткиОтпусковОбъект.РабочееМесто = Сервисы.ПолучитьСсылку(Сотрудники.ВнешняяСсылка(СтрокаСотрудника.Сотрудник)) как Сотрудники.Ссылка
        ОстаткиОтпусковОбъект.ВидОтпуска = Сервисы.ПолучитьСсылку(ВидыОтпусков.ВнешняяСсылка(СтрокаСотрудника.ВидОтпуска)) как ВидыОтпусков.Ссылка
        ОстаткиОтпусковОбъект.ОстатокОтпуска = СтрокаСотрудника.НеИспользованоДней
        СтрокиДанных.Добавить(ОстаткиОтпусковОбъект)
    ;
    Сервисы.ЗаписатьКоллекцию(СтрокиДанных, Ключ, Тип<ОстаткиОтпусков.Ссылка>, Сервисы.ИнструментыМенеджераОбъекта)
;

@ВПодсистеме
метод УдалитьОбъекты(ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>, Сервисы: ВебApiСервер.СервисыУдаленияОбъектов)
    знч Ключ = {
        "ФизическоеЛицо": Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ПараметрыЗапроса["personID"] как Строка))
    }
    Сервисы.УдалитьКоллекцию(Ключ, Тип<ОстаткиОтпусков.Ссылка>)
;

@ВПодсистеме
метод ДанныеОстатковОтпусков(ФизическоеЛицо: ФизическиеЛица.Ссылка): ЧитаемоеСоответствие<Сотрудники.Ссылка, Массив<Отпуск.ОстаткиПоВидамОтпусков>>
    пер ДанныеОстатков: Соответствие<Сотрудники.Ссылка, Массив<Отпуск.ОстаткиПоВидамОтпусков>>
    знч Запрос = Запрос{
        Выбрать 
            ОстаткиОтпусков.РабочееМесто,
            ОстаткиОтпусков.ВидОтпуска,
            ОстаткиОтпусков.ОстатокОтпуска
        Из
            ОстаткиОтпусков Как ОстаткиОтпусков
            Внутреннее Соединение ВидыОтпусков Как ВидыОтпусков
                По ОстаткиОтпусков.ВидОтпуска == ВидыОтпусков.Ссылка
                    И ОстаткиОтпусков.ФизическоеЛицо == %ФизическоеЛицо
        Упорядочить По
            ОстаткиОтпусков.РабочееМесто,
            ВидыОтпусков.Основной Убыв,
            ОстаткиОтпусков.ВидОтпуска}
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        пер ОстаткиПоВидуОтпуска: Отпуск.ОстаткиПоВидамОтпусков
        ОстаткиПоВидуОтпуска.ВидОтпуска = РезультатСтрока.ВидОтпуска
        ОстаткиПоВидуОтпуска.ОстатокОтпуска = РезультатСтрока.ОстатокОтпуска
        пер ДанныеОстатковСотрудника: Массив<Отпуск.ОстаткиПоВидамОтпусков>
        если ДанныеОстатков.СодержитКлюч(РезультатСтрока.РабочееМесто)
            ДанныеОстатковСотрудника = ДанныеОстатков.Получить(РезультатСтрока.РабочееМесто)
        ;
        ДанныеОстатковСотрудника.Добавить(ОстаткиПоВидуОтпуска)
        ДанныеОстатков.Вставить(РезультатСтрока.РабочееМесто, ДанныеОстатковСотрудника)
    ;
    возврат ДанныеОстатков
;