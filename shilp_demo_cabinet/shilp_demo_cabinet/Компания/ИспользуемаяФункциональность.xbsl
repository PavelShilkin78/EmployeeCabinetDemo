импорт КонтрольДоступа

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат КонтрольДоступа.РегистрСведенийРедактированиеАдминистратору()
;

//КонецОбласти

@ВПодсистеме
метод ФункциональныеОпции(): Компания.ФункциональныеОпции
    пер ФункциональныеОпции: Компания.ФункциональныеОпции
    знч Запрос = Запрос{
        Выбрать 
            Функциональность, 
            Использование
        Из ИспользуемаяФункциональность}
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        УстановитьЗначение(ФункциональныеОпции, РезультатСтрока.Функциональность, РезультатСтрока.Использование)
    ;
    возврат ФункциональныеОпции
;

@ВПодсистеме
метод ЗаписатьФункциональныеОпции(ФункциональныеОпции: Компания.ФункциональныеОпции) 
    ЗаписатьЗначение(Функциональность.ИнформацияОКомпании, ФункциональныеОпции.ИнформацияОКомпании)
    ЗаписатьЗначение(Функциональность.ИспользоватьРабочиеГруппы, ФункциональныеОпции.ИспользоватьРабочиеГруппы)
    ЗаписатьЗначение(Функциональность.РасширенныеРолиСогласующих, ФункциональныеОпции.РасширенныеРолиСогласующих)  
    ЗаписатьЗначение(Функциональность.ДоступнаНастройкаПравилСогласования, ФункциональныеОпции.ДоступнаНастройкаПравилСогласования)  
;

метод УстановитьЗначение(ФункциональныеОпции: Компания.ФункциональныеОпции, Функциональность: Функциональность, Значение: Булево)
    выбор Функциональность
    когда ИспользоватьРабочиеГруппы
        ФункциональныеОпции.ИспользоватьРабочиеГруппы = Значение
    когда РасширенныеРолиСогласующих
        ФункциональныеОпции.РасширенныеРолиСогласующих = Значение
    когда ДоступнаНастройкаПравилСогласования
        ФункциональныеОпции.ДоступнаНастройкаПравилСогласования = Значение
    когда ИнформацияОКомпании
        ФункциональныеОпции.ИнформацияОКомпании = Значение
    ;
;

метод ЗаписатьЗначение(ФункциональнаяОпция: Функциональность, Значение: Булево?)
    если Значение == Неопределено
        возврат
    ;
    знч НаборЗаписей = новый ИспользуемаяФункциональность.НаборЗаписей()
    НаборЗаписей.Фильтр.Функциональность.Установить(ФункциональнаяОпция)
    если ФункциональнаяОпция == Функциональность.РасширенныеРолиСогласующих и Значение == Истина
        НаборЗаписей.Прочитать()
        если не НаборЗаписей.Пусто()
            если НаборЗаписей[0].Использование != Значение 
                ПравилаСогласования.ЗарегистрироватьВсеПравила()    
            ;
            НаборЗаписей.Очистить()
        иначе
            ПравилаСогласования.ЗарегистрироватьВсеПравила()    
        ;    
    ;
    НаборЗаписей.ДобавитьЗапись(
        Функциональность = ФункциональнаяОпция,
        Использование = Значение
    )
    НаборЗаписей.Записать()
    
    выбор ФункциональнаяОпция
    когда Функциональность.РасширенныеРолиСогласующих
        РолиПодписантов.ИзменитьИспользуемостьРолиПодписанта(
            Согласования.РольПодписантаВышестоящийРуководитель(),
            Значение
        )
    когда Функциональность.ИспользоватьРабочиеГруппы
        РолиПодписантов.ИзменитьИспользуемостьРолиПодписанта(
            Согласования.РольПодписантаНеформальныйРуководитель(),
            Значение
        )
    ;
;