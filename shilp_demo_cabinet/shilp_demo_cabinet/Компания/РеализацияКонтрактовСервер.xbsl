импорт ОбщиеСтандартные
импорт СтандартноеПриложение
импорт ФизическиеЛица
импорт КонтрольДоступа
импорт Обсуждения
импорт ОбменДанными
импорт ВебApi
импорт УниверсальныеМеханизмы
импорт Криптография
импорт УниверсальныеМеханизмы::ШаблоныДокументов
импорт КлиентСервисаПодписания

//Контракт ОбменДаннымиТипыDtoОбъектовСервис

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеТипыDtoОбъектов()
    Компания.ДобавитьТипDtoОбъекта()
;

//Конец ОбменДаннымиТипыDtoОбъектовСервис

// Контракт ПараметрыСеансаПоставщик

@ВПроекте
@Реализация
метод КоллекцияПараметровСеанса(МобильныйИнтерфейс: Булево): Соответствие<Строка, Объект>
    пер ПараметрыСеанса = новый Компания.ПараметрыСеанса()

    ПараметрыСеанса.ФункциональныеОпции = ИспользуемаяФункциональность.ФункциональныеОпции()
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка? = ПользователиСистемы.ТекущееФизическоеЛицо()
    если ФизическоеЛицо != Неопределено
        ПараметрыСеанса.ПодразделенияРуководителя = новый Массив<СтруктураПредприятия.Ссылка>()
        ПараметрыСеанса.ПодразделенияРуководителя.ДобавитьВсе(ОрганизационнаяСтруктура.ПодразделенияРуководителя(ФизическоеЛицо))
        ПараметрыСеанса.ТекущийПользовательРуководитель = не ПараметрыСеанса.ПодразделенияРуководителя.Пусто()
        ПараметрыСеанса.РуководительТекущегоПользователя = ОрганизационнаяСтруктура.НепосредственныйРуководительФизическогоЛица(ФизическоеЛицо)  
        ПараметрыСеанса.ТекущийПользовательСотрудник = не Сотрудники.СотрудникиФизическогоЛица(ФизическоеЛицо).Пусто()
    ;
    возврат {Компания.КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: ПараметрыСеанса}
;
// Конец ПараметрыСеансаПоставщик

// Контракт ПодсистемаПриложения

@ВПроекте
@Реализация
метод ОписаниеПодсистемы(): СтандартноеПриложение.ОписаниеПодсистемы
    возврат новый СтандартноеПриложение.ОписаниеПодсистемы(
        Компания.ИД_ПОДСИСТЕМЫ,
        {
            КонтрольДоступа.ИД_ПОДСИСТЕМЫ, 
            ФизЛица.ИД_ПОДСИСТЕМЫ,
            ОбменДанными.ИД_ПОДСИСТЕМЫ,
            Обсуждения.ИД_ПОДСИСТЕМЫ,
            Криптография.ИД_ПОДСИСТЕМЫ,
            УниверсальныеМеханизмы.ИД_ПОДСИСТЕМЫ
        }
    )
;

// Конец ПодсистемаПриложения

// Контракт ОбновляемаяПодсистема

@ВПроекте
@Реализация
метод ОбработчикиЗаполнения(): Массив<СтандартноеПриложение.ОписаниеОбработчикаЗаполнения>
    возврат [новый СтандартноеПриложение.ОписаниеОбработчикаЗаполнения(
                Компания.ИД_ПОДСИСТЕМЫ, 
                "КатегорииДолжностиПровестиПервоначальноеЗаполнение", 
                &КатегорииДолжности.ПровестиПервоначальноеЗаполнение())]
;

@ВПроекте
@Реализация
метод ОбработчикиОбновления(): Массив<СтандартноеПриложение.ОписаниеОбработчикаОбновления>
    пер Обработчики: Массив<СтандартноеПриложение.ОписаниеОбработчикаОбновления>
    пер Сервис = КомпанияПоставщикВерсииПриложения.ПолучитьСервис()
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаОбновления(
                Компания.ИД_ПОДСИСТЕМЫ, 
                "КатегорииДолжностиПровестиПервоначальноеЗаполнение", 
                &КатегорииДолжности.ПровестиПервоначальноеЗаполнение(), 
                Сервис.КатегорииДолжностиПровестиПервоначальноеЗаполнение()))
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаОбновления(
                Компания.ИД_ПОДСИСТЕМЫ, 
                "ПодразделенияИСотрудникиЗаполнитьРодителей", 
                &ПодразделенияИСотрудники.ЗаполнитьРодителей(), 
                Сервис.ПодразделенияИСотрудникиЗаполнитьРодителей()))
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаОбновления(
                Компания.ИД_ПОДСИСТЕМЫ, 
                "ПодразделенияИСотрудникиЗаполнитьМиниатюры", 
                &ПодразделенияИСотрудники.ЗаполнитьМиниатюры(),
                Сервис.ПодразделенияИСотрудникиЗаполнитьМиниатюры()))
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаОбновления(
                Компания.ИД_ПОДСИСТЕМЫ, 
                "СтруктураПредприятияОбновитьДанныеПодразделений", 
                &СтруктураПредприятия.ОбновитьДанныеПодразделений(),
                Сервис.СтруктураПредприятияОбновитьДанныеПодразделений()))
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаОбновления(
                Компания.ИД_ПОДСИСТЕМЫ, 
                "КомпанияОбновитьРольРуководителя", 
                &Компания.ДобавитьРольРуководительПодразделения, 
                Версия{8.1.1.15}))
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаОбновления(
                Компания.ИД_ПОДСИСТЕМЫ,        
                "СтруктураПредприятияЗаполнитьНаименованиеСИерерхией", 
                &СтруктураПредприятия.ОбновитьНаименованиеСИерархией(),
                Сервис.СтруктураПредприятияОбновитьНаименованиеСИерархией()))
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаОбновления(
                Компания.ИД_ПОДСИСТЕМЫ,
                "СтруктураПредприятияОбновитьГруппыДоступаПодразделений", 
                &СтруктураПредприятия.ОбновитьГруппыДоступаПодразделений(),
                Сервис.СтруктураПредприятияОбновитьГруппыДоступаПодразделений()))
    
    возврат Обработчики
;

// Конец ОбновляемаяПодсистема

//Контракт ПредметыОбсужденияПоставщик

@ВПроекте
@Реализация
метод СтруктураСохраненияОбсуждения(ПредметОбсуждения: ПредметОбсуждения.Ссылка?, ТекстСообщения: Строка, ТемаОбсуждения: Строка): Обсуждения.СтруктураСохраненияОбсуждения?
    пер СтруктураСохраненияОбсуждения: Обсуждения.СтруктураСохраненияОбсуждения
    
    если ПредметОбсуждения == Неопределено
        знч АвторОбсуждения = ПользователиСистемы.ТекущееФизическоеЛицо()
        СтруктураСохраненияОбсуждения.Тема = МенеджерСущности.ПредставлениеСсылки(АвторОбсуждения) + " " + ТемаОбсуждения
        СтруктураСохраненияОбсуждения.Представление = ТемаОбсуждения
        СтруктураСохраненияОбсуждения.Участники = Обсуждения.УчастникиРаспределяемыхОбсуждений()
        СтруктураСохраненияОбсуждения.УчастникиСохраняемые.Добавить(АвторОбсуждения)
        СтруктураСохраненияОбсуждения.ТекстСообщения = ТекстСообщения
        СтруктураСохраненияОбсуждения.ПредметОбсуждения = ПредметОбсуждения
        СтруктураСохраненияОбсуждения.АвторОбсуждения = АвторОбсуждения
        СтруктураСохраненияОбсуждения.Видимость = Ложь
        СтруктураСохраненияОбсуждения.ДопДанные = СериализацияJson.ЗаписатьОбъект(КонтекстОбсужденияБеспредметный(АвторОбсуждения))
        СтруктураСохраненияОбсуждения.Ключ = новый Ууид().ВСтроку()
        возврат СтруктураСохраненияОбсуждения
    иначе
        возврат Неопределено
    ;
;

//Конец ПредметыОбсужденияПоставщик

// Контракт ПользователиВладельцевКабинетовОбрабочикСобытий

@ВПроекте
@Реализация
метод ПользователиВладельцевКабинетовПослеЗаписи(ФизическиеЛица: ЧитаемаяКоллекция<ФизическиеЛица.Ссылка>)
    если ФизическиеЛица.Пусто()
        возврат
    ;
    знч ПодразделенияКОбновлению: Множество<СтруктураПредприятия.Ссылка>
    для ФизическоеЛицо из ФизическиеЛица
        ПодразделенияКОбновлению.ДобавитьВсе(ОрганизационнаяСтруктура.ПодразделенияРуководителя(ФизическоеЛицо))
    ;    
    СтруктураПредприятия.ОбновитьГруппыДоступаПодразделений(ПодразделенияКОбновлению)
    Согласования.ОбновитьГруппыДоступаСогласующих(ФизическиеЛица)
;

// Конец ПользователиВладельцевКабинетовОбрабочикСобытий

// Контракт СтатистикаПоставщик

@ВПроекте
@Реализация
метод СтатистикаСправочников(): Массив<СтатистикаДанных.Справочник>
    знч СправочникиСтатистика: Массив<СтатистикаДанных.Справочник>
    СправочникиСтатистика.Добавить(СтатистикаДанных.СтатистикаПоСправочнику(Тип<Организации.Ссылка>))
    СправочникиСтатистика.Добавить(СтатистикаДанных.СтатистикаПоСправочнику(Тип<СтруктураПредприятия.Ссылка>))
    СправочникиСтатистика.Добавить(СтатистикаДанных.СтатистикаПоСправочнику(Тип<Должности.Ссылка>))
    СправочникиСтатистика.Добавить(СтатистикаДанных.СтатистикаПоСправочнику(Тип<ШтатноеРасписание.Ссылка>))
    СправочникиСтатистика.Добавить(СтатистикаДанных.СтатистикаПоСправочнику(Тип<ГрафикиРаботы.Ссылка>))
    возврат СправочникиСтатистика
;

@ВПроекте
@Реализация
метод СтатистикаДокументов(): Массив<СтатистикаДанных.Документ>
    возврат []
;

// Конец СтатистикаПоставщик

// Контракт ФизическиеЛицаОбработчикСобытий

@ВПроекте
@Реализация
метод ПередУдалениемФизлица(ФизическоеЛицо: ФизическиеЛица.Ссылка)
    // УдалитьСотрудников
    знч Запрос = Запрос{
        Выбрать
            КомпанияСотрудники.Ссылка Как Ссылка
        Из
            Сотрудники Как КомпанияСотрудники
        Где
            КомпанияСотрудники.ФизическоеЛицо == %ФизическоеЛицо}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        пер СотрудникОбъект = РезультатСтрока.Ссылка.ЗагрузитьОбъект()
        если СотрудникОбъект != Неопределено
            СотрудникОбъект.Удалить()
        ;
    ;
;
    
@ВПроекте
@Реализация
метод ПослеЗаписиФизлицПриЗагрузке(Физлица: ЧитаемыйМассив<ФизическиеЛица.Ссылка>)
    ПодразделенияИСотрудники.ОбновитьДанныеФизическихЛиц(Физлица)
;

@ВПроекте
@Реализация
метод ПослеДеактивацииФизлица(Физлица: Массив<ФизическиеЛица.Ссылка>)
    Компания.УдалитьДанныеФизическихЛиц(Физлица)
;

@ВПроекте
@Реализация
метод ПослеЗаписиГруппыОбъектов(ФизическоеЛицо: ФизическиеЛица.Ссылка, Отправитель: ВходящиеДанные.Ссылка)
;

// Конец ФизическиеЛицаОбработчикСобытий

//Контракт ДанныеApi
@ВПроекте
@Реализация
метод МассивТипов(Получатель: ВидПриложения?, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>
    возврат Типы
;

@ВПроекте
@Реализация
метод ТипДанныхJson(ТипОбъекта: Тип, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>
    выбор ТипОбъекта
    когда Тип<ГрафикиРаботы.Ссылка>
        Типы.Добавить(ГрафикиРаботы.ТипДанныхJson(ВерсияФорматаОбмена))
    когда Тип<ДанныеГрафиковРаботы.Ссылка>
        Типы.Добавить(ДанныеГрафиковРаботы.ТипДанныхJson(ВерсияФорматаОбмена))
    когда Тип<Должности.Ссылка>
        Типы.Добавить(Должности.ТипДанныхJson(ВерсияФорматаОбмена))
    когда Тип<Организации.Ссылка>
        Типы.Добавить(Организации.ТипДанныхJson(ВерсияФорматаОбмена))
    когда Тип<ПраздничныеДни.Ссылка>
        Типы.Добавить(ПраздничныеДни.ТипДанныхJson(ВерсияФорматаОбмена))
    когда Тип<Сотрудники.Ссылка>
        Типы.Добавить(Сотрудники.ТипДанныхJson(ВерсияФорматаОбмена))
    когда Тип<СтруктураПредприятия.Ссылка>
        Типы.Добавить(СтруктураПредприятия.ТипДанныхJson(ВерсияФорматаОбмена))
    когда Тип<ШтатноеРасписание.Ссылка>
        Типы.Добавить(ШтатноеРасписание.ТипДанныхJson(ВерсияФорматаОбмена))
    когда Тип<ОписаниеРаботодателя.Ссылка>
        Типы.Добавить(ОписаниеРаботодателя.ТипДанныхJson(ВерсияФорматаОбмена))
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод ТипКоллекцииДанныхJson(ТипОбъекта: Тип, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>
    выбор ТипОбъекта
    когда Тип<ГрафикиРаботы.Ссылка>
        Типы.Добавить(ГрафикиРаботы.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    когда Тип<ДанныеГрафиковРаботы.Ссылка>
        Типы.Добавить(ДанныеГрафиковРаботы.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    когда Тип<Должности.Ссылка>
        Типы.Добавить(Должности.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    когда Тип<Организации.Ссылка>
        Типы.Добавить(Организации.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    когда Тип<ПраздничныеДни.Ссылка>
        Типы.Добавить(ПраздничныеДни.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    когда Тип<Сотрудники.Ссылка>
        Типы.Добавить(Сотрудники.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    когда Тип<СтруктураПредприятия.Ссылка>
        Типы.Добавить(СтруктураПредприятия.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    когда Тип<ШтатноеРасписание.Ссылка>
        Типы.Добавить(ШтатноеРасписание.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод ИнструментыМенеджераОбъекта(ТипОбъекта: Тип): Массив<ВебApiСервер.ИнструментыМенеджераОбъекта>
    пер НаборИнструментыМенеджераОбъекта: Массив<ВебApiСервер.ИнструментыМенеджераОбъекта>
    пер ИнструментыМенеджераОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта
    выбор ТипОбъекта
    когда Тип<ГрафикиРаботы.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как ГрафикиРаботы.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    когда Тип<ДанныеГрафиковРаботы.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как ДанныеГрафиковРаботы.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    когда Тип<Должности.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как Должности.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    когда Тип<Организации.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как Организации.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    когда Тип<ПраздничныеДни.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как ПраздничныеДни.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    когда Тип<Сотрудники.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как Сотрудники.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    когда Тип<СтруктураПредприятия.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как СтруктураПредприятия.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    когда Тип<ШтатноеРасписание.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как ШтатноеРасписание.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    ;
    возврат НаборИнструментыМенеджераОбъекта
;

@ВПроекте
@Реализация
метод ПолучитьДанныеJson(ТипОбъекта: Тип, Ссылка: ВходящиеДанные.Ссылка|ИсходящиеДанные.Ссылка, 
        Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<Объект?>
    
    пер ДанныеJson: Массив<Объект?>
    возврат ДанныеJson
;

@ВПроекте
@Реализация
метод МассивСсылокПоФильтру(ТипОбъекта: Тип, Фильтр: () -> ЧитаемыйМассив<Справочник.Ссылка>): Массив<ЧитаемыйМассив<Справочник.Ссылка>>
    пер МассивСсылок: Массив<ЧитаемыйМассив<Справочник.Ссылка>>
    возврат МассивСсылок
;

@ВПроекте
@Реализация
метод УдалитьОбъекты(ТипОбъекта: Тип, ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>, Сервисы: ВебApiСервер.СервисыУдаленияОбъектов)
    выбор ТипОбъекта
    когда Тип<ДанныеГрафиковРаботы.Ссылка>
        ДанныеГрафиковРаботы.УдалитьОбъекты(ПараметрыЗапроса, Сервисы)
    когда Тип<ПраздничныеДни.Ссылка>
        ПраздничныеДни.УдалитьОбъекты(ПараметрыЗапроса, Сервисы)
    ;
;

@ВПроекте
@Реализация
метод ТипОбъектаJson(ТипОбъекта: Тип): Массив<Строка>
    пер ТипОбъектаJson: Массив<Строка>
    выбор ТипОбъекта
    когда Тип<ГрафикиРаботы.Ссылка>
        ТипОбъектаJson.Добавить(ГрафикиРаботы.ТипОбъектаJson())
    когда Тип<ДанныеГрафиковРаботы.Ссылка>
        ТипОбъектаJson.Добавить(ДанныеГрафиковРаботы.ТипОбъектаJson())
    когда Тип<Должности.Ссылка>
        ТипОбъектаJson.Добавить(Должности.ТипОбъектаJson())
    когда Тип<Организации.Ссылка>
        ТипОбъектаJson.Добавить(Организации.ТипОбъектаJson())
    когда Тип<ОплатаТрудаСотрудников.Ссылка>
        ТипОбъектаJson.Добавить(ОплатаТрудаСотрудников.ТипОбъектаJson())
    когда Тип<ПраздничныеДни.Ссылка>
        ТипОбъектаJson.Добавить(ПраздничныеДни.ТипОбъектаJson())
    когда Тип<Сотрудники.Ссылка>
        ТипОбъектаJson.Добавить(Сотрудники.ТипОбъектаJson())
    когда Тип<СтруктураПредприятия.Ссылка>
        ТипОбъектаJson.Добавить(СтруктураПредприятия.ТипОбъектаJson())
    когда Тип<ШтатноеРасписание.Ссылка>
        ТипОбъектаJson.Добавить(ШтатноеРасписание.ТипОбъектаJson())
    когда Тип<ОписаниеРаботодателя.Ссылка>
        ТипОбъектаJson.Добавить(ОписаниеРаботодателя.ТипОбъектаJson())
    ;
    возврат ТипОбъектаJson
;

@ВПроекте
@Реализация
метод ЗагрузитьОбъектИзJson(ТипОбъекта: Тип, ТипДанных: Тип, ДанныеJson: Объект?, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    выбор ТипОбъекта
    когда Тип<ГрафикиРаботы.Ссылка>
        выбор ТипДанных
        когда Тип<ГрафикиРаботы.ДанныеJson>
            ГрафикиРаботы.ЗагрузитьОбъектИзJson(ДанныеJson как ГрафикиРаботы.ДанныеJson, Сервисы)
        ;
    когда Тип<ДанныеГрафиковРаботы.Ссылка>
        выбор ТипДанных
        когда Тип<ДанныеГрафиковРаботы.ДанныеJson>
            ДанныеГрафиковРаботы.ЗагрузитьОбъектИзJson(ДанныеJson как ДанныеГрафиковРаботы.ДанныеJson, Сервисы)
        ;
    когда Тип<Должности.Ссылка>
        выбор ТипДанных
        когда Тип<Должности.ДанныеJson>
            Должности.ЗагрузитьОбъектИзJson(ДанныеJson как Должности.ДанныеJson, Сервисы)
        когда Тип<Должности.ДанныеJson_V2_0>
            Должности.ЗагрузитьОбъектИзJson(ДанныеJson как Должности.ДанныеJson_V2_0, Сервисы)
        ;
    когда Тип<Организации.Ссылка>
        выбор ТипДанных
        когда Тип<Организации.ДанныеJson>
            Организации.ЗагрузитьОбъектИзJson(ДанныеJson как Организации.ДанныеJson, Сервисы)
        когда Тип<Организации.ДанныеJson_V2_0>
            Организации.ЗагрузитьОбъектИзJson(ДанныеJson как Организации.ДанныеJson_V2_0, Сервисы)
        когда Тип<Организации.ДанныеJson_V2_2>
            Организации.ЗагрузитьОбъектИзJson(ДанныеJson как Организации.ДанныеJson_V2_2, Сервисы)
        ;
    когда Тип<ПраздничныеДни.Ссылка>
        выбор ТипДанных
        когда Тип<ПраздничныеДни.ДанныеJson>
            ПраздничныеДни.ЗагрузитьОбъектИзJson(ДанныеJson как ПраздничныеДни.ДанныеJson, Сервисы)
        ;
    когда Тип<Сотрудники.Ссылка>
        выбор ТипДанных
        когда Тип<Сотрудники.Сотрудник_1_0>
            Сотрудники.ЗагрузитьОбъектИзJson(ДанныеJson как Сотрудники.Сотрудник_1_0, Сервисы)
        когда Тип<Сотрудники.Сотрудник_3_0>
            Сотрудники.ЗагрузитьОбъектИзJson(ДанныеJson как Сотрудники.Сотрудник_3_0, Сервисы)
        ;
    когда Тип<СтруктураПредприятия.Ссылка>
        выбор ТипДанных
        когда Тип<СтруктураПредприятия.Подразделение_1_0>
            СтруктураПредприятия.ЗагрузитьОбъектИзJson(ДанныеJson как СтруктураПредприятия.Подразделение_1_0, Сервисы)
        когда Тип<СтруктураПредприятия.Подразделение_3_0>
            СтруктураПредприятия.ЗагрузитьОбъектИзJson(ДанныеJson как СтруктураПредприятия.Подразделение_3_0, Сервисы)
        ;
    когда Тип<ШтатноеРасписание.Ссылка>
        выбор ТипДанных
        когда Тип<ШтатноеРасписание.ДанныеJson>
            ШтатноеРасписание.ЗагрузитьОбъектИзJson(ДанныеJson как ШтатноеРасписание.ДанныеJson, Сервисы)
        ;
    когда Тип<ОписаниеРаботодателя.Ссылка>
        выбор ТипДанных
        когда Тип<ОписаниеРаботодателя.ДанныеJson_V2_0>
            ОписаниеРаботодателя.ЗагрузитьОбъектИзJson(ДанныеJson как ОписаниеРаботодателя.ДанныеJson_V2_0, Сервисы)
        когда Тип<ОписаниеРаботодателя.ДанныеJson_V2_1>
            ОписаниеРаботодателя.ЗагрузитьОбъектИзJson(ДанныеJson как ОписаниеРаботодателя.ДанныеJson_V2_1, Сервисы)
        ;
    ;
;

@ВПроекте
@Реализация
метод ПослеЗаписиГруппыОбъектов(ТипОбъекта: Тип, МассивОбъектовОтложенногоОбновления: Массив<ВебApiСервер.ОбъектОтложенногоОбновления>)
    выбор ТипОбъекта
    когда Тип<Сотрудники.Ссылка>
        Сотрудники.ПослеЗаписиГруппыОбъектов(МассивОбъектовОтложенногоОбновления)
    когда Тип<СтруктураПредприятия.Ссылка>
        СтруктураПредприятия.ПослеЗаписиГруппыОбъектов(МассивОбъектовОтложенногоОбновления)
    ;
;

@ВПроекте
@Реализация
метод ИзменитьОбъектИзJson(ТипОбъекта: Тип, ДанныеJson: Объект, Сервисы: ВебApiСервер.СервисыЗагрузкиJson, ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации)
;

@ВПроекте
@Реализация
метод ЗавершитьИзменениеОбъектИзJson(ТипОбъекта: Тип, МассивСсылок: ЧитаемыйМассив<ВходящиеДанные.Ссылка>, ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации)
;

@ВПроекте
@Реализация
метод ГруппаИзмененийВJson(ТипОбъекта: Тип, Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<ЧитаемоеСоответствие<Строка, Массив<Объект?>>>
    
    пер ДанныеJson: Массив<ЧитаемоеСоответствие<Строка, Массив<Объект?>>>
    выбор ТипОбъекта
    когда Тип<ОписаниеРаботодателя.Ссылка>
        ДанныеJson.Добавить(ОписаниеРаботодателя.ГруппаИзмененийВJson(Ссылки, Сервисы, ВерсияФорматаОбмена))
    ;
   возврат ДанныеJson
;

//Конец ДанныеApi

//Контракт ПодписаниеДокументовСервис
@ВПроекте
@Реализация
метод ВидЭлектроннойПодписи(Сотрудник: ФизическиеЛица.Ссылка?): ВидыЭлектронныхПодписей
    
    исп КонтекстДоступа.Привилегированный()
    
    знч Запрос = Запрос{
        Выбрать
            ПодразделенияИСотрудники.ФизическоеЛицо  как ФизическоеЛицо,
            ПравилаЭлектронныхПодписей.ВидЭлектроннойПодписи как ВидЭлектроннойПодписи,
            ПравилаЭлектронныхПодписей.ВариантИспользованияЭлектроннойПодписи как ВариантИспользованияЭлектроннойПодписи,
            3 как Уровень
        Из
            ПравилаЭлектронныхПодписей как ПравилаЭлектронныхПодписей
            Внутреннее соединение Сотрудники как Сотрудники
                Внутреннее соединение ПодразделенияИСотрудники как ПодразделенияИСотрудники
                    По ПодразделенияИСотрудники.ОсновноеМестоРаботы
                    и ПодразделенияИСотрудники.ТипЭлемента == ТипыЭлементовПодразделенийИСотрудников.Сотрудник
                    и ПодразделенияИСотрудники.Объект == Сотрудники.Ссылка
                    и ПодразделенияИСотрудники.ФизическоеЛицо == %Сотрудник
                По Сотрудники.Организация == ПравилаЭлектронныхПодписей.Владелец
        Где
            ПравилаЭлектронныхПодписей.ВариантИспользованияЭлектроннойПодписи == ВариантыИспользованияЭлектроннойПодписи.ПоОрганизации
            
        Объединить все
        
        Выбрать
            ПодразделенияИСотрудники.ФизическоеЛицо  как ФизическоеЛицо,
            ПравилаЭлектронныхПодписей.ВидЭлектроннойПодписи как ВидЭлектроннойПодписи,
            ПравилаЭлектронныхПодписей.ВариантИспользованияЭлектроннойПодписи как ВариантИспользованияЭлектроннойПодписи,
            2 - 1/(ПодчиненностьПодразделений.Уровень + 1) как Уровень
        Из
            ПравилаЭлектронныхПодписей как ПравилаЭлектронныхПодписей
            Внутреннее соединение ПодчиненностьПодразделений как ПодчиненностьПодразделений
                по ПодчиненностьПодразделений.ВышестоящееПодразделение == ПравилаЭлектронныхПодписей.Владелец 
            Внутреннее соединение ПодразделенияИСотрудники как ПодразделенияИСотрудники
                по ПодчиненностьПодразделений.Подразделение == ПодразделенияИСотрудники.Подразделение
                и ПодразделенияИСотрудники.ОсновноеМестоРаботы
                и ПодразделенияИСотрудники.ТипЭлемента == ТипыЭлементовПодразделенийИСотрудников.Сотрудник
        Где
            ПравилаЭлектронныхПодписей.ВариантИспользованияЭлектроннойПодписи == ВариантыИспользованияЭлектроннойПодписи.ПоСтруктурнойЕдинице
            И ПодразделенияИСотрудники.ФизическоеЛицо == %Сотрудник
            
        Объединить все
        
        Выбрать
            ПодразделенияИСотрудники.ФизическоеЛицо  как ФизическоеЛицо,
            ПравилаЭлектронныхПодписей.ВидЭлектроннойПодписи как ВидЭлектроннойПодписи,
            ПравилаЭлектронныхПодписей.ВариантИспользованияЭлектроннойПодписи как ВариантИспользованияЭлектроннойПодписи,
            0 как Уровень
        Из
            ПравилаЭлектронныхПодписей как ПравилаЭлектронныхПодписей
            Внутреннее соединение ПодразделенияИСотрудники как ПодразделенияИСотрудники
                по ПодразделенияИСотрудники.ОсновноеМестоРаботы
                и ПодразделенияИСотрудники.ТипЭлемента == ТипыЭлементовПодразделенийИСотрудников.Сотрудник
                и ПравилаЭлектронныхПодписей.Владелец == ПодразделенияИСотрудники.ФизическоеЛицо
        Где
            ПравилаЭлектронныхПодписей.ВариантИспользованияЭлектроннойПодписи == ВариантыИспользованияЭлектроннойПодписи.ПоСотруднику
            И ПодразделенияИСотрудники.ФизическоеЛицо == %Сотрудник
            
        Упорядочить по
            Уровень
    }
    знч Результат = новый ЧитаемыйМассив(Запрос.Выполнить())
    если Результат.Пусто()
        возврат ВидыЭлектронныхПодписей.УНЭПИнформационнойСистемы
    ;
    возврат Результат[0].ВидЭлектроннойПодписи
;

@ВПроекте
@Реализация
метод ПодписатьДокумент(Документ: ДокументПодписываемыйВСервисеПодписания.Ссылка?, Согласующий: ФизическиеЛица.Ссылка?,
    Подпись: ДвоичныйОбъект.Ссылка?, ИдентификаторЭлектронногоДокумента: Строка)
    
    знч Запрос = Запрос{
        Выбрать
            РольПодписанта
         Из
            СогласованияДокументов
         Где
            Документ == %Документ
            И УчастникСогласования == %Согласующий
            И Результат == РезультатыСогласования.НаСогласовании
            И ИдентификаторЭлектронногоДокумента == %ИдентификаторЭлектронногоДокумента}
                
    знч Результат = новый ЧитаемыйМассив(Запрос.Выполнить())
    если Результат.Пусто()
        выбросить новый Криптография.ИсключениеПодписанныйДокументОтсутствует(
            "Отсутствует запись в сограсованиях документов", Документ как ПодписываемыйДокумент.Ссылка)
    ;
    
    знч ДанныеСогласующего = новый Согласования.ДанныеСогласующего(Согласующий, Результат[0].РольПодписанта)
    СогласованияДокументов.ЗарегистрироватьСогласованиеДокумента(
        Документ = Документ как ПодписываемыйДокумент.Ссылка,
        ДанныеСогласующего = ДанныеСогласующего,
        Подпись = Подпись,
        ИдентификаторЭлектронногоДокумента = ИдентификаторЭлектронногоДокумента)
;

@ВПроекте
@Реализация
метод ОтклонитьДокумент(Документ: ДокументПодписываемыйВСервисеПодписания.Ссылка?, Согласующий: ФизическиеЛица.Ссылка?, Комментарий: Строка)
    знч Запрос = Запрос{
        Выбрать
            РольПодписанта
         Из
            СогласованияДокументов
         Где
            Документ == %Документ
            И УчастникСогласования == %Согласующий
            И Результат == РезультатыСогласования.НаСогласовании}
                
    знч Результат = новый ЧитаемыйМассив(Запрос.Выполнить())
    если Результат.Пусто()
        выбросить новый Криптография.ИсключениеПодписанныйДокументОтсутствует(
            "Отсутствует запись в сограсованиях документов", Документ как ПодписываемыйДокумент.Ссылка)
    ;
    знч ДанныеСогласующего = новый Согласования.ДанныеСогласующего(Согласующий, Результат[0].РольПодписанта)
    
    СогласованияДокументов.ОтклонитьДокумент(Документ как ПодписываемыйДокумент.Ссылка?, ДанныеСогласующего, Комментарий)
;

@ВПроекте
@Реализация
метод ДанныеПодписи(Документ: ДокументПодписываемыйВСервисеПодписания.Ссылка?): ДвоичныйОбъект.Ссылка?
    пер ДанныеПодписи: ДвоичныйОбъект.Ссылка?
    знч ПодписиОрганизации = СогласованияДокументов.ДанныеПодписейДокумента(
        Документ, Неопределено, [Согласования.РольПодписантаОрганизация(), Согласования.РольПодписантаИсполнитель()])
    знч ДанныеПодписиДокумента = ПодписиОрганизации.ПервыйИлиУмолчание()
    если ДанныеПодписиДокумента != Неопределено
        ДанныеПодписи = ДанныеПодписиДокумента.Подпись
    ;
    возврат ДанныеПодписи
;

//Конец ПодписаниеДокументовСервис

//Контракт КонтрольДоступаПоПолномочиямСервис

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеТипыАтрибутов()
    Компания.ДобавитьТипАтрибутаДоступаОрганизации()
    Компания.ДобавитьТипАтрибутаДоступаПодразделения()
;

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеПолномочия()
;

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеРоли()
    Компания.ДобавитьРоли()
;

@ВПроекте
@Реализация
метод СоздатьНаборыОграниченийДоступа()
    СтруктураПредприятия.СоздатьНаборыОграниченийДоступа()
;

@ВПроекте
@Реализация
метод ТипыАтрибутовПоТипамЗначений(): ЧитаемоеСоответствие<Тип, ТипыАтрибутов.Ссылка>
    возврат {
        Тип<Организации.Ссылка>: Компания.ТипАтрибутаДоступаОрганизации(),
        Тип<СтруктураПредприятия.Ссылка>: Компания.ТипАтрибутаДоступаПодразделения()
    }
;

//Конец КонтрольДоступаПоПолномочиямСервис

// Контракт ВторичныеДанные

@ВПроекте
@Реализация
метод Пересчитать()
    Компания.ОбновитьДанныеСотрудников()
    СтруктураПредприятия.ОбновитьГруппыДоступаПодразделений()
    СтруктураПредприятия.ОбновитьНаименованиеСИерархией()
;

// Конец ВторичныеДанные

// Контракт ПоставщикЗначенийДляШаблонов

@ВПроекте
@Реализация
метод ЗначениеСсылкиПоИдентификатору(ИмяТаблицы: Строка, Идентификатор: Строка, Сервисы: ВебApiСервер.СервисыЗагрузкиJson): ЗначениеУсловий.Ссылка?
    выбор ИмяТаблицы
    когда "stafflist-positions"
        возврат (Сервисы как неизвестно).ПолучитьСсылку(ШтатноеРасписание.ВнешняяСсылка(Идентификатор)) как ЗначениеУсловий.Ссылка?
    когда "divisions"
        возврат (Сервисы как неизвестно).ПолучитьСсылку(СтруктураПредприятия.ВнешняяСсылка(Идентификатор)) как ЗначениеУсловий.Ссылка?
    когда "employers"
        возврат (Сервисы как неизвестно).ПолучитьСсылку(Организации.ВнешняяСсылка(Идентификатор)) как ЗначениеУсловий.Ссылка?
    когда "positions"
        возврат (Сервисы как неизвестно).ПолучитьСсылку(Должности.ВнешняяСсылка(Идентификатор)) как ЗначениеУсловий.Ссылка?
    ;
    возврат Неопределено
;

@ВПроекте
@Реализация
метод ЗначениеСсылкиПоИдентификатору(Идентификатор: Строка): Объект?
    выбор 
    когда Идентификатор.НачинаетсяС("stafflist-positions.")
        возврат ШтатноеРасписание.ПолучитьСсылку(новый Ууид(Идентификатор.Заменить("stafflist-positions.", "")))
    когда Идентификатор.НачинаетсяС("employers.")
        возврат Организации.ПолучитьСсылку(новый Ууид(Идентификатор.Заменить("employers.", "")))
    когда Идентификатор.НачинаетсяС("divisions.")
        возврат СтруктураПредприятия.ПолучитьСсылку(новый Ууид(Идентификатор.Заменить("divisions.", "")))
    когда Идентификатор.НачинаетсяС("positions.")
        возврат Должности.ПолучитьСсылку(новый Ууид(Идентификатор.Заменить("positions.", "")))
    ;
    возврат Неопределено
;

@ВПроекте
@Реализация
метод ЗначениеВИерархии(ЗначениеОбъекта: Объект?, ЗначениеИерархии: Объект?): Булево?
    если ЗначениеИерархии это СтруктураПредприятия.Ссылка
        или ЗначениеИерархии это Коллекция<СтруктураПредприятия.Ссылка>
        
        если ЗначениеИерархии это СтруктураПредприятия.Ссылка
            и ЗначениеОбъекта == ЗначениеИерархии
            
            возврат Истина
        иначе если ЗначениеИерархии это Коллекция<СтруктураПредприятия.Ссылка>
            и (ЗначениеИерархии как Коллекция<СтруктураПредприятия.Ссылка>).Содержит(ЗначениеОбъекта как СтруктураПредприятия.Ссылка)
            
            возврат Истина
        ;
        знч ВсяИерархия = ИерархияЗначения(ЗначениеИерархии как СтруктураПредприятия.Ссылка|Массив<СтруктураПредприятия.Ссылка>)
        для Подчиненные из ВсяИерархия
            если ЗначениеОбъекта == Подчиненные.Ключ
                возврат Истина
            иначе
                если ВСписке(ЗначениеОбъекта, Подчиненные.Значение)
                    возврат Истина
                ;
            ;
        ;
        возврат Ложь
    ;
    возврат Неопределено
;

// Конец ПоставщикЗначенийДляШаблонов

// Контракт ПоставщикОбщихДанныхДляПечатныхФорм

@ВПроекте
@Реализация
метод ДополнитьДанныеДокументаОбщимиДанными(ДанныеДокумента: ШаблоныДокументовМенеджер.ДанныеДляШаблонаПечатнойФормы)
    
    пер ФизическоеЛицо = ФизЛица.ФизическоеЛицоДанныхДокумента(ДанныеДокумента, ПользователиСистемы.ТекущееФизическоеЛицо())
    знч ВключаяУволенных = ФизЛица.СотрудникиФизическогоЛицаУволены(ФизическоеЛицо)
    для ДанныеИдентификатора из ДанныеДокумента.ДанныеОбъекта
        
        пер ПоставляемыеДанные = ДанныеИдентификатора.Значение.Данные
        
        пер Организация: Организации.Ссылка?
        пер Сотрудник: Сотрудники.Ссылка?
        
        если ПоставляемыеДанные.СодержитКлюч("Организация")
            и ПоставляемыеДанные.Получить("Организация") это Организации.Ссылка
            
            Организация = ПоставляемыеДанные.Получить("Организация") как Организации.Ссылка
        иначе если ПоставляемыеДанные.СодержитКлюч("ДанныеДокументаОрганизация")
            и ПоставляемыеДанные.Получить("ДанныеДокументаОрганизация") это Организации.Ссылка
            
            Организация = ПоставляемыеДанные.Получить("ДанныеДокументаОрганизация") как Организации.Ссылка
        ;
        если Организация == Неопределено
            Организация = Сотрудники.ОрганизацияФизическогоЛицаПоОсновномуМестуРаботы(
                ФизическоеЛицо = ФизическоеЛицо, ВключаяУволенных = ВключаяУволенных)
        ;
        
        если ПоставляемыеДанные.СодержитКлюч("Сотрудник")
            и ПоставляемыеДанные.Получить("Сотрудник") это Сотрудники.Ссылка
            
            Сотрудник = ПоставляемыеДанные.Получить("Сотрудник") как Сотрудники.Ссылка
        ;
        если Сотрудник == Неопределено и Организация != Неопределено
            Сотрудник = Сотрудники.ОсновнойСотрудникФизическогоЛицаОрганизации(
                ФизическоеЛицо = ФизическоеЛицо, Организация = Организация,  ВключаяУволенных = ВключаяУволенных)
        ;
        
        если Организация это Организации.Ссылка
            ПоставляемыеДанные.Вставить("ОрганизацияОтбор", Организация)
            знч РеквизитыОрганизации = МенеджерСущности.ЗначенияРеквизитовОбъекта(Организация, 
                ["Наименование", "ИНН", "КПП", "ОГРН", "НаименованиеПолное", "НаименованиеСокращенное", "Руководитель", "ДолжностьРуководителя", "ЭтоФилиал"])
            для ЗначениеРеквизита из РеквизитыОрганизации
                ПоставляемыеДанные.Вставить("ДанныеСотрудникаОрганизация%{ЗначениеРеквизита.Ключ}", ЗначениеРеквизита.Значение)
            ;
            если (ПоставляемыеДанные["ДанныеСотрудникаОрганизацияНаименованиеСокращенное"] как Строка).Пусто()
                ПоставляемыеДанные["ДанныеСотрудникаОрганизацияНаименованиеСокращенное"] = ПоставляемыеДанные["ДанныеСотрудникаОрганизацияНаименованиеПолное"]
            ;
            если РеквизитыОрганизации["Руководитель"] != Неопределено
                УниверсальныеМеханизмы.ДобавитьВДанныеДляПечатиПредставленияВПадежах(ПоставляемыеДанные,
                    "ДанныеСотрудникаОрганизацияРуководитель", РеквизитыОрганизации["Руководитель"])
            ;
            если РеквизитыОрганизации["ДолжностьРуководителя"] != Неопределено
                УниверсальныеМеханизмы.ДобавитьВДанныеДляПечатиПредставленияВПадежах(ПоставляемыеДанные,
                    "ДанныеСотрудникаОрганизацияДолжностьРуководителя", РеквизитыОрганизации["ДолжностьРуководителя"])
            ;
        ;
        если не ПоставляемыеДанные.СодержитКлюч("ДанныеСотрудникаОрганизацияДолжностьРуководителя")
            или ПоставляемыеДанные["ДанныеСотрудникаОрганизацияДолжностьРуководителя"] == Неопределено
            
            ПоставляемыеДанные.Вставить("ДанныеСотрудникаОрганизацияДолжностьРуководителя", "Руководитель")
            ПоставляемыеДанные.Вставить("ДанныеСотрудникаОрганизацияДолжностьРуководителяРодительныйПадеж", "Руководителя")
            ПоставляемыеДанные.Вставить("ДанныеСотрудникаОрганизацияДолжностьРуководителяДательныйПадеж", "Руководителю")
            ПоставляемыеДанные.Вставить("ДанныеСотрудникаОрганизацияДолжностьРуководителяВинительныйПадеж", "Руководителя")
            ПоставляемыеДанные.Вставить("ДанныеСотрудникаОрганизацияДолжностьРуководителяТворительныйПадеж", "Руководителем")
            ПоставляемыеДанные.Вставить("ДанныеСотрудникаОрганизацияДолжностьРуководителяПредложныйПадеж", "Руководителе")
        ;
        если Сотрудник это Сотрудники.Ссылка
            знч РеквизитыСотрудника = МенеджерСущности.ЗначенияРеквизитовОбъекта(Сотрудник, 
                ["ДатаПриемаНаРаботу", "ВидЗанятости", "Позиция", "МестоВСтруктуреПредприятия", "Должность", "ГрафикРаботы", "ТабельныйНомер"])
            для ЗначениеРеквизита из РеквизитыСотрудника
                ПоставляемыеДанные.Вставить("ДанныеСотрудника%{ЗначениеРеквизита.Ключ}", ЗначениеРеквизита.Значение)
            ;
            ПоставляемыеДанные.Вставить("ДанныеСотрудникаПодразделение", РеквизитыСотрудника["МестоВСтруктуреПредприятия"])
            ПоставляемыеДанные.Вставить("ПодразделениеОтбор", РеквизитыСотрудника["МестоВСтруктуреПредприятия"])
            ПоставляемыеДанные.Вставить("ДолжностьОтбор", РеквизитыСотрудника["Должность"])
            ПоставляемыеДанные.Вставить("ПозицияОтбор", РеквизитыСотрудника["Позиция"])
            если РеквизитыСотрудника["Должность"] != Неопределено
                УниверсальныеМеханизмы.ДобавитьВДанныеДляПечатиПредставленияВПадежах(ПоставляемыеДанные,
                    "ДанныеСотрудникаДолжность", РеквизитыСотрудника["Должность"])
            ;
            если РеквизитыСотрудника["МестоВСтруктуреПредприятия"] != Неопределено
                ПоставляемыеДанные.Вставить("ДанныеСотрудникаПодразделение",
                    МенеджерСущности.ЗначениеРеквизитаОбъекта(РеквизитыСотрудника["МестоВСтруктуреПредприятия"], "Наименование"))
                знч ДанныеРуководителяПодразделения = ОрганизационнаяСтруктура.ДанныеРуководителяПодразделения(РеквизитыСотрудника["МестоВСтруктуреПредприятия"])
                если ДанныеРуководителяПодразделения != Неопределено
                    если ДанныеРуководителяПодразделения.Руководитель != Неопределено
                        УниверсальныеМеханизмы.ДобавитьВДанныеДляПечатиПредставленияВПадежах(ПоставляемыеДанные,
                            "ДанныеСотрудникаПодразделениеРуководитель", ДанныеРуководителяПодразделения.Руководитель)
                    ;
                    если ДанныеРуководителяПодразделения.Должность != Неопределено
                        УниверсальныеМеханизмы.ДобавитьВДанныеДляПечатиПредставленияВПадежах(ПоставляемыеДанные,
                            "ДанныеСотрудникаПодразделениеДолжностьРуководителя", ДанныеРуководителяПодразделения.Должность)
                    ;
                ;
                УниверсальныеМеханизмы.ДобавитьВДанныеДляПечатиПредставленияВПадежах(ПоставляемыеДанные,
                    "ДанныеСотрудникаПодразделение", РеквизитыСотрудника["МестоВСтруктуреПредприятия"], "Наименование")
            ;
            знч ДанныеВышестоящегоРуководителяПодразделения =
                ОрганизационнаяСтруктура.ДанныеРуководителяПодразделенияСотрудника(Сотрудник, Ложь)
            если ДанныеВышестоящегоРуководителяПодразделения != Неопределено
                если ДанныеВышестоящегоРуководителяПодразделения.Руководитель != Неопределено
                    УниверсальныеМеханизмы.ДобавитьВДанныеДляПечатиПредставленияВПадежах(ПоставляемыеДанные,
                        "ДанныеСотрудникаПодразделениеВышестоящийРуководитель",
                        ДанныеВышестоящегоРуководителяПодразделения.Руководитель)
                ;
                если ДанныеВышестоящегоРуководителяПодразделения.Должность != Неопределено
                    УниверсальныеМеханизмы.ДобавитьВДанныеДляПечатиПредставленияВПадежах(ПоставляемыеДанные,
                        "ДанныеСотрудникаПодразделениеДолжностьВышестоящегоРуководителя",
                        ДанныеВышестоящегоРуководителяПодразделения.Должность)
                ;
            ;
        ;
    ;
    
;

// Конец ПоставщикОбщихДанныхДляПечатныхФорм

// Контракт СотрудникиПоддержкаApi_V2_2

@ВПроекте
@Реализация
метод ЗагрузитьОбъектИзJsonДанныхСотрудника(ДанныеJson: Сотрудники.Сотрудник_3_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson, Владелец: Сотрудники.Ссылка)
    ОплатаТрудаСотрудников.ЗагрузитьОбъектИзJsonДанныхСотрудника(ДанныеJson, Сервисы, Владелец)
;

// Конец СотрудникиПоддержкаApi_V2_2

метод ИерархияЗначения(ЗначениеИерархии: СтруктураПредприятия.Ссылка|Массив<СтруктураПредприятия.Ссылка>): ЧитаемоеСоответствие<СтруктураПредприятия.Ссылка, ЧитаемаяКоллекция<СтруктураПредприятия.Ссылка>>
    пер Подразделения = новый Массив<СтруктураПредприятия.Ссылка>()
    если ЗначениеИерархии это СтруктураПредприятия.Ссылка
        Подразделения.Добавить(ЗначениеИерархии как СтруктураПредприятия.Ссылка)
    иначе
        для ЗначениеКоллекции из ЗначениеИерархии как Массив<СтруктураПредприятия.Ссылка>
            Подразделения.Добавить(ЗначениеКоллекции)
        ;
    ;
    возврат СтруктураПредприятия.ПодчиненныеПодразделения(Подразделения)
;

метод ВСписке(ЗначениеОбъекта: Объект?, ПравоеЗначение: ЧитаемаяКоллекция<СтруктураПредприятия.Ссылка>): Булево
    если ПравоеЗначение это Массив<неизвестно>
        возврат (ПравоеЗначение как Массив<неизвестно>).Содержит(ЗначениеОбъекта)
    иначе если ПравоеЗначение это Множество<неизвестно>
        возврат (ПравоеЗначение как Множество<неизвестно>).Содержит(ЗначениеОбъекта)
    ;
    возврат Ложь
;

метод КонтекстОбсужденияБеспредметный(АвторОбсуждения: ФизическиеЛица.Ссылка): Обсуждения.КонтекстОбсуждения
    знч КонтекстОбсуждения = новый Обсуждения.КонтекстОбсуждения()
    исп КонтекстДоступа.Привилегированный() 
    знч Организация = Сотрудники.ОрганизацияФизическогоЛицаПоОсновномуМестуРаботы(АвторОбсуждения, Истина)
    знч Идентификаторы = ОбменДанными.ВнешниеИдентификаторыПоВнутреннимСсылкам([
        АвторОбсуждения,
        Организация])
    
    КонтекстОбсуждения.documentID = Неопределено
    КонтекстОбсуждения.personID = Идентификаторы.ПолучитьИлиУмолчание(АвторОбсуждения)    
    КонтекстОбсуждения.employerID = Идентификаторы.ПолучитьИлиУмолчание(Организация)
    КонтекстОбсуждения.applicationID = ИспользованиеОбсуждений.ПолучитьСервис().ИдТекущегоПриложения()
    возврат КонтекстОбсуждения
;

