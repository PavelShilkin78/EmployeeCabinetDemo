импорт ОбщиеСтандартные
импорт ВебApi
импорт УниверсальныеМеханизмы
импорт ОбменДанными

@ВПодсистеме
структура Локация
    обз пер НаселенныйПункт: Строка
    обз пер Адрес: Строка    
;

//КонтрольДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат КомпанияКонтрольДоступаПоставщик.ПолучитьСервис().ОписаниеРаботодателяРазрешения()
;

//Конец КонтрольДоступа

@ВПроекте
метод Получить(): ОписаниеРаботодателя.Ссылка
    исп Транзакции.Начать()
    Блокировки.Заблокировать(новый ОписаниеРаботодателя.Блокировки.Ссылка())
    возврат Найти() ?? СоздатьПредопределенный()
;

метод Найти(): ОписаниеРаботодателя.Ссылка?
    знч Запрос = Запрос{
        Выбрать Первые 2
            Ссылка
        Из
            ОписаниеРаботодателя    
    }    
    возврат Запрос.Выполнить().ЕдинственныйИлиУмолчание()?.Ссылка    
;

метод СоздатьПредопределенный(): ОписаниеРаботодателя.Ссылка
    знч ПредопределенныйИд = Ууид{1709d035-d99c-47c0-a720-4d2f539e51b5}
    пер НовоеОписаниеРаботодателя = новый ОписаниеРаботодателя.Объект(Ид = ПредопределенныйИд)
    НовоеОписаниеРаботодателя.Записать()
    ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(НовоеОписаниеРаботодателя.Ссылка, Истина)
    возврат НовоеОписаниеРаботодателя.Ссылка      
;

@ВПроекте
метод ЗаполнитьОписаниеРаботодателяВСообщении(ТекстыСообщений: Соответствие<Строка, Строка>): Соответствие<Строка, Строка>
    
    пер Описание = Получить()
    знч ДанныеРаботодателя = МенеджерСущности.ЗначенияРеквизитовОбъекта(Описание, ["Наименование"])
    знч НаименованиеКомпании = ДанныеРаботодателя["Наименование"] как Строка
    знч Подпись = "С уважением,\нслужба подбора персонала."
    
    пер Тексты: Соответствие<Строка, Строка>
    для КлючИЗначение из ТекстыСообщений
        пер Текст = КлючИЗначение.Значение.Заменить("\%КМПодпись\%", Подпись)
        Текст = Текст.Заменить("\%КМНаименованиеКомпании\%", НаименованиеКомпании)
        Тексты.Вставить(КлючИЗначение.Ключ, Текст)
    ;
    
    возврат Тексты
;

// JSON

@ВПроекте
структура ДанныеJson_V2_0
    обз знч ID: Строка
    пер name: Строка?
    пер logo: МенеджерФайлов.ДанныеФайлаJson?
    пер showcaseBackground: МенеджерФайлов.ДанныеФайлаJson?
    пер description: Строка?
    пер location: Строка?
    пер site: Строка?
    пер version: Число? 
;

@ВПроекте
структура ДанныеJson_V2_1
    обз знч ID: Строка
    пер name: Строка?
    пер logo: МенеджерФайлов.ДанныеФайлаJson?
    пер description: Строка?
    пер location: Строка?
    пер site: Строка?
    пер version: Число? 
;

@ВПодсистеме
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{2.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    
    если ВерсияФорматаОбмена >= Версия{2.1}
        возврат Тип<ДанныеJson_V2_1>
    иначе если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<ДанныеJson_V2_0>
    ;
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson_V2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    знч ДанныеJson_V2_1 = новый ДанныеJson_V2_1(
        ID = ДанныеJson.ID,
        name = ДанныеJson.name,
        logo = ДанныеJson.logo,
        description = ДанныеJson.description,
        location = ДанныеJson.location,
        site = ДанныеJson.site,
        version = ДанныеJson.version        
    )
    ЗагрузитьОбъектИзJson(ДанныеJson_V2_1, Сервисы)
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson_V2_1, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    
    исп Транзакции.Начать()
    
    знч ОписаниеРаботодателя = Сервисы.ПрочитатьОбъект(ДанныеJson.ID,
        &ОписаниеРаботодателя.Объект.новый(Ууид), Тип<ОписаниеРаботодателя.Ссылка>) как ОписаниеРаботодателя.Объект 
    ОписаниеРаботодателя.Наименование = ДанныеJson.name ?? ""
    ОписаниеРаботодателя.Описание = ДанныеJson.description ?? ""
    ОписаниеРаботодателя.Локация = ДанныеJson.location ?? ""
    ОписаниеРаботодателя.СайтКомпании = ДанныеJson.site ?? ""
    
    пер ФайлЛоготип: Файлы.Объект
    если ДанныеJson.logo != Неопределено
        ФайлЛоготип = Файлы.ВложенияИзJson([ДанныеJson.logo], Сервисы, ОписаниеРаботодателя.Ссылка)[0]
        ОписаниеРаботодателя.Логотип = ФайлЛоготип.Ссылка
    иначе
        ОписаниеРаботодателя.Логотип = Неопределено
    ;

    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ОписаниеРаботодателя, ДанныеJson.ID), Сервисы.ИнструментыМенеджераОбъекта)
    Файлы.ЗаписатьФайлыПоВладельцу([ФайлЛоготип], ОписаниеРаботодателя.Ссылка)   
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"employerDescriptions": ДанныеОписанияРаботодателяВJson(Ссылки, Сервисы, ВерсияФорматаОбмена)}
;

метод ДанныеОписанияРаботодателяВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<Объект?>
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{2.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеОписанияРаботодателя(Ссылки)
        если ВерсияФорматаОбмена >= Версия{2.1}
            Данные.Добавить(ДанныеОписанияРаботодателяВJson_V2_1(КлючИЗначение.Значение, Сервисы))
        иначе
            Данные.Добавить(ДанныеОписанияРаботодателяВJson_V2_0(КлючИЗначение.Значение, Сервисы))
        ;
    ;
    возврат Данные
;

@ВПроекте
метод ДанныеОписанияРаботодателя(ОписанияРаботодателяСсылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<ОписаниеРаботодателя.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    
    знч ДанныеОписания: Соответствие<ОписаниеРаботодателя.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    если ОписанияРаботодателяСсылки.Размер() == 0
        возврат ДанныеОписания
    ;
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Наименование,
            Логотип,
            Описание,
            Локация,
            СайтКомпании
        Из
            ОписаниеРаботодателя
        Где
            Ссылка В (%ОписанияРаботодателяСсылки)
    }
    исп Результат = Запрос.Выполнить() 
    для СтрокаРезультата из Результат
        ДанныеОписания.Вставить(
            СтрокаРезультата.Ссылка,
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(СтрокаРезультата, Результат)
        )
    ;
    
    возврат ДанныеОписания
;

метод ДанныеОписанияРаботодателяВJson_V2_1(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДанныеJson_V2_1
    
    знч ДанныеJson = новый ДанныеJson_V2_1(
        (ДанныеОбъекта["Ссылка"] как ОписаниеРаботодателя.Ссылка).Ид.ВСтроку())
    ДанныеJson.name = ДанныеОбъекта["Наименование"] как Строка?
    если ДанныеОбъекта["Логотип"] != Неопределено
        ДанныеJson.logo = Файлы.ДанныеФайлаJson(ДанныеОбъекта["Логотип"] как Файлы.Ссылка, Сервисы)
    ;
    ДанныеJson.description = ДанныеОбъекта["Описание"] как Строка?
    ДанныеJson.location = ДанныеОбъекта["Локация"] как Строка?
    ДанныеJson.site = ДанныеОбъекта["СайтКомпании"] как Строка?
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеJson.version = Сервисы.ПолучитьВерсию(ДанныеОбъекта["Ссылка"] как ОписаниеРаботодателя.Ссылка)
    ;
    
    возврат ДанныеJson
;

метод ДанныеОписанияРаботодателяВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДанныеJson_V2_0
    знч ДанныеJson_V2_1 = ДанныеОписанияРаботодателяВJson_V2_1(ДанныеОбъекта, Сервисы)
    возврат новый ДанныеJson_V2_0(
        ДанныеJson_V2_1.ID,
        ДанныеJson_V2_1.name,
        ДанныеJson_V2_1.logo,
        Неопределено,
        ДанныеJson_V2_1.description,
        ДанныеJson_V2_1.location,
        ДанныеJson_V2_1.site,
        ДанныеJson_V2_1.version
    )
;

@ВПодсистеме
метод ТипОбъектаJson(): Строка
    возврат "employerDescription"
;


// Конец JSON

@ВПодсистеме
метод ПослеУдаленияДополнение(Ссылка: ОписаниеРаботодателя.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    РегистрацияИзменений.ЗарегистрироватьУдаление(Ссылка)
;