импорт ВебApi
импорт КонтрольДоступа

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат КонтрольДоступа.РазрешенияДоступаТаблицыКонтентДанныхАбонентаЧтениеВсем()
;

//КонецОбласти

//Область СлужебныйПрограммныйИнтерфейс

@ВПроекте
структура ДанныеJson
    обз знч ID: Строка
    обз знч name: Строка
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<ДанныеJson>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<ДанныеJson>
    ;
;

@ВПроекте
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Массив<ДанныеJson>>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Массив<ДанныеJson>>
    ;
;

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "workSchedules"
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать() 
    знч ГрафикРаботы = Сервисы.ПрочитатьОбъект(ДанныеJson.ID, &ГрафикиРаботы.Объект.новый(Ууид), Тип<ГрафикиРаботы.Ссылка>) как ГрафикиРаботы.Объект
    ГрафикРаботы.Наименование = ДанныеJson.name
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ГрафикРаботы, ДанныеJson.ID), Сервисы.ИнструментыМенеджераОбъекта)
;

@ВПодсистеме
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> ГрафикиРаботы.ПолучитьСсылку(Ууид))
;

@ВПроекте
метод ЕстьРабочиеДниВПериоде(ГрафикРаботы: ГрафикиРаботы.Ссылка?, ДатаНачала: Дата?, ДатаОкончания: Дата?): Булево
    пер Результат: Булево
    если ГрафикРаботы == Неопределено или ДатаНачала == Неопределено или ДатаОкончания == Неопределено
        Результат = Истина
    ;
    если не Результат
        знч Запрос = Запрос{
            Выбрать Первые 1
                Ссылка
            Из 
                ДанныеГрафиковРаботы
            Где
                ГрафикРаботы == %ГрафикРаботы
                И Дата >=| %ДатаНачала
                И Дата <=| %ДатаОкончания}
        
        исп РезультатЗапроса = Запрос.Выполнить() 
        знч РезультатЗапросаСтроки = новый ЧитаемыйМассив(РезультатЗапроса)
        если РезультатЗапросаСтроки.Пусто()
            Результат = Истина
        ;
    ;
    если не Результат
        знч Запрос = Запрос{
            Выбрать Первые 1
                Ссылка
            Из 
                ДанныеГрафиковРаботы
            Где
                ГрафикРаботы == %ГрафикРаботы
                И Дата >=| %ДатаНачала
                И Дата <=| %ДатаОкончания
                И ВидДня == ВидыДнейГрафика.Рабочий}
        
        исп РезультатЗапроса = Запрос.Выполнить() 
        знч РезультатЗапросаСтроки = новый ЧитаемыйМассив(РезультатЗапроса)
        если (не РезультатЗапросаСтроки.Пусто())
            Результат = Истина
        ;
    ;
    возврат Результат
;

@ВПроекте
метод ПраздничныеДниГрафикаРаботы(ГрафикРаботы: ГрафикиРаботы.Ссылка?): Соответствие<Число, Массив<Дата>>
    пер ПраздничныеДни: Соответствие<Число, Массив<Дата>>
    если ГрафикРаботы == Неопределено
        возврат ПраздничныеДни
    ;
    знч Запрос = Запрос{
        Выбрать
            ПраздничныеДни.Год Как Год,
            ПраздничныеДни.Дата Как Дата
        Из
            ПраздничныеДни Как ПраздничныеДни
        Где
            ПраздничныеДни.ГрафикРаботы == %ГрафикРаботы
        Упорядочить По
            ПраздничныеДни.Год,
            ПраздничныеДни.Дата}
    исп РезультатЗапроса = Запрос.Выполнить() 
    для РезультатЗапросаСтрока из РезультатЗапроса
        пер СписокПраздников: Массив<Дата>
        если ПраздничныеДни.СодержитКлюч(РезультатЗапросаСтрока.Год)
            СписокПраздников = ПраздничныеДни[РезультатЗапросаСтрока.Год]
        ;
        СписокПраздников.Добавить(РезультатЗапросаСтрока.Дата)
        ПраздничныеДни.Вставить(РезультатЗапросаСтрока.Год, СписокПраздников)
    ;
    возврат ПраздничныеДни
;

//КонецОбласти