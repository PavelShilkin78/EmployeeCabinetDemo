импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт Компания
импорт ВебApi
импорт КонтрольДоступа
импорт Компания::Согласования
импорт УниверсальныеМеханизмы

конст КЛЮЧ_ЗАДАНИЯ_ПОСЛЕ_ЗАПИСИ_ГРУППЫ_ОБЪЕКТОВ = "ПослеЗаписиГруппыОбъектов"

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат КонтрольДоступа.РазрешенияДоступаТаблицыКонтентДанныхАбонентаЧтениеВсем()
;

//КонецОбласти

//Область СлужебныйПрограммныйИнтерфейс

@ВПроекте
структура Подразделение_1_0
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка
    @JsonСвойство(Имя = "code")
    обз знч Код: Строка
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка
    @JsonСвойство(Имя = "parentDivisionID")
    обз знч Родитель: Строка?
    @JsonСвойство(Имя = "headID")
    обз знч Руководитель: Строка?
    @JsonСвойство(Имя = "priority")
    обз знч Приоритет: Строка?
;

@ВПроекте
структура Подразделение_3_0
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка
    @JsonСвойство(Имя = "code")
    обз знч Код: Строка
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка
    @JsonСвойство(Имя = "parentDivisionID")
    обз знч Родитель: Строка?
    @JsonСвойство(Имя = "headID")
    обз знч Руководитель: Строка?
    @JsonСвойство(Имя = "priority")
    обз знч Приоритет: Строка?
    @JsonСвойство(Имя = "presentationForms")
    обз пер СклоненияПредставления: СклоненияПредставленийОбъектов.СклоненияПредставленияОбъектаJson?
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Подразделение_1_0>
    иначе если ВерсияФорматаОбмена >= Версия{3.0}
        возврат Тип<Подразделение_3_0>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Подразделение_1_0>
    ;
;

@ВПроекте
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Массив<Подразделение_1_0>>
    иначе если ВерсияФорматаОбмена >= Версия{3.0}
        возврат Тип<Массив<Подразделение_3_0>>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Массив<Подразделение_1_0>>
    ;
;

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "divisions"
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: Подразделение_1_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)

    исп Транзакции.Начать() 

    знч Подразделение = Сервисы.ПрочитатьОбъект(ДанныеJson.Ид,
        &СтруктураПредприятия.Объект.новый(Ууид), Тип<СтруктураПредприятия.Ссылка>) как СтруктураПредприятия.Объект
    Подразделение.ЗаполнитьПоДаннымJson(ДанныеJson, Сервисы)
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(Подразделение, ДанныеJson.Ид), Сервисы.ИнструментыМенеджераОбъекта)
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: Подразделение_3_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)

    исп Транзакции.Начать() 

    знч Подразделение = Сервисы.ПрочитатьОбъект(ДанныеJson.Ид,
        &СтруктураПредприятия.Объект.новый(Ууид), Тип<СтруктураПредприятия.Ссылка>) как СтруктураПредприятия.Объект
    Подразделение.ЗаполнитьПоДаннымJson(ДанныеJson, Сервисы)
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(Подразделение, ДанныеJson.Ид), Сервисы.ИнструментыМенеджераОбъекта)
;

@ВПодсистеме
метод ПослеЗаписиГруппыОбъектов(МассивОбъектовОтложенногоОбновления: Массив<ВебApiСервер.ОбъектОтложенногоОбновления>)

    знч ЗагруженныеПодразделения: Массив<СтруктураПредприятия.Ссылка>
    для ОбъектОтложенногоОбновления из МассивОбъектовОтложенногоОбновления
        ЗагруженныеПодразделения.Добавить(ОбъектОтложенногоОбновления.ОбновляемыйОбъект как СтруктураПредприятия.Ссылка)
    ;
    ОбновитьВторичныеДанные(ЗагруженныеПодразделения)
    ОбновитьГруппыДоступаПодразделений(ЗагруженныеПодразделения)
    Согласования.ОбновлениеПриИзмененииСтруктурыПредприятия(ЗагруженныеПодразделения)
;

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> СтруктураПредприятия.ПолучитьСсылку(Ууид))
;

/**
Описание: Обновляет автоматически поддерживаемые группы доступа к данным физических лиц, связанные с подразделениями.
Параметры: Подразделения - подразделения, группы которых обновляются. 
СмТакже: (*ОбновитьГруппуДоступаПодразделения)
*/
@ВПроекте
метод ОбновитьГруппыДоступаПодразделений(Подразделения: ЧитаемаяКоллекция<СтруктураПредприятия.Ссылка>)
    если Подразделения.Пусто()
        возврат
    ;
    знч ВсеПодразделения = новый Множество<СтруктураПредприятия.Ссылка>(Подразделения)
    для ПодчиненныеПодразделения из ПодчиненныеПодразделения(Подразделения).Значения()
        ВсеПодразделения.ДобавитьВсе(ПодчиненныеПодразделения)
    ;
    
    ОбновитьЗначенияНаборовОграничений(ВсеПодразделения)
    
    для Подразделение из ВсеПодразделения
        ОбновитьГруппуДоступаПодразделения(Подразделение)
    ;
    
;

@ВПроекте
метод ОбновитьГруппыДоступаПодразделений()
    ОбновитьГруппыДоступаПодразделений(ВсеПодразделения())
;

/**
Описание: Обновляет автоматически поддерживаемую группу доступа к данным физических лиц, связанную с подразделением.
Параметры: Подразделение - подразделение, группа которого обновляется. 
СмТакже: (*ОбновитьГруппыДоступаПодразделений)
*/

метод ОбновитьГруппуДоступаПодразделения(Подразделение: СтруктураПредприятия.Ссылка?)
    
    если Подразделение == Неопределено
        возврат
    ;

    пер Руководители: Множество<ФизическиеЛица.Ссылка> = ОрганизационнаяСтруктура.РуководителиПодразделения(Подразделение, Ложь)

    знч ЗначенияОграничений: Массив<ЗначенияОграниченийГруппДоступа>
    ЗначенияОграничений.Добавить(новый ЗначенияОграниченийГруппДоступа(
        КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица(),
        КонтрольДоступа.НаборОграниченийДоступаПоПараметру(
            КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица(),
            Подразделение    
        ),
        Ложь
    ))
    
    знч РольРуководительПодразделения = Компания.РольРуководительПодразделения()
    если РольРуководительПодразделения != Неопределено
        КонтрольДоступа.ОбновитьГруппуДоступа(
            КлючГруппыДоступа(Подразделение),
            МенеджерСущности.ПредставлениеСсылки(Подразделение),
            РольРуководительПодразделения,
            ЗначенияОграничений,
            КонтрольДоступа.ПользователиВладельцевКабинетов(Руководители).Значения(),
            ВидыГруппыДоступа.Служебная    
        )
    ;
;

метод КлючГруппыДоступа(Подразделение: СтруктураПредприятия.Ссылка): Строка
    возврат "ДоступКДаннымПодчиненных%{Подразделение.Ид.ВСтроку()}"
;

@ВПодсистеме
метод СоздатьНаборыОграниченийДоступа()
    знч ВсеПодразделения = ВсеПодразделения()
    ОбновитьНаборыОграниченийПоПодразделениям(ВсеПодразделения)
    ОбновитьНаборыОграниченийПоФизическимЛицамПодразделений(ВсеПодразделения)
;

метод ОбновитьЗначенияНаборовОграничений(Подразделения: ЧитаемоеМножество<СтруктураПредприятия.Ссылка>)
    знч Запрос = Запрос{
        Выбрать Различные
            ВышестоящееПодразделение как Подразделение
        Из
            ПодчиненностьПодразделений
        Где
            Подразделение в (%Подразделения)
    }
    
    знч ПодразделенияКПересчету: Массив<СтруктураПредприятия.Ссылка>
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        если СтрокаРезультата.Подразделение== Неопределено
            продолжить
        ;
        ПодразделенияКПересчету.Добавить(СтрокаРезультата.Подразделение)
    ;
    
    ОбновитьНаборыОграниченийПоПодразделениям(ПодразделенияКПересчету)
    ОбновитьНаборыОграниченийПоФизическимЛицамПодразделений(ПодразделенияКПересчету)
;

метод ОбновитьНаборыОграниченийПоПодразделениям(ПодразделенияКПересчету: ЧитаемыйМассив<СтруктураПредприятия.Ссылка>)
    знч НаборыОграниченийКПересчету = КонтрольДоступа.НаборыОграниченийДоступаПоПараметрам(Компания.ТипАтрибутаДоступаПодразделения(), ПодразделенияКПересчету)
    знч ПодчиненныеПодразделения = ПодчиненныеПодразделения(ПодразделенияКПересчету)
    
    для Подразделение из ПодразделенияКПересчету
        знч СуществующийНабор = НаборыОграниченийКПересчету.ПолучитьИлиУмолчание(Подразделение)
        знч ЗначенияОграничений: Массив<СтруктураПредприятия.Ссылка>
        знч ПодразделенияОграничения = ПодчиненныеПодразделения.ПолучитьИлиУмолчание(Подразделение)
        если ПодразделенияОграничения!= Неопределено
            ЗначенияОграничений.ДобавитьВсе(ПодразделенияОграничения)
        ;
        если СуществующийНабор == Неопределено
            ДобавитьНаборОграниченийДоступаПодразделений(Подразделение, ЗначенияОграничений)
        иначе
            КонтрольДоступа.ОбновитьЗначенияОграничений(СуществующийНабор, ЗначенияОграничений)
        ;
    ;
;

метод ОбновитьНаборыОграниченийПоФизическимЛицамПодразделений(ПодразделенияКПересчету: ЧитаемыйМассив<СтруктураПредприятия.Ссылка>)
    знч НаборыОграниченийКПересчету = КонтрольДоступа.НаборыОграниченийДоступаПоПараметрам(КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица(), ПодразделенияКПересчету)
    знч ФизическиеЛицаПодразделений = ОрганизационнаяСтруктура.ФизическиеЛицаПоПодразделениям(ПодразделенияКПересчету)
    для Подразделение из ПодразделенияКПересчету
        знч СуществующийНабор = НаборыОграниченийКПересчету.ПолучитьИлиУмолчание(Подразделение)
        знч ЗначенияОграничений = ФизическиеЛицаПодразделений.ПолучитьИлиУмолчание(Подразделение, <ФизическиеЛица.Ссылка>[])
        если СуществующийНабор == Неопределено
            ДобавитьНаборОграниченийДоступаФизическихЛиц(Подразделение, ЗначенияОграничений)
        иначе
            КонтрольДоступа.ОбновитьЗначенияОграничений(СуществующийНабор, ЗначенияОграничений)
        ;
    ;
;

метод ДобавитьНаборОграниченийДоступаПодразделений(Подразделение: СтруктураПредприятия.Ссылка, ЗначенияОграничений: ЧитаемыйМассив<СтруктураПредприятия.Ссылка>)
    КонтрольДоступа.ЗаписатьНаборОграниченийДоступа(
        Компания.ТипАтрибутаДоступаПодразделения(),
        Подразделение,
        "%{МенеджерСущности.ПредставлениеСсылки(Подразделение)} (Иерархия)",
        ЗначенияОграничений
    )
;

метод ДобавитьНаборОграниченийДоступаФизическихЛиц(Подразделение: СтруктураПредприятия.Ссылка, ЗначенияОграничений: ЧитаемыйМассив<ФизическиеЛица.Ссылка>)
    КонтрольДоступа.ЗаписатьНаборОграниченийДоступа(
        КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица(),
        Подразделение,
        "Физические лица подразделения %{МенеджерСущности.ПредставлениеСсылки(Подразделение)} (Иерархия)",
        ЗначенияОграничений
    )
;

@ВПодсистеме
метод ДобавитьГруппыДоступаПодразделений()
    знч Запрос = Запрос{
        Выбрать
            Ссылка
        Из
            СтруктураПредприятия}
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ОбновитьГруппуДоступаПодразделения(СтрокаРезультата.Ссылка)    
    ;
;

//КонецОбласти

//Область JSON

метод ДанныеПодразделений(Подразделения: ЧитаемаяКоллекция<СтруктураПредприятия.Ссылка>): 
        ЧитаемоеСоответствие<СтруктураПредприятия.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>

    знч Данные: Соответствие<СтруктураПредприятия.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Запрос = Запрос{
        Выбрать 
            Ссылка, 
            Код, 
            Наименование, 
            Родитель, 
            Руководитель, 
            Приоритет 
        Из 
            СтруктураПредприятия
        Где
            Ссылка В (%Подразделения)}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        Данные.Вставить(
            РезультатСтрока.Ссылка, 
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат))
    ;
    возврат Данные
;

//КонецОбласти

//Область СлужебныеПроцедурыИФункции

//Область ВторичныеДанные

@ВПроекте
метод ПодчиненныеПодразделения(Подразделение: СтруктураПредприятия.Ссылка): ЧитаемаяКоллекция<СтруктураПредприятия.Ссылка>
    возврат ПодчиненныеПодразделения([Подразделение]).ПолучитьИлиУмолчание(Подразделение,
        новый Массив<СтруктураПредприятия.Ссылка>())
;

@ВПроекте
метод ПодчиненныеПодразделения(Подразделения: ЧитаемаяКоллекция<СтруктураПредприятия.Ссылка>): ЧитаемоеСоответствие<СтруктураПредприятия.Ссылка, ЧитаемаяКоллекция<СтруктураПредприятия.Ссылка>>
    знч ДанныеПодчиненных: Соответствие<СтруктураПредприятия.Ссылка, ЧитаемаяКоллекция<СтруктураПредприятия.Ссылка>>
    знч Запрос = Запрос{
        Выбрать
            ДанныеПодразделений.Владелец.Владелец.ЗаменитьNull(Неопределено) Подразделение,
            ДанныеПодразделений.Элемент Как ПодчиненноеПодразделение
        Из
            ДанныеПодразделений.ВсеПодчиненные Как ДанныеПодразделений
        Где
            ДанныеПодразделений.Владелец.Владелец В (%Подразделения)
            И ДанныеПодразделений.Элемент != ДанныеПодразделений.Владелец.Владелец}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        пер ВсеПодчиненные: Массив<СтруктураПредприятия.Ссылка>
        если ДанныеПодчиненных.СодержитКлюч(РезультатСтрока.Подразделение)
            ВсеПодчиненные = ДанныеПодчиненных[РезультатСтрока.Подразделение] как Массив<СтруктураПредприятия.Ссылка>
        ;
        ВсеПодчиненные.Добавить(РезультатСтрока.ПодчиненноеПодразделение)
        ДанныеПодчиненных.Вставить(РезультатСтрока.Подразделение, ВсеПодчиненные)
    ; 
    возврат ДанныеПодчиненных
;

@ВПодсистеме
метод ПодчиненныеПодразделенияБезРуководителей(Подразделения: ЧитаемаяКоллекция<СтруктураПредприятия.Ссылка>): Массив<СтруктураПредприятия.Ссылка>

    пер ПодчиненныеПодразделения: Массив<СтруктураПредприятия.Ссылка>
    
    пер НепосредственноПодчиненные = НепосредственноПодчиненныеПодразделенияБезРуководителей(Подразделения)
    пока не НепосредственноПодчиненные.Пусто()
        ПодчиненныеПодразделения.ДобавитьВсе(НепосредственноПодчиненные)
        НепосредственноПодчиненные = НепосредственноПодчиненныеПодразделенияБезРуководителей(НепосредственноПодчиненные)
    ;

    возврат ПодчиненныеПодразделения
    
;

метод НепосредственноПодчиненныеПодразделенияБезРуководителей(Подразделения: ЧитаемаяКоллекция<СтруктураПредприятия.Ссылка>): Массив<СтруктураПредприятия.Ссылка>

    пер ПодчиненныеПодразделения: Массив<СтруктураПредприятия.Ссылка>

    знч Запрос = Запрос{
        Выбрать 
            Подразделения.Ссылка Как Ссылка
        Из
            СтруктураПредприятия Как Подразделения
        Где
            Подразделения.Родитель В (%Подразделения)
            И Подразделения.Руководитель == Неопределено}


    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        ПодчиненныеПодразделения.Добавить(РезультатСтрока.Ссылка)
    ; 
    
    возврат ПодчиненныеПодразделения
;

@ВПроекте
метод ОбновитьВторичныеДанные(ОбновляемыеПодразделения: ЧитаемыйМассив<СтруктураПредприятия.Ссылка>? = Неопределено)
    ОбновитьДанныеПодразделений()
    ПодчиненностьПодразделений.Обновить(ОбновляемыеПодразделения)
;

метод ВсеПодразделения(): Массив<СтруктураПредприятия.Ссылка>
    пер ВсеПодразделения: Массив<СтруктураПредприятия.Ссылка>
    знч Запрос = Запрос{
        Выбрать
            Ссылка
        Из
            СтруктураПредприятия}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        ВсеПодразделения.Добавить(РезультатСтрока.Ссылка)
    ;
    возврат ВсеПодразделения
;

@ВПроекте
метод ОбновитьДанныеПодразделений()
    знч Запрос = Запрос{
        Выбрать
            СтруктураПредприятия.Ссылка Как Подразделение
        Из
            СтруктураПредприятия Как СтруктураПредприятия
        Где
            СтруктураПредприятия.Родитель == Неопределено}
    
    исп Результат = Запрос.Выполнить()
    пер Вышестоящие: Массив<СтруктураПредприятия.Ссылка>
    для РезультатСтрока из Результат
        ОбновитьДанныеПодразделенийРекурсивно(РезультатСтрока.Подразделение, Вышестоящие, "", 0)
    ;
;

метод ОбновитьДанныеПодразделенийРекурсивно(
        ТекущееПодразделение: СтруктураПредприятия.Ссылка, 
        Вышестоящие: Массив<СтруктураПредприятия.Ссылка>,
        ИерархияВышестоящих: Строка, 
        УровеньИерархии: Число): ДанныеПодразделений.Объект
        
    знч Запрос = Запрос{
        Выбрать
            ТекущиеПодразделения.Наименование Как Наименование,
            ТекущиеПодразделения.Родитель Как Родитель,
            ДанныеПодразделений.Ссылка.ЗаменитьNull(Неопределено) Как ДанныеПодразделения,
            ПодчиненныеПодразделения.Ссылка.ЗаменитьNull(Неопределено) Как ПодчиненноеПодразделение,
            Количество(Различные Выбор Когда Сотрудники.ТипЭлемента == ТипыЭлементовПодразделенийИСотрудников.Сотрудник Тогда Сотрудники.Ссылка Конец) Как КоличествоСотрудниковПодразделения,
            Количество(Различные Выбор Когда Сотрудники.ОсновноеМестоРаботы Тогда Сотрудники.Ссылка Конец) Как КоличествоСотрудниковПодразделенияНаОсновнойРаботе
        Из
            СтруктураПредприятия Как ТекущиеПодразделения
                Левое Соединение ДанныеПодразделений Как ДанныеПодразделений
                По ТекущиеПодразделения.Ссылка == ДанныеПодразделений.Владелец
                Левое Соединение ПодразделенияИСотрудники Как Сотрудники
                По ТекущиеПодразделения.Ссылка == Сотрудники.Подразделение
                Левое Соединение СтруктураПредприятия Как ПодчиненныеПодразделения
                По ТекущиеПодразделения.Ссылка == ПодчиненныеПодразделения.Родитель
        Где
            ТекущиеПодразделения.Ссылка == %ТекущееПодразделение
        Сгруппировать По
            ТекущиеПодразделения.Наименование,
            ТекущиеПодразделения.Родитель,
            ДанныеПодразделений.Ссылка,
            ПодчиненныеПодразделения.Ссылка}
    
    знч Результат = новый Массив(Запрос.Выполнить())
    пер ДанныеПодразделенияОбъект: ДанныеПодразделений.Объект?
    пер ДанныеПодчиненногоПодразделения: ДанныеПодразделений.Объект
    пер ИерархияДляПодчиненных: Строка
    
    знч ВышестоящиеКопия: Массив<СтруктураПредприятия.Ссылка>
    ВышестоящиеКопия.ДобавитьВсе(Вышестоящие)
    
    для РезультатСтрока из Результат
        если РезультатСтрока.ДанныеПодразделения == Неопределено
            ДанныеПодразделенияОбъект = новый ДанныеПодразделений.Объект()
            ДанныеПодразделенияОбъект.Владелец = ТекущееПодразделение
        иначе
            ДанныеПодразделенияОбъект = РезультатСтрока.ДанныеПодразделения.ЗагрузитьОбъект()
        ;
        ДанныеПодразделенияОбъект.Родитель = РезультатСтрока.Родитель
        ДанныеПодразделенияОбъект.УровеньИерархии = УровеньИерархии
        ДанныеПодразделенияОбъект.ИерархияВышестоящих = ИерархияВышестоящих
        ДанныеПодразделенияОбъект.КоличествоПодчиненныхНепосредственно = 0
        ДанныеПодразделенияОбъект.КоличествоВсехПодчиненных = 0
        ДанныеПодразделенияОбъект.КоличествоВсехСотрудников = РезультатСтрока.КоличествоСотрудниковПодразделения
        ДанныеПодразделенияОбъект.КоличествоСотрудниковПодразделения = РезультатСтрока.КоличествоСотрудниковПодразделения
        ДанныеПодразделенияОбъект.КоличествоСотрудниковНаОсновнойРаботе = РезультатСтрока.КоличествоСотрудниковПодразделенияНаОсновнойРаботе
        ДанныеПодразделенияОбъект.КоличествоСотрудниковПодразделенияНаОсновнойРаботе = РезультатСтрока.КоличествоСотрудниковПодразделенияНаОсновнойРаботе
        ДанныеПодразделенияОбъект.ПодчиненныеНепосредственно.Очистить()
        ДанныеПодразделенияОбъект.ВсеПодчиненные.Очистить()
        ДанныеПодразделенияОбъект.Вышестоящие.Очистить()
        ДанныеПодразделенияОбъект.Вышестоящие.ДобавитьВсе(ВышестоящиеКопия)
        если УровеньИерархии == 0
            ИерархияДляПодчиненных = РезультатСтрока.Наименование
        иначе
            ИерархияДляПодчиненных = "%ИерархияВышестоящих\\%{РезультатСтрока.Наименование}"
        ;
        прервать
    ;
    ВышестоящиеКопия.Добавить(ТекущееПодразделение)
    для РезультатСтрока из Результат
        если РезультатСтрока.ПодчиненноеПодразделение == Неопределено
            продолжить
        ;
        ДанныеПодчиненногоПодразделения = ОбновитьДанныеПодразделенийРекурсивно(РезультатСтрока.ПодчиненноеПодразделение!, ВышестоящиеКопия,
            ИерархияДляПодчиненных, УровеньИерархии + 1)
        
        // Ведем подсчет тех подразделений в которых есть хотя бы один сотрудник с основным рабочим местом
        если ДанныеПодчиненногоПодразделения.КоличествоСотрудниковНаОсновнойРаботе != 0
            ДанныеПодразделенияОбъект.КоличествоПодчиненныхНепосредственно += 1
            ДанныеПодразделенияОбъект.КоличествоВсехПодчиненных += 1
            ДанныеПодразделенияОбъект.ПодчиненныеНепосредственно.Добавить(ДанныеПодчиненногоПодразделения.Владелец)
            ДанныеПодразделенияОбъект.ВсеПодчиненные.Добавить(ДанныеПодчиненногоПодразделения.Владелец)
        ;
        ДанныеПодразделенияОбъект.КоличествоВсехПодчиненных += ДанныеПодчиненногоПодразделения.КоличествоВсехПодчиненных
        ДанныеПодразделенияОбъект.КоличествоВсехСотрудников += ДанныеПодчиненногоПодразделения.КоличествоВсехСотрудников
        ДанныеПодразделенияОбъект.КоличествоСотрудниковНаОсновнойРаботе += ДанныеПодчиненногоПодразделения.КоличествоСотрудниковНаОсновнойРаботе
        ДанныеПодразделенияОбъект.ВсеПодчиненные.ДобавитьВсе(ДанныеПодчиненногоПодразделения.ВсеПодчиненные)
        ДанныеПодразделенияОбъект.ПодчиненныеНепосредственно.Добавить(ДанныеПодчиненногоПодразделения.Владелец)
    ;
    ДанныеПодразделенияОбъект.Записать()
    возврат ДанныеПодразделенияОбъект
;

@ВПроекте
@НаКлиенте
метод НастройкиВводаСсылок(): НастройкиВводаСсылок
    знч Настройка = новый НастройкиВводаСсылки(
        ПсевдонимОсновнойТаблицы = "СтруктураПредприятия",
        ПрисоединенныеТаблицы = [
            новый ПрисоединеннаяТаблица(
                Таблица = "ДанныеПодразделений",
                Псевдоним = "ДанныеПодразделений",
                Фильтр = новый ГруппаЭлементовФильтра(
                    Элементы = [
                        новый ЭлементФильтраВыражение(
                            Выражение = "СтруктураПредприятия.Ссылка == ДанныеПодразделений.Владелец"
                        ),
                        новый ЭлементФильтра(
                            Поле = "КоличествоВсехСотрудников",
                            ВидСравнения = ВидСравнения.Больше,
                            Значение = 0,
                            Использовать = Истина)
                    ]
                )
            )
        ]
    )
    возврат новый НастройкиВводаСсылок({Тип<СтруктураПредприятия.Ссылка>: Настройка})
;

@ВПроекте
@НаКлиенте 
метод НастройкиВводаОграниченныйСписок(Список: ЧитаемаяКоллекция<СтруктураПредприятия.Ссылка>): НастройкиВводаСсылок
    знч Настройки = новый НастройкиВводаСсылок()
    ДобавитьНастройкуВводаОграниченныйСписок(Настройки, Список)
    возврат Настройки
;

@ВПроекте
@НаКлиенте 
метод ДобавитьНастройкуВводаОграниченныйСписок(Настройки: НастройкиВводаСсылок, Список: ЧитаемаяКоллекция<СтруктураПредприятия.Ссылка>)
    Настройки.НастройкиПоТипу.Вставить(Тип<СтруктураПредприятия.Ссылка>, новый НастройкиВводаСсылки(
        ПсевдонимОсновнойТаблицы = "СтруктураПредприятия",
        Фильтр = новый ГруппаЭлементовФильтра(
            Элементы = [
                новый ЭлементФильтра(
                    Поле = "СтруктураПредприятия.Ссылка",
                    ВидСравнения = ВидСравнения.ВСписке,
                    Значение = Список,
                    Использовать = Истина
                )
            ]
        )
    ))
;

конст МАКСИМАЛЬНАЯ_ДЛИНА_ПРЕДСТАВЛЕНИЯ_ПОДРАЗДЕЛЕНИЯ_С_ИЕРАРХИЕЙ = 80
конст ДЛИНА_СОКРАЩЕННОГО_ПРЕДСТАВЛЕНИЯ_ПОДРАЗДЕЛЕНИЯ_ИЕРАРХИИ = 20

@ВПодсистеме
метод ИерархияВышестоящих(Подразделение: СтруктураПредприятия.Ссылка): Строка
    знч Запрос = Запрос{
        Выбрать
            ИерархияВышестоящих
        Из
            ДанныеПодразделений
        Где
            Владелец == %Подразделение}
    исп Результат = Запрос.Выполнить()
    возврат Результат.ЕдинственныйИлиУмолчание()?.ИерархияВышестоящих ?? ""
;

@ВПроекте
метод НаименованиеСИерархией(Наименование: Строка, ИерархияВышестоящих: Строка): Строка
    если ИерархияВышестоящих.Пусто()
        возврат Наименование
    иначе
        возврат МенеджерСтрок.ПодстрокаСНачала("%Наименование (%ИерархияВышестоящих)", 450)
    ;
;

@ВПодсистеме
метод ОбновитьНаименованиеСИерархией()
    исп Транзакции.Начать()
    знч Запрос = Запрос{
        Выбрать 
            СтруктураПредприятия.Ссылка Как Ссылка,
            СтруктураПредприятия.Наименование Как Наименование,
            ДанныеПодразделений.ИерархияВышестоящих.ЗаменитьNull("") Как ИерархияВышестоящих
        Из
            СтруктураПредприятия Как СтруктураПредприятия
        Левое Соединение ДанныеПодразделений как ДанныеПодразделений
        По СтруктураПредприятия.Ссылка == ДанныеПодразделений.Владелец
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    для СтрокаРезультата из РезультатЗапроса
        знч Объект = СтрокаРезультата.Ссылка.ЗагрузитьОбъект(Истина)
        Объект.НаименованиеСИерархией = НаименованиеСИерархией(СтрокаРезультата.Наименование, СтрокаРезультата.ИерархияВышестоящих)
        знч ПараметрыЗаписи = новый СтруктураПредприятия.ПараметрыЗаписи(РежимОбновленияВторичныхДанных = Истина)  
        Объект.Записать(ПараметрыЗаписи)
    ;
;

//КонецОбласти