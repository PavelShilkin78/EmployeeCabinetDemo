импорт ИнтерфейсныеКомпонентыСтандартные
импорт Криптография
импорт ОбменДанными
импорт ОбщиеСтандартные
импорт УниверсальныеМеханизмы

метод СогласоватьПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    если ТребуетсяПодпись и не Криптография.ВвестиПарольЗакрытогоКлюча(ДанныеСогласующего.Согласующий, РедактируемыйОбъект)
        возврат
    ;
    УстановитьДоступностьКоманд(Ложь)
    пер СостояниеОбмена: ОбменДанными.СостояниеОбмена
    попытка
        СостояниеОбмена = ПодписатьДокумент(
            РедактируемыйОбъект, 
            ДанныеСогласующего, 
            Криптография.ПараметрыСеанса().ПарольЗакрытогоКлючаПользователя,
            ТребуетсяПодпись)
        если ТребуетсяПодпись и Криптография.УстановитьПодписьВСервисеПодписания(
                РедактируемыйОбъект, ДанныеСогласующего.Согласующий, ДанныеСогласующего.Роль, ДанныеСогласующего.НомерШага) == Ложь
                
            УстановитьДоступностьКоманд(Истина)
            возврат
        ;            
    поймать Ошибка: Исключение
        ОшибкаПриВыполненииКоманды(новый СобытиеСДанными(Ошибка))
        возврат
    ;     
    МенеджерГлобальныхКлиентскихСобытий.Оповестить(Согласования.ДОКУМЕНТ_СОГЛАСОВАН, РедактируемыйОбъект)
    ВыполненоСогласование(новый СобытиеКомпонента())
    УстановитьДоступностьКоманд(Истина)
    пер ЗаголовокУведомления = "Согласовано"
    пер ТекстУведомления = СообщениеПослеСогласования
    пер КоннотацияУведомления: ОценкаИнформации = ОценкаИнформации.Обычная
    если ПроверятьСостояниеОбмена и СостояниеОбмена.ОповеститьОбОтсутствииОбмена
        ЗаголовокУведомления = "Приостановлена отправка заявления"
        ТекстУведомления = СообщениеПриОтсутствииОбмена 
        если СостояниеОбмена.ОповеститьСотрудникаОВозобновленииОбмена
            ТекстУведомления += " Вы получите уведомление после отправки."
        ;
        КоннотацияУведомления = ОценкаИнформации.Предупреждающая
    ;
    СтандартныеФормы.ПоказатьУведомление(ЗаголовокУведомления, ТекстУведомления, КоннотацияУведомления)
;

метод ОтказатьПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    УстановитьДоступностьКоманд(Ложь)
    пер Комментарий = ПричинаОтказа.Ввести()
    если Комментарий == Неопределено
        УстановитьДоступностьКоманд(Истина)
        возврат
    ;

    Отказать(
        РедактируемыйОбъект, 
        ДанныеСогласующего, 
        Комментарий!
    )
    МенеджерГлобальныхКлиентскихСобытий.Оповестить(Согласования.ДОКУМЕНТ_ОТКЛОНЕН, РедактируемыйОбъект)
    ВыполненоСогласование(новый СобытиеКомпонента())
    УстановитьДоступностьКоманд(Истина)
    СтандартныеФормы.ПоказатьУведомление("Отклонено", СообщениеПослеОтказа)
;

метод УстановитьДоступностьКоманд(Доступность: Булево)
    пер Согласовать: Кнопка = Компоненты.Согласовать
    пер Отказать: Кнопка = Компоненты.Отказать
    Согласовать.Доступность = Доступность
    Отказать.Доступность = Доступность
;

метод КоманднаяПанельСогласованияГруппировка(): ОриентацияСодержимого
    возврат КомандыФормДокументов.Ориентация()
;

метод КоманднаяПанельСогласованияГоризонтальноеПоложениеДочерних(): ВыравниваниеПоГоризонтали | Авто
    возврат КомандыФормДокументов.ГоризонтальноеПоложение()
;

метод КнопкаШирина(): Число
    возврат КомандыФормДокументов.МаксимальнаяШирина()
;

метод КнопкаМинимальнаяШирина(): Число
    возврат КомандыФормДокументов.МинимальнаяШирина()
;

метод КнопкаРастягиватьПоГоризонтали(): Булево | Авто
    возврат КомандыФормДокументов.РастягиватьПоГоризонтали()
;

@НаСервере @ДоступноСКлиента
статический метод ПодписатьДокумент(Ссылка: неизвестно, 
        ДанныеСогласующего: Согласования.ДанныеСогласующего, 
        ПарольЗакрытогоКлюча: Строка,
        ТребуетсяПодпись: Булево): ОбменДанными.СостояниеОбмена?
    
    если ТребуетсяПодпись
        если РаботаСПодписями.ВидЭлектроннойПодписи(ДанныеСогласующего.Согласующий) == ВидыЭлектронныхПодписей.УНЭПИнформационнойСистемы
            Согласования.ПроверитьНастройкиИПодписатьДокумент(Ссылка, ДанныеСогласующего, ПарольЗакрытогоКлюча)
        ;
    иначе
        Согласования.ОзнакомитьсяБезПодписания(Ссылка, ДанныеСогласующего)
    ;
    
    пер СостояниеОбмена: ОбменДанными.СостояниеОбмена
    пер Сервис = СогласованияСервис.ПолучитьСервис()
    если Сервис != Неопределено
        СостояниеОбмена = Сервис.ПроверитьСостояниеОбмена(ДанныеСогласующего.Согласующий)
    ;
    возврат СостояниеОбмена 
;

@НаСервере @ДоступноСКлиента
статический метод Отказать(
        Ссылка: неизвестно, 
        ДанныеСогласующего: Согласования.ДанныеСогласующего,
        Комментарий: Строка)
    
    СогласованияДокументов.ОтклонитьДокумент(Ссылка, ДанныеСогласующего, Комментарий)
;