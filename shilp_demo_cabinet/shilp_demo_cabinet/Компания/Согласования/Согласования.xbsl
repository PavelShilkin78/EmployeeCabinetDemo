импорт КонтрольДоступа
импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт УниверсальныеМеханизмы
импорт Криптография
импорт КриптографияСтандартные
импорт СтандартноеПриложение
импорт ИнтерфейсныеКомпонентыСтандартные
импорт ОбменДанными
импорт ВебApi
импорт УниверсальныеМеханизмы::ШаблоныДокументов

@ВПроекте
@НаКлиенте
конст ДОКУМЕНТ_СОГЛАСОВАН = "ДокументСогласован"

@ВПроекте
@НаКлиенте
конст ДОКУМЕНТ_ОТКЛОНЕН = "ДокументОтклонен"

@ВПроекте
@НаКлиенте
конст СОГЛАСОВАНИЕ_ОТМЕНЕНО = "СогласованиеОтменено"

@ВПодсистеме
конст ИД_ПОДСИСТЕМЫ = "Согласования"

@ВПодсистеме
конст РОЛЬ_ПОДПИСАНТА_СОТРУДНИК = "Сотрудник"

@ВПодсистеме
конст РОЛЬ_ПОДПИСАНТА_ОРГАНИЗАЦИЯ = "Организация"

@ВПодсистеме
конст РОЛЬ_ПОДПИСАНТА_ИСПОЛНИТЕЛЬ = "Исполнитель"

@ВПодсистеме
конст РОЛЬ_ПОДПИСАНТА_НЕПОСРЕДСТВЕННЫЙ_РУКОВОДИТЕЛЬ = "НепосредственныйРуководитель"

@ВПодсистеме
конст РОЛЬ_ПОДПИСАНТА_ВЫШЕСТОЯЩИЙ_РУКОВОДИТЕЛЬ = "ВышестоящийРуководитель"

@ВПодсистеме
конст РОЛЬ_ПОДПИСАНТА_НЕФОРМАЛЬНЫЙ_РУКОВОДИТЕЛЬ = "НеформальныйРуководитель"

@ВПодсистеме
конст КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: Строка = "СогласованияПараметрыСеанса" 

@ВПроекте
исключение ИсключениеДокументУжеПодписан
    обз пер Документ: неизвестно
;

@ВПроекте
структура ПараметрыСеанса
    пер ЭтоСогласователь: Булево
;

@ВПроекте
@НаКлиенте
метод ПараметрыСеанса(): ПараметрыСеанса
    возврат ПараметрыСеансаСервис.ПолучитьСервис().ПараметрПоКлючу(КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА) как ПараметрыСеанса
;

@ВПроекте
структура ДанныеСогласующего
    обз пер Согласующий: ФизическиеЛица.Ссылка?
    знч Роль: РолиПодписантов.Ссылка?
    пер НомерШага: Число
    пер ТребуемаяПодпись: ВидыТребуемойПодписи = ВидыТребуемойПодписи.НеТребуется
    пер СогласующийСтрокой: Строка
;

@ВПроекте
структура ШагПравилаСогласования
    обз пер НомерШага: Число
    обз пер ТипШага: ТипыШаговСогласования
    знч Согласующие: Массив<ФизическиеЛица.Ссылка|РолиПодписантов.Ссылка>
    пер ТребуемаяПодпись: ВидыТребуемойПодписи = ВидыТребуемойПодписи.УНЭП
;

@ВПроекте
структура ПравилоСогласования
    пер Наименование: Строка
    пер Ссылка: ПравилаСогласования.Ссылка?
    обз знч ВидСогласуемогоЗаявления: ВидыСогласуемыхЗаявлений.Ссылка
    пер ТипПравила: ТипыПравилСогласования
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка?
    пер Подразделение: СтруктураПредприятия.Ссылка?
    пер ШагиПравила: Массив<ШагПравилаСогласования>
    знч ПоУмолчанию: Булево
    пер Автор: ФизическиеЛица.Ссылка?
    пер ОбщееДляВидаЗаявления: Булево
;

структура Заместитель
    обз знч Заместитель: ФизическиеЛица.Ссылка
    обз знч СпособЗамещения: СпособыЗамещения
;

структура ДанныеШагаСогласования
    знч ТипШага: ТипыШаговСогласования
    знч ШагСогласования: Число
    пер Согласующий: ФизическиеЛица.Ссылка?
    пер ПервичныйСогласующий: ФизическиеЛица.Ссылка?
    пер СпособЗамещения: СпособыЗамещения?
    знч РольСогласующего: РолиПодписантов.Ссылка?
    знч ИдентификаторЗаписи: Ууид
    знч ПравилоСогласования: ПравилаСогласования.Ссылка?
    пер ТребуемаяПодпись: ВидыТребуемойПодписи = ВидыТребуемойПодписи.УНЭП
;

структура ГруппаДоступаСогласующего
    обз знч Согласующий: ФизическиеЛица.Ссылка?
    знч Заместители: Множество<ФизическиеЛица.Ссылка>
    знч Сотрудники: Множество<ФизическиеЛица.Ссылка>
;

@ВПроекте
структура ДанныеПодписейДокумента
    пер ПодписьОрганизации: ДанныеПодписиДокумента?
    пер ПодписьРуководителя: ДанныеПодписиДокумента?
    пер ПодписьИсполнителя: ДанныеПодписиДокумента?
    пер ПодписьФизическогоЛица: ДанныеПодписиДокумента?
;

@ВПроекте
структура ДанныеПодписиДокумента
    обз знч Документ: ПодписываемыйДокумент.Ссылка? 
    обз знч Дата: Момент?
    обз знч Ссылка: СогласованияДокументов.Ссылка
    обз знч УчастникСогласования: ФизическиеЛица.Ссылка?
    обз знч УчастникСогласованияСтрокой: Строка
    обз знч СсылкаНаПодпись: ПодписиДокументов.Ссылка?
    обз знч Подпись: ДвоичныйОбъект.Ссылка?
    обз знч РольПодписанта: РолиПодписантов.Ссылка?
    обз знч НомерШагаСогласования: Число
    обз знч Результат: РезультатыСогласования
    обз знч ИдентификаторЭлектронногоДокумента: Строка
    обз знч МЧД: МашиночитаемыеДоверенности.Ссылка?
    знч Комментарий: Строка
;

@ВПроекте
структура ДанныеПодписываемогоДокумента
    знч Организация: Организации.Ссылка?
    знч Файл: Файлы.Ссылка?
    знч ИдентификаторЭлектронногоДокумента: Строка
;

@ВПроекте
@НаСервере
метод КоличествоДокументовНаСогласовании(Согласующий: ФизическиеЛица.Ссылка): Число
    возврат ДокументыНаСогласовании(Согласующий).Размер()
;

@ВПроекте
@НаСервере
метод ДокументыНаСогласовании(Согласующий: ФизическиеЛица.Ссылка): ЧитаемыйМассив<ПодписываемыйДокумент.Ссылка>
    знч Документы: Массив<ПодписываемыйДокумент.Ссылка>
    для Сервис из СогласованияПользователь.ПолучитьСервисы()
        Документы.ДобавитьВсе(Сервис.ДокументыНаСогласовании(Согласующий))
    ;
    
    возврат Документы
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ДокументыСогласованные(Согласующий: ФизическиеЛица.Ссылка): ЧитаемыйМассив<ПодписываемыйДокумент.Ссылка>
    знч Документы: Массив<ПодписываемыйДокумент.Ссылка>
    для Сервис из СогласованияПользователь.ПолучитьСервисы()
        Документы.ДобавитьВсе(Сервис.ДокументыСогласованные(Согласующий))
    ;
    
    возврат Документы
;

@ВПроекте
@НаСервере @НаКлиенте
структура СостояниеСогласованияДляСогласующего
    обз знч ТребуетсяСогласование: Булево
    обз знч ДанныеСогласующего: ДанныеСогласующего?
;

@ВПроекте
@НаСервере
метод СостояниеСогласования(Документ: ПодписываемыйДокумент.Ссылка, Согласующий: ФизическиеЛица.Ссылка): СостояниеСогласованияДляСогласующего
    знч Состояние = СостДокументов.СостояниеДокумента(Документ как Справочник.Ссылка)
    знч ДанныеСогласующего = ДанныеСогласующего(Документ, Согласующий)
    знч ТребуетсяСогласование = Состояние == СостоянияДокумента.Подготовлен и ДанныеСогласующего != Неопределено
    возврат новый СостояниеСогласованияДляСогласующего(ТребуетсяСогласование, ДанныеСогласующего)
;

@ВПроекте
@НаКлиенте
метод СогласоватьДокументы(Документы: ЧитаемоеМножество<ПодписываемыйДокумент.Ссылка>, Согласующий: ФизическиеЛица.Ссылка): Множество<ПодписываемыйДокумент.Ссылка>
    знч ДокументыНеТребующиеПодписания = ДокументыНеТребующиеПодписанияВСервисеПодписания(Документы, Согласующий)
    знч СогласованныеДокументы = новый Множество(ДокументыНеТребующиеПодписания.ОзнакомленныеБезПодписания)
    знч ДокументыДляПодписания = новый Множество<ПодписываемыйДокумент.Ссылка>()
    для Документ из Документы
        если не ДокументыНеТребующиеПодписания.НеТребуютСогласования.Содержит(Документ)
            и не ДокументыНеТребующиеПодписания.ОзнакомленныеБезПодписания.Содержит(Документ)
            
            ДокументыДляПодписания.Добавить(Документ)
        ;
    ;
    если не ДокументыДляПодписания.Пусто()
        если Криптография.ПараметрыСеанса().ВидЭлектроннойПодписи == ВидыЭлектронныхПодписей.УНЭПИнформационнойСистемы
            пер ПарольЗакрытогоКлюча = ВвестиПарольЗакрытогоКлюча(Документы, Согласующий)
            если ПарольЗакрытогоКлюча == Неопределено
                возврат СогласованныеДокументы
            ;  
            СогласованныеДокументы.ДобавитьВсе(
                СогласоватьДокументы(ДокументыДляПодписания, Согласующий, ПарольЗакрытогоКлюча))
            УведомитьПослеСогласованияДокументов(Документы, СогласованныеДокументы)
            ОповеститьПослеСогласованияДокументов(СогласованныеДокументы)
        иначе
            СогласованныеДокументы.ДобавитьВсе(ДокументыДляПодписания)
            Криптография.УстановитьПодписиДокументовВСервисеПодписания(ДокументыДляПодписания, Согласующий)
        ;
    ;
    возврат СогласованныеДокументы
;

@НаСервере @НаКлиенте
структура ДокументыНеТребующиеПодписанияВСервисе
    знч НеТребуютСогласования: Множество<ПодписываемыйДокумент.Ссылка>
    знч ОзнакомленныеБезПодписания: Множество<ПодписываемыйДокумент.Ссылка>
;

@НаСервере @ДоступноСКлиента
метод ДокументыНеТребующиеПодписанияВСервисеПодписания(Документы: ЧитаемоеМножество<ПодписываемыйДокумент.Ссылка>, Согласующий: ФизическиеЛица.Ссылка):
    ДокументыНеТребующиеПодписанияВСервисе
    
    знч ДокументыНеТребующиеПодписания = новый ДокументыНеТребующиеПодписанияВСервисе()
    для Документ из Документы
        знч Состояние = СостояниеСогласования(Документ, Согласующий)
        если Состояние.ТребуетсяСогласование
            если не ТребуетсяПодпись(Состояние.ДанныеСогласующего!)
                ДокументыНеТребующиеПодписания.ОзнакомленныеБезПодписания.Добавить(Документ)
                ОзнакомитьсяБезПодписания(Документ, Состояние.ДанныеСогласующего!)
            ;
        иначе
            ДокументыНеТребующиеПодписания.НеТребуютСогласования.Добавить(Документ)
        ; 
    ;
    возврат ДокументыНеТребующиеПодписания
;

@ВПроекте
@НаКлиенте
метод ОтклонитьДокументы(Документы: ЧитаемоеМножество<ПодписываемыйДокумент.Ссылка>, Согласующий: ФизическиеЛица.Ссылка)
    знч Комментарий = ПричинаОтказа.Ввести()
    если Комментарий == Неопределено
         возврат
    ;
    знч ОтклоненныеДокументы = ОтклонитьДокументы(Документы, Согласующий, Комментарий!)
    УведомитьПослеОтклоненияДокументов(Документы, ОтклоненныеДокументы)
    ОповеститьПослеОтклоненияДокументов(ОтклоненныеДокументы)
;

@НаСервере @НаКлиенте
метод ТребуетсяПодпись(ДанныеСогласующего: ДанныеСогласующего): Булево
    возврат ДанныеСогласующего.ТребуемаяПодпись != ВидыТребуемойПодписи.НеТребуется     
;

@НаСервере @ДоступноСКлиента
метод ТребуетсяПодписьХотяБыОдногоДокумента(Документы: ЧитаемоеМножество<ПодписываемыйДокумент.Ссылка>, Согласующий: ФизическиеЛица.Ссылка): Булево
    для Документ из Документы
        знч СостояниеСогласования = СостояниеСогласования(Документ, Согласующий)
        если СостояниеСогласования.ТребуетсяСогласование и ТребуетсяПодпись(СостояниеСогласования.ДанныеСогласующего!)
            возврат Истина
        ;
    ;    
    возврат Ложь
;

@НаКлиенте
метод ВвестиПарольЗакрытогоКлюча(Документы: ЧитаемоеМножество<ПодписываемыйДокумент.Ссылка>, Согласующий: ФизическиеЛица.Ссылка): Строка?
    если ТребуетсяПодписьХотяБыОдногоДокумента(Документы, Согласующий)
        если Криптография.ВвестиПарольЗакрытогоКлюча(Согласующий, {})
            возврат Криптография.ПараметрыСеанса().ПарольЗакрытогоКлючаПользователя
        иначе
            возврат Неопределено
        ;
    иначе
        возврат ""
    ;     
;

@НаКлиенте
метод УведомитьПослеСогласованияДокументов(СогласуемыеДокументы: ЧитаемоеМножество<ПодписываемыйДокумент.Ссылка>, СогласованныеДокументы: ЧитаемоеМножество<ПодписываемыйДокумент.Ссылка>)
    знч ЗаголовокУведомления = "Согласование документов"
    если СогласуемыеДокументы.Пусто()
        СтандартныеФормы.ПоказатьУведомление(ЗаголовокУведомления, "Нет документов для согласования", ОценкаИнформации.Предупреждающая)
    иначе если СогласуемыеДокументы.Размер() == СогласованныеДокументы.Размер()
        знч Согласовано = СогласованныеДокументы.Размер()
        СтандартныеФормы.ПоказатьУведомление(ЗаголовокУведомления, "Успешно согласовано: ${КоличествоДокументов(Согласовано)}", ОценкаИнформации.Положительная)
    иначе
        знч Согласовано = СогласованныеДокументы.Размер()
        знч НеСогласовано = СогласуемыеДокументы.Размер() - СогласованныеДокументы.Размер()
        если Согласовано == 0
            СтандартныеФормы.ПоказатьУведомление(ЗаголовокУведомления, "Не согласовано: ${КоличествоДокументов(НеСогласовано)}", ОценкаИнформации.Отрицательная)
        иначе
            СтандартныеФормы.ПоказатьУведомление(ЗаголовокУведомления, "Успешно согласовано: ${КоличествоДокументов(Согласовано)}. Не согласовано: ${КоличествоДокументов(НеСогласовано)}", ОценкаИнформации.Отрицательная)
        ;
    ;
;

@НаКлиенте
метод УведомитьПослеОтклоненияДокументов(ОтклоняемыеДокументы: ЧитаемоеМножество<ПодписываемыйДокумент.Ссылка>, ОтклоненныеДокументы: ЧитаемоеМножество<ПодписываемыйДокумент.Ссылка>)
    знч ЗаголовокУведомления = "Отклонение документов"
    если ОтклоняемыеДокументы.Пусто()
        СтандартныеФормы.ПоказатьУведомление(ЗаголовокУведомления, "Нет документов для отклонения", ОценкаИнформации.Предупреждающая)
    иначе если ОтклоняемыеДокументы.Размер() == ОтклоненныеДокументы.Размер()
        знч Отклонено = ОтклоненныеДокументы.Размер()
        СтандартныеФормы.ПоказатьУведомление(ЗаголовокУведомления, "Отклонено: ${КоличествоДокументов(Отклонено)}", ОценкаИнформации.Положительная)
    иначе
        знч Отклонено = ОтклоненныеДокументы.Размер()
        знч НеОтклонено = ОтклоняемыеДокументы.Размер() - ОтклоненныеДокументы.Размер()
        если Отклонено == 0
            СтандартныеФормы.ПоказатьУведомление(ЗаголовокУведомления, "Не отклонено: ${КоличествоДокументов(НеОтклонено)}", ОценкаИнформации.Отрицательная)
        иначе
            СтандартныеФормы.ПоказатьУведомление(ЗаголовокУведомления, "Отклонено: ${КоличествоДокументов(Отклонено)}. Не отклонено: ${КоличествоДокументов(НеОтклонено)}", ОценкаИнформации.Отрицательная)
        ;
    ;
    
;

@НаКлиенте
метод ОповеститьПослеСогласованияДокументов(СогласованныеДокументы: ЧитаемоеМножество<ПодписываемыйДокумент.Ссылка>)
    для СогласованныйДокумент из СогласованныеДокументы
        МенеджерГлобальныхКлиентскихСобытий.Оповестить(ДОКУМЕНТ_СОГЛАСОВАН, СогласованныйДокумент)
    ;    
;

@НаКлиенте
метод ОповеститьПослеОтклоненияДокументов(ОтклоненныеДокументы: ЧитаемоеМножество<ПодписываемыйДокумент.Ссылка>)
    для ОтклоненныйДокумент из ОтклоненныеДокументы
        МенеджерГлобальныхКлиентскихСобытий.Оповестить(ДОКУМЕНТ_ОТКЛОНЕН, ОтклоненныйДокумент)
    ;
;

@НаКлиенте @НаСервере
метод КоличествоДокументов(Количество: Число): Строка
    возврат "$Количество ${МенеджерСтрок.ФормаПредметаИсчисления(Количество, "документ", "документа", "документов")}"
;

@НаСервере @ДоступноСКлиента
метод СогласоватьДокументы(Документы: ЧитаемоеМножество<ПодписываемыйДокумент.Ссылка>, Согласующий: ФизическиеЛица.Ссылка, ПарольЗакрытогоКлюча: Строка): Множество<ПодписываемыйДокумент.Ссылка>
    знч СогласованныеДокументы: Множество<ПодписываемыйДокумент.Ссылка>
    для Документ из Документы
        если СогласоватьДокумент(Документ, Согласующий, ПарольЗакрытогоКлюча)
            СогласованныеДокументы.Добавить(Документ)
        ;
    ;
    возврат СогласованныеДокументы
;

@НаСервере 
метод СогласоватьДокумент(Документ: ПодписываемыйДокумент.Ссылка, Согласующий: ФизическиеЛица.Ссылка, ПарольЗакрытогоКлюча: Строка): Булево
    знч СостояниеСогласования = СостояниеСогласования(Документ, Согласующий)
    если СостояниеСогласования.ТребуетсяСогласование
        если ТребуетсяПодпись(СостояниеСогласования.ДанныеСогласующего!)
            ПроверитьНастройкиИПодписатьДокумент(Документ, СостояниеСогласования.ДанныеСогласующего!, ПарольЗакрытогоКлюча)
        иначе
            ОзнакомитьсяБезПодписания(Документ, СостояниеСогласования.ДанныеСогласующего!)
        ;
        возврат Истина
    ;
    возврат Ложь
;

@НаСервере @ДоступноСКлиента
метод ОтклонитьДокументы(Документы: ЧитаемоеМножество<ПодписываемыйДокумент.Ссылка>, Согласующий: ФизическиеЛица.Ссылка, Комментарий: Строка): Множество<ПодписываемыйДокумент.Ссылка>
    знч ОтклоненныеДокументы: Множество<ПодписываемыйДокумент.Ссылка>
    для Документ из Документы
        если ОтклонитьДокумент(Документ, Согласующий, Комментарий)
            ОтклоненныеДокументы.Добавить(Документ)
        ;
    ;   
    возврат ОтклоненныеДокументы
;

@НаСервере
метод ОтклонитьДокумент(Документ: ПодписываемыйДокумент.Ссылка, Согласующий: ФизическиеЛица.Ссылка, Комментарий: Строка): Булево
    знч СостояниеСогласования = СостояниеСогласования(Документ, Согласующий)
    если СостояниеСогласования.ТребуетсяСогласование
        СогласованияДокументов.ОтклонитьДокумент(Документ, СостояниеСогласования.ДанныеСогласующего!, Комментарий)
        возврат Истина
    ;
    возврат Ложь    
;

@НаСервере
метод ВидСогласуемогоЗаявления(Документ: ПодписываемыйДокумент.Ссылка): ВидыСогласуемыхЗаявлений.Ссылка?
    для Сервис из СогласованияПользователь.ПолучитьСервисы()
        знч Вид = Сервис.ВидСогласуемогоЗаявления(Документ)
        если Вид != Неопределено
            возврат Вид!
        ;
    ;
    возврат Неопределено
;

@ВПодсистеме
@НаСервере
метод ДанныеСогласующего(Документ: ПодписываемыйДокумент.Ссылка, Согласующий: ФизическиеЛица.Ссылка): ДанныеСогласующего?
    знч ВидСогласуемогоЗаявления = ВидСогласуемогоЗаявления(Документ)
    если ВидСогласуемогоЗаявления == Неопределено
        возврат Неопределено
    ;
    знч Согласуемый = Согласуемый(Документ)
    если Согласуемый == Неопределено
        возврат Неопределено    
    ;
    знч Согласующие = Согласования.Согласующие(Документ)
    знч НомерШагаСогласования = НомерШагаСогласования(Согласующие)
    знч Согласовавшие = Согласовавшие(Согласующие)
    возврат ДанныеСогласующего(
        Согласующий,
        ВидСогласуемогоЗаявления!,
        Согласуемый!,
        НомерШагаСогласования,
        Согласовавшие)
;

@НаСервере
метод Согласуемый(Документ: ПодписываемыйДокумент.Ссылка): ФизическиеЛица.Ссылка?
    для Сервис из СогласованияПользователь.ПолучитьСервисы()
        знч Согласуемый = Сервис.Согласуемый(Документ)
        если Согласуемый != Неопределено
            возврат Согласуемый!
        ;
    ;
    возврат Неопределено    
;

@НаСервере
метод НомерШагаСогласования(Согласующие: Согласующие): Число
    пер НомерШагаСогласования = 1
    для Согласующий из Согласующие.Согласующие
        НомерШагаСогласования = Макс(НомерШагаСогласования, Согласующий.НомерШагаСогласования)
    ;
    возврат НомерШагаСогласования
;

@НаСервере
метод Согласовавшие(Согласующие: Согласующие): Массив<ФизическиеЛица.Ссылка>
    знч Согласовавшие: Массив<ФизическиеЛица.Ссылка>
    для Согласующий из Согласующие.Согласующие
        если Согласующий.УчастникСогласования != Неопределено
            Согласовавшие.Добавить(Согласующий.УчастникСогласования)
        ;
    ;
    возврат Согласовавшие
;

@ВПроекте
@НаКлиенте
метод ЭтоРежимСогласования(
        Состояние: СостоянияДокумента?, 
        Согласован: Булево, 
        Подписан: Булево, 
        ФизическоеЛицо: ФизическиеЛица.Ссылка?, 
        ТекущееФизическоеЛицо: ФизическиеЛица.Ссылка?,
        ДанныеСогласующего: Согласования.ДанныеСогласующего?): Булево
        
    возврат ДанныеСогласующего != Неопределено и ЭтоРежимСогласования(Состояние, Согласован, Подписан, ФизическоеЛицо, ТекущееФизическоеЛицо)
;

@ВПроекте
@НаКлиенте
метод ЭтоРежимСогласования(
        Состояние: СостоянияДокумента?, 
        Согласован: Булево, 
        Подписан: Булево, 
        ФизическоеЛицо: ФизическиеЛица.Ссылка?, 
        ТекущееФизическоеЛицо: ФизическиеЛица.Ссылка?): Булево
        
    возврат Состояние == СостоянияДокумента.Подготовлен и не Согласован и не Подписан и ФизическоеЛицо != ТекущееФизическоеЛицо
;

@ВПроекте
@НаСервере
метод Согласующие(Владелец: ПодписываемыйДокумент.Ссылка): Согласующие
    пер Согласующие: Согласующие
    Согласующие.Владелец = Владелец
    Согласующие.ЭтоДокументДляОзнакомления = ДокументДляОзнакомления(Владелец)
    пер КоллекцияДанных: Массив<СогласующиеСтрока>
    пер ПодписантыДокумента = СогласованияДокументов.Согласования(Документ = Владелец)
    для Элемент из ПодписантыДокумента
        КоллекцияДанных.Добавить(Элемент)
    ;
    Согласующие.Согласующие = КоллекцияДанных
    возврат Согласующие
;

@ВПроекте
@НаСервере
метод Согласующие(Владелец: ПодписываемыйДокумент.Ссылка, ПравилоСогласования: ПравилаСогласования.Ссылка): Согласующие
    знч Согласующие = Согласующие(Владелец)
    если ОбменДанными.ЭтоОтправляемыйДокумент(Владелец как ИсходящиеДанные.Ссылка)
        возврат Согласующие
    ;
    знч ТекущиеСогласующие = ТекущиеСогласующие(Владелец, ПравилоСогласования)
    для ТекущийСогласующий из ТекущиеСогласующие
        если ТекущийСогласующий.Согласующий == ПользователиСистемы.ТекущееФизическоеЛицо()
            продолжить
        ;
        знч СогласующийСтрока = новый СогласующиеСтрока()
        СогласующийСтрока.УчастникСогласования = ТекущийСогласующий.Согласующий
        СогласующийСтрока.УчастникСогласованияСтрокой = ТекущийСогласующий.Согласующий.Представление()
        СогласующийСтрока.НомерШагаСогласования = ТекущийСогласующий.НомерШага
        СогласующийСтрока.Результат = РезультатыСогласования.НаСогласовании
        Согласующие.Согласующие.Добавить(СогласующийСтрока)
    ;
    
    возврат Согласующие
;

@ВПроекте
@НаСервере
метод Согласующие(Владелец: ПодписываемыйДокумент.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка, Роль: РолиПодписантов.Ссылка): Согласующие
    знч Согласующие: Согласующие
    Согласующие.Владелец = Владелец
    Согласующие.ЭтоДокументДляОзнакомления = ДокументДляОзнакомления(Владелец)
    знч СогласованияФизическогоЛица = СогласованияДокументов.Согласования(Документ = Владелец, ФизическоеЛицо = ФизическоеЛицо)
    знч СогласованияОрганизации = СогласованияДокументов.Согласования(Документ = Владелец, Роль = Роль)
    Согласующие.Согласующие.ДобавитьВсе(СогласованияФизическогоЛица)
    Согласующие.Согласующие.ДобавитьВсе(СогласованияОрганизации)
    возврат Согласующие
;

@ВПроекте
@НаСервере
метод Согласующие(Владелец: ПодписываемыйДокумент.Ссылка, ВидСогласуемогоЗаявления: ВидыСогласуемыхЗаявлений.Ссылка, Согласуемый: ФизическиеЛица.Ссылка): Согласующие
    знч Согласующие = Согласующие(Владелец)
    знч Участники: Множество<ФизическиеЛица.Ссылка?>
    Согласующие.Согласующие.ДляКаждого(Согласующий -> Участники.Добавить(Согласующий.УчастникСогласования))
    если ОбменДанными.ЭтоОтправляемыйДокумент(Владелец как ИсходящиеДанные.Ссылка)
        возврат Согласующие
    ;
    знч ТекущиеСогласующие = ТекущиеСогласующие(Владелец, ВидСогласуемогоЗаявления, Согласуемый)
    для ТекущийСогласующий из ТекущиеСогласующие
        если ТекущийСогласующий.Согласующий == ПользователиСистемы.ТекущееФизическоеЛицо()
            продолжить
        ;
        
        если Участники.Содержит(ТекущийСогласующий.Согласующий)
            продолжить
        ;
        
        Участники.Добавить(ТекущийСогласующий.Согласующий)
        
        знч СогласующийСтрока = новый СогласующиеСтрока()
        СогласующийСтрока.УчастникСогласования = ТекущийСогласующий.Согласующий
        СогласующийСтрока.УчастникСогласованияСтрокой = ТекущийСогласующий.Согласующий.Представление()
        СогласующийСтрока.НомерШагаСогласования = ТекущийСогласующий.НомерШага
        СогласующийСтрока.Результат = РезультатыСогласования.НаСогласовании
        Согласующие.Согласующие.Добавить(СогласующийСтрока)
    ;
    
    возврат Согласующие
;

@НаСервере
метод ДокументДляОзнакомления(Владелец: ПодписываемыйДокумент.Ссылка): Булево
    для Сервис из СогласованияПользователь.ПолучитьСервисы()
        если Сервис.ДокументДляОзнакомления(Владелец)
            возврат Истина
        ;
    ;
    возврат Ложь
;

@ВПроекте
@НаСервере
метод ДокументПолностьюСогласован(Документ: Сущность.Ключ, ПравилоСогласования: ПравилаСогласования.Ссылка): Булево
    возврат ТекущиеСогласующие(Документ, ПравилоСогласования).Пусто()
;

@ВПроекте
@НаСервере
метод ДокументПолностьюСогласован(Документ: Сущность.Ключ, ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка, Согласуемый: ФизическиеЛица.Ссылка): Булево
    возврат ТекущиеСогласующие(Документ, ВидЗаявления, Согласуемый).Пусто()
;

@ВПроекте
@НаСервере
метод ТекущиеСогласующие(Документ: Сущность.Ключ, ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка, Согласуемый: ФизическиеЛица.Ссылка): ЧитаемыйМассив<Согласования.ДанныеСогласующего>
    знч ДанныеШаговСогласования = ДанныеШаговСогласования(ВидЗаявления, Согласуемый)
    возврат ТекущиеСогласующие(Документ, ДанныеШаговСогласования)
;

@ВПроекте
@НаСервере
метод ТекущиеСогласующие(Документ: Сущность.Ключ, ПравилоСогласования: ПравилаСогласования.Ссылка): ЧитаемыйМассив<Согласования.ДанныеСогласующего>
    знч ДанныеШаговСогласования = ДанныеШаговСогласования(ПравилоСогласования)
    возврат ТекущиеСогласующие(Документ, ДанныеШаговСогласования)
;

@ВПроекте
@НаСервере
метод ТекущиеСогласующие(Документ: Сущность.Ключ, ДанныеШаговСогласования: ЧитаемоеСоответствие<Число, ЧитаемыйМассив<ДанныеШагаСогласования>>): ЧитаемыйМассив<Согласования.ДанныеСогласующего>
    знч Согласующие: Массив<Согласования.ДанныеСогласующего>
    знч ДанныеПодписей = СогласованияДокументов.ДанныеПодписейДокумента(Документ)
    знч УжеСогласовали: Массив<ФизическиеЛица.Ссылка>
    для ДанныеПодписи из ДанныеПодписей
        если ДанныеПодписи.УчастникСогласования != Неопределено
            и ДанныеПодписи.Результат == РезультатыСогласования.Согласовано
            
            УжеСогласовали.Добавить(ДанныеПодписи.УчастникСогласования)
        ;
    ;
    
    для ДанныеШага из ДанныеШаговСогласования
        если не ШагВыполнен(ДанныеШага.Значение, УжеСогласовали)
            для Согласующий из ДанныеШага.Значение
                если Согласующий.Согласующий != Неопределено
                    и не УжеСогласовали.Содержит(Согласующий.Согласующий)
                    Согласующие.Добавить(новый Согласования.ДанныеСогласующего(
                        Согласующий.Согласующий,
                        Согласующий.РольСогласующего,
                        ДанныеШага.Ключ,
                        Согласующий.ТребуемаяПодпись))
                ;
                
                если Согласующий.ПервичныйСогласующий != Неопределено
                    и не УжеСогласовали.Содержит(Согласующий.ПервичныйСогласующий)
                    и (Согласующий.СпособЗамещения == СпособыЗамещения.ВместеССогласующим
                        или Согласующий.Согласующий == Неопределено)
                    
                    Согласующие.Добавить(новый Согласования.ДанныеСогласующего(
                        Согласующий.ПервичныйСогласующий,
                        Согласующий.РольСогласующего,
                        ДанныеШага.Ключ,
                        Согласующий.ТребуемаяПодпись))
                ;
            ;
            прервать
        ;
    ;
    
    возврат Согласующие
;

@ВПроекте
метод УчастникСогласованияСтрокой(Фамилия: Строка, Имя: Строка, Отчество: Строка, ИнициалыИмени: Строка): Строка
    знч ФИО = новый ФизЛица.ФИО(Фамилия, Имя, Отчество, ИнициалыИмени)
    возврат ФИО.ПредставлениеИмени(ФизЛица.ВариантПредставленияИмени.ФамилияИОРаздельно)
;

@ВПроекте
@НаСервере
метод ВсеСогласующие(Владелец: ПодписываемыйДокумент.Ссылка, Правило: ПравилаСогласования.Ссылка): Согласующие
   
    знч Согласующие: Согласующие
    Согласующие.Владелец = Владелец
    Согласующие.ЭтоДокументДляОзнакомления = ДокументДляОзнакомления(Владелец)
    
    знч СогласовалиОтклонили: Соответствие<ФизическиеЛица.Ссылка, СогласующиеСтрока>   
    для Элемент из СогласованияДокументов.Согласования(Документ = Владелец)
        если Элемент.УчастникСогласования != Неопределено
            СогласовалиОтклонили.Вставить(Элемент.УчастникСогласования, Элемент)    
        ;  
    ;
    
    знч НаСогласовании: Множество<ФизическиеЛица.Ссылка>
    для ДанныеШага из ДанныеШаговСогласования(Правило)
        для Согласующий из ДанныеШага.Значение
            если Согласующий.Согласующий != Неопределено
                если СогласовалиОтклонили.СодержитКлюч(Согласующий.Согласующий)
                    Согласующие.Согласующие.Добавить(СогласовалиОтклонили.Получить(Согласующий.Согласующий))
                иначе
                    НаСогласовании.Добавить(Согласующий.Согласующий)
                    знч СогласующийСтрока = новый СогласующиеСтрока()
                    СогласующийСтрока.УчастникСогласования = Согласующий.Согласующий
                    СогласующийСтрока.УчастникСогласованияСтрокой = Согласующий.Согласующий.Представление()
                    СогласующийСтрока.УчастникСогласованияДолжность = Сотрудники.СотрудникиФизическогоЛицаОрганизации(СогласующийСтрока.УчастникСогласования).ПервыйИлиУмолчание()?.Должность
                    СогласующийСтрока.НомерШагаСогласования = Согласующий.ШагСогласования
                    СогласующийСтрока.Результат = РезультатыСогласования.НаСогласовании
                    СогласующийСтрока.РольПодписанта = Согласующий.РольСогласующего
                    Согласующие.Согласующие.Добавить(СогласующийСтрока) 
                ;   
            ;
            
            если Согласующий.ПервичныйСогласующий != Неопределено
                и (Согласующий.СпособЗамещения == СпособыЗамещения.ВместеССогласующим
                    или Согласующий.Согласующий == Неопределено)
                если СогласовалиОтклонили.СодержитКлюч(Согласующий.ПервичныйСогласующий)
                    Согласующие.Согласующие.Добавить(СогласовалиОтклонили.Получить(Согласующий.ПервичныйСогласующий))
                иначе
                    НаСогласовании.Добавить(Согласующий.ПервичныйСогласующий)
                    знч СогласующийСтрока = новый СогласующиеСтрока()
                    СогласующийСтрока.УчастникСогласования = Согласующий.ПервичныйСогласующий
                    СогласующийСтрока.УчастникСогласованияСтрокой = Согласующий.ПервичныйСогласующий.Представление()
                    СогласующийСтрока.УчастникСогласованияДолжность = Сотрудники.СотрудникиФизическогоЛицаОрганизации(СогласующийСтрока.УчастникСогласования).ПервыйИлиУмолчание()?.Должность
                    СогласующийСтрока.НомерШагаСогласования = Согласующий.ШагСогласования
                    СогласующийСтрока.Результат = РезультатыСогласования.НаСогласовании
                    СогласующийСтрока.РольПодписанта = Согласующий.РольСогласующего
                    Согласующие.Согласующие.Добавить(СогласующийСтрока) 
                ;
            ;
        ;
    ;
    
    знч ДанныеФизлиц = ФизЛица.ДанныеФизическихЛиц(НаСогласовании, новый ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц(ЛичныеДанные = Истина))
    для Элемент из Согласующие.Согласующие
        если ДанныеФизлиц.СодержитКлюч(Элемент.УчастникСогласования)
               знч ДанныеФизлица =  ДанныеФизлиц.Получить(Элемент.УчастникСогласования)
               Элемент.Миниатюра = Файлы.СведенияОФайле(ДанныеФизлица.ЛичныеДанные.Миниатюра).Хранилище
               Элемент.УчастникСогласованияСтрокой = УчастникСогласованияСтрокой(
                    ДанныеФизлица.ЛичныеДанные.ФИО.Фамилия,
                    ДанныеФизлица.ЛичныеДанные.ФИО.Имя,
                    ДанныеФизлица.ЛичныеДанные.ФИО.Отчество,
                    ДанныеФизлица.ЛичныеДанные.ФИО.ИнициалыИмени)
        ;
    ;
    возврат Согласующие
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СотрудникУчаствуетВСогласованиях(Согласующий: ФизическиеЛица.Ссылка, ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка? = Неопределено): Булево
    знч Запрос = Запрос{
        Выбрать Первые 1
            1 как Значение
        Из
            СогласующиеЗаявленийСотрудников
        Где
            (Согласующий == %Согласующий
                или ПервичныйСогласующий == %Согласующий)
            и (%ВидЗаявления == Неопределено
                или ВидСогласуемогоЗаявления == %ВидЗаявления)}
    

    исп Результат = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    возврат (не РезультатСтроки.Пусто())
;

@НаСервере
метод ТребуетсяСогласование(Согласующий: ФизическиеЛица.Ссылка, ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка, Согласуемый: ФизическиеЛица.Ссылка,
    НомерШага: Число, УжеСогласовали: ЧитаемыйМассив<ФизическиеЛица.Ссылка>): Булево
    
    возврат ДанныеСогласующего(Согласующий, ВидЗаявления, Согласуемый, НомерШага, УжеСогласовали) != Неопределено
;

@ВПроекте
@НаСервере
метод ДанныеСогласующего(Согласующий: ФизическиеЛица.Ссылка, ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка, Согласуемый: ФизическиеЛица.Ссылка): Согласования.ДанныеСогласующего?
    возврат ДанныеСогласующего(Согласующий, ВидЗаявления, Согласуемый, 1, [])
;

@ВПроекте
@НаСервере
метод ДанныеСогласующего(Согласующий: ФизическиеЛица.Ссылка, ПравилоСогласования: ПравилаСогласования.Ссылка,
    НомерШага: Число, УжеСогласовали: ЧитаемыйМассив<ФизическиеЛица.Ссылка>): Согласования.ДанныеСогласующего?
    
    знч ДанныеШага = ДанныеШагаСогласования(ПравилоСогласования, НомерШага)
    если ДанныеШага.Пусто()
        если НомерШага < КоличествоШаговСогласования(ПравилоСогласования)
            возврат ДанныеСогласующего(Согласующий, ПравилоСогласования, НомерШага + 1, УжеСогласовали)
        ;
        возврат Неопределено
    ;
    
    если ШагВыполнен(ДанныеШага, УжеСогласовали)
        возврат ДанныеСогласующего(Согласующий, ПравилоСогласования, ДанныеШага.Первый().ШагСогласования + 1, УжеСогласовали)
    ;
    
    если УжеСогласовали.Содержит(Согласующий)
        возврат Неопределено
    ;
    
    знч ДанныеСогласующего = НайтиПодписанта(Согласующий, ДанныеШага)
    если ДанныеСогласующего == Неопределено
        возврат Неопределено
    ;
        
    если ДанныеШага[0].ТипШага == ТипыШаговСогласования.ЛюбойИзСогласующих
        и СогласовалХотьОдинСотрудник(ДанныеШага, УжеСогласовали)
        
        возврат Неопределено
    ;
    
    возврат ДанныеСогласующего
;

@ВПроекте
@НаСервере
метод ДанныеСогласующего(Согласующий: ФизическиеЛица.Ссылка, ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка, Согласуемый: ФизическиеЛица.Ссылка,
    НомерШага: Число, УжеСогласовали: ЧитаемыйМассив<ФизическиеЛица.Ссылка>): Согласования.ДанныеСогласующего?
    
    знч ДанныеШага = ДанныеШагаСогласования(ВидЗаявления, Согласуемый, НомерШага)
    если ДанныеШага.Пусто()
        если НомерШага < КоличествоШаговСогласования(ВидЗаявления, Согласуемый)
            возврат ДанныеСогласующего(Согласующий, ВидЗаявления, Согласуемый, НомерШага + 1, УжеСогласовали)
        ;
        возврат Неопределено
    ;
    
    если ШагВыполнен(ДанныеШага, УжеСогласовали)
        возврат ДанныеСогласующего(Согласующий, ВидЗаявления, Согласуемый, ДанныеШага.Первый().ШагСогласования + 1, УжеСогласовали)
    ;
    
    если УжеСогласовали.Содержит(Согласующий)
        возврат Неопределено
    ;
    
    знч ДанныеСогласующего = НайтиПодписанта(Согласующий, ДанныеШага)
    если ДанныеСогласующего == Неопределено
        возврат Неопределено
    ;
        
    если ДанныеШага[0].ТипШага == ТипыШаговСогласования.ЛюбойИзСогласующих
        и СогласовалХотьОдинСотрудник(ДанныеШага, УжеСогласовали)
        
        возврат Неопределено
    ;
    
    возврат ДанныеСогласующего
;

@НаСервере
метод ШагВыполнен(ДанныеШага: ЧитаемыйМассив<ДанныеШагаСогласования>, УжеСогласовали: ЧитаемыйМассив<ФизическиеЛица.Ссылка>): Булево
    если ДанныеШага.Пусто()
        возврат Истина
    ;
    
    если ДанныеШага[0].ТипШага == ТипыШаговСогласования.ЛюбойИзСогласующих
        возврат СогласовалХотьОдинСотрудник(ДанныеШага, УжеСогласовали)
    иначе
        возврат СогласовалиВсеСотрудники(ДанныеШага, УжеСогласовали)
    ;
;

@НаСервере
метод СогласовалиВсеСотрудники(ДанныеШага: ЧитаемыйМассив<ДанныеШагаСогласования>, УжеСогласовали: ЧитаемыйМассив<ФизическиеЛица.Ссылка>): Булево
    для ЭлементШага из ДанныеШага
        если не ЭлементШага.Согласующий == Неопределено и не УжеСогласовали.Содержит(ЭлементШага.Согласующий)
            возврат Ложь
        ;
        
        если ЭлементШага.СпособЗамещения == СпособыЗамещения.ВместеССогласующим
            и не ЭлементШага.ПервичныйСогласующий == Неопределено
            и не УжеСогласовали.Содержит(ЭлементШага.ПервичныйСогласующий)
            
            возврат Ложь
        ;
    ;
    
    возврат Истина
;

@НаСервере
метод СогласовалХотьОдинСотрудник(ДанныеШага: ЧитаемыйМассив<ДанныеШагаСогласования>, УжеСогласовали: ЧитаемыйМассив<ФизическиеЛица.Ссылка>): Булево
    если ДанныеШага.Пусто()
        возврат Истина
    ;
    
    для ЭлементШага из ДанныеШага
        если не ЭлементШага.Согласующий == Неопределено и УжеСогласовали.Содержит(ЭлементШага.Согласующий)
            возврат Истина
        ;
        
        если ЭлементШага.СпособЗамещения == СпособыЗамещения.ВместеССогласующим
            и не ЭлементШага.ПервичныйСогласующий == Неопределено
            и УжеСогласовали.Содержит(ЭлементШага.ПервичныйСогласующий)
            
            возврат Истина
        ;
    ;
    
    возврат Ложь
;
    
@НаСервере
метод НайтиПодписанта(Согласующий: ФизическиеЛица.Ссылка, ДанныеШага: ЧитаемыйМассив<ДанныеШагаСогласования>): Согласования.ДанныеСогласующего?
    для ЭлементШага из ДанныеШага
        если ЭлементШага.Согласующий == Согласующий
            возврат новый Согласования.ДанныеСогласующего(Согласующий, ЭлементШага.РольСогласующего, ЭлементШага.ШагСогласования, ЭлементШага.ТребуемаяПодпись)
        ;
        
        если ЭлементШага.СпособЗамещения == СпособыЗамещения.ВместеССогласующим
            и Согласующий == ЭлементШага.ПервичныйСогласующий        
            возврат новый Согласования.ДанныеСогласующего(Согласующий, ЭлементШага.РольСогласующего, ЭлементШага.ШагСогласования, ЭлементШага.ТребуемаяПодпись)
        ;
    ;
    
    возврат Неопределено
;

@НаСервере
метод КоличествоШаговСогласования(ПравилоСогласования: ПравилаСогласования.Ссылка): Число
    знч Запрос = Запрос{
        Выбрать Первые 1
            ШагСогласования
        Из
            СогласующиеЗаявленийСотрудников
        Где
            ПравилоСогласования == %ПравилоСогласования
        Упорядочить по
            ШагСогласования Убыв}
    
    исп Результат = Запрос.Выполнить()
    возврат Результат.ЕдинственныйИлиУмолчание()?.ШагСогласования ?? 0
;

@НаСервере
метод КоличествоШаговСогласования(ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка, Согласуемый: ФизическиеЛица.Ссылка): Число
    знч Запрос = Запрос{
        Выбрать Первые 1
            ШагСогласования
        Из
            СогласующиеЗаявленийСотрудников
        Где
            ВидСогласуемогоЗаявления == %ВидЗаявления
            И Сотрудник == %Согласуемый
        Упорядочить по
            ШагСогласования Убыв}
    
    исп Результат = Запрос.Выполнить()
    возврат Результат.ЕдинственныйИлиУмолчание()?.ШагСогласования ?? 0
;

@НаСервере
метод ДанныеШаговСогласования(ПравилоСогласования: ПравилаСогласования.Ссылка): ЧитаемоеСоответствие<Число, ЧитаемыйМассив<ДанныеШагаСогласования>>
    знч ДанныеШагов: Соответствие<Число, Массив<ДанныеШагаСогласования>>
    
    знч Запрос = Запрос{
        Выбрать
            ИдентификаторЗаписи,
            ШагСогласования,
            ТипШага,
            Согласующий,
            ПервичныйСогласующий,
            СпособЗамещения,
            РольСогласующего,
            ТребуемаяПодпись
        Из
            СогласующиеЗаявленийСотрудников
        Где
            ПравилоСогласования == %ПравилоСогласования
        Упорядочить по
            ШагСогласования}
    

    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        знч ШагиСогласования = ДанныеШагов.ВставитьЕслиОтсутствует(РезультатСтрока.ШагСогласования,
            новый Массив<ДанныеШагаСогласования>())
        
        пер Согласующий: ФизическиеЛица.Ссылка?
        пер ПервичныйСогласующий: ФизическиеЛица.Ссылка?
        если СогласованияДокументов.МожетУчаствоватьВСогласовании(РезультатСтрока.Согласующий)
            Согласующий = РезультатСтрока.Согласующий
        ;
        
        если СогласованияДокументов.МожетУчаствоватьВСогласовании(РезультатСтрока.ПервичныйСогласующий)    
            ПервичныйСогласующий = РезультатСтрока.ПервичныйСогласующий
        ;
        
        если Согласующий == Неопределено и ПервичныйСогласующий == Неопределено
            продолжить
        ;
         
        ШагиСогласования.Добавить(новый ДанныеШагаСогласования(
            ИдентификаторЗаписи = РезультатСтрока.ИдентификаторЗаписи,
            ТипШага = РезультатСтрока.ТипШага,
            ШагСогласования = РезультатСтрока.ШагСогласования,
            Согласующий = Согласующий,
            ПервичныйСогласующий = ПервичныйСогласующий,
            СпособЗамещения = РезультатСтрока.СпособЗамещения,
            РольСогласующего = РезультатСтрока.РольСогласующего,
            ТребуемаяПодпись = РезультатСтрока.ТребуемаяПодпись
        ))
    ;
    
    возврат ДанныеШагов
;

@НаСервере
метод ДанныеШаговСогласования(ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка, Согласуемый: ФизическиеЛица.Ссылка): ЧитаемоеСоответствие<Число, ЧитаемыйМассив<ДанныеШагаСогласования>>
    знч ДанныеШагов: Соответствие<Число, Массив<ДанныеШагаСогласования>>
    
    знч Запрос = Запрос{
        Выбрать
            ИдентификаторЗаписи,
            ШагСогласования,
            ТипШага,
            Согласующий,
            ПервичныйСогласующий,
            СпособЗамещения,
            РольСогласующего,
            ТребуемаяПодпись
        Из
            СогласующиеЗаявленийСотрудников
        Где
            ВидСогласуемогоЗаявления == %ВидЗаявления
            И Сотрудник == %Согласуемый
        Упорядочить по
            ШагСогласования}
    

    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        знч ШагиСогласования = ДанныеШагов.ВставитьЕслиОтсутствует(РезультатСтрока.ШагСогласования,
            новый Массив<ДанныеШагаСогласования>())
        
        пер Согласующий: ФизическиеЛица.Ссылка?
        пер ПервичныйСогласующий: ФизическиеЛица.Ссылка?
        если СогласованияДокументов.МожетУчаствоватьВСогласовании(РезультатСтрока.Согласующий)
            и РезультатСтрока.Согласующий != Согласуемый
            
            Согласующий = РезультатСтрока.Согласующий
        ;
        
        если СогласованияДокументов.МожетУчаствоватьВСогласовании(РезультатСтрока.ПервичныйСогласующий)    
            и РезультатСтрока.ПервичныйСогласующий != Согласуемый
            
            ПервичныйСогласующий = РезультатСтрока.ПервичныйСогласующий
        ;
        
        если Согласующий == Неопределено и ПервичныйСогласующий == Неопределено
            продолжить
        ;
             
        ШагиСогласования.Добавить(новый ДанныеШагаСогласования(
            ИдентификаторЗаписи = РезультатСтрока.ИдентификаторЗаписи,
            ТипШага = РезультатСтрока.ТипШага,
            ШагСогласования = РезультатСтрока.ШагСогласования,
            Согласующий = Согласующий,
            ПервичныйСогласующий = ПервичныйСогласующий,
            СпособЗамещения = РезультатСтрока.СпособЗамещения,
            РольСогласующего = РезультатСтрока.РольСогласующего,
            ТребуемаяПодпись = РезультатСтрока.ТребуемаяПодпись
        ))
    ;
    
    возврат ДанныеШагов
;

@НаСервере
метод ДанныеШагаСогласования(ПравилоСогласования: ПравилаСогласования.Ссылка, НомерШага: Число): ЧитаемыйМассив<ДанныеШагаСогласования>
    знч ДанныеШага: Массив<ДанныеШагаСогласования>
    
    знч Запрос = Запрос{
        Выбрать
            ИдентификаторЗаписи,
            ТипШага,
            Согласующий,
            ПервичныйСогласующий,
            РольСогласующего,
            СпособЗамещения,
            ШагСогласования,
            ТребуемаяПодпись
        Из
            СогласующиеЗаявленийСотрудников
        Где
            ПравилоСогласования == %ПравилоСогласования
            И ШагСогласования == %НомерШага
        Упорядочить По
            ШагСогласования}
    

    исп Результат = Запрос.Выполнить()
    пер ТекущийНомерШага: Число?
    для РезультатСтрока из Результат
        если ТекущийНомерШага == Неопределено
            ТекущийНомерШага = РезультатСтрока.ШагСогласования
        иначе если ТекущийНомерШага != РезультатСтрока.ШагСогласования
            прервать
        ;
        
        пер Согласующий: ФизическиеЛица.Ссылка?
        пер ПервичныйСогласующий: ФизическиеЛица.Ссылка?
        если СогласованияДокументов.МожетУчаствоватьВСогласовании(РезультатСтрока.Согласующий)
            Согласующий = РезультатСтрока.Согласующий
        ;
        
        если СогласованияДокументов.МожетУчаствоватьВСогласовании(РезультатСтрока.ПервичныйСогласующий)    
            ПервичныйСогласующий = РезультатСтрока.ПервичныйСогласующий
        ;
        
        если Согласующий == Неопределено и ПервичныйСогласующий == Неопределено
            продолжить
        ;
        
        ДанныеШага.Добавить(новый ДанныеШагаСогласования(
            ИдентификаторЗаписи = РезультатСтрока.ИдентификаторЗаписи,
            ТипШага = РезультатСтрока.ТипШага,
            ШагСогласования = РезультатСтрока.ШагСогласования,
            Согласующий = Согласующий,
            ПервичныйСогласующий = ПервичныйСогласующий,
            СпособЗамещения = РезультатСтрока.СпособЗамещения,
            РольСогласующего = РезультатСтрока.РольСогласующего,
            ТребуемаяПодпись = РезультатСтрока.ТребуемаяПодпись
        ))
    ;
    
    возврат ДанныеШага
;

@НаСервере
метод ДанныеШагаСогласования(ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка, Согласуемый: ФизическиеЛица.Ссылка, НомерШага: Число): ЧитаемыйМассив<ДанныеШагаСогласования>
    знч ДанныеШага: Массив<ДанныеШагаСогласования>
    
    знч Запрос = Запрос{
        Выбрать
            ИдентификаторЗаписи,
            ТипШага,
            Согласующий,
            ПервичныйСогласующий,
            РольСогласующего,
            СпособЗамещения,
            ШагСогласования,
            ТребуемаяПодпись
        Из
            СогласующиеЗаявленийСотрудников
        Где
            ВидСогласуемогоЗаявления == %ВидЗаявления
            И Сотрудник == %Согласуемый
            И ШагСогласования == %НомерШага
        Упорядочить По
            ШагСогласования}
    

    исп Результат = Запрос.Выполнить()
    пер ТекущийНомерШага: Число?
    для РезультатСтрока из Результат
        если ТекущийНомерШага == Неопределено
            ТекущийНомерШага = РезультатСтрока.ШагСогласования
        иначе если ТекущийНомерШага != РезультатСтрока.ШагСогласования
            прервать
        ;
        
        пер Согласующий: ФизическиеЛица.Ссылка?
        пер ПервичныйСогласующий: ФизическиеЛица.Ссылка?
        если СогласованияДокументов.МожетУчаствоватьВСогласовании(РезультатСтрока.Согласующий)
            Согласующий = РезультатСтрока.Согласующий
        ;
        
        если СогласованияДокументов.МожетУчаствоватьВСогласовании(РезультатСтрока.ПервичныйСогласующий)    
            ПервичныйСогласующий = РезультатСтрока.ПервичныйСогласующий
        ;
        
        если Согласующий == Неопределено и ПервичныйСогласующий == Неопределено
            продолжить
        ;
        
        ДанныеШага.Добавить(новый ДанныеШагаСогласования(
            ИдентификаторЗаписи = РезультатСтрока.ИдентификаторЗаписи,
            ТипШага = РезультатСтрока.ТипШага,
            ШагСогласования = РезультатСтрока.ШагСогласования,
            Согласующий = Согласующий,
            ПервичныйСогласующий = ПервичныйСогласующий,
            СпособЗамещения = РезультатСтрока.СпособЗамещения,
            РольСогласующего = РезультатСтрока.РольСогласующего,
            ТребуемаяПодпись = РезультатСтрока.ТребуемаяПодпись
        ))
    ;
    
    возврат ДанныеШага
;

@ВПодсистеме
@НаСервере
метод ОбновлениеПриИзмененииПравилСогласования(Правила: ЧитаемыйМассив<ПравилаСогласования.Ссылка>)
    ФоновыеЗадания.Выполнить(&ОбновитьСогласующихЗаявления)
;

@ВПроекте
@НаСервере
метод ОбновлениеПриИзмененииСтруктурыПредприятия(Подразделения: ЧитаемыйМассив<СтруктураПредприятия.Ссылка>)
    ФоновыеЗадания.Выполнить(&ОбновитьСогласующихЗаявления)
;

@ВПроекте
@НаСервере
метод ОбновлениеПриИзмененииФизическихЛиц(ФизическиеЛица: ЧитаемыйМассив<ФизическиеЛица.Ссылка>)
    ФоновыеЗадания.Выполнить(&ОбновитьСогласующихЗаявления, ФизическиеЛица)
;

@ВПодсистеме
@НаСервере
метод ОбновлениеПриИзмененииЗаместителей(ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка, Согласующие: ЧитаемыйМассив<ФизическиеЛица.Ссылка>)
    знч Запрос = Запрос{
        Выбрать
            СогласующиеЗаявленийСотрудников.ВидСогласуемогоЗаявления,
            СогласующиеЗаявленийСотрудников.ПравилоСогласования,
            СогласующиеЗаявленийСотрудников.Сотрудник,
            СогласующиеЗаявленийСотрудников.ШагСогласования,
            СогласующиеЗаявленийСотрудников.ИдентификаторЗаписи,
            СогласующиеЗаявленийСотрудников.ТипШага,
            ЗаместителиПриСогласовании.Заместитель.ЗаменитьNull(СогласующиеЗаявленийСотрудников.ПервичныйСогласующий) как Согласующий,
            СогласующиеЗаявленийСотрудников.ПервичныйСогласующий,
            СогласующиеЗаявленийСотрудников.РольСогласующего,
            ЗаместителиПриСогласовании.СпособЗамещения.ЗаменитьNull(Неопределено) как СпособЗамещения
        из
            СогласующиеЗаявленийСотрудников как СогласующиеЗаявленийСотрудников
            Левое соединение ЗаместителиПриСогласовании как ЗаместителиПриСогласовании
            по ЗаместителиПриСогласовании.Согласующий == СогласующиеЗаявленийСотрудников.ПервичныйСогласующий
            и ЗаместителиПриСогласовании.ВидСогласуемогоЗаявления == СогласующиеЗаявленийСотрудников.ВидСогласуемогоЗаявления
        Где
            СогласующиеЗаявленийСотрудников.ПервичныйСогласующий В (%Согласующие)
            и СогласующиеЗаявленийСотрудников.ВидСогласуемогоЗаявления == %ВидЗаявления
    }
    исп ПривилегированныйРежим = КонтекстДоступа.Привилегированный()
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        СогласующиеЗаявленийСотрудников.Записать(новый СогласующиеЗаявленийСотрудников.Запись(
            ВидСогласуемогоЗаявления = РезультатСтрока.ВидСогласуемогоЗаявления,
            ПравилоСогласования = РезультатСтрока.ПравилоСогласования,
            Сотрудник = РезультатСтрока.Сотрудник,
            ШагСогласования = РезультатСтрока.ШагСогласования,
            ИдентификаторЗаписи = РезультатСтрока.ИдентификаторЗаписи,
            ТипШага = РезультатСтрока.ТипШага,
            Согласующий = РезультатСтрока.Согласующий,
            ПервичныйСогласующий = РезультатСтрока.ПервичныйСогласующий,
            СпособЗамещения = РезультатСтрока.СпособЗамещения,
            РольСогласующего = РезультатСтрока.РольСогласующего
        ))
    ;
    ОбновитьГруппыДоступаСогласующих(Согласующие)
    ПривилегированныйРежим.Закрыть()
;

@ВПодсистеме
@НаСервере
метод ОбновлениеПриИзмененииРабочихГрупп(ФизическиеЛица: ЧитаемыйМассив<ФизическиеЛица.Ссылка>)
    ФоновыеЗадания.Выполнить(&ОбновитьСогласующихЗаявления, ФизическиеЛица)
;

@ВПроекте
@НаСервере
метод ЗапланироватьОбновлениеПравилСогласования()
    МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
    ЗапланированныеЗадания.Создать(&ОбновитьПравилаСогласования)
        .Настроить(
            Ключ = "ОбновлениеПравилСогласования",
            СтратегияПубликации = СтратегияПубликацииЗадания.Перезапустить)
        .Запланировать()
;

@ВПроекте
@НаСервере
метод ОбновитьПравилаСогласования(ВидыСогласуемыхЗаявлений: ЧитаемаяКоллекция<ВидыСогласуемыхЗаявлений.Ссылка>? = Неопределено)
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Действие
        Из
            ПравилаСогласования
        Где
            Действие В (ДействияСПравиломСогласования.Удалить, ДействияСПравиломСогласования.Применить)
            И (%{ВидыСогласуемыхЗаявлений == Неопределено} или ВидСогласуемогоЗаявления в (%ВидыСогласуемыхЗаявлений))
    }
    
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        знч Правило = РезультатСтрока.Ссылка.ЗагрузитьОбъект()
        Правило.Действие = Неопределено
        если РезультатСтрока.Действие == ДействияСПравиломСогласования.Применить
            Правило.СостояниеПравила = СостоянияПравилСогласования.Действует
            Правило.Записать()
        иначе если РезультатСтрока.Действие == ДействияСПравиломСогласования.Удалить
            ШагиПравилСогласования.Удалить(новый ШагиПравилСогласования.КлючЗаписи(ПравилоСогласования = РезультатСтрока.Ссылка))
            Правило.Удалить()
        ;
    ;
    
    ОбновитьСогласующихЗаявления(ВидыСогласуемыхЗаявлений = ВидыСогласуемыхЗаявлений)
;

@НаСервере
структура КэшРолей
    обз знч РольПодписантаНепосредственныйРуководитель: РолиПодписантов.Ссылка
    обз знч РольПодписантаВышестоящийРуководитель: РолиПодписантов.Ссылка
    обз знч РольПодписантаНеформальныйРуководитель: РолиПодписантов.Ссылка
    обз знч РольПодписантаСотрудник: РолиПодписантов.Ссылка    
;

@ВПроекте
@НаСервере
метод ОбновитьСогласующихЗаявления(ОбновляемыеСотрудники: ЧитаемыйМассив<ФизическиеЛица.Ссылка>? = Неопределено,
    ВидыСогласуемыхЗаявлений: ЧитаемаяКоллекция<ВидыСогласуемыхЗаявлений.Ссылка>? = Неопределено)
    знч Запрос = Запрос{
        Выбрать
            ПравилаСогласования.Ссылка как ПравилоСогласования,
            ПравилаСогласования.ОбщееДляВидаЗаявления как ОбщееДляВидаЗаявления,
            ШагиПравилСогласования.ИдентификаторЗаписи.ЗаменитьNull(Неопределено) как ИдентификаторЗаписи,
            ПравилаСогласования.ВидСогласуемогоЗаявления как ВидСогласуемогоЗаявления,
            ПравилаСогласования.ФизическоеЛицо как ФизическоеЛицо,
            ШагиПравилСогласования.ТипШага.ЗаменитьNull(Неопределено) как ТипШага,
            ШагиПравилСогласования.ШагСогласования.ЗаменитьNull(Неопределено) как ШагСогласования,
            ШагиПравилСогласования.Согласующий.ЗаменитьNull(Неопределено) как Согласующий,
            ШагиПравилСогласования.РольСогласующего.ЗаменитьNull(Неопределено) как РольСогласующего,
            ШагиПравилСогласования.ТребуемаяПодпись.ЗаменитьNull(Неопределено) как ТребуемаяПодпись,
            1 как Приоритет,
            0 как Уровень
        Из
            ПравилаСогласования как ПравилаСогласования
            Левое соединение ШагиПравилСогласования как ШагиПравилСогласования
            по ПравилаСогласования.Ссылка == ШагиПравилСогласования.ПравилоСогласования
        Где
            ПравилаСогласования.ФизическоеЛицо != Неопределено
            и (%{ВидыСогласуемыхЗаявлений == Неопределено} или ПравилаСогласования.ВидСогласуемогоЗаявления в (%ВидыСогласуемыхЗаявлений))
            и ПравилаСогласования.СостояниеПравила == СостоянияПравилСогласования.Действует
            и не ПравилаСогласования.ВидСогласуемогоЗаявления.Отключен
            и (не %{ОбновляемыеСотрудники != Неопределено} или ПравилаСогласования.ФизическоеЛицо в (%ОбновляемыеСотрудники))
            и не ПравилаСогласования.ОбщееДляВидаЗаявления
            
        Объединить все
        
        Выбрать
            ПравилаСогласования.Ссылка как ПравилоСогласования,
            ПравилаСогласования.ОбщееДляВидаЗаявления как ОбщееДляВидаЗаявления,
            ШагиПравилСогласования.ИдентификаторЗаписи.ЗаменитьNull(Неопределено) как ИдентификаторЗаписи,
            ПравилаСогласования.ВидСогласуемогоЗаявления как ВидСогласуемогоЗаявления,
            ПодразделенияИСотрудники.ФизическоеЛицо как ФизическоеЛицо,
            ШагиПравилСогласования.ТипШага.ЗаменитьNull(Неопределено) как ТипШага,
            ШагиПравилСогласования.ШагСогласования.ЗаменитьNull(Неопределено) как ШагСогласования,
            ШагиПравилСогласования.Согласующий.ЗаменитьNull(Неопределено) как Согласующий,
            ШагиПравилСогласования.РольСогласующего.ЗаменитьNull(Неопределено) как РольСогласующего,
            ШагиПравилСогласования.ТребуемаяПодпись.ЗаменитьNull(Неопределено) как ТребуемаяПодпись,
            2 как Приоритет,
            ПодчиненностьПодразделений.Уровень как Уровень
        Из
            ПравилаСогласования как ПравилаСогласования
            Внутреннее соединение ПодчиненностьПодразделений как ПодчиненностьПодразделений
            по ПодчиненностьПодразделений.ВышестоящееПодразделение == ПравилаСогласования.Подразделение 
            Внутреннее соединение ПодразделенияИСотрудники как ПодразделенияИСотрудники
            по ПодчиненностьПодразделений.Подразделение == ПодразделенияИСотрудники.Подразделение
            и ПодразделенияИСотрудники.ОсновноеМестоРаботы
            и ПодразделенияИСотрудники.ТипЭлемента == ТипыЭлементовПодразделенийИСотрудников.Сотрудник
            Левое соединение ШагиПравилСогласования как ШагиПравилСогласования
            по ПравилаСогласования.Ссылка == ШагиПравилСогласования.ПравилоСогласования
        Где
            ПравилаСогласования.Подразделение != Неопределено
            и (%{ВидыСогласуемыхЗаявлений == Неопределено} или ПравилаСогласования.ВидСогласуемогоЗаявления в (%ВидыСогласуемыхЗаявлений))
            и ПравилаСогласования.СостояниеПравила == СостоянияПравилСогласования.Действует
            и не ПравилаСогласования.ВидСогласуемогоЗаявления.Отключен
            и (не %{ОбновляемыеСотрудники != Неопределено} или ПодразделенияИСотрудники.ФизическоеЛицо в (%ОбновляемыеСотрудники))
            и не ПравилаСогласования.ОбщееДляВидаЗаявления
            
        Объединить все
        
        Выбрать
            ПравилаСогласования.Ссылка как ПравилоСогласования,
            ПравилаСогласования.ОбщееДляВидаЗаявления как ОбщееДляВидаЗаявления,
            ШагиПравилСогласования.ИдентификаторЗаписи.ЗаменитьNull(Неопределено) как ИдентификаторЗаписи,
            ПравилаСогласования.ВидСогласуемогоЗаявления как ВидСогласуемогоЗаявления,
            ПодразделенияИСотрудники.ФизическоеЛицо как ФизическоеЛицо,
            ШагиПравилСогласования.ТипШага.ЗаменитьNull(Неопределено) как ТипШага,
            ШагиПравилСогласования.ШагСогласования.ЗаменитьNull(Неопределено) как ШагСогласования,
            ШагиПравилСогласования.Согласующий.ЗаменитьNull(Неопределено) как Согласующий,
            ШагиПравилСогласования.РольСогласующего.ЗаменитьNull(Неопределено) как РольСогласующего,
            ШагиПравилСогласования.ТребуемаяПодпись.ЗаменитьNull(Неопределено) как ТребуемаяПодпись,
            3 как Приоритет,
            0 как Уровень
        Из
            ПравилаСогласования как ПравилаСогласования
            Левое соединение ШагиПравилСогласования как ШагиПравилСогласования
            по ПравилаСогласования.Ссылка == ШагиПравилСогласования.ПравилоСогласования
            Внутреннее соединение ПодразделенияИСотрудники как ПодразделенияИСотрудники
            по ПодразделенияИСотрудники.ОсновноеМестоРаботы
            и ПодразделенияИСотрудники.ТипЭлемента == ТипыЭлементовПодразделенийИСотрудников.Сотрудник
        Где
            ПравилаСогласования.ФизическоеЛицо == Неопределено
            и (%{ВидыСогласуемыхЗаявлений == Неопределено} или ПравилаСогласования.ВидСогласуемогоЗаявления в (%ВидыСогласуемыхЗаявлений))
            и ПравилаСогласования.Подразделение == Неопределено
            и ПравилаСогласования.СостояниеПравила == СостоянияПравилСогласования.Действует
            и не ПравилаСогласования.ВидСогласуемогоЗаявления.Отключен
            и (не %{ОбновляемыеСотрудники != Неопределено} или ПодразделенияИСотрудники.ФизическоеЛицо в (%ОбновляемыеСотрудники))
            и не ПравилаСогласования.ОбщееДляВидаЗаявления
            
        Объединить все
        
        Выбрать
            ПравилаСогласования.Ссылка как ПравилоСогласования,
            ПравилаСогласования.ОбщееДляВидаЗаявления как ОбщееДляВидаЗаявления,
            ШагиПравилСогласования.ИдентификаторЗаписи.ЗаменитьNull(Неопределено) как ИдентификаторЗаписи,
            ПравилаСогласования.ВидСогласуемогоЗаявления как ВидСогласуемогоЗаявления,
            Неопределено как ФизическоеЛицо,
            ШагиПравилСогласования.ТипШага.ЗаменитьNull(Неопределено) как ТипШага,
            ШагиПравилСогласования.ШагСогласования.ЗаменитьNull(Неопределено) как ШагСогласования,
            ШагиПравилСогласования.Согласующий.ЗаменитьNull(Неопределено) как Согласующий,
            ШагиПравилСогласования.РольСогласующего.ЗаменитьNull(Неопределено) как РольСогласующего,
            ШагиПравилСогласования.ТребуемаяПодпись.ЗаменитьNull(Неопределено) как ТребуемаяПодпись,
            0 как Приоритет,
            0 как Уровень
        Из
            ПравилаСогласования как ПравилаСогласования
            Левое соединение ШагиПравилСогласования как ШагиПравилСогласования
            по ПравилаСогласования.Ссылка == ШагиПравилСогласования.ПравилоСогласования
        Где
            ПравилаСогласования.СостояниеПравила == СостоянияПравилСогласования.Действует
            и не ПравилаСогласования.ВидСогласуемогоЗаявления.Отключен
            и (%{ВидыСогласуемыхЗаявлений == Неопределено} или ПравилаСогласования.ВидСогласуемогоЗаявления в (%ВидыСогласуемыхЗаявлений))
            и ПравилаСогласования.ОбщееДляВидаЗаявления
            
        Упорядочить по
            ВидСогласуемогоЗаявления,
            ФизическоеЛицо,
            Приоритет,
            Уровень,
            ПравилоСогласования,
            ШагСогласования
    }
    
    знч Результат = Запрос.Выполнить()
    
    знч ПоискНепосредственныхРуководителей: Массив<ФизическиеЛица.Ссылка>
    знч ПоискНеформальныхРуководителей: Массив<ФизическиеЛица.Ссылка>
    знч ПоискВышестоящихРуководителей: Массив<ФизическиеЛица.Ссылка>
    знч ПоискЗаместителей: Массив<ФизическиеЛица.Ссылка?>
    
    знч ПравилаСогласованийФизическихЛиц: Соответствие<ВидыСогласуемыхЗаявлений.Ссылка, Соответствие<ФизическиеЛица.Ссылка?, Массив<ДанныеШагаСогласования>>>
    пер ТекущееФизическоеЛицо: ФизическиеЛица.Ссылка?
    пер ТекущийПриоритет: Число
    пер ТекущийУровень: Число
    
    знч КэшРолей = новый КэшРолей(
        РольПодписантаНепосредственныйРуководитель = РольПодписантаНепосредственныйРуководитель(),
        РольПодписантаВышестоящийРуководитель = РольПодписантаВышестоящийРуководитель(),
        РольПодписантаНеформальныйРуководитель = РольПодписантаНеформальныйРуководитель(),
        РольПодписантаСотрудник = РольПодписантаСотрудник()
    )
    
    для РезультатСтрока из Результат
        знч ПравилоСогласованияПоВиду = ПравилаСогласованийФизическихЛиц.ВставитьЕслиОтсутствует(
            РезультатСтрока.ВидСогласуемогоЗаявления, новый Соответствие<ФизическиеЛица.Ссылка?, Массив<ДанныеШагаСогласования>>())
        
        если РезультатСтрока.ФизическоеЛицо != ТекущееФизическоеЛицо
            ТекущееФизическоеЛицо = РезультатСтрока.ФизическоеЛицо
            ТекущийПриоритет = РезультатСтрока.Приоритет
            ТекущийУровень = РезультатСтрока.Уровень
        ;
        
        если ТекущийПриоритет < РезультатСтрока.Приоритет
            продолжить
        ;
        
        если ТекущийУровень < РезультатСтрока.Уровень
            продолжить
        ;
        
        знч ДанныеПравилаФизическогоЛица = ПравилоСогласованияПоВиду.ВставитьЕслиОтсутствует(
            РезультатСтрока.ФизическоеЛицо, новый Массив<ДанныеШагаСогласования>())
        
        если РезультатСтрока.ИдентификаторЗаписи == Неопределено
            продолжить
        ;
            
        ДанныеПравилаФизическогоЛица.Добавить(
            новый ДанныеШагаСогласования(
                ИдентификаторЗаписи = РезультатСтрока.ИдентификаторЗаписи,
                ПравилоСогласования = РезультатСтрока.ПравилоСогласования,
                ТипШага = РезультатСтрока.ТипШага,
                ШагСогласования = РезультатСтрока.ШагСогласования,
                ПервичныйСогласующий = РезультатСтрока.Согласующий,
                РольСогласующего = РезультатСтрока.РольСогласующего,
                ТребуемаяПодпись = РезультатСтрока.ТребуемаяПодпись
            )
        )
        
        выбор РезультатСтрока.РольСогласующего
        когда КэшРолей.РольПодписантаНепосредственныйРуководитель
            ПоискНепосредственныхРуководителей.Добавить(РезультатСтрока.ФизическоеЛицо)
        когда КэшРолей.РольПодписантаВышестоящийРуководитель
            ПоискВышестоящихРуководителей.Добавить(РезультатСтрока.ФизическоеЛицо)
        когда КэшРолей.РольПодписантаНеформальныйРуководитель
            ПоискНеформальныхРуководителей.Добавить(РезультатСтрока.ФизическоеЛицо)
        когда КэшРолей.РольПодписантаСотрудник
            ПоискЗаместителей.Добавить(РезультатСтрока.Согласующий)
        ;
    ;
    
    знч РуководителиРабочихГруппФизическихЛиц = РуководителиРабочихГруппФизическихЛиц(ПоискНеформальныхРуководителей)
    знч НепосредственныеРуководителиФизическихЛиц =
        ОрганизационнаяСтруктура.НепосредственныеРуководителиФизическихЛиц(ПоискНепосредственныхРуководителей)
    знч ВышестоящиеРуководителиФизическихЛиц = ОрганизационнаяСтруктура.РуководителиФизическихЛиц(ПоискВышестоящихРуководителей, 2)
    
    ПоискЗаместителей.ДобавитьВсе(РуководителиРабочихГруппФизическихЛиц.Значения())
    ПоискЗаместителей.ДобавитьВсе(НепосредственныеРуководителиФизическихЛиц.Значения())
    ПоискЗаместителей.ДобавитьВсе(ВышестоящиеРуководителиФизическихЛиц.Значения())
    знч ЗаместителиСогласующих = ЗаместителиСогласующих(ПоискЗаместителей)
    
    если ОбновляемыеСотрудники != Неопределено
        УдалитьЗаписиПоСотрудникам(ОбновляемыеСотрудники)
    ;
    
    если ВидыСогласуемыхЗаявлений != Неопределено
        УдалитьЗаписиПоВидамСогласуемыхЗаявлений(ВидыСогласуемыхЗаявлений)
    ;
    
    знч НаборЗаписей = новый СогласующиеЗаявленийСотрудников.НаборЗаписей()
    знч Согласующие: Множество<ФизическиеЛица.Ссылка>
    знч ВсеСогласующие: Множество<ФизическиеЛица.Ссылка>
    пер ТекущееПравило: ПравилаСогласования.Ссылка?
    для ПравилаСогласованияПоВиду из ПравилаСогласованийФизическихЛиц
        знч ВидСогласуемогоЗаявления = ПравилаСогласованияПоВиду.Ключ
        НаборЗаписей.Фильтр.ВидСогласуемогоЗаявления.Установить(ВидСогласуемогоЗаявления)
        знч ЗаместителиПоВидуСогласования = ЗаместителиСогласующих.ПолучитьИлиУмолчание(ВидСогласуемогоЗаявления)
        для ПравилаСогласованияПоФизическомуЛицу из ПравилаСогласованияПоВиду.Значение
            знч ДанныеПравилаСогласования = ПравилаСогласованияПоФизическомуЛицу.Значение
            знч ФизическоеЛицо = ПравилаСогласованияПоФизическомуЛицу.Ключ
            ВсеСогласующие.ДобавитьВсе(Согласующие)
            Согласующие.Очистить()
            если ОбновляемыеСотрудники != Неопределено
                НаборЗаписей.Фильтр.Сотрудник.Установить(ФизическоеЛицо)
            ;
            для ШагСогласования из ДанныеПравилаСогласования
                если ТекущееПравило != ШагСогласования.ПравилоСогласования
                    ВсеСогласующие.ДобавитьВсе(Согласующие)
                    Согласующие.Очистить()
                    ТекущееПравило = ШагСогласования.ПравилоСогласования
                ;
                если ФизическоеЛицо != Неопределено
					ЗаполнитьПервичногоСогласующего(ФизическоеЛицо, ШагСогласования,
						НепосредственныеРуководителиФизическихЛиц,
						ВышестоящиеРуководителиФизическихЛиц,
						РуководителиРабочихГруппФизическихЛиц,
                        КэшРолей)
                ;
				
                если ШагСогласования.ПервичныйСогласующий == Неопределено или ШагСогласования.ПервичныйСогласующий == ФизическоеЛицо
                    продолжить
                ;
                
                ЗаполнитьСогласующего(ШагСогласования, ЗаместителиПоВидуСогласования, Согласующие, ФизическоеЛицо)
                ДобавитьЗаписьВНаборСогласований(НаборЗаписей, ВидСогласуемогоЗаявления, ФизическоеЛицо,  ШагСогласования, Согласующие)
            ;
            если ОбновляемыеСотрудники != Неопределено
                НаборЗаписей.Записать()
                НаборЗаписей.Очистить()
            ;
        ;
        ВсеСогласующие.ДобавитьВсе(Согласующие)
        если ОбновляемыеСотрудники == Неопределено
            НаборЗаписей.Записать()
            НаборЗаписей.Очистить()
        ;
        
    ;
    ЗапланированныеЗадания.Создать(&ОбновитьГруппыДоступаСогласующих,ВсеСогласующие)
        .Запланировать()
;

@НаСервере
метод УдалитьЗаписиПоСотрудникам(ОбновляемыеСотрудники: ЧитаемыйМассив<ФизическиеЛица.Ссылка>)
    для Сотрудник из ОбновляемыеСотрудники
        СогласующиеЗаявленийСотрудников.Удалить(новый СогласующиеЗаявленийСотрудников.КлючЗаписи(Сотрудник = Сотрудник))
    ;
;

@НаСервере
метод УдалитьЗаписиПоВидамСогласуемыхЗаявлений(ВидыЗаявлений: ЧитаемаяКоллекция<ВидыСогласуемыхЗаявлений.Ссылка>)
    для ВидЗаявления из ВидыЗаявлений
        СогласующиеЗаявленийСотрудников.Удалить(новый СогласующиеЗаявленийСотрудников.КлючЗаписи(ВидСогласуемогоЗаявления = ВидЗаявления))
    ;
;

@НаСервере
метод ДобавитьЗаписьВНаборСогласований(НаборЗаписей: СогласующиеЗаявленийСотрудников.НаборЗаписей, ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка,
    ФизическоеЛицо: ФизическиеЛица.Ссылка?, ШагСогласования: ДанныеШагаСогласования, Согласующие: Множество<ФизическиеЛица.Ссылка>)
    
    если Согласующие.Содержит(ШагСогласования.Согласующий)
        или ШагСогласования.Согласующий == Неопределено
        
        возврат
    ;
    Согласующие.Добавить(ШагСогласования.Согласующий)
    
    если ШагСогласования.СпособЗамещения == СпособыЗамещения.ВместеССогласующим
        Согласующие.Добавить(ШагСогласования.ПервичныйСогласующий)
    ;
        
    НаборЗаписей.ДобавитьЗапись(
        ВидСогласуемогоЗаявления = ВидЗаявления,
        ПравилоСогласования = ШагСогласования.ПравилоСогласования,
        Сотрудник = ФизическоеЛицо,
        ШагСогласования = ШагСогласования.ШагСогласования,
        ИдентификаторЗаписи = ШагСогласования.ИдентификаторЗаписи,
        ТипШага = ШагСогласования.ТипШага,
        Согласующий = ШагСогласования.Согласующий,
        ПервичныйСогласующий = ШагСогласования.ПервичныйСогласующий,
        СпособЗамещения = ШагСогласования.СпособЗамещения,
        РольСогласующего = ШагСогласования.РольСогласующего,
        ТребуемаяПодпись = ШагСогласования.ТребуемаяПодпись
    )
;

@НаСервере
метод ЗаполнитьПервичногоСогласующего(ФизическоеЛицо: ФизическиеЛица.Ссылка, ШагСогласования: ДанныеШагаСогласования,
    НепосредственныеРуководителиФизическихЛиц: ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, ФизическиеЛица.Ссылка?>,
    ВышестоящиеРуководителиФизическихЛиц: ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, ФизическиеЛица.Ссылка?>,
    РуководителиРабочихГруппФизическихЛиц: ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, ФизическиеЛица.Ссылка?>,
    КэшРолей: КэшРолей)
    
    выбор ШагСогласования.РольСогласующего
    когда КэшРолей.РольПодписантаНепосредственныйРуководитель
        ШагСогласования.ПервичныйСогласующий =
            НепосредственныеРуководителиФизическихЛиц.ПолучитьИлиУмолчание(ФизическоеЛицо)
    когда КэшРолей.РольПодписантаВышестоящийРуководитель
        ШагСогласования.ПервичныйСогласующий =
            ВышестоящиеРуководителиФизическихЛиц.ПолучитьИлиУмолчание(ФизическоеЛицо)
    когда КэшРолей.РольПодписантаНеформальныйРуководитель
        ШагСогласования.ПервичныйСогласующий =
            РуководителиРабочихГруппФизическихЛиц.ПолучитьИлиУмолчание(ФизическоеЛицо)
    ;
;

@НаСервере
метод ЗаполнитьСогласующего(ШагСогласования: ДанныеШагаСогласования, ЗаместителиПоВидуСогласования: ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, Заместитель>?,
    Согласующие: Множество<ФизическиеЛица.Ссылка>, ФизическоеЛицо: ФизическиеЛица.Ссылка?)
    
    знч Заместитель = ЗаместителиПоВидуСогласования?.ПолучитьИлиУмолчание(ШагСогласования.ПервичныйСогласующий)
    если Заместитель == Неопределено
        или (Согласующие.Содержит(Заместитель.Заместитель) и Заместитель.СпособЗамещения == СпособыЗамещения.ВместеССогласующим)
        или Заместитель.Заместитель == ФизическоеЛицо
            
        ШагСогласования.Согласующий = ШагСогласования.ПервичныйСогласующий
    иначе
        ШагСогласования.Согласующий = Заместитель.Заместитель
        ШагСогласования.СпособЗамещения = Заместитель.СпособЗамещения
    ;
;

@НаСервере
метод ДобавитьГруппуДоступаСогласующего(ФизическоеЛицо: ФизическиеЛица.Ссылка, ШагСогласования: ДанныеШагаСогласования, ГруппыДоступаСогласующийх: Соответствие<ФизическиеЛица.Ссылка, ГруппаДоступаСогласующего>)
    пер ГруппаДоступа: ГруппаДоступаСогласующего?
    если ГруппыДоступаСогласующийх.СодержитКлюч(ШагСогласования.ПервичныйСогласующий)
        ГруппаДоступа = ГруппыДоступаСогласующийх[ШагСогласования.ПервичныйСогласующий]
    иначе
        ГруппаДоступа = новый ГруппаДоступаСогласующего(ШагСогласования.ПервичныйСогласующий)
        ГруппыДоступаСогласующийх.Вставить(ШагСогласования.ПервичныйСогласующий, ГруппаДоступа)
    ;

    если ШагСогласования.СпособЗамещения != Неопределено
        ГруппаДоступа.Заместители.Добавить(ШагСогласования.Согласующий)
    ;
    
    ГруппаДоступа.Сотрудники.Добавить(ФизическоеЛицо)
;

@ВПроекте
@НаСервере
метод ОбновитьГруппыДоступаСогласующих(Согласующие: ЧитаемаяКоллекция<ФизическиеЛица.Ссылка>)
    знч Запрос = Запрос{
        Выбрать
            СогласующиеЗаявленийСотрудников.ВидСогласуемогоЗаявления как ВидСогласуемогоЗаявления,
            ФизическиеЛица.Ссылка.ЗаменитьNull(СогласующиеЗаявленийСотрудников.Сотрудник) как Сотрудник,
            СогласующиеЗаявленийСотрудников.Согласующий как Согласующий,
            СогласующиеЗаявленийСотрудников.ПервичныйСогласующий как ПервичныйСогласующий,
            СогласующиеЗаявленийСотрудников.СпособЗамещения как СпособЗамещения
        из
            СогласующиеЗаявленийСотрудников как СогласующиеЗаявленийСотрудников
            левое соединение ФизическиеЛица как ФизическиеЛица
            по СогласующиеЗаявленийСотрудников.Сотрудник == Неопределено
        Где
            СогласующиеЗаявленийСотрудников.Согласующий в (%Согласующие)
            или СогласующиеЗаявленийСотрудников.ПервичныйСогласующий в (%Согласующие)
        Упорядочить По
            ВидСогласуемогоЗаявления 
    }
    
    исп Результат = Запрос.Выполнить()
    пер ВидСогласуемогоЗаявления: ВидыСогласуемыхЗаявлений.Ссылка?
    пер ГруппыДоступаСогласующийх: Соответствие<ФизическиеЛица.Ссылка, ГруппаДоступаСогласующего>
    для СтрокаРезультата из Результат
        если ВидСогласуемогоЗаявления != СтрокаРезультата.ВидСогласуемогоЗаявления
            если ВидСогласуемогоЗаявления != Неопределено
                ОбновитьГруппыДоступаСогласующих(ГруппыДоступаСогласующийх.Значения(), ВидСогласуемогоЗаявления)
            ;
            ВидСогласуемогоЗаявления = СтрокаРезультата.ВидСогласуемогоЗаявления
            ГруппыДоступаСогласующийх = новый Соответствие<ФизическиеЛица.Ссылка, ГруппаДоступаСогласующего>()
        ;
        знч ШагСогласования = новый ДанныеШагаСогласования(
            Согласующий = СтрокаРезультата.Согласующий, 
            ПервичныйСогласующий = СтрокаРезультата.ПервичныйСогласующий, 
            СпособЗамещения = СтрокаРезультата.СпособЗамещения
        )
        ДобавитьГруппуДоступаСогласующего(СтрокаРезультата.Сотрудник, ШагСогласования, ГруппыДоступаСогласующийх)
    ;
    
    если ВидСогласуемогоЗаявления != Неопределено
        ОбновитьГруппыДоступаСогласующих(ГруппыДоступаСогласующийх.Значения(), ВидСогласуемогоЗаявления)
    ;
;

@НаСервере
метод ОбновитьГруппыДоступаСогласующих(ГруппыДоступа: ЧитаемаяКоллекция<ГруппаДоступаСогласующего>, ВидСогласуемогоЗаявления: ВидыСогласуемыхЗаявлений.Ссылка)
    для ГруппаДоступа из ГруппыДоступа
        знч ЗначенияОграничений: Массив<ЗначенияОграниченийГруппДоступа>
        для Согласуемый из ГруппаДоступа.Сотрудники
            ЗначенияОграничений.Добавить(новый ЗначенияОграниченийГруппДоступа(
                КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица(),
                Согласуемый,
                Ложь
            ))
        ;
        
        КонтрольДоступа.ОбновитьГруппуДоступа(
            КлючГруппыДоступа(ГруппаДоступа.Согласующий, ВидСогласуемогоЗаявления),
            МенеджерСущности.ПредставлениеСсылки(ГруппаДоступа.Согласующий),
            РольСогласующегоЗаявления(ВидСогласуемогоЗаявления),
            ЗначенияОграничений,
            ПользователиСогласующих(ГруппаДоступа),
            ВидыГруппыДоступа.Служебная    
        )
    ;
;

@НаСервере
метод ПользователиСогласующих(ГруппаДоступа: ГруппаДоступаСогласующего): ЧитаемаяКоллекция<Пользователи.Ссылка>
    знч ФизическиеЛицаСсылки: Множество<ФизическиеЛица.Ссылка>
    ФизическиеЛицаСсылки.Добавить(ГруппаДоступа.Согласующий)
    ФизическиеЛицаСсылки.ДобавитьВсе(ГруппаДоступа.Заместители)
    
    возврат КонтрольДоступа.ПользователиВладельцевКабинетов(ФизическиеЛицаСсылки).Значения()
;

@НаСервере
метод РольСогласующегоЗаявления(ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка): Роли.Ссылка?
    пер Роль: Роли.Ссылка?
    для Сервис из СогласованияПользователь.ПолучитьСервисы()
        Роль = Сервис.РольСогласующегоЗаявления(ВидЗаявления)
        если Роль != Неопределено
            возврат Роль
        ;
    ;
    
    если Роль == Неопределено
        выбросить новый ИсключениеВыполнения("Не задана роль согласующего заявления")
    ;
;

@НаСервере
метод КлючГруппыДоступа(Согласующий: ФизическиеЛица.Ссылка, ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка): Строка
    возврат "ДоступКСогласуемымДанным%{ВидЗаявления.ВСтроку()}%{Согласующий.Ид.ВСтроку()}"
;

@НаСервере
метод ЗаместителиСогласующих(ФизическиеЛица: ЧитаемыйМассив<ФизическиеЛица.Ссылка?>):
    ЧитаемоеСоответствие<ВидыСогласуемыхЗаявлений.Ссылка, Соответствие<ФизическиеЛица.Ссылка, Заместитель>>
    
    знч Заместители: Соответствие<ВидыСогласуемыхЗаявлений.Ссылка, Соответствие<ФизическиеЛица.Ссылка, Заместитель>>
    
    знч Запрос = Запрос{
        Выбрать
            ВидСогласуемогоЗаявления,
            Согласующий,
            Заместитель,
            СпособЗамещения
        Из
            ЗаместителиПриСогласовании
        Где
            Согласующий В (%ФизическиеЛица)
    }
    
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        знч ЗаместителиПоВиду = Заместители.ВставитьЕслиОтсутствует(РезультатСтрока.ВидСогласуемогоЗаявления,
            новый Соответствие<ФизическиеЛица.Ссылка, Заместитель>())
        ЗаместителиПоВиду.Вставить(
            РезультатСтрока.Согласующий,
            новый Заместитель(РезультатСтрока.Заместитель, РезультатСтрока.СпособЗамещения)
        )
    ;
    
    возврат Заместители
;

@НаСервере
метод РуководителиРабочихГруппФизическихЛиц(ФизическиеЛица: ЧитаемыйМассив<ФизическиеЛица.Ссылка>): 
    ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, ФизическиеЛица.Ссылка>

    знч Руководители: Соответствие<ФизическиеЛица.Ссылка, ФизическиеЛица.Ссылка>
    
    знч Запрос = Запрос{
        Выбрать
            РабочиеГруппы.Элемент как ФизическоеЛицо,
            РабочиеГруппы.Владелец.Руководитель.ЗаменитьNull(Неопределено) Как Руководитель
        Из
            РабочиеГруппы.Сотрудники Как РабочиеГруппы
        Где
            РабочиеГруппы.Элемент В (%ФизическиеЛица)}
            
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        Руководители.Вставить(РезультатСтрока.ФизическоеЛицо, РезультатСтрока.Руководитель)
    ;    
    возврат Руководители
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ДанныеПравилаСогласования(
    ПравилоСогласования: ПравилаСогласования.Ссылка,
    ТекущееФизическоеЛицо: ФизическиеЛица.Ссылка?): Согласования.ПравилоСогласования?
    
    знч ЗапросПравила = Запрос{
        Выбрать
            Ссылка,
            ВидСогласуемогоЗаявления,
            Подразделение,
            ФизическоеЛицо,
            ПравилоПоУмолчанию,
            Наименование,
            ОбщееДляВидаЗаявления
        из
            ПравилаСогласования
        где
            Ссылка == %ПравилоСогласования
    }
    исп РезультатПравила = ЗапросПравила.Выполнить()
    знч РезультатПравилаСтроки = новый ЧитаемыйМассив(РезультатПравила)
    если не (не РезультатПравилаСтроки.Пусто())
        возврат Неопределено
    ;
    
    пер ТипПравила = ТипыПравилСогласования.ДляВсех
    если РезультатПравилаСтроки[0].ФизическоеЛицо != Неопределено
        ТипПравила = ТипыПравилСогласования.ДляСотрудника
    иначе если РезультатПравилаСтроки[0].Подразделение != Неопределено
        ТипПравила = ТипыПравилСогласования.ДляПодразделения
    ;
    
    знч ДанныеПравила = новый ПравилоСогласования(
        ВидСогласуемогоЗаявления = РезультатПравилаСтроки[0].ВидСогласуемогоЗаявления,
        Ссылка = РезультатПравилаСтроки[0].Ссылка,
        ТипПравила = ТипПравила,
        ФизическоеЛицо = РезультатПравилаСтроки[0].ФизическоеЛицо,
        Подразделение = РезультатПравилаСтроки[0].Подразделение,
        ПоУмолчанию = РезультатПравилаСтроки[0].ПравилоПоУмолчанию,
        Автор = ТекущееФизическоеЛицо
    )
    
    ДанныеПравила.Наименование = РезультатПравилаСтроки[0].Наименование
    ДанныеПравила.ОбщееДляВидаЗаявления = РезультатПравилаСтроки[0].ОбщееДляВидаЗаявления
    
    знч ЗапросШаги = Запрос{
        Выбрать
            ШагСогласования,
            ТипШага,
            РольСогласующего,
            Согласующий,
            ТребуемаяПодпись
        из
            ШагиПравилСогласования
        где
            ПравилоСогласования == %ПравилоСогласования
        упорядочить по
            ШагСогласования
    }
    
    исп РезультатШаги = ЗапросШаги.Выполнить()
    пер ТекущийШаг: Число
    пер Согласующие: Массив<ФизическиеЛица.Ссылка|РолиПодписантов.Ссылка>
    для РезультатШагиСтрока из РезультатШаги
        если ТекущийШаг != РезультатШагиСтрока.ШагСогласования
            ТекущийШаг = РезультатШагиСтрока.ШагСогласования
            Согласующие = новый Массив<ФизическиеЛица.Ссылка|РолиПодписантов.Ссылка>()
            ДанныеПравила.ШагиПравила.Добавить(новый ШагПравилаСогласования(
                ТекущийШаг, 
                РезультатШагиСтрока.ТипШага,
                Согласующие,
                РезультатШагиСтрока.ТребуемаяПодпись)
            )
        ;
        если РезультатШагиСтрока.Согласующий != Неопределено
            Согласующие.Добавить(РезультатШагиСтрока.Согласующий)
        иначе
            Согласующие.Добавить(РезультатШагиСтрока.РольСогласующего)
        ;
    ;
    
    возврат ДанныеПравила
;

@ВПроекте
@НаСервере
метод ЗаписатьПравилоСогласования(ПравилоСогласования: ПравилоСогласования)
    пер Правило: ПравилаСогласования.Объект?
    если ПравилоСогласования.Ссылка == Неопределено
        знч Ид = новый Ууид()
        Правило = новый ПравилаСогласования.Объект(Ид = Ид)
        ПравилоСогласования.Ссылка = ПравилаСогласования.ПолучитьСсылку(Ид)
    иначе
        Правило = ПравилоСогласования.Ссылка.ЗагрузитьОбъект()
    ;
    
    Правило.Наименование = ПравилоСогласования.Наименование
    Правило.ВидСогласуемогоЗаявления = ПравилоСогласования.ВидСогласуемогоЗаявления
    Правило.ПравилоПоУмолчанию = ПравилоСогласования.ПоУмолчанию
    Правило.СостояниеПравила = СостоянияПравилСогласования.Черновик
    Правило.Действие = ДействияСПравиломСогласования.Применить
    Правило.ФизическоеЛицо = Неопределено
    Правило.Подразделение = Неопределено
    Правило.Автор = ПравилоСогласования.Автор
    выбор ПравилоСогласования.ТипПравила
    когда ДляПодразделения
        Правило.Подразделение = ПравилоСогласования.Подразделение
        Правило.ПодразделениеФизическоеЛицо = ПравилоСогласования.Подразделение.Представление()
    когда ДляСотрудника
        Правило.ФизическоеЛицо = ПравилоСогласования.ФизическоеЛицо
        Правило.ПодразделениеФизическоеЛицо = ПравилоСогласования.ФизическоеЛицо.Представление()
    ;
    Правило.ОбщееДляВидаЗаявления = ПравилоСогласования.ОбщееДляВидаЗаявления
    
    Правило.КоличествоШагов = ПравилоСогласования.ШагиПравила.Размер()
    знч СогласующиеПредставление: Массив<Строка>
    знч ШагиПравил = новый ШагиПравилСогласования.НаборЗаписей()
    ШагиПравил.Фильтр.Установить(ПравилоСогласования = ПравилоСогласования.Ссылка)
    для Шаг из ПравилоСогласования.ШагиПравила
        для Согласующий из Шаг.Согласующие
            пер РольСогласующего: РолиПодписантов.Ссылка?
            пер ФизическоеЛицо: ФизическиеЛица.Ссылка?
            если Согласующий это ФизическиеЛица.Ссылка
                ФизическоеЛицо = Согласующий как ФизическиеЛица.Ссылка
                РольСогласующего = РольПодписантаСотрудник()
            иначе
                РольСогласующего = Согласующий как РолиПодписантов.Ссылка
            ;
            ШагиПравил.ДобавитьЗапись(
                ПравилоСогласования = ПравилоСогласования.Ссылка,
                ШагСогласования = Шаг.НомерШага,
                ИдентификаторЗаписи = новый Ууид(),
                ТипШага = Шаг.ТипШага,
                РольСогласующего = РольСогласующего,
                Согласующий = ФизическоеЛицо,
                ТребуемаяПодпись = Шаг.ТребуемаяПодпись
            )
            СогласующиеПредставление.Добавить(ФизическоеЛицо == Неопределено ?
                РольСогласующего.Представление() : ФизическоеЛицо.Представление())
        ;
    ;
    ШагиПравил.Записать()
    
    если СогласующиеПредставление.Размер() < 3
        Правило.ПредставлениеСогласующих = Строки.Соединить(СогласующиеПредставление, "\n")
    иначе
        Правило.ПредставлениеСогласующих =
            "%{СогласующиеПредставление[0]}
            и еще %{СогласующиеПредставление.Размер() - 1} согласующих"
    ;
    
    Правило.Записать()
;

@ВПодсистеме
@НаСервере
метод УдалитьПравилоСогласования(ПравилоСогласования: ПравилоСогласования)
    если ПравилоСогласования.Ссылка == Неопределено
        возврат
    ;
    
    знч Правило = ПравилоСогласования.Ссылка.ЗагрузитьОбъект()
    Правило.Действие = ДействияСПравиломСогласования.Удалить
    Правило.СостояниеПравила = СостоянияПравилСогласования.Черновик
    Правило.Записать()
;

@ВПодсистеме
@НаСервере
метод ЗаписатьЗаместителя(ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка, СпособЗамещения: СпособыЗамещения, Заместитель: ФизическиеЛица.Ссылка)
    ЗаместителиПриСогласовании.Записать(
        новый ЗаместителиПриСогласовании.Запись(
            ВидСогласуемогоЗаявления = ВидЗаявления,
            Согласующий = ФизическоеЛицо,
            Заместитель = Заместитель,
            СпособЗамещения = СпособЗамещения
        )
    )
    ОбновлениеПриИзмененииЗаместителей(ВидЗаявления, [ФизическоеЛицо])
;

@ВПодсистеме
@НаСервере
метод УдалитьЗаместителя(ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка)
    ЗаместителиПриСогласовании.Удалить(новый ЗаместителиПриСогласовании.КлючЗаписи(
        ВидСогласуемогоЗаявления = ВидЗаявления, Согласующий = ФизическоеЛицо))
    ОбновлениеПриИзмененииЗаместителей(ВидЗаявления, [ФизическоеЛицо])
;

@ВПодсистеме
@НаСервере
метод ЗаписатьРабочуюГруппу(РабочаяГруппа: РабочиеГруппыКлиентСервер.РабочаяГруппа)
    пер РабочаяГруппаОбъект: РабочиеГруппы.Объект?
    если РабочаяГруппа.Ссылка == Неопределено
        РабочаяГруппаОбъект = новый РабочиеГруппы.Объект()
    иначе
        РабочаяГруппаОбъект = РабочаяГруппа.Ссылка.ЗагрузитьОбъект()
    ;
    
    РабочаяГруппаОбъект.Наименование = РабочаяГруппа.Наименование
    РабочаяГруппаОбъект.Руководитель = РабочаяГруппа.Руководитель
    РабочаяГруппаОбъект.Сотрудники.ДобавитьВсе(РабочаяГруппа.Сотрудники)
    исп ПривилегированныйРежим = КонтекстДоступа.Привилегированный()
    РабочаяГруппаОбъект.Записать()
    ОбновлениеПриИзмененииРабочихГрупп(РабочаяГруппа.Сотрудники)
    ПривилегированныйРежим.Закрыть()
;

@ВПодсистеме
@НаСервере
метод УдалитьРабочуюГруппу(РабочаяГруппа: РабочиеГруппыКлиентСервер.РабочаяГруппа)
    если РабочаяГруппа.Ссылка == Неопределено
        возврат
    ;
    
    РабочаяГруппа.Ссылка.ЗагрузитьОбъект().Удалить()
;

@ВПроекте
@НаСервере
метод РолиПодписантовПриложения(): Массив<РолиПодписантов.Ссылка>
    возврат [
        РольПодписантаСотрудник(), 
        РольПодписантаНепосредственныйРуководитель(), 
        РольПодписантаВышестоящийРуководитель(), 
        РольПодписантаНеформальныйРуководитель()
    ]
;

@ВПроекте
@НаСервере
метод ПроверитьНастройкиИПодписатьФайлДокумента(Ссылка: ПодписываемыйДокумент.Ссылка, Файл: Файлы.Ссылка,
    ДанныеСогласующего: Согласования.ДанныеСогласующего, ПарольЗакрытогоКлюча: Строка): Булево
    знч ВидЭлектроннойПодписи = РаботаСПодписями.ВидЭлектроннойПодписи(ДанныеСогласующего.Согласующий)
    если ВидЭлектроннойПодписи == ВидыЭлектронныхПодписей.УНЭПИнформационнойСистемы
        пер Настройки = Криптография.НастройкиЭлектронныхПодписей()
        пер ДействующийСертификат = Криптография.ЕстьДействующийСертификат(ДанныеСогласующего.Согласующий)
        если Настройки.ИспользованиеКЭДО
            если ДействующийСертификат
                попытка
                    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
                    ПодписатьФайлДокумента(Ссылка, Файл, ДанныеСогласующего, ПарольЗакрытогоКлюча)
                    ПривилегированныйРежим.Закрыть()
                    возврат Истина
                поймать Ошибка: Криптография.ИсключениеСертификатФизическогоЛицаНеОбнаружен
                    выбросить новый Криптография.ИсключениеЭлектроннаяПодписьОтсутствует("Отсутствует электронная подпись.")
                поймать Ошибка: ИсключениеКриптографии
                    выбросить новый Криптография.ИсключениеНеверныйПарольЭлектроннойПодписи("Неверный пароль электронной подписи.")
                ;
            иначе если ДолженБытьДействующийСертификат(ДанныеСогласующего.Согласующий)
                выбросить новый Криптография.ИсключениеЭлектроннаяПодписьОтсутствует("Отсутствует электронная подпись.")
            ;
        ;
    иначе если ВидЭлектроннойПодписи == ВидыЭлектронныхПодписей.Госключ
        или ВидЭлектроннойПодписи == ВидыЭлектронныхПодписей.УнэпАстралПлатформа
        
        возврат Истина
    ;
    возврат Ложь
;

@НаСервере
метод ДолженБытьДействующийСертификат(ФизическоеЛицо: ФизическиеЛица.Ссылка): Булево
    пер ДолженБытьДействующийСертификат: Булево
    пер Сервис = СогласованияСервис.ПолучитьСервис()
    если Сервис != Неопределено
        ДолженБытьДействующийСертификат = Сервис.ДолженБытьДействующийСертификат(ФизическоеЛицо)
    ;
    возврат ДолженБытьДействующийСертификат
;

@ВПроекте
@НаСервере
метод ПроверитьНастройкиИПодписатьДокумент(ДокументСсылка: ПодписываемыйДокумент.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего, ПарольЗакрытогоКлюча: Строка)
    знч Настройки = Криптография.НастройкиЭлектронныхПодписей()
    если Настройки.ИспользованиеКЭДО
        если Криптография.ЕстьДействующийСертификат(ДанныеСогласующего.Согласующий)
            попытка
                исп КонтекстДоступа.Привилегированный()
                ПодписатьДокумент(ДокументСсылка, ДанныеСогласующего, ПарольЗакрытогоКлюча)
            поймать Ошибка: Криптография.ИсключениеСертификатФизическогоЛицаНеОбнаружен
                выбросить новый Криптография.ИсключениеЭлектроннаяПодписьОтсутствует("Отсутствует электронная подпись.")
            поймать Ошибка: ИсключениеКриптографии
                выбросить новый Криптография.ИсключениеНеверныйПарольЭлектроннойПодписи("Неверный пароль электронной подписи.")
            ;
        иначе если ДолженБытьДействующийСертификат(ДанныеСогласующего.Согласующий)
            выбросить новый Криптография.ИсключениеЭлектроннаяПодписьОтсутствует("Отсутствует электронная подпись.")
        иначе
            ОзнакомитьсяБезПодписания(ДокументСсылка, ДанныеСогласующего)
        ;
    иначе
        ОзнакомитьсяБезПодписания(ДокументСсылка, ДанныеСогласующего)
    ;
;

@ВПодсистеме
@НаСервере
метод ПредставлениеДокументаДляПодписания(ДокументСсылка: ПодписываемыйДокумент.Ссылка): Соответствие<Строка, ДвоичныйОбъект.Ссылка>
    знч ЭлектронныеДокументыОбъекта = Файлы.ЭлектронныеДокументыОбъекта(ДокументСсылка как ВладелецФайлы.Ссылка)
    если ЭлектронныеДокументыОбъекта.Пусто()
        выбросить новый ИсключениеВыполнения("Документ по ссылке %{ДокументСсылка.ВСтроку()} не найден")
    ;
    пер ПредставленияИдентификаторов = новый Соответствие<Строка, ДвоичныйОбъект.Ссылка>()
    для ЭлектронныйДокумент из ЭлектронныеДокументыОбъекта
        если ЭлектронныйДокумент.Значение.Оригинал != Неопределено
            ПредставленияИдентификаторов.Вставить(
                ЭлектронныйДокумент.Ключ, ЭлектронныйДокумент.Значение.Оригинал.Хранилище!)
        ;
    ;
    возврат ПредставленияИдентификаторов
;

@НаСервере
метод ПодписатьДокумент(ДокументСсылка: ПодписываемыйДокумент.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего, ПарольЗакрытогоКлюча: Строка)
    для ЭлементДанных из ПредставлениеДокументаДляПодписания(ДокументСсылка)
    ДобавитьПодписьДокументу(ДокументСсылка, ДанныеСогласующего, ПарольЗакрытогоКлюча,
        (ЭлементДанных.Значение).Загрузить().ПолучитьБайты(),
        ЭлементДанных.Ключ)
    ;
    СогласованияДокументов.ПослеСогласованияДокумента(ДокументСсылка, ДанныеСогласующего, Истина)
;

@ВПроекте
@НаСервере
метод ОзнакомитьсяБезПодписания(Ссылка: ПодписываемыйДокумент.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего)
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч ИдентификаторыЭлектронныхДокументов = ИдентификаторыЭлектронныхДокументов(Ссылка)
    если ИдентификаторыЭлектронныхДокументов.Пусто()
        СогласованияДокументов.ЗарегистрироватьСогласованиеДокумента(
            Документ = Ссылка,
            ДанныеСогласующего = ДанныеСогласующего)
    иначе    
        для ИдентификаторЭлектронногоДокумента из ИдентификаторыЭлектронныхДокументов
            СогласованияДокументов.ЗарегистрироватьСогласованиеДокумента(
                Документ = Ссылка,
                ДанныеСогласующего = ДанныеСогласующего,
                ИдентификаторЭлектронногоДокумента = ИдентификаторЭлектронногоДокумента)
        ;
    ;
    СогласованияДокументов.ПослеСогласованияДокумента(Ссылка, ДанныеСогласующего, Ложь)
    ПривилегированныйРежим.Закрыть()
;

@НаСервере
метод ИдентификаторыЭлектронныхДокументов(Документ: ПодписываемыйДокумент.Ссылка): ЧитаемыйМассив<Строка>
    знч ИдентификаторыЭлектронныхДокументов: Массив<Строка>
    для Сервис из СогласованияПользователь.ПолучитьСервисы()
        ИдентификаторыЭлектронныхДокументов.ДобавитьВсе(Сервис.ИдентификаторыЭлектронныхДокументов(Документ))
    ;
    
    возврат ИдентификаторыЭлектронныхДокументов    
;

@НаСервере
метод ПодписатьФайлДокумента(ДокументСсылка: ПодписываемыйДокумент.Ссылка, Файл: Файлы.Ссылка,
    ДанныеСогласующего: Согласования.ДанныеСогласующего, ПарольЗакрытогоКлюча: Строка)

    пер Данные: Байты = Файлы.ДвоичныеДанныеФайла(Файл).ПолучитьБайты()
    пер ДанныеЭлектроннойПодписи = Криптография.ДанныеПодписиФизическогоЛица(ДанныеСогласующего.Согласующий, ПарольЗакрытогоКлюча)
    если ДанныеЭлектроннойПодписи == Неопределено
        выбросить новый Криптография.ИсключениеСертификатФизическогоЛицаНеОбнаружен("", ДанныеСогласующего.Согласующий)
    иначе если не Криптография.КорневойСертификатДействет(ДанныеСогласующего.Согласующий)
        выбросить новый Криптография.КорневойСертификатОтозван("Отсутствует действующий сертификат электронной подписи.")
    ;
    пер Подпись: Байты = МенеджерКриптографии.ПодписьДанных(Данные, ДанныеЭлектроннойПодписи)
    пер ДанныеПодписи: ДвоичныйОбъект = ОбъектноеХранилище.ЗагрузитьИзБайт(Подпись)
    СогласованияДокументов.ЗарегистрироватьСогласованиеДокумента(
        Документ = ДокументСсылка,
        ДанныеСогласующего = ДанныеСогласующего,
        Подпись = ДанныеПодписи.Ссылка)
    СогласованияДокументов.ПослеСогласованияДокумента(ДокументСсылка, ДанныеСогласующего, Истина)
; 

@НаСервере
метод ДобавитьПодписьДокументу(ДокументСсылка: ПодписываемыйДокумент.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего,
    ПарольЗакрытогоКлюча: Строка, ДанныеСтрокой: Строка | Байты,
    ИдентификаторЭлектронногоДокумента: неизвестно = Неопределено)
    
    пер ДанныеЭлектроннойПодписи = Криптография.ДанныеПодписиФизическогоЛица(ДанныеСогласующего.Согласующий, ПарольЗакрытогоКлюча)
    если ДанныеЭлектроннойПодписи == Неопределено
        выбросить новый Криптография.ИсключениеСертификатФизическогоЛицаНеОбнаружен("", ДанныеСогласующего.Согласующий)
    иначе если не Криптография.КорневойСертификатДействет(ДанныеСогласующего.Согласующий)
        выбросить новый Криптография.КорневойСертификатОтозван("Отсутствует действующий сертификат электронной подписи.")
    ;
    пер ИдентификаторЭлектронногоДокументаСтрокой = "" 
    если ИдентификаторЭлектронногоДокумента это Строка
        ИдентификаторЭлектронногоДокументаСтрокой = ИдентификаторЭлектронногоДокумента как Строка
    иначе если ИдентификаторЭлектронногоДокумента != Неопределено
        ИдентификаторЭлектронногоДокументаСтрокой = Файлы.ИдентификаторЭлектронногоДокумента(
            ДокументСсылка, ИдентификаторЭлектронногоДокумента как Сущность.Ключ)
    ;
    пер ПодписываемыеБайты = (ДанныеСтрокой это Строка) ? (ДанныеСтрокой как Строка).ВБайты() : ДанныеСтрокой как Байты
    пер Подпись: Байты = МенеджерКриптографии.ПодписьДанных(ПодписываемыеБайты, ДанныеЭлектроннойПодписи)
    пер ДанныеПодписи: ДвоичныйОбъект = ОбъектноеХранилище.ЗагрузитьИзБайт(Подпись)
    СогласованияДокументов.ЗарегистрироватьСогласованиеДокумента(
                Документ = ДокументСсылка, 
                ДанныеСогласующего = ДанныеСогласующего,
                Подпись = ДанныеПодписи.Ссылка, 
                ИдентификаторЭлектронногоДокумента = ИдентификаторЭлектронногоДокументаСтрокой)
;    
 
// Начало ВыгрузкаАрхиваЭлектронногоДокумента

@ВПроекте
@НаКлиенте
метод ВыгрузитьАрхивПрисоединенныхФайлов(ВладелецФайлов: неизвестно) 
    пер ДанныеАрхивов = УпакованныеФайлыПоВладельцу(ВладелецФайлов, УровеньСжатияZip.Максимальный)
    для ДанныеАрхива из ДанныеАрхивов
        ВыгрузкаФайлов.НачатьВыгрузку(ДанныеАрхива.Данные, ДанныеАрхива.Имя + ".zip")
    ;
;

@ВПроекте
@НаСервере
структура ДанныеКадровогоДокумента
    обз знч ВладелецФайлов: неизвестно
    пер ЭлектронныйДокумент: ОписаниеФайла?
    пер ИдентификаторДокумента: Строка?
    пер ИдентификаторЭлектронногоДокумента: Строка?
    пер Организация: Строка?
    пер Инн: Строка?
    пер Кпп: Строка?
    пер Огрн: Строка?
    пер Наименование: Строка?
    пер Номер: Строка?
    пер Дата: Момент?
    пер Код: Строка?
    пер ФайлыПредставлений: Массив<ОписаниеФайла>? 
    пер Подписи: Массив<ОписаниеПодписи>?
    пер ДанныеФигурантов: Соответствие<ФизическиеЛица.Ссылка, ДанныеФигуранта>?
;

@НаСервере
структура ОписаниеФайла
    обз знч ПолноеИмяФайла: Строка
    обз знч Расширение: Строка
    обз знч Размер: Число
;

@НаСервере
структура ОписаниеПодписи
    обз знч ВладелецПодписи: ФизическиеЛица.Ссылка | Строка
    обз знч СвойстваПодписи: СвойстваПодписи?
;

@НаСервере
структура СвойстваПодписи
    обз знч ДатаПодписи: Момент
    обз знч ПростаяПодпись: Булево
    знч ОписаниеФайла: ОписаниеФайла?
;

@НаСервере
структура ДанныеИдентификатораДокумента
    обз пер Файлы: Массив<ПрисоединенныйФайл>
    обз пер Подписи: Массив<ДанныеПодписиДокумента>
;

@НаСервере
структура ДанныеФигуранта
    обз знч Фамилия: Строка
    обз знч Имя: Строка
    обз знч Отчество: Строка
    обз знч Снилс: Строка
    пер Должность: Строка?
;

@НаСервере
структура ДанныеПредставления
    пер Организация: Строка?
    пер Инн: Строка?
    пер Кпп: Строка?
    пер Огрн: Строка?
    пер Дата: Момент?
    пер Наименование: Строка?
    пер Номер: Строка?
    пер Код: Строка?
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод УпакованныеФайлыПоВладельцу(ВладелецФайлов: неизвестно, УровеньСжатия: УровеньСжатияZip = УровеньСжатияZip.Максимальный):
    Массив<УниверсальныеМеханизмы.ДанныеАрхиваФайлов>
    
    пер ФайлыВладельца = новый Массив<УниверсальныеМеханизмы.ДанныеАрхиваФайлов>()
    пер ПрисоединенныеФайлыОбъекта = ПрисоединенныеФайлыМенеджер.ФайлыОбъекта(ВладелецФайлов)
    если не ПрисоединенныеФайлыОбъекта.Пусто()
        пер ПриложенныеФайлы = новый Массив<ПрисоединенныйФайл>()
        пер ФайлыПоИдентфикатору = новый Соответствие<Строка, ДанныеИдентификатораДокумента>()
        для ОписаниеФайла из ПрисоединенныеФайлыОбъекта
            пер ДанныеИдентификатора = ФайлыПоИдентфикатору.ПолучитьИлиУмолчание(
                ОписаниеФайла.ИдентификаторЭлектронногоДокумента,
                новый ДанныеИдентификатораДокумента(
                    новый Массив<ПрисоединенныйФайл>(),
                    новый Массив<ДанныеПодписиДокумента>()))
            если ОписаниеФайла.ВидФайла == ВидыФайла.Вложение
                ПриложенныеФайлы.Добавить(ОписаниеФайла)
            иначе
                ДанныеИдентификатора.Файлы.Добавить(ОписаниеФайла)
            ;
            если не ФайлыПоИдентфикатору.СодержитКлюч(ОписаниеФайла.ИдентификаторЭлектронногоДокумента)
                если не ДанныеИдентификатора.Файлы.Пусто()
                    ФайлыПоИдентфикатору.Вставить(ОписаниеФайла.ИдентификаторЭлектронногоДокумента, ДанныеИдентификатора)
                ;
            ;
        ;
        пер ДанныеПодписей = СогласованияДокументов.ДанныеПодписейДокумента(ВладелецФайлов)
        для ДанныеПодписи из ДанныеПодписей
            пер ДанныеИдентификатора = ФайлыПоИдентфикатору.ПолучитьИлиУмолчание(ДанныеПодписи.ИдентификаторЭлектронногоДокумента)
            если ДанныеИдентификатора != Неопределено 
                ДанныеИдентификатора.Подписи.Добавить(ДанныеПодписи)
            ;
        ;
        пер ДанныеИдентфикаторовДляПредставлений: Соответствие<Строка, ДанныеПредставления>?
        знч НеобходимоСформироватьОписание = ЭтоДокументСОписанием(ВладелецФайлов)
        если НеобходимоСформироватьОписание
            ДанныеИдентфикаторовДляПредставлений = ДанныеДокументаДляПредставления(ВладелецФайлов)
        ;
        если ФайлыПоИдентфикатору.Размер() == 1
            и ПриложенныеФайлы.Пусто()
            
            ФайлыВладельца.Добавить(УпакованныеФайлыДокумента(
                ВладелецФайлов,
                ФайлыПоИдентфикатору.ЕдинственныйИлиУмолчание().Значение,
                УровеньСжатия,
                ДанныеИдентфикаторовДляПредставлений,
                НеобходимоСформироватьОписание)
            )
        иначе
            пер ВременныйФайл = Стд::ВводВывод::Файлы::Файлы.СоздатьВременныйФайл(УдалитьПослеОкончанияРаботы = Истина)
            исп ПотокЗаписи = ВременныйФайл.ОткрытьПотокЗаписи()
            пер ЗаписьАрхива = новый ЗаписьZip(ПотокЗаписи)
            
            если не ПриложенныеФайлы.Пусто()
                для ОписаниеФайла из ПриложенныеФайлы
                    знч ОбъектДанных = ОписаниеФайла.Хранилище.Загрузить()
                    знч ИмяФайла = ПрисоединенныеФайлыКлиентСервер.НаименованиеФайлаПоИмениИРасширению(ОписаниеФайла.Наименование, ОписаниеФайла.Расширение)
                    исп ПотокЧтенияФайла = ОбъектДанных.ОткрытьПотокЧтения()
                    ЗаписьАрхива.Добавить(
                        ПотокЧтенияФайла,
                        ИмяФайла,
                        УровеньСжатия
                    )
                ;
            ;
            для ФайлыИдентификатора из ФайлыПоИдентфикатору
                знч ОписаниеФайла = УпакованныеФайлыДокумента(
                    ВладелецФайлов,
                    ФайлыИдентификатора.Значение,
                    УровеньСжатия,
                    ДанныеИдентфикаторовДляПредставлений,
                    НеобходимоСформироватьОписание)
                знч ОбъектДанных = ОписаниеФайла.Данные.Загрузить()
                исп ПотокЧтенияФайла = ОбъектДанных.ОткрытьПотокЧтения()
                ЗаписьАрхива.Добавить(
                    ПотокЧтенияФайла,
                    ПрисоединенныеФайлыКлиентСервер.НаименованиеФайлаПоИмениИРасширению(
                        ОписаниеФайла.Имя,
                        "zip"
                    ),
                    УровеньСжатия
                )
            ;
            ЗаписьАрхива.Записать()
            исп ПотокЧтенияВременногоФайла = ВременныйФайл.ОткрытьПотокЧтения()
            знч ДанныеАрхива = ОбъектноеХранилище.Загрузить(ПотокЧтенияВременногоФайла, ВременныйФайл.Размер)
            ФайлыВладельца.Добавить(
                новый УниверсальныеМеханизмы.ДанныеАрхиваФайлов(
                    МенеджерСущности.ПредставлениеСсылки(ВладелецФайлов),
                    ДанныеАрхива.Ссылка
                )
            )
        ;
    ;
    возврат ФайлыВладельца
;

@НаСервере
метод УпакованныеФайлыДокумента(ВладелецФайлов: неизвестно, ДанныеФайловИдентифкатора: ДанныеИдентификатораДокумента,
    УровеньСжатия: УровеньСжатияZip = УровеньСжатияZip.Максимальный,
    ДанныеИдентфикаторовДляПредставлений: Соответствие<Строка, ДанныеПредставления>?,
    НеобходимоСформироватьОписание: Булево):
    УниверсальныеМеханизмы.ДанныеАрхиваФайлов?
    
    пер ИменаИдентификаторов = новый Соответствие<Строка, Строка>()
    если не ДанныеФайловИдентифкатора.Файлы.Пусто()
        пер ДанныеДокумента: ДанныеКадровогоДокумента?
        если НеобходимоСформироватьОписание
            ДанныеДокумента = новый ДанныеКадровогоДокумента(ВладелецФайлов)
        ;
        пер ВременныйФайл = Стд::ВводВывод::Файлы::Файлы.СоздатьВременныйФайл(УдалитьПослеОкончанияРаботы = Истина)
        исп ПотокЗаписи = ВременныйФайл.ОткрытьПотокЗаписи()
        пер ЗаписьАрхива = новый ЗаписьZip(ПотокЗаписи)
        для ОписаниеФайла из ДанныеФайловИдентифкатора.Файлы
            если ОписаниеФайла.ВидФайла == ВидыФайла.ЭлектронныйДокумент
                ИменаИдентификаторов.Вставить(
                    ОписаниеФайла.ИдентификаторЭлектронногоДокумента, ОписаниеФайла.Наименование)
            иначе если ОписаниеФайла.ВидФайла == ВидыФайла.ТабличныйДокументОригинала
                продолжить
            ;
            знч ОбъектДанных = (ОписаниеФайла.Хранилище).Загрузить()
            знч РазмерФайла = ОбъектДанных.Размер
            знч ИмяФайла = ПрисоединенныеФайлыКлиентСервер.НаименованиеФайлаПоИмениИРасширению(ОписаниеФайла.Наименование, ОписаниеФайла.Расширение)
            исп ПотокЧтенияФайла = ОбъектДанных.ОткрытьПотокЧтения()
            ЗаписьАрхива.Добавить(
                ПотокЧтенияФайла,
                ИмяФайла,
                УровеньСжатия)
            если ДанныеДокумента != Неопределено
                если ОписаниеФайла.ВидФайла == ВидыФайла.ЭлектронныйДокумент 
                    если ОписаниеФайла.Расширение.ВВерхнийРегистр() != "PDF"
                        ДанныеДокумента = Неопределено
                    иначе
                        ДанныеДокумента.ЭлектронныйДокумент = новый ОписаниеФайла(ИмяФайла, ОписаниеФайла.Расширение, РазмерФайла.ВБайтах())
                        ДанныеДокумента.ИдентификаторДокумента = ОписаниеФайла.Ссылка.Ид.ВСтроку()
                        ДанныеДокумента.ИдентификаторЭлектронногоДокумента = ОписаниеФайла.ИдентификаторЭлектронногоДокумента
                    ;
                иначе
                    если ДанныеДокумента.ФайлыПредставлений == Неопределено
                        ДанныеДокумента.ФайлыПредставлений = новый Массив<ОписаниеФайла>()
                    ;
                    ДанныеДокумента.ФайлыПредставлений.Добавить(новый ОписаниеФайла(ИмяФайла, ОписаниеФайла.Расширение, РазмерФайла.ВБайтах()))
                ;
            ;
        ;
        если не ДанныеФайловИдентифкатора.Подписи.Пусто()
            пер ПредставлениеВладельца = МенеджерСущности.ПредставлениеСсылки(ВладелецФайлов) 
            пер СчетчикПодписей = 1
            для ДанныеПодписиУчастника из ДанныеФайловИдентифкатора.Подписи
                если ДобавитьВАрхивДанныеПодписи(ЗаписьАрхива, ДанныеПодписиУчастника, ПредставлениеВладельца,
                    ИменаИдентификаторов, УровеньСжатия, СчетчикПодписей, ДанныеФайловИдентифкатора.Подписи.Размер() > 1, ДанныеДокумента)
                    
                    СчетчикПодписей = СчетчикПодписей + 1
                ;
            ;
        ;  
        если ДанныеДокумента != Неопределено
            и ДанныеДокумента.ИдентификаторЭлектронногоДокумента != Неопределено
            
            знч ДанныеПредставленияИдентфикатора =
                ДанныеИдентфикаторовДляПредставлений.ПолучитьИлиУмолчание(ДанныеДокумента.ИдентификаторЭлектронногоДокумента)
            если ДанныеПредставленияИдентфикатора != Неопределено
                ДанныеДокумента.Организация = ДанныеПредставленияИдентфикатора.Организация
                ДанныеДокумента.Инн = ДанныеПредставленияИдентфикатора.Инн
                ДанныеДокумента.Кпп = ДанныеПредставленияИдентфикатора.Кпп
                ДанныеДокумента.Огрн = ДанныеПредставленияИдентфикатора.Огрн
                ДанныеДокумента.Наименование = ДанныеПредставленияИдентфикатора.Наименование
                ДанныеДокумента.Номер = ДанныеПредставленияИдентфикатора.Номер
                ДанныеДокумента.Дата = ДанныеПредставленияИдентфикатора.Дата
                ДанныеДокумента.Код = ДанныеПредставленияИдентфикатора.Код
            ;
            пер Фигуранты = новый Множество<ФизическиеЛица.Ссылка>()
            пер ФигурантыСтрокой = новый Множество<Строка>()
            если ДанныеДокумента.Подписи != Неопределено
                для СвойстваПодписи из ДанныеДокумента.Подписи
                    если СвойстваПодписи.ВладелецПодписи это Строка
                        ФигурантыСтрокой.Добавить(СвойстваПодписи.ВладелецПодписи как Строка)
                    иначе
                        Фигуранты.Добавить(СвойстваПодписи.ВладелецПодписи как ФизическиеЛица.Ссылка)
                    ;
                ;
                если не Фигуранты.Пусто()
                    пер ЗапрашиваемыеДанные = новый ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц()
                    ЗапрашиваемыеДанные.ЛичныеДанные = Истина 
                    ЗапрашиваемыеДанные.ПерсональныеДанные = Истина 
                    знч ДанныеФизлиц = ФизЛица.ДанныеФизическихЛиц(Фигуранты, ЗапрашиваемыеДанные)
                    ДанныеДокумента.ДанныеФигурантов = новый Соответствие<ФизическиеЛица.Ссылка, ДанныеФигуранта>()
                    для ДанныеФизлица из ДанныеФизлиц
                        ДанныеДокумента.ДанныеФигурантов.Вставить(ДанныеФизлица.Ключ,
                            новый ДанныеФигуранта(
                                ДанныеФизлица.Значение.ЛичныеДанные.ФИО.Фамилия,
                                ДанныеФизлица.Значение.ЛичныеДанные.ФИО.Имя,
                                ДанныеФизлица.Значение.ЛичныеДанные.ФИО.Отчество,
                                ДанныеФизлица.Значение.ПерсональныеДанные.СНИЛС))
                    ;
                ;
            ;
            попытка
                ДобавитьВАрхивОписаниеДокумента(ЗаписьАрхива, ДанныеДокумента, УровеньСжатия)
            поймать Ошибка: Исключение
                Журналирование.ЗарегистрироватьОшибку(Ошибка)
            ;
        ;
        ЗаписьАрхива.Записать()
        пер ИмяАрхива = ""
        если ИменаИдентификаторов.Пусто()
            ИмяАрхива = МенеджерСущности.ПредставлениеСсылки(ВладелецФайлов)
        иначе
            ИмяАрхива = ИменаИдентификаторов.Значения().ВСтроку().Удалить("{").Удалить("}")
        ;
        исп ПотокЧтенияВременногоФайла = ВременныйФайл.ОткрытьПотокЧтения()
        знч ДанныеАрхива = ОбъектноеХранилище.Загрузить(ПотокЧтенияВременногоФайла, ВременныйФайл.Размер)
        возврат новый УниверсальныеМеханизмы.ДанныеАрхиваФайлов(ИмяАрхива, ДанныеАрхива.Ссылка)
    ;
;

конст РАСШИРЕНИЕ_ФАЙЛА_ПОДПИСИ = "p7s"

@НаСервере
метод ДобавитьВАрхивДанныеПодписи(ЗаписьАрхива: неизвестно, ДанныеПодписиУчастника: ДанныеПодписиДокумента,
    ПредставлениеВладельца: Строка, ИменаИдентификаторов: Соответствие<Строка, Строка>, УровеньСжатия: УровеньСжатияZip,
    СчетчикПодписей: Число, ВыводитьНомерПодписи: Булево, ДанныеДокумента: ДанныеКадровогоДокумента?): Булево
    
    пер Результат = Ложь
    знч ДвоичныеДаныеПодписи: ДвоичныйОбъект.Ссылка? = ДанныеПодписиУчастника.Подпись
    если ДвоичныеДаныеПодписи != Неопределено
        пер Представление = ПредставлениеВладельца
        если ИменаИдентификаторов.СодержитКлюч(ДанныеПодписиУчастника.ИдентификаторЭлектронногоДокумента)
            Представление = ИменаИдентификаторов.Получить(ДанныеПодписиУчастника.ИдентификаторЭлектронногоДокумента)
        ;
        
        если ДанныеПодписиУчастника.Результат == РезультатыСогласования.Согласовано
            знч РасширениеФайлаПодписи = РАСШИРЕНИЕ_ФАЙЛА_ПОДПИСИ
            пер ИмяФайлаПодписи = ПрисоединенныеФайлыКлиентСервер.НаименованиеФайлаПоИмениИРасширению(Представление, РасширениеФайлаПодписи)
            если ВыводитьНомерПодписи
                ИмяФайлаПодписи = ПрисоединенныеФайлыКлиентСервер.НаименованиеФайлаПоИмениИРасширению(
                    ИмяФайлаПодписиБезРасширения(Представление, СчетчикПодписей), РасширениеФайлаПодписи)
            ;
            знч ОбъектДанных = (ДвоичныеДаныеПодписи).Загрузить()
            исп ПотокЧтенияФайла = ОбъектДанных.ОткрытьПотокЧтения()
            ЗаписьАрхива.Добавить(ПотокЧтенияФайла, ИмяФайлаПодписи, УровеньСжатия)
            Результат = Истина
            если ДанныеДокумента это ДанныеКадровогоДокумента
                если ДанныеДокумента.Подписи == Неопределено
                    ДанныеДокумента.Подписи = новый Массив<ОписаниеПодписи>()
                ;
               ДанныеДокумента.Подписи.Добавить(
                   новый ОписаниеПодписи(
                       ДанныеПодписиУчастника.УчастникСогласования == Неопределено ? ДанныеПодписиУчастника.УчастникСогласованияСтрокой : ДанныеПодписиУчастника.УчастникСогласования,
                       новый СвойстваПодписи(
                           ДанныеПодписиУчастника.Дата,
                           Ложь,
                           новый ОписаниеФайла(ИмяФайлаПодписи, РасширениеФайлаПодписи, ОбъектДанных.Размер.ВБайтах())
                       )
                    )
                )
            ;
            ДобавитьВАрхивМЧД(ЗаписьАрхива, ДанныеПодписиУчастника.МЧД, УровеньСжатия)
        ;
    иначе
        если ДанныеДокумента это ДанныеКадровогоДокумента
            если ДанныеДокумента.Подписи == Неопределено
                ДанныеДокумента.Подписи = новый Массив<ОписаниеПодписи>()
            ;
            ДанныеДокумента.Подписи.Добавить(
                новый ОписаниеПодписи(
                    ДанныеПодписиУчастника.УчастникСогласования == Неопределено ? ДанныеПодписиУчастника.УчастникСогласованияСтрокой : ДанныеПодписиУчастника.УчастникСогласования,
                    новый СвойстваПодписи(
                        ДанныеПодписиУчастника.Дата,
                        Истина
                    )))
        ;
    ;
	возврат Результат
;

@НаСервере
метод ДобавитьВАрхивМЧД(ЗаписьАрхива: неизвестно, МЧД: МашиночитаемыеДоверенности.Ссылка?, УровеньСжатия: УровеньСжатияZip)
    если МЧД == Неопределено
        возврат
    ;
    знч ДанныеМЧД = МенеджерСущности.ЗначенияРеквизитовОбъекта(МЧД,
        ["Наименование", "Хранилище"])
    знч ИмяФайлаМЧД = ДанныеМЧД.Получить("Наименование") как Строка
    исп ПотокЧтенияМЧД = (ДанныеМЧД.Получить("Хранилище") как ДвоичныйОбъект.Ссылка).Загрузить().ОткрытьПотокЧтения()
    ЗаписьАрхива.Добавить(ПотокЧтенияМЧД, ИмяФайлаМЧД, УровеньСжатия)
    исп КонтекстДоступа.Привилегированный()
    пер ДанныеПодписейМЧД = МашиночитаемыеДоверенности.ДанныеПодписей(МЧД)
    если не ДанныеПодписейМЧД.Пусто()
        знч РасширениеФайлаПодписи = РАСШИРЕНИЕ_ФАЙЛА_ПОДПИСИ
        знч ВыводитьНомерПодписи = ДанныеПодписейМЧД.Размер() > 1
        пер СчетчикПодписей = 1
        для ДанныеПодписиМЧД из ДанныеПодписейМЧД
            пер ИмяФайлаПодписи = ПрисоединенныеФайлыКлиентСервер.НаименованиеФайлаПоИмениИРасширению(ИмяФайлаМЧД, РасширениеФайлаПодписи)
            если ВыводитьНомерПодписи
                ИмяФайлаПодписи = ПрисоединенныеФайлыКлиентСервер.НаименованиеФайлаПоИмениИРасширению(
                    ИмяФайлаПодписиБезРасширения(ИмяФайлаМЧД, СчетчикПодписей), РасширениеФайлаПодписи)
            ;
            знч ОбъектДанных = (ДанныеПодписиМЧД.Подпись).Загрузить()
            исп ПотокЧтенияФайла = ОбъектДанных.ОткрытьПотокЧтения()
            ЗаписьАрхива.Добавить(ПотокЧтенияФайла, ИмяФайлаПодписи, УровеньСжатия)
            СчетчикПодписей = СчетчикПодписей + 1
            ДобавитьВАрхивМЧД(ЗаписьАрхива, ДанныеПодписиМЧД.МЧД как МашиночитаемыеДоверенности.Ссылка?, УровеньСжатия)
        ;
    ;
;

@НаСервере
метод ИмяФайлаПодписиБезРасширения(ИмяФайлаБезРасширения: Строка, СчетчикПодписей: Число): Строка
    если ИмяФайлаБезРасширения.ЗаканчиваетсяНа("_")
        возврат "%{ИмяФайлаБезРасширения}%{СчетчикПодписей.ВСтроку()}"
    ;
    возврат "%{ИмяФайлаБезРасширения}_%{СчетчикПодписей.ВСтроку()}"
;

@ВПроекте
@НаСервере
структура ДанныеДляПодготовкиОписания
    обз пер Организация: Организации.Ссылка?
    обз пер Дата: Дата
    обз пер Наименование: Строка
    пер Код: Строка = ШаблоныДокументов.КОД_ДОКУМЕНТА_КЭДО_ПРОЧЕЕ
    пер Номер: Строка = ""
;

@НаСервере
метод ДанныеДокументаДляПредставления(ВладелецФайлов: неизвестно): Соответствие<Строка, ДанныеПредставления>
    
    пер ДанныеПредставлений = новый Соответствие<Строка, ДанныеПредставления>()
    пер ДанныеИдентификаторовВладельца: Соответствие<Строка, ДанныеДляПодготовкиОписания>?
    для Сервис из ИсходящиеДокументыСОписанием.ПолучитьСервисы()
        ДанныеИдентификаторовВладельца = Сервис.ДанныеДляПодготовкиОписаний(ВладелецФайлов)
        если ДанныеИдентификаторовВладельца != Неопределено
            прервать
        ;
    ;
    для ДанныеИдентификатора из ДанныеИдентификаторовВладельца
        пер ОписаниеПредставления = новый ДанныеПредставления()
        ДанныеПредставлений.Вставить(ДанныеИдентификатора.Ключ, ОписаниеПредставления)
        если ДанныеИдентификатора.Значение.Организация != Неопределено
            знч РеквизитыОрганизации = МенеджерСущности.ЗначенияРеквизитовОбъекта(ДанныеИдентификатора.Значение.Организация, ["НаименованиеПолное", "ИНН", "КПП", "ОГРН"])
            ОписаниеПредставления.Организация = РеквизитыОрганизации["НаименованиеПолное"]
            ОписаниеПредставления.Инн = РеквизитыОрганизации["ИНН"]
            ОписаниеПредставления.Кпп = РеквизитыОрганизации["КПП"]
            ОписаниеПредставления.Огрн = РеквизитыОрганизации["ОГРН"]
        ;
        ОписаниеПредставления.Дата = ДанныеИдентификатора.Значение.Дата.НачалоДня().ВМомент(МенеджерДат.ЧасовойПоясТекущий())
        ОписаниеПредставления.Наименование = ДанныеИдентификатора.Значение.Наименование
        ОписаниеПредставления.Код = ДанныеИдентификатора.Значение.Код
    ;
    возврат ДанныеПредставлений
;

@НаСервере
метод ДобавитьВАрхивОписаниеДокумента(ЗаписьАрхива: ЗаписьZip, ДанныеДокумента: ДанныеКадровогоДокумента, УровеньСжатия: УровеньСжатияZip)
    
    исп ПотокЗаписи = новый ВременныйПотокЗаписи()
    пер ЗаписьXml = новый ЗаписьXml(ПотокЗаписи)
    ЗаписьXml.ЗаписатьНачалоДокумента()
        .ЗаписатьНачалоЭлемента("edoc:wredcData")
        .ЗаписатьСоответствиеПространстваИмен("edoc", "https://mintrud.gov.ru/uploads/eksperiment/xml_schema.xsd")
        .ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema")
        .ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance")
            .ЗаписатьАтрибут("version", "1.1")
            .ЗаписатьАтрибут("created", ОтформатированнаяДатаXml(
                МенеджерДат.ТекущаяДатаВремя()))
            .ЗаписатьАтрибут("id", ДанныеДокумента.ИдентификаторДокумента)
            .ЗаписатьНачалоЭлемента("content")
    ВывестиТэг(ЗаписьXml, "employername", ДанныеДокумента.Организация)
    ВывестиТэг(ЗаписьXml, "innemployer", ДанныеДокумента.Инн)
    ВывестиТэг(ЗаписьXml, "ogrn", ДанныеДокумента.Огрн)
    ВывестиТэг(ЗаписьXml, "kpp", ДанныеДокумента.Кпп)
    ВывестиТэг(ЗаписьXml, "jobtitle", "")
    ВывестиДокумент(ЗаписьXml, ДанныеДокумента)
    ЗаписьXml.ЗаписатьКонецЭлемента() // content
    ЗаписьXml.ЗаписатьКонецЭлемента() // wredcData
    ЗаписьXml.ЗаписатьКонецДокумента()
    ЗаписьАрхива.Добавить(ПотокЗаписи.ОткрытьПотокЧтения(), "wredc_data.xml", УровеньСжатия)
;

@НаСервере
метод ВывестиТэг(ЗаписьXml: ЗаписьXml, ИмяТэга: Строка, Значение: Строка?)
    если Значение != Неопределено и не Значение.Пусто()
        ЗаписьXml.ЗаписатьНачалоЭлемента(ИмяТэга)
            .ЗаписатьТекст(Значение)
            .ЗаписатьКонецЭлемента()
    ;
;

@НаСервере
метод ВывестиДокумент(ЗаписьXml: ЗаписьXml, ДанныеДокумента: ДанныеКадровогоДокумента)
    ЗаписьXml.ЗаписатьНачалоЭлемента("docinfo")
    ВывестиТэг(ЗаписьXml, "docName", ДанныеДокумента.Наименование)
    ВывестиТэг(ЗаписьXml, "docNumber", ДанныеДокумента.Номер)
    ВывестиТэг(ЗаписьXml, "date", ОтформатированнаяДатаXml(ДанныеДокумента.Дата))
    ВывестиТэг(ЗаписьXml, "docType", ДанныеДокумента.Код)
    ВывестиФайл(ЗаписьXml, ДанныеДокумента.ЭлектронныйДокумент)
    ВывестиВложения(ЗаписьXml, ДанныеДокумента.ФайлыПредставлений)
    ВывестиПодписиСотрудников(ЗаписьXml, ДанныеДокумента.Подписи, ДанныеДокумента.ДанныеФигурантов)
    ЗаписьXml.ЗаписатьКонецЭлемента()
;

@НаСервере
метод ВывестиФайл(ЗаписьXml: ЗаписьXml, ДанныеФайла: ОписаниеФайла?)
    если ДанныеФайла != Неопределено
        ВывестиТэг(ЗаписьXml, "file", ДанныеФайла.ПолноеИмяФайла)
        ВывестиТэг(ЗаписьXml, "size", ДанныеФайла.Размер.ВСтроку())
    ;
;

@НаСервере
метод ВывестиВложения(ЗаписьXml: ЗаписьXml, Вложения: Массив<ОписаниеФайла>?)
    если Вложения != Неопределено
        для ОписаниеВложения из Вложения!
            ВывестиВложение(ЗаписьXml, ОписаниеВложения)
        ;
    ;
;

@НаСервере
метод ВывестиВложение(ЗаписьXml: ЗаписьXml, ОписаниеВложения: ОписаниеФайла)
    ЗаписьXml.ЗаписатьНачалоЭлемента("attachment")
        .ЗаписатьАтрибут("extention", ОписаниеВложения.Расширение)
    ВывестиФайл(ЗаписьXml, ОписаниеВложения)
    ЗаписьXml.ЗаписатьКонецЭлемента()
;

@НаСервере
метод ВывестиПодписиСотрудников(ЗаписьXml: ЗаписьXml, Подписи: Массив<ОписаниеПодписи>?, ДанныеФигурантов: Соответствие<ФизическиеЛица.Ссылка, ДанныеФигуранта>?)
    если Подписи != Неопределено
        для ДанныеПодписи из Подписи
            ЗаписьXml.ЗаписатьНачалоЭлемента("employeeinfo")
            пер СНИЛС = ""
            если ДанныеПодписи.ВладелецПодписи это ФизическиеЛица.Ссылка
                если ДанныеФигурантов != Неопределено
                    и ДанныеФигурантов.СодержитКлюч(ДанныеПодписи.ВладелецПодписи как ФизическиеЛица.Ссылка)
                    
                    знч ДанныеФигуранта = ДанныеФигурантов.Получить(ДанныеПодписи.ВладелецПодписи как ФизическиеЛица.Ссылка)
                    ВывестиТэг(ЗаписьXml, "lastnameinfo", ДанныеФигуранта.Фамилия)
                    ВывестиТэг(ЗаписьXml, "firstnameinfo", ДанныеФигуранта.Имя)
                    ВывестиТэг(ЗаписьXml, "patronymicInfo", ДанныеФигуранта.Отчество)
                    ВывестиТэг(ЗаписьXml, "jobtitle", ДанныеФигуранта.Должность)
                    СНИЛС = ДанныеФигуранта.Снилс
                ;
            иначе если ДанныеПодписи.ВладелецПодписи это Строка
                знч ФИО = ФизЛица.ФИОПоПолномуИмени(ДанныеПодписи.ВладелецПодписи как Строка)
                ВывестиТэг(ЗаписьXml, "lastnameinfo", ФИО.Фамилия)
                ВывестиТэг(ЗаписьXml, "firstnameinfo", ФИО.Имя)
                если не ФИО.Отчество.Пусто()
                    ВывестиТэг(ЗаписьXml, "patronymicInfo", ФИО.Отчество)
                ;
            ;
            ВывестиПодпись(ЗаписьXml, ДанныеПодписи.СвойстваПодписи, СНИЛС)
            ЗаписьXml.ЗаписатьКонецЭлемента()
        ;
    ;
;

@НаСервере
метод ВывестиПодпись(ЗаписьXml: ЗаписьXml, СвойстваПодписи: СвойстваПодписи, СНИЛС: Строка)
    ЗаписьXml.ЗаписатьНачалоЭлемента("signature")
    ВывестиТэг(ЗаписьXml, "date", ОтформатированнаяДатаXml(СвойстваПодписи.ДатаПодписи))
    ВывестиТэг(ЗаписьXml, "snils", СНИЛС)
    если СвойстваПодписи.ПростаяПодпись
        ВывестиТэг(ЗаписьXml, "simple", "true")
    иначе
        ВывестиФайл(ЗаписьXml, СвойстваПодписи.ОписаниеФайла)
    ;
    ЗаписьXml.ЗаписатьКонецЭлемента()
;

@НаСервере
метод ОтформатированнаяДатаXml(ФорматируемаяДата: Момент?): Строка?
    если ФорматируемаяДата это Момент
        возврат ФорматируемаяДата.ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий()).Представление("гггг-ММ-дд")
    ;
;

@НаСервере
метод ЭтоДокументСОписанием(СсылкаНаДокумент: Сущность.Ключ): Булево
    для Сервис из ИсходящиеДокументыСОписанием.ПолучитьСервисы()
        если Сервис.ДокументСнабжаетсяФайломОписания(СсылкаНаДокумент)
            возврат Истина
        ;
    ;
    возврат Ложь
;

// Конец ВыгрузкаАрхиваЭлектронногоДокумента

@ВПроекте
@НаСервере
метод ДобавитьПредопределенныйТипСогласуемогоДокумента(ИмяПредопределенныхДанных: Строка)
    ТипыСогласуемыхДокументов.ДобавитьПредопределенное(ИмяПредопределенныхДанных)
;

@ВПроекте
@НаСервере
метод НайтиТипСогласуемогоДокумента(ИмяПредопределенныхДанных: Строка): ТипыСогласуемыхДокументов.Ссылка?
    возврат ТипыСогласуемыхДокументов.НайтиПредопределенное(ИмяПредопределенныхДанных)
;

@ВПодсистеме
@НаСервере
метод ЗаполнитьПредопределенныеРолиПодписантов()
    РолиПодписантов.ДобавитьПредопределеннуюРольПодписанта(
        "Исполнитель",
        "executor",
        Истина,
        РОЛЬ_ПОДПИСАНТА_ИСПОЛНИТЕЛЬ,
        РолиПодписантовУстарело.Исполнитель
    )
    
    РолиПодписантов.ДобавитьПредопределеннуюРольПодписанта(
        "Организация",
        "employer",
        Истина,
        РОЛЬ_ПОДПИСАНТА_ОРГАНИЗАЦИЯ,
        РолиПодписантовУстарело.Организация
    )
    
    РолиПодписантов.ДобавитьПредопределеннуюРольПодписанта(
        "Сотрудник",
        "employee",
        Истина,
        РОЛЬ_ПОДПИСАНТА_СОТРУДНИК,
        РолиПодписантовУстарело.Сотрудник
    )
    
    РолиПодписантов.ДобавитьПредопределеннуюРольПодписанта(
        "Непосредственный руководитель",
        "directManager",
        Истина,
        РОЛЬ_ПОДПИСАНТА_НЕПОСРЕДСТВЕННЫЙ_РУКОВОДИТЕЛЬ,
        РолиПодписантовУстарело.НепосредственныйРуководитель
    )
    
    РолиПодписантов.ДобавитьПредопределеннуюРольПодписанта(
        "Вышестоящий руководитель",
        "superiorManager",
        ИспользуемаяФункциональность.ФункциональныеОпции().РасширенныеРолиСогласующих,
        РОЛЬ_ПОДПИСАНТА_ВЫШЕСТОЯЩИЙ_РУКОВОДИТЕЛЬ,
        РолиПодписантовУстарело.ВышестоящийРуководитель
    )
    
    РолиПодписантов.ДобавитьПредопределеннуюРольПодписанта(
        "Неформальный руководитель",
        "teamLeader",
        ИспользуемаяФункциональность.ФункциональныеОпции().ИспользоватьРабочиеГруппы,
        РОЛЬ_ПОДПИСАНТА_НЕФОРМАЛЬНЫЙ_РУКОВОДИТЕЛЬ,
        РолиПодписантовУстарело.НеформальныйРуководитель
    )
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод РольПодписантаИсполнитель(): РолиПодписантов.Ссылка
    возврат РолиПодписантов.НайтиПредопределенное(РОЛЬ_ПОДПИСАНТА_ИСПОЛНИТЕЛЬ)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод РольПодписантаОрганизация(): РолиПодписантов.Ссылка
    возврат РолиПодписантов.НайтиПредопределенное(РОЛЬ_ПОДПИСАНТА_ОРГАНИЗАЦИЯ)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод РольПодписантаНепосредственныйРуководитель(): РолиПодписантов.Ссылка
    возврат РолиПодписантов.НайтиПредопределенное(РОЛЬ_ПОДПИСАНТА_НЕПОСРЕДСТВЕННЫЙ_РУКОВОДИТЕЛЬ)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод РольПодписантаСотрудник(): РолиПодписантов.Ссылка
    возврат РолиПодписантов.НайтиПредопределенное(РОЛЬ_ПОДПИСАНТА_СОТРУДНИК)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод РольПодписантаВышестоящийРуководитель(): РолиПодписантов.Ссылка
    возврат РолиПодписантов.НайтиПредопределенное(РОЛЬ_ПОДПИСАНТА_ВЫШЕСТОЯЩИЙ_РУКОВОДИТЕЛЬ)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод РольПодписантаНеформальныйРуководитель(): РолиПодписантов.Ссылка
    возврат РолиПодписантов.НайтиПредопределенное(РОЛЬ_ПОДПИСАНТА_НЕФОРМАЛЬНЫЙ_РУКОВОДИТЕЛЬ)
;

@ВПроекте
@НаСервере
метод ЭтоДанныеСогласовавшегоСервиса(ДанныеСогласовавшего: ДанныеСогласующего): Булево
    возврат ДанныеСогласовавшего.Роль == РольПодписантаСотрудник()
        или ДанныеСогласовавшего.Роль == РольПодписантаВышестоящийРуководитель()
        или ДанныеСогласовавшего.Роль == РольПодписантаНеформальныйРуководитель()
;

@ВПроекте
@НаСервере
метод ПодписатьИУстановитьСостояниеДокумента(ДокументСсылка: ПодписываемыйДокумент.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего?,
    ПарольЗакрытогоКлюча: Строка, НовоеСостояние: СостоянияДокумента, ФизическоеЛицо: ФизическиеЛица.Ссылка): Криптография.РезультатПодписания
    
    пер РезультатПодписания: Криптография.РезультатПодписания
    знч ТекущееФизическоеЛицо = ПользователиСистемы.ТекущееФизическоеЛицо()
    
    исп Транзакции.Начать()
    если ДанныеСогласующего == Неопределено
        ДанныеСогласующего = новый Согласования.ДанныеСогласующего(ФизическоеЛицо)
    ;
    если РаботаСПодписями.ВидЭлектроннойПодписи(ТекущееФизическоеЛицо) == ВидыЭлектронныхПодписей.УНЭПИнформационнойСистемы
        ПроверитьНастройкиИПодписатьДокумент(ДокументСсылка, ДанныеСогласующего, ПарольЗакрытогоКлюча)
        СостДокументов.УстановитьСостояниеДокумента(ДокументСсылка, НовоеСостояние)
    ;
    возврат РезультатПодписания
;

//Область Обновление
@ВПодсистеме
@НаСервере
метод ОбновитьВидыСогласуемыхЗаявленийИРолиПодписантов()
    знч СоответствиеВидовСогласуемыхЗаявлений = ВидыСогласуемыхЗаявлений.СоответствиеВидовСогласуемыхЗаявлений()
    знч СоответствиеРолейПодписантов = РолиПодписантов.СоответствиеРолейПодписантов()
    
    ПравилаСогласования.ОбновитьВидСогласуемыхЗаявлений(СоответствиеВидовСогласуемыхЗаявлений)
    ЗаместителиПриСогласовании.ОбновитьВидСогласуемыхЗаявлений(СоответствиеВидовСогласуемыхЗаявлений)
    СогласующиеЗаявленийСотрудников.ОбновитьВидСогласуемыхЗаявленийИРольСогласующего(СоответствиеВидовСогласуемыхЗаявлений,
        СоответствиеРолейПодписантов)
        
    ШагиПравилСогласования.ОбновитьРолиПодписантов(СоответствиеРолейПодписантов)
    СогласованияДокументов.ОбновитьРолиПодписантов(СоответствиеРолейПодписантов)

;

@ВПроекте
@НаСервере
метод ДобавитьГруппыДоступаСогласующих()
    знч Запрос = Запрос{
        Выбрать
            Согласующий,
            ПервичныйСогласующий
        Из
            СогласующиеЗаявленийСотрудников
    }
    
    знч Согласующие: Множество<ФизическиеЛица.Ссылка>
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        если СтрокаРезультата.Согласующий != Неопределено
            Согласующие.Добавить(СтрокаРезультата.Согласующий)
        ;
        если СтрокаРезультата.ПервичныйСогласующий != Неопределено
            Согласующие.Добавить(СтрокаРезультата.ПервичныйСогласующий)
        ;
    ;
    
    ОбновитьГруппыДоступаСогласующих(Согласующие)
;

//КонецОбласти

@ВПроекте
@НаСервере
метод СкопироватьНастройкиСогласования(ЦелевойВид: ВидыСогласуемыхЗаявлений.Ссылка, ИсходныйВид: ВидыСогласуемыхЗаявлений.Ссылка)
    ПравилаСогласования.СкопироватьПравилаСогласования(ЦелевойВид, ИсходныйВид)
    ЗаместителиПриСогласовании.СкопироватьНастройкиВида(ЦелевойВид, ИсходныйВид)
;
