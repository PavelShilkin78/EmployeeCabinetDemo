импорт ВебApi
импорт КонтрольДоступа
импорт Криптография
импорт КриптографияСтандартные
импорт ОбменДанными
импорт ОбщиеСтандартные
импорт УниверсальныеМеханизмы
импорт ФизическиеЛица

@ВПроекте
структура ДокументСогласованияJson
    обз знч documentID: Строка
    знч updateDocument: Булево?
;

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат КонтрольДоступа.РазрешенияДоступаТаблицыСФизическимЛицомСПравомУдаления()
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<СогласованияДокументов.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<СогласованияДокументов.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<СогласованияДокументов.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч РазрешенияДоступаПодписываемыхДокументов: Соответствие<ПодписываемыйДокумент.Ссылка, ЧитаемыйМассив<РазрешениеДоступа>>
    знч ДокументыДляРасчетаРазрешний = ДокументыДляРасчетаРазерешений(Элементы)
    для Сервис из ПодписываемыйДокументПоставщикОграничений.ПолучитьСервисы()
        РазрешенияДоступаПодписываемыхДокументов.ВставитьВсе(Сервис.РазрешенияДоступаПодписываемыхДокументов(ДокументыДляРасчетаРазрешний))
    ;
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеРедактированиеУдалениеДанныхСправочниковПерсонально([Элемент.УчастникСогласования]))
        РазрешенияЭлемента.ДобавитьВсе(РазрешенияДоступаПодписываемыхДокументов.ПолучитьИлиУмолчание(Элемент.Документ, []))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

метод ДокументыДляРасчетаРазерешений(Элементы: ЧитаемыйМассив<СогласованияДокументов.ДанныеРасчетаРазрешений>): ЧитаемыйМассив<ПодписываемыйДокумент.Ссылка>
    знч Документы: Массив<ПодписываемыйДокумент.Ссылка>
    для Элемент из Элементы
        Документы.Добавить(Элемент.Документ)
    ;
    возврат Документы
;

//КонецОбласти

@ВПодсистеме
структура ДанныеJson
    пер ID: Строка?
    пер personID: Строка
    пер documentID: Строка
    пер result: РезультатJson?
    пер electronicSignature: Строка?
    пер version: Число?
    пер personName: Строка?
    пер comment: Строка?
    пер electronicDocumentID: Строка?
    пер signatoryRole: Строка
    пер documentVersion: Строка?
    пер note: Строка?
    пер certificate: Строка?
    пер time: Момент?
    пер updateDocument: Булево?
;

@ВПодсистеме
структура ДанныеJson_V1_2
    пер ID: Строка?
    пер personID: Строка
    пер documentID: Строка
    пер result: РезультатJson?
    пер electronicSignature: Строка?
    пер version: Число?
    пер personName: Строка?
    пер comment: Строка?
    пер electronicDocumentID: Строка?
    пер signatoryRole: Строка
    пер documentVersion: Строка?
    пер certificate: Строка?
    пер time: Момент?
    пер updateDocument: Булево?
    пер fileName: Строка?
;

@ВПроекте
структура ДанныеJson_V2_0
    пер ID: Строка?
    пер personID: Строка
    пер documentID: Строка
    пер result: РезультатJson?
    пер electronicSignature: Строка?
    пер version: Число?
    пер personName: Строка?
    пер comment: Строка?
    пер electronicDocumentID: Строка?
    пер signatoryRole: Строка
    пер documentVersion: Строка?
    пер certificate: Строка?
    пер time: Момент?
    пер updateDocument: Булево?
    пер fileName: Строка?
    пер powerOfAttorney: Строка?
;

@ВПроекте
структура ДанныеJson_V3_0
    пер ID: Строка?
    пер personID: Строка
    пер documentID: Строка
    пер result: РезультатJson_V3_0?
    пер version: Число?
    пер personName: Строка?
    пер comment: Строка?
    пер electronicDocumentID: Строка?
    пер signatoryRole: Строка
    пер documentVersion: Строка?
    пер time: Момент?
    пер updateDocument: Булево?
    пер signature: ПодписиДокументов.ДанныеJson_V3_0?
    пер step: Число?
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<ДанныеJson>
    иначе если ВерсияФорматаОбмена >= Версия{3.0}
        возврат Тип<ДанныеJson_V3_0>
    иначе если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<ДанныеJson_V2_0>
    иначе если ВерсияФорматаОбмена >= Версия{1.2}
        возврат Тип<ДанныеJson_V1_2>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<ДанныеJson>
    ;
;

@ВПроекте
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Массив<ДанныеJson>>
    иначе если ВерсияФорматаОбмена >= Версия{3.0}
        возврат Тип<Массив<ДанныеJson_V3_0>>
    иначе если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<Массив<ДанныеJson_V2_0>>
    иначе если ВерсияФорматаОбмена >= Версия{1.2}
        возврат Тип<Массив<ДанныеJson_V1_2>>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Массив<ДанныеJson>>
    ;
;

@ВПроекте
перечисление РезультатJson
    agreed,
    denied
;

@ВПроекте
перечисление РезультатJson_V3_0
    agreed,
    sentForApproval,
    denied,
    cancelled
;

метод РолиПодписантовJson(): ЧитаемоеСоответствие<РолиПодписантов.Ссылка, Строка>
    знч РолиПодписантовJson: Соответствие<РолиПодписантов.Ссылка, Строка>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ЗначениеJson
        Из
            РолиПодписантов}
    
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        РолиПодписантовJson.Вставить(РезультатСтрока.Ссылка, РезультатСтрока.ЗначениеJson)
    ;
    
    возврат РолиПодписантовJson
;

@ВПроекте
метод РольПодписантаИзJson(Роль: Строка): РолиПодписантов.Ссылка
    знч РольПодписантаИзJson: Соответствие<Строка, РолиПодписантов.Ссылка>
    
    для КлючИЗначение из РолиПодписантовJson()
        РольПодписантаИзJson.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ)
    ;
    
    возврат РольПодписантаИзJson[Роль]
;

@ВПроекте
метод РольПодписантаВJson(Роль: РолиПодписантов.Ссылка): Строка
    возврат РолиПодписантовJson()[Роль]
;

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "agreementResults"
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)

    исп Транзакции.Начать() 

    знч ВнешниеСсылки: Множество<ВебApiСервер.ВнешняяСсылка>
    ВнешниеСсылки.Добавить(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID))
    Сервисы.ПолучитьСсылки(ВнешниеСсылки)
    пер Документ = ОбменДанными.ИдентификаторыЛокальныхОбъектов([ДанныеJson.documentID])
                        .ПолучитьИлиУмолчание(ДанныеJson.documentID)
    
    если не МенеджерСущности.СсылкаСуществует(Документ как Справочник.Ссылка)
        выбросить новый СервисыHttp.ИсключениеОбъектНеНайден(
            "Объект по идентификатору documentID = %ДанныеJson.documentID не найден",
            "documentID",
            ДанныеJson.documentID)
    ;

    пер УчастникСогласования: ФизическиеЛица.Ссылка?
    если не ДанныеJson.personID.Пусто()
        УчастникСогласования = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID)) как ФизическиеЛица.Ссылка
    ;
            
    пер УчастникСогласованияСтрокой: Строка
    если ДанныеJson.personName != Неопределено
        УчастникСогласованияСтрокой = ДанныеJson.personName
    ;
    
    знч Комментарий = ДанныеJson.comment ?? ""
    пер ИдентификаторЭлектронногоДокументаСтрокой = ""
    если ДанныеJson.electronicDocumentID != Неопределено
        и не (ДанныеJson.electronicDocumentID).Пусто()
        
        ИдентификаторЭлектронногоДокументаСтрокой = ДанныеJson.electronicDocumentID
    ;
    пер РольПодписанта = РольПодписантаИзJson(ДанныеJson.signatoryRole)
    знч ДанныеСогласующего = новый Согласования.ДанныеСогласующего(
        УчастникСогласования,
        РольПодписанта
    )
    если ДанныеJson.result == РезультатJson.agreed
        пер Подпись: ДвоичныйОбъект.Ссылка?
        если ДанныеJson.electronicSignature != Неопределено
            знч ДанныеПодписи = ДанныеJson.electronicSignature
            если не ДанныеПодписи.Пусто()
                Подпись = ОбъектноеХранилище.ЗагрузитьИзBase64Строки(ДанныеПодписи).Ссылка
            ;
        ;
        ЗарегистрироватьСогласованиеДокумента(
            Документ            = Документ как ПодписываемыйДокумент.Ссылка,
            ДанныеСогласующего  = ДанныеСогласующего,
            Подпись             = Подпись,
            ИмяПодписанта       = УчастникСогласованияСтрокой,
            Комментарий         = Комментарий,
            ИдентификаторЭлектронногоДокумента = ИдентификаторЭлектронногоДокументаСтрокой,
            ДатаПодписи         = ДанныеJson.time)
        ПослеСогласованияДокумента(Документ как ПодписываемыйДокумент.Ссылка, ДанныеСогласующего, Подпись != Неопределено)
    иначе
        ОтклонитьДокумент(Документ как ПодписываемыйДокумент.Ссылка?, ДанныеСогласующего, Комментарий, УчастникСогласованияСтрокой, ДанныеJson.time)
    ;
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson_V1_2, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)

    исп Транзакции.Начать() 

    знч ВнешниеСсылки: Множество<ВебApiСервер.ВнешняяСсылка>
    ВнешниеСсылки.Добавить(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID))
    Сервисы.ПолучитьСсылки(ВнешниеСсылки)
    пер Документ = ОбменДанными.ИдентификаторыЛокальныхОбъектов([ДанныеJson.documentID])
                        .ПолучитьИлиУмолчание(ДанныеJson.documentID)
    
    если не МенеджерСущности.СсылкаСуществует(Документ как Справочник.Ссылка)
        выбросить новый СервисыHttp.ИсключениеОбъектНеНайден(
            "Объект по идентификатору documentID = %ДанныеJson.documentID не найден",
            "documentID",
            ДанныеJson.documentID)
    ;

    пер УчастникСогласования: ФизическиеЛица.Ссылка?
    если не ДанныеJson.personID.Пусто()
        УчастникСогласования = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID)) как ФизическиеЛица.Ссылка
    ;
            
    пер УчастникСогласованияСтрокой: Строка
    если ДанныеJson.personName != Неопределено
        УчастникСогласованияСтрокой = ДанныеJson.personName
    ;
    
    знч Комментарий = ДанныеJson.comment ?? ""
    пер ИдентификаторЭлектронногоДокументаСтрокой = ""
    если ДанныеJson.electronicDocumentID != Неопределено
        и не (ДанныеJson.electronicDocumentID).Пусто()
        
        ИдентификаторЭлектронногоДокументаСтрокой = ДанныеJson.electronicDocumentID
    ;
    пер РольПодписанта = РольПодписантаИзJson(ДанныеJson.signatoryRole)
    пер ДанныеСогласующего: Согласования.ДанныеСогласующего?
    ДанныеСогласующего = новый Согласования.ДанныеСогласующего(УчастникСогласования, РольПодписанта)
    
    если ДанныеJson.result == РезультатJson.agreed
        пер Подпись: ДвоичныйОбъект.Ссылка?
        если ДанныеJson.electronicSignature != Неопределено
            знч ДанныеПодписи = ДанныеJson.electronicSignature
            если не ДанныеПодписи.Пусто()
                Подпись = ОбъектноеХранилище.ЗагрузитьИзBase64Строки(ДанныеПодписи).Ссылка
            ;
        ;
       ЗарегистрироватьСогласованиеДокумента(
            Документ            = Документ как ПодписываемыйДокумент.Ссылка, 
            ДанныеСогласующего  = ДанныеСогласующего, 
            Подпись             = Подпись, 
            ИмяПодписанта       = УчастникСогласованияСтрокой,
            Комментарий         = Комментарий, 
            ИдентификаторЭлектронногоДокумента = ИдентификаторЭлектронногоДокументаСтрокой, 
            ДатаПодписи         = ДанныеJson.time)
        ПослеСогласованияДокумента(Документ как ПодписываемыйДокумент.Ссылка, ДанныеСогласующего, Подпись != Неопределено)
    иначе
        ОтклонитьДокумент(Документ как ПодписываемыйДокумент.Ссылка?, ДанныеСогласующего, Комментарий, УчастникСогласованияСтрокой, ДанныеJson.time)
    ;
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson_V2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)

    исп Транзакции.Начать() 

    знч ВнешниеСсылки: Множество<ВебApiСервер.ВнешняяСсылка>
    ВнешниеСсылки.Добавить(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID))
    Сервисы.ПолучитьСсылки(ВнешниеСсылки)
    пер Документ = ОбменДанными.ИдентификаторыЛокальныхОбъектов([ДанныеJson.documentID])
                        .ПолучитьИлиУмолчание(ДанныеJson.documentID)
    
    если не МенеджерСущности.СсылкаСуществует(Документ)
        выбросить новый СервисыHttp.ИсключениеОбъектНеНайден(
            "Объект по идентификатору documentID = %ДанныеJson.documentID не найден",
            "documentID",
            ДанныеJson.documentID)
    ;

    пер УчастникСогласования: ФизическиеЛица.Ссылка?
    если не ДанныеJson.personID.Пусто()
        УчастникСогласования = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID)) как ФизическиеЛица.Ссылка
    ;
            
    пер УчастникСогласованияСтрокой: Строка
    если ДанныеJson.personName != Неопределено
        УчастникСогласованияСтрокой = ДанныеJson.personName
    ;
    
    знч Комментарий = ДанныеJson.comment ?? ""
    пер ИдентификаторЭлектронногоДокументаСтрокой = ""
    если ДанныеJson.electronicDocumentID != Неопределено
        и не (ДанныеJson.electronicDocumentID).Пусто()
        
        ИдентификаторЭлектронногоДокументаСтрокой = ДанныеJson.electronicDocumentID
    ;
    пер РольПодписанта = РольПодписантаИзJson(ДанныеJson.signatoryRole)
    пер ДанныеСогласующего: Согласования.ДанныеСогласующего?
    ДанныеСогласующего = новый Согласования.ДанныеСогласующего(УчастникСогласования, РольПодписанта)
    
    пер МЧД: МашиночитаемыеДоверенности.Ссылка?
    если ДанныеJson.powerOfAttorney != Неопределено
        МЧД = Сервисы.ПолучитьСсылку(МашиночитаемыеДоверенности.ВнешняяСсылка(ДанныеJson.powerOfAttorney)) как МашиночитаемыеДоверенности.Ссылка
    ;
    если ДанныеJson.result == РезультатJson.agreed
        пер Подпись: ДвоичныйОбъект.Ссылка?
        если ДанныеJson.electronicSignature != Неопределено
            знч ДанныеПодписи = ДанныеJson.electronicSignature
            если не ДанныеПодписи.Пусто()
                Подпись = ОбъектноеХранилище.ЗагрузитьИзBase64Строки(ДанныеПодписи).Ссылка
            ;
        ;
       ЗарегистрироватьСогласованиеДокумента(
            Документ            = Документ как ПодписываемыйДокумент.Ссылка, 
            ДанныеСогласующего  = ДанныеСогласующего, 
            Подпись             = Подпись, 
            ИмяПодписанта       = УчастникСогласованияСтрокой,
            Комментарий         = Комментарий, 
            ИдентификаторЭлектронногоДокумента = ИдентификаторЭлектронногоДокументаСтрокой, 
            ДатаПодписи         = ДанныеJson.time,
            МЧД                 = МЧД)
        ПослеСогласованияДокумента(Документ как ПодписываемыйДокумент.Ссылка, ДанныеСогласующего, Подпись != Неопределено)
    иначе
        ОтклонитьДокумент(Документ как ПодписываемыйДокумент.Ссылка?, ДанныеСогласующего, Комментарий, УчастникСогласованияСтрокой, ДанныеJson.time)
    ;
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson_V3_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)

    исп Транзакции.Начать() 

    знч ВнешниеСсылки: Множество<ВебApiСервер.ВнешняяСсылка>
    ВнешниеСсылки.Добавить(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID))
    Сервисы.ПолучитьСсылки(ВнешниеСсылки)
    пер Документ = ОбменДанными.ИдентификаторыЛокальныхОбъектов([ДанныеJson.documentID])
                        .ПолучитьИлиУмолчание(ДанныеJson.documentID)
    
    если не МенеджерСущности.СсылкаСуществует(Документ)
        выбросить новый СервисыHttp.ИсключениеОбъектНеНайден(
            "Объект по идентификатору documentID = %ДанныеJson.documentID не найден",
            "documentID",
            ДанныеJson.documentID)
    ;

    пер УчастникСогласования: ФизическиеЛица.Ссылка?
    если не ДанныеJson.personID.Пусто()
        УчастникСогласования = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID)) как ФизическиеЛица.Ссылка
    ;
            
    пер УчастникСогласованияСтрокой: Строка
    если ДанныеJson.personName != Неопределено
        УчастникСогласованияСтрокой = ДанныеJson.personName
    ;
    
    знч Комментарий = ДанныеJson.comment ?? ""
    пер ИдентификаторЭлектронногоДокументаСтрокой = ""
    если ДанныеJson.electronicDocumentID != Неопределено
        и не ДанныеJson.electronicDocumentID.Пусто()
        
        ИдентификаторЭлектронногоДокументаСтрокой = ДанныеJson.electronicDocumentID
    ;
    пер РольПодписанта = РольПодписантаИзJson(ДанныеJson.signatoryRole)
    знч ДанныеСогласующего = новый Согласования.ДанныеСогласующего(
        Согласующий = УчастникСогласования, 
        Роль = РольПодписанта,
        НомерШага = ДанныеJson.step ?? 0)
    
    пер ДанныеПодписи: ПодписиДокументов.ДанныеПодписи
        если ДанныеJson.signature != Неопределено
            ДанныеПодписи = ПодписиДокументов.ОбъектИзJson(ДанныеJson.signature, Сервисы)
        ;
    
    выбор ДанныеJson.result
    когда agreed
        ЗарегистрироватьСогласованиеДокумента(
            Документ            = Документ как ПодписываемыйДокумент.Ссылка, 
            ДанныеСогласующего  = ДанныеСогласующего, 
            Подпись             = ДанныеПодписи.Подпись,
            ИмяПодписанта       = УчастникСогласованияСтрокой,
            Комментарий         = Комментарий, 
            ИдентификаторЭлектронногоДокумента = ИдентификаторЭлектронногоДокументаСтрокой, 
            ДатаПодписи         = ДанныеJson.time, 
            МЧД                 = ДанныеПодписи.МЧД,
            РезультатСогласования = РезультатыСогласования.Согласовано)
        ПослеСогласованияДокумента(Документ как ПодписываемыйДокумент.Ссылка, ДанныеСогласующего, ДанныеJson.signature != Неопределено)
    когда sentForApproval
        ЗарегистрироватьСогласованиеДокумента(
            Документ            = Документ как ПодписываемыйДокумент.Ссылка, 
            ДанныеСогласующего  = ДанныеСогласующего, 
            Подпись             = ДанныеПодписи.Подпись,
            ИмяПодписанта       = УчастникСогласованияСтрокой,
            Комментарий         = Комментарий, 
            ИдентификаторЭлектронногоДокумента = ИдентификаторЭлектронногоДокументаСтрокой, 
            ДатаПодписи         = ДанныеJson.time, 
            МЧД                 = ДанныеПодписи.МЧД,
            РезультатСогласования = РезультатыСогласования.НаСогласовании)        
    когда denied
        ОтклонитьДокумент(Документ как ПодписываемыйДокумент.Ссылка?, ДанныеСогласующего, Комментарий, УчастникСогласованияСтрокой, ДанныеJson.time)
    ;
;

@ВПроекте
метод ЗарегистрироватьСогласованиеДокумента(
        Документ: ПодписываемыйДокумент.Ссылка, 
        ДанныеСогласующего: Согласования.ДанныеСогласующего,
        Подпись: ДвоичныйОбъект.Ссылка? = Неопределено,
        ИмяПодписанта: Строка = "", 
        Комментарий: Строка = "", 
        ИдентификаторЭлектронногоДокумента: Строка = "",
        ДатаПодписи: Момент? = Неопределено,
        МЧД: МашиночитаемыеДоверенности.Ссылка? = Неопределено,
        РезультатСогласования: РезультатыСогласования = РезультатыСогласования.Согласовано)
        
    знч ФильтрУчастникСогласованияСтрокойНеВключен = ДанныеСогласующего.Согласующий != Неопределено или ИмяПодписанта.Пусто()
    знч ФильтрИдентификаторЭлектронногоДокументаНеВключен = ИдентификаторЭлектронногоДокумента.Пусто()
    пер СогласованиеДокумента: СогласованияДокументов.Объект?
    знч Запрос = Запрос{
        Выбрать
            СогласованияДокументов.Ссылка как Ссылка
         Из
            СогласованияДокументов как СогласованияДокументов
         Где
            СогласованияДокументов.Документ == %Документ
            И СогласованияДокументов.УчастникСогласования == %{ДанныеСогласующего.Согласующий}
            И СогласованияДокументов.РольПодписанта == %{ДанныеСогласующего.Роль}
            И (%ФильтрУчастникСогласованияСтрокойНеВключен
                Или СогласованияДокументов.УчастникСогласованияСтрокой == %ИмяПодписанта)
            И (%ФильтрИдентификаторЭлектронногоДокументаНеВключен
                Или СогласованияДокументов.ИдентификаторЭлектронногоДокумента == %ИдентификаторЭлектронногоДокумента)}
                
    пер УчастникСогласованияСтрокой = ИмяПодписанта
    если УчастникСогласованияСтрокой.Пусто() и ДанныеСогласующего.Согласующий != Неопределено
        УчастникСогласованияСтрокой = ДанныеСогласующего.Согласующий.Представление()
    ;
    исп Результат = Запрос.Выполнить()
    исп Транзакции.Начать()
    пер Ссылка = Результат.ПервыйИлиУмолчание()?.Ссылка ?? Неопределено
    если Ссылка != Неопределено
        СогласованиеДокумента = Ссылка.ЗагрузитьОбъект(Истина)
    иначе
        СогласованиеДокумента = новый СогласованияДокументов.Объект()
        СогласованиеДокумента.Документ = Документ
        СогласованиеДокумента.УчастникСогласования = ДанныеСогласующего.Согласующий
        СогласованиеДокумента.УчастникСогласованияСтрокой = УчастникСогласованияСтрокой
        СогласованиеДокумента.ИдентификаторЭлектронногоДокумента = ИдентификаторЭлектронногоДокумента
    ;
    СогласованиеДокумента.Комментарий = Комментарий
    СогласованиеДокумента.РольПодписанта = ДанныеСогласующего.Роль
    СогласованиеДокумента.НомерШагаСогласования = ДанныеСогласующего.НомерШага
    СогласованиеДокумента.Результат = РезультатСогласования
    
    пер ДатаРегистрируемойПодписи: Момент?
    если ДатаПодписи == Неопределено
        если Подпись == Неопределено
            ДатаРегистрируемойПодписи = МенеджерДат.ТекущаяДатаВремя()
        иначе
            ДатаРегистрируемойПодписи = МенеджерКриптографии.МоментПодписи(Подпись)
        ;
    иначе
        ДатаРегистрируемойПодписи = ДатаПодписи
    ;
    СогласованиеДокумента.Дата = ДатаРегистрируемойПодписи
    если СогласованиеДокумента.Подпись == Неопределено
        или не МенеджерСущности.СсылкаСуществует(СогласованиеДокумента.Подпись)
        
        СогласованиеДокумента.Подпись = ПодписиДокументов.ДобавитьПодпись(
            Документ            = СогласованиеДокумента.Документ,
            ДатаПодписи         = СогласованиеДокумента.Дата,
            Подпись             = Подпись,
            МЧД                 = МЧД)
    иначе
        ПодписиДокументов.ОбновитьПодпись(
            ПодписьСсылка = СогласованиеДокумента.Подпись,
            ДатаПодписи     = СогласованиеДокумента.Дата,
            Подпись         = Подпись,
            МЧД             = МЧД)
    ;
    
    СогласованиеДокумента.Записать()
;

@ВПроекте
метод ОтклонитьДокумент(
        Документ: ПодписываемыйДокумент.Ссылка?,
        ДанныеСогласующего: Согласования.ДанныеСогласующего,
        Комментарий: Строка, 
        ИмяОтказавшего: Строка = "",
        ДатаОтказа: Момент? = Неопределено)
        
    знч ФильтрУчастникСогласованияСтрокойНеВключен = ДанныеСогласующего.Согласующий != Неопределено или ИмяОтказавшего.Пусто()
    знч Запрос = Запрос{
        Выбрать
            Ссылка
         Из
            СогласованияДокументов
         Где
            Документ == %Документ
            И УчастникСогласования == %{ДанныеСогласующего.Согласующий}
            И (%ФильтрУчастникСогласованияСтрокойНеВключен
                Или УчастникСогласованияСтрокой == %ИмяОтказавшего)}
    пер УчастникСогласованияСтрокой = ИмяОтказавшего
    если УчастникСогласованияСтрокой.Пусто() и ДанныеСогласующего.Согласующий != Неопределено
        УчастникСогласованияСтрокой = ДанныеСогласующего.Согласующий.Представление()
    ;
    знч ОтклоненныеДокументы: Массив<СогласованияДокументов.Объект>
    исп Транзакции.Начать()
    исп Результат = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (РезультатСтроки.Пусто())
        ОтклоненныеДокументы.Добавить(новый СогласованияДокументов.Объект())
    иначе
        для ОтклоненныйДокумент из РезультатСтроки
            ОтклоненныеДокументы.Добавить(ОтклоненныйДокумент.Ссылка.ЗагрузитьОбъект(Истина))
        ;
    ;
    для ОтклоненныйДокумент из ОтклоненныеДокументы
        ОтклоненныйДокумент.Результат                   = РезультатыСогласования.Отказано
        ОтклоненныйДокумент.Документ                    = Документ
        ОтклоненныйДокумент.УчастникСогласования        = ДанныеСогласующего.Согласующий
        ОтклоненныйДокумент.УчастникСогласованияСтрокой = УчастникСогласованияСтрокой
        ОтклоненныйДокумент.Комментарий                 = Комментарий
        ОтклоненныйДокумент.РольПодписанта              = ДанныеСогласующего.Роль
        ОтклоненныйДокумент.НомерШагаСогласования       = ДанныеСогласующего.НомерШага
        если ДатаОтказа == Неопределено
            ОтклоненныйДокумент.Дата = МенеджерДат.ТекущаяДатаВремя()
        иначе
            ОтклоненныйДокумент.Дата = ДатаОтказа
        ;
        ОтклоненныйДокумент.Записать()
    ;  
    СостДокументов.УстановитьОтказ(Документ, Комментарий)
;

@ВПроекте
метод ОтозватьПодпись(Документ: неизвестно, УчастникСогласования: ФизическиеЛица.Ссылка?)
    знч Запрос = Запрос{
        Выбрать
            Ссылка
         Из
            СогласованияДокументов
         Где
            Документ == %Документ
            И УчастникСогласования == %УчастникСогласования}
    исп Результат = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        РезультатСтроки[0].Ссылка.ЗагрузитьОбъект().Удалить()
    ;
;

@ВПроекте
метод СписокПодписавших(Документ: неизвестно): Массив<ФизическиеЛица.Ссылка>
    знч Запрос = Запрос{
        Выбрать
            УчастникСогласования
         Из
            СогласованияДокументов
         Где
            Документ == %Документ}
    пер СписокПодписавших = новый Массив<ФизическиеЛица.Ссылка>()
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        СписокПодписавших.Добавить(РезультатСтрока.УчастникСогласования)
    ;
    возврат СписокПодписавших
;

метод ПодписиДокумента(Документ: неизвестно, РолиПодписей: Массив<РолиПодписантов.Ссылка>,
    ТолькоЦифровые: Булево = Ложь): Массив<СогласованияДокументов.Ссылка>

    пер Подписи: Массив<СогласованияДокументов.Ссылка>
    знч Запрос = Запрос{
        Выбрать
            Ссылка Как Ссылка
         Из
            СогласованияДокументов
         Где
            Документ == %Документ
            И (Не %{ТолькоЦифровые} Или Подпись != Неопределено)
            И (%{РолиПодписей.Пусто()}
                Или РольПодписанта В (%РолиПодписей))}
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        Подписи.Добавить(РезультатСтрока.Ссылка)
    ;
    возврат Подписи
;

@ВПроекте
метод ПодписьФизлицаПодДокументом(Документ: неизвестно, УчастникСогласования: ФизическиеЛица.Ссылка): Байты?
    пер Подпись: Байты?

    пер ДанныеПодписи = ДанныеПодписиДокумента(Документ, УчастникСогласования)
    если ДанныеПодписи == Неопределено
        возврат Неопределено
    ;
    
    пер СсылкаНаДанные: ДвоичныйОбъект.Ссылка = ДанныеПодписи.Подпись
    пер Данные: ДвоичныйОбъект = СсылкаНаДанные.Загрузить()
    Подпись = Данные.ПолучитьБайты()
    
    возврат Подпись
;

@ВПроекте
метод ПодписьДокумента(Документ: неизвестно, УчастникСогласования: ФизическиеЛица.Ссылка,
    РолиПодписантов: Массив<РолиПодписантов.Ссылка> = [],
    РезультатСогласования: РезультатыСогласования? = Неопределено): СогласованияДокументов.Ссылка?

    возврат ДанныеПодписиДокумента(Документ, УчастникСогласования, РолиПодписантов, РезультатСогласования)?.Ссылка
;

метод ДанныеПодписиДокумента(
        Документ: неизвестно, 
        УчастникСогласования: ФизическиеЛица.Ссылка,
        РолиПодписантов: Массив<РолиПодписантов.Ссылка> = [],
        РезультатСогласования: РезультатыСогласования? = Неопределено): Согласования.ДанныеПодписиДокумента?

    знч ДанныеПодписей = ДанныеПодписейДокумента(Документ, [УчастникСогласования], РолиПодписантов, РезультатСогласования)
    если ДанныеПодписей.Пусто() 
        возврат Неопределено
    ;
    возврат ДанныеПодписей.Первый()
;

@ВПроекте
метод ДанныеПодписейДокумента(Документ: неизвестно): ЧитаемыйМассив<Согласования.ДанныеПодписиДокумента>
    возврат ДанныеПодписейДокумента(Документ, Неопределено, [])
;

@ВПроекте
метод ДанныеПодписейДокумента(
        Документ: неизвестно, 
        УчастникиСогласования: Массив<ФизическиеЛица.Ссылка>?,
        РолиПодписантов: Массив<РолиПодписантов.Ссылка>,
        РезультатСогласования: РезультатыСогласования? = Неопределено): ЧитаемыйМассив<Согласования.ДанныеПодписиДокумента>
    
    знч ПодписиДокумента: Массив<Согласования.ДанныеПодписиДокумента>
    знч ФильтрУчастникиСогласованияНеВключен = УчастникиСогласования == Неопределено
    знч ОтборРезультатСогласованияНеВключен = РезультатСогласования == Неопределено
    
    знч Запрос = Запрос{
        Выбрать
            СогласованияДокументов.Документ Как Документ,
            СогласованияДокументов.Дата Как Дата,
            СогласованияДокументов.УчастникСогласования Как УчастникСогласования,
            СогласованияДокументов.УчастникСогласованияСтрокой Как УчастникСогласованияСтрокой,
            СогласованияДокументов.РольПодписанта,
            СогласованияДокументов.НомерШагаСогласования Как НомерШагаСогласования,
            СогласованияДокументов.Подпись как СсылкаНаПодпись,
            ПодписиДокументов.Подпись.ЗаменитьNull(Неопределено) Как Подпись,
            СогласованияДокументов.Ссылка Как Ссылка,
            СогласованияДокументов.Результат Как Результат,
            СогласованияДокументов.ИдентификаторЭлектронногоДокумента Как ИдентификаторЭлектронногоДокумента,
            ПодписиДокументов.МЧД.ЗаменитьNull(Неопределено) Как МЧД,
            СогласованияДокументов.Комментарий Как Комментарий
         Из
            СогласованияДокументов Как СогласованияДокументов
            Левое Соединение ПодписиДокументов Как ПодписиДокументов
                По СогласованияДокументов.Подпись == ПодписиДокументов.Ссылка
         Где
            СогласованияДокументов.Документ В (%Документ)
            И (%ФильтрУчастникиСогласованияНеВключен
                Или СогласованияДокументов.УчастникСогласования В (%УчастникиСогласования))
            И (%{РолиПодписантов.Пусто()}
                Или СогласованияДокументов.РольПодписанта В (%РолиПодписантов))
            И (%ОтборРезультатСогласованияНеВключен
                Или СогласованияДокументов.Результат == %РезультатСогласования)
        Упорядочить По
                СогласованияДокументов.Дата}
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        знч ДанныеПодписи = новый Согласования.ДанныеПодписиДокумента(
            РезультатСтрока.Документ,
            РезультатСтрока.Дата,
            РезультатСтрока.Ссылка,
            РезультатСтрока.УчастникСогласования,
            РезультатСтрока.УчастникСогласованияСтрокой,
            РезультатСтрока.СсылкаНаПодпись,
            РезультатСтрока.Подпись,
            РезультатСтрока.РольПодписанта,
            РезультатСтрока.НомерШагаСогласования,
            РезультатСтрока.Результат,
            РезультатСтрока.ИдентификаторЭлектронногоДокумента,
            РезультатСтрока.МЧД,
            РезультатСтрока.Комментарий)
        ПодписиДокумента.Добавить(ДанныеПодписи)
    ;
    возврат ПодписиДокумента
;

@ВПроекте

метод ДанныеПодписейДокументаФизическогоЛица(Документ: неизвестно,  ФизическоеЛицо: ФизическиеЛица.Ссылка?): ЧитаемыйМассив<Согласования.ДанныеПодписиДокумента>
    возврат ДанныеПодписейДокумента(Документ, ФизическоеЛицо == Неопределено ? Неопределено : [ФизическоеЛицо] , [])
;

@ВПроекте
метод ПослеПолногоСогласования(Документ: ПодписываемыйДокумент.Ссылка)
    знч ДанныеПодписей = ДанныеПодписейДокумента(Документ)
    для ДанныеПодписи из ДанныеПодписей
        если ДанныеПодписи.УчастникСогласования == Неопределено
            продолжить
        ;
        пер ТипСогласуемогоДокумента: ТипыСогласуемыхДокументов.Ссылка?
        для Сервис из СогласованияПользователь.ПолучитьСервисы()
            ТипСогласуемогоДокумента = Сервис.ТипСогласуемогоДокумента(Документ)
            если ТипСогласуемогоДокумента != Неопределено
                прервать
            ;
        ;
        РегистрацияИзменений.ЗарегистрироватьИзменение(ДанныеПодписи.Ссылка, ТипСогласуемогоДокумента)
    ;
;

@ВПодсистеме
@ИменованныеПараметры
метод Согласования(Документ: Сущность.Ключ, ФизическоеЛицо: ФизическиеЛица.Ссылка? = Неопределено, Роль: РолиПодписантов.Ссылка? = Неопределено): ЧитаемыйМассив<СогласующиеСтрока>
    пер Согласования: Массив<СогласующиеСтрока>
    знч ДокументЛюбогоТипа: неизвестно = Документ
    знч Запрос = Запрос{
        Выбрать
            СогласованияДокументов.УчастникСогласования Как УчастникСогласования,
            СогласованияДокументов.УчастникСогласования.Миниатюра.ЗаменитьNull(Неопределено) Как Миниатюра,
            СогласованияДокументов.УчастникСогласования.Фамилия.ЗаменитьNull("") Как Фамилия,
            СогласованияДокументов.УчастникСогласования.Имя.ЗаменитьNull("") Как Имя,
            СогласованияДокументов.УчастникСогласования.Отчество.ЗаменитьNull("") Как Отчество,
            СогласованияДокументов.УчастникСогласования.ИнициалыИмени.ЗаменитьNull("") Как ИнициалыИмени,
            СогласованияДокументов.УчастникСогласованияСтрокой Как УчастникСогласованияСтрокой,
            СогласованияДокументов.РольПодписанта Как РольПодписанта,
            СогласованияДокументов.НомерШагаСогласования Как НомерШагаСогласования,
            СогласованияДокументов.Результат Как Результат,
            СогласованияДокументов.Комментарий Как Комментарий,
            Максимум(СогласованияДокументов.Дата) Как Дата
        Породить ОписаниеСогласования
        Из
            СогласованияДокументов Как СогласованияДокументов
        Где
            СогласованияДокументов.Документ == %ДокументЛюбогоТипа
            и (%{ФизическоеЛицо == Неопределено} или СогласованияДокументов.УчастникСогласования == %ФизическоеЛицо)
            и (%{Роль == Неопределено} или СогласованияДокументов.РольПодписанта == %Роль)
        Сгруппировать По
            СогласованияДокументов.УчастникСогласования,
            СогласованияДокументов.УчастникСогласованияСтрокой,
            СогласованияДокументов.РольПодписанта,
            СогласованияДокументов.НомерШагаСогласования,
            СогласованияДокументов.Результат,
            СогласованияДокументов.Комментарий
        Упорядочить По
            Дата}
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        знч Строка = новый СогласующиеСтрока()
        Строка.УчастникСогласования = РезультатСтрока.УчастникСогласования
        Строка.УчастникСогласованияСтрокой = УчастникСогласованияСтрокой(РезультатСтрока)
        пер Миниатюра: ДвоичныйОбъект.Ссылка? = Файлы.СведенияОФайле(РезультатСтрока.Миниатюра).Хранилище
        Строка.Миниатюра = Миниатюра
        Строка.Результат = РезультатСтрока.Результат
        Строка.Дата = РезультатСтрока.Дата
        Строка.Комментарий = РезультатСтрока.Комментарий
        Строка.РольПодписанта = РезультатСтрока.РольПодписанта
        Строка.НомерШагаСогласования = РезультатСтрока.НомерШагаСогласования
        если Строка.УчастникСогласования != Неопределено
            Строка.УчастникСогласованияДолжность = Сотрудники.СотрудникиФизическогоЛицаОрганизации(Строка.УчастникСогласования).ПервыйИлиУмолчание()?.Должность
        ;
        Согласования.Добавить(Строка)
    ;
    возврат Согласования
;

@ВПодсистеме
метод ДокументыСогласований(Согласования: ЧитаемыйМассив<СогласованияДокументов.Ссылка>): ЧитаемоеСоответствие<СогласованияДокументов.Ссылка, ПодписываемыйДокумент.Ссылка?>
    знч ДокументыСогласований: Соответствие<СогласованияДокументов.Ссылка, ПодписываемыйДокумент.Ссылка?>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Документ
        Из
            СогласованияДокументов
        Где
            Ссылка в (%Согласования)
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ДокументыСогласований.Вставить(СтрокаРезультата.Ссылка, СтрокаРезультата.Документ)
    ;
    
    возврат ДокументыСогласований
;

метод УчастникСогласованияСтрокой(СтрокаРезультата: ОписаниеСогласования): Строка
    пер УчастникСогласованияСтрокой: Строка
    если СтрокаРезультата.УчастникСогласования != Неопределено
        УчастникСогласованияСтрокой = Согласования.УчастникСогласованияСтрокой(СтрокаРезультата.Фамилия, СтрокаРезультата.Имя,
            СтрокаРезультата.Отчество, СтрокаРезультата.ИнициалыИмени)
    иначе
        УчастникСогласованияСтрокой = СтрокаРезультата.УчастникСогласованияСтрокой
    ;
    возврат УчастникСогласованияСтрокой
;

@ВПроекте
метод МожетУчаствоватьВСогласовании(ФизическоеЛицо: ФизическиеЛица.Ссылка): Булево
    знч Сервис = СогласованияСервис.ПолучитьСервис()
    если Сотрудники.СотрудникиФизическогоЛица(ФизическоеЛицо).Пусто()
        возврат Ложь
    ;
    
    если Сервис != Неопределено 
        возврат Сервис.ФизлицоМожетУчаствоватьВСогласовании(ФизическоеЛицо)
    иначе
        возврат Истина
    ;
;

@ВПроекте
метод ПолучитьДанныеJson(Ссылка: ИсходящиеДанные.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Объект?
    если Ссылка == Неопределено 
        возврат Неопределено
    ;   
    возврат ГруппаИзмененийВJson([Ссылка], Сервисы, ВерсияФорматаОбмена)["agreementResults"]
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    
    знч ГруппаИзмененийJson: Массив<Объект?>

    для КлючИЗначение из ДанныеСогласований(Ссылки)
        если ВерсияФорматаОбмена == Неопределено
            ГруппаИзмененийJson.Добавить(ДанныеСогласованияВJson(КлючИЗначение.Значение, Сервисы))
        иначе если ВерсияФорматаОбмена >= Версия{3.0}
            ГруппаИзмененийJson.Добавить(ДанныеСогласованияВJson_V3_0(КлючИЗначение.Значение, Сервисы))
        иначе если ВерсияФорматаОбмена >= Версия{2.0}
            ГруппаИзмененийJson.Добавить(ДанныеСогласованияВJson_V2_0(КлючИЗначение.Значение, Сервисы))
        иначе если ВерсияФорматаОбмена >= Версия{1.2}
            ГруппаИзмененийJson.Добавить(ДанныеСогласованияВJson_V1_2(КлючИЗначение.Значение, Сервисы))
        иначе если ВерсияФорматаОбмена >= Версия{1.0}
            ГруппаИзмененийJson.Добавить(ДанныеСогласованияВJson(КлючИЗначение.Значение, Сервисы))
        ;
    ;
    возврат {"agreementResults": ГруппаИзмененийJson}
;

метод ДанныеСогласований(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>):
        ЧитаемоеСоответствие<СогласованияДокументов.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
        
    знч СогласованияСсылки: Массив<СогласованияДокументов.Ссылка>
    для Ссылка из Ссылки
        СогласованияСсылки.Добавить(Ссылка как СогласованияДокументов.Ссылка)
    ;
    знч Данные: Соответствие<СогласованияДокументов.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч РолиПодписантов = Согласования.РолиПодписантовПриложения()
    знч Запрос = Запрос{
        Выбрать
            СогласованияДокументов.Ссылка Как Ссылка,
            СогласованияДокументов.Документ Как Документ,
            СогласованияДокументов.УчастникСогласования Как УчастникСогласования,
            СогласованияДокументов.УчастникСогласованияСтрокой Как УчастникСогласованияСтрокой,
            СогласованияДокументов.Подпись Как СсылкаНаПодпись,
            ПодписиДокументов.Подпись.ЗаменитьNull(Неопределено) Как Подпись,
            СогласованияДокументов.РольПодписанта Как РольПодписанта,
            СогласованияДокументов.Комментарий Как Комментарий,
            СогласованияДокументов.Результат Как Результат,
            СогласованияДокументов.ИдентификаторЭлектронногоДокумента Как ИдентификаторЭлектронногоДокумента,
            СогласованияДокументов.Дата Как Дата,
            СогласованияДокументов.НомерШагаСогласования как НомерШагаСогласования,
            ПодписиДокументов.МЧД.ЗаменитьNull(Неопределено) Как МЧД
        Из
            СогласованияДокументов Как СогласованияДокументов
            Левое Соединение ПодписиДокументов Как ПодписиДокументов
                По СогласованияДокументов.Подпись == ПодписиДокументов.Ссылка
         Где
            СогласованияДокументов.Ссылка В (%СогласованияСсылки)
            И СогласованияДокументов.РольПодписанта В (%РолиПодписантов)
            И СогласованияДокументов.Результат != РезультатыСогласования.НаПодписанииВСервисеПодписания}
    исп Результат = Запрос.Выполнить() 

    для РезультатСтрока из Результат
        Данные.Вставить(РезультатСтрока.Ссылка, МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат))
    ;
    возврат Данные
;

метод ДанныеСогласованияВJson(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДанныеJson

    знч ДанныеВJson = новый ДанныеJson()
    пер ДокументСогласованияJson: ДокументСогласованияJson?
    для Сервис из СогласованияПользователь.ПолучитьСервисы()
        ДокументСогласованияJson = Сервис.ДокументСогласованияJson(ДанныеОбъекта, Сервисы)
        если ДокументСогласованияJson != Неопределено
            прервать
        ;
    ;

    ДанныеВJson.ID = (ДанныеОбъекта["Ссылка"] как СогласованияДокументов.Ссылка).Ид.ВСтроку()
    ДанныеВJson.documentID = ДокументСогласованияJson?.documentID ?? ""
    ДанныеВJson.updateDocument = ДокументСогласованияJson?.updateDocument
    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["УчастникСогласования"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.personName = ДанныеОбъекта["УчастникСогласованияСтрокой"] как Строка
    ДанныеВJson.signatoryRole = РольПодписантаВJson(ДанныеОбъекта["РольПодписанта"] как РолиПодписантов.Ссылка)
    пер РезультатСогласования = ДанныеОбъекта["Результат"] как РезультатыСогласования?
    если РезультатСогласования != Неопределено
        ДанныеВJson.result = РезультатСогласованияВJson(РезультатСогласования)
    ;
    пер ВерсияДокумента = Файлы.ВерсияЭлектронногоДокументаОбъекта(ДанныеОбъекта["Документ"] как ВладелецФайлы.Ссылка,
        ДанныеОбъекта["ИдентификаторЭлектронногоДокумента"] как Строка)
    если ВерсияДокумента != Неопределено
        ДанныеВJson.documentVersion = ВерсияДокумента
    ;

    если не (ДанныеОбъекта["Комментарий"] как Строка).Пусто()
        ДанныеВJson.note = ДанныеОбъекта["Комментарий"] как Строка
    ;

    если (ДанныеОбъекта["Подпись"] как ДвоичныйОбъект.Ссылка?) != Неопределено
        пер Подпись: ДвоичныйОбъект = (ДанныеОбъекта["Подпись"] как ДвоичныйОбъект.Ссылка).Загрузить()
        если Подпись.Размер.ВБайтах() > 0
            пер ДанныеПодписи = Кодировки.Base64.КодироватьВСтроку(Подпись.ПолучитьБайты(), ВидBase64.Base64)
            ДанныеВJson.electronicSignature = ДанныеПодписи
            пер ДанныеСертификата = МенеджерКриптографии.ИнформацияОСертификатеПодписи(Подпись)
            если ДанныеСертификата.Данные != Неопределено
                ДанныеВJson.certificate = Кодировки.Base64.КодироватьВСтроку(ДанныеСертификата.Данные, ВидBase64.Base64)
            ;
        ;
    ;
    если не (ДанныеОбъекта["ИдентификаторЭлектронногоДокумента"] как Строка).Пусто()
        ДанныеВJson.electronicDocumentID = ДанныеОбъекта["ИдентификаторЭлектронногоДокумента"] как Строка
    ;

    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как СогласованияДокументов.Ссылка))
    ;
    
    ДанныеВJson.time = ДанныеОбъекта["Дата"] как Момент
    возврат ДанныеВJson
;

метод ДанныеСогласованияВJson_V1_2(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДанныеJson_V1_2

    знч ДанныеВJson = новый ДанныеJson_V1_2()
    пер ДокументСогласованияJson: ДокументСогласованияJson?
    для Сервис из СогласованияПользователь.ПолучитьСервисы()
        ДокументСогласованияJson = Сервис.ДокументСогласованияJson(ДанныеОбъекта, Сервисы)
        если ДокументСогласованияJson != Неопределено
            прервать
        ;
    ;

    ДанныеВJson.ID = (ДанныеОбъекта["Ссылка"] как СогласованияДокументов.Ссылка).Ид.ВСтроку()
    ДанныеВJson.documentID = ДокументСогласованияJson?.documentID ?? ""
    ДанныеВJson.updateDocument = ДокументСогласованияJson?.updateDocument
    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["УчастникСогласования"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.personName = ДанныеОбъекта["УчастникСогласованияСтрокой"] как Строка
    ДанныеВJson.signatoryRole = РольПодписантаВJson(ДанныеОбъекта["РольПодписанта"] как РолиПодписантов.Ссылка)
    пер РезультатСогласования = ДанныеОбъекта["Результат"] как РезультатыСогласования?
    если РезультатСогласования != Неопределено
        ДанныеВJson.result = РезультатСогласованияВJson(РезультатСогласования)
    ;
    пер ВерсияДокумента = Файлы.ВерсияЭлектронногоДокументаОбъекта(ДанныеОбъекта["Документ"] как ВладелецФайлы.Ссылка,
        ДанныеОбъекта["ИдентификаторЭлектронногоДокумента"] как Строка)
    если ВерсияДокумента != Неопределено
        ДанныеВJson.documentVersion = ВерсияДокумента
    ;

    если не (ДанныеОбъекта["Комментарий"] как Строка).Пусто()
        ДанныеВJson.comment = ДанныеОбъекта["Комментарий"] как Строка
    ;

    если (ДанныеОбъекта["Подпись"] как ДвоичныйОбъект.Ссылка?) != Неопределено
        пер Подпись: ДвоичныйОбъект = (ДанныеОбъекта["Подпись"] как ДвоичныйОбъект.Ссылка).Загрузить()
        если Подпись.Размер.ВБайтах()> 0
            пер ДанныеПодписи = Кодировки.Base64.КодироватьВСтроку(Подпись.ПолучитьБайты(), ВидBase64.Base64)
            ДанныеВJson.electronicSignature = ДанныеПодписи
            пер ДанныеСертификата = МенеджерКриптографии.ИнформацияОСертификатеПодписи(Подпись)
            если ДанныеСертификата.Данные != Неопределено
                ДанныеВJson.certificate = Кодировки.Base64.КодироватьВСтроку(ДанныеСертификата.Данные, ВидBase64.Base64)
            ;
        ;
    ;
    если не (ДанныеОбъекта["ИдентификаторЭлектронногоДокумента"] как Строка).Пусто()
        ДанныеВJson.electronicDocumentID = ДанныеОбъекта["ИдентификаторЭлектронногоДокумента"] как Строка
    ;

    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как СогласованияДокументов.Ссылка))
    ;
    
    ДанныеВJson.time = ДанныеОбъекта["Дата"] как Момент
    возврат ДанныеВJson
;

метод ДанныеСогласованияВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДанныеJson_V2_0

    знч ДанныеВJson = новый ДанныеJson_V2_0()
    пер ДокументСогласованияJson: ДокументСогласованияJson?
    для Сервис из СогласованияПользователь.ПолучитьСервисы()
        ДокументСогласованияJson = Сервис.ДокументСогласованияJson(ДанныеОбъекта, Сервисы)
        если ДокументСогласованияJson != Неопределено
            прервать
        ;
    ;

    ДанныеВJson.ID = (ДанныеОбъекта["Ссылка"] как СогласованияДокументов.Ссылка).Ид.ВСтроку()
    ДанныеВJson.documentID = ДокументСогласованияJson?.documentID ?? ""
    ДанныеВJson.updateDocument = ДокументСогласованияJson?.updateDocument
    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["УчастникСогласования"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.personName = ДанныеОбъекта["УчастникСогласованияСтрокой"] как Строка
    ДанныеВJson.signatoryRole = РольПодписантаВJson(ДанныеОбъекта["РольПодписанта"] как РолиПодписантов.Ссылка)
    пер РезультатСогласования = ДанныеОбъекта["Результат"] как РезультатыСогласования?
    если РезультатСогласования != Неопределено
        ДанныеВJson.result = РезультатСогласованияВJson(РезультатСогласования)
    ;
    пер ВерсияДокумента = Файлы.ВерсияЭлектронногоДокументаОбъекта(ДанныеОбъекта["Документ"] как ВладелецФайлы.Ссылка,
        ДанныеОбъекта["ИдентификаторЭлектронногоДокумента"] как Строка)
    если ВерсияДокумента != Неопределено
        ДанныеВJson.documentVersion = ВерсияДокумента
    ;

    если не (ДанныеОбъекта["Комментарий"] как Строка).Пусто()
        ДанныеВJson.comment = ДанныеОбъекта["Комментарий"] как Строка
    ;

    если (ДанныеОбъекта["Подпись"] как ДвоичныйОбъект.Ссылка?) != Неопределено
        пер Подпись: ДвоичныйОбъект = (ДанныеОбъекта["Подпись"] как ДвоичныйОбъект.Ссылка).Загрузить()
        если Подпись.Размер.ВБайтах() > 0
            пер ДанныеПодписи = Кодировки.Base64.КодироватьВСтроку(Подпись.ПолучитьБайты(), ВидBase64.Base64)
            ДанныеВJson.electronicSignature = ДанныеПодписи
            пер ДанныеСертификата = МенеджерКриптографии.ИнформацияОСертификатеПодписи(Подпись)
            если ДанныеСертификата.Данные != Неопределено
                ДанныеВJson.certificate = Кодировки.Base64.КодироватьВСтроку(ДанныеСертификата.Данные, ВидBase64.Base64)
            ;
        ;
    ;
    если не (ДанныеОбъекта["ИдентификаторЭлектронногоДокумента"] как Строка).Пусто()
        ДанныеВJson.electronicDocumentID = ДанныеОбъекта["ИдентификаторЭлектронногоДокумента"] как Строка
    ;

    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как СогласованияДокументов.Ссылка))
    ;
    
    ДанныеВJson.time = ДанныеОбъекта["Дата"] как Момент
    если  ДанныеОбъекта["МЧД"] != Неопределено
        ДанныеВJson.powerOfAttorney = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["МЧД"] как МашиночитаемыеДоверенности.Ссылка)
    ;
    возврат ДанныеВJson
;

метод ДанныеСогласованияВJson_V3_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДанныеJson_V3_0

    знч ДанныеВJson = новый ДанныеJson_V3_0()
    пер ДокументСогласованияJson: ДокументСогласованияJson?
    для Сервис из СогласованияПользователь.ПолучитьСервисы()
        ДокументСогласованияJson = Сервис.ДокументСогласованияJson(ДанныеОбъекта, Сервисы)
        если ДокументСогласованияJson != Неопределено
            прервать
        ;
    ;

    ДанныеВJson.ID = (ДанныеОбъекта["Ссылка"] как СогласованияДокументов.Ссылка).Ид.ВСтроку()
    ДанныеВJson.documentID = ДокументСогласованияJson?.documentID ?? ""
    ДанныеВJson.updateDocument = ДокументСогласованияJson?.updateDocument
    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["УчастникСогласования"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.personName = ДанныеОбъекта["УчастникСогласованияСтрокой"] как Строка
    ДанныеВJson.signatoryRole = РольПодписантаВJson(ДанныеОбъекта["РольПодписанта"] как РолиПодписантов.Ссылка)
    пер РезультатСогласования = ДанныеОбъекта["Результат"] как РезультатыСогласования?
    если РезультатСогласования != Неопределено
        ДанныеВJson.result = РезультатСогласованияВJson_V3_0(РезультатСогласования)
    ;
    если не (ДанныеОбъекта["Комментарий"] как Строка).Пусто()
        ДанныеВJson.comment = ДанныеОбъекта["Комментарий"] как Строка
    ;
    
    если ДанныеОбъекта["СсылкаНаПодпись"] != Неопределено
        ДанныеВJson.signature = ПодписиДокументов.ДанныеПодписиВJson_V3_0(
            ДанныеОбъекта["СсылкаНаПодпись"] как ПодписиДокументов.Ссылка, Сервисы)
    ;

    если не (ДанныеОбъекта["ИдентификаторЭлектронногоДокумента"] как Строка).Пусто()
        ДанныеВJson.electronicDocumentID = ДанныеОбъекта["ИдентификаторЭлектронногоДокумента"] как Строка
    ;
    
    ДанныеВJson.step = ДанныеОбъекта["НомерШагаСогласования"] как Число
    
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как СогласованияДокументов.Ссылка))
    ;
    
    ДанныеВJson.time = ДанныеОбъекта["Дата"] как Момент
    возврат ДанныеВJson
;

//КонецОбласти

@ВПроекте
метод ПослеСогласованияДокумента(Документ: ПодписываемыйДокумент.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего, ОбновитьПредставление: Булево)
    исп Транзакции.Начать()
    для Сервис из СогласованияПользователь.ПолучитьСервисы()
        Сервис.ПослеПодписанияДокумента(Документ, ДанныеСогласующего, ОбновитьПредставление)
    ;
;

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: СогласованияДокументов.Ссылка, ТребуетсяРегистрацияИзменений: Булево, Документ: ПодписываемыйДокумент.Ссылка)
    если ТребуетсяРегистрацияИзменений
        пер ТипСогласуемогоДокумента: ТипыСогласуемыхДокументов.Ссылка?
        для Сервис из СогласованияПользователь.ПолучитьСервисы()
            ТипСогласуемогоДокумента = Сервис.ТипСогласуемогоДокумента(Документ)
            если ТипСогласуемогоДокумента != Неопределено
                прервать
            ;
        ;
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, ТипСогласуемогоДокумента)
    ;
    для Сервис из СогласованияПользователь.ПолучитьСервисы()
        если Сервис.ОтправлятьСогласование(Документ)
            ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Ссылка, Истина)
            возврат
        ;
    ;
;

@ВПроекте
метод ЗарегистрироватьПодписиОтправляемогоДокумента(Документ: неизвестно, Отправляемый: Булево)
    если Документ это СогласованияДокументов.Ссылка
        возврат
    ;
    пер Подписи = ПодписиДокумента(Документ, Согласования.РолиПодписантовПриложения())
    для Подпись из Подписи
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Подпись, Отправляемый)
    ;
;

//Область ОбработчикиОбновления

метод РольПодписантаСогласованияДокументов(СогласованияДокументовОбъект: СогласованияДокументов.Объект): РолиПодписантов.Ссылка
    возврат СогласованияДокументовОбъект.УчастникСогласования == Неопределено ? Согласования.РольПодписантаИсполнитель() : Согласования.РольПодписантаНепосредственныйРуководитель()
;

@ВПодсистеме
метод ОбновитьРолиПодписантов(РолиПодписантов: ЧитаемоеСоответствие<РолиПодписантовУстарело, РолиПодписантов.Ссылка>)
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            РольПодписантаУстарело
        Из
            СогласованияДокументов
        Где
            РольПодписанта == Неопределено
    }
    
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        знч СогласованиеДокумента = РезультатСтрока.Ссылка.ЗагрузитьОбъект()
        СогласованиеДокумента.РольПодписанта = РолиПодписантов.ПолучитьИлиУмолчание(РезультатСтрока.РольПодписантаУстарело)
        
        СогласованиеДокумента.Записать()
    ;
;

//КонецОбласти

метод РезультатСогласованияВJson(РезультатСогласования: РезультатыСогласования): РезультатJson?
    пер Результат: РезультатJson?
    выбор РезультатСогласования
    когда Согласовано
        Результат = РезультатJson.agreed
    когда Отказано
        Результат = РезультатJson.denied
    ;
    возврат Результат
;

метод РезультатСогласованияВJson_V3_0(РезультатСогласования: РезультатыСогласования): РезультатJson_V3_0
    выбор РезультатСогласования
    когда Согласовано
        возврат РезультатJson_V3_0.agreed
    когда НаСогласовании
        возврат РезультатJson_V3_0.sentForApproval
    когда Отказано
        возврат РезультатJson_V3_0.denied
    ;
;

@ВПроекте
метод ЗарегистрироватьСогласованиеПростойПодписью(Документ: неизвестно, ДанныеСогласующего: Согласования.ДанныеСогласующего)
    ЗарегистрироватьРезультатПростойПодписью(Документ, ДанныеСогласующего, РезультатыСогласования.Согласовано)
;

@ВПроекте
метод ЗарегистрироватьОтказПростойПодписью(Документ: неизвестно, ДанныеСогласующего: Согласования.ДанныеСогласующего,
        КомментарийОтказа: Строка = "")
    ЗарегистрироватьРезультатПростойПодписью(Документ, ДанныеСогласующего, РезультатыСогласования.Отказано, КомментарийОтказа)    
;

метод ЗарегистрироватьРезультатПростойПодписью(Документ: неизвестно, ДанныеСогласующего: Согласования.ДанныеСогласующего,
        РезультатСогласования: РезультатыСогласования, КомментарийСогласующего: Строка = "")

    знч Запрос = Запрос{
        Выбрать Первые 1
            Ссылка
        Из
            СогласованияДокументов
        Где
            Документ == %Документ
            И УчастникСогласования == %{ДанныеСогласующего.Согласующий}
            И РольПодписанта == %{ДанныеСогласующего.Роль}}
    исп Результат = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если не (не РезультатСтроки.Пусто())
        пер Согласование = новый СогласованияДокументов.Объект()
        Согласование.Документ = Документ
        Согласование.УчастникСогласования = ДанныеСогласующего.Согласующий
        Согласование.УчастникСогласованияСтрокой = ДанныеСогласующего.Согласующий.Представление()
        Согласование.РольПодписанта = ДанныеСогласующего.Роль
        Согласование.Результат = РезультатСогласования
        Согласование.Комментарий = КомментарийСогласующего
        Согласование.Дата = МенеджерДат.ТекущаяДатаВремя()
        
        исп КонтекстДоступа.Привилегированный()
        Согласование.Подпись = ПодписиДокументов.ДобавитьПодпись(
            Документ            = Согласование.Документ, 
            ДатаПодписи         = Согласование.Дата)
        
        Согласование.Записать()
    ;
;

@ВПроекте
метод ОбъектПодписан(Объект: неизвестно, ТолькоЦифровые: Булево = Истина): Булево
   знч Запрос = Запрос{
        Выбрать Первые 1
            Ссылка
         Из
            СогласованияДокументов
         Где
            Документ == %Объект
            И (Не %{ТолькоЦифровые} Или Подпись != Неопределено)}
    исп Результат = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    возврат (не РезультатСтроки.Пусто()) 
;

@ВПроекте
метод ЭтоПростаяПодпись(Согласование: СогласованияДокументов.Ссылка): Булево
    знч ПодписьСогласования = МенеджерСущности.ЗначениеРеквизитаОбъекта(Согласование, "Подпись")
    возврат ПодписьСогласования == Неопределено
        или МенеджерСущности.ЗначениеРеквизитаОбъекта(ПодписьСогласования , "Подпись") == Неопределено
;

@ВПроекте
метод ЦифровыеПодписиФизическихЛиц(ФизическиеЛица: ЧитаемаяКоллекция<ФизическиеЛица.Ссылка>): ЧитаемоеСоответствие<ФизическиеЛица.Ссылка,
    ЧитаемыйМассив<Согласования.ДанныеПодписиДокумента>>
    
    знч ЦифровыеПодписиФизическихЛиц: Соответствие<ФизическиеЛица.Ссылка, Массив<Согласования.ДанныеПодписиДокумента>>
    
    знч Запрос = Запрос{
        Выбрать
            СогласованияДокументов.Документ Как Документ,
            СогласованияДокументов.Дата Как Дата,
            СогласованияДокументов.УчастникСогласования Как УчастникСогласования,
            СогласованияДокументов.УчастникСогласованияСтрокой Как УчастникСогласованияСтрокой,
            СогласованияДокументов.РольПодписанта Как РольПодписанта,
            СогласованияДокументов.НомерШагаСогласования Как НомерШагаСогласования,
            СогласованияДокументов.Подпись Как СсылкаНаПодпись,
            ПодписиДокументов.Подпись.ЗаменитьNull(Неопределено) Как Подпись,
            СогласованияДокументов.Ссылка Как Ссылка,
            СогласованияДокументов.Результат Как Результат,
            СогласованияДокументов.ИдентификаторЭлектронногоДокумента Как ИдентификаторЭлектронногоДокумента,
            ПодписиДокументов.МЧД.ЗаменитьNull(Неопределено) Как МЧД,
            СогласованияДокументов.Комментарий Как Комментарий
        Из
            СогласованияДокументов Как СогласованияДокументов 
            Внутреннее Соединение ПодписиДокументов Как ПодписиДокументов
                По СогласованияДокументов.Подпись == ПодписиДокументов.Ссылка
        Где
            СогласованияДокументов.УчастникСогласования В (%ФизическиеЛица)
            И ПодписиДокументов.Подпись.ЗаменитьNull(Неопределено) != Неопределено
        Упорядочить по
            СогласованияДокументов.Дата}
            
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        знч ДанныеПодписи = новый Согласования.ДанныеПодписиДокумента(
            РезультатСтрока.Документ,
            РезультатСтрока.Дата,
            РезультатСтрока.Ссылка,
            РезультатСтрока.УчастникСогласования,
            РезультатСтрока.УчастникСогласованияСтрокой,
            РезультатСтрока.СсылкаНаПодпись,
            РезультатСтрока.Подпись,
            РезультатСтрока.РольПодписанта,
            РезультатСтрока.НомерШагаСогласования,
            РезультатСтрока.Результат,
            РезультатСтрока.ИдентификаторЭлектронногоДокумента,
            РезультатСтрока.МЧД,
            РезультатСтрока.Комментарий
        )
        
        знч ЦифровыеПодписиФизическогоЛица = ЦифровыеПодписиФизическихЛиц.ВставитьЕслиОтсутствует(РезультатСтрока.УчастникСогласования, [])
        ЦифровыеПодписиФизическогоЛица.Добавить(ДанныеПодписи)
    ;
    
    возврат ЦифровыеПодписиФизическихЛиц
;

метод СсылкаНаСогласование(Файл: Файлы.Ссылка, ИдентификаторЭлектронногоДокумента: Строка,
    УчастникСогласования: ФизическиеЛица.Ссылка, РольПодписанта: РолиПодписантов.Ссылка): СогласованияДокументов.Ссылка?
    
    знч ВладецФайла = МенеджерСущности.ЗначениеРеквизитаОбъекта(Файл, "Владелец")
    возврат СсылкаНаСогласованиеДокумента(ВладецФайла, ИдентификаторЭлектронногоДокумента, УчастникСогласования, РольПодписанта)
;

метод СсылкаНаСогласованиеДокумента(ДокументСсылка: ПодписываемыйДокумент.Ссылка, ИдентификаторЭлектронногоДокумента: Строка,
    УчастникСогласования: ФизическиеЛица.Ссылка, РольПодписанта: РолиПодписантов.Ссылка): СогласованияДокументов.Ссылка?
    
    знч Запрос = Запрос{
        Выбрать Первые 1
            СогласованияДокументов.Ссылка Как Ссылка
        Из
            СогласованияДокументов Как СогласованияДокументов
        Где
            СогласованияДокументов.Документ == %ДокументСсылка
            И СогласованияДокументов.ИдентификаторЭлектронногоДокумента == %ИдентификаторЭлектронногоДокумента
            И СогласованияДокументов.Результат == РезультатыСогласования.НаПодписанииВСервисеПодписания
            И СогласованияДокументов.УчастникСогласования == %УчастникСогласования
            И СогласованияДокументов.РольПодписанта == %РольПодписанта} 
    исп Результат = Запрос.Выполнить()
    знч СтрокаРезультата = Результат.ЕдинственныйИлиУмолчание()
    если СтрокаРезультата != Неопределено
        возврат СтрокаРезультата.Ссылка
    ;
    возврат Неопределено
;

@ВПроекте
метод ЗарегистрироватьОтправкуНаСогласованиеДокумента(ДокументСсылка: ПодписываемыйДокумент.Ссылка,
    УчастникСогласования: ФизическиеЛица.Ссылка, РольПодписанта: РолиПодписантов.Ссылка, НомерШагаСогласования: Число)

    пер Данные = Согласования.ПредставлениеДокументаДляПодписания(ДокументСсылка)
    для ЭлементДанных из Данные
        знч СогласованиеОбъект = СсылкаНаСогласованиеОбъект(
            ДокументСсылка, ЭлементДанных.Ключ, УчастникСогласования, РольПодписанта, НомерШагаСогласования)
        СогласованиеОбъект.Записать()
    ;
;

@ВПроекте
метод ОтменитьОтправкуНаСогласованиеДокумента(ДокументСсылка: ПодписываемыйДокумент.Ссылка,
    УчастникСогласования: ФизическиеЛица.Ссылка, РольПодписанта: РолиПодписантов.Ссылка)
    
    пер Данные = Согласования.ПредставлениеДокументаДляПодписания(ДокументСсылка)
    для ЭлементДанных из Данные
        знч Согласование = СсылкаНаСогласованиеДокумента(ДокументСсылка, ЭлементДанных.Ключ, УчастникСогласования, РольПодписанта)
        если Согласование != Неопределено
            знч СогласованиеОбъект = Согласование.ЗагрузитьОбъект()
            СогласованиеОбъект.Удалить()
        ;
    ;
;

@ВПроекте
метод ЗарегистрироватьОтправкуНаСогласованиеФайла(Файл: Файлы.Ссылка, ИдентификаторЭлектронногоДокумента: Строка,
    УчастникСогласования: ФизическиеЛица.Ссылка, РольПодписанта: РолиПодписантов.Ссылка, НомерШагаСогласования: Число)
    
    исп КонтекстДоступа.Привилегированный()
    
    знч СсылкаНаСогласование = СсылкаНаСогласование(Файл, ИдентификаторЭлектронногоДокумента, УчастникСогласования, РольПодписанта)
    если СсылкаНаСогласование != Неопределено
        возврат
    ;
    знч ВладецФайла = МенеджерСущности.ЗначениеРеквизитаОбъекта(Файл, "Владелец")
    пер СогласованиеОбъект: СогласованияДокументов.Объект?
    СогласованиеОбъект = СсылкаНаСогласованиеОбъект(
        ВладецФайла, ИдентификаторЭлектронногоДокумента, УчастникСогласования, РольПодписанта, НомерШагаСогласования)
    СогласованиеОбъект.Записать()
;

@ВПроекте
метод ЗарегистрироватьПодписьФайла(Файл: Файлы.Ссылка, УчастникСогласования: ФизическиеЛица.Ссылка,
    РольПодписанта: РолиПодписантов.Ссылка, НомерШагаСогласования: Число, Подпись: ДвоичныйОбъект.Ссылка)
    
    исп КонтекстДоступа.Привилегированный()
    знч ИдентификаторЭлектронногоДокумента = Файлы.СведенияОФайле(Файл).ИдентификаторЭлектронногоДокумента
    пер СогласованиеДокумента: СогласованияДокументов.Объект?
    знч ВладецФайла = МенеджерСущности.ЗначениеРеквизитаОбъекта(Файл, "Владелец")
    знч СсылкаНаСогласование = СсылкаНаСогласование(Файл, ИдентификаторЭлектронногоДокумента, УчастникСогласования, РольПодписанта)
    если СсылкаНаСогласование == Неопределено
        СогласованиеДокумента = СсылкаНаСогласованиеОбъект(
            ВладецФайла, ИдентификаторЭлектронногоДокумента, УчастникСогласования, РольПодписанта, НомерШагаСогласования)
    иначе
        СогласованиеДокумента = СсылкаНаСогласование.ЗагрузитьОбъект()
    ;
    СогласованиеДокумента.Результат = РезультатыСогласования.Согласовано
    СогласованиеДокумента.Подпись = ПодписиДокументов.ДобавитьПодпись(
        Документ = ВладецФайла,
        Подпись = Подпись)
    СогласованиеДокумента.Записать()
    знч ДанныеСогласующего = новый Согласования.ДанныеСогласующего(
        УчастникСогласования, РольПодписанта)
    СогласованияДокументов.ПослеСогласованияДокумента(ВладецФайла, ДанныеСогласующего, Истина)
;

метод СсылкаНаСогласованиеОбъект(ВладецФайла: ПодписываемыйДокумент.Ссылка, ИдентификаторЭлектронногоДокумента: Строка,
    УчастникСогласования: ФизическиеЛица.Ссылка, РольПодписанта: РолиПодписантов.Ссылка, НомерШагаСогласования: Число): СогласованияДокументов.Объект
    
    пер ПодписьДокумента = новый СогласованияДокументов.Объект()
    ПодписьДокумента.Документ = ВладецФайла
    ПодписьДокумента.УчастникСогласования = УчастникСогласования
    ПодписьДокумента.УчастникСогласованияСтрокой = МенеджерСущности.ПредставлениеСсылки(УчастникСогласования)
    ПодписьДокумента.ИдентификаторЭлектронногоДокумента = ИдентификаторЭлектронногоДокумента
    ПодписьДокумента.Комментарий = ""
    ПодписьДокумента.РольПодписанта = РольПодписанта
    ПодписьДокумента.НомерШагаСогласования = НомерШагаСогласования
    ПодписьДокумента.Результат = РезультатыСогласования.НаПодписанииВСервисеПодписания
    ПодписьДокумента.Дата = МенеджерДат.ТекущаяДатаВремя()
    возврат ПодписьДокумента
;

@ВПроекте
метод ПеренестиДанныеПодписей()
    исп Транзакции.Начать()
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Документ,
            УчастникСогласования,
            УчастникСогласованияСтрокой,
            Дата,
            УдалитьПодпись,
            ИдентификаторЭлектронногоДокумента,
            УдалитьМЧД
        Из
            СогласованияДокументов
        Где    
            УдалитьПодпись != Неопределено
            И Подпись == Неопределено}
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        знч ОбъектСогласования = СтрокаРезультата.Ссылка.ЗагрузитьОбъект(Истина)
        ОбъектСогласования.Подпись = ПодписиДокументов.ДобавитьПодпись(
            Документ            = СтрокаРезультата.Документ,
            ДатаПодписи         = СтрокаРезультата.Дата,
            Подпись             = СтрокаРезультата.УдалитьПодпись,
            МЧД                 = СтрокаРезультата.УдалитьМЧД
        )
        ОбъектСогласования.Записать()
    ;
;