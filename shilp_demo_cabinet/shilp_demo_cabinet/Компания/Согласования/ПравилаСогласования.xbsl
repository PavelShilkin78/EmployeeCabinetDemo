импорт ВебApi
импорт ФизическиеЛица
импорт Компания
импорт ОбщиеСтандартные
импорт ОбменДанными
импорт УниверсальныеМеханизмы::ШаблоныДокументов

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат СогласованияКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаПравилаСогласования()
;

//КонецОбласти

@ВПроекте
метод ЗаполнитьПравилоСогласованияПоУмолчанию()
    ДобавитьПравилаСогласованияПоУмолчанию()
;

метод ДобавитьПравилаСогласованияПоУмолчанию()
    знч ПравилаСогласования: Массив<Согласования.ПравилоСогласования>
    для Сервис из СогласованияПользователь.ПолучитьСервисы()
        ПравилаСогласования.ДобавитьВсе(Сервис.ПравилаСогласованияПоУмолчанию())
    ;
    
    для ПравилоСогласования из ПравилаСогласования
        если ПравилоСогласования.Ссылка == Неопределено
            знч ПравилоПоУмолчанию = ПравилоПоУмолчанию(
                ПравилоСогласования.ВидСогласуемогоЗаявления)
            ПравилоСогласования.Ссылка = ПравилоПоУмолчанию
        ;
        Согласования.ЗаписатьПравилоСогласования(ПравилоСогласования)
    ;
    
    Согласования.ОбновитьПравилаСогласования()
;

@ВПодсистеме
метод ПравилоПоУмолчанию(ВидСогласуемогоЗаявления: ВидыСогласуемыхЗаявлений.Ссылка): ПравилаСогласования.Ссылка?
    знч Запрос = Запрос{
        Выбрать первые 1
            Ссылка
        Из
            ПравилаСогласования
        Где
            ПравилоПоУмолчанию
            и ВидСогласуемогоЗаявления == %ВидСогласуемогоЗаявления
    }
    
    возврат Запрос.Выполнить().ЕдинственныйИлиУмолчание()?.Ссылка
;

@ВПроекте
метод ЗарегистрироватьВсеПравила()

    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Автор
        Из
            ПравилаСогласования
        Где
            СостояниеПравила == %{СостоянияПравилСогласования.Действует}}
            
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(РезультатСтрока.Ссылка, Истина)
        РегистрацияИзменений.ЗарегистрироватьИзменение(
            РезультатСтрока.Ссылка,
            РезультатСтрока.Автор,
            ХарактерыИзменений.Изменение)
    ;
;

@ВПроекте
метод ПравилаСогласованияУчастника(Участник: ФизическиеЛица.Ссылка): Множество<ПравилаСогласования.Ссылка>
    знч Запрос = Запрос{
        выбрать
            ШагиПравилСогласования.ПравилоСогласования как Ссылка
        из
            ШагиПравилСогласования как ШагиПравилСогласования
        где
            ШагиПравилСогласования.Согласующий == %Участник
        сгруппировать по 
            ШагиПравилСогласования.ПравилоСогласования
    }
    исп Результат = Запрос.Выполнить()
    знч Правила = новый Множество<ПравилаСогласования.Ссылка>()
    для Элемент из Результат 
        Правила.Добавить(Элемент.Ссылка)
    ;
    возврат Правила
;

@ВПроекте
метод СогласующиеПравилаСогласования(Правило: ПравилаСогласования.Ссылка): Массив<ФизическиеЛица.Ссылка>
    знч Запрос = Запрос{
            выбрать различные
                ШагиПравилСогласования.Согласующий как Согласующий   
            из
                ШагиПравилСогласования как ШагиПравилСогласования
            где 
                ШагиПравилСогласования.ПравилоСогласования == %Правило    
    } 
    
    знч Согласующие = новый Массив<ФизическиеЛица.Ссылка>()
    исп Результат = Запрос.Выполнить()
    для Элемент из Результат
        Согласующие.Добавить(Элемент.Согласующий)
    ;
    возврат Согласующие
;

@ВПодсистеме
метод ВидыЗаявленийПравилСогласования(Правила: ЧитаемыйМассив<ПравилаСогласования.Ссылка>): ЧитаемоеСоответствие<ПравилаСогласования.Ссылка, ВидыСогласуемыхЗаявлений.Ссылка>
    знч ВидыЗаявленийПравилСогласования: Соответствие<ПравилаСогласования.Ссылка, ВидыСогласуемыхЗаявлений.Ссылка>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ВидСогласуемогоЗаявления
        Из
            ПравилаСогласования
        Где
            Ссылка В (%Правила)
    }
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ВидыЗаявленийПравилСогласования.Вставить(СтрокаРезультата.Ссылка, СтрокаРезультата.ВидСогласуемогоЗаявления)
    ;
    возврат ВидыЗаявленийПравилСогласования
;

@ВПроекте
@НаСервере
метод МожноУдалить(Ссылка: ПравилаСогласования.Ссылка?): Булево
    знч СервисыВозможностиУдаления = СогласованияВозможностьУдаления.ПолучитьСервисы()
    для СервисВозможностиУдаления из СервисыВозможностиУдаления
        если не СервисВозможностиУдаления.МожноУдалитьМаршрутСогласования(Ссылка)
            возврат Ложь
        ;
    ;
    возврат Истина
;

// JSON

@ВПроекте
структура ДанныеJson
    обз пер ID: Строка
    пер requestType: Строка
    пер personID: Строка?
    пер divisionID: Строка?
    пер steps: Массив<ШагиJson>
    пер version: Число?
    пер isDeleted: Булево = Ложь
;

@ВПроекте
структура ДанныеJson_V3_0
    обз пер ID: Строка
    пер requestType: Строка
    пер personID: Строка?
    пер divisionID: Строка?
    пер steps: Массив<ШагиJson>
    пер version: Число?
    пер isCommonForRequestType: Булево
    пер isDeleted: Булево = Ложь
    пер templateID: Строка
;

структура ШагиJson
    обз пер stepNumber: Число
    обз пер stepType: ТипыШаговJson
    пер signatoryRole: Строка
    пер personID: Строка?
    пер needElectronicSignature: ВидыТребуемойПодписиJson?
;

перечисление ТипыШаговJson
    anybody,
    all    
;

перечисление ВидыТребуемойПодписиJson
    notRequired,
    unqualifiedSignature    
;

конст СООТВЕТСТВИЕ_ТИПЫ_ШАГОВ_JSON = {
    ТипыШаговJson.anybody: ТипыШаговСогласования.ЛюбойИзСогласующих,
    ТипыШаговJson.all: ТипыШаговСогласования.ВсеСогласующие    
} 

конст СООТВЕТСТВИЕ_ВИДЫ_ТРЕБУЕМОЙ_ПОДПИСИ_JSON = {
    ВидыТребуемойПодписиJson.notRequired: ВидыТребуемойПодписи.НеТребуется,
    ВидыТребуемойПодписиJson.unqualifiedSignature: ВидыТребуемойПодписи.УНЭП
}

метод ТипыШаговИзJson(ТипШагаJson: ТипыШаговJson): ТипыШаговСогласования 
    возврат СООТВЕТСТВИЕ_ТИПЫ_ШАГОВ_JSON[ТипШагаJson]       
;

метод ТипыШаговВJson(ТипШагаСогласования: ТипыШаговСогласования): ТипыШаговJson 
    пер ТипыШаговВJson: Соответствие<ТипыШаговСогласования, ТипыШаговJson>
    для КлючИЗначение из СООТВЕТСТВИЕ_ТИПЫ_ШАГОВ_JSON
        ТипыШаговВJson.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ)            
    ;
    возврат ТипыШаговВJson[ТипШагаСогласования]
;

метод ВидыТребуемойПодписиИзJson(ВидТребуемойПодписиJson: ВидыТребуемойПодписиJson): ВидыТребуемойПодписи
    возврат СООТВЕТСТВИЕ_ВИДЫ_ТРЕБУЕМОЙ_ПОДПИСИ_JSON[ВидТребуемойПодписиJson]    
; 

метод ВидыТребуемойПодписиВJson(ВидТребуемойПодписи: ВидыТребуемойПодписи): ВидыТребуемойПодписиJson
    пер ВидыТребуемойПодписиВJson: Соответствие<ВидыТребуемойПодписи, ВидыТребуемойПодписиJson>
    для КлючИЗначение из СООТВЕТСТВИЕ_ВИДЫ_ТРЕБУЕМОЙ_ПОДПИСИ_JSON
        ВидыТребуемойПодписиВJson.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ)
    ;
    возврат ВидыТребуемойПодписиВJson[ВидТребуемойПодписи]    
;

метод ВидыСогласуемыхЗаявленийИзJson(): ЧитаемоеСоответствие<Строка, ВидыСогласуемыхЗаявлений.Ссылка>
    знч ВидыСогласуемыхЗаявленийИзJson: Соответствие<Строка, ВидыСогласуемыхЗаявлений.Ссылка>
    для КлючИЗначение из ВидыСогласуемыхЗаявленийВJson()
        ВидыСогласуемыхЗаявленийИзJson.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ)
    ;
    
    возврат ВидыСогласуемыхЗаявленийИзJson   
;

метод ВидыСогласуемыхЗаявленийВJson(): ЧитаемоеСоответствие<ВидыСогласуемыхЗаявлений.Ссылка, Строка>
    пер ВидыСогласуемыхЗаявленийВJson: Соответствие<ВидыСогласуемыхЗаявлений.Ссылка, Строка>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ЗначениеJson
        Из
            ВидыСогласуемыхЗаявлений}
    
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        ВидыСогласуемыхЗаявленийВJson.Вставить(РезультатСтрока.Ссылка, РезультатСтрока.ЗначениеJson)
    ;

    возврат ВидыСогласуемыхЗаявленийВJson
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<ДанныеJson>
    иначе если ВерсияФорматаОбмена >= Версия{3.0}
        возврат Тип<ДанныеJson_V3_0>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<ДанныеJson>
    иначе
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
;

@ВПроекте
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Массив<ДанныеJson>>
    иначе если ВерсияФорматаОбмена >= Версия{3.0}
        возврат Тип<Массив<ДанныеJson_V3_0>>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Массив<ДанныеJson>>
    иначе
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
;

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> ПравилаСогласования.ПолучитьСсылку(Ууид))
;

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "agreementRules"
;

@ВПроекте
метод ПолучитьДанныеJson(Ссылка: ПравилаСогласования.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Объект?
    если ВерсияФорматаОбмена == Неопределено
        возврат ПолучитьДанныеJson(Ссылка, Сервисы)
    иначе если ВерсияФорматаОбмена >= Версия{3.0}
        возврат ПолучитьДанныеJson_V3_0(Ссылка, Сервисы)
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат ПолучитьДанныеJson(Ссылка, Сервисы)
    иначе
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
;

метод ПолучитьДанныеJson(Ссылка: ПравилаСогласования.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>?
    
    если Ссылка == Неопределено 
        возврат Неопределено
    ;
    
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеПравилСогласования([Ссылка])
        Данные.Добавить(ДанныеПравилаСогласованияВJson(КлючИЗначение.Значение, Сервисы, Ложь))
    ;
    
    возврат Данные
    
;

метод ПолучитьДанныеJson_V3_0(Ссылка: ПравилаСогласования.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>?
    
    если Ссылка == Неопределено 
        возврат Неопределено
    ;
    
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеПравилСогласования([Ссылка])
        Данные.Добавить(ДанныеПравилаСогласованияВJson_V3_0(КлючИЗначение.Значение, Сервисы, Ложь))
    ;
    
    возврат Данные
    
;

@ВПроекте
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    если ВерсияФорматаОбмена == Неопределено
        возврат {"agreementRules": ДанныеПравилСогласованияВJson(Ссылки, Сервисы)}
    иначе если ВерсияФорматаОбмена >= Версия{3.0}
        возврат {"agreementRules": ДанныеПравилСогласованияВJson_V3_0(Ссылки, Сервисы)}
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат {"agreementRules": ДанныеПравилСогласованияВJson(Ссылки, Сервисы)}
    иначе
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)

    исп Транзакции.Начать()

    пер ПравилоСогласования = Сервисы.ПрочитатьОбъект(ДанныеJson.ID, &ПравилаСогласования.Объект.новый(Ууид), Тип<ПравилаСогласования.Ссылка>) как ПравилаСогласования.Объект
   
    ПравилоСогласования.ВидСогласуемогоЗаявления = ВидыСогласуемыхЗаявленийИзJson()[ДанныеJson.requestType]
    ПравилоСогласования.СостояниеПравила = СостоянияПравилСогласования.Действует
    если ДанныеJson.divisionID != Неопределено
        ПравилоСогласования.Подразделение =
            Сервисы.ПолучитьСсылку(СтруктураПредприятия.ВнешняяСсылка(ДанныеJson.divisionID)) как СтруктураПредприятия.Ссылка
    ;
    если ДанныеJson.personID != Неопределено
        ПравилоСогласования.ФизическоеЛицо =
            Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID)) как ФизическиеЛица.Ссылка        
    ;
    ПравилоСогласования.КоличествоШагов = ДанныеJson.steps.Размер()
   
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ПравилоСогласования, ДанныеJson.ID), Сервисы.ИнструментыМенеджераОбъекта)
    пер ПравилоСогласованияСсылка = ПравилоСогласования.Ссылка
   
    НаборЗаписейШаговПоJson(ДанныеJson.steps, ПравилоСогласованияСсылка, Сервисы).Записать(Истина)
    
    Согласования.ОбновитьПравилаСогласования()
        
;

@ВПроекте
метод ЗагрузитьОбъектИзJson_V3_0(ДанныеJson: ДанныеJson_V3_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)

    исп Транзакции.Начать()

    пер ПравилоСогласования = Сервисы.ПрочитатьОбъект(ДанныеJson.ID, &ПравилаСогласования.Объект.новый(Ууид), Тип<ПравилаСогласования.Ссылка>) как ПравилаСогласования.Объект
   
    ПравилоСогласования.ВидСогласуемогоЗаявления = ВидыСогласуемыхЗаявленийИзJson()[ДанныеJson.requestType]
    ПравилоСогласования.СостояниеПравила = СостоянияПравилСогласования.Действует
    если ДанныеJson.divisionID != Неопределено
        ПравилоСогласования.Подразделение =
            Сервисы.ПолучитьСсылку(СтруктураПредприятия.ВнешняяСсылка(ДанныеJson.divisionID)) как СтруктураПредприятия.Ссылка
    ;
    если ДанныеJson.personID != Неопределено
        ПравилоСогласования.ФизическоеЛицо =
            Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID)) как ФизическиеЛица.Ссылка        
    ;
    ПравилоСогласования.КоличествоШагов = ДанныеJson.steps.Размер()
    ПравилоСогласования.ОбщееДляВидаЗаявления = ДанныеJson.isCommonForRequestType
   
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ПравилоСогласования, ДанныеJson.ID), Сервисы.ИнструментыМенеджераОбъекта)
    пер ПравилоСогласованияСсылка = ПравилоСогласования.Ссылка
   
    НаборЗаписейШаговПоJson(ДанныеJson.steps, ПравилоСогласованияСсылка, Сервисы).Записать(Истина)
    
    Согласования.ОбновитьПравилаСогласования()
        
;

метод ДанныеПравилСогласованияВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево = Ложь): Массив<Объект?>
    
    знч Данные: Массив<Объект?>
    
    пер УдаленныеСсылки: Массив<ПравилаСогласования.Ссылка>
    пер ИзмененныеСсылки: Массив<ПравилаСогласования.Ссылка>
    для Ссылка из Ссылки
        если Сервисы.ПолучитьХарактерИзменения(Ссылка) == ХарактерыИзменений.Удаление
            УдаленныеСсылки.Добавить(Ссылка как ПравилаСогласования.Ссылка)
        иначе
            ИзмененныеСсылки.Добавить(Ссылка как ПравилаСогласования.Ссылка)
        ;    
    ;
    
    для КлючИЗначение из ДанныеПравилСогласования(ИзмененныеСсылки)
        Данные.Добавить(ДанныеПравилаСогласованияВJson(КлючИЗначение.Значение, Сервисы, ДляПредставления))
    ;
    
    для Ссылка из УдаленныеСсылки
        Данные.Добавить(ДанныеУдаленныеПравилаСогласованияВJson(Ссылка, Сервисы))
    ;
    
    возврат Данные
;

метод ДанныеПравилСогласованияВJson_V3_0(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево = Ложь): Массив<Объект?>
    
    знч Данные: Массив<Объект?>
    
    пер УдаленныеСсылки: Массив<ПравилаСогласования.Ссылка>
    пер ИзмененныеСсылки: Массив<ПравилаСогласования.Ссылка>
    для Ссылка из Ссылки
        если Сервисы.ПолучитьХарактерИзменения(Ссылка) == ХарактерыИзменений.Удаление
            УдаленныеСсылки.Добавить(Ссылка как ПравилаСогласования.Ссылка)
        иначе
            ИзмененныеСсылки.Добавить(Ссылка как ПравилаСогласования.Ссылка)
        ;    
    ;
    
    для КлючИЗначение из ДанныеПравилСогласования(ИзмененныеСсылки)
        Данные.Добавить(ДанныеПравилаСогласованияВJson_V3_0(КлючИЗначение.Значение, Сервисы, ДляПредставления))
    ;
    
    для Ссылка из УдаленныеСсылки
        Данные.Добавить(ДанныеУдаленныеПравилаСогласованияВJson_V3_0(Ссылка, Сервисы))
    ;
    
    возврат Данные
;

метод ДанныеПравилСогласования(Правила: ЧитаемаяКоллекция<ПравилаСогласования.Ссылка>): 
        ЧитаемоеСоответствие<ПравилаСогласования.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч ДанныеЗапросов: Соответствие<ПравилаСогласования.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>

    пер ДанныеШаговПравилСогласования = ШагиПравилСогласования.ДанныеШаговПравилСогласования(Правила)
    
    знч Запрос = Запрос{
        Выбрать
            ПравилаСогласования.Ссылка,
            ПравилаСогласования.ВидСогласуемогоЗаявления,
            ПравилаСогласования.Подразделение,
            ПравилаСогласования.ФизическоеЛицо,
            ПравилаСогласования.Действие,
            ПравилаСогласования.ОбщееДляВидаЗаявления как ОбщееДляВидаЗаявления,
            ШаблоныДокументов.Ссылка.ЗаменитьNull(Неопределено) как ШаблонДокумента
        Из
            ПравилаСогласования Как ПравилаСогласования 
            Левое Соединение ШаблоныДокументов Как ШаблоныДокументов
            По ПравилаСогласования.ВидСогласуемогоЗаявления == ШаблоныДокументов.ВидОбращения
        Где
            ПравилаСогласования.Ссылка В (%Правила)}
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат      
        пер СоответствиеПолей = новый Соответствие<Строка, Объект?>(МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат))
        СоответствиеПолей.Вставить("Шаги",
            ДанныеШаговПравилСогласования.ПолучитьИлиУмолчание(РезультатСтрока.Ссылка, <ЧитаемоеСоответствие<Строка, Объект?>>[]))
        ДанныеЗапросов.Вставить(
            РезультатСтрока.Ссылка,
            СоответствиеПолей)    
    ;
    
    возврат ДанныеЗапросов        
;

метод ДанныеПравилаСогласованияВJson(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево): ДанныеJson
    пер ДанныеJson = новый ДанныеJson(
        (ДанныеОбъекта["Ссылка"] как ПравилаСогласования.Ссылка).Ид.ВСтроку(),
        (ВидыСогласуемыхЗаявленийВJson()[ДанныеОбъекта["ВидСогласуемогоЗаявления"] как ВидыСогласуемыхЗаявлений.Ссылка]))
    
    если ДанныеОбъекта["ФизическоеЛицо"] != Неопределено
        ДанныеJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ;
    если ДанныеОбъекта["Подразделение"] != Неопределено
        ДанныеJson.divisionID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Подразделение"] как СтруктураПредприятия.Ссылка)
    ;
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ПравилаСогласования.Ссылка))
    ; 
    
    ДанныеJson.steps = МассивШаговВJson(ДанныеОбъекта["Шаги"] как Массив<ЧитаемоеСоответствие<Строка, Объект?>>, Сервисы)   

    возврат ДанныеJson
;

метод ДанныеПравилаСогласованияВJson_V3_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево): ДанныеJson_V3_0
    пер ДанныеJson = новый ДанныеJson_V3_0(
        (ДанныеОбъекта["Ссылка"] как ПравилаСогласования.Ссылка).Ид.ВСтроку(),
        (ВидыСогласуемыхЗаявленийВJson()[ДанныеОбъекта["ВидСогласуемогоЗаявления"] как ВидыСогласуемыхЗаявлений.Ссылка]))
    
    если ДанныеОбъекта["ФизическоеЛицо"] != Неопределено
        ДанныеJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ;
    если ДанныеОбъекта["Подразделение"] != Неопределено
        ДанныеJson.divisionID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Подразделение"] как СтруктураПредприятия.Ссылка)
    ;
    
    ДанныеJson.isCommonForRequestType = ДанныеОбъекта["ОбщееДляВидаЗаявления"] как Булево
    
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ПравилаСогласования.Ссылка))
    ; 
    
    ДанныеJson.steps = МассивШаговВJson(ДанныеОбъекта["Шаги"] как Массив<ЧитаемоеСоответствие<Строка, Объект?>>, Сервисы)   
    
    если ДанныеОбъекта["ШаблонДокумента"] != Неопределено
        ДанныеJson.templateID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ШаблонДокумента"] как ШаблоныДокументов.Ссылка)
    ;

    возврат ДанныеJson
;

метод МассивШаговВJson(ДанныеОбъектов: Массив<ЧитаемоеСоответствие<Строка, Объект?>>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<ШагиJson>
    
    пер МассивДанныхJson: Массив<ШагиJson>
    
    для ДанныеОбъекта из ДанныеОбъектов
        
        пер ДанныеJson = новый ШагиJson(
            ДанныеОбъекта["ШагСогласования"] как Число,
            ТипыШаговВJson(ДанныеОбъекта["ТипШага"] как ТипыШаговСогласования)     
        )
        
        если ДанныеОбъекта["РольСогласующего"] != Неопределено
            ДанныеJson.signatoryRole = СогласованияДокументов.РольПодписантаВJson(ДанныеОбъекта["РольСогласующего"] как РолиПодписантов.Ссылка)
        ;
        если ДанныеОбъекта["Согласующий"] != Неопределено
            ДанныеJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Согласующий"] как ФизическиеЛица.Ссылка)
        ;
        ДанныеJson.needElectronicSignature = ВидыТребуемойПодписиВJson(ДанныеОбъекта["ТребуемаяПодпись"] как ВидыТребуемойПодписи)  
        
        МассивДанныхJson.Добавить(ДанныеJson) 
                 
    ;
    
    возврат МассивДанныхJson    
;

метод НаборЗаписейШаговПоJson(
        ДанныеJson: Массив<ШагиJson>,
        ПравилоСогласования: ПравилаСогласования.Ссылка,
        Сервисы: ВебApiСервер.СервисыЗагрузкиJson): ШагиПравилСогласования.НаборЗаписей 
    
    пер НаборЗаписейШагиПравилСогласования: ШагиПравилСогласования.НаборЗаписей
    НаборЗаписейШагиПравилСогласования.Фильтр.ПравилоСогласования.Установить(ПравилоСогласования)
    
    для ШагJson из ДанныеJson
        пер ЗаписьШага = НаборЗаписейШагиПравилСогласования.ДобавитьЗапись()
        
        ЗаписьШага.ПравилоСогласования = ПравилоСогласования
        ЗаписьШага.ШагСогласования = ШагJson.stepNumber
        ЗаписьШага.ИдентификаторЗаписи = новый Ууид()
        
        ЗаписьШага.ТипШага = ТипыШаговИзJson(ШагJson.stepType)
        ЗаписьШага.РольСогласующего = СогласованияДокументов.РольПодписантаИзJson(ШагJson.signatoryRole)
        
        если ШагJson.personID != Неопределено
            ЗаписьШага.Согласующий = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ШагJson.personID)) как ФизическиеЛица.Ссылка
        ;
        
        если ШагJson.needElectronicSignature != Неопределено
            ЗаписьШага.ТребуемаяПодпись = ВидыТребуемойПодписиИзJson(ШагJson.needElectronicSignature) 
        иначе
            ЗаписьШага.ТребуемаяПодпись = ВидыТребуемойПодписи.НеТребуется
        ;
    ;
    
    возврат НаборЗаписейШагиПравилСогласования           
;

метод ДанныеУдаленныеПравилаСогласованияВJson(Ссылка: ПравилаСогласования.Ссылка, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДанныеJson
    пер ДанныеJson = новый ДанныеJson(Ссылка.Ид.ВСтроку()) 
    ДанныеJson.isDeleted = Истина
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеJson.version = Сервисы.ПолучитьВерсию(Ссылка)
    ;
    возврат ДанныеJson   
;

метод ДанныеУдаленныеПравилаСогласованияВJson_V3_0(Ссылка: ПравилаСогласования.Ссылка, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДанныеJson
    пер ДанныеJson = новый ДанныеJson(Ссылка.Ид.ВСтроку()) 
    ДанныеJson.isDeleted = Истина
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеJson.version = Сервисы.ПолучитьВерсию(Ссылка)
    ;
    возврат ДанныеJson   
;

// Конец JSON

//Область Обновление
@ВПодсистеме
метод ОбновитьВидСогласуемыхЗаявлений(ВидыСогласуемыхЗаявлений: ЧитаемоеСоответствие<ВидыСогласуемыхЗаявленийУстарело, ВидыСогласуемыхЗаявлений.Ссылка>)
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ВидСогласуемогоЗаявленияУстарело
        Из
            ПравилаСогласования
        Где
            ВидСогласуемогоЗаявления == Неопределено
    }
    
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        знч ПравилоСогласования = РезультатСтрока.Ссылка.ЗагрузитьОбъект()
        ПравилоСогласования.ВидСогласуемогоЗаявления = ВидыСогласуемыхЗаявлений.ПолучитьИлиУмолчание(РезультатСтрока.ВидСогласуемогоЗаявленияУстарело)
        ПравилоСогласования.Записать()
    ;
;

//КонецОбласти

@ВПодсистеме
метод СкопироватьПравилаСогласования(ЦелевойВид: ВидыСогласуемыхЗаявлений.Ссылка, ИсходныйВид: ВидыСогласуемыхЗаявлений.Ссылка)
    знч ЗапросПравилаСогласования = Запрос{
        Выбрать
            Ссылка,
            Наименование,
            СостояниеПравила,
            Подразделение,
            ФизическоеЛицо,
            Действие,
            ПодразделениеФизическоеЛицо,
            КоличествоШагов,
            ПредставлениеСогласующих,
            ПравилоПоУмолчанию,
            Автор,
            ОбщееДляВидаЗаявления
        Из
            ПравилаСогласования
        Где
            ВидСогласуемогоЗаявления == %ИсходныйВид}
    исп РезультатПравилаСогласования = ЗапросПравилаСогласования.Выполнить()
    для СтрокаРезультатаПравилаСогласования из РезультатПравилаСогласования
        знч ПравилоСогласованияОбъект = новый ПравилаСогласования.Объект()
        ПравилоСогласованияОбъект.Наименование                = СтрокаРезультатаПравилаСогласования.Наименование
        ПравилоСогласованияОбъект.ВидСогласуемогоЗаявления    = ЦелевойВид
        ПравилоСогласованияОбъект.СостояниеПравила            = СтрокаРезультатаПравилаСогласования.СостояниеПравила
        ПравилоСогласованияОбъект.Подразделение               = СтрокаРезультатаПравилаСогласования.Подразделение
        ПравилоСогласованияОбъект.ФизическоеЛицо              = СтрокаРезультатаПравилаСогласования.ФизическоеЛицо
        ПравилоСогласованияОбъект.Действие                    = СтрокаРезультатаПравилаСогласования.Действие
        ПравилоСогласованияОбъект.ПодразделениеФизическоеЛицо = СтрокаРезультатаПравилаСогласования.ПодразделениеФизическоеЛицо
        ПравилоСогласованияОбъект.КоличествоШагов             = СтрокаРезультатаПравилаСогласования.КоличествоШагов
        ПравилоСогласованияОбъект.ПредставлениеСогласующих    = СтрокаРезультатаПравилаСогласования.ПредставлениеСогласующих
        ПравилоСогласованияОбъект.ПравилоПоУмолчанию          = СтрокаРезультатаПравилаСогласования.ПравилоПоУмолчанию
        ПравилоСогласованияОбъект.Автор                       = СтрокаРезультатаПравилаСогласования.Автор
        ПравилоСогласованияОбъект.ОбщееДляВидаЗаявления       = СтрокаРезультатаПравилаСогласования.ОбщееДляВидаЗаявления
        ПравилоСогласованияОбъект.Записать()
        
        знч НаборЗаписейШагиПравилСогласования = новый ШагиПравилСогласования.НаборЗаписей()
        НаборЗаписейШагиПравилСогласования.Фильтр.ПравилоСогласования.Установить(СтрокаРезультатаПравилаСогласования.Ссылка)
        НаборЗаписейШагиПравилСогласования.Прочитать()
        
        знч НовыйНаборЗаписейШагиПравилСогласования = новый ШагиПравилСогласования.НаборЗаписей()
        НовыйНаборЗаписейШагиПравилСогласования.Фильтр.ПравилоСогласования.Установить(ПравилоСогласованияОбъект.Ссылка)
        
        для ЗаписьНабора из НаборЗаписейШагиПравилСогласования
            НовыйНаборЗаписейШагиПравилСогласования.ДобавитьЗапись(
                ПравилоСогласования = ПравилоСогласованияОбъект.Ссылка,
                ШагСогласования     = ЗаписьНабора.ШагСогласования,
                ИдентификаторЗаписи = новый Ууид(),
                ТипШага             = ЗаписьНабора.ТипШага,
                РольСогласующего    = ЗаписьНабора.РольСогласующего,
                Согласующий         = ЗаписьНабора.Согласующий,
                ТребуемаяПодпись    = ЗаписьНабора.ТребуемаяПодпись)
        ;
        НовыйНаборЗаписейШагиПравилСогласования.Записать()
    ;
;