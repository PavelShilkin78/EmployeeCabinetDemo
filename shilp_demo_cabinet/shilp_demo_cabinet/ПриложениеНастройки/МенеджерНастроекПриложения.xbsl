импорт КлиентСервисаПодписания
импорт ОбщиеСтандартные
импорт Почта
импорт Приложение
импорт ОбменДанными
импорт КонтрольДоступаСтандартные
импорт ВебApi
импорт ЗарплатаСразу
импорт СтандартноеПриложение
импорт Уведомления
импорт КонтрольДоступа

структура ДоступКПриложению
    обз пер url: Строка
    обз пер clientID: Строка
    обз пер clientSecret: Строка
;

структура ДоступКПриложениюHR
    обз пер applicationUrl: Строка
    обз пер clientID: Строка
    обз пер clientSecret: Строка
;

@ВПроекте
исключение ИсключениеФормированияФайлаНастроек
;

@ВПроекте
метод ДоступИнформационныхСистемРазрешен(): Булево
    возврат ДоступностьПриложения.ДанныеДоступностиПриложения().ДоступИнформационныхСистем == СостоянияДоступности.Разрешено
;

@ВПроекте
метод ФункциональныеОпции(): Приложение.ФункциональныеОпции
    возврат ПриложениеНастройки.ПолучитьФункциональныеОпции()
;

@ВПроекте
метод НастройкиПриложения(): ПриложениеНастройки.ОсновныеНастройки
    пер НастройкиПриложения: ПриложениеНастройки.ОсновныеНастройки
    знч Запрос = Запрос{
        Выбрать
            НастройкиПриложения.РежимРаботы как РежимРаботы,
            НастройкиПриложения.ИдПриложения как ИдПриложения,
            НастройкиПриложения.УуидПриложения как УуидПриложения,
            НастройкиПриложения.ИдEssWelcome как ИдEssWelcome,
            НастройкиПриложения.СборАналитики как СборАналитики,
            НастройкиПриложения.ПарольЗакрытогоКлючаСертификата как ПарольЗакрытогоКлючаСертификата,
            НастройкиПриложения.СтатусКастомизации как СтатусКастомизации
        Из НастройкиПриложения как НастройкиПриложения}
        
    исп Результат = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        НастройкиПриложения = новый ПриложениеНастройки.ОсновныеНастройки(
            ИдПриложения = РезультатСтроки[0].ИдПриложения,
            УуидПриложения = РезультатСтроки[0].УуидПриложения,
            РежимРаботы = РезультатСтроки[0].РежимРаботы,
            ИдEssWelcome = РезультатСтроки[0].ИдEssWelcome,
            СборАналитики = РезультатСтроки[0].СборАналитики,
            ПарольЗакрытогоКлючаСертификата = РезультатСтроки[0].ПарольЗакрытогоКлючаСертификата,
            СтатусКастомизации = РезультатСтроки[0].СтатусКастомизации
        )
    ;
    возврат НастройкиПриложения
;

@ВПроекте
метод ОбщедоступныеНастройкиПриложения(): ПриложениеНастройки.ОсновныеНастройки
    пер НастройкиПриложения: ПриложениеНастройки.ОсновныеНастройки
    знч Запрос = Запрос{
        Выбрать
            НастройкиПриложения.РежимРаботы как РежимРаботы,
            НастройкиПриложения.ИдПриложения как ИдПриложения,
            НастройкиПриложения.СборАналитики как СборАналитики,
            НастройкиПриложения.СтатусКастомизации как СтатусКастомизации
        Из НастройкиПриложения как НастройкиПриложения}
        
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    исп Результат = Запрос.Выполнить()
    ПривилегированныйРежим.Закрыть()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        НастройкиПриложения.РежимРаботы = РезультатСтроки[0].РежимРаботы
        НастройкиПриложения.ИдПриложения = РезультатСтроки[0].ИдПриложения
        НастройкиПриложения.СборАналитики = РезультатСтроки[0].СборАналитики
        НастройкиПриложения.СтатусКастомизации = РезультатСтроки[0].СтатусКастомизации
    иначе
        НастройкиПриложения.РежимРаботы = РежимыРаботы.Локальный
        НастройкиПриложения.СборАналитики = Ложь
    ;
    возврат НастройкиПриложения
;

@ВПроекте
метод УстановитьИдентификаторыПриложения(ИдПриложения: Строка, Ууид: Строка)
    исп Транзакции.Начать()
    знч Запрос = Запрос{
        Выбрать
            НастройкиПриложения.Ссылка как Ссылка
        Из 
            НастройкиПриложения как НастройкиПриложения}

    исп Результат = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        пер НастройкиПриложения: НастройкиПриложения.Объект = РезультатСтроки[0].Ссылка.ЗагрузитьОбъект(Истина)
        НастройкиПриложения.ИдПриложения = ИдПриложения
        НастройкиПриложения.УуидПриложения = новый Ууид(Ууид)
        НастройкиПриложения.Записать()
    ;
;

@ВПроекте
метод УстановитьСборАналитики(СборАналитики: Булево)
    исп Транзакции.Начать()
    знч Запрос = Запрос{
        Выбрать
            НастройкиПриложения.Ссылка как Ссылка
        Из НастройкиПриложения как НастройкиПриложения}
    
    исп КонтекстДоступа.Привилегированный()
    исп Результат = Запрос.Выполнить()
    если не Результат.Пусто()
        знч НастройкиПриложения = Результат.Единственный().Ссылка.ЗагрузитьОбъект(Истина)!
        НастройкиПриложения.СборАналитики = СборАналитики
        НастройкиПриложения.Записать()
    ;
;

@ВПроекте
метод СохранитьНастройки(Настройки: ПриложениеНастройки.ОсновныеНастройки)
    исп Транзакции.Начать()
    знч Запрос = Запрос{
        Выбрать Первые 1 
            Ссылка 
        Из НастройкиПриложения}
    исп Результат = Запрос.Выполнить()
    пер НастройкиОбъект: НастройкиПриложения.Объект?
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        НастройкиОбъект = РезультатСтроки[0].Ссылка.ЗагрузитьОбъект(Истина)
    иначе
        НастройкиОбъект = новый НастройкиПриложения.Объект()
    ;
    НастройкиОбъект.РежимРаботы = Настройки.РежимРаботы
    НастройкиОбъект.ИдПриложения = Настройки.ИдПриложения
    НастройкиОбъект.УуидПриложения = Настройки.УуидПриложения
    НастройкиОбъект.ИдEssWelcome = Настройки.ИдEssWelcome
    НастройкиОбъект.ПарольЗакрытогоКлючаСертификата = Настройки.ПарольЗакрытогоКлючаСертификата
    НастройкиОбъект.СтатусКастомизации = Настройки.СтатусКастомизации
    НастройкиОбъект.Записать()
;

@ВПроекте
метод ИзменитьСтатусКастомизации(СтатусКастомизации: СтатусыКастомизации)
    исп Транзакции.Начать()
    знч Запрос = Запрос{
        Выбрать
            НастройкиПриложения.Ссылка как Ссылка
        Из НастройкиПриложения как НастройкиПриложения}
    
    исп КонтекстДоступа.Привилегированный()
    исп Результат = Запрос.Выполнить()
    если не Результат.Пусто()
        знч НастройкиПриложения = Результат.Единственный().Ссылка.ЗагрузитьОбъект(Истина)!
        НастройкиПриложения.СтатусКастомизации = СтатусКастомизации
        НастройкиПриложения.Записать()
    ;
;

@ВПодсистеме
метод ЗаполнитьНачальныеНастройки()
    пер НастройкиПриложения: НастройкиПриложения.Объект = новый НастройкиПриложения.Объект()
    НастройкиПриложения.РежимРаботы = РежимыРаботы.Локальный
    НастройкиПриложения.Записать()
;

@ВПроекте
метод ДанныеФайлаНастроек(НаименованиеПользователя: Строка = ПриложениеНастройки.НАИМЕНОВАНИЕ_1С_ПРЕДПРИЯТИЕ): ДвоичныйОбъект.Ссылка
    МенеджерПравДоступа.ПроверитьПраваАдминистратора()
    пер ИнформационнаяСистема: ИнформационныеСистемы.Ссылка? = ИнформационныеСистемы.НайтиПоНаименованию(НаименованиеПользователя)
    пер ИдПользователя: ИдПользователя?
    если ИнформационнаяСистема == Неопределено
        выбросить новый ИсключениеФормированияФайлаНастроек("Приложение не зарегистрировано")
    иначе
        пер Пользователь: Пользователи.Ссылка = МенеджерСущности.ЗначениеРеквизитаОбъекта(ИнформационнаяСистема!, "Пользователь")
        исп КонтекстДоступа.Привилегированный()
        ИдПользователя = Пользователь.ЗагрузитьОбъект()!.Ид
    ;
    
    пер ТокенДоступа: ДанныеЗапросаТокенаДоступа = ПользователиСервиса.СгенерироватьДанныеЗапросаТокенаДоступа(ИдПользователя!)
    пер НастройкиJson: неизвестно
    знч АдресПриложения = СтандартноеПриложение.НастройкиПриложения().АдресПриложения
    
    если НаименованиеПользователя == ПриложениеНастройки.НАИМЕНОВАНИЕ_1С_ПРЕДПРИЯТИЕ
        НастройкиJson = новый ДоступКПриложению(
                АдресПриложения,
                ТокенДоступа.Ид,
                ТокенДоступа.Секрет
            )
    иначе
        НастройкиJson = новый ДоступКПриложениюHR(
                АдресПриложения,
                ТокенДоступа.Ид,
                ТокенДоступа.Секрет
            )
    ;
    возврат ОбъектноеХранилище.ЗагрузитьИзСтроки(СервисыHttp.ДанныеJsonВСтроку(НастройкиJson)).Ссылка
;

@ВПодсистеме
метод СохранитьНастройкиПриложенияИзJson(НастройкиПриложения: НастройкиПриложенияJson, Ключи: ЧитаемаяКоллекция<Строка>? = Неопределено)
    знч ОсновныеНастройки = НастройкиПриложения()
    
    если Ключи == Неопределено или Ключи!.Содержит("applicationId")
        ОсновныеНастройки.ИдПриложения = НастройкиПриложения.applicationId
    ;
    если Ключи == Неопределено или Ключи!.Содержит("applicationUuid")
        ОсновныеНастройки.УуидПриложения = новый Ууид(НастройкиПриложения.applicationUuid)
    ;
    если Ключи == Неопределено или Ключи!.Содержит("mode")
        ОсновныеНастройки.РежимРаботы = НастройкиПриложенияJson.РежимРаботыИзJson(НастройкиПриложения.mode)
    ;
    если Ключи == Неопределено или Ключи!.Содержит("essWelcomeId")
        ОсновныеНастройки.ИдEssWelcome = НастройкиПриложения.essWelcomeId
    ;
    
    если Ключи == Неопределено или Ключи!.Содержит("customizationStatus")
        ОсновныеНастройки.СтатусКастомизации = НастройкиПриложенияJson.СтатусКастомизацииИзJson(
            НастройкиПриложения.customizationStatus ?? НастройкиПриложенияJson.СтатусыКастомизацииJson.disable)
    ;

    СохранитьНастройки(ОсновныеНастройки)
    
    если НастройкиПриложения.siServiceSettings != Неопределено
        НастройкиЗарплатаСразу(НастройкиПриложения.siServiceSettings!)
    ;

    если НастройкиПриложения.xSignUrl != Неопределено
        ЗаписатьАдресСервисаПодписания(НастройкиПриложения.xSignUrl)
    ;
    
    если НастройкиПриложения.pushNotificationId  != Неопределено
        знч ИдентификаторыПриложения = новый Уведомления.ИдентификаторыПриложения(ИдентификаторPushNotifications = НастройкиПриложения.pushNotificationId)
        Уведомления.УстановитьИдентификаторыПриложения(ИдентификаторыПриложения, 
            новый ЧитаемыйМассив(["pushNotificationId"]))
    ;
    
;    

метод НастройкиЗарплатаСразу(Настройки: НастройкиПриложенияJson.НастройкиЗарплатаСразу)
    
    знч НастройкаВзаимодействияСЗарплатаСразу = новый ЗарплатаСразу.ПараметрыДоступаКЗарплатаСразу(
        Настройки.url,
        Настройки.apiKey)

    ЗарплатаСразу::НастройкаВзаимодействияСЗарплатаСразу.УстановитьНастройкиВзаимодействияСЗарплатаСразу(НастройкаВзаимодействияСЗарплатаСразу)
      
    знч ФункциональныеОпции = новый ЗарплатаСразу.ФункциональныеОпции(Настройки.url != "")
    ЗарплатаСразу.ЗаписатьФункциональныеОпции(ФункциональныеОпции)
        
;

метод ЗаписатьАдресСервисаПодписания(АдресСервиса: Строка)
    КлиентСервисаПодписания.ЗаписатьАдресСервиса(АдресСервиса)
;

@ВПодсистеме
метод СохранитьНастройкиДляОблачногоРежимаРаботыИзJson(ДанныеJson: НастройкиПриложенияJson, Ключи: ЧитаемаяКоллекция<Строка>? = Неопределено)
    пер ИдентификаторыПриложения = новый Уведомления.ИдентификаторыПриложения()
    если Ключи == Неопределено или Ключи!.Содержит("smsGate")
        ИдентификаторыПриложения.ИдентификаторSmsGate = ДанныеJson.smsGate.smsGateId
    ;
    если Ключи == Неопределено или Ключи!.Содержит("tokenFcm")
        ИдентификаторыПриложения.КлючFcm = ДанныеJson.tokenFcm ?? ""
    ;
    если Ключи == Неопределено или Ключи!.Содержит("certApns")
        если ДанныеJson.certApns != Неопределено
            ИдентификаторыПриложения.СертификатApns = ОбъектноеХранилище.ЗагрузитьИзBase64Строки(ДанныеJson.certApns).Ссылка
        иначе
            ИдентификаторыПриложения.СертификатApns = Неопределено
        ;
    ;
    если Ключи == Неопределено или Ключи!.Содержит("certFcm")
        если ДанныеJson.certFcm != Неопределено
            ИдентификаторыПриложения.КлючCервисаFirebase = ОбъектноеХранилище.ЗагрузитьИзBase64Строки(ДанныеJson.certFcm).Ссылка
        иначе
            ИдентификаторыПриложения.КлючCервисаFirebase = Неопределено
        ;
    ;
    если Ключи == Неопределено или Ключи!.Содержит("certHms")
        если ДанныеJson.certHms != Неопределено
            ИдентификаторыПриложения.КлючCервисаHms = ОбъектноеХранилище.ЗагрузитьИзBase64Строки(ДанныеJson.certHms).Ссылка
        иначе
            ИдентификаторыПриложения.КлючCервисаHms = Неопределено
        ;
    ;
    
    если Ключи == Неопределено или Ключи!.Содержит("pushNotificationId")
        ИдентификаторыПриложения.ИдентификаторPushNotifications = ДанныеJson.pushNotificationId ?? ""
    ;
    
    Уведомления.УстановитьИдентификаторыПриложения(ИдентификаторыПриложения, Ключи)
    
    если Ключи == Неопределено или Ключи!.Содержит("smsGate")
        УстановитьНастройкиУчетнойЗаписиОтправкиSms(ДанныеJson.smsGate)
    ;
    если Ключи == Неопределено или Ключи!.Содержит("smtp")
        УстановитьНастройкиУчетнойЗаписиЭлектроннойПочты(ДанныеJson.smtp)
    ;
;

метод УстановитьНастройкиУчетнойЗаписиОтправкиSms(Настройки: НастройкиПриложенияJson.НастройкиSmsGateJson)
    пер НастройкиУчетнойЗаписи =  новый Уведомления.НастройкиУчетнойЗаписиОтправкиSms(
            Настройки.smsGateServer, 
            Настройки.smsGateUrlService)
    Уведомления.УстановитьНастройкиУчетнойЗаписиОтправкиSms(НастройкиУчетнойЗаписи)
    ПользователиСистемы.УстановитьШлюзSms(
        новый ШлюзSms(
            Настройки.smsGateServer + Настройки.smsGateUrlService,
            Настройки.smsGateId
        )
    )
;

метод УстановитьНастройкиУчетнойЗаписиЭлектроннойПочты(Настройки: НастройкиПриложенияJson.НастройкиSmtpJson?)
    если Настройки != Неопределено
        УчетныеЗаписиПочты.Создать(
            новый ПодключениеSmtp(
                СерверПочты = Настройки.host,
                ПортСервераПочты = Настройки.port,
                Наименование = Настройки.senderName,
                УчетнаяЗапись = Настройки.user,
                АдресЭлектроннойПочты = Настройки.senderEmail,
                ПарольУчетнойЗаписи = Настройки.password,
                ИспользоватьЗащищенноеСоединение = Настройки.ssl,
                РазрешитьStartTls = Настройки.startTls ?? Истина
            )
        )
    иначе
        УчетныеЗаписиПочты.УдалитьСистемнуюУчетнуюЗапись()
        ПользователиСистемы.ОчиститьШлюзSmtp()
    ;
;