импорт ИнтерфейсныеКомпонентыСтандартные
импорт Компания
импорт Криптография
импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт Обсуждения
импорт КонтрольДоступа
импорт УниверсальныеМеханизмы
импорт ЛичныеКабинетыПользователей
импорт ВладельцыКабинетов

// Контракт ИнициализируемыйКомпонент

@ВПроекте
@Реализация
метод Инициализировать()
    ИнтерфейсныеКомпоненты.ИнициализироватьТаблицу(Таблица = Компоненты.ДанныеЛиста)
    если ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо == Неопределено или МесяцРасчетногоЛиста == Неопределено
        возврат
    ;
    ПрочитатьДанныеЛиста()
    ИнтерфейсныеКомпоненты.ИнициализироватьПодчиненныеКомпоненты(Компоненты)
;

// Конец ИнициализируемыйКомпонент

@ВПодсистеме
метод СотрудникОзнакомлен(): Булево
    возврат КраткийРасчетныйЛист.Ознакомлен
;

@ВПодсистеме
метод ПерепискаВидимость(): Булево
    возврат Обсуждения.ИспользуютсяОбсуждения()
;

@ВПодсистеме
метод ВыполненоСогласование()
    ОписаниеОшибки = ""
    пер ФизическоеЛицо = ВладельцыКабинетов.ПараметрыСеанса().ФизическоеЛицо
    пер ПрерватьОперацию = Ложь
    если Криптография.ПараметрыСеанса().ВидЭлектроннойПодписи == ВидыЭлектронныхПодписей.УНЭПИнформационнойСистемы
        и не Криптография.ВвестиПарольЗакрытогоКлюча(ФизическоеЛицо, КраткийРасчетныйЛист.РасчетныйЛист)
        
        ПрерватьОперацию = Истина
    иначе если (Криптография.ПараметрыСеанса().ВидЭлектроннойПодписи == ВидыЭлектронныхПодписей.Госключ
        или Криптография.ПараметрыСеанса().ВидЭлектроннойПодписи == ВидыЭлектронныхПодписей.УнэпАстралПлатформа)
        
        знч ПодписываемыеДокументы = новый Множество<ПодписываемыйДокумент.Ссылка>()
        для ДанныеФайлаРачетногоЛиста из ФайлыРасчетногоЛиста
            ПодписываемыеДокументы.Добавить(ДанныеФайлаРачетногоЛиста.ДокументНаПодпись)
        ;
        если не Криптография.УстановитьПодписиДокументовВСервисеПодписания(
            ПодписываемыеДокументы, ФизическоеЛицо)
        
            ПрерватьОперацию = Истина
        ;
    ;
    если ПрерватьОперацию
        возврат
    ;
    ПодписатьРасчетныйЛист(
        КраткийРасчетныйЛист.РасчетныйЛист, 
        ФизическоеЛицо, 
        Криптография.ПараметрыСеанса().ПарольЗакрытогоКлючаПользователя,
        Криптография.ПараметрыСеанса().ВидЭлектроннойПодписи
    )

    КраткийРасчетныйЛист.Ознакомлен = Истина
    МенеджерГлобальныхКлиентскихСобытий.Оповестить(Зарплата.ПОДПИСАН_РАСЧЕТНЫЙ_ЛИСТ)
;

@ВПодсистеме
метод ПоказатьОшибку(Ошибка: Строка)
    ОписаниеОшибки = Ошибка
;    

структура КлючевыеСвойстваКомпонента
    обз пер МесяцРасчетногоЛиста: Дата?
    обз пер ПерваяПоловинаМесяца: Булево
;

метод КраткийРасчетныйЛистШиринаВКолонках(): ШиринаВКолонках | Авто
    возврат КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон ? ШиринаВКолонках.Половинная : ШиринаВКолонках.Тройная
;

метод ВыводШиринаВКолонках(): ШиринаВКолонках | Авто
    возврат КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон ? ШиринаВКолонках.Половинная : ШиринаВКолонках.Одинарная
;

метод КоллекцияИсточникаЗаявленияНаВычеты(): Массив<СтрокаРасчетногоЛиста>
    возврат Компоненты.ДанныеЛиста.Источник.Данные
;

метод ПрочитатьДанныеЛиста()
    пер КоллекцияДанных = КоллекцияИсточникаЗаявленияНаВычеты()
    пер Данные: ДанныеЛиста 
        = ДанныеЛиста(МесяцРасчетногоЛиста, ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо, ПерваяПоловинаМесяца) 
    КоллекцияДанных.Очистить()
    КоллекцияДанных.ДобавитьВсе(Данные.КоллекцияСтрок)
    РасчетныйЛист = Данные.РасчетныйЛист
    КраткийРасчетныйЛист = Данные.КраткийРасчетныйЛист
    ФайлыРасчетногоЛиста = Данные.ФайлыРасчетногоЛиста
    ВыводФайлов.Элементы.Очистить()
    если ФайлыРасчетногоЛиста.Пусто()
        ВыводФайлов.Элементы.Очистить()
        Компоненты.Вывод.Видимость = Ложь
    иначе
        Компоненты.Вывод.Видимость = Истина
        если ФайлыРасчетногоЛиста.Размер() > 1
            для ДанныеФайла из ФайлыРасчетногоЛиста
                если ДанныеФайла.Организация != Неопределено
                    пер ПунктМеню = новый ЭлементМеню()
                    ПунктМеню.Заголовок = ДанныеФайла.Организация!.Представление()
                    ПунктМеню.ДополнительныеПараметры = ДанныеФайла
                    ВыводФайлов.Элементы.Добавить(ПунктМеню)
                ;
            ;
        ;
    ;
    
    ДанныеПрочитаны = Истина
;

метод ВыводПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    СтатистикаИспользованияПриложения.ЗарегистрироватьЦель("РасчетныйЛистСкачать")
    если ФайлыРасчетногоЛиста.Размер() > 1
        ВыводФайлов.Открыть(Компоненты.Вывод)
    иначе если ФайлыРасчетногоЛиста.Размер() > 0
        если ФайлыРасчетногоЛиста[0].ФайлНаПечать == Неопределено
            ВывестиФайл(ФайлыРасчетногоЛиста[0].Файл)
        иначе
            ВывестиФайл(ФайлыРасчетногоЛиста[0].ФайлНаПечать)
        ;
    ;
;

метод ВыборВыводимогоФайлаПриВыбореЭлемента(Компонент: ВсплывающееМеню, СобытиеСДанными: СобытиеСДанными<ЭлементМеню>)
    если (СобытиеСДанными.Данные.ДополнительныеПараметры как ФайлРасчетногоЛиста).ФайлНаПечать == Неопределено
        ВывестиФайл((СобытиеСДанными.Данные.ДополнительныеПараметры как ФайлРасчетногоЛиста).Файл)
    иначе
        ВывестиФайл((СобытиеСДанными.Данные.ДополнительныеПараметры как ФайлРасчетногоЛиста).ФайлНаПечать)
    ;
    ВыводФайлов.Закрыть()
;

метод ВывестиФайл(Файл: Файлы.Ссылка)
    если МенеджерСущности.СсылкаСуществует(Файл)
        УниверсальныеМеханизмы.НачатьВыгрузкуФайла(Файл)
    иначе
        знч Уведомление = новый Уведомление("Изменились данные об оплате, необходимо обновить данные",
            РасчетныйЛист.Представление())
        Уведомление.Показать()
    ;
;

метод СуммаВидимость(ДанныеЭлемента: СтрокаРасчетногоЛиста): Булево
    возврат не ДанныеЭлемента.ЭтоГруппа и не ДанныеЭлемента.ЭтоСотрудник
;

метод СуммаЗаголовок(ДанныеЭлемента: СтрокаРасчетногоЛиста): Строка
    возврат МенеджерСтрок.ФорматЧисла(ДанныеЭлемента.Сумма, ДлинаДробнойЧасти = 2)
;

метод ГруппаСтрокВидимость(ДанныеЭлемента: СтрокаРасчетногоЛиста): Булево
    возврат ДанныеЭлемента.ЭтоГруппа или ДанныеЭлемента.ЭтоСотрудник
;

метод ГруппаСтрокВысота(ДанныеЭлемента: СтрокаРасчетногоЛиста): Число
    возврат ДанныеЭлемента.ЭтоГруппа ? 40 : 64
;

метод ОсновнаяГруппаВидимость(ДанныеЭлемента: СтрокаРасчетногоЛиста): Булево
    возврат не ГруппаСтрокВидимость(ДанныеЭлемента)
;

@ВПроекте
@НаСервере @НаКлиенте
структура ДанныеЛиста
    пер КоллекцияСтрок: Массив<СтрокаРасчетногоЛиста>
    пер КраткийРасчетныйЛист: КраткийРасчетныйЛист
    пер РасчетныйЛист: РасчетныеЛисты.Ссылка?
    пер ФайлыРасчетногоЛиста: Массив<ФайлРасчетногоЛиста>
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеЛиста(Месяц: Дата, ФизическоеЛицо: ФизическиеЛица.Ссылка, ПерваяПоловинаМесяца: Булево): ДанныеЛиста
    пер ВозвращаемыеДанные: ДанныеЛиста
    знч Запрос = Запрос{
        Выбрать 
            Зарплата.РасчетныйЛист Как РасчетныйЛист, 
            Зарплата.СоставнаяЧасть.Группа.ЗаменитьNull(Неопределено) Как Группа, 
            Зарплата.СоставнаяЧасть.Вид.ЗаменитьNull(Неопределено) Как Вид, 
            Зарплата.Сотрудник Как Сотрудник, 
            Зарплата.Сотрудник.Наименование.ЗаменитьNull("") Как СотрудникНаименование,
            Зарплата.Организация.Наименование.ЗаменитьNull("") Как ОрганизацияНаименование, 
            Зарплата.ПредставлениеРабочегоМеста Как ПредставлениеРабочегоМеста, 
            Зарплата.СоставнаяЧасть.Наименование.ЗаменитьNull("") Как Наименование, 
            Зарплата.Сумма Как Сумма
         Из 
            ЗарплатаСотрудников Как Зарплата
            Левое Соединение ПодразделенияИСотрудники Как Сотрудники
            По Зарплата.Сотрудник == Сотрудники.Объект
         Где 
            Зарплата.ФизическоеЛицо == %ФизическоеЛицо 
            И Зарплата.Месяц == %Месяц 
            И Зарплата.ПерваяПоловинаМесяца == %ПерваяПоловинаМесяца 
            И Зарплата.РасчетныйЛист != Неопределено  
         Упорядочить По
            Сотрудники.ОсновноеМестоРаботы.ЗаменитьNull(Ложь) Убыв,
            Зарплата.Сотрудник,
            Зарплата.СоставнаяЧасть.Группа, 
            Зарплата.ПредставлениеРабочегоМеста,
            Зарплата.СоставнаяЧасть.Приоритет}

    пер КоллекцияСтрок = новый Массив<СтрокаРасчетногоЛиста>()
    пер КраткийРасчетныйЛист: КраткийРасчетныйЛист

    пер ДанныеСтроки: СтрокаРасчетногоЛиста
    пер ТекущаяГруппа: ГруппыСоставныхЧастейЗарплаты? = Неопределено
    пер ТекущийСотрудник: Сотрудники.Ссылка? = Неопределено 
    пер ИконкиВидовСоставныйЧастей: Соответствие<ВидыСоставныхЧастейЗарплаты?, ДвоичныйОбъект.Ссылка>
    пер ДанныеДляКраткогоЛиста: неизвестно
    ИконкиВидовСоставныйЧастей.Вставить(ВидыСоставныхЧастейЗарплаты.ВыплатаНаличными, Ресурс{ВидыСоставныхЧастей/ВыплатаНаличными.svg}.Ссылка)
    ИконкиВидовСоставныйЧастей.Вставить(ВидыСоставныхЧастейЗарплаты.ВыплатаЧерезБанк, Ресурс{ВидыСоставныхЧастей/ВыплатаЧерезБанк.svg}.Ссылка)
    пер ПустаяКартинка: ДвоичныйОбъект.Ссылка = Ресурс{Пустышка.svg}.Ссылка
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        если ТекущийСотрудник == Неопределено // если первая строка
            ВозвращаемыеДанные.РасчетныйЛист = РезультатСтрока.РасчетныйЛист    
            ДанныеДляКраткогоЛиста = новый Сервер.ДанныеДляКраткогоЛиста(ВозвращаемыеДанные.РасчетныйЛист, Месяц, ПерваяПоловинаМесяца)
        ;
        пер Группа: ГруппыСоставныхЧастейЗарплаты = РезультатСтрока.Группа
        пер Сотрудник: Сотрудники.Ссылка? = РезультатСтрока.Сотрудник
        пер ВидСоставнойЧасти: ВидыСоставныхЧастейЗарплаты? = РезультатСтрока.Вид
        пер Сумма: Число = РезультатСтрока.Сумма
        если Сотрудник != ТекущийСотрудник
            если ТекущийСотрудник != Неопределено
                ДанныеСтроки = новый СтрокаРасчетногоЛиста()
                ДанныеСтроки.ЭтоСотрудник = Истина
                пер Наименование: Строка = РезультатСтрока.ПредставлениеРабочегоМеста
                пер НаименованиеДополнительное: Строка
                если Наименование.Пусто()
                    Наименование = РезультатСтрока.СотрудникНаименование
                    НаименованиеДополнительное = РезультатСтрока.ОрганизацияНаименование
                ;
                ДанныеСтроки.Наименование = Наименование
                ДанныеСтроки.НаименованиеДополнительное = НаименованиеДополнительное
                КоллекцияСтрок.Добавить(ДанныеСтроки)
            ; 
            ТекущийСотрудник = Сотрудник
        ; 
        если Группа != ТекущаяГруппа
            ДанныеСтроки = новый СтрокаРасчетногоЛиста()
            ДанныеСтроки.ЭтоГруппа = Истина
            ДанныеСтроки.Наименование = Группа.Представление()
            КоллекцияСтрок.Добавить(ДанныеСтроки)
            ТекущаяГруппа = Группа
        ;
        ДанныеСтроки = новый СтрокаРасчетногоЛиста()
        ДанныеСтроки.ЭтоГруппа = Ложь
        ДанныеСтроки.Группа = Группа
        если ВидСоставнойЧасти != Неопределено
            ДанныеСтроки.Вид = ВидСоставнойЧасти
            ДанныеСтроки.Наименование = ВидСоставнойЧасти.Представление()
        иначе
            ДанныеСтроки.Наименование = РезультатСтрока.Наименование
        ;
        ДанныеСтроки.Сумма = Сумма
        если ИконкиВидовСоставныйЧастей.СодержитКлюч(ВидСоставнойЧасти)
            ДанныеСтроки.Иконка = ИконкиВидовСоставныйЧастей[ВидСоставнойЧасти]
        иначе
            ДанныеСтроки.Иконка = ПустаяКартинка
        ;
        КоллекцияСтрок.Добавить(ДанныеСтроки)
        
        если Группа == ГруппыСоставныхЧастейЗарплаты.Начисления
            ДанныеДляКраткогоЛиста.Начислено += Сумма
        иначе если ВидСоставнойЧасти == ВидыСоставныхЧастейЗарплаты.ВыплатаЧерезБанк  
            ДанныеДляКраткогоЛиста.ВыплаченоНаКарту += Сумма
        иначе если ВидСоставнойЧасти == ВидыСоставныхЧастейЗарплаты.ВыплатаНаличными  
            ДанныеДляКраткогоЛиста.ВыплаченоНаличными += Сумма
        ;
    ;
    если ДанныеДляКраткогоЛиста != Неопределено
        Сервер.ЗаполнитьКраткийРасчетныйЛист(КраткийРасчетныйЛист, ДанныеДляКраткогоЛиста)
        ВозвращаемыеДанные.КоллекцияСтрок = КоллекцияСтрок
        ВозвращаемыеДанные.КраткийРасчетныйЛист = КраткийРасчетныйЛист
    ;
    если ВозвращаемыеДанные.РасчетныйЛист != Неопределено
        ВозвращаемыеДанные.КраткийРасчетныйЛист.Ознакомлен = Истина
        ВозвращаемыеДанные.ФайлыРасчетногоЛиста = РасчетныеЛисты.ФайлыРасчетногоЛиста(ВозвращаемыеДанные.РасчетныйЛист)
        пер ОзнакомлениеУстановлено: Булево
        для ДанныеФайла из ВозвращаемыеДанные.ФайлыРасчетногоЛиста
            если не ОзнакомлениеУстановлено
                ВозвращаемыеДанные.КраткийРасчетныйЛист.Ознакомлен = ДанныеФайла.Ознакомлен
                ОзнакомлениеУстановлено = Истина
            иначе если не ДанныеФайла.Ознакомлен
                ВозвращаемыеДанные.КраткийРасчетныйЛист.Ознакомлен = Ложь
            ;
        ;
        если не ОзнакомлениеУстановлено
            ВозвращаемыеДанные.КраткийРасчетныйЛист.Ознакомлен = Ложь
        ;
    ;
    возврат ВозвращаемыеДанные
;

@НаСервере @ДоступноСКлиента
статический метод ПодписатьРасчетныйЛист(РасчетныйЛист: РасчетныеЛисты.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка,
    ПарольЗакрытогоКлюча: Строка, ВидЭлектроннойПодписи: ВидыЭлектронныхПодписей)
    
    РасчетныеЛисты.ПодписатьРасчетныйЛист(РасчетныйЛист, ФизическоеЛицо, ПарольЗакрытогоКлюча, ВидЭлектроннойПодписи) 
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеФайла(Файл: Файлы.Ссылка): Соответствие<Строка, Объект?>
    пер РеквизитыФайла = МенеджерСущности.ЗначенияРеквизитовОбъекта(Файл, ["Наименование", "Расширение"])
    пер ДанныеФайла = новый Соответствие<Строка, Объект?>()
    ДанныеФайла.Вставить("Наименование", РеквизитыФайла["Наименование"]) 
    ДанныеФайла.Вставить("Расширение", РеквизитыФайла["Расширение"])
    ДанныеФайла.Вставить("Данные", Файлы.ДвоичныеДанныеФайла(Файл).Ссылка)
    возврат ДанныеФайла
;