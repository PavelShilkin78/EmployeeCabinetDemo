импорт Документы
импорт ИнтерфейсныеКомпонентыСтандартные
импорт Компания
импорт Криптография
импорт ЛичныеКабинетыПользователей
импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт УниверсальныеМеханизмы
импорт Уведомления
импорт СтандартноеПриложение
импорт ВладельцыКабинетов

// Контракт ОсновнойИнтерфейсПоставщик
@ВПроекте
@Реализация
метод РазделыПриложения(): ЧитаемаяКоллекция<ОсновнойИнтерфейс.ОписаниеРаздела>
    знч Разделы: Массив<ОсновнойИнтерфейс.ОписаниеРаздела>
    если ИспользованиеРазделаЗарплата()
        Разделы.Добавить(ОписаниеРазделаЗарплата())
    ;
    возврат Разделы
;

@ВПроекте
@Реализация
метод Виджеты(): ЧитаемаяКоллекция<ОсновнойИнтерфейс.ОписаниеВиджета>
    знч Виджеты: Массив<ОсновнойИнтерфейс.ОписаниеВиджета>
    если ИспользованиеРазделаЗарплата()
        Виджеты.Добавить(ОписаниеВиджета())
    ;
    возврат Виджеты
;

@ВПроекте
@Реализация
метод КомандыВсеФункции(): ЧитаемаяКоллекция<ОсновнойИнтерфейс.ОписательКомандыВсеФункции>
    знч Группа = новый ОсновнойИнтерфейс.ОписательГруппыКомандВсеФункции(Зарплата.ИМЯ_РАЗДЕЛА_ЗАРПЛАТА, 1)
    возврат [
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Зарплата сотрудников",
            СоздательФормыСписка = метод()-> возврат новый ЗарплатаСотрудников.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ЗарплатаСотрудников.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Заявление на налоговые вычеты вычеты на детей",
            СоздательФормыСписка = метод()-> возврат новый ЗаявлениеНаНалоговыеВычетыВычетыНаДетей.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ЗаявлениеНаНалоговыеВычетыВычетыНаДетей.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Заявление на налоговые вычеты уведомления налоговой",
            СоздательФормыСписка = метод()-> возврат новый ЗаявлениеНаНалоговыеВычетыУведомленияНалоговой.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ЗаявлениеНаНалоговыеВычетыУведомленияНалоговой.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Заявление на налоговые вычеты",
            СоздательФормыСписка = метод()-> возврат новый ЗаявлениеНаНалоговыеВычеты.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ЗаявлениеНаНалоговыеВычеты.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Заявление на удержание ДСВ в ПФР",
            СоздательФормыСписка = метод()-> возврат новый ЗаявлениеНаУдержаниеДсвВПфр.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ЗаявлениеНаУдержаниеДсвВПфр.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Плановые удержания",
            СоздательФормыСписка = метод()-> возврат новый ПлановыеУдержания.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ПлановыеУдержания.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Применение вычетов на детей",
            СоздательФормыСписка = метод()-> возврат новый ПрименениеВычетовНаДетей.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ПрименениеВычетовНаДетей.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Применяемые вычеты",
            СоздательФормыСписка = метод()-> возврат новый ПрименяемыеВычеты.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ПрименяемыеВычеты.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Расчетные листы",
            СоздательФормыСписка = метод()-> возврат новый РасчетныеЛисты.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый РасчетныеЛисты.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Составные части  зарплаты",
            СоздательФормыСписка = метод()-> возврат новый СоставныеЧастиЗарплаты.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый СоставныеЧастиЗарплаты.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Расчетные листы к уведомлениям",
            СоздательФормыСписка = метод()-> возврат новый РасчетныеЛистыКУведомлениям.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый РасчетныеЛистыКУведомлениям.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Используемая функциональность (Зарплата)",
            СоздательФормыСписка = метод()-> возврат новый ИспользуемаяФункциональность.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ИспользуемаяФункциональность.АвтоматическаяФормаОбъекта();
            )]
;

@ВПроекте
@Реализация
метод ДополнительныеКоманды(): ЧитаемыйМассив<Команда>
    возврат []
;

@ВПроекте
@Реализация
метод КомандыПанелиДействий(): ЧитаемыйМассив<Команда>
    возврат []
;

@ВПроекте
@Реализация
метод ДополнительныеКомандыПанелиГлавное(): ЧитаемыйМассив<Команда>
    возврат []
;
// Конец ОсновнойИнтерфейсПоставщик

// Контракт PushУведомленияОбработчик
@ВПроекте 
@Реализация
метод ВыполнитьДействие(ДанныеPush: PushУведомления.ДанныеPush)
    выбор 
    когда ДанныеPush.Ссылка это ЗаявлениеНаНалоговыеВычеты.Ссылка
        пер Заявление: ЗаявлениеНаНалоговыеВычеты.Ссылка = ДанныеPush.Ссылка как ЗаявлениеНаНалоговыеВычеты.Ссылка
        если МенеджерСущности.ЗначениеРеквизитаОбъекта(Заявление, "ВычетыНаДетей")
            ЗаявлениеНаНалоговыеВычетыНаДетейФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = Заявление)
        иначе
            ЗаявлениеНаНалоговыеВычетыФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = Заявление)
        ;
    когда ДанныеPush.Ссылка это РасчетныеЛисты.Ссылка
        пер РасчетныйЛист: РасчетныеЛисты.Ссылка = ДанныеPush.Ссылка как РасчетныеЛисты.Ссылка
        пер СведеняОРасчетномЛисте: ЧитаемоеСоответствие<Строка, Объект?> = МенеджерСущности.ЗначенияРеквизитовОбъекта(РасчетныйЛист, ["ФизическоеЛицо", "Месяц", "ПерваяПоловинаМесяца"])
        если не ВызовСервера.ПодписатьРасчетныйЛист(СведеняОРасчетномЛисте["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, СведеняОРасчетномЛисте["Месяц"] как Дата?,
            СведеняОРасчетномЛисте["ПерваяПоловинаМесяца"] как Булево, ДанныеPush.Действие, Криптография.ПараметрыСеанса().ВидЭлектроннойПодписи)
            РасчетныйЛистФорма.ОткрытьВМодальномОкне(КлючОбъекта = РасчетныйЛист)
        ;   
    ;
;
// Конец PushУведомленияОбработчик

// Контракт ДокументыСотрудниковПоставщик

@ВПроекте
@Реализация
метод КомандыСоздатьЗаявление(): ЧитаемыйМассив<ЭлементСпискаЗначений<Объект?>>
    возврат Зарплата.СписокВидовЗаявлений()   
;

@ВПроекте
@Реализация
метод КомпонентДокумента(Заявление: ДокументСотрудника.Ссылка): ДокументСотрудникаКомпонент?
    выбор Заявление
    когда это ЗаявлениеНаНалоговыеВычеты.Ссылка
        возврат новый ЗаявлениеНаНалоговыеВычетыКомпонент()
    когда это ЗаявлениеНаУдержаниеДсвВПфр.Ссылка
        возврат новый ЗаявлениеНаУдержаниеДсвВПфрКомпонент()
    иначе
        возврат Неопределено
    ;
;

@ВПроекте
@Реализация
метод ОткрытьЗаявлениеМодально(Заявление: ДокументСотрудника.Ссылка): СтандартныеФормы.ДействиеВФорме?
    если Заявление это ЗаявлениеНаНалоговыеВычеты.Ссылка
        знч ЗаявлениеНаНалоговыеВычеты = Заявление как ЗаявлениеНаНалоговыеВычеты.Ссылка
        если Зарплата.ЗаявлениеВычетНаДетей(ЗаявлениеНаНалоговыеВычеты)
            возврат ЗаявлениеНаНалоговыеВычетыНаДетейФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = ЗаявлениеНаНалоговыеВычеты)
        иначе
            возврат ЗаявлениеНаНалоговыеВычетыФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = ЗаявлениеНаНалоговыеВычеты)
        ;
    иначе если Заявление это ЗаявлениеНаУдержаниеДсвВПфр.Ссылка
        знч ЗаявлениеНаУдержаниеДсвВПфр = Заявление как ЗаявлениеНаУдержаниеДсвВПфр.Ссылка
        возврат ЗаявлениеНаУдержаниеДсвВПфрФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = ЗаявлениеНаУдержаниеДсвВПфр)
    иначе
        возврат Неопределено
    ;
;

@ВПроекте
@Реализация
метод ВыполнитьКомандуСоздать(Действие: ЭлементСпискаЗначений<Объект?>)
    знч ВидЗаявления = Действие.Значение
    если не (ВидЗаявления это ВидыЗаявленийНаВычеты)
         и не (ВидЗаявления это ВидыУдержаний)
        возврат    
    ;
    
    если ВидЗаявления == ВидыУдержаний.ДСВ_ПФР
        ЗаявлениеНаУдержаниеДсвВПфрФормаДокумента.ОткрытьВМодальномОкне()
    иначе если ВидЗаявления == ВидыЗаявленийНаВычеты.Дети
        ЗаявлениеНаНалоговыеВычетыНаДетейФормаДокумента.ОткрытьВМодальномОкне()
    иначе если ВидЗаявления == ВидыЗаявленийНаВычеты.НаСебя
        ЗаявлениеНаНалоговыеВычетыФормаДокумента.ОткрытьВМодальномОкне(
            ЛичныйВычет = Истина
        )
    иначе
        ЗаявлениеНаНалоговыеВычетыФормаДокумента.ОткрытьВМодальномОкне(
            ПредставлениеВычетовПоУведомлениям = ВидЗаявления.ВСтроку(),
            ВычетыНаНедвижимость = (ВидЗаявления == ВидыЗаявленийНаВычеты.Недвижимость),
            ВычетыНаЛечение = (ВидЗаявления == ВидыЗаявленийНаВычеты.Лечение),
            ВычетыНаОбучение = (ВидЗаявления == ВидыЗаявленийНаВычеты.Обучение)
        )
    ; 
;

@ВПроекте
@Реализация
метод ПредставленияДокументов(): ЧитаемаяКоллекция<СостояниеДокументаКомпонентДанных>
    возврат Зарплата.ПредставленияЗаявленийФизлица(ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо)
;

// Конец ДокументыСотрудниковПоставщик

метод ИспользованиеРазделаЗарплата(): Булево
    возврат ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо != Неопределено и 
        (Компания.ПараметрыСеанса().ТекущийПользовательСотрудник
            или ВладельцыКабинетов.ПараметрыСеанса().ДнейДоОтключенияКабинета != Неопределено) и
        Зарплата.ПараметрыСеанса().ФункциональныеОпции.ИнформацияОЗарплате
;

метод ОписаниеРазделаЗарплата(): ОсновнойИнтерфейс.ОписаниеРаздела
    возврат новый ОсновнойИнтерфейс.ОписаниеРаздела(
        Ид = Зарплата.ИД_РАЗДЕЛА_ЗАРПЛАТА,
        Имя = Зарплата.ИМЯ_РАЗДЕЛА_ЗАРПЛАТА,
        Пиктограмма = НавигацияЗарплата.Изображение,
        ЦветПиктограммы = БиблиотекаЦветов.ВидыЦвета.Болотный,
        НавигационнаяКомандаРаздела = НавигацияЗарплата,
        ШиринаДляПанелиНавигации = 152)
;

метод ОписаниеВиджета(): ОсновнойИнтерфейс.ОписаниеВиджета
    возврат новый ОсновнойИнтерфейс.ОписаниеВиджета(
        Ид = Зарплата.ИД_РАЗДЕЛА_ЗАРПЛАТА,
        ИдРаздела = Зарплата.ИД_РАЗДЕЛА_ЗАРПЛАТА,
        Имя = Зарплата.ИМЯ_РАЗДЕЛА_ЗАРПЛАТА,
        Компонент = новый ВиджетЗарплатаСодержимое())
;
