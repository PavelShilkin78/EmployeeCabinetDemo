импорт ВебApi
импорт Компания
импорт ОбщиеСтандартные
импорт Документы
импорт ФизическиеЛица
импорт ВладельцыКабинетов
импорт КонтрольДоступа
импорт УниверсальныеМеханизмы

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ЧтениеАутентифицированным(этот),
            КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот)]
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ЗарплатаСотрудников.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ЗарплатаСотрудников.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ЗарплатаСотрудников.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПоПолномочиям(
            [Зарплата.ПолномочиеПросмотрЗарплаты()],
            Элемент.ФизическоеЛицо
        ))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПерсонально([Элемент.ФизическоеЛицо]))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

//КонецОбласти

//Область JSON

@ВПодсистеме
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<ДанныеJson>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<ДанныеJson>
    ;
;

@ВПодсистеме
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Массив<ДанныеJson>>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Массив<ДанныеJson>>
    ;
;

@ВПроекте
структура ДанныеJson
    обз знч personID: Строка
    обз знч month: ДатаВремя
    обз знч isFirstHalf: Булево?
    обз знч components: ЧитаемыйМассив<СоставнаяЧастьЗарплатыJson>?
    обз знч documentsToBeSigned:  Массив<ДокументыНаПодпись.ДокументНаПодпись>?
    обз знч attachment: МенеджерФайлов.ДанныеФайлаJson?
;

@ВПодсистеме
структура СоставнаяЧастьЗарплатыJson
    обз знч employerID: Строка
    обз знч employeeID: Строка
    обз знч componentID: Строка
    обз знч amount: Число?
    обз знч workplace: Строка?
;

@ВПодсистеме
метод ТипОбъектаJson(): Строка
    возврат "payslips"
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)

    знч СтрокиЗарплаты: Массив<Справочник.Объект>
    пер Организация: Организации.Ссылка?
    знч ВнешниеСсылки: Множество<ВебApiСервер.ВнешняяСсылка>
    ВнешниеСсылки.Добавить(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID))
    если ДанныеJson.components != Неопределено
        и не ДанныеJson.components.Пусто()

        для ДанныеСтрокиJson из ДанныеJson.components
            ВнешниеСсылки.Добавить(Сотрудники.ВнешняяСсылка(ДанныеСтрокиJson.employeeID))
            ВнешниеСсылки.Добавить(Организации.ВнешняяСсылка(ДанныеСтрокиJson.employerID))
            ВнешниеСсылки.Добавить(СоставныеЧастиЗарплаты.ВнешняяСсылка(ДанныеСтрокиJson.componentID))
        ;
        Сервисы.ПолучитьСсылки(ВнешниеСсылки)
        Организация = Сервисы.ПолучитьСсылку(Организации.ВнешняяСсылка(ДанныеJson.components[0].employerID)) как Организации.Ссылка
    ;
    
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID)) как ФизическиеЛица.Ссылка
    пер Месяц: Дата = ДанныеJson.month.Дата
    пер ПерваяПоловинаМесяца: Булево = ДанныеJson.isFirstHalf ?? Ложь
    знч Ключ: Соответствие<Строка, Объект>
    Ключ.Вставить("ФизическоеЛицо", ФизическоеЛицо)
    Ключ.Вставить("Организация", Организация)
    Ключ.Вставить("Месяц", Месяц)
    Ключ.Вставить("ПерваяПоловинаМесяца", ПерваяПоловинаМесяца)

    знч ДанныеЛиста = новый РасчетныеЛисты.ДанныеРасчетногоЛиста(ФизическоеЛицо, Месяц, ПерваяПоловинаМесяца)
    исп Транзакции.Начать() 

    знч РасчетныйЛист: РасчетныеЛисты.Объект = РасчетныйЛист(ДанныеЛиста, Истина)
    пер Записывать: Булево
    если РасчетныйЛист.ЭтоНовый()
        Записывать = Истина
    ;

    если ДанныеJson.components != Неопределено
        для ДанныеСтрокиJson из ДанныеJson.components
            знч СтрокаЗарплаты = новый ЗарплатаСотрудников.Объект()
            СтрокаЗарплаты.Месяц = ДанныеJson.month.Дата.НачалоМесяца()
            СтрокаЗарплаты.ФизическоеЛицо = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID)) как ФизическиеЛица.Ссылка
            СтрокаЗарплаты.ПерваяПоловинаМесяца = ДанныеJson.isFirstHalf ?? Ложь
            СтрокаЗарплаты.Сотрудник = Сервисы.ПолучитьСсылку(Сотрудники.ВнешняяСсылка(ДанныеСтрокиJson.employeeID)) как Сотрудники.Ссылка
            СтрокаЗарплаты.Организация = Сервисы.ПолучитьСсылку(Организации.ВнешняяСсылка(ДанныеСтрокиJson.employerID)) как Организации.Ссылка
            СтрокаЗарплаты.СоставнаяЧасть = Сервисы.ПолучитьСсылку(СоставныеЧастиЗарплаты.ВнешняяСсылка(ДанныеСтрокиJson.componentID)) как СоставныеЧастиЗарплаты.Ссылка
            СтрокаЗарплаты.Сумма = ДанныеСтрокиJson.amount ?? 0
            СтрокаЗарплаты.ПредставлениеРабочегоМеста = ДанныеСтрокиJson.workplace ?? ""
            СтрокаЗарплаты.РасчетныйЛист = РасчетныйЛист.Ссылка
            СтрокиЗарплаты.Добавить(СтрокаЗарплаты)
        ;
    ;

    пер ПрежниеРасчетныеЛистыНаПодпись = РасчетныйЛист.РасчетныеЛистыНаПодпись.ПодМассив(0)
    если ДанныеJson.documentsToBeSigned != Неопределено
        для ДанныеДокументаНаПодпись из ДанныеJson.documentsToBeSigned
            пер РасчетныйЛистНаПодпись = Сервисы.ПолучитьСсылку(
                ДокументыНаПодпись.ВнешняяСсылка(ДанныеДокументаНаПодпись.Ид)) как ДокументыНаПодпись.Ссылка
            если ПрежниеРасчетныеЛистыНаПодпись.Содержит(РасчетныйЛистНаПодпись)
                ПрежниеРасчетныеЛистыНаПодпись.УдалитьПоИндексу(ПрежниеРасчетныеЛистыНаПодпись.Найти(РасчетныйЛистНаПодпись))
            иначе
                РасчетныйЛист.РасчетныеЛистыНаПодпись.Добавить(РасчетныйЛистНаПодпись)
            ;
        ;
        Записывать = Истина
    иначе если ДанныеJson.attachment != Неопределено
        пер ВложениеДанныеJson = новый МенеджерФайлов.ДанныеФайлаJson(ДанныеJson.attachment.fileID,
            ДанныеJson.attachment.name, "")
        ВложениеДанныеJson.extension = ДанныеJson.attachment.extension
        ВложениеДанныеJson.size = ДанныеJson.attachment.size
        ВложениеДанныеJson.electronicDocumentID = ДанныеJson.attachment.electronicDocumentID
        пер ДокументНаПодпись = новый ДокументыНаПодпись.Объект()
        пер Вложения = Файлы.ВложенияИзJson([ВложениеДанныеJson], Сервисы, ДокументНаПодпись.Ссылка)
        пер Файл = Вложения[0]
        Файл.ВидФайла = ВидыФайла.ЭлектронныйДокумент
        пер СвойстваДокумента = новый ДокументыНаПодпись.ДанныеДокументаНаПодпись()
        СвойстваДокумента.Организация = Организация
        СвойстваДокумента.Дата = РасчетныйЛист.ДатаПубликации
        СвойстваДокумента.Файл = Файл.Ссылка
        СвойстваДокумента.Наименование = Файл.Наименование
        СвойстваДокумента.ФизическиеЛица = [РасчетныйЛист.ФизическоеЛицо]
        СвойстваДокумента.Вложения = Вложения
        пер РасчетныйЛистНаПодпись = ДокументыНаПодпись.ЗаписатьДокумент(
            ДокументНаПодпись, СвойстваДокумента)
        РасчетныйЛист.РасчетныеЛистыНаПодпись.Добавить(РасчетныйЛистНаПодпись)
        Записывать = Истина
    ;
    // Удаление документов на подпись по организации прошлых версий расчетных листов
    если не ПрежниеРасчетныеЛистыНаПодпись.Пусто()
        пер РасчетныеЛистыНаПодписьДругихОрганизаций = новый Массив<ДокументыНаПодпись.Ссылка>()
        для ПрежнийРасчетныйЛистНаПодпись из ПрежниеРасчетныеЛистыНаПодпись 
            пер ОрганизацияПрежнегоДокумента =  МенеджерСущности.ЗначениеРеквизитаОбъекта(
                ПрежнийРасчетныйЛистНаПодпись, "Организация")
            если ОрганизацияПрежнегоДокумента != Неопределено и ОрганизацияПрежнегоДокумента != Организация
                РасчетныеЛистыНаПодписьДругихОрганизаций.Добавить(ПрежнийРасчетныйЛистНаПодпись)
            ;
        ;
        для РасчетныйЛистНаПодписьДругихОрганизаций из РасчетныеЛистыНаПодписьДругихОрганизаций
            ПрежниеРасчетныеЛистыНаПодпись.Удалить(РасчетныйЛистНаПодписьДругихОрганизаций)
        ; 
        для ПрежнийРасчетныйЛистНаПодпись из ПрежниеРасчетныеЛистыНаПодпись
            РасчетныйЛист.РасчетныеЛистыНаПодпись.Удалить(ПрежнийРасчетныйЛистНаПодпись)
            если МенеджерСущности.СсылкаСуществует(ПрежнийРасчетныйЛистНаПодпись)
                ПрежнийРасчетныйЛистНаПодпись.ЗагрузитьОбъект().Удалить()
            ;
        ;
    ;
    Сервисы.ЗаписатьКоллекцию(СтрокиЗарплаты, Ключ, Тип<ЗарплатаСотрудников.Ссылка>, Сервисы.ИнструментыМенеджераОбъекта)
    если Записывать
        РасчетныйЛист.Записать()
    ;
;

@ВПодсистеме
метод УдалитьОбъекты(ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>, Сервисы: ВебApiСервер.СервисыУдаленияОбъектов)
    знч Ключ = {
        "ФизическоеЛицо": Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ПараметрыЗапроса["personID"] как Строка)),
        "Месяц": Зарплата.ДатаИзМесяцаСтрокой(ПараметрыЗапроса["month"] как Строка)
    }
    Сервисы.УдалитьКоллекцию(Ключ, Тип<ЗарплатаСотрудников.Ссылка>)
;

метод РасчетныйЛист(ДанныеЛиста: РасчетныеЛисты.ДанныеРасчетногоЛиста, Заблокировать: Булево = Ложь): РасчетныеЛисты.Объект
    знч РасчетныйЛистСсылка = РасчетныеЛисты.НайтиРасчетныйЛист(ДанныеЛиста)
    если РасчетныйЛистСсылка != Неопределено
        возврат РасчетныйЛистСсылка!.ЗагрузитьОбъект(Заблокировать)!
    ;
    возврат РасчетныеЛисты.НовыйРасчетныйЛист(ДанныеЛиста)
;

@ВПодсистеме
метод ПослеЗаписиДополнение(ФизическоеЛицо: ФизическиеЛица.Ссылка?)
    ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(ФизическоеЛицо, Истина)
;

//КонецОбласти