импорт ВебApi
импорт Компания
импорт КонтрольДоступа
импорт ОбменДанными
импорт ОбщегоНазначения
импорт Компания::Согласования
импорт УниверсальныеМеханизмы
импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт ВладельцыКабинетов
импорт Уведомления
импорт УниверсальныеМеханизмы::ШаблоныДокументов

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ПолныйДоступАутентифицированным(этот)]
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ЗаявлениеНаУдержаниеДсвВПфр.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ЗаявлениеНаУдержаниеДсвВПфр.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ЗаявлениеНаУдержаниеДсвВПфр.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ЧтениеИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПоПолномочиям(
            [Зарплата.ПолномочиеПросмотрЗарплаты()],
            Элемент.ФизическоеЛицо
        ))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеРедактированиеУдалениеДанныхСправочниковПерсонально([Элемент.ФизическоеЛицо]))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

//КонецОбласти

// Контракт СостояниеДокументовПоставщик

@ВПроекте
@Реализация
метод ПослеЗаписиСостоянияДокумента(ТекущееЗначение: СостояниеДокументов.Объект, ПредыдущееЗначение: СостояниеДокументов.Данные, ПараметрыЗаписи: СостояниеДокументов.ПараметрыЗаписи)
    если ТекущееЗначение.Документ это ЗаявлениеНаУдержаниеДсвВПфр.Ссылка
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        ЗапланированныеЗадания.Создать(&ПослеИзмененияСостоянияДополнение,
            ТекущееЗначение.Документ как ЗаявлениеНаУдержаниеДсвВПфр.Ссылка, ТекущееЗначение.Состояние, ПредыдущееЗначение.Состояние)
            .Настроить(Ключ = МенеджерЗаданий.КлючЗаданияПоСсылке(ТекущееЗначение.Документ, "ИСД"))
            .ЗапланироватьВТранзакции()
    ;
;

@ВПроекте
@Реализация
метод ЗаполнитьКартинкиДокументов(ДанныеЗапросов: ЧитаемыйМассив<СостояниеДокументаКомпонентДанных>)
;

// Конец СостояниеДокументовПоставщик

структура ДанныеJson
    обз знч ID: Строка
    пер personID: Строка
    пер employerID: Строка
    пер calculationMethod: ПлановыеУдержания.МетодРасчетаJson?
    пер percentage: Число?
    пер amount: Число?
    пер note: Строка?
    пер version: Число?
    пер document: Файлы.ЭлектронныйДокументJson?
    пер attachments: Массив<МенеджерФайлов.ДанныеФайлаJson>
;

структура ДанныеJson_V1_0
    обз знч ID: Строка
    пер dateCreated: Дата?
    пер personID: Строка
    пер employerID: Строка
    пер calculationMethod: ПлановыеУдержания.МетодРасчетаJson?
    пер percentage: Число?
    пер amount: Число?
    пер note: Строка?
    пер version: Число?
    пер document: Файлы.ЭлектронныйДокументJson?
    пер attachments: Массив<МенеджерФайлов.ДанныеФайлаJson>
;

структура ДанныеJson_V2_0
    обз знч ID: Строка
    пер dateCreated: Дата?
    пер personID: Строка
    пер employerID: Строка
    пер calculationMethod: ПлановыеУдержания.МетодРасчетаJson?
    пер percentage: Число?
    пер amount: Число?
    пер note: Строка?
    пер version: Число?
    пер document: Файлы.ЭлектронныйДокументJson_V2_0?
    пер attachments: Массив<МенеджерФайлов.ДанныеФайлаJson>
;

структура ДанныеJson_V2_1
    обз знч ID: Строка
    пер dateCreated: Дата?
    пер personID: Строка
    пер employerID: Строка
    пер calculationMethod: ПлановыеУдержания.МетодРасчетаJson?
    пер percentage: Число?
    пер amount: Число?
    пер note: Строка?
    пер version: Число?
    пер document: Файлы.ЭлектронныйДокументJson_V2_1?
    пер attachments: Массив<МенеджерФайлов.ДанныеФайлаJson>
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"voluntaryInsuranceContributionsRequests": ДанныеЗаявленийВJson(Ссылки, Сервисы, ВерсияФорматаОбмена)}
;

метод ДанныеЗаявленийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<Объект?>
    знч Данные: Массив<Объект?>

    для КлючИЗначение из ДанныеЗаявленийНаУдержаниеДсвВПфр(Ссылки)
        если ВерсияФорматаОбмена == Неопределено
            Данные.Добавить(ДанныеЗаявленияНаУдержаниеДсвВПфр(КлючИЗначение.Значение, Сервисы))
        иначе если ВерсияФорматаОбмена >= Версия{2.1}
            Данные.Добавить(ДанныеЗаявленияНаУдержаниеДсвВПфр_V2_1(КлючИЗначение.Значение, Сервисы))
        иначе если ВерсияФорматаОбмена >= Версия{2.0}
            Данные.Добавить(ДанныеЗаявленияНаУдержаниеДсвВПфр_V2_0(КлючИЗначение.Значение, Сервисы))
        иначе если ВерсияФорматаОбмена >= Версия{1.0}
            Данные.Добавить(ДанныеЗаявленияНаУдержаниеДсвВПфр_V1_0(КлючИЗначение.Значение, Сервисы))
        ;
    ;
    возврат Данные
;

@ВПроекте
метод ПолучитьДанныеJson(Ссылка: ЗаявлениеНаУдержаниеДсвВПфр.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Объект?
    возврат ДанныеЗаявленийВJson([Ссылка], Сервисы, ВерсияФорматаОбмена)
;

метод  ДанныеЗаявленияНаУдержаниеДсвВПфр(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДанныеJson
    знч ДанныеВJson = новый ДанныеJson(
        (ДанныеОбъекта["Ссылка"] как ЗаявлениеНаУдержаниеДсвВПфр.Ссылка).Ид.ВСтроку())

    Сервисы.ПолучитьИдентификаторы([
        ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, 
        ДанныеОбъекта["Организация"] как Организации.Ссылка])

    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.employerID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Организация"] как Организации.Ссылка)  
    ДанныеВJson.calculationMethod = СпособРасчетаУдержанияДсвВПфрВJson()[ДанныеОбъекта["СпособРасчета"] как СпособыРасчетаУдержания]
    ДанныеВJson.percentage = ДанныеОбъекта["РазмерУдержанияПроцент"] как Число
    ДанныеВJson.amount = ДанныеОбъекта["РазмерУдержанияСумма"] как Число
    ДанныеВJson.note = ДанныеОбъекта["Комментарий"] как Строка
    
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson(ДанныеОбъекта["Ссылка"] как ЗаявлениеНаУдержаниеДсвВПфр.Ссылка, Ложь, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.attachments = ДанныеФайлов.Вложения
    ;

    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаУдержаниеДсвВПфр.Ссылка))
    ;

    возврат ДанныеВJson    
;

метод  ДанныеЗаявленияНаУдержаниеДсвВПфр_V1_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДанныеJson_V1_0
    знч ДанныеВJson = новый ДанныеJson_V1_0(
        (ДанныеОбъекта["Ссылка"] как ЗаявлениеНаУдержаниеДсвВПфр.Ссылка).Ид.ВСтроку())

    Сервисы.ПолучитьИдентификаторы([
        ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, 
        ДанныеОбъекта["Организация"] как Организации.Ссылка])

    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.employerID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Организация"] как Организации.Ссылка)  
    ДанныеВJson.calculationMethod = СпособРасчетаУдержанияДсвВПфрВJson()[ДанныеОбъекта["СпособРасчета"] как СпособыРасчетаУдержания]
    ДанныеВJson.percentage = ДанныеОбъекта["РазмерУдержанияПроцент"] как Число
    ДанныеВJson.amount = ДанныеОбъекта["РазмерУдержанияСумма"] как Число
    ДанныеВJson.note = ДанныеОбъекта["Комментарий"] как Строка
    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата?
    
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson(ДанныеОбъекта["Ссылка"] как ЗаявлениеНаУдержаниеДсвВПфр.Ссылка, Ложь, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.attachments = ДанныеФайлов.Вложения
    ;

    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаУдержаниеДсвВПфр.Ссылка))
    ;

    возврат ДанныеВJson
;

метод  ДанныеЗаявленияНаУдержаниеДсвВПфр_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДанныеJson_V2_0
    знч ДанныеВJson = новый ДанныеJson_V2_0(
        (ДанныеОбъекта["Ссылка"] как ЗаявлениеНаУдержаниеДсвВПфр.Ссылка).Ид.ВСтроку())

    Сервисы.ПолучитьИдентификаторы([
        ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, 
        ДанныеОбъекта["Организация"] как Организации.Ссылка])

    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.employerID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Организация"] как Организации.Ссылка)  
    ДанныеВJson.calculationMethod = СпособРасчетаУдержанияДсвВПфрВJson()[ДанныеОбъекта["СпособРасчета"] как СпособыРасчетаУдержания]
    ДанныеВJson.percentage = ДанныеОбъекта["РазмерУдержанияПроцент"] как Число
    ДанныеВJson.amount = ДанныеОбъекта["РазмерУдержанияСумма"] как Число
    ДанныеВJson.note = ДанныеОбъекта["Комментарий"] как Строка
    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата?
    
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_0(ДанныеОбъекта["Ссылка"] как ЗаявлениеНаУдержаниеДсвВПфр.Ссылка, Ложь, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.attachments = ДанныеФайлов.Вложения
    ;

    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаУдержаниеДсвВПфр.Ссылка))
    ;

    возврат ДанныеВJson
;

метод  ДанныеЗаявленияНаУдержаниеДсвВПфр_V2_1(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДанныеJson_V2_1
    знч ДанныеВJson = новый ДанныеJson_V2_1(
        (ДанныеОбъекта["Ссылка"] как ЗаявлениеНаУдержаниеДсвВПфр.Ссылка).Ид.ВСтроку())

    Сервисы.ПолучитьИдентификаторы([
        ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, 
        ДанныеОбъекта["Организация"] как Организации.Ссылка])

    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.employerID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Организация"] как Организации.Ссылка)  
    ДанныеВJson.calculationMethod = СпособРасчетаУдержанияДсвВПфрВJson()[ДанныеОбъекта["СпособРасчета"] как СпособыРасчетаУдержания]
    ДанныеВJson.percentage = ДанныеОбъекта["РазмерУдержанияПроцент"] как Число
    ДанныеВJson.amount = ДанныеОбъекта["РазмерУдержанияСумма"] как Число
    ДанныеВJson.note = ДанныеОбъекта["Комментарий"] как Строка
    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата?
    
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_1(ДанныеОбъекта["Ссылка"] как ЗаявлениеНаУдержаниеДсвВПфр.Ссылка, Ложь, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.attachments = ДанныеФайлов.Вложения
    ;

    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаУдержаниеДсвВПфр.Ссылка))
    ;

    возврат ДанныеВJson
;

метод ДанныеЗаявленийНаУдержаниеДсвВПфр(Заявления: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>):
        ЧитаемоеСоответствие<ЗаявлениеНаУдержаниеДсвВПфр.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>

    знч ДанныеЗаявлений: Соответствие<ЗаявлениеНаУдержаниеДсвВПфр.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч ЗаявленияЛюбыхТипов: Массив<ЗаявлениеНаУдержаниеДсвВПфр.Ссылка>
    для Заявление из Заявления
        ЗаявленияЛюбыхТипов.Добавить(Заявление как ЗаявлениеНаУдержаниеДсвВПфр.Ссылка)
    ;
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ФизическоеЛицо,
            Организация,
            Дата,
            СпособРасчета,
            РазмерУдержанияПроцент,
            РазмерУдержанияСумма,
            Комментарий
        Из
            ЗаявлениеНаУдержаниеДсвВПфр
        Где
            Ссылка В (%ЗаявленияЛюбыхТипов) 
            И ФизическоеЛицо != Неопределено
            И Организация != Неопределено}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        ДанныеЗаявлений.Вставить(РезультатСтрока.Ссылка,
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат))
    ;

    возврат ДанныеЗаявлений
;


метод СпособРасчетаУдержанияДсвВПфрВJson(): ЧитаемоеСоответствие<СпособыРасчетаУдержания, ПлановыеУдержания.МетодРасчетаJson>
    возврат {
        СпособыРасчетаУдержания.Процентом: ПлановыеУдержания.МетодРасчетаJson.percentage,
        СпособыРасчетаУдержания.Суммой: ПлановыеУдержания.МетодРасчетаJson.fixedAmount,
        СпособыРасчетаУдержания.ПроцентомНеБолееЗаданнойСуммы: ПлановыеУдержания.МетодРасчетаJson.percentageUpToAmount
    }
;

//КонецОбласти

@ВПодсистеме
метод ФизическиеЛицаДокументов(Документы: ЧитаемыйМассив<ЗаявлениеНаУдержаниеДсвВПфр.Ссылка>): ЧитаемоеСоответствие<ЗаявлениеНаУдержаниеДсвВПфр.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч ФизическиеЛицаДокументов: Соответствие<ЗаявлениеНаУдержаниеДсвВПфр.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ФизическоеЛицо
        ИЗ
            ЗаявлениеНаУдержаниеДсвВПфр
        ГДЕ
            Ссылка в (%Документы)   
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ФизическиеЛицаДокументов.Вставить(СтрокаРезультата.Ссылка, [СтрокаРезультата.ФизическоеЛицо])    
    ;
    возврат ФизическиеЛицаДокументов
;

@ВПодсистеме
метод УдалитьДокумент(Документ: ЗаявлениеНаУдержаниеДсвВПфр.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?, НепосредственныйРуководитель: ФизическиеЛица.Ссылка?)
    исп Транзакции.Начать()
    пер СписокПодписавших = СогласованияДокументов.СписокПодписавших(Документ)
    если не СписокПодписавших.Пусто()
        выбросить новый Согласования.ИсключениеДокументУжеПодписан("Документ уже подписан", Документ)
    ;
    СостДокументов.УдалитьСостояниеДокумента(Документ)
    Документ.ЗагрузитьОбъект().Удалить()

    ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(ФизическоеЛицо, Истина)
    если НепосредственныйРуководитель == Неопределено
        НепосредственныйРуководитель = ОрганизационнаяСтруктура.НепосредственныйРуководительФизическогоЛица(ФизическоеЛицо)
    ;
    ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(НепосредственныйРуководитель, Истина)
;

@ВПодсистеме
метод ПредставлениеДокумента(): Строка
    возврат "Заявление на добровольные страховые взносы"
;

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: ЗаявлениеНаУдержаниеДсвВПфр.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?, ТребуетсяРегистрацияИзменений: Булево)

    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, ФизическоеЛицо)
    ;
    
    пер Состояние = СостДокументов.СостояниеДокумента(Ссылка)
    если Состояние == СостоянияДокумента.Выполнен
        СформироватьДвижения(Состояние, ФизическоеЛицо)  
    ;
    ОбщегоНазначения.ПослеЗаписиОбъектаСЭлектоннымиДокументамиПредставлений(Ссылка, ТребуетсяРегистрацияИзменений)
;

метод ПослеИзмененияСостоянияДополнение(Документ: ЗаявлениеНаУдержаниеДсвВПфр.Ссылка, Состояние: СостоянияДокумента, ПрежнееСостояние: СостоянияДокумента?)
    пер РеквизитыДокумента: ЧитаемоеСоответствие<Строка, Объект?> = МенеджерСущности.ЗначенияРеквизитовОбъекта(
        Документ, <Строка>["Ссылка", "ФизическоеЛицо", "Организация", "Дата", "СпособРасчета", "РазмерУдержанияПроцент",
            "РазмерУдержанияСумма", "ПредставлениеДокумента"])
    
    знч ФизическоеЛицо: ФизическиеЛица.Ссылка = РеквизитыДокумента["ФизическоеЛицо"] как ФизическиеЛица.Ссылка
    ОбщегоНазначения.ПослеИзмененияСотоянияЗаявки(Документ, Состояние, ФизическоеЛицо)

    ОтправитьУведомлениеПриИзмененииСостояния(РеквизитыДокумента, Состояние)
;

метод ОтправитьУведомлениеПриИзмененииСостояния(РеквизитыДокумента: ЧитаемоеСоответствие<Строка, Объект?>, Состояние: СостоянияДокумента)
    пер Тема = "Подача заявления на добровольные страховые взносы"
    пер ТекстСообщения: Строка
    
    выбор Состояние
    когда СостоянияДокумента.Выполнен
        ТекстСообщения = "Принято заявление на добровольные страховые взносы"
    когда СостоянияДокумента.ПолученОтказ
        ТекстСообщения = "Отклонено заявление на добровольные страховые взносы"
    ;
    если не ТекстСообщения.Пусто()
        пер ДанныеУведомления = новый УведомленияСервер.ДанныеУведомления(Уведомления.ВидыУведомлений.ПерсональнаяИнформация, РеквизитыДокумента["Ссылка"] как Справочник.Ссылка) 
        пер ТекстыУведомлений = новый УведомленияСервер.ТекстыСообщений(Тема, ТекстСообщения, ТекстСообщения, ТекстСообщения)
        УведомленияСервер.ОтправитьУведомление(РеквизитыДокумента["ФизическоеЛицо"] как ФизическиеЛица.Ссылка?, ТекстыУведомлений, ДанныеУведомления)
    ;
;


метод СформироватьДвижения(Состояние: СостоянияДокумента, ФизическоеЛицо: ФизическиеЛица.Ссылка?)
    // Обновление измененных данных.
    если Состояние == СостоянияДокумента.Выполнен или Состояние == СостоянияДокумента.ПолученОтказ
        ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(ФизическоеЛицо, Истина)
    ;
    если Состояние != СостоянияДокумента.Черновик
        пер Руководитель = ОрганизационнаяСтруктура.НепосредственныйРуководительФизическогоЛица(ФизическоеЛицо)
        ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(Руководитель, Истина)
    ;
;

@ВПодсистеме
метод ПослеПодписания(Документ: ЗаявлениеНаУдержаниеДсвВПфр.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего)
    если ДанныеСогласующего.Роль == Согласования.РольПодписантаИсполнитель()
        СостДокументов.УстановитьСостояниеДокумента(Документ, СостоянияДокумента.Выполнен)
        возврат
    ;
    
    знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Документ, "ФизическоеЛицо")
    
    исп Транзакции.Начать()
    ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Документ, Истина)
    РегистрацияИзменений.ЗарегистрироватьИзменение(Документ, ФизическоеЛицо)
    СогласованияДокументов.ЗарегистрироватьПодписиОтправляемогоДокумента(Документ, Истина)
;

@ВПодсистеме
метод ПодписываемыйФайлаДокумента(Документ: ЗаявлениеНаУдержаниеДсвВПфр.Ссылка): Файлы.Ссылка?
    возврат Файлы.ЭлектронныйДокументОбъекта(Документ)    
;

@ВПодсистеме
метод ОрганизацияДокумента(Документ: ЗаявлениеНаУдержаниеДсвВПфр.Ссылка): Организации.Ссылка?
    знч Запрос = Запрос{
        Выбрать Первые 1
            Организация
        Из
            ЗаявлениеНаУдержаниеДсвВПфр
        Где
            Ссылка == %Документ
    }
    исп Результат = Запрос.Выполнить()
    возврат Результат.ЕдинственныйИлиУмолчание().Организация
;

@ВПроекте
метод ПредставленияИдентификаторовЭлектронныхДокументов(ДокументСсылка: ЗаявлениеНаУдержаниеДсвВПфр.Ссылка): Соответствие<Строка, Строка>
    пер ПредставленияДокументов = новый Соответствие<Строка, Строка>()
    ПредставленияДокументов.Вставить("", "")
    возврат ПредставленияДокументов
;

метод ДанныеЗаявленияНаУдержаниеДсвВПфр(ЗапросСправки: ЗаявлениеНаУдержаниеДсвВПфр.Ссылка): ЧитаемоеСоответствие<Строка, Объект?>
    возврат ДанныеЗаявленийНаУдержаниеДсвВПфр([ЗапросСправки])[ЗапросСправки]
;

@ВПодсистеме
метод ДанныеДокументаДляПечатнойФормы(ДокументСсылка: Объект): Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>
    
    пер ДанныеДокумента = новый Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>()
    знч ДанныеЗаявления = ДанныеЗаявленияНаУдержаниеДсвВПфр(ДокументСсылка как ЗаявлениеНаУдержаниеДсвВПфр.Ссылка)
    если не ДанныеЗаявления.Пусто()
        пер ПоставляемыеДанные = ПредставленияДокументов.ДанныеПредставленияДокумента(ДанныеЗаявления)
        ДанныеДокумента.Вставить("", новый ШаблоныДокументовМенеджер.ДанныеПечатныхФорм(Данные = ПоставляемыеДанные))
    ;
    ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента)
    возврат ДанныеДокумента 
;

@ВПодсистеме
метод ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента: Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>)
    для ДанныеИдентификатора из ДанныеДокумента
        пер ПоставляемыеДанные = ДанныеИдентификатора.Значение.Данные
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаНаименование", "Заявление")
        пер Текст: Строка
        
        пер РазмерУдержания = ""
        если (ПоставляемыеДанные["ДанныеДокументаСпособРасчета"] как СпособыРасчетаУдержания) == СпособыРасчетаУдержания.Суммой
            РазмерУдержания = (ПоставляемыеДанные["ДанныеДокументаРазмерУдержанияСумма"] как Число).ВСтроку()
            РазмерУдержания = "%РазмерУдержания рублей"
        иначе если (ПоставляемыеДанные["ДанныеДокументаСпособРасчета"] как СпособыРасчетаУдержания) == СпособыРасчетаУдержания.Процентом
            или (ПоставляемыеДанные["ДанныеДокументаСпособРасчета"] как СпособыРасчетаУдержания) == СпособыРасчетаУдержания.ПроцентомНеБолееЗаданнойСуммы
            РазмерУдержания = (ПоставляемыеДанные["ДанныеДокументаРазмерУдержанияПроцент"] как Число).ВСтроку()
            РазмерУдержания = "%РазмерУдержания \%"
            если (ПоставляемыеДанные["ДанныеДокументаСпособРасчета"] как СпособыРасчетаУдержания) == СпособыРасчетаУдержания.ПроцентомНеБолееЗаданнойСуммы
                знч ПределУдержания = (ПоставляемыеДанные["ДанныеДокументаРазмерУдержанияСумма"] как Число).ВСтроку()
                РазмерУдержания = "%РазмерУдержания (но не более %ПределУдержания рублей)"
            ;
        ;
        Текст = "Прошу производить удержание добровольных страховых взносов в ПФР в размере %РазмерУдержания"
        
        Текст = ПредставленияДокументов.ТекстДокументаДополненныйКомментарием(Текст, ПоставляемыеДанные["ДанныеДокументаКомментарий"] как Строка)
        
        знч ОписаниеВложений = ПрисоединенныеФайлыМенеджер.ТекстОписанияПриложенныхФайлов(ПоставляемыеДанные["ДанныеДокументаСсылка"] как ЗаявлениеНаУдержаниеДсвВПфр.Ссылка)
        ПоставляемыеДанные.Вставить("ДанныеДокументаВложения", ОписаниеВложений)
        Текст = ПрисоединенныеФайлыМенеджер.ТекстCОписаниемПриложенныхФайлов(Текст, ОписаниеВложений)
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаТекст", Текст)
            
    ;
;

@ВПодсистеме
метод ДанныеДокументаДляПодготовкиОписаний(СсылкаНаДокумент: Сущность.Ключ): Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>
    
    пер ДанныеДокумента = новый Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>()
    знч ДанныеЗаявления = ДанныеЗаявленияНаУдержаниеДсвВПфр(СсылкаНаДокумент как ЗаявлениеНаУдержаниеДсвВПфр.Ссылка)
    ДанныеДокумента.Вставить("",
        новый Согласования.ДанныеДляПодготовкиОписания(
            ДанныеЗаявления["Организация"] как Организации.Ссылка,
            ДанныеЗаявления["Дата"] как Дата,
            "Заявление на удержание ДСВ в СФР"
        )
    )
    возврат ДанныеДокумента
;
