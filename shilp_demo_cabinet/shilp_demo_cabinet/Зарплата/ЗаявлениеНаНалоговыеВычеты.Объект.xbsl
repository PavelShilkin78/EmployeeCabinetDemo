импорт ОбщиеСтандартные
импорт ВладельцыКабинетов
импорт Компания
импорт КонтрольДоступа
импорт ОбменДанными
импорт Компания::Согласования
импорт Криптография

//Область ОбработчикиСобытий

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПриЗаполнении()
    ФизическоеЛицо = ПользователиСистемы.ТекущееФизическоеЛицо()
    если ФизическоеЛицо == Неопределено
        возврат
    ;
    пер ЧасовойПояс: ЧасовойПояс = ВладельцыКабинетов.ЧасовойПоясФизическогоЛица(ФизическоеЛицо)    
    МоментСоздания = Момент.Сейчас()
    Дата = Дата.Сейчас(ЧасовойПояс)
    Организация = Сотрудники.ОрганизацияФизическогоЛицаПоОсновномуМестуРаботы(ФизическоеЛицо, Истина)
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередЗаписью(ПредыдущееЗначение: ЗаявлениеНаНалоговыеВычеты.Данные, ПараметрыЗаписи: ЗаявлениеНаНалоговыеВычеты.ПараметрыЗаписи)
    ВычетыПоУведомлениям = ВычетыНаНедвижимость или ВычетыНаЛечение или ВычетыНаОбучение
    ЗаполнитьПредставление()
    ЗаполнитьМесяцСоздания()
    ЗаполнитьМесяцПрименения()
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПослеЗаписи(ПредыдущееЗначение: ЗаявлениеНаНалоговыеВычеты.Данные, ПараметрыЗаписи: ЗаявлениеНаНалоговыеВычеты.ПараметрыЗаписи)
    исп КонтекстДоступа.Привилегированный()
    пер ТребуетсяРегистрацияИзменений = РегистрацияИзменений.ТребуетсяРегистрацияИзмененийОбъекта(этот, ПредыдущееЗначение)
    ЗаявлениеНаНалоговыеВычеты.ПослеЗаписиДополнение(Ссылка, ФизическоеЛицо, ТребуетсяРегистрацияИзменений)
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередУдалением(ПараметрыУдаления: ЗаявлениеНаНалоговыеВычеты.ПараметрыУдаления)
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<СогласованияДокументов>, "Документ")
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<ПодписиДокументов>, "Документ")
;

//КонецОбласти

//Область СлужебныеПроцедурыИФункции

метод ЗаполнитьПредставление()

    если не ПредставлениеДокумента.Пусто()
        возврат
    ;
    
    пер ТипВычета: Строка
    если ВычетыНаДетей и не ЛичныйВычет и не ВычетыПоУведомлениям
        ТипВычета = "На детей" 
    иначе если не ВычетыНаДетей и ЛичныйВычет и не ВычетыПоУведомлениям
        ТипВычета = "На себя"
    иначе если не ВычетыНаДетей и не ЛичныйВычет и ВычетыПоУведомлениям
        если ВычетыНаНедвижимость
            ТипВычета = "Уведомление из налоговой (недвижимость)"
        иначе если ВычетыНаЛечение
            ТипВычета = "Уведомление из налоговой (лечение)"
        иначе
            ТипВычета = "Уведомление из налоговой (обучение)"
        ;
    иначе
        ТипВычета = "Несколько вычетов"
    ;

    ПредставлениеДокумента = ТипВычета
    
    если МесяцПрименения != Неопределено
        ПредставлениеДокумента = ТипВычета + ", " + МенеджерДат.ФорматДаты(МесяцПрименения, "ММММ гггг").ВНижнийРегистр()
    ;
    
;

метод ЗаполнитьМесяцПрименения()
    МесяцПрименения = Дата.НачалоГода()
    пер ДатаПриема: Дата? = Сотрудники.НаименьшаяДатаПриемаРаботающихСотрудниковФизическогоЛица(
        ФизическоеЛицо, Организация)
    если ДатаПриема == Неопределено
        возврат
    ; 
    если ДатаПриема > МесяцПрименения
        МесяцПрименения = ДатаПриема.НачалоГода()
    ;
;

метод ЗаполнитьМесяцСоздания()
    МесяцСоздания = Дата.НачалоМесяца()
;

//КонецОбласти
