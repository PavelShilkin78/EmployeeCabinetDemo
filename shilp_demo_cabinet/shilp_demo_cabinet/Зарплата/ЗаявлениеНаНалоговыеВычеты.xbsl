импорт ИнтерфейсныеКомпонентыСтандартные
импорт ВебApi
импорт Компания
импорт КонтрольДоступа
импорт ОбменДанными
импорт ОбщегоНазначения
импорт Компания::Согласования
импорт УниверсальныеМеханизмы
импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт Уведомления
импорт УниверсальныеМеханизмы::ШаблоныДокументов

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ЧтениеИРедактированиеАутентифицированным(этот)]    
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ЗаявлениеНаНалоговыеВычеты.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ЗаявлениеНаНалоговыеВычеты.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ЗаявлениеНаНалоговыеВычеты.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ЧтениеИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПоПолномочиям(
            [Зарплата.ПолномочиеПросмотрНдфл()],
            Элемент.ФизическоеЛицо
        ))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеРедактированиеДанныхСправочниковПерсонально([Элемент.ФизическоеЛицо]))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

//КонецОбласти

// Контракт СостояниеДокументовПоставщик

@ВПроекте
@Реализация
метод ПослеЗаписиСостоянияДокумента(ТекущееЗначение: СостояниеДокументов.Объект, ПредыдущееЗначение: СостояниеДокументов.Данные, ПараметрыЗаписи: СостояниеДокументов.ПараметрыЗаписи)
    если ТекущееЗначение.Документ это ЗаявлениеНаНалоговыеВычеты.Ссылка
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        ЗапланированныеЗадания.Создать(&ПослеИзмененияСостоянияДополнение,
            ТекущееЗначение.Документ как ЗаявлениеНаНалоговыеВычеты.Ссылка, ТекущееЗначение.Состояние, ПредыдущееЗначение.Состояние)
            .Настроить(Ключ = МенеджерЗаданий.КлючЗаданияПоСсылке(ТекущееЗначение.Документ, "ИСД"))
            .ЗапланироватьВТранзакции()
    ;
;

@ВПроекте
@Реализация
метод ЗаполнитьКартинкиДокументов(ДанныеЗапросов: ЧитаемыйМассив<СостояниеДокументаКомпонентДанных>)
    пер Документы: Массив<ЗаявлениеНаНалоговыеВычеты.Ссылка>
    пер ВидыЗаявлений: Соответствие<ЗаявлениеНаНалоговыеВычеты.Ссылка, ВидыЗаявленийНаВычеты>
    для Элемент из ДанныеЗапросов
        пер Компонент: СостояниеДокументаКомпонентДанных = Элемент
        если Компонент.Документ это ЗаявлениеНаНалоговыеВычеты.Ссылка
            Документы.Добавить(Компонент.Документ как ЗаявлениеНаНалоговыеВычеты.Ссылка)
        ; 
    ;
    если не Документы.Пусто()
        знч Запрос = Запрос{
            Выбрать 
                Ссылка Как Документ, 
                ВычетыНаДетей, 
                ВычетыНаНедвижимость, 
                ВычетыНаЛечение, 
                ВычетыНаОбучение,
                ЛичныйВычет 
            Из ЗаявлениеНаНалоговыеВычеты Как ЗаявлениеНаНалоговыеВычеты
            Где Ссылка В (%Документы) И 
            (   ВычетыНаДетей Или
                ВычетыНаНедвижимость Или
                ВычетыНаЛечение Или
                ВычетыНаОбучение Или
                ЛичныйВычет)}
        исп Результат = Запрос.Выполнить()
        для РезультатСтрока из Результат
            пер Документ: ЗаявлениеНаНалоговыеВычеты.Ссылка = РезультатСтрока.Документ
            пер ВидЗаявления: ВидыЗаявленийНаВычеты?
            если РезультатСтрока.ВычетыНаДетей
                ВидЗаявления = ВидыЗаявленийНаВычеты.Дети
            иначе если РезультатСтрока.ВычетыНаНедвижимость
                ВидЗаявления = ВидыЗаявленийНаВычеты.Недвижимость
            иначе если РезультатСтрока.ВычетыНаЛечение
                ВидЗаявления = ВидыЗаявленийНаВычеты.Лечение
            иначе если РезультатСтрока.ВычетыНаОбучение
                ВидЗаявления = ВидыЗаявленийНаВычеты.Обучение
            иначе если РезультатСтрока.ЛичныйВычет
                ВидЗаявления = ВидыЗаявленийНаВычеты.НаСебя
            ;
            если ВидЗаявления != Неопределено 
                ВидыЗаявлений.Вставить(Документ, ВидЗаявления!)
            ;
        ;
    ;
    пер КартинкиВидовВычетов: ЧитаемоеСоответствие<ВидыЗаявленийНаВычеты, ДвоичныйОбъект.Ссылка> = КартинкиВидовВычетов()
    пер ЦветаВидовВычетов: ЧитаемоеСоответствие<ВидыЗаявленийНаВычеты, Цвет> = ЦветаВидовВычетов()
    пер КартинкиВидовУдержаний: ЧитаемоеСоответствие<Тип, ДвоичныйОбъект.Ссылка> = КартинкиВидовУдержаний()
    пер ЦветаВидовУдержаний: ЧитаемоеСоответствие<Тип, Цвет> = ЦветаВидовУдержаний()
    для Компонент из ДанныеЗапросов
        пер ТипЗапроса: Тип = (Компонент.Документ как неизвестно).ПолучитьТип()
        если ТипЗапроса.МожетБытьПрисвоенВ(Тип<ЗаявлениеНаНалоговыеВычеты.Ссылка>)
            пер Документ: ЗаявлениеНаНалоговыеВычеты.Ссылка = Компонент.Документ как ЗаявлениеНаНалоговыеВычеты.Ссылка
            если ВидыЗаявлений.СодержитКлюч(Документ)
                Компонент.Картинка = КартинкиВидовВычетов[ВидыЗаявлений[Документ]]
                Компонент.ЦветКартинки = ЦветаВидовВычетов[ВидыЗаявлений[Документ]]
            ;
        иначе если ТипЗапроса.МожетБытьПрисвоенВ(ТипыУдержаний())
            Компонент.Картинка = КартинкиВидовУдержаний[ТипЗапроса]
            Компонент.ЦветКартинки = ЦветаВидовУдержаний[ТипЗапроса]
        ;
    ;
;

// Конец СостояниеДокументовПоставщик

// Контракт ФайлыОбработчикСобытий

@ВПроекте
@Реализация
метод ПослеЗаписиФайла(Владелец: ВладелецФайлы.Ссылка, Файл: Файлы.Ссылка)
    если Владелец это ЗаявлениеНаНалоговыеВычеты.Ссылка
        знч Документ = Владелец как ЗаявлениеНаНалоговыеВычеты.Ссылка
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        ЗапланированныеЗадания.Создать(&ПослеЗаписиФайлаДополнение, Документ)
            .Настроить(Ключ = МенеджерЗаданий.КлючЗаданияПоСсылке(Документ, "ПЗФ"))
            .ЗапланироватьВТранзакции()
    ;
;

// Конец ФайлыОбработчикСобытий


//Область СлужебныйПрограммныйИнтерфейс

структура ДанныеJson
    обз знч ID: Строка
    пер personID: Строка
    пер employerID: Строка
    пер applyMonth: Дата
    пер dateCreated: Дата?
    пер personalDeduction: Булево
    пер realEstateTaxDeduction: Булево
    пер medicalTreatmentTaxDeduction: Булево
    пер educationTaxDeduction: Булево
    пер childTaxDeduction: Булево
    пер note: Строка
    пер childTaxDeductions: ЧитаемыйМассив<ЗаявлениеНаНалоговыеВычетыВычетыНаДетей.ДанныеJson>?
    пер taxAuthorityNotices: ЧитаемыйМассив<ЗаявлениеНаНалоговыеВычетыУведомленияНалоговой.ДанныеJson>?
    пер attachments: Массив<МенеджерФайлов.ДанныеФайлаJson>
    пер document: Файлы.ЭлектронныйДокументJson?
    пер version: Число?
;

структура ДанныеJson_V2_0
    обз знч ID: Строка
    пер personID: Строка
    пер employerID: Строка
    пер applyMonth: Дата
    пер dateCreated: Дата?
    пер personalDeduction: Булево
    пер realEstateTaxDeduction: Булево
    пер medicalTreatmentTaxDeduction: Булево
    пер educationTaxDeduction: Булево
    пер childTaxDeduction: Булево
    пер note: Строка
    пер childTaxDeductions: ЧитаемыйМассив<ЗаявлениеНаНалоговыеВычетыВычетыНаДетей.ДанныеJson>?
    пер taxAuthorityNotices: ЧитаемыйМассив<ЗаявлениеНаНалоговыеВычетыУведомленияНалоговой.ДанныеJson>?
    пер attachments: Массив<МенеджерФайлов.ДанныеФайлаJson>
    пер document: Файлы.ЭлектронныйДокументJson_V2_0?
    пер version: Число?
;

структура ДанныеJson_V2_1
    обз знч ID: Строка
    пер personID: Строка
    пер employerID: Строка
    пер applyMonth: Дата
    пер dateCreated: Дата?
    пер personalDeduction: Булево
    пер realEstateTaxDeduction: Булево
    пер medicalTreatmentTaxDeduction: Булево
    пер educationTaxDeduction: Булево
    пер childTaxDeduction: Булево
    пер note: Строка
    пер childTaxDeductions: ЧитаемыйМассив<ЗаявлениеНаНалоговыеВычетыВычетыНаДетей.ДанныеJson>?
    пер taxAuthorityNotices: ЧитаемыйМассив<ЗаявлениеНаНалоговыеВычетыУведомленияНалоговой.ДанныеJson>?
    пер attachments: Массив<МенеджерФайлов.ДанныеФайлаJson>
    пер document: Файлы.ЭлектронныйДокументJson_V2_1?
    пер version: Число?
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    
    возврат {"taxDeductionRequests": ДанныеЗаявленийВJson(Ссылки, Сервисы, ВерсияФорматаОбмена)}
;

метод ДанныеЗаявленийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ВерсияФорматаОбмена: Версия?): Массив<Объект?>
    
    если ВерсияФорматаОбмена != Неопределено и ВерсияФорматаОбмена >= Версия{2.1}
        возврат ДанныеЗаявленийВJson_V2_1(Ссылки, Сервисы)
    иначе если ВерсияФорматаОбмена >= Версия{2.0}
        возврат ДанныеЗаявленийВJson_V2_0(Ссылки, Сервисы)
    ;
    возврат ДанныеЗаявленийВJson_V1_0(Ссылки, Сервисы)
;

метод ДанныеЗаявленийВJson_V1_0(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево = Ложь): Массив<Объект?>
    знч ДанныеЗаявленийJson: Массив<Объект?>
    пер ЗаявленияСсылки: Массив<ЗаявлениеНаНалоговыеВычеты.Ссылка>
    для Ссылка из Ссылки
        ЗаявленияСсылки.Добавить(Ссылка как ЗаявлениеНаНалоговыеВычеты.Ссылка)
    ;
    пер ДанныеВычетовНаДетей: ЧитаемоеСоответствие<ЗаявлениеНаНалоговыеВычеты.Ссылка, Массив<ЧитаемоеСоответствие<Строка, Объект?>>>
        = ЗаявлениеНаНалоговыеВычетыВычетыНаДетей.ДанныеВычетовНаДетей(ЗаявленияСсылки)
    пер ДанныеУведомленийНалоговой: ЧитаемоеСоответствие<ЗаявлениеНаНалоговыеВычеты.Ссылка, Массив<ЧитаемоеСоответствие<Строка, Объект?>>>
        = ЗаявлениеНаНалоговыеВычетыУведомленияНалоговой.ДанныеУведомленийНалоговой(ЗаявленияСсылки)
    

    для КлючИЗначение из ДанныеЗаявленийНаНалоговыеВычеты(ЗаявленияСсылки)
        знч ДанныеВJson = ДанныеЗаявленийНаНалоговыеВычетыВJson(КлючИЗначение.Значение, Сервисы, ДляПредставления)
        если ДанныеВычетовНаДетей.СодержитКлюч(КлючИЗначение.Ключ)
            ДанныеВJson.childTaxDeductions
                = ЗаявлениеНаНалоговыеВычетыВычетыНаДетей.ДанныеВычетовНаДетейВJson(ДанныеВычетовНаДетей.Получить(КлючИЗначение.Ключ))
        ;
        если ДанныеУведомленийНалоговой.СодержитКлюч(КлючИЗначение.Ключ)
            ДанныеВJson.taxAuthorityNotices
                = ЗаявлениеНаНалоговыеВычетыУведомленияНалоговой.ДанныеУведомленийНалоговойВJson(ДанныеУведомленийНалоговой.Получить(КлючИЗначение.Ключ))
        ;
        ДанныеЗаявленийJson.Добавить(ДанныеВJson)
    ;
    возврат ДанныеЗаявленийJson
;

метод ДанныеЗаявленийВJson_V2_0(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево = Ложь): Массив<Объект?>
    знч ДанныеЗаявленийJson: Массив<Объект?>
    пер ЗаявленияСсылки: Массив<ЗаявлениеНаНалоговыеВычеты.Ссылка>
    для Ссылка из Ссылки
        ЗаявленияСсылки.Добавить(Ссылка как ЗаявлениеНаНалоговыеВычеты.Ссылка)
    ;
    пер ДанныеВычетовНаДетей: ЧитаемоеСоответствие<ЗаявлениеНаНалоговыеВычеты.Ссылка, Массив<ЧитаемоеСоответствие<Строка, Объект?>>>
        = ЗаявлениеНаНалоговыеВычетыВычетыНаДетей.ДанныеВычетовНаДетей(ЗаявленияСсылки)
    пер ДанныеУведомленийНалоговой: ЧитаемоеСоответствие<ЗаявлениеНаНалоговыеВычеты.Ссылка, Массив<ЧитаемоеСоответствие<Строка, Объект?>>>
        = ЗаявлениеНаНалоговыеВычетыУведомленияНалоговой.ДанныеУведомленийНалоговой(ЗаявленияСсылки)
    

    для КлючИЗначение из ДанныеЗаявленийНаНалоговыеВычеты(ЗаявленияСсылки)
        знч ДанныеВJson = ДанныеЗаявленийНаНалоговыеВычетыВJson_V2_0(КлючИЗначение.Значение, Сервисы, ДляПредставления)
        если ДанныеВычетовНаДетей.СодержитКлюч(КлючИЗначение.Ключ)
            ДанныеВJson.childTaxDeductions
                = ЗаявлениеНаНалоговыеВычетыВычетыНаДетей.ДанныеВычетовНаДетейВJson(ДанныеВычетовНаДетей.Получить(КлючИЗначение.Ключ))
        ;
        если ДанныеУведомленийНалоговой.СодержитКлюч(КлючИЗначение.Ключ)
            ДанныеВJson.taxAuthorityNotices
                = ЗаявлениеНаНалоговыеВычетыУведомленияНалоговой.ДанныеУведомленийНалоговойВJson(ДанныеУведомленийНалоговой.Получить(КлючИЗначение.Ключ))
        ;
        ДанныеЗаявленийJson.Добавить(ДанныеВJson)
    ;
    возврат ДанныеЗаявленийJson
;

метод ДанныеЗаявленийВJson_V2_1(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево = Ложь): Массив<Объект?>
    знч ДанныеЗаявленийJson: Массив<Объект?>
    пер ЗаявленияСсылки: Массив<ЗаявлениеНаНалоговыеВычеты.Ссылка>
    для Ссылка из Ссылки
        ЗаявленияСсылки.Добавить(Ссылка как ЗаявлениеНаНалоговыеВычеты.Ссылка)
    ;
    пер ДанныеВычетовНаДетей: ЧитаемоеСоответствие<ЗаявлениеНаНалоговыеВычеты.Ссылка, Массив<ЧитаемоеСоответствие<Строка, Объект?>>>
        = ЗаявлениеНаНалоговыеВычетыВычетыНаДетей.ДанныеВычетовНаДетей(ЗаявленияСсылки)
    пер ДанныеУведомленийНалоговой: ЧитаемоеСоответствие<ЗаявлениеНаНалоговыеВычеты.Ссылка, Массив<ЧитаемоеСоответствие<Строка, Объект?>>>
        = ЗаявлениеНаНалоговыеВычетыУведомленияНалоговой.ДанныеУведомленийНалоговой(ЗаявленияСсылки)
    

    для КлючИЗначение из ДанныеЗаявленийНаНалоговыеВычеты(ЗаявленияСсылки)
        знч ДанныеВJson = ДанныеЗаявленийНаНалоговыеВычетыВJson_V2_1(КлючИЗначение.Значение, Сервисы, ДляПредставления)
        если ДанныеВычетовНаДетей.СодержитКлюч(КлючИЗначение.Ключ)
            ДанныеВJson.childTaxDeductions
                = ЗаявлениеНаНалоговыеВычетыВычетыНаДетей.ДанныеВычетовНаДетейВJson(ДанныеВычетовНаДетей.Получить(КлючИЗначение.Ключ))
        ;
        если ДанныеУведомленийНалоговой.СодержитКлюч(КлючИЗначение.Ключ)
            ДанныеВJson.taxAuthorityNotices
                = ЗаявлениеНаНалоговыеВычетыУведомленияНалоговой.ДанныеУведомленийНалоговойВJson(ДанныеУведомленийНалоговой.Получить(КлючИЗначение.Ключ))
        ;
        ДанныеЗаявленийJson.Добавить(ДанныеВJson)
    ;
    возврат ДанныеЗаявленийJson
;

@ВПроекте
метод ПолучитьДанныеJson(Ссылка: ЗаявлениеНаНалоговыеВычеты.Ссылка, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Объект?
    возврат ГруппаИзмененийВJson([Ссылка], Сервисы, ВерсияФорматаОбмена)["taxDeductionRequests"]
;

метод ДанныеЗаявленийНаНалоговыеВычеты(
        Заявления: Массив<ЗаявлениеНаНалоговыеВычеты.Ссылка>): ЧитаемоеСоответствие<ЗаявлениеНаНалоговыеВычеты.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>

    знч ДанныеЗаявлений: Соответствие<ЗаявлениеНаНалоговыеВычеты.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Дата,
            ФизическоеЛицо,
            Организация,
            МесяцПрименения,
            ЛичныйВычет,
            ВычетыНаДетей,
            ВычетыПоУведомлениям,
            ВычетыНаНедвижимость,
            ВычетыНаЛечение,
            ВычетыНаОбучение,
            Комментарий
        Из
            ЗаявлениеНаНалоговыеВычеты
        Где
            Ссылка В (%Заявления) 
            И ФизическоеЛицо != Неопределено
            И Организация != Неопределено}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        ДанныеЗаявлений.Вставить(РезультатСтрока.Ссылка,
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат))
    ;

    возврат ДанныеЗаявлений
;

@ВПодсистеме
метод ПослеПодписания(Документ: ЗаявлениеНаНалоговыеВычеты.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего)
    если ДанныеСогласующего.Роль == Согласования.РольПодписантаИсполнитель()
        СостДокументов.УстановитьСостояниеДокумента(Документ, СостоянияДокумента.Выполнен)
        возврат
    ;
    
    знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Документ, "ФизическоеЛицо")
    
    исп Транзакции.Начать()
    ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Документ, Истина)
    РегистрацияИзменений.ЗарегистрироватьИзменение(Документ, ФизическоеЛицо)
    СогласованияДокументов.ЗарегистрироватьПодписиОтправляемогоДокумента(Документ, Истина)
;

//Область JSON

метод ДанныеЗаявленийНаНалоговыеВычетыВJson(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево): ДанныеJson

    знч ДанныеВJson = новый ДанныеJson(
        (ДанныеОбъекта["Ссылка"] как ЗаявлениеНаНалоговыеВычеты.Ссылка).Ид.ВСтроку())
    
    Сервисы.ПолучитьИдентификаторы([
        ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, 
        ДанныеОбъекта["Организация"] как Организации.Ссылка
    ])

    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.employerID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Организация"] как Организации.Ссылка)
    ДанныеВJson.applyMonth = ДанныеОбъекта["МесяцПрименения"] как Дата
    ДанныеВJson.personalDeduction = ДанныеОбъекта["ЛичныйВычет"] как Булево
    ДанныеВJson.realEstateTaxDeduction = ДанныеОбъекта["ВычетыНаНедвижимость"] как Булево
    ДанныеВJson.medicalTreatmentTaxDeduction = ДанныеОбъекта["ВычетыНаЛечение"] как Булево
    ДанныеВJson.educationTaxDeduction = ДанныеОбъекта["ВычетыНаОбучение"] как Булево
    ДанныеВJson.childTaxDeduction = ДанныеОбъекта["ВычетыНаДетей"] как Булево
    ДанныеВJson.note = ДанныеОбъекта["Комментарий"] как Строка
 
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson(
        ДанныеОбъекта["Ссылка"] как ЗаявлениеНаНалоговыеВычеты.Ссылка, ДляПредставления, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.attachments = ДанныеФайлов.Вложения
    ;
    
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаНалоговыеВычеты.Ссылка))
    ;

    возврат ДанныеВJson
;

метод ДанныеЗаявленийНаНалоговыеВычетыВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево): ДанныеJson_V2_0

    знч ДанныеВJson = новый ДанныеJson_V2_0(
        (ДанныеОбъекта["Ссылка"] как ЗаявлениеНаНалоговыеВычеты.Ссылка).Ид.ВСтроку())
    
    Сервисы.ПолучитьИдентификаторы([
        ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, 
        ДанныеОбъекта["Организация"] как Организации.Ссылка
    ])

    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.employerID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Организация"] как Организации.Ссылка)
    ДанныеВJson.applyMonth = ДанныеОбъекта["МесяцПрименения"] как Дата
    ДанныеВJson.personalDeduction = ДанныеОбъекта["ЛичныйВычет"] как Булево
    ДанныеВJson.realEstateTaxDeduction = ДанныеОбъекта["ВычетыНаНедвижимость"] как Булево
    ДанныеВJson.medicalTreatmentTaxDeduction = ДанныеОбъекта["ВычетыНаЛечение"] как Булево
    ДанныеВJson.educationTaxDeduction = ДанныеОбъекта["ВычетыНаОбучение"] как Булево
    ДанныеВJson.childTaxDeduction = ДанныеОбъекта["ВычетыНаДетей"] как Булево
    ДанныеВJson.note = ДанныеОбъекта["Комментарий"] как Строка
 
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_0(
        ДанныеОбъекта["Ссылка"] как ЗаявлениеНаНалоговыеВычеты.Ссылка, ДляПредставления, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.attachments = ДанныеФайлов.Вложения
    ;
    
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаНалоговыеВычеты.Ссылка))
    ;

    возврат ДанныеВJson
;

метод ДанныеЗаявленийНаНалоговыеВычетыВJson_V2_1(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево): ДанныеJson_V2_1

    знч ДанныеВJson = новый ДанныеJson_V2_1(
        (ДанныеОбъекта["Ссылка"] как ЗаявлениеНаНалоговыеВычеты.Ссылка).Ид.ВСтроку())
    
    Сервисы.ПолучитьИдентификаторы([
        ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, 
        ДанныеОбъекта["Организация"] как Организации.Ссылка
    ])

    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.employerID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Организация"] как Организации.Ссылка)
    ДанныеВJson.applyMonth = ДанныеОбъекта["МесяцПрименения"] как Дата
    ДанныеВJson.personalDeduction = ДанныеОбъекта["ЛичныйВычет"] как Булево
    ДанныеВJson.realEstateTaxDeduction = ДанныеОбъекта["ВычетыНаНедвижимость"] как Булево
    ДанныеВJson.medicalTreatmentTaxDeduction = ДанныеОбъекта["ВычетыНаЛечение"] как Булево
    ДанныеВJson.educationTaxDeduction = ДанныеОбъекта["ВычетыНаОбучение"] как Булево
    ДанныеВJson.childTaxDeduction = ДанныеОбъекта["ВычетыНаДетей"] как Булево
    ДанныеВJson.note = ДанныеОбъекта["Комментарий"] как Строка
 
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_1(
        ДанныеОбъекта["Ссылка"] как ЗаявлениеНаНалоговыеВычеты.Ссылка, ДляПредставления, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.attachments = ДанныеФайлов.Вложения
    ;
    
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаНалоговыеВычеты.Ссылка))
    ;

    возврат ДанныеВJson
;

//КонецОбласти

//КонецОбласти

//Область СлужебныеПроцедурыИФункции

@ВПодсистеме
метод ФизическиеЛицаДокументов(Документы: ЧитаемыйМассив<ЗаявлениеНаНалоговыеВычеты.Ссылка>): ЧитаемоеСоответствие<ЗаявлениеНаНалоговыеВычеты.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч ФизическиеЛицаДокументов: Соответствие<ЗаявлениеНаНалоговыеВычеты.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ФизическоеЛицо
        ИЗ
            ЗаявлениеНаНалоговыеВычеты
        ГДЕ
            Ссылка в (%Документы)   
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ФизическиеЛицаДокументов.Вставить(СтрокаРезультата.Ссылка, [СтрокаРезультата.ФизическоеЛицо])    
    ;
    возврат ФизическиеЛицаДокументов
;

метод ПослеИзмененияСостоянияДополнение(Документ: ЗаявлениеНаНалоговыеВычеты.Ссылка, Состояние: СостоянияДокумента, ПрежнееСостояние: СостоянияДокумента?)
    пер РеквизитыДокумента: ЧитаемоеСоответствие<Строка, неизвестно> = МенеджерСущности.ЗначенияРеквизитовОбъекта(
        Документ, ["Ссылка","ФизическоеЛицо", "ЛичныйВычет", "ВычетыНаДетей", "ВычетыПоУведомлениям", "ПредставлениеДокумента"])
    
    знч ФизическоеЛицо = РеквизитыДокумента["ФизическоеЛицо"] как ФизическиеЛица.Ссылка
    ОбщегоНазначения.ПослеИзмененияСотоянияЗаявки(Документ, Состояние, ФизическоеЛицо)
    
    ОтправитьУведомлениеПриИзмененииСостояния(РеквизитыДокумента, Состояние)
;

метод ОтправитьУведомлениеПриИзмененииСостояния(РеквизитыДокумента: ЧитаемоеСоответствие<Строка, неизвестно>, Состояние: СостоянияДокумента)
    пер Тема = "Подача заявления на вычеты"
    пер ТекстСообщения: Строка
    выбор Состояние
    когда СостоянияДокумента.Выполнен
        если РеквизитыДокумента["ЛичныйВычет"]
            ТекстСообщения = "Принято заявление на личный вычет"
        иначе если РеквизитыДокумента["ВычетыНаДетей"]
            ТекстСообщения = "Принято заявление на детские вычеты"
        иначе если РеквизитыДокумента["ВычетыПоУведомлениям"]
            ТекстСообщения = "Принято заявление на вычет %{РеквизитыДокумента["ПредставлениеДокумента"]}"
        ;
    когда СостоянияДокумента.ПолученОтказ
        если РеквизитыДокумента["ЛичныйВычет"]
            ТекстСообщения = "Отклонено заявление на личный вычет"
        иначе если РеквизитыДокумента["ВычетыНаДетей"]
            ТекстСообщения = "Отклонено заявление на детские вычеты"
        иначе если РеквизитыДокумента["ВычетыПоУведомлениям"]
            ТекстСообщения = "Отклонено заявление на вычет %{РеквизитыДокумента["ПредставлениеДокумента"]}"
        ;
    ;
    если не ТекстСообщения.Пусто()
        пер ДанныеУведомления = новый УведомленияСервер.ДанныеУведомления(Уведомления.ВидыУведомлений.ПерсональнаяИнформация, РеквизитыДокумента["Ссылка"]) 
        пер ТекстыУведомлений = новый УведомленияСервер.ТекстыСообщений(Тема, ТекстСообщения, ТекстСообщения, ТекстСообщения)
        УведомленияСервер.ОтправитьУведомление(РеквизитыДокумента["ФизическоеЛицо"], ТекстыУведомлений, ДанныеУведомления)
    ;
;

метод ПослеЗаписиФайлаДополнение(Документ: ЗаявлениеНаНалоговыеВычеты.Ссылка)
    знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Документ, "ФизическоеЛицо")
    РегистрацияИзменений.ЗарегистрироватьИзменение(Документ, ФизическоеЛицо)
;

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: ЗаявлениеНаНалоговыеВычеты.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?, ТребуетсяРегистрацияИзменений: Булево)

    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, ФизическоеЛицо)
    ;
    ОбщегоНазначения.ПослеЗаписиОбъектаСЭлектоннымиДокументамиПредставлений(Ссылка, ТребуетсяРегистрацияИзменений)
;

//КонецОбласти

@ВПодсистеме
метод ПодписываемыйФайлаДокумента(Документ: ЗаявлениеНаНалоговыеВычеты.Ссылка): Файлы.Ссылка?
    возврат Файлы.ЭлектронныйДокументОбъекта(Документ)    
;

@ВПодсистеме
метод ОрганизацияДокумента(Документ: ЗаявлениеНаНалоговыеВычеты.Ссылка): Организации.Ссылка?
    знч Запрос = Запрос{
        Выбрать Первые 1
            Организация
        Из
            ЗаявлениеНаНалоговыеВычеты
        Где
            Ссылка == %Документ
    }
    исп Результат = Запрос.Выполнить()
    возврат Результат.ЕдинственныйИлиУмолчание().Организация
;

@ВПроекте
метод ПредставленияИдентификаторовЭлектронныхДокументов(ДокументСсылка: ЗаявлениеНаНалоговыеВычеты.Ссылка): Соответствие<Строка, Строка>
    пер ПредставленияДокументов = новый Соответствие<Строка, Строка>()
    ПредставленияДокументов.Вставить("", "")
    возврат ПредставленияДокументов
;

метод ДанныеЗаявленияНаНалоговыеВычеты(ЗапросСправки: ЗаявлениеНаНалоговыеВычеты.Ссылка): ЧитаемоеСоответствие<Строка, Объект?>
    возврат ДанныеЗаявленийНаНалоговыеВычеты([ЗапросСправки])[ЗапросСправки]
;

метод ПредставлениеРебенкаДляЗаявления(ДанныеВычетовНаРебенка: ЧитаемоеСоответствие<Строка, Объект?>,
        ПараметрыФормирования: ПараметрыФормированияПредставленияРебенка, МесяцПрименения: Дата): Строка
        
    знч ФИОРебенка = ДанныеВычетовНаРебенка["ФИО"] как Строка
    пер Представление = "%ФИОРебенка"
    пер СтаршинствоРебенка = (ДанныеВычетовНаРебенка["СтаршинствоРебенка"] как СтаршинствоРебенка).Представление().ВНижнийРегистр()
    если ДанныеВычетовНаРебенка["РебенокИнвалид"] как Булево
        Представление = "%Представление (%СтаршинствоРебенка, ребенок-инвалид)"
    иначе
        Представление = "%Представление (%СтаршинствоРебенка ребенок)"
    ;
    знч ДатаРождения = МенеджерДат.ФорматДаты(ДанныеВычетовНаРебенка["ДатаРождения"] как Дата?, "д ММММ гггг")
    Представление = "%Представление, %ДатаРождения года рождения"
    если ПараметрыФормирования.ДетализироватьЕдинствоРодителя
        или ПараметрыФормирования.ДетализироватьОпекунство
        
        пер ПредставлениеРодительства = "родителем"
        если ДанныеВычетовНаРебенка["Опекун"] как Булево
            ПредставлениеРодительства = "опекуном"
        ;
        если ПараметрыФормирования.ДетализироватьЕдинствоРодителя
            и ДанныеВычетовНаРебенка["ЕдинственныйРодитель"] как Булево
            
            Представление = "%Представление, являюсь единственным %ПредставлениеРодительства"
        иначе если ПараметрыФормирования.ДетализироватьОпекунство
            Представление = "%Представление, являюсь %ПредставлениеРодительства"
        ;
    ;
    если ПараметрыФормирования.ДетализироватьДатуОкончанияПрименения
        знч Начало = МенеджерДат.ФорматДаты(МесяцПрименения, "ММММ гггг")
        знч Окончание = МенеджерДат.ФорматДаты(ДанныеВычетовНаРебенка["ДатаОкончанияПрименения"] как Дата, "ММММ гггг")
        знч ПериодПредоставленияВычетов = "с %Начало по %Окончание"
        Представление = "%Представление, вычет предоставлять %ПериодПредоставленияВычетов"
    ;
    возврат Представление
;

@Локально
структура ПараметрыФормированияПредставленияРебенка
    обз пер ДетализироватьЕдинствоРодителя: Булево
    обз пер ДетализироватьОпекунство: Булево
    обз пер ДетализироватьДатуОкончанияПрименения: Булево
;

метод ПараметрыФормированияПредставленияРебенкаДляЗаявления(ДанныеВычетовНаДетей: Массив<ЧитаемоеСоответствие<Строка, Объект?>>):
    ПараметрыФормированияПредставленияРебенка
    
    пер ДетализироватьЕдинствоРодителя: Булево
    пер ДетализироватьОпекунство: Булево
    пер ДетализироватьДатуОкончанияПрименения: Булево
    
    пер ЕдинственныйРодитель: Булево? = Неопределено
    пер Опекун: Булево? = Неопределено
    пер ДатаОкончанияПрименения: Дата? = Неопределено
    
     для ДанныеВычетовНаРебенка из ДанныеВычетовНаДетей
        если ДетализироватьЕдинствоРодителя и ДетализироватьОпекунство и ДетализироватьДатуОкончанияПрименения
            прервать
        ;
        если не ДетализироватьЕдинствоРодителя
            если ЕдинственныйРодитель == Неопределено
                ЕдинственныйРодитель = ДанныеВычетовНаРебенка["ЕдинственныйРодитель"] как  Булево
            иначе если ЕдинственныйРодитель != (ДанныеВычетовНаРебенка["ЕдинственныйРодитель"] как  Булево)
                ДетализироватьЕдинствоРодителя = Истина
            ;
        ;
        если не ДетализироватьОпекунство
            если Опекун == Неопределено
                Опекун = ДанныеВычетовНаРебенка["Опекун"] как  Булево
            иначе если Опекун != (ДанныеВычетовНаРебенка["Опекун"] как  Булево)
                ДетализироватьОпекунство = Истина
            ;
        ;
        если не ДетализироватьДатуОкончанияПрименения
            если ДатаОкончанияПрименения == Неопределено
                ДатаОкончанияПрименения = ДанныеВычетовНаРебенка["ДатаОкончанияПрименения"] как  Дата
            иначе если ДатаОкончанияПрименения != (ДанныеВычетовНаРебенка["ДатаОкончанияПрименения"] как  Дата)
                ДетализироватьДатуОкончанияПрименения = Истина
            ;
        ;
    ;
    возврат новый ПараметрыФормированияПредставленияРебенка(
        ДетализироватьЕдинствоРодителя, ДетализироватьОпекунство, ДетализироватьДатуОкончанияПрименения)
;

@ВПодсистеме
метод ДанныеДокументаДляПечатнойФормы(ДокументСсылка: Объект): Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>
    
    пер ДанныеДокумента = новый Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>()
    знч ДанныеЗаявления = ДанныеЗаявленияНаНалоговыеВычеты(ДокументСсылка как ЗаявлениеНаНалоговыеВычеты.Ссылка)
    если не ДанныеЗаявления.Пусто()
        пер ПоставляемыеДанные = ПредставленияДокументов.ДанныеПредставленияДокумента(ДанныеЗаявления)
        ДанныеДокумента.Вставить("", новый ШаблоныДокументовМенеджер.ДанныеПечатныхФорм(Данные = ПоставляемыеДанные))
    ;
    ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента)
    возврат ДанныеДокумента 
;

@ВПодсистеме
метод ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента: Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>)
    для ДанныеИдентификатора из ДанныеДокумента
        пер ПоставляемыеДанные = ДанныеИдентификатора.Значение.Данные
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаНаименование", "Заявление")
        пер Текст: Строка
        
        Текст = "Прошу предоставить"
        если ПоставляемыеДанные["ДанныеДокументаЛичныйВычет"] как Булево
            Текст = "%Текст стандартный налоговый вычет"
        иначе если ПоставляемыеДанные["ДанныеДокументаВычетыПоУведомлениям"] как Булево
            если ПоставляемыеДанные["ДанныеДокументаВычетыНаНедвижимость"] как Булево
                Текст = "%Текст имущественный налоговый вычет"
            иначе если ПоставляемыеДанные["ДанныеДокументаВычетыНаЛечение"] как Булево
                Текст = "%Текст социальный налоговый вычет на оплату лечения"
            иначе
                Текст = "%Текст социальный налоговый вычет на получение образования"
            ;
        иначе
            пер ДанныеВычетовНаДетей: Массив<ЧитаемоеСоответствие<Строка, Объект?>>?
                = ЗаявлениеНаНалоговыеВычетыВычетыНаДетей.ДанныеВычетовНаДетейЗаявления(ПоставляемыеДанные["ДанныеДокументаСсылка"] как ЗаявлениеНаНалоговыеВычеты.Ссылка)
            если ДанныеВычетовНаДетей == Неопределено
                Текст = "%Текст налоговый вычет на моего ребенка ..."
            иначе
                
                ПоставляемыеДанные.Вставить("ДанныеДокументаКоличествоДетей", ДанныеВычетовНаДетей.Размер())
                если ДанныеВычетовНаДетей.Размер() == 1
                    Текст = "%Текст налоговый вычет на моего ребенка:"
                иначе
                    Текст = "%Текст налоговые вычеты на моих детей:"
                ;
                
                знч ПараметрыФормирования = ПараметрыФормированияПредставленияРебенкаДляЗаявления(ДанныеВычетовНаДетей)
                ПоставляемыеДанные.Вставить("ДанныеДокументаРодствоВШапке", не ПараметрыФормирования.ДетализироватьЕдинствоРодителя
                    и не ПараметрыФормирования.ДетализироватьОпекунство)
                ПоставляемыеДанные.Вставить("ДанныеДокументаПериодПредоставленияВычетовВШапке", не ПараметрыФормирования.ДетализироватьДатуОкончанияПрименения)
                пер СчетчикДетей = 1
                пер Дети = новый Массив<ЧитаемоеСоответствие<Строка, Объект?>>()
                для ДанныеВычетовНаРебенка из ДанныеВычетовНаДетей
                    пер ДанныеСтрорки = новый Соответствие<Строка, Объект?>()
                    ДанныеСтрорки.Вставить("ДанныеДокументаДетиНомерСтроки", СчетчикДетей)
                    ДанныеСтрорки.Вставить("ДанныеДокументаДетиФИОПолные", ДанныеВычетовНаРебенка["ФИО"])
                    если не ПоставляемыеДанные.СодержитКлюч("ДанныеДокументаЕдинственныйРодитель") и ПоставляемыеДанные["ДанныеДокументаРодствоВШапке"] как Булево
                        ПоставляемыеДанные.Вставить("ДанныеДокументаЕдинственныйРодитель", ДанныеВычетовНаРебенка["ЕдинственныйРодитель"])
                        ПоставляемыеДанные.Вставить("ДанныеДокументаОпекун", ДанныеВычетовНаРебенка["Опекун"])
                    ;
                    
                    пер Начало = МенеджерДат.ФорматДаты(ПоставляемыеДанные["ДанныеДокументаМесяцПрименения"] как Дата, "ММММ гггг")
                    если (ПоставляемыеДанные["ДанныеДокументаМесяцПрименения"] как Дата) < (ДанныеВычетовНаРебенка["ДатаРождения"] как Дата)
                        Начало = МенеджерДат.ФорматДаты((ДанныеВычетовНаРебенка["ДатаРождения"] как Дата).НачалоМесяца(), "ММММ гггг")
                    ;
                    знч Окончание = МенеджерДат.ФорматДаты(ДанныеВычетовНаРебенка["ДатаОкончанияПрименения"] как Дата, "ММММ гггг")
                    знч ПериодПредоставленияВычетов = "с %Начало по %Окончание"
                    ДанныеСтрорки.Вставить("ПериодПредоставленияВычетов", ПериодПредоставленияВычетов)
                    
                    если не ПоставляемыеДанные.СодержитКлюч("ДанныеДокументаПериодПредоставленияВычетов") и ПоставляемыеДанные["ДанныеДокументаПериодПредоставленияВычетовВШапке"] как Булево
                        ПоставляемыеДанные.Вставить("ДанныеДокументаПериодПредоставленияВычетов", ДанныеСтрорки["ПериодПредоставленияВычетов"])
                    ;
                    
                    для ДаннеыРебенка из ДанныеВычетовНаРебенка
                        ДанныеСтрорки.Вставить("ДанныеДокументаДети%{ДаннеыРебенка.Ключ}", ДаннеыРебенка.Значение)
                    ;
                    Дети.Добавить(ДанныеСтрорки)
                    знч ПредставлениеРебенка = ПредставлениеРебенкаДляЗаявления(ДанныеВычетовНаРебенка, ПараметрыФормирования,
                        ПоставляемыеДанные["ДанныеДокументаМесяцПрименения"] как Дата)
                    если СчетчикДетей > 1
                        Текст = "%Текст;"
                    ;
                    если ДанныеВычетовНаДетей.Размер() == 1
                        Текст =
                            "%Текст
                                %ПредставлениеРебенка"
                    иначе
                        Текст =
                            "%Текст
                                %СчетчикДетей. %ПредставлениеРебенка"
                    ;
                    СчетчикДетей += 1
                ;
                если не ПараметрыФормирования.ДетализироватьЕдинствоРодителя
                    пер ПредставлениеРодительства = "родителем"
                    если ДанныеВычетовНаДетей[0]["Опекун"] как Булево
                        ПредставлениеРодительства = "опекуном"
                    ;
                    если не ПараметрыФормирования.ДетализироватьЕдинствоРодителя
                        и ДанныеВычетовНаДетей[0]["ЕдинственныйРодитель"] как Булево
                        
                        Текст = 
                            "%Текст.
                            Являюсь единственным %ПредставлениеРодительства."
                    иначе если не ПараметрыФормирования.ДетализироватьОпекунство
                        Текст = 
                            "%Текст.
                            Являюсь %ПредставлениеРодительства."
                    ;
                ;
                если не ПараметрыФормирования.ДетализироватьДатуОкончанияПрименения
                    пер ДатаНачала = Макс((ДанныеВычетовНаДетей[0]["ДатаРождения"] как Дата).НачалоМесяца(),
                        ПоставляемыеДанные["ДанныеДокументаМесяцПрименения"] как Дата)
                    пер ДатаОкончания = ДанныеВычетовНаДетей[0]["ДатаОкончанияПрименения"] как Дата
                    для ДанныеВычетовНаРебенка из ДанныеВычетовНаДетей
                        если ДатаНачала.Год == (ДанныеВычетовНаРебенка["ДатаРождения"] как Дата).Год
                            если ДатаНачала > (ДанныеВычетовНаРебенка["ДатаРождения"] как Дата)
                                ДатаНачала = (ДанныеВычетовНаРебенка["ДатаРождения"] как Дата).НачалоМесяца()
                            ;
                        иначе
                            ДатаНачала = ПоставляемыеДанные["ДанныеДокументаМесяцПрименения"] как Дата
                        ;
                        если ДатаОкончания < (ДанныеВычетовНаРебенка["ДатаОкончанияПрименения"] как Дата)
                            ДатаОкончания = ДанныеВычетовНаРебенка["ДатаОкончанияПрименения"] как Дата
                        ;
                    ;
                    пер Начало = МенеджерДат.ФорматДаты(ДатаНачала, "ММММ гггг")
                    пер Окончание = МенеджерДат.ФорматДаты(ДатаОкончания, "ММММ гггг")
                    знч ПериодПредоставленияВычетов = "с %Начало по %Окончание"
                    если ДанныеВычетовНаДетей.Размер() == 1
                        Текст = "%Текст. Вычет предоставлять %ПериодПредоставленияВычетов"
                    иначе
                        Текст = "%Текст. Вычеты предоставлять %ПериодПредоставленияВычетов"
                    ;
                    ПоставляемыеДанные.Вставить("Дети", Дети)
                    если ПоставляемыеДанные["ДанныеДокументаПериодПредоставленияВычетовВШапке"] как Булево
                        ПоставляемыеДанные.Вставить("ДанныеДокументаПериодПредоставленияВычетов", ПериодПредоставленияВычетов)
                    ;
                ;
            ;
        ;
        
        Текст = ПредставленияДокументов.ТекстДокументаДополненныйКомментарием(Текст, ПоставляемыеДанные["ДанныеДокументаКомментарий"] как Строка)
        
        знч ОписаниеВложений = ПрисоединенныеФайлыМенеджер.ТекстОписанияПриложенныхФайлов(ПоставляемыеДанные["ДанныеДокументаСсылка"] как ЗаявлениеНаНалоговыеВычеты.Ссылка)
        ПоставляемыеДанные.Вставить("ДанныеДокументаВложения", ОписаниеВложений)
        Текст = ПрисоединенныеФайлыМенеджер.ТекстCОписаниемПриложенныхФайлов(Текст, ОписаниеВложений)
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаТекст", Текст)
            
    ;
;

@ВПодсистеме
метод ДанныеДокументаДляПодготовкиОписаний(СсылкаНаДокумент: Сущность.Ключ): Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>
    
    пер ДанныеДокумента = новый Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>()
    знч ДанныеЗаявления = ДанныеЗаявленияНаНалоговыеВычеты(СсылкаНаДокумент как ЗаявлениеНаНалоговыеВычеты.Ссылка)
    ДанныеДокумента.Вставить("",
        новый Согласования.ДанныеДляПодготовкиОписания(
            ДанныеЗаявления["Организация"] как Организации.Ссылка,
            ДанныеЗаявления["Дата"] как Дата,
            "Заявление на налоговые вычеты"
        )
    )
    возврат ДанныеДокумента
;

метод КартинкиВидовВычетов(): ЧитаемоеСоответствие<ВидыЗаявленийНаВычеты, ДвоичныйОбъект.Ссылка>
    возврат {
        ВидыЗаявленийНаВычеты.Дети: Ресурс{ВидыЗаявленийНаВычеты/НаДетей.svg}.Ссылка,        
        ВидыЗаявленийНаВычеты.Лечение: Ресурс{ВидыЗаявленийНаВычеты/Лечение.svg}.Ссылка,        
        ВидыЗаявленийНаВычеты.Недвижимость: Ресурс{ВидыЗаявленийНаВычеты/Недвижимость.svg}.Ссылка,        
        ВидыЗаявленийНаВычеты.Обучение: Ресурс{Образование.svg}.Ссылка,        
        ВидыЗаявленийНаВычеты.НаСебя: Ресурс{ВидыЗаявленийНаВычеты/Личный.svg}.Ссылка  }
;

метод КартинкиВидовУдержаний(): ЧитаемоеСоответствие<Тип, ДвоичныйОбъект.Ссылка>
    возврат {
        Тип<ЗаявлениеНаУдержаниеДсвВПфр.Ссылка>: Ресурс{ВидыЗаявленийНаУдержания/ДСВ_ПФР.svg}.Ссылка  }
;

метод ЦветаВидовВычетов(): ЧитаемоеСоответствие<ВидыЗаявленийНаВычеты, Цвет>
    возврат {
        ВидыЗаявленийНаВычеты.Дети: БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Оранжевый),        
        ВидыЗаявленийНаВычеты.Лечение: БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Синий),        
        ВидыЗаявленийНаВычеты.Недвижимость: БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Болотный),        
        ВидыЗаявленийНаВычеты.Обучение: БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Болотный),        
        ВидыЗаявленийНаВычеты.НаСебя: БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.СветлоСерый)  }
;

метод ЦветаВидовУдержаний(): ЧитаемоеСоответствие<Тип, Цвет>
    возврат {
        Тип<ЗаявлениеНаУдержаниеДсвВПфр.Ссылка>: БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Оранжевый)  }
;

метод ТипыУдержаний(): ЧитаемыйМассив<Тип>
    возврат [Тип<ЗаявлениеНаУдержаниеДсвВПфр.Ссылка>]
;
