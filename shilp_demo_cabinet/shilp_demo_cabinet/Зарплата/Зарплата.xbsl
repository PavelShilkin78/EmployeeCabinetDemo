импорт КонтрольДоступа
импорт ОбменДанными
импорт ОбщегоНазначения
импорт ОбщиеСтандартные
импорт СтандартноеПриложение
импорт УниверсальныеМеханизмы
импорт ФизическиеЛица

@ВПроекте
@НаКлиенте
конст ИД_РАЗДЕЛА_ЗАРПЛАТА = "Зарплата"

@ВПодсистеме конст ИМЯ_РАЗДЕЛА_ЗАРПЛАТА = "Зарплата"

@ВПроекте
конст ИД_ПОДСИСТЕМЫ = "Зарплата"

@ВПодсистеме
конст КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: Строка = "ЗарплатаПараметрыСеанса"

@ВПодсистеме конст ГРУППА_РЕСУРСОВ_ЗАРПЛАТА = "Зарплата"

@ВПодсистеме конст ПОДСИСТЕМА_ЗАРПЛАТА = "Зарплата"
@ВПодсистеме конст ШАБЛОН_ЗАЯВЛЕНИЯ_НА_НАЛОГОВЫЕ_ВЫЧЕТЫ = "ШаблонЗавяленияНаНалоговыеВычеты"
@ВПодсистеме конст ШАБЛОН_ЗАЯВЛЕНИЯ_НА_УДЕРЖАНИЕ_ДСВ_В_ПФР = "ШаблонЗавяленияНаУдержаниеДСВВПФР"

@ВПроекте конст ТИП_DTO_РАСЧЕТНЫЕ_ЛИСТЫ = "РасчетныеЛисты"
@ВПроекте конст ТИП_DTO_СОСТАВНЫЕ_ЧАСТИ_ЗАРПЛАТЫ = "СоставныеЧастиЗарплаты"
@ВПроекте конст ТИП_DTO_ПРИМЕНЕНИЕ_ВЫЧЕТОВ = "ПрименениеВычетов"

@ВПроекте
@НаКлиенте
конст ПОДПИСАН_РАСЧЕТНЫЙ_ЛИСТ = "ПодписанРасчетныйЛист"

@ВПодсистеме
@НаСервере
метод ДобавитьТипDtoОбъекта()
    ДобавитьТипDtoОбъектаЗарплата()
    ДобавитьТипDtoОбъектаШаблонЗавяленияНаНалоговыеВычеты()
    ДобавитьТипDtoОбъектаШаблонЗавяленияНаУдержаниеДСВВПФР()
;

@НаСервере
метод ДобавитьТипDtoОбъектаЗарплата()
    ТипыDtoОбъектов.ДобавитьТипDtoОбъекта(
        "Расчетные Листы",
        ТИП_DTO_РАСЧЕТНЫЕ_ЛИСТЫ
    )
;

@НаСервере
метод ДобавитьТипDtoОбъектаШаблонЗавяленияНаНалоговыеВычеты()
    ТипыDtoОбъектов.ДобавитьТипDtoОбъекта(
        "Составные Части Зарплаты",
        ТИП_DTO_СОСТАВНЫЕ_ЧАСТИ_ЗАРПЛАТЫ
    )
;

@НаСервере
метод ДобавитьТипDtoОбъектаШаблонЗавяленияНаУдержаниеДСВВПФР()
    ТипыDtoОбъектов.ДобавитьТипDtoОбъекта(
        "Применение Вычетов",
        ТИП_DTO_ПРИМЕНЕНИЕ_ВЫЧЕТОВ
    )
;

@ВПодсистеме
структура ИнформацияОРасчетномЛисте
    обз пер РасчетныйЛист: РасчетныеЛисты.Ссылка
    обз пер Месяц: Дата
    пер ПерваяПоловинаМесяца: Булево
;

@ВПроекте
структура ФункциональныеОпции
  
    пер ИнформацияОЗарплате: Булево = Истина
    пер ЗаявленияНаНалоговыеВычеты: Булево = Истина
    пер ЗаявленияНаУдержаниеДсвВПфр: Булево
    пер СпособРасчетаУдержанияПроцентом: Булево
    пер СпособРасчетаУдержанияСуммой: Булево
    пер СпособРасчетаУдержанияПроцентомНеБолееЗаданнойСуммы: Булево
;

@ВПроекте
структура ПараметрыСеанса
    пер ФункциональныеОпции: ФункциональныеОпции
;

@НаСервере 
структура ДанныеЗаявления
    обз пер ДатаДокумента: Дата
    обз пер Представление: Строка
;

конст ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ЗАРПЛАТЫ = "ПолномочиеРедактированиеЗарплаты"
конст ПОЛНОМОЧИЕ_ПРОСМОТР_ЗАРПЛАТЫ = "ПолномочиеПросмотрЗарплаты"
конст ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_НДФЛ = "ПолномочиеРедактированиеНДФЛ"
конст ПОЛНОМОЧИЕ_ПРОСМОТР_НДФЛ = "ПолномочиеПросмотрНДФЛ"

@ВПроекте
@НаСервере
метод ДобавитьПолномочия()
    ДобавитьПолномочиеРедактированиеЗарплаты()
    ДобавитьПолномочиеПросмотрЗарплаты()
    ДобавитьПолномочиеРедактированиеНдфл()
    ДобавитьПолномочиеПросмотрНдфл()
;

@НаСервере
метод ДобавитьПолномочиеРедактированиеЗарплаты()
    КонтрольДоступа.ДобавитьПолномочие(
        "Редактирование Зарплаты",
        ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ЗАРПЛАТЫ,
        "",
        КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица())
;

@НаСервере
метод ДобавитьПолномочиеПросмотрЗарплаты()
    КонтрольДоступа.ДобавитьПолномочие(
        "Просмотр Зарплаты",
        ПОЛНОМОЧИЕ_ПРОСМОТР_ЗАРПЛАТЫ,
        "",
        КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица())
;

@НаСервере
метод ДобавитьПолномочиеРедактированиеНдфл()
    КонтрольДоступа.ДобавитьПолномочие(
        "Редактирование НДФЛ",
        ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_НДФЛ,
        "",
        КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица())
;

@НаСервере
метод ДобавитьПолномочиеПросмотрНдфл()
    КонтрольДоступа.ДобавитьПолномочие(
        "Просмотр НДФЛ",
        ПОЛНОМОЧИЕ_ПРОСМОТР_НДФЛ,
        "",
        КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица())
;

@ВПроекте
@НаСервере
метод ПолномочиеРедактированиеЗарплаты(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ЗАРПЛАТЫ)
;

@ВПроекте
@НаСервере
метод ПолномочиеПросмотрЗарплаты(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_ПРОСМОТР_ЗАРПЛАТЫ)
;

@ВПроекте
@НаСервере
метод ПолномочиеРедактированиеНдфл(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_НДФЛ)
;

@ВПроекте
@НаСервере
метод ПолномочиеПросмотрНдфл(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_ПРОСМОТР_НДФЛ)
;

@ВПроекте
@НаКлиенте
метод ПараметрыСеанса(): ПараметрыСеанса
    возврат ПараметрыСеансаСервис.ПолучитьСервис().ПараметрПоКлючу(КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА) как ПараметрыСеанса
;

@ВПроекте
@НаСервере
метод ПолучитьФункциональныеОпции(): ФункциональныеОпции?
    возврат ИспользуемаяФункциональность.ФункциональныеОпции()
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЗаписатьФункциональныеОпции(ФункциональныеОпции: ФункциональныеОпции)
    ИспользуемаяФункциональность.ЗаписатьФункциональныеОпции(ФункциональныеОпции)
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ПредставленияЗаявленийФизлица(ФизическоеЛицо: ФизическиеЛица.Ссылка?): ЧитаемаяКоллекция<СостояниеДокументаКомпонентДанных>
    пер ПредставленияЗаявленийФизлица: Массив<СостояниеДокументаКомпонентДанных>
    если ФизическоеЛицо == Неопределено
        возврат ПредставленияЗаявленийФизлица
    ;
    знч ЗаявленияФизлица: Массив<ДокументИмеющийСостояние.Ссылка>
    знч ДанныеЗаявлений: Соответствие<ДокументИмеющийСостояние.Ссылка, ДанныеЗаявления>
    знч ФункциональныеОпции = ПолучитьФункциональныеОпции()
    знч ИспользоватьЗаявленияНаНалоговыеВычеты = ФункциональныеОпции.ЗаявленияНаНалоговыеВычеты
    знч ИспользоватьЗаявлениеНаУдержаниеДсвВПфр = ФункциональныеОпции.ЗаявленияНаУдержаниеДсвВПфр
    знч Запрос = Запрос{
        Выбрать
            Заявления.Документ Как Документ,
            Заявления.ДатаДокумента Как ДатаДокумента,
            Заявления.Представление Как Представление
        Из (Выбрать
                Ссылка Как Документ,
                Дата Как ДатаДокумента,
                ПредставлениеДокумента Как Представление,
                МоментСоздания Как МоментСоздания
            Из ЗаявлениеНаНалоговыеВычеты
            Где ФизическоеЛицо == %ФизическоеЛицо
            И %ИспользоватьЗаявленияНаНалоговыеВычеты
            Объединить Все
            Выбрать
                Ссылка,
                Дата,
                ПредставлениеДокумента,
                МоментСоздания
            Из ЗаявлениеНаУдержаниеДсвВПфр
            Где ФизическоеЛицо == %ФизическоеЛицо
            И %ИспользоватьЗаявлениеНаУдержаниеДсвВПфр) Как Заявления
        Упорядочить по Заявления.МоментСоздания Убыв}
    исп РезультатЗапроса = Запрос.Выполнить()
    для СтрокаРезультата из РезультатЗапроса
        ЗаявленияФизлица.Добавить(СтрокаРезультата.Документ)
        ДанныеЗаявлений.Вставить(СтрокаРезультата.Документ, новый ДанныеЗаявления(СтрокаРезультата.ДатаДокумента, СтрокаРезультата.Представление))
    ;
    если ЗаявленияФизлица.Пусто()
        возврат ПредставленияЗаявленийФизлица
    ;
    ПредставленияЗаявленийФизлица = СостДокументов.СостоянияДокументов(ЗаявленияФизлица)
    для Компонент из ПредставленияЗаявленийФизлица
        Компонент.ДатаДокумента = ДанныеЗаявлений[Компонент.Документ].ДатаДокумента
        Компонент.Представление = ДанныеЗаявлений[Компонент.Документ].Представление
        Компонент.ДополнительноеПредставление = МенеджерДат.ФорматДаты(ДанныеЗаявлений[Компонент.Документ].ДатаДокумента)
    ;
    знч Сервисы = СостояниеДокументовПоставщик.ПолучитьСервисы()
    для Сервис из Сервисы
        Сервис.ЗаполнитьКартинкиДокументов(ПредставленияЗаявленийФизлица)
    ;
    возврат ПредставленияЗаявленийФизлица
;

@ВПроекте
@НаКлиенте 
метод СписокВидовЗаявлений(): ЧитаемыйМассив<ЭлементСпискаЗначений<Объект?>>
    пер СписокВидовЗаявлений: Массив<ЭлементСпискаЗначений<Объект?>>
    если Зарплата.ПараметрыСеанса().ФункциональныеОпции.ЗаявленияНаНалоговыеВычеты
        для ВидЗаявления из ВидыЗаявленийНаВычеты.Элементы()
            пер СтрокаСписка = новый ЭлементСпискаЗначений<Объект?>(
                Значение = ВидЗаявления,
                Представление = ВидЗаявления.Представление())
                
            СписокВидовЗаявлений.Добавить(СтрокаСписка)    
        ;
    ; 
    если Зарплата.ПараметрыСеанса().ФункциональныеОпции.ЗаявленияНаУдержаниеДсвВПфр
        пер СтрокаСписка = новый ЭлементСпискаЗначений<Объект?>(
            Значение = ВидыУдержаний.ДСВ_ПФР,
            Представление = ВидыУдержаний.ДСВ_ПФР.Представление())
        СписокВидовЗаявлений.Добавить(СтрокаСписка) 
    ;   
        
    возврат СписокВидовЗаявлений
;

@ВПроекте
@НаСервере
метод ОбновитьСтроковыеРесурсы()
    
    пер РасчетныйЛистОпубликованSms = "Ознакомьтесь с расчетным листом за \%МесяцРасчетногоЛиста\%"
    пер Комментарий = "Уведомление о публикации расчетного листа, оправляемое как sms"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ЗАРПЛАТА, Сервер.РАСЧЕТНЫЙ_ЛИСТ_ОПУБЛИКОВАН_SMS, Комментарий, РасчетныйЛистОпубликованSms, 70)
    
    пер РасчетныйЛистОпубликованPush = "Ознакомьтесь с расчетным листом за \%МесяцРасчетногоЛиста\%"
    Комментарий = "Уведомление о публикации расчетного листа, оправляемое как push"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ЗАРПЛАТА, Сервер.РАСЧЕТНЫЙ_ЛИСТ_ОПУБЛИКОВАН_PUSH, Комментарий, РасчетныйЛистОпубликованPush)
    
    пер РасчетныйЛистОпубликованEmail = "Ознакомьтесь с расчетным листом за \%МесяцРасчетногоЛиста\%"
    Комментарий = "Уведомление о публикации расчетного листа, оправляемое как email"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ЗАРПЛАТА, Сервер.РАСЧЕТНЫЙ_ЛИСТ_ОПУБЛИКОВАН_EMAIL, Комментарий, РасчетныйЛистОпубликованEmail)
    
    пер РасчетныйЛистОпубликованТема = "Расчетный лист за \%МесяцРасчетногоЛиста\%"
    Комментарий = "Тема письма о публикации расчетного листа"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ЗАРПЛАТА, Сервер.РАСЧЕТНЫЙ_ЛИСТ_ОПУБЛИКОВАН_ТЕМА, Комментарий, РасчетныйЛистОпубликованТема)
    
    пер РасчетныйЛистНапоминаниеSms = "В личном кабинете доступен расчетный лист за \%МесяцРасчетногоЛиста\%"
    Комментарий = "Напоминание о необходимости ознакомиться с расчетным листом, оправляемое как sms"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ЗАРПЛАТА, Сервер.РАСЧЕТНЫЙ_ЛИСТ_НАПОМИНАНИЕ_SMS, Комментарий, РасчетныйЛистНапоминаниеSms, 70)
    
    пер РасчетныйЛистНапоминаниеPush = "В личном кабинете доступен расчетный лист за \%МесяцРасчетногоЛиста\%"
    Комментарий = "Напоминание о необходимости ознакомиться с расчетным листом, оправляемое как push"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ЗАРПЛАТА, Сервер.РАСЧЕТНЫЙ_ЛИСТ_НАПОМИНАНИЕ_PUSH, Комментарий, РасчетныйЛистНапоминаниеPush)
    
    пер РасчетныйЛистНапоминаниеEmail = "В личном кабинете доступен расчетный лист за \%МесяцРасчетногоЛиста\%"
    Комментарий = "Напоминание о необходимости ознакомиться с расчетным листом, оправляемое как email"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ЗАРПЛАТА, Сервер.РАСЧЕТНЫЙ_ЛИСТ_НАПОМИНАНИЕ_EMAIL, Комментарий, РасчетныйЛистНапоминаниеEmail)
    
    пер РасчетныйЛистНапоминаниеТема = "Расчетный лист за \%МесяцРасчетногоЛиста\%"
    Комментарий = "Тема письма с напоминанием о расчетном листе"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ЗАРПЛАТА, Сервер.РАСЧЕТНЫЙ_ЛИСТ_НАПОМИНАНИЕ_ТЕМА, Комментарий, РасчетныйЛистНапоминаниеТема)
    
;

@НаСервере
исключение ИсключениеПреобразованияМесяцаСтрокой
    обз знч МесяцСтрокой: Строка
;

@ВПодсистеме
@НаСервере
метод ДатаИзМесяцаСтрокой(МесяцСтрокой: Строка): Дата
    пер Месяц: Дата?
    попытка
        Месяц = новый Дата(МесяцСтрокой + "-01")
    поймать Ошибка: Исключение
        выбросить новый ИсключениеПреобразованияМесяцаСтрокой(
            "Неверно указан месяц = %МесяцСтрокой, ожидается в формате YYYY-MM", 
            МесяцСтрокой)
    ;
    возврат Месяц!
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ЗаявлениеВычетНаДетей(Заявление: ЗаявлениеНаНалоговыеВычеты.Ссылка): Булево
    возврат МенеджерСущности.ЗначениеРеквизитаОбъекта(Заявление, "ВычетыНаДетей")
;

@ВПодсистеме
@НаКлиенте @НаСервере
метод ПредставлениеРасчтеногоЛиста(МесяцРасчетногоЛиста: Дата, ПерваяПоловинаМесяца: Булево, ФорматМесяцаСГодом: Булево = Истина, ЭтоГод: Булево = Ложь): Строка
    пер ПредставлениеПериода: Строка
    если ЭтоГод
        ПредставлениеПериода = МенеджерДат.ФорматДаты(МесяцРасчетногоЛиста, "гггг")
    иначе
        пер Формат: Строка = ФорматМесяцаСГодом ? "ММММ гггг" : "ММММ"
        ПредставлениеПериода = МенеджерДат.ФорматДаты(МесяцРасчетногоЛиста, Формат)
    ;
    если ПерваяПоловинаМесяца
        возврат "%ПредставлениеПериода (аванс)"
    ;
    возврат ПредставлениеПериода
;

@ВПроекте
@НаКлиенте
метод СтраницыРаздела(): Массив<СтандартноеПриложение.ОписаниеДополнительнойСтраницы>
    знч Страницы: Массив<СтандартноеПриложение.ОписаниеДополнительнойСтраницы>
    знч Сервисы = НаполнениеРазделаЗарплата.ПолучитьСервисы()
    для Сервис из Сервисы
        Страницы.ДобавитьВсе(Сервис.СтраницыРазделаЗарплата())
    ;
    возврат Страницы
;