импорт ВзаимодействиеССервисомПодписания
импорт ОбщиеСтандартные
импорт КонтрольДоступа

//КонтрольДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат [КонтрольДоступа.ПолныйДоступАутентифицированным(этот)]
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Записи: ЧитаемыйМассив<ИдентификаторыСертификатовУнэп.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ИдентификаторыСертификатовУнэп.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    возврат КлиентСервисаПодписанияКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаДляИдентификаторовСертификатовУнэп(Записи)
;

//КонтрольДоступа

@ВПодсистеме
метод ЗарегистрироватьСертификат(
    ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка,
    СервисПодписания: СервисыПодписания,
    ВладелецСертификата: Строка,
    СерийныйНомер: Строка,
    ДатаНачала: Момент,
    ДатаОкончания: Момент)
    
    ЗарегистрироватьСертификат(
        ВладелецУнэп = ВладелецУнэп,
        СервисПодписания = СервисПодписания,
        ЗапросВыпускаСертификата = Неопределено,
        ВладелецСертификата = ВладелецСертификата,
        СерийныйНомер = СерийныйНомер,
        ДатаНачала = ДатаНачала,
        ДатаОкончания = ДатаОкончания,
        Файл = Неопределено,
        ФайлПечатнойФормы = Неопределено)
;

@ВПодсистеме
метод ЗарегистрироватьСертификат(
    ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка,
    СервисПодписания: СервисыПодписания,
    ЗапросВыпускаСертификата: ЗапросыВыпускаСертификатаПодписи.Ссылка?,
    ВладелецСертификата: Строка,
    СерийныйНомер: Строка,
    ДатаНачала: Момент,
    ДатаОкончания: Момент,
    Файл: ФайлСервисаПодписания.Ссылка?,
    ФайлПечатнойФормы: ФайлСервисаПодписания.Ссылка?)
    
    пер НаборЗаписей = новый ИдентификаторыСертификатовУнэп.НаборЗаписей()
    НаборЗаписей.Фильтр.ВладелецУнэп.Установить(ВладелецУнэп)
    НаборЗаписей.Фильтр.СервисПодписания.Установить(СервисПодписания)
    НаборЗаписей.Фильтр.ЗапросВыпускаСертификата.Установить(ЗапросВыпускаСертификата)
    НаборЗаписей.ДобавитьЗапись(
        ВладелецУнэп = ВладелецУнэп,
        СервисПодписания = СервисПодписания,
        ЗапросВыпускаСертификата = ЗапросВыпускаСертификата,
        ВладелецСертификата = ВладелецСертификата,
        СерийныйНомер = СерийныйНомер,
        ДатаНачала = ДатаНачала.ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий()).Дата,
        ДатаОкончания = ДатаОкончания.ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий()).Дата,
        Файл = Файл,
        ФайлПечатнойФормы = ФайлПечатнойФормы,
        ВремяРегистрации = МенеджерДат.ТекущаяДатаВремя())
    НаборЗаписей.Записать()
;

@ВПодсистеме
метод ДанныеСертификатаВладельца(ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка,
    СервисПодписания: СервисыПодписания): КлиентСервисаПодписания.ДанныеСертификата?
    
    знч Запрос = Запрос{
        Выбрать Первые 1
            ВладелецУнэп,
            СервисПодписания,
            ЗапросВыпускаСертификата,
            ВладелецСертификата,
            СерийныйНомер,
            ДатаНачала,
            ДатаОкончания,
            Файл,
            ФайлПечатнойФормы,
            ВремяРегистрации,
            Заблокирован,
            ПричинаБлокировки
        Из
            ИдентификаторыСертификатовУнэп
        Где
            ВладелецУнэп == %ВладелецУнэп
            и СервисПодписания == %СервисПодписания
            и ДатаОкончания >= %{МенеджерДат.ТекущаяДатаВремя().ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий()).Дата}
        Упорядочить По
            ДатаОкончания Убыв,
            ЗапросВыпускаСертификата.МоментСоздания Убыв}
    исп Результат = Запрос.Выполнить()
    знч СтрокаРезультата = Результат.ЕдинственныйИлиУмолчание()
    если СтрокаРезультата == Неопределено
        возврат Неопределено
    ;
    возврат новый КлиентСервисаПодписания.ДанныеСертификата(
        СервисПодписания = СтрокаРезультата.СервисПодписания,
        ЗапросВыпускаСертификата = СтрокаРезультата.ЗапросВыпускаСертификата,
        ВладелецСертификата = СтрокаРезультата.ВладелецСертификата,
        СерийныйНомер = СтрокаРезультата.СерийныйНомер,
        ДатаНачала = СтрокаРезультата.ДатаНачала,
        ДатаОкончания = СтрокаРезультата.ДатаОкончания,
        Файл = СтрокаРезультата.Файл,
        ФайлПечатнойФормы = СтрокаРезультата.ФайлПечатнойФормы,
        ВремяРегистрации = СтрокаРезультата.ВремяРегистрации,
        Заблокирован = СтрокаРезультата.Заблокирован,
        ПричинаБлокировки = СтрокаРезультата.ПричинаБлокировки)
;

@ВПодсистеме
метод ДанныеСертификата(ЗапросВыпускаСертификата: ЗапросыВыпускаСертификатаПодписи.Ссылка): КлиентСервисаПодписания.ДанныеСертификата?
    знч Запрос = Запрос{
        Выбрать Первые 1
            ВладелецУнэп,
            СервисПодписания,
            ЗапросВыпускаСертификата,
            ВладелецСертификата,
            СерийныйНомер,
            ДатаНачала,
            ДатаОкончания,
            Файл,
            ФайлПечатнойФормы,
            ВремяРегистрации,
            Заблокирован,
            ПричинаБлокировки
        Из
            ИдентификаторыСертификатовУнэп
        Где
            ЗапросВыпускаСертификата == %ЗапросВыпускаСертификата}
    исп Результат = Запрос.Выполнить()
    знч СтрокаРезультата = Результат.ЕдинственныйИлиУмолчание()
    если СтрокаРезультата == Неопределено
        возврат Неопределено
    ;
    возврат новый КлиентСервисаПодписания.ДанныеСертификата(
        СервисПодписания = СтрокаРезультата.СервисПодписания,
        ЗапросВыпускаСертификата = СтрокаРезультата.ЗапросВыпускаСертификата,
        ВладелецСертификата = СтрокаРезультата.ВладелецСертификата,
        СерийныйНомер = СтрокаРезультата.СерийныйНомер,
        ДатаНачала = СтрокаРезультата.ДатаНачала,
        ДатаОкончания = СтрокаРезультата.ДатаОкончания,
        Файл = СтрокаРезультата.Файл,
        ФайлПечатнойФормы = СтрокаРезультата.ФайлПечатнойФормы,
        ВремяРегистрации = СтрокаРезультата.ВремяРегистрации,
        Заблокирован = СтрокаРезультата.Заблокирован,
        ПричинаБлокировки = СтрокаРезультата.ПричинаБлокировки)
;
