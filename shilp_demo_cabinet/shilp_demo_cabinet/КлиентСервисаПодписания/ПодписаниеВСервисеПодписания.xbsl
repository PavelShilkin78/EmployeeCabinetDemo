импорт Компания::Согласования
импорт ОбщиеСтандартные
импорт СтандартноеПриложение
импорт УниверсальныеМеханизмы
импорт ВзаимодействиеССервисомПодписания
импорт ФизическиеЛица

конст МАКСИМАЛЬНОЕ_КОЛИЧЕСТВО_ИТЕРАЦИЙ = 5

метод ФормаДокументаЗаголовок(): Строка
    выбор ВидЭлектроннойПодписи
        когда ВидыЭлектронныхПодписей.Госключ
            возврат "Подписание в Госключ"
    ;
    возврат "Подписание Астрал.Платформа"
;

метод ФормаДокументаМаксимальнаяШирина(): Число
    возврат ОсновнойИнтерфейс.МаксимальнаяШиринаФормыДокумента()
;

метод ФормаДокументаМинимальнаяШирина(): Число
    возврат ОсновнойИнтерфейс.МинимальнаяШиринаФормыДокумента()
;

метод ФормаДокументаВысота(): Число
    возврат ОсновнойИнтерфейс.ВысотаФормыДокумента(35)
;

@Обработчик
метод ПослеСоздания()
    ДанныеДокументов = ДанныеПодписываемыхДокументов(
        ПодписываемыеДокументы, ВладелецУнэп, ВидЭлектроннойПодписи, РольПодписанта, НомерШагаСогласования)
    выбор ВидЭлектроннойПодписи
        когда ВидыЭлектронныхПодписей.Госключ
            возврат
        когда ВидыЭлектронныхПодписей.УнэпАстралПлатформа
            попытка
                ПриПодписанииВАстралПлатформа()
                ОтправитьНаПодписаниеИПолучитьКодПодтверждения()
            поймать Ошибка: Исключение
                ВывестиСообщениеОбОшибкеСервисаПодписания()
            ;
    ;
    СчетчикИтераций = 0
    ПодключитьОбработчикТаймера(&ОбновитьТаймаутВвода, 1с, Истина)
;

метод ЗаголовокОсновнойКоманды(): Строка
    выбор ВидЭлектроннойПодписи
        когда ВидыЭлектронныхПодписей.Госключ
            возврат "Отправить на подписание в Госключ"
    ;
    возврат "Ок"
;

метод ОсновнаяКомандаОбработчик(Команда: ОбычнаяКоманда)
    СообщениеОбОшибкеСервисаПодписания = ""
    попытка 
        выбор ВидЭлектроннойПодписи
            когда ВидыЭлектронныхПодписей.Госключ
                ИдентификаторСервиса = ИдентификаторЗапросаНаПодписание(ВладелецУнэп, ДанныеДокументов, ВидЭлектроннойПодписи, СпособДоставкиКода)
                УстановитьСостояниеИЗакрытьФорму()
            когда ВидыЭлектронныхПодписей.УнэпАстралПлатформа
                ОтправитьКодПодтверждения()
        ;
    поймать Ошибка: Исключение
        ВывестиСообщениеОбОшибкеСервисаПодписания()
    ;
;

метод ВывестиСообщениеОбОшибкеСервисаПодписания()
    выбор ВидЭлектроннойПодписи
        когда ВидыЭлектронныхПодписей.Госключ
            СообщениеОбОшибкеСервисаПодписания = "Не удалось отправить на подписание в Госключ, выполните попытку подписания позднее."
        когда ВидыЭлектронныхПодписей.УнэпАстралПлатформа
            СообщениеОбОшибкеСервисаПодписания = "Не удалось отправить на подписание в Астрал.Платформа, выполните попытку подписания позднее."
    ;
;

метод ЗакрытьФорму(Команда: ОбычнаяКоманда)
    если ВидЭлектроннойПодписи == ВидыЭлектронныхПодписей.УнэпАстралПлатформа
        ОтменитьОтправкуНаСогласованиеДокумента(ДанныеДокументов, ВладелецУнэп, ИдентификаторСервиса)
    ;
    Закрыть(Ложь)
;

метод ПриПодписанииВАстралПлатформа()
    
    знч ПараметрыСеанса = КлиентСервисаПодписания.ПараметрыСеанса()
    ВремяОжиданияДоставкиКодаПодтверждения = ПараметрыСеанса.ВремяОжиданияДоставкиКода
    СпособДоставкиКода = ПараметрыСеанса.СпособДоставкиКодаПодтверждения
;

метод ОбновитьТаймаутВвода()
    пер ПовторитьОбработку = Истина
    если ТаймаутВвода > 0
        ТаймаутВвода -= 1
        если ТаймаутВвода == 0
            СчетчикИтераций += 1
            ПовторитьОбработку = Ложь
        ;
    ;
    если ПовторитьОбработку
        ПодключитьОбработчикТаймера(&ОбновитьТаймаутВвода, 1с, Истина)
    ;
;

метод ЗапроситьПовторноПриНажатии(Команда: ОбычнаяКоманда)
    если СчетчикИтераций < МАКСИМАЛЬНОЕ_КОЛИЧЕСТВО_ИТЕРАЦИЙ
        ОшибкаКодаПодтверждения = ""
        ОтправитьНаПодписаниеИПолучитьКодПодтверждения()
        ПодключитьОбработчикТаймера(&ОбновитьТаймаутВвода, 1с, Истина)
    иначе
        ОшибкаКодаПодтверждения = "Нет ответа от сервера СервисПодписанияКлиент"
    ;
;

метод ЗапроситьПовторноДоступность(): Булево
    возврат ТаймаутВвода == 0
;

метод ОтправитьКодПодтверждения()
    КодПодтверждения = КодПодтверждения.Сократить()
    если КодПодтверждения.Длина() == 6 и КодПодтверждения.ТолькоЦифры()
        ОшибкаКодаПодтверждения = ""
        ОжиданиеПринятияКодаПодтверждения = 10
        ОтправитьКодПодтвержденияСПроверкойСостояния()
    иначе
        ОшибкаКодаПодтверждения =
            "Не верный код подтверждения (6 цифр)."
    ;
;

метод ОтправитьКодПодтвержденияСПроверкойСостояния()
    знч СостояниеЗапросаПодписания = СостояниеЗапросаПодписания(ИдентификаторСервиса, Истина)
    если СостояниеЗапросаПодписания != Неопределено
        СостояниеЗапроса = СостояниеЗапросаПодписания.СостояниеЗапроса
        ОшибкаКодаПодтверждения = СостояниеЗапросаПодписания.Информация
    ;
    если СостояниеЗапроса == СостоянияЗапросаПодписания.ТребуетсяКодПодтвержденияОперации
        ОжиданиеПринятияКодаПодтверждения = 10
        ОтправитьКодПодтверждения(ИдентификаторСервиса, КодПодтверждения, ВидЭлектроннойПодписи)
        ПодключитьОбработчикТаймера(&ОбновитьСостояниеЗапроса, 1с, Истина)
    иначе
        если ОжиданиеПринятияКодаПодтверждения > 0
            ОжиданиеПринятияКодаПодтверждения -= 1
            ПодключитьОбработчикТаймера(&ОтправитьКодПодтвержденияСПроверкойСостояния, 2с, Истина)
        иначе
            ТаймаутВвода = 0
            ОшибкаКодаПодтверждения = "Нет ответа сервиса"
        ;
    ;
;

метод ОтправитьНаПодписаниеИПолучитьКодПодтверждения()
    ИдентификаторСервиса = ИдентификаторЗапросаНаПодписание(ВладелецУнэп, ДанныеДокументов, ВидЭлектроннойПодписи, СпособДоставкиКода)
    если не ИдентификаторСервиса.Пусто()
        ТаймаутВвода = ВремяОжиданияДоставкиКодаПодтверждения
    ;
;

метод ОбновитьСостояниеЗапроса()
    знч СостояниеЗапросаПодписания = СостояниеЗапросаПодписания(ИдентификаторСервиса, ОжиданиеПринятияКодаПодтверждения > 0)
    если СостояниеЗапросаПодписания == Неопределено
        СостояниеЗапроса = Неопределено
        ОшибкаКодаПодтверждения = "Не зарегистрировано запроса подписания"
    иначе
        СостояниеЗапроса = СостояниеЗапросаПодписания.СостояниеЗапроса
        ОшибкаКодаПодтверждения = СостояниеЗапросаПодписания.Информация
    ;
    если СостояниеЗапроса == СостоянияЗапросаПодписания.Обрабатывается
        или СостояниеЗапроса == СостоянияЗапросаПодписания.ПодписаниеВыполнено
        
        ЗарегистрироватьОтправкуНаСогласованиеДокумента(ВладелецУнэп, ДанныеДокументов)
        УстановитьСостояниеИЗакрытьФорму()
    иначе если СостояниеЗапроса == СостоянияЗапросаПодписания.ТребуетсяКодПодтвержденияОперации
        если ОжиданиеПринятияКодаПодтверждения > 0
            ОжиданиеПринятияКодаПодтверждения -= 1
        ;
    ;
    если не ОшибкаКодаПодтверждения.Пусто()
        ОжиданиеПринятияКодаПодтверждения = 0
        ТаймаутВвода = 0
    иначе
        ПодключитьОбработчикТаймера(&ОбновитьСостояниеЗапроса, 2с, Истина)
    ;
;

метод УстановитьСостояниеИЗакрытьФорму()
    если СостояниеДокумента == Неопределено
        СостояниеДокумента = СостоянияДокумента.Подготовлен
    ;
    УстановитьСостояниеДокументов(ПодписываемыеДокументы, СостояниеДокумента)
    Закрыть(Истина)
;

метод КодПодтвержденияПриНажатииВвода(Источник: ПолеВвода<Строка>, Событие: СобытиеКомпонента)
    ОтправитьКодПодтверждения()
;

метод КодПодтвержденияРезультатПроверкиДанных(): РезультатПроверкиДанных
    возврат ОшибкаКодаПодтверждения.Пусто() ? РезультатПроверкиДанных.Отсутствует : РезультатПроверкиДанных.Ошибка
;

метод ТекстИнформацииОПодписании(): Строка
    возврат КлиентСервисаПодписания.HtmlТекстИнформацииОСрокеПодписанииСИспользованиемГосключа(ОкончаниеПериодаПодписания())
;

метод ОкончаниеПериодаПодписания(): Строка
    знч Период = КлиентСервисаПодписания.ДлительностьПодписания(КлиентСервисаПодписания.СервисПодписанияПоВидуЭлектроннойПодписи(ВидЭлектроннойПодписи))
    возврат МенеджерДат.ФорматДатыВремени((МенеджерДат.ТекущаяДатаВремя() + Период).ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий()), "дд ММММ гггг (ЧЧ:мм)")
;

@НаСервере @ДоступноСКлиента
статический метод ИдентификаторЗапросаНаПодписание(
        ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка,
        ДанныеДокументов: Соответствие<ДокументПодписываемыйВСервисеПодписания.Ссылка, КлиентСервисаПодписания.ДанныеПодписываемогоДокумента>,
        ВидЭлектроннойПодписи: ВидыЭлектронныхПодписей,
        СпособДоставкиКода: СпособыДоставкиКодаПодтверждения): Строка

    пер ИдентификаторЗапроса: Строка
    пер СервисПодписания: СервисыПодписания
    исп КонтекстДоступа.Привилегированный()
    выбор ВидЭлектроннойПодписи
        когда ВидыЭлектронныхПодписей.Госключ
            СервисПодписания = СервисыПодписания.Госключ
            ИдентификаторЗапроса = ОбменССервисомПодписания.ИдентификаторЗапросаНаПодписаниеВГосключ(ВладелецУнэп, ДанныеДокументов)
        когда ВидыЭлектронныхПодписей.УнэпАстралПлатформа
            СервисПодписания = СервисыПодписания.АстралПлатформаУнэп
            ИдентификаторЗапроса = ОбменССервисомПодписания.ИдентификаторЗапросаНаПодписаниеВАстралПлатформа(
                ВладелецУнэп, ДанныеДокументов, СпособДоставкиКода)
    ;
    если не ИдентификаторЗапроса.Пусто()
        СостоянияЗапросовПодписания.ЗарегистрироватьИдентификаторЗапроса(
            ДанныеДокументов, СервисПодписания, ИдентификаторЗапроса, ВладелецУнэп)
        если ВидЭлектроннойПодписи == ВидыЭлектронныхПодписей.Госключ
            ЗарегистрироватьОтправкуНаСогласованиеДокумента(ВладелецУнэп, ДанныеДокументов)
        ;
    ;
    возврат ИдентификаторЗапроса
;

@НаСервере @ДоступноСКлиента
статический метод СостояниеЗапросаПодписания(ИдентификаторЗапроса: Строка, ПроверитьСостояние: Булево): КлиентСервисаПодписания.СостояниеЗапросаПодписания?
    если ПроверитьСостояние
        ОбменССервисомПодписания.ПроверитьСостоянияЗапросаПодписания(ИдентификаторЗапроса)
    ;
    возврат СостоянияЗапросовПодписания.СостояниеЗапроса(ИдентификаторЗапроса)
;

@НаСервере @ДоступноСКлиента
статический метод ОтправитьКодПодтверждения(ИдентификаторЗапроса: Строка, КодПодтверждения: Строка, ВидЭлектроннойПодписи: ВидыЭлектронныхПодписей)
    ОбменССервисомПодписания.ОтправитьКодПодтверждения(ИдентификаторЗапроса, КодПодтверждения, ВидЭлектроннойПодписи)
;

@НаСервере @ДоступноСКлиента
статический метод ОтменитьОтправкуНаСогласованиеДокумента(
    ДанныеДокументов: Соответствие<ДокументПодписываемыйВСервисеПодписания.Ссылка, КлиентСервисаПодписания.ДанныеПодписываемогоДокумента>,
    ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка, ИдентификаторСервиса: Строка)
    
    исп КонтекстДоступа.Привилегированный()
    для ДанныеДокумента из ДанныеДокументов
        СогласованияДокументов.ОтменитьОтправкуНаСогласованиеДокумента(
            ДанныеДокумента.Ключ как ПодписываемыйДокумент.Ссылка, ВладелецУнэп как ФизическиеЛица.Ссылка, ДанныеДокумента.Значение.Роль)
    ;
    СостоянияЗапросовПодписания.УдалитьЗапросПодписанияДокументов(ИдентификаторСервиса)
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеПодписываемыхДокументов(ПодписываемыеДокументы: ЧитаемоеМножество<ДокументПодписываемыйВСервисеПодписания.Ссылка>,
    ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка, ВидЭлектроннойПодписи: ВидыЭлектронныхПодписей,
    Роль: РолиПодписантов.Ссылка?,
    НомерШагаСогласования: Число):
    Соответствие<ДокументПодписываемыйВСервисеПодписания.Ссылка, КлиентСервисаПодписания.ДанныеПодписываемогоДокумента>
    
    исп КонтекстДоступа.Привилегированный()
    возврат ОбменССервисомПодписания.ДанныеПодписываемыхДокументов(
        ПодписываемыеДокументы, ВладелецУнэп, ВидЭлектроннойПодписи, Роль, НомерШагаСогласования)
;

@НаСервере @ДоступноСКлиента
статический метод ЗарегистрироватьОтправкуНаСогласованиеДокумента(ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка,
    ДанныеДокументов: Соответствие<ДокументПодписываемыйВСервисеПодписания.Ссылка, КлиентСервисаПодписания.ДанныеПодписываемогоДокумента>)
    
    исп КонтекстДоступа.Привилегированный()
    для ДанныеДокумента из ДанныеДокументов
        СогласованияДокументов.ЗарегистрироватьОтправкуНаСогласованиеДокумента(
            ДанныеДокумента.Ключ как ПодписываемыйДокумент.Ссылка,
            ВладелецУнэп как ФизическиеЛица.Ссылка,
            ДанныеДокумента.Значение.Роль,
            ДанныеДокумента.Значение.НомерШагаСогласования)
    ;

;

@НаСервере @ДоступноСКлиента
статический метод УстановитьСостояниеДокументов(
    ПодписываемыеДокументы: ЧитаемоеМножество<ДокументПодписываемыйВСервисеПодписания.Ссылка>,
    СостояниеДокумента: СостоянияДокумента)
    
    для ДокументСсылка из ПодписываемыеДокументы
        если ДокументСсылка это ДокументИмеющийСостояние.Ссылка
            СостДокументов.УстановитьСостояниеДокумента(ДокументСсылка, СостояниеДокумента)
        ;
    ;
;