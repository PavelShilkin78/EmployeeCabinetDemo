импорт ВзаимодействиеССервисомПодписания
импорт Криптография
импорт КриптографияСтандартные
импорт ОбщиеСтандартные
импорт УниверсальныеМеханизмы

@Реализация
@ВПроекте
метод Инициализировать()
    ДоступныеВидыЭлектронныхПодписей = Криптография.ДоступныеВидыЭлектронныхПодписей()
    ОбновитьДанныеФормы()
    МенеджерГлобальныхКлиентскихСобытий.ПодключитьОбработчик(метод (Источник, Параметры) ->
        выбор Источник
        когда КлиентСервисаПодписания.ИЗМЕНЕН_ЗАПРОС_ВЫПУСКА_СЕРТИФИКАТА
            ОбновитьДанныеФормы()
        ;  
    ;)
;

метод ОбновитьДанныеФормы()
    ДоступноПолучениеНовогоСертификата = Истина
    Заблокирован = Ложь
    ПричинаБлокировки = ""
    знч ДанныеКомпонентаВладельца = ДанныеКомпонентаВладельцаУнэп(ВладелецУнэп, ВидЭлектроннойПодписи)
    если ДанныеКомпонентаВладельца.ДанныеСертификата != Неопределено
        СертификатПолучен = Истина
        знч ПериодДействия = новый МенеджерДат.Интервал(
            ДанныеКомпонентаВладельца.ДанныеСертификата.ДатаНачала.НачалоДня().ВМомент(МенеджерДат.ЧасовойПоясТекущий()),
            ДанныеКомпонентаВладельца.ДанныеСертификата.ДатаОкончания.НачалоДня().ВМомент(МенеджерДат.ЧасовойПоясТекущий()))
        ИнформацияОСертификате = новый ОбъектыКриптографии.ИнформацияОСертификате(
            "CN=%{ДанныеКомпонентаВладельца.ДанныеСертификата.ВладелецСертификата}",
            ДанныеКомпонентаВладельца.ДанныеСертификата.СерийныйНомер, ПериодДействия)
        Заблокирован = ДанныеКомпонентаВладельца.ДанныеСертификата.Заблокирован
        если не Заблокирован
            и ДанныеКомпонентаВладельца.ДанныеСертификата.ДатаНачала.НачалоДня().ВМомент(МенеджерДат.ЧасовойПоясТекущий()) + 7д > МенеджерДат.ТекущаяДатаВремя()
            
            ДоступноПолучениеНовогоСертификата = Ложь
        ;
    ;
    если ДоступноПолучениеНовогоСертификата и ДанныеКомпонентаВладельца.ЕстьЗапросыВРаботе
        ДоступноПолучениеНовогоСертификата = Ложь
    ;
    Компоненты.ЗапросыВыпускаСертификатовПодписиГруппа.ОбновитьДанныеФормы()
    если ДанныеКомпонентаВладельца.ЕстьЗапросыВРаботе
        ПодключитьОбработчикТаймера(&ОбновитьДанныеФормы, 10с, Истина)
    ;
;

метод ЗапроситьВыпускСертификатаСервисаПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    КлиентСервисаПодписания.ОткрытьЗапросВыпускаСертификатаПодписи(Неопределено)
;

@НаСервере @НаКлиенте
структура ДанныеКомпонента
    пер ДанныеСертификата: КлиентСервисаПодписания.ДанныеСертификата?
    пер ЕстьЗапросыВРаботе: Булево
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеКомпонентаВладельцаУнэп(ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка?,
    ВидЭлектроннойПодписи: ВидыЭлектронныхПодписей): ДанныеКомпонента
    
    знч ДанныеКомпонентаВладельца = новый ДанныеКомпонента()
    пер СервисПодписания = КлиентСервисаПодписания.СервисПодписанияПоВидуЭлектроннойПодписи(ВидЭлектроннойПодписи)
    если СервисПодписания != Неопределено
        ДанныеКомпонентаВладельца.ДанныеСертификата = 
            ИдентификаторыСертификатовУнэп.ДанныеСертификатаВладельца(ВладелецУнэп, СервисПодписания)
        если СервисПодписания == СервисыПодписания.АстралПлатформаУнэп
            ДанныеКомпонентаВладельца.ЕстьЗапросыВРаботе = ЗапросыВыпускаСертификатаПодписи.ЕстьЗапросВРаботе(ВладелецУнэп)
            если ДанныеКомпонентаВладельца.ДанныеСертификата == Неопределено
                и не ДанныеКомпонентаВладельца.ЕстьЗапросыВРаботе
                
                ДанныеКомпонентаВладельца.ДанныеСертификата = ОбменССервисомПодписания.ПолучитьДанныеСертификата(ВладелецУнэп, СервисПодписания)
            ;
        ;
    ;
    возврат ДанныеКомпонентаВладельца
;

метод УнэпАстралПлатформаВидимость(): Булево
    возврат ДоступныеВидыЭлектронныхПодписей.Содержит(ВидыЭлектронныхПодписей.УнэпАстралПлатформа)
;

метод ГосключВидимость(): Булево
    возврат ДоступныеВидыЭлектронныхПодписей.Содержит(ВидыЭлектронныхПодписей.Госключ)
;

метод ИнформацияГосключСодержимое(): Строка
    возврат КлиентСервисаПодписания.HtmlТекстИнформацииПодписанииСИспользованиемГосключа()
;

метод ВидЭлектроннойПодписиУнэпАстралПлатформаВидимость(): Булево
    возврат УнэпАстралПлатформаВидимость()
;

метод ВидЭлектроннойПодписиГосключВидимость(): Булево
    возврат ГосключВидимость()
;

метод ЭлектроннаяПодписьКомпонентЗаголовок(): Строка
    если ДоступныеВидыЭлектронныхПодписей.Размер() > 0
        возврат ""
    ;
    если не ВидЭлектроннойПодписиУнэпАстралПлатформаВидимость()
        возврат "Электронная подпись (УНЭП Астрал.Платформа)"
    ;
    возврат "Электронная подпись (Госключ)"
;

метод ИнформацияАстралПлатформаСодержимое(): Строка
    возврат КлиентСервисаПодписания.HtmlТекстИнформацииПодписанииСИспользованиемАстралПлатформа()
;

метод ВидЭлектроннойПодписиУнэпАстралПлатформаПриИзменении(Источник: РадиоКнопка, Событие: СобытиеПриИзменении<ВидыЭлектронныхПодписей>)
    ПриИзмененииВидаПодписи(Событие)
;

метод ВидЭлектроннойПодписиГосключПриИзменении(Источник: РадиоКнопка, Событие: СобытиеПриИзменении<ВидыЭлектронныхПодписей>)
    ПриИзмененииВидаПодписи(Событие)
;