импорт ИнтерфейсныеКомпонентыСтандартные
импорт ЛичныеКабинетыПользователей
импорт УниверсальныеМеханизмы
импорт ВзаимодействиеССервисомПодписания
импорт ФизическиеЛица
импорт Классификаторы

@ВПодсистеме
метод ПрочитатьДанныеДокумента()
    если не Объект.ЭтоНовый()
        знч ДанныеДокумента = ПрочитатьДополнительныеДанные(Объект.Ссылка)
        СостояниеЗапроса = ДанныеДокумента.Состояние?.СостояниеЗапроса
        СертификатНаПечать = ДанныеДокумента.СертификатНаПечать
        ДокументыПоЗапросуНаПолучение = ДанныеДокумента.ТабличныеЧасти.ДокументыПоЗапросуНаПолучение
        ТаблицаФайлы = ДанныеДокумента.ТабличныеЧасти.ТаблицаФайлы
    иначе
        ПроверитьЗаполнение()
    ;
;

метод ФизическоеЛицоВидимость(): Булево
    возврат Объект?.ВладелецУнэп != ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
;

@НаСервере @НаКлиенте
структура ТабличныеЧасти
    пер ТаблицаФайлы: ПрисоединенныеФайлы?
    пер ДокументыПоЗапросуНаПолучение: ОжидаемыеДокументы
;

@НаСервере @НаКлиенте
структура ДанныеДокумента
    пер Состояние: КлиентСервисаПодписания.СостояниеЗапросаВыпускаСертификата?
    пер СертификатНаПечать: ПрисоединенныйФайл?
    пер ТабличныеЧасти: ТабличныеЧасти?
;

@НаСервере
статический метод ДанныеТабличныхЧастей(СсылкаНаОбъект: ЗапросыВыпускаСертификатаПодписи.Ссылка): ТабличныеЧасти
    пер ДанныеТабличныхЧастей: ТабличныеЧасти
    ДанныеТабличныхЧастей.ТаблицаФайлы = ПрисоединенныеФайлыМенеджер.ПрисоединенныеФайлы(СсылкаНаОбъект)
    ДанныеТабличныхЧастей.ДокументыПоЗапросуНаПолучение = ОжидаемыеДокументыЗапросовВыпускаСертификатаПодписи.ОжидаемыеДокументыВладельца(СсылкаНаОбъект)
    возврат ДанныеТабличныхЧастей
;

@ВПодсистеме
метод ВозможноРедактирование(): Булево
    возврат СостояниеЗапроса == Неопределено
;

метод ЕстьУчетнаяЗаписьНаПорталеГосулугПриИзменении(Источник: Флажок, Событие: СобытиеПриИзменении<Булево?>)
    ОбновитьОжидаемыеВидыДокументов()
;

метод ОбновитьОжидаемыеВидыДокументов()
    пер ОжидаемыеТипы = новый Соответствие<ВидыЗапрашиваемыхКопийДокументов, ОжидаемыйДокумент>()
    для ДокументПоЗапросу из ДокументыПоЗапросуНаПолучение.Документы
        ОжидаемыеТипы.Вставить(ДокументПоЗапросу.ВидДокумента, ДокументПоЗапросу)
    ;
    если не Объект.ЕстьУчетнаяЗаписьНаПорталеГосулуг
        если не ОжидаемыеТипы.СодержитКлюч(ВидыЗапрашиваемыхКопийДокументов.Инн)
            ДокументыПоЗапросуНаПолучение.Документы.Добавить(новый ОжидаемыйДокумент(ВидыЗапрашиваемыхКопийДокументов.Инн))
        ;
        если не ОжидаемыеТипы.СодержитКлюч(ВидыЗапрашиваемыхКопийДокументов.Снилс)
            ДокументыПоЗапросуНаПолучение.Документы.Добавить(новый ОжидаемыйДокумент(ВидыЗапрашиваемыхКопийДокументов.Снилс))
        ;
        если не ОжидаемыеТипы.СодержитКлюч(ВидыЗапрашиваемыхКопийДокументов.Паспорт)
            ДокументыПоЗапросуНаПолучение.Документы.Добавить(новый ОжидаемыйДокумент(ВидыЗапрашиваемыхКопийДокументов.Паспорт))
        ;
    иначе
        пер ДокументПоЗапросу: ОжидаемыйДокумент?
        ДокументПоЗапросу = ОжидаемыеТипы.ПолучитьИлиУмолчание(ВидыЗапрашиваемыхКопийДокументов.Инн)
        если ДокументПоЗапросу != Неопределено и ДокументПоЗапросу.Файл == Неопределено
            ДокументыПоЗапросуНаПолучение.Документы.Удалить(ДокументПоЗапросу)
        ;
        ДокументПоЗапросу = ОжидаемыеТипы.ПолучитьИлиУмолчание(ВидыЗапрашиваемыхКопийДокументов.Снилс)
        если ДокументПоЗапросу != Неопределено и ДокументПоЗапросу.Файл == Неопределено
            ДокументыПоЗапросуНаПолучение.Документы.Удалить(ДокументПоЗапросу)
        ;
        ДокументПоЗапросу = ОжидаемыеТипы.ПолучитьИлиУмолчание(ВидыЗапрашиваемыхКопийДокументов.Паспорт)
        если ДокументПоЗапросу != Неопределено и ДокументПоЗапросу.Файл == Неопределено
            ДокументыПоЗапросуНаПолучение.Документы.Удалить(ДокументПоЗапросу)
        ;
    ;
;

// Проверка заполнения

@ВПодсистеме
метод ПроверитьЗаполнение(): Булево
    пер РезультатПроверки = ПроверитьСпособДоставкиКода()
    если РезультатПроверки
        РезультатПроверки = ПроверитьТелефон() и ПроверитьКонтактнуюИнформацию()
    ;
    РезультатПроверки = ПроверитьДокументКодПодразделения() и РезультатПроверки
    РезультатПроверки = ПроверитьДокументКемВыдан() и РезультатПроверки
    РезультатПроверки = ПроверитьДокументСерия() и РезультатПроверки
    РезультатПроверки = ПроверитьДокументНомер() и РезультатПроверки
    РезультатПроверки = ПроверитьМестоРождения() и РезультатПроверки
    РезультатПроверки = ПроверитьДатуРождения() и РезультатПроверки
    РезультатПроверки = ПроверитьФио() и РезультатПроверки
    РезультатПроверки = ПроверитьСнилс() и РезультатПроверки
    РезультатПроверки = ПроверитьИнн() и РезультатПроверки
    РезультатПроверки = ПроверитьГражданство() и РезультатПроверки
    если СостояниеЗапроса == СостоянияЗапросаВыпускаСертификата.ТребуетсяДополнительнаяИнформация
        РезультатПроверки = ПроверитьНаличиеПодписаннойКопииСведенийОСертификате() и РезультатПроверки
    ;
    возврат РезультатПроверки
;

метод ДокументКемВыданПриИзменении(Источник: ПолеВвода<Строка>, Событие: СобытиеПриИзменении<Строка>)
    ПроверитьДокументКемВыдан()
;

метод ПроверитьДокументКемВыдан(): Булево
    пер РезультатПроверки = Истина
    ДокументКемВыданСообщениеОбОшибкеВвода = ""
    если Объект.ДокументКемВыдан.Длина() > 200
        РезультатПроверки = Ложь
        ДокументКемВыданСообщениеОбОшибкеВвода = "Длина поля не может превышать 200 символов."
    ;
    возврат РезультатПроверки
;

метод ДокументКодПодразделенияПриИзменении(Источник: ПолеВвода<Строка>, Событие: СобытиеПриИзменении<Строка>)
    ПроверитьДокументКодПодразделения()
;

метод ПроверитьДокументКодПодразделения(): Булево
    пер РезультатПроверки = Истина
    ДокументКодПодразделенияСообщениеОбОшибкеВвода = ""
    если Объект.ДокументКодПодразделения.Длина() > 15
        РезультатПроверки = Ложь
        ДокументКодПодразделенияСообщениеОбОшибкеВвода = "Длина поля не может превышать 15 символов."
    ;
    возврат РезультатПроверки
;

метод ДокументСерияПриИзменении(Источник: ПолеВвода<Строка>, Событие: СобытиеПриИзменении<Строка>)
    ПроверитьДокументСерия()
;

метод ПроверитьДокументСерия(): Булево
    пер РезультатПроверки = Истина
    ДокументСерияСообщениеОбОшибкеВвода = ""
    если Объект.ДокументСерия.Длина() > 14
        РезультатПроверки = Ложь
        ДокументСерияСообщениеОбОшибкеВвода = "Длина серии не может превышать 14 символов."
    ;
    возврат РезультатПроверки
;

метод ДокументНомерПриИзменении(Источник: ПолеВвода<Строка>, Событие: СобытиеПриИзменении<Строка>)
    ПроверитьДокументНомер()
;

метод ПроверитьДокументНомер(): Булево
    пер РезультатПроверки = Истина
    ДокументНомерСообщениеОбОшибкеВвода = ""
    если Объект.ДокументНомер.Длина() > 20
        РезультатПроверки = Ложь
        ДокументНомерСообщениеОбОшибкеВвода = "Длина номера не может превышать 20 символов."
    ;
    возврат РезультатПроверки
;

метод МестоРожденияПриИзменении(Источник: ПолеВвода<Строка>, Событие: СобытиеПриИзменении<Строка>)
    ПроверитьМестоРождения()
;

метод ПроверитьМестоРождения(): Булево
    МестоРожденияСообщениеОбОшибкеВвода = ""
    если Объект.ДокументМестоРождения.Пусто()
        МестоРожденияСообщениеОбОшибкеВвода = "Необходимо заполнить место рождения (как в паспорте)"
        возврат Ложь
    ;
    возврат Истина
;

метод ДатаРожденияПриИзменении(Источник: ПолеВвода<Дата?>, Событие: СобытиеПриИзменении<Дата?>)
    ПроверитьДатуРождения()
;

метод ПроверитьДатуРождения(): Булево
    ДокументДатаРожденияСообщениеОбОшибкеВвода = ""
    если Объект.ДокументДатаРождения < Дата{1900-01-01}
        ДокументДатаРожденияСообщениеОбОшибкеВвода = "Необходимо заполнить дату рождения"
        возврат Ложь
    ;
    возврат Истина
;

метод ФамилияПриИзменении(Источник: ПолеВвода<Строка>, Событие: СобытиеПриИзменении<Строка>)
    ПроверитьФио()
;

метод ИмяПриИзменении(Источник: ПолеВвода<Строка>, Событие: СобытиеПриИзменении<Строка>)
    ПроверитьФио()
;

метод ПроверитьФио(): Булево
    ФиоСообщениеОбОшибкеВвода = ""
    если Объект.Фамилия.Пусто()
        или Объект.Имя.Пусто()
        
        ФиоСообщениеОбОшибкеВвода = "Фамилия и Имя обязательны для заполнения"
        возврат Ложь
    ;
    возврат Истина
;

метод СнилсПриИзменении(Источник: ПолеВвода<Строка>, Событие: СобытиеПриИзменении<Строка>)
    ПроверитьСнилс()
;

метод ПроверитьСнилс(): Булево
    СнилсСообщениеОбОшибкеВвода = ""
    если Объект.Снилс.Пусто()
        СнилсСообщениеОбОшибкеВвода = "Необходимо заполнить СНИЛС"
        возврат Ложь
    ;
    возврат Истина
;

метод ИннПриИзменении(Источник: ПолеВвода<Строка>, Событие: СобытиеПриИзменении<Строка>)
    ПроверитьИнн()
;

метод ПроверитьИнн(): Булево
    ИннСообщениеОбОшибкеВвода = ""
    если Объект.Инн.Пусто()
        ИннСообщениеОбОшибкеВвода = "Необходимо заполнить ИНН"
        возврат Ложь
    ;
    возврат Истина
;

метод ПочтаПриИзменении(Источник: ПолеВвода<Строка>, Событие: СобытиеПриИзменении<Строка>)
    ПроверитьКонтактнуюИнформацию()
;

метод ТелефонПриИзменении(Источник: ПолеВвода<Строка>, Событие: СобытиеПриИзменении<Строка>)
    ПроверитьТелефон()
    ПроверитьКонтактнуюИнформацию()
;

метод ПроверитьТелефон(): Булево
    знч Телефон = Объект.Телефон
    если Телефон.Длина() > 0
        и (Телефон.Длина() > 12
            или Телефон.Длина() < 11
            или Телефон.Длина() == 11 и не Телефон.ТолькоЦифры()
            или Телефон.Длина() == 12 и не Телефон.НачинаетсяС("+")
            или Телефон.Длина() == 12 и не Телефон.ПодстрокаСКонца(11).ТолькоЦифры())
        
        ТелефонСообщениеОбОшибкеВвода = "Номера телефона должен быть в международном формате (+79999999999)."
        возврат Ложь
    ;
    возврат Истина
;

метод СпособДоставкиКодаПриИзменении(Источник: ПолеВвода<СпособыДоставкиКодаПодтверждения>, Событие: СобытиеПриИзменении<СпособыДоставкиКодаПодтверждения>)
    ПроверитьСпособДоставкиКода()
;

метод ИдТелеграмЧатаПриИзменении(Источник: ПолеВвода<Число>, Событие: СобытиеПриИзменении<Число>)
    ПроверитьСпособДоставкиКода()
;

метод ПроверитьСпособДоставкиКода(): Булево
    ТелефонСообщениеОбОшибкеВвода = ""
    ИдТелеграмЧатаСообщениеОбОшибкеВвода = ""
    ПочтаСообщениеОбОшибкеВвода = ""
    выбор Объект.СпособДоставкиКода
        когда СпособыДоставкиКодаПодтверждения.ВЧатСТелеграмБотом
            если Объект.ИдТелеграмЧата == 0
                ИдТелеграмЧатаСообщениеОбОшибкеВвода = "Необходимо указать идентификатор чата с телеграм-ботом"
                возврат Ложь
            иначе
                возврат ПроверитьКонтактнуюИнформацию()
            ;
        когда СпособыДоставкиКодаПодтверждения.СмсНаНомерТелефона
            если Объект.Телефон.Пусто()
                ТелефонСообщениеОбОшибкеВвода = "Необходимо указать номер телефона"
                возврат Ложь
            ;
        когда СпособыДоставкиКодаПодтверждения.НаАдресЭлектроннойПочты
            если Объект.Почта.Пусто()
                ПочтаСообщениеОбОшибкеВвода = "Необходимо указать адрес электронной почты"
                возврат Ложь
            ;
    ;
    возврат Истина
;

метод ПроверитьКонтактнуюИнформацию(): Булево
    если Объект.Телефон.Пусто() и Объект.Почта.Пусто()
        ТелефонСообщениеОбОшибкеВвода = "Необходимо указать номер телефона или адрес электронной почты"
        возврат Ложь
    ;
    возврат Истина
;

метод ПроверитьНаличиеПодписаннойКопииСведенийОСертификате(): Булево
    для ОжидаемыйДокумент из ДокументыПоЗапросуНаПолучение.Документы
        если ОжидаемыйДокумент.ВидДокумента == ВидыЗапрашиваемыхКопийДокументов.СертификатПодписанный
            и ОжидаемыйДокумент.Файл == Неопределено
            
            СтандартныеФормы.ПоказатьУведомление(
                "Ошибка отправки документа",
                "Выберите файл для отправки",
                ОценкаИнформации.Отрицательная)
            возврат Ложь
        ;
    ;
    возврат Истина
;

метод СтранаПриИзменении(Источник: ПолеВвода<СтраныМира.Ссылка?>, Событие: СобытиеПриИзменении<СтраныМира.Ссылка?>)
    ПроверитьГражданство()
;

метод ПроверитьГражданство(): Булево
    ГражданствоСообщениеОбОшибкеВвода = ""
    если Объект.Гражданство == Неопределено
        ГражданствоСообщениеОбОшибкеВвода = "Необходимо указать страну гражданства"
        возврат Ложь
    ;
    возврат Истина
;

// Конец

// Контракт ВладелецПрисоединенныеФайлыКомпонент

@Реализация
@ВПроекте
метод ПрисоединенныеФайлыНачатаЗагрузкаФайлов(Источник: ПрисоединенныеФайлыКомпонент, Событие: неизвестно, ИдКомпонента: Строка = "")
    ИзменениеСостоянияЗагрузкиФайлов(новый СобытиеСДанными(Истина))
;

@Реализация
@ВПроекте
метод ПрисоединенныеФайлыЗавершенаЗагрузкаФайлов(Источник: ПрисоединенныеФайлыКомпонент, Событие: неизвестно, ИдКомпонента: Строка = "")
    ИзменениеСостоянияЗагрузкиФайлов(новый СобытиеСДанными(Ложь))
;
// Конец ВладелецПрисоединенныеФайлыКомпонент

@НаСервере @ДоступноСКлиента
статический метод ЗагрузитьЗапросВыпускаСертификата(ЗапросВыпускаСертификата: ЗапросыВыпускаСертификатаПодписи.Ссылка): ЗапросыВыпускаСертификатаПодписи.Объект
    возврат ЗапросВыпускаСертификата.ЗагрузитьОбъект()
;

@НаСервере @ДоступноСКлиента
статический метод ПрочитатьДополнительныеДанные(ЗапросВыпускаСертификата: ЗапросыВыпускаСертификатаПодписи.Ссылка): ДанныеДокумента
    знч ДанныеЗапроса = новый ДанныеДокумента()
    ДанныеЗапроса.Состояние = СостоянияЗапросовВыпускаСертификатаПодписи.СостояниеЗапроса(ЗапросВыпускаСертификата)
    ДанныеЗапроса.ТабличныеЧасти = ДанныеТабличныхЧастей(ЗапросВыпускаСертификата)
    знч ДанныеСертификата = ИдентификаторыСертификатовУнэп.ДанныеСертификата(ЗапросВыпускаСертификата)
    если ДанныеСертификата != Неопределено и ДанныеСертификата.ФайлПечатнойФормы != Неопределено
        для ПрисоединенныйФайл из ДанныеЗапроса.ТабличныеЧасти.ТаблицаФайлы.Файлы
            если ДанныеСертификата.ФайлПечатнойФормы == ПрисоединенныйФайл.Ссылка
                ДанныеЗапроса.СертификатНаПечать = ПрисоединенныйФайл
                прервать
            ;
        ;
    ;
    возврат ДанныеЗапроса
;

метод РезультатПроверкиДанных(ОшибкаСтрокой: Строка): РезультатПроверкиДанных
    возврат ОшибкаСтрокой.Пусто() ? РезультатПроверкиДанных.Отсутствует : РезультатПроверкиДанных.Ошибка
;

метод ДокументВидПриИзменении(Источник: ПолеВвода<ДокументыУдостоверяющиеЛичность>, Событие: СобытиеПриИзменении<ДокументыУдостоверяющиеЛичность>)
    если Объект.ДокументВид == ДокументыУдостоверяющиеЛичность.Паспорт
        Объект.Гражданство = СтраныМира.Россия()
    иначе
        Объект.Гражданство = Неопределено
    ;
;

метод ТекстНадписиОНеобходимостиУчетнойЗаписиГосуслуг(): Строка
    возврат
        "Для выпуска сертификата подписиси УНЭП, необходима подтвержденная учетная запись на портале Госуслуг.
        Нажимая \"Отправить запрос\" подтверждаю наличие подтвержденной учетной записи портала Госуслуги."
;

метод ОранжевыйЦветКоннотации(): Цвет
    возврат БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Оранжевый)
;