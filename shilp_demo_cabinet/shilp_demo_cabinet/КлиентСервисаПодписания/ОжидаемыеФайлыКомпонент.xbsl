импорт ИнтерфейсныеКомпонентыСтандартные
импорт ОбщиеСтандартные
импорт СтандартноеПриложение
импорт УниверсальныеМеханизмы
импорт ВзаимодействиеССервисомПодписания

метод Данные(): Массив<ОжидаемыйДокумент>
    пер ДокументыПоЗапросу = новый Массив<ОжидаемыйДокумент>()
    ДокументыПоЗапросу.ДобавитьВсе(ДокументыПоЗапросуНаПолучение.Документы)
    возврат ДокументыПоЗапросу
;

метод ДокументыПоЗапросуНаПолучениеМаксимальнаяШирина(): Число
    возврат ОсновнойИнтерфейс.МаксимальнаяШиринаФормыДокумента() - 8 * Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА
;

метод ДокументыПоЗапросуНаПолучениеМинимальнаяШирина(): Число
    возврат ОсновнойИнтерфейс.МинимальнаяШиринаФормыДокумента() - 8 * Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА
;

метод ВыборФайлаПриПеретаскивании(Источник: Компонент, Событие: СобытиеПриПеретаскивании, ДанныеСтроки: Объект?)
    если (Событие.Значение это Массив<неизвестно>)
        если не Событие.Значение.Пусто() и (Событие.Значение[0] это ВыбранныйФайл)
            ВыполнитьВыборФайла(Событие.Значение[0], ДанныеСтроки как ОжидаемыйДокумент)
        ;
    ;
;

метод ВыборФайлаПриИзменении(Источник: ВыборФайлов, Событие: СобытиеПриИзменении<ЧитаемыйМассив<ВыбранныйФайл>>, ДанныеСтроки: Объект?)
    ВыполнитьВыборФайла(Событие.НовоеЗначение[0], ДанныеСтроки как ОжидаемыйДокумент)
;

метод ПрисоединенныйФайлПояснениеЗаголовок(ДанныеСтроки: ОжидаемыйДокумент): Строка
    если ДанныеСтроки.ВремяРегистрации это Момент
        возврат "Передан %{МенеджерДат.ФорматМомента(ДанныеСтроки.ВремяРегистрации, "дд ММММ гггг (ЧЧ:мм:сс)")}"
    ;
    возврат "Ожидает передачи"
;

метод ВыполнитьВыборФайла(ВыбранныйФайл: ВыбранныйФайл, ДанныеСтроки: ОжидаемыйДокумент)
    знч МаксимальныйРазмерФайла = ПрисоединенныеФайлыКлиентСервер.МаксимальноДопустимыйРазмерФайлаВМегабайтах() * МенеджерФайловКлиентСервер.МЕГАБАЙТ
    НачатаЗагрузкаФайлов(новый СобытиеКомпонента())
    ПодключитьОбработчикТаймера(&ПроверитьЗавершениеЗагрузкиФайлов, 1с, Истина)
    
    пер ИменаФайловСОшибкой = новый Массив<Строка>()
    пер ЗагружаемыеФайлы = новый Массив<ПрисоединенныйФайл>()
    
    если ВыбранныйФайл.Размер > МаксимальныйРазмерФайла
        и не МенеджерФайловКлиентСервер.ЭтоРасширениеФайлаКартинки(ВыбранныйФайл.Расширение)
        
        ИменаФайловСОшибкой.Добавить(
            "%{ВыбранныйФайл.Имя} (%{МенеджерФайловКлиентСервер.ПредставлениеРазмера(ВыбранныйФайл.Размер)})")
    иначе

        ДанныеСтроки.Файл = новый ПрисоединенныйФайл()
        ЗагружаемыеФайлы.Добавить(ДанныеСтроки.Файл)
        ДанныеСтроки.Файл.ЗагрузкаФайла = ЗагрузкаФайлов.НачатьЗагрузку(ВыбранныйФайл)
        ДанныеСтроки.Файл.Наименование = ВыбранныйФайл.Имя     
        ДанныеСтроки.Файл.Расширение = ВыбранныйФайл.Расширение
        если не ДанныеСтроки.Файл.Расширение.Пусто()
            ДанныеСтроки.Файл.Наименование = ДанныеСтроки.Файл.Наименование.Заменить(
                "." + ДанныеСтроки.Файл.Расширение, "")
        ;
        ДанныеСтроки.Файл.Размер = ВыбранныйФайл.Размер
        ДанныеСтроки.Файл.АдресКартинкиРасширения = АдресКартинкиРасширения(ВыбранныйФайл.Расширение)
        ДанныеСтроки.Файл.ДатаСоздания = МенеджерДат.ТекущаяДатаВремя()
        СобственнаяМодифицированность = Истина
    ;
        
    если не ИменаФайловСОшибкой.Пусто()
        пер ТекстСообщения: Строка
        если ИменаФайловСОшибкой.Размер() == 1
            ТекстСообщения =
                "Файл %{ИменаФайловСОшибкой[0]} слишком большой.
                Допустимый размер файлов %{МенеджерФайловКлиентСервер.ПредставлениеРазмера(МаксимальныйРазмерФайла)}"
        иначе если ИменаФайловСОшибкой.Размер() > 3
            ТекстСообщения =
                "Файлы %{Строки.Соединить(ИменаФайловСОшибкой.ПодМассив(0, 2), ", ")} (и еще %{ИменаФайловСОшибкой.Размер() - 2}) - слишком большие.
                Допустимый размер файлов %{МенеджерФайловКлиентСервер.ПредставлениеРазмера(МаксимальныйРазмерФайла)}"
        иначе
            ТекстСообщения =
                "Файлы %{Строки.Соединить(ИменаФайловСОшибкой, ", ")} - слишком большие.
                Допустимый размер файлов %{МенеджерФайловКлиентСервер.ПредставлениеРазмера(МаксимальныйРазмерФайла)}"
        ;
        СообщениеОбОшибке.ОткрытьВМодальномОкне(ТекстСообщения = ТекстСообщения)
    ;
    для ОписаниеЗагрузкиФайла из ЗагружаемыеФайлы
        ОписаниеЗагрузкиФайла.Хранилище = ОписаниеЗагрузкиФайла.ЗагрузкаФайла.ПолучитьРезультат()
        ОписаниеЗагрузкиФайла.ЗагрузкаФайла = Неопределено
    ;
;

метод ПроверитьЗавершениеЗагрузкиФайлов()
    для ДанныеСтроки из ДокументыПоЗапросуНаПолучение.Документы
        если ДанныеСтроки.Файл != Неопределено и ДанныеСтроки.Файл.ЗагрузкаФайла != Неопределено
            ПодключитьОбработчикТаймера(&ПроверитьЗавершениеЗагрузкиФайлов, 1с, Истина)
            возврат
        ;
        ПроверкаЗагрузкиФайлов(ДанныеСтроки)
    ;
    ЗавершенаЗагрузкаФайлов(новый СобытиеКомпонента())
;

метод ПроверкаЗагрузкиФайлов(ДанныеСтроки: ОжидаемыйДокумент)
    если ДанныеСтроки.Файл != Неопределено и ДанныеСтроки.Файл.Ссылка == Неопределено
        если ПроверкаЗагрузкиФайлов(ДанныеСтроки.Файл.Хранилище)
            ДанныеСтроки.Файл.ОшибкаЗагрузки = Истина
        ;
    ;
;

@НаСервере @ДоступноСКлиента
статический метод АдресКартинкиРасширения(Расширение: Строка): ДвоичныйОбъект.Ссылка?
    возврат ПрисоединенныеФайлыМенеджер.АдресКартинкиРасширения(Расширение)
;

@НаСервере @ДоступноСКлиента
статический метод ПроверкаЗагрузкиФайлов(Хранилище: ДвоичныйОбъект.Ссылка): Булево
    пер ДвоичныеДанныеОбъект: ДвоичныйОбъект?
    попытка
        ДвоичныеДанныеОбъект = Хранилище.Загрузить()
    поймать Ошибка: Исключение
        возврат Истина
    ;
    если ДвоичныеДанныеОбъект == Неопределено
        возврат Истина
    ;
    возврат Ложь
;

метод ЗаголовокФайла(ДанныеСтроки: ОжидаемыйДокумент): Строка
    если ДанныеСтроки.ВидДокумента == ВидыЗапрашиваемыхКопийДокументов.СертификатПодписанный
        возврат "Сведения о сертификате"
    ;
    возврат ДанныеСтроки.ВидДокумента.Представление()
;

метод ВыборФайлаЗаголовок(ДанныеСтроки: ОжидаемыйДокумент): Строка
    если ДанныеСтроки.ВидДокумента == ВидыЗапрашиваемыхКопийДокументов.СертификатПодписанный
        возврат
            "Распечатайте, подпишите, выберите файл копии подписанных сведений о сертификате"
    ;
    возврат "Выбрать файл копии документа"
;

метод ВыборФайлаВидимость(ДанныеСтроки: ОжидаемыйДокумент): Булево
    возврат ДанныеСтроки.Файл == Неопределено
            и (не РежимПросмотра
                или ДанныеСтроки.ВидДокумента == ВидыЗапрашиваемыхКопийДокументов.СертификатПодписанный
                    и СертификатНаПечать != Неопределено)
;

метод УдалитьФайлОбработчик(Команда: КомандаСПараметром<ОжидаемыйДокумент>, ДанныеСтроки: ОжидаемыйДокумент)
    ДанныеСтроки.Файл = Неопределено
;

метод УдалитьФайлВидимость(ДанныеСтроки: ОжидаемыйДокумент): Булево
    возврат ДанныеСтроки.Файл != Неопределено
        и не (ДанныеСтроки.ВремяРегистрации это Момент)
;

метод ПрисоединенныйФайлКомпонентЗаголовок(ДанныеСтроки: ОжидаемыйДокумент): Строка
    если ДанныеСтроки.ВидДокумента == ВидыЗапрашиваемыхКопийДокументов.СертификатПодписанный
        возврат "Подписанные сведения о сертификате"
    ;
    возврат ""
;