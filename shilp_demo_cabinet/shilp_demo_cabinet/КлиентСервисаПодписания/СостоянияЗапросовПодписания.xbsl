импорт ВзаимодействиеССервисомПодписания
импорт Компания::Согласования
импорт ОбщиеСтандартные
импорт УниверсальныеМеханизмы
импорт ФизическиеЛица
импорт КонтрольДоступа

//КонтрольДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат [КонтрольДоступа.ПолныйДоступАутентифицированным(этот)]
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Записи: ЧитаемыйМассив<СостоянияЗапросовПодписания.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<СостоянияЗапросовПодписания.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    возврат КлиентСервисаПодписанияКонтрольДоступаПоставщик.ПолучитьСервис()
        .ВычислитьРазрешенияДоступаДляСостоянийЗапросовПодписания(Записи)
;

//КонтрольДоступа

@ВПодсистеме
метод ЗарегистрироватьИдентификаторЗапроса(
    ДанныеДокументов: Соответствие<ДокументПодписываемыйВСервисеПодписания.Ссылка, КлиентСервисаПодписания.ДанныеПодписываемогоДокумента>,
    СервисПодписания: СервисыПодписания, ИдентификаторЗапроса: Строка,
    ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка)
    
    пер СостояниеЗапроса = СостоянияЗапросаПодписания.Обрабатывается
    выбор СервисПодписания
        когда СервисыПодписания.АстралПлатформаУнэп
            СостояниеЗапроса = СостоянияЗапросаПодписания.ТребуетсяКодПодтвержденияОперации
    ;
    
    знч НаборЗаписей = новый СостоянияЗапросовПодписания.НаборЗаписей()
    НаборЗаписей.Фильтр.ИдентификаторЗапроса.Установить(ИдентификаторЗапроса)
    для ДанныеДокумента из ДанныеДокументов
        НаборЗаписей.ДобавитьЗапись(
            Документ = ДанныеДокумента.Ключ,
            ИдентификаторЗапроса = ИдентификаторЗапроса,
            СостояниеЗапроса = СостояниеЗапроса,
            ВремяРегистрации = МенеджерДат.ТекущаяДатаВремя(),
            СервисПодписания = СервисПодписания,
            СрокИсполнения = МенеджерДат.ТекущаяДатаВремя() + КлиентСервисаПодписания.ДлительностьПодписания(СервисПодписания),
            ВладелецУнэп = ВладелецУнэп,
            РольПодписанта = ДанныеДокумента.Значение.Роль,
            НомерШагаСогласования = ДанныеДокумента.Значение.НомерШагаСогласования
        )
    ;
    НаборЗаписей.Записать()
;

@ВПодсистеме
метод ЗарегистрироватьСостояние(ИдентификаторЗапроса: Строка, СостояниеЗапроса: СостоянияЗапросаПодписания, Информация: Строка)
    знч НаборЗаписей = новый СостоянияЗапросовПодписания.НаборЗаписей()
    НаборЗаписей.Фильтр.ИдентификаторЗапроса.Установить(ИдентификаторЗапроса)
    НаборЗаписей.Прочитать()
    для Запись из НаборЗаписей
        если Запись.СостояниеЗапроса != СостоянияЗапросаПодписания.ОперацияПрервана
            и Запись.СостояниеЗапроса != СостоянияЗапросаПодписания.ПодписаниеВыполнено
            
            если Запись.СостояниеЗапроса != СостояниеЗапроса
                или Запись.Информация != Информация
                
                Запись.СостояниеЗапроса = СостояниеЗапроса
                Запись.ВремяРегистрации = МенеджерДат.ТекущаяДатаВремя()
                Запись.Информация = Информация
                НаборЗаписей.Записать()
            ;
            выбор СостояниеЗапроса
                когда СостоянияЗапросаПодписания.ПодписаниеВыполнено
                    ОбменССервисомПодписания.ПолучитьРезультатыПодписания(ИдентификаторЗапроса)
                когда СостоянияЗапросаПодписания.ОперацияПрервана
                    СогласованияДокументов.ОтменитьОтправкуНаСогласованиеДокумента(
                        Запись.Документ как ПодписываемыйДокумент.Ссылка,
                        Запись.ВладелецУнэп как ФизическиеЛица.Ссылка,
                        Запись.РольПодписанта)
            ;
            ОбновлениеДанныхСервис.ПолучитьСервис().УстановитьПризнакТребуетсяОбновление(Запись.ВладелецУнэп как ФизическиеЛица.Ссылка)
        ;
    ;
;

@ВПодсистеме
метод СостояниеЗапроса(ИдентификаторЗапроса: Строка): КлиентСервисаПодписания.СостояниеЗапросаПодписания?
    возврат СостояниеЗапросов([ИдентификаторЗапроса]).ПолучитьИлиУмолчание(ИдентификаторЗапроса)
;

@ВПодсистеме
метод СостояниеЗапросов(ИдентификаторыЗапросов: Массив<Строка>? = Неопределено):
    Соответствие<Строка, КлиентСервисаПодписания.СостояниеЗапросаПодписания>
    
    знч ДанныеСостояний = новый Соответствие<Строка, КлиентСервисаПодписания.СостояниеЗапросаПодписания>()
    знч ВсеЗапросы = ИдентификаторыЗапросов == Неопределено
    знч ИнтересуемыеСостоянияЗапросов = новый Массив<СостоянияЗапросаПодписания>()
    ИнтересуемыеСостоянияЗапросов.Добавить(СостоянияЗапросаПодписания.Обрабатывается)
    ИнтересуемыеСостоянияЗапросов.Добавить(СостоянияЗапросаПодписания.ТребуетсяКодПодтвержденияОперации)
    знч Запрос = Запрос{
        Выбрать
            Документ Как Документ,
            ИдентификаторЗапроса Как ИдентификаторЗапроса,
            СостояниеЗапроса Как СостояниеЗапроса,
            Информация Как Информация,
            ВремяРегистрации Как ВремяРегистрации,
            СервисПодписания Как СервисПодписания,
            СрокИсполнения Как СрокИсполнения,
            ВладелецУнэп Как ВладелецУнэп,
            РольПодписанта Как РольПодписанта,
            НомерШагаСогласования Как НомерШагаСогласования
        Из
            СостоянияЗапросовПодписания Как СостоянияЗапросов
        Где
            СрокИсполнения >= %{МенеджерДат.ТекущаяДатаВремя()}
            И (Не %ВсеЗапросы
                или СостояниеЗапроса В (%ИнтересуемыеСостоянияЗапросов))
            И (%ВсеЗапросы
                Или ИдентификаторЗапроса В (%ИдентификаторыЗапросов))}
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ДанныеСостояний.Вставить(СтрокаРезультата.ИдентификаторЗапроса,
            новый КлиентСервисаПодписания.СостояниеЗапросаПодписания(
                Документ = СтрокаРезультата.Документ,
                ИдентификаторЗапроса = СтрокаРезультата.ИдентификаторЗапроса,
                СостояниеЗапроса = СтрокаРезультата.СостояниеЗапроса,
                Информация = СтрокаРезультата.Информация,
                ВремяРегистрации = СтрокаРезультата.ВремяРегистрации,
                СервисПодписания = СтрокаРезультата.СервисПодписания,
                СрокИсполнения = СтрокаРезультата.СрокИсполнения,
                ВладелецУнэп = СтрокаРезультата.ВладелецУнэп,
                РольПодписанта = СтрокаРезультата.РольПодписанта,
                НомерШагаСогласования = СтрокаРезультата.НомерШагаСогласования
            )
        )
    ;
    возврат ДанныеСостояний
;

@ВПодсистеме
метод ДанныеОтправокНаПодписание(Документы: Массив<ДокументПодписываемыйВСервисеПодписания.Ссылка>):
    Соответствие<ДокументПодписываемыйВСервисеПодписания.Ссылка, КлиентСервисаПодписания.ДанныеОтправкиНаПодписание>

    знч ДанныеОтправок = новый Соответствие<ДокументПодписываемыйВСервисеПодписания.Ссылка, КлиентСервисаПодписания.ДанныеОтправкиНаПодписание>()
    
    знч Запрос = Запрос{
        Выбрать
            Документ Как Документ,
            ИдентификаторЗапроса Как ИдентификаторЗапроса,
            СостояниеЗапроса Как СостояниеЗапроса,
            Информация Как Информация,
            ВремяРегистрации Как ВремяРегистрации,
            СервисПодписания Как СервисПодписания,
            СрокИсполнения Как СрокИсполнения,
            ВладелецУнэп Как ВладелецУнэп,
            РольПодписанта Как РольПодписанта
        Из
            СостоянияЗапросовПодписания Как СостоянияЗапросов
        Где
            СрокИсполнения >= %{МенеджерДат.ТекущаяДатаВремя()}
            И Документ В (%Документы)}
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ДанныеОтправок.Вставить(СтрокаРезультата.Документ, новый КлиентСервисаПодписания.ДанныеОтправкиНаПодписание(
            КлиентСервисаПодписания.ВидЭлектроннойПодписиПоСервисуПодписания(СтрокаРезультата.СервисПодписания),
            СтрокаРезультата.ИдентификаторЗапроса,
            СтрокаРезультата.ВремяРегистрации))
    ;
    возврат ДанныеОтправок
;

@ВПодсистеме
метод ДокументОжидаетПодписания(Документ: ДокументПодписываемыйВСервисеПодписания.Ссылка, ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка): Булево
  
    знч Запрос = Запрос{
        Выбрать
            Документ Как Документ
        Из
            СостоянияЗапросовПодписания
        Где
            Документ == %Документ
            и ВладелецУнэп == %ВладелецУнэп
            и СостояниеЗапроса В (СостоянияЗапросаПодписания.Обрабатывается, СостоянияЗапросаПодписания.ТребуетсяКодПодтвержденияОперации)
            и СрокИсполнения >= %{МенеджерДат.ТекущаяДатаВремя()}}
    исп Результат = Запрос.Выполнить()
    возврат не Результат.Пусто()
;

@ВПодсистеме
метод УдалитьЗапросыПодписанияДокумента(Документ: ДокументПодписываемыйВСервисеПодписания.Ссылка)
    знч НаборЗаписей = новый СостоянияЗапросовПодписания.НаборЗаписей()
    НаборЗаписей.Фильтр.Документ.Установить(Документ)
    НаборЗаписей.Записать()
;

@ВПодсистеме
метод УдалитьЗапросПодписанияДокументов(ИдентификаторЗапроса: Строка)
    знч НаборЗаписей = новый СостоянияЗапросовПодписания.НаборЗаписей()
    НаборЗаписей.Фильтр.ИдентификаторЗапроса.Установить(ИдентификаторЗапроса)
    НаборЗаписей.Записать()
;

@ВПодсистеме
метод ОтменитьПросроченныеПодписания()
    знч ИнтересуемыеСостоянияЗапросов = новый Массив<СостоянияЗапросаПодписания>()
    ИнтересуемыеСостоянияЗапросов.Добавить(СостоянияЗапросаПодписания.Обрабатывается)
    ИнтересуемыеСостоянияЗапросов.Добавить(СостоянияЗапросаПодписания.ТребуетсяКодПодтвержденияОперации)
    знч Запрос = Запрос{
        Выбрать
            СостоянияЗапросов.Документ Как Документ,
            СостоянияЗапросов.ВладелецУнэп Как ВладелецУнэп,
            СостоянияЗапросов.РольПодписанта Как РольПодписанта
        Из
            СостоянияЗапросовПодписания Как СостоянияЗапросов
                Внутреннее Соединение СогласованияДокументов Как СогласованияДокументов
                По СостоянияЗапросов.Документ == СогласованияДокументов.Документ
                    И СостоянияЗапросов.ВладелецУнэп == СогласованияДокументов.УчастникСогласования
                    И СостоянияЗапросов.РольПодписанта == СогласованияДокументов.РольПодписанта
                    И СогласованияДокументов.Результат == РезультатыСогласования.НаСогласовании
        Где
            СостоянияЗапросов.СрокИсполнения < %{МенеджерДат.ТекущаяДатаВремя()}
            И СостоянияЗапросов.СостояниеЗапроса В (%ИнтересуемыеСостоянияЗапросов)}
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        СогласованияДокументов.ОтменитьОтправкуНаСогласованиеДокумента(
            СтрокаРезультата.Документ как ПодписываемыйДокумент.Ссылка,
            СтрокаРезультата.ВладелецУнэп как ФизическиеЛица.Ссылка,
            СтрокаРезультата.РольПодписанта)
    ;
;
