импорт ВзаимодействиеСBearerСервером
импорт ВзаимодействиеССервисомПодписания
импорт Классификаторы
импорт Компания::Согласования
импорт СтандартноеПриложение
импорт ФизическиеЛица
импорт ОбщиеСтандартные
импорт УниверсальныеМеханизмы
импорт КриптографияСтандартные

конст КЛЮЧ_ЗАДАНИЯ_ПОЛУЧЕНИЯ_СОСТОЯНИЙ_ЗАПРОСОВ_ВЫПУСКА_СЕРТИФИКАТОВ = "ПолучениеСостоянийЗапросовВыпускаСертификатов"

конст КЛЮЧ_ЗАДАНИЯ_ПОЛУЧЕНИЯ_СОСТОЯНИЙ_ЗАПРОСОВ_ПОДПИСАНИЯ = "ПолучениеСостоянийЗапросовПодписания"


структура ОтветНаHttpЗапрос
    пер КодСостояния: Число
    пер Тело: Строка
;

@ВПодсистеме
структура ДанныеПереданногоФайла
    знч Идентификатор: Строка
    знч СрокХранения: Момент
;

@ВПодсистеме
метод ОтправитьФайл(ИмяФайла: Строка, Размер: Число, Расширение: Строка, Данные: ДвоичныйОбъект.Ссылка): ДанныеПереданногоФайла
    знч Ответ = ВыполнитьPostЗапросКПлатформе("files",
        СериализацияJson.ЗаписатьОбъект(
            новый ФорматДанных.ДанныеФайлаJson_V1_0(ИмяФайла, Размер, Расширение), ФорматДанных.НастройкиЗаписиОбъектов()))
    знч ОтветСервиса = СериализацияJson.ПрочитатьОбъект(Ответ.Тело, Тип<ФорматДанных.ДанныеСохраненногоФайлаJson_V1_0>,
        ФорматДанных.НастройкиЧтенияОбъектов())
    знч Настройки = КлиентСервисаПодписания.НастройкиСервиса()
    пер HttpЗапрос = PostЗапросКПлатформе(Настройки, "files/%{ОтветСервиса.ИдФайла}", Данные.Загрузить().ОткрытьПотокЧтения())
    исп HttpОтвет = ВыполнитьЗапрос(HttpЗапрос, Настройки)
    если HttpОтвет.КодСостояния != 200
        выбросить новый ИсключениеВыполнения(HttpОтвет.Тело.ПрочитатьКакСтроку())
    ;
    возврат новый ДанныеПереданногоФайла(ОтветСервиса.ИдФайла, ОтветСервиса.СрокХранения)
;

@ВПодсистеме
метод ОтправитьЗапросВыпускаСертификата(ЗапросВыпускаСертификата: ЗапросыВыпускаСертификатаПодписи.Ссылка,
    СервисПодписания: СервисыПодписания)
    
    знч ДанныеЗапроса = ЗапросыВыпускаСертификатаПодписи.ДанныеЗапроса(ЗапросВыпускаСертификата)
    знч ЗапросНаВыпускСертификатаJson = новый ФорматДанных.ЗапросВыпускаСертификатаJson_V1_0(
        ТипСервиса = ФорматДанных.СервисыПодписанияВJson(СервисПодписания),
        Снилс = ДанныеЗапроса["Снилс"] как Строка,
        Фамилия = ДанныеЗапроса["Фамилия"] как Строка,
        Имя = ДанныеЗапроса["Имя"] как Строка,
        Пол = ПолВJson(ДанныеЗапроса["Пол"] как ПолФизическогоЛица),
        ДатаРождения = ДанныеЗапроса["ДокументДатаРождения"] как Дата,
        Инн = ДанныеЗапроса["Инн"] как Строка,
        Отчество = ДанныеЗапроса["Отчество"] как Строка,
        Гражданство = СтраныМира.СвойстваЭлемента(ДанныеЗапроса["Гражданство"] как СтраныМира.Ссылка).Код,
        ДокументМестоРождения = ДанныеЗапроса["ДокументМестоРождения"] как Строка,
        ДокументНомер = ДанныеЗапроса["ДокументНомер"] как Строка,
        ДокументСерия = ДанныеЗапроса["ДокументСерия"] как Строка,
        ДокументДатаВыдачи = ДанныеЗапроса["ДокументДатаВыдачи"] как Дата,
        ДокументКемВыдан = ДанныеЗапроса["ДокументКемВыдан"] как Строка,
        ДокументКодПодразделения = ДанныеЗапроса["ДокументКодПодразделения"] как Строка,
        СпособДоставкиКода = ФорматДанных.СпособыДоставкиКодаПодтвержденияВJson(
            ДанныеЗапроса["СпособДоставкиКода"] как СпособыДоставкиКодаПодтверждения)
    )
    если не (ДанныеЗапроса["Телефон"] как Строка).Пусто()
        ЗапросНаВыпускСертификатаJson.Телефон = ДанныеЗапроса["Телефон"] как Строка
    ;
    если не (ДанныеЗапроса["Почта"] как Строка).Пусто()
        ЗапросНаВыпускСертификатаJson.Почта = ДанныеЗапроса["Почта"] как Строка
    ;
    если (ДанныеЗапроса["СпособДоставкиКода"] как СпособыДоставкиКодаПодтверждения) == СпособыДоставкиКодаПодтверждения.ВЧатСТелеграмБотом
        ЗапросНаВыпускСертификатаJson.ИдТелеграмЧата = ДанныеЗапроса["ИдТелеграмЧата"] как Число
    ;
    знч ОжидаемыеДокументы = ОжидаемыеДокументыЗапросовВыпускаСертификатаПодписи.ОжидаемыеДокументыВладельца(ЗапросВыпускаСертификата)
    для ОжидаемыйДокумент из ОжидаемыеДокументы.Документы
        если ОжидаемыйДокумент.ВидДокумента == ВидыЗапрашиваемыхКопийДокументов.Паспорт
            ЗапросНаВыпускСертификатаJson.ИдФайлаКопииПаспорта = ОжидаемыйДокумент.Идентификатор
        ;
        если ОжидаемыйДокумент.ВидДокумента == ВидыЗапрашиваемыхКопийДокументов.Инн
            ЗапросНаВыпускСертификатаJson.ИдФайлаКопииИнн = ОжидаемыйДокумент.Идентификатор
        ;
        если ОжидаемыйДокумент.ВидДокумента == ВидыЗапрашиваемыхКопийДокументов.Снилс
            ЗапросНаВыпускСертификатаJson.ИдФайлаКопииСнилс = ОжидаемыйДокумент.Идентификатор
        ;
    ;
    знч Ответ = ВыполнитьPostЗапросКПлатформе("certificateRequests",
        СериализацияJson.ЗаписатьОбъект(ЗапросНаВыпускСертификатаJson, ФорматДанных.НастройкиЗаписиОбъектов()))
    если Ответ.КодСостояния == 200
        знч ОтветСервиса = СериализацияJson.ПрочитатьОбъект(
            Ответ.Тело, Тип<ФорматДанных.ОтветНаЗапросВыпускаСертификатаJson_V1_0>, ФорматДанных.НастройкиЧтенияОбъектов())
        СостоянияЗапросовВыпускаСертификатаПодписи.ЗарегистрироватьЗапрос(
            ЗапросВыпускаСертификата,
            ОтветСервиса.Ид)
        НастройкиПодписанияВладельцевУнэп.ОбновитьСпособДоставкиКодаПодтверждения(
            ДанныеЗапроса["ВладелецУнэп"] как ВладелецСертификатовСервисаПодписания.Ссылка, 
            ДанныеЗапроса["СпособДоставкиКода"] как СпособыДоставкиКодаПодтверждения)
    иначе
        выбросить новый ИсключениеВыполнения(
            "%{Ответ.КодСостояния}: %{Ответ.Тело}"
        )
    ;
;

@ВПодсистеме
метод ОтправитьСертификатПодписанный(ЗапросВыпускаСертификата: ЗапросыВыпускаСертификатаПодписи.Ссылка, ИдентификаторФайла: Строка)
    знч ДанныеСостояния = СостоянияЗапросовВыпускаСертификатаПодписи.СостояниеЗапроса(ЗапросВыпускаСертификата)
    знч Ответ = ВыполнитьPostЗапросКПлатформе("certificateRequests/%{ДанныеСостояния.ИдентификаторЗапроса}/signedCertificate",
        СериализацияJson.ЗаписатьОбъект(
                новый ФорматДанных.ЗапросОтправкиИдентификатораФайлаКопииПодписанногоСертификатаJson_V1_0(ИдентификаторФайла),
        ФорматДанных.НастройкиЗаписиОбъектов()))
    если Ответ.КодСостояния == 200
        СостоянияЗапросовВыпускаСертификатаПодписи.УстановитьСостояниеЗапроса(
            ЗапросВыпускаСертификата, СостоянияЗапросаВыпускаСертификата.Обрабатывается, "")
    иначе
        выбросить новый ИсключениеВыполнения(
            "%{Ответ.КодСостояния}: %{Ответ.Тело}"
        )
    ;
;

@ВПодсистеме
метод ИдентификаторЗапросаНаПодписаниеВГосключ(
        ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка,
        ДанныеДокументов: Соответствие<ДокументПодписываемыйВСервисеПодписания.Ссылка, КлиентСервисаПодписания.ДанныеПодписываемогоДокумента>): Строка
    
    знч Снилс = СнилсВладельцаСертификатаПодписи(ВладелецУнэп)
    
    знч ПредставленияОрганизаций =
        новый Соответствие<ОрганизацияПодписываемогоДокумента.Ссылка?, Строка>()
    знч ПодписываемыеОбъекты = новый Массив<ФорматДанных.ПодписываемыйОбъектJson_V1_0>()
    для ДанныеДокумента из ДанныеДокументов
        знч ДокументСсылка = ДанныеДокумента.Ключ
        знч ОрганизацииДокумента = КлиентСервисаПодписания.ДанныеОрганизацийДокумента(ДокументСсылка)
        пер ЭлектронныеДокументы = ДанныеДокумента.Значение.ЭлектронныеДокументы
        если ЭлектронныеДокументы.Пусто()
            ЭлектронныеДокументы = ЭлектронныеДокументыПодписываемогоДокумента(ДанныеДокумента.Ключ)
        ;
        для ДанныеЭлектронногоДокумента из ЭлектронныеДокументы
            знч ЭлектронныйДокумент = ДанныеЭлектронногоДокумента.Значение.Оригинал
            знч ПодписываемыйОбъект = новый ФорматДанных.ПодписываемыйОбъектJson_V1_0(ЭлектронныйДокумент.Ссылка.Ид.ВСтроку())
            ПодписываемыеОбъекты.Добавить(ПодписываемыйОбъект)
            пер ИдентификаторФайла = ИдентификаторыФайлов.ИдентификаторФайла(ЭлектронныйДокумент.Ссылка)
            если ИдентификаторФайла == Неопределено
                знч ДанныеФайла = ОтправитьФайл(
                    ЭлектронныйДокумент.Наименование,
                    ЭлектронныйДокумент.Размер,
                    ЭлектронныйДокумент.Расширение,
                    ЭлектронныйДокумент.Хранилище
                )
                ИдентификаторФайла = ДанныеФайла.Идентификатор
                ИдентификаторыФайлов.ЗарегистрироватьИдентификаторыФайла(
                    ЭлектронныйДокумент.Ссылка,
                    ДанныеФайла.Идентификатор,
                    ДанныеФайла.СрокХранения)
            ;
            ПодписываемыйОбъект.ИдФайла = ИдентификаторФайла
            пер Организация: ОрганизацияПодписываемогоДокумента.Ссылка?
            если ОрганизацииДокумента.СодержитКлюч(ДанныеЭлектронногоДокумента.Ключ)
                Организация = ОрганизацииДокумента.Получить(ДанныеЭлектронногоДокумента.Ключ)
            ;
            пер ПредставлениеОрганизации: Строка?
            если Организация != Неопределено
                ПредставленияОрганизаций.ПолучитьИлиУмолчание(Организация)
                если ПредставлениеОрганизации == Неопределено
                    ПредставлениеОрганизации = МенеджерСущности.ПредставлениеСсылки(Организация как Справочник.Ссылка?)
                    ПредставленияОрганизаций.Вставить(Организация, ПредставлениеОрганизации)
                ;
            ;
            ПодписываемыйОбъект.НаименованиеОрганизации = ПредставлениеОрганизации
        ;
    ;
    возврат ИдентификаторЗапросаНаПодписание(
        Снилс = Снилс,
        ВидПодписи = ВидыЭлектронныхПодписей.Госключ,
        ПодписываемыеОбъекты = ПодписываемыеОбъекты)
;

@ВПодсистеме
метод ИдентификаторЗапросаНаПодписаниеВАстралПлатформа(
        ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка,
        ДанныеДокументов: Соответствие<ДокументПодписываемыйВСервисеПодписания.Ссылка, КлиентСервисаПодписания.ДанныеПодписываемогоДокумента>, 
        СпособДоставкиКода: СпособыДоставкиКодаПодтверждения): Строка
    
    знч Настройки = КлиентСервисаПодписания.НастройкиСервиса()
    знч Снилс = СнилсВладельцаСертификатаПодписи(ВладелецУнэп)
    знч ПодписываемыеОбъекты = новый Массив<ФорматДанных.ПодписываемыйОбъектJson_V1_0>()
    для ДанныеДокумента из ДанныеДокументов
        пер ЭлектронныеДокументы = ДанныеДокумента.Значение.ЭлектронныеДокументы
        если ЭлектронныеДокументы.Пусто()
            ЭлектронныеДокументы = ЭлектронныеДокументыПодписываемогоДокумента(ДанныеДокумента.Ключ)
        ;
        для ДанныеЭлектронногоДокумента из ЭлектронныеДокументы
            знч ЭлектронныйДокумент = ДанныеЭлектронногоДокумента.Значение.Оригинал
            знч ПодписываемыйОбъект = новый ФорматДанных.ПодписываемыйОбъектJson_V1_0(ЭлектронныйДокумент.Ссылка.Ид.ВСтроку())
            ПодписываемыеОбъекты.Добавить(ПодписываемыйОбъект)
            если Настройки.ПодписыватьХэшДанныхДокументов
                ПодписываемыйОбъект.Хэш = ОбменССервисомПодписания.ХэшДанных(ЭлектронныйДокумент.Хранилище)
            иначе
                пер ИдентификаторФайла = ИдентификаторыФайлов.ИдентификаторФайла(ЭлектронныйДокумент.Ссылка)
                если ИдентификаторФайла == Неопределено
                    знч ДанныеФайла = ОтправитьФайл(
                        ЭлектронныйДокумент.Наименование,
                        ЭлектронныйДокумент.Размер,
                        ЭлектронныйДокумент.Расширение,
                        ЭлектронныйДокумент.Хранилище
                    )
                    ИдентификаторФайла = ДанныеФайла.Идентификатор
                    ИдентификаторыФайлов.ЗарегистрироватьИдентификаторыФайла(
                        ЭлектронныйДокумент.Ссылка,
                        ДанныеФайла.Идентификатор,
                        ДанныеФайла.СрокХранения)
                ;
                ПодписываемыйОбъект.ИдФайла = ИдентификаторФайла
            ;
        ;
    ;
    возврат ИдентификаторЗапросаНаПодписание(
        Снилс                           = Снилс,
        ВидПодписи                      = ВидыЭлектронныхПодписей.УнэпАстралПлатформа,
        ПодписываемыеОбъекты            = ПодписываемыеОбъекты,
        СпособДоставкиКодаПодтверждения = СпособДоставкиКода)
;

@ВПодсистеме
метод ОтправитьКодПодтверждения(ИдентификаторЗапроса: Строка, КодПодтверждения: Строка, ВидЭлектроннойПодписи: ВидыЭлектронныхПодписей)
    знч Ответ = ВыполнитьPostЗапросКПлатформе("signRequests/%{ИдентификаторЗапроса}/confirm",
        СериализацияJson.ЗаписатьОбъект(
                новый ФорматДанных.ОтправкаКодаПодтвержденияJson_V1_0(КодПодтверждения),
        ФорматДанных.НастройкиЗаписиОбъектов()))
    если Ответ.КодСостояния != 200
        выбросить новый ИсключениеВыполнения(
            "%{Ответ.КодСостояния}: %{Ответ.Тело}"
        )
    ;
;

@ВПодсистеме
метод ПолучитьРезультатыПодписания(ИдентификаторЗапроса: Строка)
    знч Ответ = ВыполнитьGetЗапросКПлатформе("signRequests/%{ИдентификаторЗапроса}/results")
    если Ответ.КодСостояния == 200
        знч ОтветСервиса = СериализацияJson.ПрочитатьОбъект(
            Ответ.Тело, Тип<Массив<ФорматДанных.РезультатПодписанияОбъектаJson_V1_0>>, ФорматДанных.НастройкиЧтенияОбъектов())
        для РезультатПодписания из ОтветСервиса
            знч СостояниеЗапроса = СостоянияЗапросовПодписания.СостояниеЗапроса(ИдентификаторЗапроса)
            СогласованияДокументов.ЗарегистрироватьПодписьФайла(
                Файлы.ПолучитьСсылку(новый Ууид(РезультатПодписания.Ид)),
                СостояниеЗапроса.ВладелецУнэп как ФизическиеЛица.Ссылка,
                СостояниеЗапроса.РольПодписанта,
                СостояниеЗапроса.НомерШагаСогласования,
                ПолучитьФайл(РезультатПодписания.ИдФайлаПодписи).Ссылка)
            ОбновлениеДанныхСервис.ПолучитьСервис().УстановитьПризнакТребуетсяОбновление(СостояниеЗапроса.ВладелецУнэп как ФизическиеЛица.Ссылка)
        ;
    иначе
        выбросить новый ИсключениеВыполнения(
            "%{Ответ.КодСостояния}: %{Ответ.Тело}"
        )
    ;
;

@ВПодсистеме
метод ЗапланироватьОбновлениеСостоянийЗапросов()
    
    знч Настройки = КлиентСервисаПодписания.НастройкиСервиса()
    знч ЗаданиеПолучитьСобытияЗапросовВыпуска = ЗапланированныеЗадания.ПолучитьПоКлючу(
        КЛЮЧ_ЗАДАНИЯ_ПОЛУЧЕНИЯ_СОСТОЯНИЙ_ЗАПРОСОВ_ВЫПУСКА_СЕРТИФИКАТОВ)
    если ЗаданиеПолучитьСобытияЗапросовВыпуска == Неопределено
        ЗапланированныеЗадания.Создать(&ОбновитьСостоянияЗапросовВыпускаСертификатов)
            .Настроить(
                Ключ = КЛЮЧ_ЗАДАНИЯ_ПОЛУЧЕНИЯ_СОСТОЯНИЙ_ЗАПРОСОВ_ВЫПУСКА_СЕРТИФИКАТОВ,
                Расписание = [Расписание.Периодическое(Настройки.ПериодОпросаСостоянийЗапросовВыпускаСертификата)],
                ПовторыПриОшибке = СтратегияПовтораЗадания.Интервал(60с),
                Описание = "Обновление состояний запросов выпуска сертификатов"
            ).Запланировать()
    иначе
        если ЗаданиеПолучитьСобытияЗапросовВыпуска.Статус == СтатусЗадания.Приостановлено
            ЗапланированныеЗадания.Возобновить(КЛЮЧ_ЗАДАНИЯ_ПОЛУЧЕНИЯ_СОСТОЯНИЙ_ЗАПРОСОВ_ВЫПУСКА_СЕРТИФИКАТОВ)
        иначе если ЗаданиеПолучитьСобытияЗапросовВыпуска.Статус != СтатусЗадания.Выполняется
            знч Задание = ЗапланированныеЗадания.Изменить(КЛЮЧ_ЗАДАНИЯ_ПОЛУЧЕНИЯ_СОСТОЯНИЙ_ЗАПРОСОВ_ВЫПУСКА_СЕРТИФИКАТОВ)
            если Задание == Неопределено
                возврат
            ;
            Задание.Настроить(
                    Расписание = [Расписание.Периодическое(Настройки.ПериодОпросаСостоянийЗапросовВыпускаСертификата)],
                    ПовторыПриОшибке = СтратегияПовтораЗадания.Интервал(60с)
                ).Запланировать()
        ;
    ;
    
    знч ЗаданиеПолучитьСобытияЗапросовПодписания = ЗапланированныеЗадания.ПолучитьПоКлючу(
        КЛЮЧ_ЗАДАНИЯ_ПОЛУЧЕНИЯ_СОСТОЯНИЙ_ЗАПРОСОВ_ПОДПИСАНИЯ)
    если ЗаданиеПолучитьСобытияЗапросовПодписания == Неопределено
        ЗапланированныеЗадания.Создать(&ОбновитьСостоянияЗапросовПодписания)
            .Настроить(
                Ключ = КЛЮЧ_ЗАДАНИЯ_ПОЛУЧЕНИЯ_СОСТОЯНИЙ_ЗАПРОСОВ_ПОДПИСАНИЯ,
                Расписание = [Расписание.Периодическое(Настройки.ПериодОпросаСостоянийЗапросовПодписания)],
                ПовторыПриОшибке = СтратегияПовтораЗадания.Интервал(60с),
                Описание = "Обновление состояний запросов подписания"
            ).Запланировать()
    иначе
        если ЗаданиеПолучитьСобытияЗапросовПодписания.Статус == СтатусЗадания.Приостановлено
            ЗапланированныеЗадания.Возобновить(КЛЮЧ_ЗАДАНИЯ_ПОЛУЧЕНИЯ_СОСТОЯНИЙ_ЗАПРОСОВ_ПОДПИСАНИЯ)
        иначе если ЗаданиеПолучитьСобытияЗапросовПодписания.Статус != СтатусЗадания.Выполняется
            ЗапланированныеЗадания.Изменить(КЛЮЧ_ЗАДАНИЯ_ПОЛУЧЕНИЯ_СОСТОЯНИЙ_ЗАПРОСОВ_ПОДПИСАНИЯ)
                .Настроить(
                    Расписание = [Расписание.Периодическое(Настройки.ПериодОпросаСостоянийЗапросовПодписания)],
                    ПовторыПриОшибке = СтратегияПовтораЗадания.Интервал(60с)
                ).Запланировать()
        ;
    ;
;

@ВПодсистеме
метод ОстановитьОбновлениеСостоянийЗапросов()
    знч ЗаданиеПолучитьСобытияЗапросовВыпуска = ЗапланированныеЗадания.ПолучитьПоКлючу(
        КЛЮЧ_ЗАДАНИЯ_ПОЛУЧЕНИЯ_СОСТОЯНИЙ_ЗАПРОСОВ_ВЫПУСКА_СЕРТИФИКАТОВ)
    если ЗаданиеПолучитьСобытияЗапросовВыпуска != Неопределено
        ЗапланированныеЗадания.Удалить(КЛЮЧ_ЗАДАНИЯ_ПОЛУЧЕНИЯ_СОСТОЯНИЙ_ЗАПРОСОВ_ВЫПУСКА_СЕРТИФИКАТОВ)
    ;
    знч ЗаданиеПолучитьСобытияЗапросовПодписания = ЗапланированныеЗадания.ПолучитьПоКлючу(
        КЛЮЧ_ЗАДАНИЯ_ПОЛУЧЕНИЯ_СОСТОЯНИЙ_ЗАПРОСОВ_ПОДПИСАНИЯ)
    если ЗаданиеПолучитьСобытияЗапросовПодписания != Неопределено
        ЗапланированныеЗадания.Удалить(КЛЮЧ_ЗАДАНИЯ_ПОЛУЧЕНИЯ_СОСТОЯНИЙ_ЗАПРОСОВ_ПОДПИСАНИЯ)
    ;
;

@ВПодсистеме
метод ПроверитьСостоянияЗапросаПодписания(ИдентификаторЗапроса: Строка)
    ПроверитьСостоянияЗапросовПодписания([ИдентификаторЗапроса])
;

@ВПодсистеме
метод ПолучитьДанныеСертификата(ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка, СервисПодписания: СервисыПодписания):
    КлиентСервисаПодписания.ДанныеСертификата?
    
    знч Снилс = СнилсВладельцаСертификатаПодписи(ВладелецУнэп)
    если Снилс.Пусто()
        возврат Неопределено
    ;
    знч Ответ = ВыполнитьGetЗапросКПлатформе(
        "personCertificates/?insuranceNumber=%Снилс&serviceType=%{ФорматДанных.СервисыПодписанияВJson(СервисПодписания).ВСтроку()}")
    если не Ответ.Тело.Пусто()
        знч ОтветСервиса = СериализацияJson.ПрочитатьОбъект(
            Ответ.Тело, Тип<ФорматДанных.ОтветНаЗапросСертификатаФизическогоЛицаJson_V1_0>,
            ФорматДанных.НастройкиЧтенияОбъектов())
        ИдентификаторыСертификатовУнэп.ЗарегистрироватьСертификат(
            ВладелецУнэп = ВладелецУнэп,
            СервисПодписания = СервисПодписания,
            ВладелецСертификата = ОтветСервиса.ВладелецСертификата,
            СерийныйНомер = ОтветСервиса.СерийныйНомер,
            ДатаНачала = ОтветСервиса.ДатаНачала.НачалоДня().ВМомент(МенеджерДат.ЧасовойПоясТекущий()),
            ДатаОкончания = ОтветСервиса.ДатаОкончания.НачалоДня().ВМомент(МенеджерДат.ЧасовойПоясТекущий()))
        возврат новый КлиентСервисаПодписания.ДанныеСертификата(
            СервисПодписания = СервисПодписания,
            ВладелецСертификата = ОтветСервиса.ВладелецСертификата,
            СерийныйНомер = ОтветСервиса.СерийныйНомер,
            ДатаНачала = ОтветСервиса.ДатаНачала,
            ДатаОкончания = ОтветСервиса.ДатаОкончания)
    ;
;

@ВПодсистеме
метод ПолучитьДанныеДоступа(АдресСервиса: Строка, ВерсияApi: Строка, ТикетИтс: Строка): ФорматДанных.ДанныеДоступаJson_V1_0?
    знч ДанныеРегистрации = новый ФорматДанных.ДанныеРегистрацииПользователяJson_V1_0(ТикетИтс)
    знч ЗапросКПлатформе = PostЗапросКПлатформе(АдресЗапроса(АдресСервиса, ВерсияApi, "clients"),
        СериализацияJson.ЗаписатьОбъект(ДанныеРегистрации, ФорматДанных.НастройкиЗаписиОбъектов()))
    знч Ответ = ЗапросКПлатформе.Выполнить()
    если Ответ.КодСостояния == 200
        возврат  СериализацияJson.ПрочитатьОбъект(Ответ.Тело.ПрочитатьКакСтроку(),
            Тип<ФорматДанных.ДанныеДоступаJson_V1_0>, ФорматДанных.НастройкиЧтенияОбъектов())
    ;
;

// Процедуры обмена низкого уровня 

метод УстановитьЗаголовкиЗапросуHttp(HttpЗапрос: ЗапросHttp)
    HttpЗапрос.УстановитьЗаголовок("accept", "application/json")
        .УстановитьЗаголовок("content-type", "application/json")
;

метод ВыполнитьЗапрос(HttpЗапрос: ЗапросHttp, Настройки: КлиентСервисаПодписания.Настройки): ОтветHttp
    знч UrlСервиса = новый Url(Настройки.АдресСервиса)
    знч АдресСервера = "%{UrlСервиса.Схема}://%{UrlСервиса.Хост}%{UrlСервиса.Порт > 0 ? ":%{UrlСервиса.Порт.ВСтроку()}" : ""}"
    знч ПараметрыДоступа = новый КлиентBearerСервера.ПараметрыДоступаКСерверу(
        АдресСервера = АдресСервера,
        ИдКлиента = Настройки.ИдКлиента,
        СекретКлиента = Настройки.СекретКлиента
    )
    возврат КлиентBearerСервера.ВыполнитьЗапрос(HttpЗапрос, ПараметрыДоступа)
;

метод АдресЗапроса(Настройки: КлиентСервисаПодписания.Настройки, Ресурс: Строка): Строка
    возврат АдресЗапроса(Настройки.АдресСервиса, Настройки.ВерсияApi, Ресурс)
;

метод АдресЗапроса(АдресСервиса: Строка, ВерсияApi: Строка, Ресурс: Строка): Строка
    возврат "%{АдресСервиса}/api/%{ВерсияApi}/%Ресурс"
;

метод PostЗапросКПлатформе(Настройки: КлиентСервисаПодписания.Настройки, Ресурс: Строка, ТелоЗапроса: Строка | ПотокЧтения): ЗапросHttp
    возврат PostЗапросКПлатформе(АдресЗапроса(Настройки, Ресурс), ТелоЗапроса)
;

метод PostЗапросКПлатформе(АдресЗапроса: Строка, ТелоЗапроса: Строка | ПотокЧтения): ЗапросHttp
    пер HttpЗапрос = КлиентHttp.ЗапросPost(АдресЗапроса)
    УстановитьЗаголовкиЗапросуHttp(HttpЗапрос)
    если ТелоЗапроса это Строка
        HttpЗапрос.УстановитьТело(ТелоЗапроса как Строка)
    иначе
        HttpЗапрос.УстановитьТело(ТелоЗапроса как ПотокЧтения)
    ;
    возврат HttpЗапрос
;

метод ВыполнитьPostЗапросКПлатформе(HttpЗапрос: ЗапросHttp, Ресурс: Строка): ОтветНаHttpЗапрос
    знч Настройки = КлиентСервисаПодписания.НастройкиСервиса()
    исп HttpОтвет = ВыполнитьЗапрос(HttpЗапрос, Настройки)
    знч ТелоОтвета = HttpОтвет.Тело.ПрочитатьКакСтроку()
    если Настройки.ЛогированиеЗапросов
        СервисПодписания.ЗарегистрироватьИсходящийHttpЗапрос(
            ПредставлениеСобытия = "xSign POST: %Ресурс",
            ПутьКРесурсу = HttpЗапрос.АбсолютныйUrl,
            МетодHttp = "POST",
            КодОтвета = HttpОтвет.КодСостояния,
            ТелоОтвета = ТелоОтвета)
    ;
    возврат новый ОтветНаHttpЗапрос(HttpОтвет.КодСостояния, ТелоОтвета)
;

метод ВыполнитьPostЗапросКПлатформе(Ресурс: Строка, ТелоЗапроса: Строка): ОтветНаHttpЗапрос
    знч Настройки = КлиентСервисаПодписания.НастройкиСервиса()
    пер HttpЗапрос = PostЗапросКПлатформе(Настройки, Ресурс, ТелоЗапроса)
    возврат ВыполнитьPostЗапросКПлатформе(HttpЗапрос, Ресурс)
;

метод GetЗапросКПлатформе(Настройки: КлиентСервисаПодписания.Настройки, Ресурс: Строка, ТаймаутСоединения: Длительность = 300с): ЗапросHttp
    пер HttpЗапрос = КлиентHttp.ЗапросGet(АдресЗапроса(Настройки, Ресурс)).УстановитьТаймаутЗапроса(ТаймаутСоединения)
    УстановитьЗаголовкиЗапросуHttp(HttpЗапрос)
    возврат HttpЗапрос
;

метод ВыполнитьGetЗапросКПлатформе(Ресурс: Строка, ТаймаутСоединения: Длительность = 300с): ОтветНаHttpЗапрос
    знч Настройки = КлиентСервисаПодписания.НастройкиСервиса()
    пер HttpЗапрос = GetЗапросКПлатформе(Настройки, Ресурс, ТаймаутСоединения)
    исп HttpОтвет = ВыполнитьЗапрос(HttpЗапрос, Настройки)
    знч ТелоОтвета = HttpОтвет.Тело.ПрочитатьКакСтроку()
    если Настройки.ЛогированиеЗапросов
        СервисПодписания.ЗарегистрироватьИсходящийHttpЗапрос(
            ПредставлениеСобытия = "xSign GET: /%Ресурс",
            ПутьКРесурсу = HttpЗапрос.АбсолютныйUrl,
            МетодHttp = "GET",
            КодОтвета = HttpОтвет.КодСостояния,
            ТелоОтвета = ТелоОтвета)
    ;
    возврат новый ОтветНаHttpЗапрос(HttpОтвет.КодСостояния, ТелоОтвета)
;

// Конвертация объектов в/из JSON

метод ПолВJson(Пол: ПолФизическогоЛица): ФорматДанных.ПолФизическогоЛицаJson
    если Пол == ПолФизическогоЛица.Женский
        возврат ФорматДанных.ПолФизическогоЛицаJson.female
    ;
    возврат ФорматДанных.ПолФизическогоЛицаJson.male
;

метод ВидСервисаПодписанияВJson(ВидПодписи: ВидыЭлектронныхПодписей): ФорматДанных.ТипСервисаJson
    выбор ВидПодписи
        когда ВидыЭлектронныхПодписей.Госключ
            возврат ФорматДанных.ТипСервисаJson.goskey
    ;
    возврат ФорматДанных.ТипСервисаJson.astralUnep
;

// Обработчики обновления состояний

метод ОбновитьСостоянияЗапросовВыпускаСертификатов()
    пер ТекущееЗадание: ФоновоеЗадание?
    пока Истина
        если ТекущееЗадание == Неопределено или ТекущееЗадание.Статус != СтатусЗадания.Выполняется
            попытка 
                ТекущееЗадание = ФоновыеЗадания.Выполнить(&ПроверитьСостоянияЗапросовВыпускаСертификатов)
            поймать Ошибка: Исключение
                Журналирование.ЗарегистрироватьОшибку(Ошибка)
            ;
        ;
        Пауза(60с)
    ;
;

метод ОбновитьСостоянияЗапросовПодписания()
    пер ТекущееЗадание: ФоновоеЗадание?
    пока Истина
        если ТекущееЗадание == Неопределено или ТекущееЗадание.Статус != СтатусЗадания.Выполняется
            попытка 
                ТекущееЗадание = ФоновыеЗадания.Выполнить(&ПроверитьСостоянияЗапросовПодписания)
            поймать Ошибка: Исключение
                Журналирование.ЗарегистрироватьОшибку(Ошибка)
            ;
        ;
        Пауза(60с)
    ;
;

метод ПроверитьСостоянияЗапросовВыпускаСертификатов()
    знч ПроверяемыеСостояния = новый Массив<СостоянияЗапросаВыпускаСертификата>()
    ПроверяемыеСостояния.Добавить(СостоянияЗапросаВыпускаСертификата.Обрабатывается)
    ПроверяемыеСостояния.Добавить(СостоянияЗапросаВыпускаСертификата.ТребуетсяДополнительнаяИнформация)
    знч ДанныеСостояний = СостоянияЗапросовВыпускаСертификатаПодписи.СостояниеАктивныхЗапросов(ПроверяемыеСостояния)
    если ДанныеСостояний.Пусто()
        возврат
    ;
    знч ОжидаемыеДокументы = ОжидаемыеДокументыЗапросовВыпускаСертификатаПодписи.ОжидаемыеВидыДокументов(ДанныеСостояний.Ключи())
    знч ИдентификаторыЗапросов = новый Массив<Строка>()
    знч ЗапросыИдентификаторов = новый Соответствие<Строка, ЗапросыВыпускаСертификатаПодписи.Ссылка>()
    для ДанныеСостояния из ДанныеСостояний
        ИдентификаторыЗапросов.Добавить(ДанныеСостояния.Значение.ИдентификаторЗапроса)
        ЗапросыИдентификаторов.Вставить(ДанныеСостояния.Значение.ИдентификаторЗапроса, ДанныеСостояния.Ключ)
    ;
    знч Ответ = ВыполнитьPostЗапросКПлатформе("certificateRequests/statuses",
        СериализацияJson.ЗаписатьОбъект(ИдентификаторыЗапросов, ФорматДанных.НастройкиЗаписиОбъектов()))
    знч ОтветСервиса = СериализацияJson.ПрочитатьОбъект(
        Ответ.Тело, Тип<Массив<ФорматДанных.СостояниеЗапросаВыпускаСертификатаJson_V1_0>>,
        ФорматДанных.НастройкиЧтенияОбъектов())
    для СостояниеЗапроса из ОтветСервиса
        пер ПолучитьСертификат = Ложь
        знч ЗапросВыпуска = ЗапросыИдентификаторов.ПолучитьИлиУмолчание(СостояниеЗапроса.Ид)
        знч ДанныеСостояния = ДанныеСостояний.ПолучитьИлиУмолчание(ЗапросВыпуска)
        знч СтатусСервиса = ФорматДанных.СостояниеЗапросаВыпускаСертификатаИзJson(СостояниеЗапроса.Состояние)
        пер Информация = СостояниеЗапроса.Описание
        если СтатусСервиса == СостоянияЗапросаВыпускаСертификата.ТребуетсяДополнительнаяИнформация
            и Информация.Пусто()
            Информация = "Необходимо распечатать и отправить сведения о сертификате, заверенные собственноручной подписью"
        ;
        если СтатусСервиса != ДанныеСостояния.СостояниеЗапроса
            или Информация != ДанныеСостояния.Информация
            
            СостоянияЗапросовВыпускаСертификатаПодписи.УстановитьСостояниеЗапроса(
                ЗапросВыпуска, СтатусСервиса, Информация)
        иначе
            продолжить
        ;
        если СтатусСервиса == СостоянияЗапросаВыпускаСертификата.СертификатВыпущен
            или СтатусСервиса == СостоянияЗапросаВыпускаСертификата.ТребуетсяДополнительнаяИнформация
            
            ПолучитьСертификат = Истина
            знч ДокументыПоЗапросу = ОжидаемыеДокументы.ПолучитьИлиУмолчание(ЗапросВыпуска)
            если СтатусСервиса == СостоянияЗапросаВыпускаСертификата.ТребуетсяДополнительнаяИнформация
                знч ВидЗапрашиваемогоДокумента = ВидыЗапрашиваемыхКопийДокументов.СертификатПодписанный
                если ДокументыПоЗапросу == Неопределено
                    или не ДокументыПоЗапросу.Содержит(ВидЗапрашиваемогоДокумента)
                    
                    ОжидаемыеДокументыЗапросовВыпускаСертификатаПодписи.ЗарегистрироватьВидДокумента(
                        ЗапросВыпуска, ВидЗапрашиваемогоДокумента)
                ;
                если ДокументыПоЗапросу != Неопределено и ДокументыПоЗапросу.Содержит(ВидЗапрашиваемогоДокумента)
                    ДокументыПоЗапросу.Удалить(ВидЗапрашиваемогоДокумента)
                ;
            ;
        ;
        если ПолучитьСертификат
            пер ДанныеСертификата = ИдентификаторыСертификатовУнэп.ДанныеСертификата(ЗапросВыпуска)
            если ДанныеСертификата == Неопределено или ДанныеСертификата.Файл == Неопределено
                знч ОтветНаЗапросФайловСертификата = ВыполнитьGetЗапросКПлатформе("certificateRequests/%{ДанныеСостояния.ИдентификаторЗапроса}/certificate")
                если ОтветНаЗапросФайловСертификата.КодСостояния == 200
                    знч ОтветСервисаНаЗапросФайловСертификата = СериализацияJson.ПрочитатьОбъект(
                        ОтветНаЗапросФайловСертификата.Тело, Тип<ФорматДанных.ОтветНаЗапросФайловСертификатаJson_V1_0>,
                        ФорматДанных.НастройкиЧтенияОбъектов())
                    знч ДанныеФайла = ПолучитьФайл(ОтветСервисаНаЗапросФайловСертификата.ИдФайлаСертификата)
                    если ДанныеФайла != Неопределено
                        знч ДанныеПодписи = МенеджерКриптографии.ИнформацияОСертификате(
                            новый ЦифровойСертификат(ДанныеФайла.ПолучитьБайты()))
                        знч ФайлСертификата = Файлы.НовыйФайл(ДанныеФайла)
                        ФайлСертификата.Владелец = ЗапросВыпуска
                        ФайлСертификата.Наименование = "Сертификат подписи %{ДанныеПодписи.СерийныйНомер}"
                        ФайлСертификата.Расширение = "cer"
                        ФайлСертификата.Записать()
                        знч ДанныеФайлаНаПечать = ПолучитьФайл(ОтветСервисаНаЗапросФайловСертификата.ИдФайлаПечатнойФормыСертификата)
                        пер ФайлСертификатаНаПечать: Файлы.Объект?
                        если ДанныеФайлаНаПечать != Неопределено
                            ФайлСертификатаНаПечать = Файлы.НовыйФайл(ДанныеФайлаНаПечать)
                            ФайлСертификатаНаПечать.Владелец = ЗапросВыпуска
                            ФайлСертификатаНаПечать.Наименование = "Сертификат подписи %{ДанныеПодписи.СерийныйНомер}НаПечать"
                            ФайлСертификатаНаПечать.Расширение = "pdf"
                            ФайлСертификатаНаПечать.Записать()
                        ;
                        ИдентификаторыСертификатовУнэп.ЗарегистрироватьСертификат(
                            ВладелецУнэп = МенеджерСущности.ЗначениеРеквизитаОбъекта(ЗапросВыпуска, "ВладелецУнэп") как ВладелецСертификатовСервисаПодписания.Ссылка,
                            СервисПодписания = ДанныеСостояния.СервисПодписания,
                            ЗапросВыпускаСертификата = ЗапросВыпуска,
                            ВладелецСертификата = КриптографияСтандартные.ПредставлениеСубъекта(ДанныеПодписи),
                            СерийныйНомер = ДанныеПодписи.СерийныйНомер,
                            ДатаНачала = ДанныеПодписи.ПериодДействия.ДатаНачала,
                            ДатаОкончания = ДанныеПодписи.ПериодДействия.ДатаОкончания,
                            Файл = ФайлСертификата.Ссылка,
                            ФайлПечатнойФормы = ФайлСертификатаНаПечать!.Ссылка
                        )
                    ;
                ;
            ;
        ;
    ;
;

метод ПроверитьСостоянияЗапросовПодписания()
    СостоянияЗапросовПодписания.ОтменитьПросроченныеПодписания()
    знч ДанныеСостояний = СостоянияЗапросовПодписания.СостояниеЗапросов()
    если ДанныеСостояний.Пусто()
        возврат
    ;
    знч ИдентификаторыЗапросов = новый Массив<Строка>()
    для ДанныеСостояния из ДанныеСостояний
        ИдентификаторыЗапросов.Добавить(ДанныеСостояния.Значение.ИдентификаторЗапроса)
    ;
    ПроверитьСостоянияЗапросовПодписания(ИдентификаторыЗапросов)
;

метод ПроверитьСостоянияЗапросовПодписания(ИдентификаторыЗапросов: Массив<Строка>)
    знч Ответ = ВыполнитьPostЗапросКПлатформе("signRequests/statuses", 
        СериализацияJson.ЗаписатьОбъект(ИдентификаторыЗапросов, ФорматДанных.НастройкиЗаписиОбъектов()))
    если Ответ.КодСостояния == 200
        знч ОтветСервиса = СериализацияJson.ПрочитатьОбъект(
            Ответ.Тело, Тип<Массив<ФорматДанных.ОтветНаЗапросСостоянияЗапросаПодписанияJson_V1_0>>,
            ФорматДанных.НастройкиЧтенияОбъектов())
        для СостояниеЗапроса из ОтветСервиса
            знч СтатусСервиса = ФорматДанных.СостояниеЗапросаПодписанияИзJson(СостояниеЗапроса.Состояние)
            СостоянияЗапросовПодписания.ЗарегистрироватьСостояние(
                СостояниеЗапроса.Ид, СтатусСервиса, СостояниеЗапроса.Описание)
        ;
    ;
;

// Прочие процедуры и функции

метод ИдентификаторЗапросаНаПодписание(
        Снилс: Строка, 
        ВидПодписи: ВидыЭлектронныхПодписей,
        ПодписываемыеОбъекты: Массив<ФорматДанных.ПодписываемыйОбъектJson_V1_0>,
        СпособДоставкиКодаПодтверждения: СпособыДоставкиКодаПодтверждения? = Неопределено): Строка
        
    пер ИдентификаторЗапросаНаПодписание: Строка
    
    знч ЗапросПодписания = новый ФорматДанных.ЗапросПодписанияJson_V1_0(
        ТипСервиса = ВидСервисаПодписанияВJson(ВидПодписи),
        Снилс = Снилс,
        ПодписываемыеОбъекты = ПодписываемыеОбъекты)
    выбор ВидПодписи
        когда ВидыЭлектронныхПодписей.УнэпАстралПлатформа
            ЗапросПодписания.СпособДоставкиКода = ФорматДанных.СпособыДоставкиКодаПодтвержденияВJson(СпособДоставкиКодаПодтверждения)
    ;
        
    знч Ответ = ВыполнитьPostЗапросКПлатформе("signRequests",
        СериализацияJson.ЗаписатьОбъект(ЗапросПодписания, ФорматДанных.НастройкиЗаписиОбъектов()))
    если Ответ.КодСостояния == 200
        знч ОтветСервиса = СериализацияJson.ПрочитатьОбъект(
            Ответ.Тело, Тип<ФорматДанных.ОтветНаЗапросПодписанияJson_V1_0>, ФорматДанных.НастройкиЧтенияОбъектов())
        ИдентификаторЗапросаНаПодписание = ОтветСервиса.ИдЗапроса
    иначе
        выбросить новый ИсключениеВыполнения(
            "%{Ответ.КодСостояния}: %{Ответ.Тело}"
        )
    ;
    возврат ИдентификаторЗапросаНаПодписание
;

метод ПолучитьФайл(ИдентификаторФайла: Строка): ДвоичныйОбъект?
    знч Настройки = КлиентСервисаПодписания.НастройкиСервиса()
    знч HttpЗапрос = GetЗапросКПлатформе(Настройки, "/files/%ИдентификаторФайла")
    исп HttpОтвет = ВыполнитьЗапрос(HttpЗапрос, Настройки)
    если HttpОтвет.КодСостояния == 200
        возврат ОбъектноеХранилище.ЗагрузитьИзБайт(HttpОтвет.Тело.ПрочитатьКакБайты())
    ;
;

метод СнилсВладельцаСертификатаПодписи(ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка): Строка
    возврат ФизЛица.ДанныеФизическогоЛица(
        ВладелецУнэп как ФизическиеЛица.Ссылка,
        новый ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц(
            ПерсональныеДанные = Истина)).ПерсональныеДанные.СНИЛС
;

метод ХэшДанных(Данные: ДвоичныйОбъект.Ссылка): Строка
    пер Хеширование = новый ХешированиеДанных(АлгоритмХеширования.Гост3411_2012_256)
    Хеширование.ДобавитьДанные(Данные.Загрузить().ПолучитьБайты())
    знч ХэшСумма = Хеширование.Результат
    возврат Кодировки.Base64.КодироватьВСтроку(ХэшСумма, ВидBase64.Base64)
;

метод ЭлектронныеДокументыПодписываемогоДокумента(ДокументСсылка: ДокументПодписываемыйВСервисеПодписания.Ссылка):
    Соответствие<Строка, ПрисоединенныеФайлыКлиентСервер.ЭлектронныйДокумент>
    
    пер ЭлектронныеДокументы = новый Соответствие<Строка, ПрисоединенныеФайлыКлиентСервер.ЭлектронныйДокумент>()
    пер ДокументыНаПодпись = новый Массив<ДокументПодписываемыйВСервисеПодписания.Ссылка>()
    знч Сервисы = ДанныеПодписанияСервис.ПолучитьСервисы()
    для Сервис из Сервисы
        знч ДанныеДокументов = Сервис.ДанныеДокументов(ДокументСсылка)
        если ДанныеДокументов != Неопределено
            // Единственный случай - расчетные листки содержат ссылки на несколько документов на подпись
            // Соответственно переопределяем значение ДокументыНаПодпись
            ДокументыНаПодпись.ДобавитьВсе(ДанныеДокументов)
        ;
    ;
    если ДокументыНаПодпись.Пусто()
        ДокументыНаПодпись.Добавить(ДокументСсылка)
    ;
    для ЭлементДокументыНаПодпись из ДокументыНаПодпись
        ЭлектронныеДокументы.ВставитьВсе(Файлы.ЭлектронныеДокументыОбъекта(ЭлементДокументыНаПодпись как ВладелецФайлы.Ссылка))
    ;
    возврат ЭлектронныеДокументы
;

@ВПодсистеме
метод ДанныеПодписываемыхДокументов(ПодписываемыеДокументы: ЧитаемоеМножество<ДокументПодписываемыйВСервисеПодписания.Ссылка>,
    ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка, ВидЭлектроннойПодписи: ВидыЭлектронныхПодписей,
    Роль: РолиПодписантов.Ссылка?, НомерШагаСогласования: Число):
    Соответствие<ДокументПодписываемыйВСервисеПодписания.Ссылка, КлиентСервисаПодписания.ДанныеПодписываемогоДокумента>
    
    пер МаксимальноеКоличествоКриптоопераций = 0
    если ВидЭлектроннойПодписи == ВидыЭлектронныхПодписей.УнэпАстралПлатформа
        МаксимальноеКоличествоКриптоопераций = 60
    ;
    
    знч ДанныеДокументов = новый Соответствие<ДокументПодписываемыйВСервисеПодписания.Ссылка, КлиентСервисаПодписания.ДанныеПодписываемогоДокумента>()
    пер ВсегоДокументов = 0
    для ПодписываемыйДокумент из ПодписываемыеДокументы
        знч СостояниеСогласования = Согласования.СостояниеСогласования(
            ПодписываемыйДокумент как ПодписываемыйДокумент.Ссылка, ВладелецУнэп как ФизическиеЛица.Ссылка)
        знч ЭлектронныеДокументы = ЭлектронныеДокументыПодписываемогоДокумента(ПодписываемыйДокумент)
        если МаксимальноеКоличествоКриптоопераций > 0
            если ВсегоДокументов + ЭлектронныеДокументы.Размер() > МаксимальноеКоличествоКриптоопераций
                продолжить
            ;
        ;
        пер РольСогласующего = Роль
        пер НомерШага = НомерШагаСогласования
        если Роль == Неопределено
            РольСогласующего = СостояниеСогласования.ДанныеСогласующего.Роль
            НомерШага = СостояниеСогласования.ДанныеСогласующего.НомерШага
        ;
        
        если РольСогласующего == Неопределено
            РольСогласующего = Согласования.РольПодписантаСотрудник()
        ;
        
        ДанныеДокументов.Вставить(ПодписываемыйДокумент,
            новый КлиентСервисаПодписания.ДанныеПодписываемогоДокумента(
                Роль = РольСогласующего,
                НомерШагаСогласования = НомерШага,
                ЭлектронныеДокументы = ЭлектронныеДокументы))
        если МаксимальноеКоличествоКриптоопераций > 0
            ВсегоДокументов += ЭлектронныеДокументы.Размер()
            если ВсегоДокументов == МаксимальноеКоличествоКриптоопераций
                прервать
            ;
        ;
    ;
    возврат ДанныеДокументов
;
