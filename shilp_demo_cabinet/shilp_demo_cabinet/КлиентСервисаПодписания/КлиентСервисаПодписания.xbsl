импорт ВзаимодействиеССервисомПодписания
импорт Компания::Согласования
импорт Криптография
импорт ЛичныеКабинетыПользователей
импорт ОбщиеСтандартные
импорт СтандартноеПриложение
импорт УниверсальныеМеханизмы

@ВПодсистеме
конст КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА = "СервисПодписания"

@ВПодсистеме
конст ИМЯ_РАЗДЕЛА_СЕРВИС_ПОДПИСАНИЯ = "Сервис подписания"

@ВПодсистеме
конст ИЗМЕНЕН_ЗАПРОС_ВЫПУСКА_СЕРТИФИКАТА = "Изменен запрос выпуска сертификата"

@ВПроекте
@НаКлиенте @НаСервере
структура Настройки
    пер АдресСервиса: Строка
    знч ВерсияApi:Строка
    знч ИдКлиента: Строка
    знч СекретКлиента: Строка
    пер ИспользоватьГосключ: Булево
    пер ИспользоватьУнэпАстралПлатформа: Булево
    знч ЛогированиеЗапросов: Булево
    знч ПодписыватьХэшДанныхДокументов: Булево
    знч ПериодОпросаСостоянийЗапросовВыпускаСертификата: Длительность
    знч ПериодОпросаСостоянийЗапросовПодписания: Длительность
;

@ВПроекте
структура ДанныеСертификата
    обз знч СервисПодписания: СервисыПодписания
    пер ЗапросВыпускаСертификата: ЗапросыВыпускаСертификатаПодписи.Ссылка?
    обз знч ВладелецСертификата: Строка
    обз знч СерийныйНомер: Строка
    обз знч ДатаНачала: Дата
    обз знч ДатаОкончания: Дата
    пер Файл: ФайлСервисаПодписания.Ссылка?
    пер ФайлПечатнойФормы: ФайлСервисаПодписания.Ссылка?
    пер ВремяРегистрации: Момент?
    пер Заблокирован: Булево
    пер ПричинаБлокировки: Строка

;

@ВПроекте
структура ПараметрыСеанса
    пер ВремяОжиданияДоставкиКода: Число = 60
    пер СпособДоставкиКодаПодтверждения: СпособыДоставкиКодаПодтверждения
;

@ВПроекте
@НаКлиенте
метод ПараметрыСеанса(): ПараметрыСеанса
    возврат ПараметрыСеансаСервис.ПолучитьСервис().ПараметрПоКлючу(КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА) как ПараметрыСеанса
;

@ВПодсистеме
@НаСервере
структура ДанныеФайла
    обз пер Файл: ФайлСервисаПодписания.Ссылка
    обз пер Идентификатор: Строка
    обз пер ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка
    обз пер ИдентификаторЭлектронногоДокумента: Строка
;

@ВПроекте
@НаКлиенте
метод ОткрытьЗапросВыпускаСертификатаПодписи(Документ: ЗапросыВыпускаСертификатаПодписи.Ссылка?)
    ЗапросВыпускаСертификатаПодписиФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = Документ)
;

@НаСервере @ДоступноСКлиента
метод ЗапросПодключенияПоВладельцуУнэп(ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка): ЗапросыВыпускаСертификатаПодписи.Ссылка?
    возврат ЗапросыВыпускаСертификатаПодписи.ЗапросВыпускаСертификатаВладельца(ВладелецУнэп)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод НастройкиЗаданы(Настройки: Настройки? = Неопределено): Булево
    если Настройки == Неопределено
        Настройки = НастройкиСервиса()
    ;
    если Настройки.АдресСервиса.Пусто()
        или Настройки.ИдКлиента.Пусто()
        или Настройки.СекретКлиента.Пусто()
        
        возврат Ложь
    ;
    возврат Истина
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СохранитьИспользованиеПодписей(ИспользоватьГосключ: Булево, ИспользоватьУнэпАстралПлатформа: Булево)
    знч Настройки = НастройкиСервиса()
    если Настройки.ИспользоватьГосключ != ИспользоватьГосключ
        или Настройки.ИспользоватьУнэпАстралПлатформа != ИспользоватьУнэпАстралПлатформа
        
        Настройки.ИспользоватьГосключ = ИспользоватьГосключ
        Настройки.ИспользоватьУнэпАстралПлатформа = ИспользоватьУнэпАстралПлатформа
        НастройкиСервисаПодписания.Сохранить(Настройки)
    ;
;

@ВПроекте
@НаСервере
метод ЗаписатьАдресСервиса(АдресСервиса: Строка)
    знч Настройки = НастройкиСервиса()
    Настройки.АдресСервиса = АдресСервиса
    НастройкиСервисаПодписания.Сохранить(Настройки)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод НастройкиСервиса(): Настройки
    возврат НастройкиСервисаПодписания.Настройки()
;

@ВПроекте
@НаКлиенте
метод HtmlТекстИнформацииОСрокеПодписанииСИспользованиемГосключа(ОкончаниеПериодаПодписания: Строка): Строка
    возврат HtmlТекстИнформацииОПодписанииСИспользованиемГосключа(
        "Для подписания документа необходимо до %{ОкончаниеПериодаПодписания} открыть приложение %{HtmlСсылкаГосключВМагазинеПриложений()}, выбрать документ для подписания и подписать его.")
;

@ВПроекте
метод ДействующееСостояниеОжиданияДокумента(МоментОтправки: Момент?, ВидЭлектроннойПодписи: ВидыЭлектронныхПодписей): Булево
    если МоментОтправки != Неопределено
        возврат МенеджерДат.ТекущаяДатаВремя() <= МоментОтправки + ДлительностьПодписания(СервисПодписанияПоВидуЭлектроннойПодписи(ВидЭлектроннойПодписи))
    ;
    возврат Ложь
;

@ВПодсистеме
метод СервисПодписанияПоВидуЭлектроннойПодписи(ВидЭлектроннойПодписи: ВидыЭлектронныхПодписей): СервисыПодписания?
    выбор ВидЭлектроннойПодписи
        когда ВидыЭлектронныхПодписей.Госключ
            возврат СервисыПодписания.Госключ
        когда ВидыЭлектронныхПодписей.УнэпАстралПлатформа
            возврат СервисыПодписания.АстралПлатформаУнэп
    ;
;

@ВПодсистеме
метод ВидЭлектроннойПодписиПоСервисуПодписания(СервисПодписания: СервисыПодписания): ВидыЭлектронныхПодписей
    выбор СервисПодписания
        когда СервисыПодписания.Госключ
            возврат ВидыЭлектронныхПодписей.Госключ
        когда СервисыПодписания.АстралПлатформаУнэп
            возврат ВидыЭлектронныхПодписей.УнэпАстралПлатформа
    ;
;

@НаКлиенте
метод HtmlСсылкаНаПорталГосуслуги(): Строка
    возврат "<a href=\"https://www.gosuslugi.ru\" target=\"_blank\">www.gosuslugi.ru</a>"
;

@НаКлиенте
метод HtmlСсылкаГосключНаПорталеГосуслуг(): Строка
    возврат "<a href=\"https://www.gosuslugi.ru/goskey\" target=\"_blank\">www.gosuslugi.ru/goskey</a>"
;

@НаКлиенте
метод ПутьКГосключВМагазинеПриложений(): Строка
    если КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон
        если КлиентскоеУстройство.ВидПлатформы == ВидПлатформыКлиента.Android
            возврат "https://play.google.com/store/apps/details?id=ru.gosuslugi.goskey"
        иначе
            возврат "https://apps.apple.com/us/app/\%D0\%B3\%D0\%BE\%D1\%81\%D0\%BA\%D0\%BB\%D1\%8E\%D1\%87/id1566096745"
        ;
    ;
    возврат "https://apps.rustore.ru/app/ru.gosuslugi.goskey"
;

@НаКлиенте
@ВПроекте
метод HtmlТекстОбщейИнформацииОПодписанииСИспользованиемГосключ(): Строка
    возврат HtmlТекстИнформацииОПодписанииСИспользованиемГосключа(
        "При использовании для подписания приложения %{HtmlСсылкаГосключВМагазинеПриложений()}, документы направляются в личные кабинеты сотрудников на портале %{HtmlСсылкаНаПорталГосуслуги()} в которых они будут дожидаться подписания в течение суток.")
;

@ВПроекте
@НаКлиенте
метод HtmlТекстИнформацииПодписанииСИспользованиемГосключа(): Строка
    возврат HtmlТекстИнформацииОПодписанииСИспользованиемГосключа(
        "Для подписание документов используется приложение %{HtmlСсылкаГосключВМагазинеПриложений()}.")
;

@НаКлиенте
метод HtmlТекстИнформацииОПодписанииСИспользованиемГосключа(ПервыйАбзац: Строка): Строка
    возврат
        "<html><body>
        <p>
        %{ПервыйАбзац}
        </p>
        <p>
        </p>
        <p>
        Информация об установке приложения и регистрации размещена на %{HtmlСсылкаГосключНаПорталеГосуслуг()}.
        </p>
        </body>
        </html>"
;

@НаКлиенте
метод HtmlСсылкаГосключВМагазинеПриложений(): Строка
    возврат "<a href=\"%{ПутьКГосключВМагазинеПриложений()}\" target=\"_blank\">Госключ</a>"
;

@ВПодсистеме
@НаКлиенте @НаСервере
структура СостояниеЗапросаВыпускаСертификата
    пер ИдентификаторЗапроса: Строка
    пер СервисПодписания: СервисыПодписания
    пер СостояниеЗапроса: СостоянияЗапросаВыпускаСертификата?
    пер ВремяРегистрации: Момент?
    пер Информация: Строка
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЗапланироватьОбновлениеСостоянийЗапросов()
    если НастройкиЗаданы()
        ОбменССервисомПодписания.ЗапланироватьОбновлениеСостоянийЗапросов()
    иначе
        ОстановитьОбновлениеСостоянийЗапросов()
    ;
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ОстановитьОбновлениеСостоянийЗапросов()
    ОбменССервисомПодписания.ОстановитьОбновлениеСостоянийЗапросов()
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ДлительностьПодписания(СервисПодписания: СервисыПодписания): Длительность
    выбор СервисПодписания
        когда СервисыПодписания.АстралПлатформаУнэп
            возврат 15м
        когда СервисыПодписания.Госключ
            возврат 24ч
    ;
    возврат 0с
;

@ВПодсистеме
@НаКлиенте @НаСервере
структура СостояниеЗапросаПодписания
    обз знч Документ: ДокументПодписываемыйВСервисеПодписания.Ссылка
    обз знч ИдентификаторЗапроса: Строка
    обз знч СостояниеЗапроса: СостоянияЗапросаПодписания?
    обз знч Информация: Строка
    обз знч ВремяРегистрации: Момент
    обз знч СервисПодписания: СервисыПодписания
    обз знч СрокИсполнения: Момент
    обз знч ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка
    обз знч РольПодписанта: РолиПодписантов.Ссылка
    обз знч НомерШагаСогласования: Число
;

@ВПроекте
@НаСервере
структура ДанныеОтправкиНаПодписание
    пер ВидЭлектроннойПодписи: ВидыЭлектронныхПодписей
    пер ИдентификаторЗапроса: Строка
    пер МоментОтправки: Момент
;

@ВПроекте
@НаСервере
метод ДанныеОтправокНаПодписание(Документы: Массив<ДокументПодписываемыйВСервисеПодписания.Ссылка>):
    Соответствие<ДокументПодписываемыйВСервисеПодписания.Ссылка, КлиентСервисаПодписания.ДанныеОтправкиНаПодписание>

    возврат СостоянияЗапросовПодписания.ДанныеОтправокНаПодписание(Документы)
;

@ВПроекте
@НаСервере
метод ДокументОжидаетПодписания(Документ: ДокументПодписываемыйВСервисеПодписания.Ссылка, ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка): Булево
    возврат СостоянияЗапросовПодписания.ДокументОжидаетПодписания(Документ, ВладелецУнэп)
;

@ВПроекте
@НаКлиенте
метод ДополнитьФормыДаннымиПодписейНаСогласовании(ГруппаШтампов: ШтампыДокумента, ДанныеПодписей: Согласования.ДанныеПодписейДокумента)
    если ДанныеПодписей.ПодписьОрганизации != Неопределено
        и ДанныеПодписей.ПодписьОрганизации.Результат == РезультатыСогласования.НаСогласовании
        
        ГруппаШтампов.ИнформацияОПодписанииОрганизации = ИнформацияОПодписании(ДанныеПодписей.ПодписьОрганизации)
    ;
    если ДанныеПодписей.ПодписьРуководителя != Неопределено
        и ДанныеПодписей.ПодписьРуководителя.Результат == РезультатыСогласования.НаСогласовании
        
        ГруппаШтампов.ИнформацияОПодписанииРуководителем = ИнформацияОПодписании(ДанныеПодписей.ПодписьРуководителя)
    ;
    если ДанныеПодписей.ПодписьИсполнителя != Неопределено
        и ДанныеПодписей.ПодписьИсполнителя.Результат == РезультатыСогласования.НаСогласовании
        
        ГруппаШтампов.ИнформацияОПодписанииИсполнителем = ИнформацияОПодписании(ДанныеПодписей.ПодписьИсполнителя)
    ;
    если ДанныеПодписей.ПодписьФизическогоЛица != Неопределено
        и ДанныеПодписей.ПодписьФизическогоЛица.Результат == РезультатыСогласования.НаСогласовании
        
        ГруппаШтампов.ИнформацияОПодписанииСотрудником = ИнформацияОПодписании(ДанныеПодписей.ПодписьФизическогоЛица)
    ;
;

@НаКлиенте
метод ИнформацияОПодписании(ДанныеПодписи: Согласования.ДанныеПодписиДокумента): Строка
    знч ПредставлениеДаты = МенеджерДат.ФорматМомента(ДанныеПодписи.Дата, "дд ММММ гггг ЧЧ:мм")
    если ДанныеПодписи.УчастникСогласования != Неопределено
        знч ВремяНаПодписание = ДлительностьПодписания(
            СервисПодписанияПоВидуЭлектроннойПодписи(Криптография.ПараметрыСеанса().ВидЭлектроннойПодписи))
        если ДанныеПодписи.Дата + ВремяНаПодписание < МенеджерДат.ТекущаяДатаВремя()
            возврат "За время, отведенное на подписание документа не был получен результат"
        ;
        если ДанныеПодписи.УчастникСогласования == ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
            возврат "%ПредставлениеДаты отправлен на подписание Вами"
        ;
        возврат "%ПредставлениеДаты отправлен на подписание %{СклоненияПредставленийОбъектов.ПредставлениеВПадеже(ДанныеПодписи.УчастникСогласования, Падежи.Дательный)}"
    ;
    возврат "%ПредставлениеДаты отправлен на подписание (%{ДанныеПодписи.УчастникСогласованияСтрокой})"
;

@НаКлиенте
@ВПроекте
метод HtmlТекстОбщейИнформацииОПодписанииСИспользованиемАстралПлатформа(): Строка
    знч ПервыйАбзац = "При использовании для подписания сервиса Астрал.Платформа, каждому сотруднику будет выпущен сертификат подписи. При подписании документов на контактные данные, указанные при выпуске сертификата будет приходить код активации, который необходимо ввести в специальной форме."
    возврат
        "<html><body>
        <p>
        %{ПервыйАбзац}
        </p>
        </body>
        </html>"

;

@ВПроекте
@НаСервере
метод ДоступныеВидыЭлектронныхПодписей(): Массив<ВидыЭлектронныхПодписей>
    знч ДоступныеВиды = новый Массив<ВидыЭлектронныхПодписей>()
    знч Настройки = НастройкиСервиса()
    если Настройки.ИспользоватьГосключ
        ДоступныеВиды.Добавить(ВидыЭлектронныхПодписей.Госключ)
    ;
    если Настройки.ИспользоватьУнэпАстралПлатформа
        ДоступныеВиды.Добавить(ВидыЭлектронныхПодписей.УнэпАстралПлатформа)
    ;
    возврат ДоступныеВиды
;

@НаКлиенте
метод HtmlСсылкаНаТелеграмБотаXSign(): Строка
    возврат "<a href=\"https://t.me/xsign_bot\" target=\"_blank\">xSign</a>"
;


@ВПроекте
@НаКлиенте
метод HtmlТекстИнформацииПодписанииСИспользованиемАстралПлатформа(): Строка
    возврат
        "<html><body>
        <p>
        Перед началом использования необходимо запросить выпуск сертификата подписи (если его еще нет).
        <br>
        Для получения кодов подтверждения в телеграм, необходимо запустить телеграм бот %{HtmlСсылкаНаТелеграмБотаXSign()}, при запросе выпуска сертификата указать идентификатор своего чата с ботом.
        </p>
        </body></html>"
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ДанныеСертификата(ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка, ВидЭлектроннойПодписи: ВидыЭлектронныхПодписей): ДанныеСертификата?
    возврат ИдентификаторыСертификатовУнэп.ДанныеСертификатаВладельца(ВладелецУнэп, СервисПодписанияПоВидуЭлектроннойПодписи(ВидЭлектроннойПодписи))
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЕстьДействующийСертификат(ВладелецУнэп: ВладелецСертификатовСервисаПодписания.Ссылка, ВидЭлектроннойПодписи: ВидыЭлектронныхПодписей): Булево
    знч ДанныеСертификата = ДанныеСертификата(ВладелецУнэп, ВидЭлектроннойПодписи)
    если ДанныеСертификата != Неопределено
        знч ТекущаяДата = МенеджерДат.ТекущаяДатаВремя().ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий())
        возврат не ДанныеСертификата.Заблокирован
            и ДанныеСертификата.ДатаНачала.НачалоДня() <= ТекущаяДата
            и ДанныеСертификата.ДатаОкончания.КонецДня() > ТекущаяДата
    ;
    возврат Ложь
;

@ВПодсистеме
@НаКлиенте @НаСервере
структура ДанныеПодписываемогоДокумента
    обз знч Роль: РолиПодписантов.Ссылка
    обз знч НомерШагаСогласования: Число
    обз знч ЭлектронныеДокументы: Соответствие<Строка, ПрисоединенныеФайлыКлиентСервер.ЭлектронныйДокумент>
;

@ВПроекте
@НаСервере
метод ДанныеОрганизацийДокумента(ДокументСсылка: ДокументПодписываемыйВСервисеПодписания.Ссылка):
    Соответствие<Строка, ОрганизацияПодписываемогоДокумента.Ссылка?>
    
    пер ОрганизацииДокумента = новый Соответствие<Строка, ОрганизацияПодписываемогоДокумента.Ссылка?>()
    знч Сервисы = ДанныеПодписанияСервис.ПолучитьСервисы()
    для Сервис из Сервисы
        знч ДанныеОрганизации = Сервис.ДанныеОрганизации(ДокументСсылка)
        если ДанныеОрганизации != Неопределено
            ОрганизацииДокумента.ВставитьВсе(ДанныеОрганизации)
        ;
    ;
    возврат ОрганизацииДокумента
;