импорт ФизическиеЛица
импорт ОбменДанными
импорт Компания
импорт СтандартноеПриложение
импорт ОбщегоНазначения
импорт УниверсальныеМеханизмы
импорт ОбщиеСтандартные
импорт КонтрольДоступа
импорт ЛичныеКабинетыПользователей
импорт Уведомления
импорт Криптография
импорт КлиентСервисаПодписания

@ВПодсистеме
конст КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: Строка = "ВладельцыКабинетов"

@ВПроекте конст ИД_ПОДСИСТЕМЫ = "ВладельцыКабинетов"
@ВПодсистеме конст ИМЯ_ПОДСИСТЕМЫ = "Владельцы кабинетов"

@ВПроекте
конст ДАННЫЕ_ВЛАДЕЛЬЦА_КАБИНЕТОВ_ЗАГОЛОВОК: Строка = "Мои данные"

@ВПодсистеме конст ПОДСИСТЕМА_ВЛАДЕЛЬЦЫ_КАБИНЕТОВ = "ВладельцыКабинетов"
@ВПодсистеме конст ШАБЛОН_ЗАЯВЛЕНИЯ_НА_ИЗМЕНЕНИЕ_ЛИЧНЫХ_ДАННЫХ = "ШаблонЗавяленияНаИзменениеЛичныхДанных"

@ВПроекте
структура ПараметрыСеанса
    пер ПодразделенияРуководителя: Массив<СтруктураПредприятия.Ссылка>
    пер НепосредственныйРуководитель: ФизическиеЛица.Ссылка?
    пер НапоминатьОПолученныхДокументахПодчиненных: Булево
    пер НачалоРабочегоДня: Длительность?
    пер ОкончаниеРабочегоДня: Длительность?
    пер КвантВремени: Длительность?
    пер СпособУведомления: СпособыУведомления?
    пер ИспользуетКэдо: Булево
    пер ИнформационныеСистемы: Соответствие<ИнформационныеСистемы.Ссылка, ОбменДанными.НастройкиИнформационнойСистемы> = {:}
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка?
    пер Пол: ПолФизическогоЛица
    пер ЭлектроннаяПочта: Строка
    пер МобильныйТелефон: Строка
    пер ФИО: ФизЛица.ФИО
    пер Аватар: ДвоичныйОбъект.Ссылка?
    пер ТекущийПользовательАдминистраторАбонента: Булево
    пер РежимПриватностиПриложения: Булево
    пер ДнейДоОтключенияКабинета: Число?

    пер ФункциональныеОпции: ФункциональныеОпции
;

@ВПроекте
структура ФункциональныеОпции
    пер ЗапросНаИзменениеЛичныхДанных: Булево = Истина
    пер РасширенныйЗапросНаИзменениеЛичныхДанных: Булево
    пер ВозможностьИзменятьФото: Булево
    пер ПолучениеСогласияКэдоНаБумаге: Булево
    пер ПолучениеСогласияКэдоУнэп: Булево
    пер ФизическоеЛицоЛичнаяКонтакатнаяИнформация: Булево = Истина
    пер ФизическоеЛицоАдреса: Булево = Истина
;

@ВПроекте
структура НастройкиФизлица
    пер ПредпочтительныйСпособСвязи: СпособыСвязи?
    пер ПредпочтительныйСпособУведомления: СпособыУведомления?
    пер ВремяНачалаПолученияУведомлений: Время?
    пер ВремяОкончанияПолученияУведомлений: Время?
    пер РежимОтображенияДанныхПриВходеВеб: РежимПриватностиПриложенияПриВходе
    пер РежимОтображенияДанныхПриВходеНаМобильномУстройстве: РежимПриватностиПриложенияПриВходе
    пер ТекущийРежимПриватности: Булево
;

@ВПроекте
структура НастройкиДоступаФизлица
    пер РабочаяКонтактнаяИнформацияДоступнаВсем: Булево
    пер РабочаяКонтактнаяИнформацияДоступнаКоллегам: Булево
    пер ЛичнаяКонтактнаяИнформацияДоступнаВсем: Булево
    пер ЛичнаяКонтактнаяИнформацияДоступнаКоллегам: Булево
;

@ВПроекте
структура ДанныеВладельцаКабинета
    пер ДанныеФизлица: ФизЛица.ДанныеФизлица
    пер Пользователь: Пользователи.Ссылка?
    пер Настройки: НастройкиФизлица
    пер НастройкиДоступа: НастройкиДоступаФизлица
    пер ТекущееСмещениеКлиента: Число
;

@ВПроекте
структура ЗапрашиваемыеДанныеВладельцевКабинетов
    пер ЗапрашиваемыеДанныеФизическихЛиц: ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц
    пер Пользователь: Булево
    пер Настройки: Булево
    пер НастройкиДоступа: Булево
    пер ТекущееСмещениеКлиента: Булево
;

@ВПроекте
перечисление СпособСвязиJson
    phone,
    sms,
    eMail,
    skype
;

конст ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_РАБОЧИХ_КОНТАКТОВ = "ПолномочиеРедактированиеРабочихКонтактов"
конст ПОЛНОМОЧИЕ_ПРОСМОТР_РАБОЧИХ_КОНТАКТОВ = "ПолномочиеПросмотрРабочихКонтактов"
конст ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ЛИЧНЫХ_КОНТАКТОВ = "ПолномочиеРедактированиеЛичныхКонтактов"
конст ПОЛНОМОЧИЕ_ПРОСМОТР_ЛИЧНЫХ_КОНТАКТОВ = "ПолномочиеПросмотрЛичныхКонтактов"
конст РОЛЬ_ЧТЕНИЕ_ЛИЧНЫХ_КОНТАКТОВ = "РольЧтениеЛичныхКонтактов"
конст РОЛЬ_ЧТЕНИЕ_РАБОЧИХ_КОНТАКТОВ = "РольЧтениеРабочихКонтактов"

@ВПроекте
@НаСервере
метод ДобавитьРоли()
    ДобавитьРольЧтениеЛичныхКонтактов()
    ДобавитьРольЧтениеРабочихКонтактов()
;

@НаСервере
метод ДобавитьРольЧтениеЛичныхКонтактов()
    КонтрольДоступа.ДобавитьРоль(
        "Чтение личных контактов",
        РОЛЬ_ЧТЕНИЕ_ЛИЧНЫХ_КОНТАКТОВ,
        [
            ПолномочиеПросмотрЛичныхКонтактов()
        ]
    )
;

@НаСервере
метод ДобавитьРольЧтениеРабочихКонтактов()
    КонтрольДоступа.ДобавитьРоль(
        "Чтение рабочих контактов",
        РОЛЬ_ЧТЕНИЕ_РАБОЧИХ_КОНТАКТОВ,
        [
            ПолномочиеПросмотрРабочихКонтактов()
        ]
    )
;

@ВПодсистеме
@НаСервере
метод РольЧтениеЛичныхКонтактов(): Роли.Ссылка
    возврат КонтрольДоступа.Роль(РОЛЬ_ЧТЕНИЕ_ЛИЧНЫХ_КОНТАКТОВ)
;

@ВПодсистеме
@НаСервере
метод РольЧтениеРабочихКонтактов(): Роли.Ссылка
    возврат КонтрольДоступа.Роль(РОЛЬ_ЧТЕНИЕ_РАБОЧИХ_КОНТАКТОВ)
;

@ВПроекте
@НаСервере
метод ДобавитьПолномочия()
    ДобавитьПолномочиеРедактированиеРабочихКонтактов()
    ДобавитьПолномочиеПросмотрРабочихКонтактов()
    ДобавитьПолномочиеРедактированиеЛичныхКонтактов()
    ДобавитьПолномочиеПросмотрЛичныхКонтактов()
;

@НаСервере
метод ДобавитьПолномочиеРедактированиеРабочихКонтактов()
    КонтрольДоступа.ДобавитьПолномочие(
        "Редактирование рабочих контактов",
        ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_РАБОЧИХ_КОНТАКТОВ,
        "",
        КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица())
;

@НаСервере
метод ДобавитьПолномочиеПросмотрРабочихКонтактов()
    КонтрольДоступа.ДобавитьПолномочие(
        "Просмотр рабочих контактов",
        ПОЛНОМОЧИЕ_ПРОСМОТР_РАБОЧИХ_КОНТАКТОВ,
        "",
        КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица())
;

@НаСервере
метод ДобавитьПолномочиеРедактированиеЛичныхКонтактов()
    КонтрольДоступа.ДобавитьПолномочие(
        "Редактирование личных контактов",
        ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ЛИЧНЫХ_КОНТАКТОВ,
        "",
        КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица())
;

@НаСервере
метод ДобавитьПолномочиеПросмотрЛичныхКонтактов()
    КонтрольДоступа.ДобавитьПолномочие(
        "Просмотр личных контактов",
        ПОЛНОМОЧИЕ_ПРОСМОТР_ЛИЧНЫХ_КОНТАКТОВ,
        "",
        КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица())
;

@ВПроекте
@НаСервере
метод ПолномочиеРедактированиеРабочихКонтактов(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_РАБОЧИХ_КОНТАКТОВ)
;

@ВПроекте
@НаСервере
метод ПолномочиеПросмотрРабочихКонтактов(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_ПРОСМОТР_РАБОЧИХ_КОНТАКТОВ)
;

@ВПроекте
@НаСервере
метод ПолномочиеРедактированиеЛичныхКонтактов(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ЛИЧНЫХ_КОНТАКТОВ)
;

@ВПроекте
@НаСервере
метод ПолномочиеПросмотрЛичныхКонтактов(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_ПРОСМОТР_ЛИЧНЫХ_КОНТАКТОВ)
;

@ВПроекте
метод СпособСвязиИзJson(СпособСвязиJson: СпособСвязиJson?): СпособыСвязи?
    пер СпособСвязи: СпособыСвязи
    выбор СпособСвязиJson
    когда phone
        СпособСвязи = СпособыСвязи.Звонок
    когда sms
        СпособСвязи = СпособыСвязи.Sms
    когда eMail
        СпособСвязи = СпособыСвязи.Email
    когда skype
        СпособСвязи = СпособыСвязи.Skype
    ;
    возврат СпособСвязи
;

@ВПроекте
метод СпособСвязиВJson(Способ: СпособыСвязи?): СпособСвязиJson?
    пер СпособСвязи: СпособСвязиJson?
    выбор Способ
    когда Звонок
        СпособСвязи = СпособСвязиJson.phone
    когда Sms
        СпособСвязи = СпособСвязиJson.sms
    когда Email
        СпособСвязи = СпособСвязиJson.eMail
    когда Skype
        СпособСвязи = СпособСвязиJson.skype
    ;
    возврат СпособСвязи
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ПолучитьФункциональныеОпции(): ФункциональныеОпции?
    возврат ИспользуемаяФункциональность.ФункциональныеОпции()
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЗаписатьФункциональныеОпции(ФункциональныеОпции: ФункциональныеОпции)
    ИспользуемаяФункциональность.ЗаписатьФункциональныеОпции(ФункциональныеОпции)
;

@ВПодсистеме
перечисление ДоступностьКонтактнойИнформацииJson
    grantEveryone,
    grantDivisionHeads,
    grantPeers
;

конст ДОСТУПНОСТЬ_КОНТАКТНОЙ_ИНФОРМАЦИИ_JSON_СООТВЕТСТВИЕ = {
    ДоступностьКонтактнойИнформацииJson.grantEveryone: НастройкиВидимостиКонтактнойИнформации.ДоступнаВсем,
    ДоступностьКонтактнойИнформацииJson.grantDivisionHeads: НастройкиВидимостиКонтактнойИнформации.ДоступнаРуководителямПодразделения,
    ДоступностьКонтактнойИнформацииJson.grantPeers: НастройкиВидимостиКонтактнойИнформации.ДоступнаКоллегам      
}

@ВПодсистеме
метод ДоступностьКонтактнойИнформацииИзJson(ДоступностьКонтактовJson: ДоступностьКонтактнойИнформацииJson): НастройкиВидимостиКонтактнойИнформации
    возврат ДОСТУПНОСТЬ_КОНТАКТНОЙ_ИНФОРМАЦИИ_JSON_СООТВЕТСТВИЕ[ДоступностьКонтактовJson]    
;

@ВПроекте
@НаСервере
метод ДанныеВладельцевКабинетов(СсылкиФизическихЛиц: ЧитаемоеМножество<ФизическиеЛица.Ссылка>, ЗапрашиваемыеДанные: ЗапрашиваемыеДанныеВладельцевКабинетов): ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, ДанныеВладельцаКабинета>
    знч ДанныеВладельцевКабинетов = новый Соответствие<ФизическиеЛица.Ссылка, ДанныеВладельцаКабинета>()
    знч ДанныеФизлиц = ФизЛица.ДанныеФизическихЛиц(СсылкиФизическихЛиц, ЗапрашиваемыеДанные.ЗапрашиваемыеДанныеФизическихЛиц)
    для ФизлицоИДанные из ДанныеФизлиц
        знч ДанныеВладельцаКабинета = новый ДанныеВладельцаКабинета()
        ДанныеВладельцаКабинета.ДанныеФизлица = ФизлицоИДанные.Значение
        ДанныеВладельцевКабинетов.Вставить(ФизлицоИДанные.Ключ, ДанныеВладельцаКабинета)
    ;
    НастройкиФизическихЛиц.ЗаполнитьДанныеФизическихЛиц(ЗапрашиваемыеДанные, ДанныеВладельцевКабинетов)
    ОграниченияДоступаКРабочимКонтактам.ЗаполнитьДанныеФизическихЛиц(ЗапрашиваемыеДанные, ДанныеВладельцевКабинетов)
    ОграниченияДоступаКЛичнымКонтактам.ЗаполнитьДанныеФизическихЛиц(ЗапрашиваемыеДанные, ДанныеВладельцевКабинетов)
    если ЗапрашиваемыеДанные.Пользователь
        знч ПользователиФизическихЛиц = ПользователиСистемы.ПользователиФизическихЛиц(ДанныеВладельцевКабинетов.Ключи())
        для Элемент из ПользователиФизическихЛиц
            ДанныеВладельцевКабинетов[Элемент.Ключ].Пользователь = Элемент.Значение
        ;
    ;
    возврат ДанныеВладельцевКабинетов
;

@ВПроекте
@НаСервере
метод ДанныеВладельцаКабинета(ФизическоеЛицо: ФизическиеЛица.Ссылка, ЗапрашиваемыеДанные: ЗапрашиваемыеДанныеВладельцевКабинетов): ДанныеВладельцаКабинета
    возврат ДанныеВладельцевКабинетов({ФизическоеЛицо}, ЗапрашиваемыеДанные)[ФизическоеЛицо]
;

@ВПодсистеме
@НаСервере
метод НачалоРабочегоДня(): Длительность
    возврат Длительность.ИзЧасов(9)
;

@ВПодсистеме
@НаСервере
метод ОкончаниеРабочегоДня(): Длительность
    возврат Длительность.ИзЧасов(18)
;

@ВПроекте
@НаКлиенте
метод ПараметрыСеанса(): ПараметрыСеанса
    возврат ПараметрыСеансаСервис.ПолучитьСервис().ПараметрПоКлючу(КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА) как ПараметрыСеанса
;

/**
Описание: Находит пользователей для переданных физических лиц. 
Параметры: ФизическиеЛицаМассив - физические лица.
Возвращает:
 Соответствие, в котором ключом является физическое лицо, а значением - ссылка на пользователя.
*/
@ВПроекте
@НаСервере
метод ПользователиВладельцевКабинетов(ФизическиеЛицаМассив: ЧитаемоеМножество<ФизическиеЛица.Ссылка>): ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, Пользователи.Ссылка>
    пер ПользователиСоответствие: Соответствие<ФизическиеЛица.Ссылка, Пользователи.Ссылка>
    знч Запрос = Запрос{
        Выбрать 
            ФизическоеЛицо Как ФизическоеЛицо,
            Пользователь Как Пользователь
        Из
            ПользователиВладельцевКабинетов
        Где
            ФизическоеЛицо В (%ФизическиеЛицаМассив)
            И Пользователь != Неопределено}
    исп РезультатЗапроса = Запрос.Выполнить() 
    для РезультатЗапросаСтрока из РезультатЗапроса
        ПользователиСоответствие.Вставить(РезультатЗапросаСтрока.ФизическоеЛицо, РезультатЗапросаСтрока.Пользователь)
    ;
    возврат ПользователиСоответствие
;

@ВПроекте 
метод ДанныеФизическогоЛицаВФИО(ДанныеФизическогоЛица: ДанныеВладельцаКабинета): ФизЛица.ФИО
    возврат новый ФизЛица.ФИО(
        ДанныеФизическогоЛица.ДанныеФизлица.ЛичныеДанные.ФИО.Фамилия, 
        ДанныеФизическогоЛица.ДанныеФизлица.ЛичныеДанные.ФИО.Имя, 
        ДанныеФизическогоЛица.ДанныеФизлица.ЛичныеДанные.ФИО.Отчество, 
        ДанныеФизическогоЛица.ДанныеФизлица.ЛичныеДанные.ФИО.ИнициалыИмени)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод УстановитьПризнакТребуетсяОбновление(ФизическоеЛицо: ФизическиеЛица.Ссылка?, ТребуетсяОбновление: Булево? = Неопределено, ТребуетсяОбновлениеФО: Булево? = Неопределено)
    ОбновлениеДанныхФизическихЛиц.УстановитьПризнакТребуетсяОбновление(ФизическоеЛицо, ТребуетсяОбновление, ТребуетсяОбновлениеФО)
;

@ВПроекте
@НаСервере
метод УстановитьПризнакТребуетсяОбновление(СсылкиФизическихЛиц: Массив<ФизическиеЛица.Ссылка>, ТребуетсяОбновление: Булево = Истина, ТребуетсяОбновлениеФО: Булево = Ложь)
    ОбновлениеДанныхФизическихЛиц.УстановитьПризнакТребуетсяОбновление(СсылкиФизическихЛиц, ТребуетсяОбновление, ТребуетсяОбновлениеФО)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ТребуетсяОбновлениеДанных(ФизическоеЛицо: ФизическиеЛица.Ссылка?): Булево
    возврат ОбновлениеДанныхФизическихЛиц.ТребуетсяОбновлениеДанных(ФизическоеЛицо)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ТребуетсяОбновлениеФО(ФизическоеЛицо: ФизическиеЛица.Ссылка?): Булево
    возврат ОбновлениеДанныхФизическихЛиц.ТребуетсяОбновлениеФО(ФизическоеЛицо)
;

@ВПроекте
@НаСервере
метод ОбновитьОтображаемыеДанныеАдминистраторовАбонента()
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    пер АдминистраторыАбонента = КонтрольДоступа.ФизическиеЛицаАдминистраторыАбонента()
    ПривилегированныйРежим.Закрыть()
    пер СсылкиФизическихЛиц: Массив<ФизическиеЛица.Ссылка>
    СсылкиФизическихЛиц.ДобавитьВсе(АдминистраторыАбонента)
    УстановитьПризнакТребуетсяОбновление(СсылкиФизическихЛиц)
;

@ВПроекте
@НаСервере
метод ЧасовойПоясФизическогоЛица(ФизическоеЛицо: ФизическиеЛица.Ссылка): ЧасовойПояс
    возврат НастройкиФизическихЛиц.ЧасовойПоясФизическогоЛица(ФизическоеЛицо)
;

@ВПроекте
@НаСервере
метод ПроверитьСостояниеОбмена(ФизическоеЛицо: ФизическиеЛица.Ссылка): ОбменДанными.СостояниеОбмена
    
    пер СостояниеОбмена: ОбменДанными.СостояниеОбмена
    пер ИнформационныеСистемы = ИнформационныеСистемы.НастройкиСистем(ЛичныеКабинетыПользователей.ИнформационныеСистемыФизическогоЛица(ФизическоеЛицо))
    
    пер СписокИнформационныхСистем: Массив<ИнформационныеСистемы.Ссылка>
    пер ОповещатьПриОтсутствииОбмена: Булево
    
    для ИнформационнаяСистема из ИнформационныеСистемы
        пер ДанныеИнформационнойСистемы: ОбменДанными.НастройкиИнформационнойСистемы = ИнформационнаяСистема.Значение
        если ДанныеИнформационнойСистемы.ОповещатьПриОтсутствииОбмена
            ОповещатьПриОтсутствииОбмена = Истина
            СписокИнформационныхСистем.Добавить(ИнформационнаяСистема.Ключ)
        ;
    ;
    
    если не ОповещатьПриОтсутствииОбмена
        возврат СостояниеОбмена
    ;
    
    пер ТекущаяДата: ДатаВремя = Момент.Сейчас().ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий())
    знч ЗапрашиваемыеДанные: ВладельцыКабинетов.ЗапрашиваемыеДанныеВладельцевКабинетов
    ЗапрашиваемыеДанные.Настройки = Истина
    пер ДанныеФизическогоЛица = ВладельцыКабинетов.ДанныеВладельцаКабинета(ФизическоеЛицо, ЗапрашиваемыеДанные)
    пер ПредпочтительныйСпособУведомления = ДанныеФизическогоЛица.Настройки.ПредпочтительныйСпособУведомления
    знч ВремяПоследнегоОбменаДанными = ОбменДанными.ВремяПоследнегоОбменаДанными(СписокИнформационныхСистем)

    для ВремяОбмена из ВремяПоследнегоОбменаДанными
        пер ВремяПоследнегоОбмена: ДатаВремя = ВремяОбмена.Значение.ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий())
        пер ДлительностьОтсутствияОбмена = (ТекущаяДата - ВремяПоследнегоОбмена).ВМинутах()
        пер ДанныеИнформационнойСистемы: ОбменДанными.НастройкиИнформационнойСистемы = ИнформационныеСистемы[ВремяОбмена.Ключ]
        если ДлительностьОтсутствияОбмена > ДанныеИнформационнойСистемы.ДопустимоеВремяОтсутствияОбмена
            СостояниеОбмена.ОповеститьОбОтсутствииОбмена = Истина
            СостояниеОбмена.ДлительностьОтсутствияОбмена = СостояниеОбмена.ДлительностьОтсутствияОбмена == 0 ?
                ДлительностьОтсутствияОбмена : Мин(ДлительностьОтсутствияОбмена, СостояниеОбмена.ДлительностьОтсутствияОбмена)
            если ПредпочтительныйСпособУведомления == СпособыУведомления.EMail
                или ПредпочтительныйСпособУведомления == СпособыУведомления.Push
                СостояниеОбмена.ОповеститьСотрудникаОВозобновленииОбмена = Истина
                ОповещаемыеОВозобновленииОбмена.ДобавитьОповещаемого(ФизическоеЛицо, ВремяОбмена.Ключ)
            ;
        ;
    ;
    возврат СостояниеОбмена
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ФизическоеЛицоИспользуетКэдо(ФизическоеЛицо: ФизическиеЛица.Ссылка): Булево
    пер ДоступныеФункцииФизическогоЛица = ДоступныеФункцииФизическихЛиц.ЭлементОпцийФизическогоЛица(ФизическоеЛицо)
    если ДоступныеФункцииФизическогоЛица != Неопределено
        возврат ДоступныеФункцииФизическогоЛица.ИспользуетКэдо
    ;
    возврат Ложь     
;

@ВПроекте
@НаКлиенте
метод ЭтоРуководительПодразделения(): Булево
    возврат ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо != Неопределено
                и не ПараметрыСеанса().ПодразделенияРуководителя.Пусто()
                и Компания.ПараметрыСеанса().ТекущийПользовательСотрудник    
;

@НаСервере 
структура ДанныеЗаявления
    обз пер ДатаДокумента: Дата
    обз пер Представление: Строка
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ПредставленияЗаявленийФизлица(ФизическоеЛицо: ФизическиеЛица.Ссылка?): ЧитаемаяКоллекция<СостояниеДокументаКомпонентДанных>
    пер ПредставленияЗаявленийФизлица: Массив<СостояниеДокументаКомпонентДанных>
    если ФизическоеЛицо == Неопределено
        возврат ПредставленияЗаявленийФизлица
    ;
    знч ЗаявленияФизлица: Массив<ДокументИмеющийСостояние.Ссылка>
    знч ДанныеЗаявлений: Соответствие<ДокументИмеющийСостояние.Ссылка, ДанныеЗаявления>
    исп РезультатЗапроса = Запрос{Выбрать
            Ссылка Как Документ,
            Дата Как ДатаДокумента,
            ПредставлениеДокумента Как Представление
            Из ЗапросИзмененияЛичныхДанных
            Где ФизическоеЛицо == %ФизическоеЛицо
            Упорядочить по МоментСоздания Убыв}.Выполнить()
    для СтрокаРезультата из РезультатЗапроса
        ЗаявленияФизлица.Добавить(СтрокаРезультата.Документ)
        ДанныеЗаявлений.Вставить(СтрокаРезультата.Документ, новый ДанныеЗаявления(СтрокаРезультата.ДатаДокумента, СтрокаРезультата.Представление))
    ;
    ПредставленияЗаявленийФизлица = СостДокументов.СостоянияДокументов(ЗаявленияФизлица)
    для Компонент из ПредставленияЗаявленийФизлица
        Компонент.ДатаДокумента = ДанныеЗаявлений[Компонент.Документ].ДатаДокумента
        Компонент.Представление = ДанныеЗаявлений[Компонент.Документ].Представление
        Компонент.ДополнительноеПредставление = МенеджерДат.ФорматДаты(ДанныеЗаявлений[Компонент.Документ].ДатаДокумента)
    ;
    знч Сервисы = СостояниеДокументовПоставщик.ПолучитьСервисы()
    для Сервис из Сервисы
        Сервис.ЗаполнитьКартинкиДокументов(ПредставленияЗаявленийФизлица)
    ;
    возврат ПредставленияЗаявленийФизлица
;

@ВПроекте
@НаСервере
метод ДобавитьГруппыДоступаЛичныхКонтактов()
    ОграниченияДоступаКЛичнымКонтактам.ЗаполнитьГруппыДоступаИОбновитьРазрешенияКонтактнойИнформации()
;

@ВПроекте
@НаСервере
метод ДобавитьГруппыДоступаРабочихКонтактов()
    ОграниченияДоступаКРабочимКонтактам.ДобавитьГруппыДоступаРабочихКонтактов()
;

@ВПодсистеме
@НаСервере
метод ДнейДоОтключенияКабинета(ФизическоеЛицо: ФизическиеЛица.Ссылка): Число?
    знч ДатаОтключения = ФизЛица.ДатаОтключенияКабинета(ФизическоеЛицо)
    если ДатаОтключения != Неопределено
        возврат (ДатаОтключения - МенеджерДат.ТекущаяДатаВремя().ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий()).Дата).Дни
    ;
    возврат Неопределено
;

@ВПроекте
@НаКлиенте
метод ДоступноПодписаниеЭлектроннойПодписью(ФизическоеЛицо: ФизическиеЛица.Ссылка): Булево
    знч ПараметрыСеансаКриптография = Криптография.ПараметрыСеанса()
    выбор ПараметрыСеансаКриптография.ВидЭлектроннойПодписи
        когда ВидыЭлектронныхПодписей.УНЭПИнформационнойСистемы
            возврат ПараметрыСеансаКриптография.ПользовательИмеетСертификатЭП
        когда ВидыЭлектронныхПодписей.УнэпАстралПлатформа
            возврат КлиентСервисаПодписания.ЕстьДействующийСертификат(ФизическоеЛицо, ПараметрыСеансаКриптография.ВидЭлектроннойПодписи)
        когда ВидыЭлектронныхПодписей.Госключ
            возврат Истина
    ;
    возврат Ложь
;