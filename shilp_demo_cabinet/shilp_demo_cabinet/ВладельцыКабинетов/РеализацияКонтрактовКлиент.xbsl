импорт Документы
импорт ИнтерфейсныеКомпонентыСтандартные
импорт Компания
импорт КонтрольДоступаСтандартные
импорт ЛичныеКабинетыПользователей
импорт ОбщиеСтандартные
импорт СтандартноеПриложение
импорт Уведомления
импорт УниверсальныеМеханизмы
импорт ФизическиеЛица
импорт ВладельцыКабинетов

// Контракт ОсновнойИнтерфейсПоставщик
@ВПроекте
@Реализация
метод РазделыПриложения(): ЧитаемаяКоллекция<ОсновнойИнтерфейс.ОписаниеРаздела>
    если ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо != Неопределено и
            Компания.ПараметрыСеанса().ТекущийПользовательСотрудник
        возврат [ОписаниеРазделаНастройки()]
    иначе
        возврат []
    ;
;

@ВПроекте
@Реализация
метод Виджеты(): ЧитаемаяКоллекция<ОсновнойИнтерфейс.ОписаниеВиджета>
    знч Виджеты: Массив<ОсновнойИнтерфейс.ОписаниеВиджета>
    если не Компания.ПараметрыСеанса().ТекущийПользовательСотрудник
        и ВладельцыКабинетов.ПараметрыСеанса().ДнейДоОтключенияКабинета != Неопределено
        и не СтандартноеПриложение.ПараметрыСеанса().ТекущийПользовательИмеетПолныеПрава
        
        Виджеты.Добавить(ОписаниеВиджетаОтключениеКабинета())
    ;
    возврат Виджеты
;

@НаКлиенте
метод ОписаниеВиджетаОтключениеКабинета(): ОсновнойИнтерфейс.ОписаниеВиджета
    возврат новый ОсновнойИнтерфейс.ОписаниеВиджета(
        Ид = ВладельцыКабинетов.ИД_ПОДСИСТЕМЫ,
        ИдРаздела = ВладельцыКабинетов.ИД_ПОДСИСТЕМЫ,
        Имя = "Отключение кабинета",
        Компонент = новый ОтключениеКабинетаВиджетСодержимое())
;

@ВПроекте
@Реализация
метод КомандыВсеФункции(): ЧитаемаяКоллекция<ОсновнойИнтерфейс.ОписательКомандыВсеФункции>
    знч Группа = новый ОсновнойИнтерфейс.ОписательГруппыКомандВсеФункции(ВладельцыКабинетов.ИМЯ_ПОДСИСТЕМЫ, 25)
    возврат [
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Доступные функции физических лиц",
            СоздательФормыСписка = метод()-> возврат новый ДоступныеФункцииФизическихЛиц.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ДоступныеФункцииФизическихЛиц.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Запрос изменения личных данных",
            СоздательФормыСписка = метод()-> возврат новый ЗапросИзмененияЛичныхДанных.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ЗапросИзмененияЛичныхДанных.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Настройки физических лиц",
            СоздательФормыСписка = метод()-> возврат новый НастройкиФизическихЛиц.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый НастройкиФизическихЛиц.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Обновление данных физических лиц",
            СоздательФормыСписка = метод()-> возврат новый ОбновлениеДанныхФизическихЛиц.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ОбновлениеДанныхФизическихЛиц.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Ограничения дступа к рабочим контактам",
            СоздательФормыСписка = метод()-> возврат новый ОграниченияДоступаКРабочимКонтактам.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ОграниченияДоступаКРабочимКонтактам.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Согласие на присоединение к КЭДО",
            СоздательФормыСписка = метод()-> возврат новый СогласиеНаПрисоединениеККэдо.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый СогласиеНаПрисоединениеККэдо.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Заместители на время отсутствия",
            СоздательФормыСписка = метод()-> возврат новый ЗаместителиНаВремяОтсутствия.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ЗаместителиНаВремяОтсутствия.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Уведомляемые об отсутствии (устарело)",
            СоздательФормыСписка = () -> новый УведомляемыеОбОтсутствииУстарело.АвтоматическаяФормаСписка(),
            СоздательФормыОбъекта = () -> новый УведомляемыеОбОтсутствииУстарело.АвтоматическаяФормаОбъекта()
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Уведомляемые об отсутствии (настройки)",
            СоздательФормыСписка = () -> новый НастройкиУведомляемыеОбОтсутствии.АвтоматическаяФормаСписка(),
            СоздательФормыОбъекта = () -> новый НастройкиУведомляемыеОбОтсутствии.АвтоматическаяФормаОбъекта()
            ),    
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Уведомляемые об отсутствии",
            СоздательФормыСписка = () -> новый УведомляемыеОбОтсутствии.АвтоматическаяФормаСписка(),
            СоздательФормыОбъекта = () -> новый УведомляемыеОбОтсутствии.АвтоматическаяФормаОбъекта()
            ),    
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Ограничения доступа к личным контактам",
            СоздательФормыСписка = метод()-> возврат новый ОграниченияДоступаКЛичнымКонтактам.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ОграниченияДоступаКЛичнымКонтактам.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Оповещаемые о возобновлении обмена",
            СоздательФормыСписка = метод()-> возврат новый ОповещаемыеОВозобновленииОбмена.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ОповещаемыеОВозобновленииОбмена.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Используемая функциональность (Владельцы кабинетов)",
            СоздательФормыСписка = метод()-> возврат новый ИспользуемаяФункциональность.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ИспользуемаяФункциональность.АвтоматическаяФормаОбъекта();
            )
    ]
;

@ВПроекте
@Реализация
метод ДополнительныеКоманды(): ЧитаемыйМассив<Команда>
    возврат []
;

@ВПроекте
@Реализация
метод КомандыПанелиДействий(): ЧитаемыйМассив<Команда>
    ДействиеРежимПриватности.Активна = ВладельцыКабинетов.ПараметрыСеанса().РежимПриватностиПриложения
    если ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо != Неопределено и КлиентскоеУстройство.ВидИнтерфейса != ВидИнтерфейса.Телефон
        возврат [ДействиеРежимПриватности]
    иначе
        возврат []
    ;
;

@ВПроекте
@Реализация
метод ДополнительныеКомандыПанелиГлавное(): ЧитаемыйМассив<Команда>
    если ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо != Неопределено и КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон
        возврат [ДействиеРежимПриватности]
    иначе
        возврат []
    ;    
;
// Конец ОсновнойИнтерфейсПоставщик

// Контракт ПослеСозданияОбработчик
@ВПроекте
@Реализация
метод ПослеСоздания()
    если ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо != Неопределено
        (КлиентскоеПриложение как ОсновноеПриложение).ПодключитьОбработчикТаймера(&ПроверитьНеобходимостьОбновленияДанныхФизическогоЛица, 15с)
    ;
    если КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Компьютер
        (КлиентскоеПриложение как ОсновноеПриложение).ВидимостьИнформацииОПриложении = 
            ВладельцыКабинетов.ПараметрыСеанса().ТекущийПользовательАдминистраторАбонента 
            или МенеджерПравДоступа.ЭтоАдминистраторПриложения()
    иначе
        (КлиентскоеПриложение как ОсновноеПриложение).ВидимостьИнформацииОПриложении = Ложь
    ;
;
// Конец ПослеСозданияОбработчик

// Контракт ДокументыСотрудниковПоставщик

@ВПроекте
@Реализация
метод КомандыСоздатьЗаявление(): ЧитаемыйМассив<ЭлементСпискаЗначений<Объект?>>
    знч Команды: Массив<ЭлементСпискаЗначений<Объект?>>
    если ВладельцыКабинетов.ПолучитьФункциональныеОпции().ЗапросНаИзменениеЛичныхДанных
        пер СтрокаСписка = новый ЭлементСпискаЗначений<Объект?>(
            Значение = КОМАНДА_СОЗДАТЬ_ЗАПРОС_ИЗМЕНЕНИЯ_ЛИЧНЫХ_ДАННЫХ,
            Представление = "Изменить мои данные")
            
        Команды.Добавить(СтрокаСписка)
    ; 
    возврат Команды
;

@ВПроекте
@Реализация
метод КомпонентДокумента(Заявление: ДокументСотрудника.Ссылка): ДокументСотрудникаКомпонент?
    выбор Заявление
    когда это ЗапросИзмененияЛичныхДанных.Ссылка
        возврат новый ЗапросИзмененияЛичныхДанныхКомпонент()
    иначе
        возврат Неопределено
    ;
;

@ВПроекте
@Реализация
метод ОткрытьЗаявлениеМодально(Заявление: ДокументСотрудника.Ссылка): СтандартныеФормы.ДействиеВФорме?
    если Заявление это ЗапросИзмененияЛичныхДанных.Ссылка
        возврат ЗапросИзмененияЛичныхДанныхФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = Заявление как ЗапросИзмененияЛичныхДанных.Ссылка)
    иначе
        возврат Неопределено
    ;
;

@ВПроекте
@Реализация
метод ВыполнитьКомандуСоздать(Действие: ЭлементСпискаЗначений<Объект?>)
    знч ВидЗаявления = Действие.Значение
    если не (ВидЗаявления это Строка)
        возврат    
    ;
    если ВидЗаявления == КОМАНДА_СОЗДАТЬ_ЗАПРОС_ИЗМЕНЕНИЯ_ЛИЧНЫХ_ДАННЫХ
        ЗапросИзмененияЛичныхДанныхФормаДокумента.ОткрытьВМодальномОкне()
    ; 
;

@ВПроекте
@Реализация
метод ПредставленияДокументов(): ЧитаемаяКоллекция<СостояниеДокументаКомпонентДанных>
    возврат ВладельцыКабинетов.ПредставленияЗаявленийФизлица(ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо)
;

// Конец ДокументыСотрудниковПоставщик

// Контракт PushУведомленияОбработчик
@ВПроекте 
@Реализация
метод ВыполнитьДействие(ДанныеPush: PushУведомления.ДанныеPush)
    выбор
    когда ДанныеPush.Ссылка это ЗапросИзмененияЛичныхДанных.Ссылка
        ЗапросИзмененияЛичныхДанныхФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = ДанныеPush.Ссылка как ЗапросИзмененияЛичныхДанных.Ссылка)
    когда ДанныеPush.ИдКоманды == СогласиеНаПрисоединениеККэдоКлиентСервер.ОТКРЫТЬ_ФОРМУ_ПОДПИСАНИЯ_КЭДО
        (КлиентскоеПриложение как ОсновноеПриложение).ИнициализироватьКомандныйИнтерфейс(Истина)
        КомплектСогласиеНаПрисоединениеККэдоФорма.ОткрытьВМодальномОкне()
    ;
;
// Конец PushУведомленияОбработчик

метод ОписаниеРазделаНастройки(): ОсновнойИнтерфейс.ОписаниеРаздела
    возврат новый ОсновнойИнтерфейс.ОписаниеРаздела(
        Ид = ФизЛица.ИД_РАЗДЕЛА_НАСТРОЙКИ,
        Имя = "Настройки",
        РазмещениеРаздела = РазмещениеРаздела.ДополнительнаяНавигация,
        Пиктограмма = НавигацияНастройки.Изображение,
        ЦветПиктограммы = Неопределено,
        НавигационнаяКомандаРаздела = НавигацияНастройки,
        ШиринаДляПанелиНавигации = 160)
;

метод ПроверитьНеобходимостьОбновленияДанныхФизическогоЛица()
    знч ФизическоеЛицо = ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
    если ВладельцыКабинетов.ТребуетсяОбновлениеДанных(ФизическоеЛицо)
        МенеджерГлобальныхКлиентскихСобытий.Оповестить(ФизЛица.ТРЕБУЕТСЯ_ОБНОВЛЕНИЕ_ДАННЫХ_ФИЗИЧЕСКОГО_ЛИЦА)
        ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(
            ФизическоеЛицо,
            Ложь
        )
    ;
    если ВладельцыКабинетов.ТребуетсяОбновлениеФО(ФизическоеЛицо)
        МенеджерГлобальныхКлиентскихСобытий.Оповестить(СтандартноеПриложение.ТРЕБУЕТСЯ_ОБНОВЛЕНИЕ_ПАРАМЕТРОВ_СЕАНСА)
        ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(
            ФизическоеЛицо,
            Неопределено,
            Ложь
        )            
    ;
;

конст КОМАНДА_СОЗДАТЬ_ЗАПРОС_ИЗМЕНЕНИЯ_ЛИЧНЫХ_ДАННЫХ: Строка = "КомандаСоздатьЗапросИзмененияЛичныхДанных"