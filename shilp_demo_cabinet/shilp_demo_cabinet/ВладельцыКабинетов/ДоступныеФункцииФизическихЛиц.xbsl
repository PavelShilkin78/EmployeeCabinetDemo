импорт ВебApi
импорт КонтрольДоступа
импорт ФизическиеЛица

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ЧтениеИРедактированиеАутентифицированным(этот),
            КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот)]
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ДоступныеФункцииФизическихЛиц.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ДоступныеФункцииФизическихЛиц.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ДоступныеФункцииФизическихЛиц.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПерсонально([Элемент.Владелец]))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    
    возврат Разрешения
;

//КонецОбласти

//Область JSON

@ВПроекте
структура ДанныеJson
    обз знч personID: Строка
    обз знч personnelEdmUse: Булево?
    обз знч studyLeaveUse: Булево?
    обз знч invalidChildCareUse: Булево?
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<ДанныеJson>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<ДанныеJson>
    ;
;

@ВПроекте
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Массив<ДанныеJson>>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Массив<ДанныеJson>>
    ;
;

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "usedFeatures"
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    
    исп Транзакции.Начать()

    пер ФизическоеЛицо = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID)) как ФизическиеЛица.Ссылка
    пер Опции = новый ЗначенияОпций()

    Опции.ИспользуетКэдо = ДанныеJson.personnelEdmUse ?? Ложь
    Опции.ИспользуетУчебныйОтпуск = ДанныеJson.studyLeaveUse ?? Ложь
    Опции.ИспользуетДниУходаЗаДетьмиИнвалидами = ДанныеJson.invalidChildCareUse ?? Ложь

    УстановитьОпции(ФизическоеЛицо, Опции)

;

//КонецОбласти

@ВПроекте
структура ЗначенияОпций
    пер ИспользуетКэдо: Булево?
    пер ИспользуетУчебныйОтпуск: Булево?
    пер ИспользуетДниУходаЗаДетьмиИнвалидами: Булево?
;

@ВПодсистеме
метод УстановитьОпции(ФизическоеЛицо: ФизическиеЛица.Ссылка, Опции: ЗначенияОпций)
    
    пер Элемент = ЭлементОпцийФизическогоЛица(ФизическоеЛицо)
    
    если Элемент == Неопределено
        Элемент = новый ДоступныеФункцииФизическихЛиц.Объект()
        Элемент.Владелец = ФизическоеЛицо
    ;
    
    если Опции.ИспользуетУчебныйОтпуск != Неопределено
        Элемент.ИспользуетУчебныйОтпуск = Опции.ИспользуетУчебныйОтпуск
    ;
    если Опции.ИспользуетДниУходаЗаДетьмиИнвалидами != Неопределено
        Элемент.ИспользуетДниУходаЗаДетьмиИнвалидами = Опции.ИспользуетДниУходаЗаДетьмиИнвалидами
    ;
    если Опции.ИспользуетКэдо != Неопределено
        Элемент.ИспользуетКэдо = Опции.ИспользуетКэдо
    ;
    
    Элемент.Записать()
;

@ВПроекте
метод ЭлементОпцийФизическогоЛица(ФизическоеЛицо: ФизическиеЛица.Ссылка, Заблокировать: Булево = Ложь): ДоступныеФункцииФизическихЛиц.Объект?
    
    знч Запрос = Запрос{
        Выбрать 
            Ссылка
        Из 
            ДоступныеФункцииФизическихЛиц 
        Где 
            Владелец == %ФизическоеЛицо}
    исп Результат = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        возврат РезультатСтроки[0].Ссылка.ЗагрузитьОбъект(Заблокировать)
    ;
    возврат Неопределено
;
