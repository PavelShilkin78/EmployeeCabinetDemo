импорт ОбщиеСтандартные
импорт КонтрольДоступа
импорт ФизическиеЛица
импорт ВебApi
импорт Компания

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ЧтениеИРедактированиеАутентифицированным(этот),
            КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот)]    
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ОграниченияДоступаКРабочимКонтактам.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ОграниченияДоступаКРабочимКонтактам.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ОграниченияДоступаКРабочимКонтактам.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеРедактированиеДанныхСправочниковПерсонально([Элемент.Владелец]))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

//КонецОбласти

//Область JSON

@ВПроекте
структура Ограничения_V1_0
    обз знч personID: Строка
    обз знч access: ВладельцыКабинетов.ДоступностьКонтактнойИнформацииJson    
;

@ВПодсистеме
метод ТипОбъектаJson(): Строка
    возврат "workContactsAccess"
;

@ВПодсистеме
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Неопределено>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Ограничения_V1_0>
    ;
;

@ВПодсистеме 
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Массив<Неопределено>>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Массив<Ограничения_V1_0>>
    ;
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(ДанныеJson: Ограничения_V1_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    
    пер ФизическоеЛицо = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID)) как ФизическиеЛица.Ссылка
    пер ОграничениеДоступаКРабочимКонтактамСсылка = ОграничениеДоступаКРабочимКонтактам(ФизическоеЛицо)
    пер ОграничениеДоступаКРабочимКонтактам: ОграниченияДоступаКРабочимКонтактам.Объект
    если ОграничениеДоступаКРабочимКонтактамСсылка == Неопределено
        ОграничениеДоступаКРабочимКонтактам.Владелец = ФизическоеЛицо
    иначе
        ОграничениеДоступаКРабочимКонтактам = ОграничениеДоступаКРабочимКонтактамСсылка.ЗагрузитьОбъект()    
    ;
    пер ДоступностьКонтактнойИнформации = ВладельцыКабинетов.ДоступностьКонтактнойИнформацииИзJson(ДанныеJson.access)
    
    если ДоступностьКонтактнойИнформации == НастройкиВидимостиКонтактнойИнформации.ДоступнаВсем
        ОграничениеДоступаКРабочимКонтактам.ДоступнаВсем = Истина
        ОграничениеДоступаКРабочимКонтактам.ДоступнаКоллегам = Ложь    
    иначе если ДоступностьКонтактнойИнформации == НастройкиВидимостиКонтактнойИнформации.ДоступнаКоллегам
        ОграничениеДоступаКРабочимКонтактам.ДоступнаВсем = Ложь
        ОграничениеДоступаКРабочимКонтактам.ДоступнаКоллегам = Истина
    иначе если ДоступностьКонтактнойИнформации == НастройкиВидимостиКонтактнойИнформации.ДоступнаРуководителямПодразделения
        ОграничениеДоступаКРабочимКонтактам.ДоступнаВсем = Ложь
        ОграничениеДоступаКРабочимКонтактам.ДоступнаКоллегам = Ложь
    ; 
    
    ОграничениеДоступаКРабочимКонтактам.Записать()
         
;

//Конец JSON

@ВПодсистеме
метод Заполнить(ОграниченияДоступа: ОграниченияДоступаКРабочимКонтактам.Объект, ДанныеФизлица: ВладельцыКабинетов.ДанныеВладельцаКабинета)
    ОграниченияДоступа.ДоступнаВсем = ДанныеФизлица.НастройкиДоступа.РабочаяКонтактнаяИнформацияДоступнаВсем
    ОграниченияДоступа.ДоступнаКоллегам = ДанныеФизлица.НастройкиДоступа.РабочаяКонтактнаяИнформацияДоступнаКоллегам
;

@ВПроекте
метод ОграничениеДоступаКРабочимКонтактам(ФизическоеЛицо: ФизическиеЛица.Ссылка): ОграниченияДоступаКРабочимКонтактам.Ссылка?
    пер СсылкаПоФизлицу: ОграниченияДоступаКРабочимКонтактам.Ссылка?
    знч Запрос = Запрос{
        Выбрать Ссылка
        Из ОграниченияДоступаКРабочимКонтактам
        Где Владелец == %ФизическоеЛицо}
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        СсылкаПоФизлицу = СтрокаРезультата.Ссылка
    ;
    возврат СсылкаПоФизлицу
;

@ВПроекте
метод ОграниченияДоступаКРабочимКонтактам(Физлица: ЧитаемаяКоллекция<ФизическиеЛица.Ссылка>): ЧитаемыйМассив<ОграниченияДоступаКРабочимКонтактам.Ссылка>
    пер Ограничения: Массив<ОграниченияДоступаКРабочимКонтактам.Ссылка>
    знч Запрос = Запрос{
        Выбрать Ссылка
        Из ОграниченияДоступаКРабочимКонтактам
        Где Владелец В (%Физлица)}
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        Ограничения.Добавить(СтрокаРезультата.Ссылка)
    ;
    возврат Ограничения
;

@ВПодсистеме
метод ЗаполнитьДанныеФизическихЛиц(
        ЗапрашиваемыеДанные: ВладельцыКабинетов.ЗапрашиваемыеДанныеВладельцевКабинетов, 
        ДанныеФизическихЛиц: Соответствие<ФизическиеЛица.Ссылка, ВладельцыКабинетов.ДанныеВладельцаКабинета>)
        
    пер ЗапрашиваемыеПоляТаблицы: Строка = ЗапрашиваемыеПоляТаблицы(ЗапрашиваемыеДанные)
    если не ЗапрашиваемыеПоляТаблицы.Пусто()
        пер Запрос = новый ПроизвольныйЗапрос() // текст запроса динамический
        ЗапрашиваемыеПоляТаблицы += ",Владелец"
        Запрос.Текст = 
            "Выбрать %ЗапрашиваемыеПоляТаблицы
            Из ОграниченияДоступаКРабочимКонтактам
            Где Владелец В (&ФизическиеЛица)"
        Запрос.УстановитьПараметр("ФизическиеЛица", ДанныеФизическихЛиц.Ключи())
        исп Результат = Запрос.Выполнить()
        для РезультатСтрока из Результат
            ЗаполнитьПоРезультатуЗапроса(ЗапрашиваемыеДанные, ДанныеФизическихЛиц, РезультатСтрока)
        ;
    ;
;

метод ЗапрашиваемыеПоляТаблицы(ЗапрашиваемыеДанные: ВладельцыКабинетов.ЗапрашиваемыеДанныеВладельцевКабинетов): Строка
    пер ЗапрашиваемыеПоляТаблицы: Строка
    если ЗапрашиваемыеДанные.НастройкиДоступа
        ЗапрашиваемыеПоляТаблицы = "ДоступнаВсем,ДоступнаКоллегам"
    ;
    возврат ЗапрашиваемыеПоляТаблицы
;

метод ЗаполнитьПоРезультатуЗапроса(
        ЗапрашиваемыеДанные: ВладельцыКабинетов.ЗапрашиваемыеДанныеВладельцевКабинетов, 
        ДанныеФизическихЛиц: Соответствие<ФизическиеЛица.Ссылка, ВладельцыКабинетов.ДанныеВладельцаКабинета>, 
        СтрокаРезультата: СтрокаРезультатаПроизвольногоЗапроса)
    
    пер ДанныеФизическогоЛица: ВладельцыКабинетов.ДанныеВладельцаКабинета = ДанныеФизическихЛиц[СтрокаРезультата.Владелец]
    если ЗапрашиваемыеДанные.НастройкиДоступа
        ДанныеФизическогоЛица.НастройкиДоступа.РабочаяКонтактнаяИнформацияДоступнаВсем = СтрокаРезультата.ДоступнаВсем
        ДанныеФизическогоЛица.НастройкиДоступа.РабочаяКонтактнаяИнформацияДоступнаКоллегам = СтрокаРезультата.ДоступнаКоллегам
    ;
;

@ВПроекте
метод ОбновитьГруппыДоступаКонтактнойИнформации(ФизическиеЛица: ЧитаемоеМножество<ФизическиеЛица.Ссылка>)
    знч Запрос = Запрос{
        Выбрать
            Владелец
        Из
            ОграниченияДоступаКРабочимКонтактам
        Где
            ДоступнаКоллегам
            И Владелец в (%ФизическиеЛица)
    }
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ОбновитьГруппуДоступаКонтактнойИнформации(СтрокаРезультата.Владелец)
    ;
;

@ВПодсистеме
метод ОбновитьГруппуДоступаКонтактнойИнформации(ФизическоеЛицо: ФизическиеЛица.Ссылка): ГруппыДоступа.Ссылка?
    знч ПодразделенияФизическогоЛица = ОрганизационнаяСтруктура.ПодразделенияФизическогоЛица(ФизическоеЛицо)
    знч ФизическиеЛицаСотрудников = новый Множество<ФизическиеЛица.Ссылка>(ОрганизационнаяСтруктура.ФизическиеЛицаПодразделений(ПодразделенияФизическогоЛица))
    
    МенеджерКоллекций.УдалитьВхожденияВсех(ФизическиеЛицаСотрудников, <ФизическиеЛица.Ссылка>[ФизическоеЛицо])
    пер ПользователиДоступа = новый Массив<Пользователи.Ссылка>(КонтрольДоступа.ПользователиВладельцевКабинетов(ФизическиеЛицаСотрудников).Значения())
    
    знч ЗначенияОграничений: Массив<ЗначенияОграниченийГруппДоступа>
    ЗначенияОграничений.Добавить(новый ЗначенияОграниченийГруппДоступа(
        КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица(),
        ФизическоеЛицо,
        Ложь
    ))
    
    возврат КонтрольДоступа.ОбновитьГруппуДоступа(
        КлючГруппыДоступа(ФизическоеЛицо),
        МенеджерСущности.ПредставлениеСсылки(ФизическоеЛицо),
        ВладельцыКабинетов.РольЧтениеРабочихКонтактов(),
        ЗначенияОграничений,
        ПользователиДоступа,
        ВидыГруппыДоступа.Служебная    
    )
;

@ВПодсистеме
метод КлючГруппыДоступа(ФизическоеЛицо: ФизическиеЛица.Ссылка): Строка
    возврат "ДоступКРабочимКонтактам%{ФизическоеЛицо.Ид.ВСтроку()}"
;

@ВПодсистеме
метод ДобавитьГруппыДоступаРабочихКонтактов()
    знч Запрос = Запрос{
        Выбрать
            Владелец
        Из
            ОграниченияДоступаКРабочимКонтактам
        Где
            ДоступнаКоллегам
    }
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ОбновитьГруппуДоступаКонтактнойИнформации(СтрокаРезультата.Владелец)
    ;    
;