@ВПроекте
метод РезультатЗапросаВМассив(Запрос: ТипизированныйЗапрос<неизвестно>): ЧитаемыйМассив<ЧитаемоеСоответствие<Строка, неизвестно>>
    пер СтрокиДанных: Массив<ЧитаемоеСоответствие<Строка, Объект?>>
    исп РезультатЗапроса = Запрос.Выполнить() 
    для РезультатСтрока из РезультатЗапроса
        СтрокиДанных.Добавить(СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, РезультатЗапроса))
    ;
    возврат СтрокиДанных
;

@ВПроекте
метод СтрокаРезультатаЗапросаВСоответствие(СтрокаРезультатаЗапроса: неизвестно, РезультатЗапроса: РезультатЗапроса<неизвестно>): ЧитаемоеСоответствие<Строка, неизвестно>
    пер СтрокаРезультата: Соответствие<Строка, Объект?>
    пер ОписанияКолонок = РезультатЗапроса.ПолучитьОписанияКолонок()
    для ОписаниеКолонки из ОписанияКолонок
        СтрокаРезультата.Вставить(ОписаниеКолонки.Имя, СтрокаРезультатаЗапроса[ОписаниеКолонки.Имя])
    ;
    возврат СтрокаРезультата
;

@ВПроекте
метод РезультатЗапросаВCsv(
        Запрос: ТипизированныйЗапрос<неизвестно>|ПроизвольныйЗапрос, 
        ВыгружаемыеПоляИИхЗаголовки: ЧитаемоеСоответствие<Строка, Строка|Авто>?,
        ВыгружатьЗаголовки: Булево = Истина): ДвоичныйОбъект.Ссылка
    
    пер РезультатЗапроса: РезультатЗапроса<неизвестно>?
    исп ПотокЗаписи = новый ВременныйПотокЗаписи()
    знч НастройкиЗаписи = новый НастройкиЗаписиДанных()
    НастройкиЗаписи.Кодировка = "windows-1251"
    знч ЗаписьДанных = новый ЗаписьДанных(ПотокЗаписи, НастройкиЗаписи)
    пер ИспользоватьСтандартныеПоля = Истина
    пер ИспользоватьПереданныеПоля = Ложь
    знч ИндексыПереданныхПолейВОписанияхКолонок = новый Соответствие<Строка, Число>()
    пер СтрокаЗаголовков = ""
    знч Разделитель = ";"
    
    если ВыгружаемыеПоляИИхЗаголовки != Неопределено
        если ВыгружаемыеПоляИИхЗаголовки.Пусто()
            выбросить новый ИсключениеНедопустимыйАргумент(
                    "Передан пустой набор полей к выгрузке в параметре \"ВыгружаемыеПоляИИхЗаголовки\".")
        ;
        ИспользоватьПереданныеПоля = Истина
        ИспользоватьСтандартныеПоля = Ложь
    ;
    
    если Запрос это ТипизированныйЗапрос<неизвестно>
        РезультатЗапроса = (Запрос как ТипизированныйЗапрос<неизвестно>).Выполнить()
    иначе если Запрос это ПроизвольныйЗапрос
        РезультатЗапроса = (Запрос как ПроизвольныйЗапрос).Выполнить()
    иначе
        выбросить новый ИсключениеНедопустимыйАргумент(
                "Отсутствует обработчик для типа \"%{Запрос.ПолучитьТип()}\".")
    ;
    знч ОписанияКолонок = РезультатЗапроса.ПолучитьОписанияКолонок()
    
    если ИспользоватьСтандартныеПоля
        знч ИменаОписанийКолонок: Массив<Строка>
        ОписанияКолонок.ДляКаждого((ОписаниеКолонки) -> ИменаОписанийКолонок.Добавить(ОписаниеКолонки.Имя))
        СтрокаЗаголовков = ИменаОписанийКолонок.Соединить(Разделитель)
    ;
    если ИспользоватьПереданныеПоля
        для ОписаниеКолонки из ОписанияКолонок
            если ВыгружаемыеПоляИИхЗаголовки.СодержитКлюч(ОписаниеКолонки.Имя)               
                ИндексыПереданныхПолейВОписанияхКолонок.Вставить(
                        ОписаниеКолонки.Имя, 
                        ОписанияКолонок.Найти(ОписаниеКолонки))
            ;
        ;
        
        знч ЗаголовкиПолей: Массив<Строка>
        для ПараПолеИЗаголовок из ВыгружаемыеПоляИИхЗаголовки
            если не ИндексыПереданныхПолейВОписанияхКолонок.СодержитКлюч(ПараПолеИЗаголовок.Ключ)
                выбросить новый ИсключениеНедопустимыйАргумент(
                        "Переданное поле \"%{ПараПолеИЗаголовок.Ключ}\" отсутствует в запросе.")
            ;
            знч ПереданныйЗаголовок = ПараПолеИЗаголовок.Значение
            пер ПрименяемыйЗаголовок : Строка
            если ПереданныйЗаголовок это Авто
                ПрименяемыйЗаголовок = ПараПолеИЗаголовок.Ключ
            иначе если ПереданныйЗаголовок это Строка
                знч _ПереданныйЗаголовок = ПереданныйЗаголовок как Строка
                если _ПереданныйЗаголовок.Пусто()
                    ПрименяемыйЗаголовок = ПараПолеИЗаголовок.Ключ
                ;
                ПрименяемыйЗаголовок = _ПереданныйЗаголовок
            ;
            ЗаголовкиПолей.Добавить(ПрименяемыйЗаголовок)
        ;
        СтрокаЗаголовков = ЗаголовкиПолей.Соединить(Разделитель)
    ;
    если ВыгружатьЗаголовки
        ЗаписьДанных.ЗаписатьСтроку(СтрокаЗаголовков)
    ;
    
    для СтрокаЗапроса из РезультатЗапроса
        пер СтрокаФайла: Строка
        знч ЧастиСтрокиФайла: Массив<Строка>
        если ИспользоватьСтандартныеПоля
            для ОписаниеКолонки из ОписанияКолонок
                ЧастиСтрокиФайла.Добавить(СтрокаЗапроса[ОписаниеКолонки.Имя].ВСтроку())
            ;
        иначе если ИспользоватьПереданныеПоля
            для ПараПолеИЗаголовок из ВыгружаемыеПоляИИхЗаголовки
                знч ОписаниеКолонки = ОписанияКолонок[ИндексыПереданныхПолейВОписанияхКолонок.Получить(ПараПолеИЗаголовок.Ключ)]
                ЧастиСтрокиФайла.Добавить(СтрокаЗапроса[ОписаниеКолонки.Имя].ВСтроку())
            ;
        ;
        СтрокаФайла = ЧастиСтрокиФайла.Соединить(Разделитель)
        ЗаписьДанных.ЗаписатьСтроку(СтрокаФайла)
    ;
    
    ПотокЗаписи.СброситьБуферы()
    
    исп ПотокЧтения = ПотокЗаписи.ОткрытьПотокЧтения()
    
    возврат ОбъектноеХранилище.Загрузить(ПотокЧтения, ПотокЗаписи.Размер()).Ссылка
;

@ВПроекте
метод ДополнитьЗапросФильтрами(Запрос: ПроизвольныйЗапрос, Фильтры: ГруппаЭлементовФильтра)
    знч ТекстИПараметрыЗапроса = МенеджерЗапросов.УсловияЗапросаПоФильтрам(Фильтры)
    для ПараметрЗапроса из ТекстИПараметрыЗапроса.ПараметрыЗапроса
        Запрос.УстановитьПараметр(ПараметрЗапроса.ИмяПараметра, ПараметрЗапроса.ЗначениеПараметра)
    ;
    Запрос.Текст += " И %{ТекстИПараметрыЗапроса.Условие}"
;

структура ТекстИПараметрыЗапроса
    обз знч Условие: Строка
    обз знч ПараметрыЗапроса: Массив<ПараметрЗапроса>
;

структура ПараметрЗапроса
    обз пер ИмяПараметра: Строка
    обз пер ЗначениеПараметра: Объект?
;

конст ВидыЭлементовФильтровСтрокой: ЧитаемоеСоответствие<ВидГруппыЭлементовФильтра, Строка> = {
    ВидГруппыЭлементовФильтра.ГруппаИ: " И ",
    ВидГруппыЭлементовФильтра.ГруппаНеИ: " И ",
    ВидГруппыЭлементовФильтра.ГруппаИли: " ИЛИ ",
    ВидГруппыЭлементовФильтра.ГруппаНеИли: " ИЛИ "
}
    
конст ВидСравненияСтрокой: ЧитаемоеСоответствие<ВидСравнения, Строка> = {
    ВидСравнения.Больше: ">|",
    ВидСравнения.БольшеИлиРавно: ">=|",
    ВидСравнения.Меньше: "<|",
    ВидСравнения.МеньшеИлиРавно: "<=|",
    ВидСравнения.НеРавно: "!=",
    ВидСравнения.Равно: "==",
    ВидСравнения.ВСписке: "В",
    ВидСравнения.НеВСписке: "НЕ В"
}

метод УсловияЗапросаПоФильтрам(Фильтры: ГруппаЭлементовФильтра): ТекстИПараметрыЗапроса
    пер Условие: Строка
    пер ПараметрыЗапроса: Массив<ПараметрЗапроса>
    знч ШаблонСодержит = "_Поле.ЗаменитьNull(Неопределено).Содержит(&_Параметр)"
    знч ШаблонУсловия = "_Поле.ЗаменитьNull(Неопределено) _ВидСравнения (&_Параметр)"
    если Фильтры.Использовать
        пер Условия: Массив<Строка>
        пер ИмяПараметра: Строка
        для ЭлементФильтра из Фильтры.Элементы
            если ЭлементФильтра это ЭлементФильтра и (ЭлементФильтра как ЭлементФильтра).Использовать
                ИмяПараметра = "А" + новый Ууид().ВСтроку().Заменить("-", "")
                ПараметрыЗапроса.Добавить(новый ПараметрЗапроса(
                    ИмяПараметра, (ЭлементФильтра как ЭлементФильтра).Значение == Null ? Неопределено:(ЭлементФильтра как ЭлементФильтра).Значение))
                
                пер Шаблон: Строка
                выбор (ЭлементФильтра как ЭлементФильтра).ВидСравнения
                когда ВидСравнения.Содержит
                    Шаблон = ШаблонСодержит
                когда ВидСравнения.НеСодержит
                    Шаблон = "Не %ШаблонСодержит"
                иначе
                    Шаблон = ШаблонУсловия
                ;
                
                Условия.Добавить(Шаблон
                    .Заменить("_Поле", (ЭлементФильтра как ЭлементФильтра).Поле)
                    .Заменить("_Параметр", ИмяПараметра)
                    .Заменить("_ВидСравнения",
                        ВидСравненияСтрокой.ПолучитьИлиУмолчание((ЭлементФильтра как ЭлементФильтра).ВидСравнения, "")))
                        
            иначе если ЭлементФильтра это ГруппаЭлементовФильтра и (ЭлементФильтра как ГруппаЭлементовФильтра).Использовать
                знч ТекстИПараметрыЗапроса = УсловияЗапросаПоФильтрам(ЭлементФильтра как ГруппаЭлементовФильтра)
                ПараметрыЗапроса.ДобавитьВсе(ТекстИПараметрыЗапроса.ПараметрыЗапроса)
                Условия.Добавить(ТекстИПараметрыЗапроса.Условие)
            ;
        ;
        Условие = Строки.Соединить(Условия, ВидыЭлементовФильтровСтрокой[Фильтры.ВидГруппы])
    ;
    если не Условие.Пусто()
        Условие = "(%Условие)"
        если [ВидГруппыЭлементовФильтра.ГруппаНеИ, ВидГруппыЭлементовФильтра.ГруппаНеИли].Содержит(Фильтры.ВидГруппы)
            Условие = "Не %Условие"
        ;
    иначе
        Условие = "Истина"
    ;
    возврат новый ТекстИПараметрыЗапроса(Условие, ПараметрыЗапроса)
;
