@ВПроекте
перечисление Падежи
    Именительный,
    Родительный,
    Дательный,
    Винительный,
    Творительный,
    Предложный
;

@ВПроекте
перечисление РодаСуществительных
    Мужской,
    Женский,
    Средний
;

@ВПроекте
метод СтрокаТолькоИзБукв(ИсходнаяСтрока: Строка): Строка
    пер СтрокаТолькоИзБукв: Строка
    пер Индекс: Число
    пока Индекс < ИсходнаяСтрока.Длина()
        пер Символ: Строка = ИсходнаяСтрока.Подстрока(Индекс, Индекс + 1)
        если Символы.ЭтоБуква(Символ)
            СтрокаТолькоИзБукв += Символ
        ;
        Индекс += 1
    ;
    возврат СтрокаТолькоИзБукв
;

@ВПроекте
метод ПодстрокаСНачала(Строка: Строка, МаксимальнаяДлина: Число): Строка
    возврат Строка.ПодстрокаСНачала(Мин(Строка.Длина(), МаксимальнаяДлина))
;

@ВПодсистеме
конст ИМЕНА_МЕСЯЦЕВ: ЧитаемыйМассив<Строка> = ["январь","февраль","март","апрель","май","июнь","июль","август","сентябрь","октябрь","ноябрь","декабрь"]

@ВПроекте
метод Просклонять(ИмяСуществительное: Строка, Падеж: Падежи): Строка
    // пока знает только:
    //  - месяцы - родительный падеж
    если Падеж == Падежи.Родительный
        пер НомерМесяца: Число? = ИМЕНА_МЕСЯЦЕВ.Найти(ИмяСуществительное.ВНижнийРегистр())
        если НомерМесяца != Неопределено
            если НомерМесяца == 2 или НомерМесяца == 7 // март и август
                ИмяСуществительное += "а"
            иначе
                ИмяСуществительное = ИмяСуществительное.ПодстрокаСНачала(ИмяСуществительное.Длина() - 1) + "я"
            ;
        ;
    ;
    возврат ИмяСуществительное
;

структура СловоФорма
    знч Именительный: Строка                // 1 день, 1 книга
    знч РодительныйЕдинственное: Строка     // 2 дня, 2 книги
    знч РодительныйМножественное: Строка    // 5 дней, 5 книг
;

/**
Описание: Возвращает для заданого текста форму, которую нужно применять при том или ином количестве
Параметры: Существительное - имя существительное в именительном падаже
    Количество - число 
Возвращает:
    Строка
Пример:
    ТекстПоКоличеству("День", 23) // возвращаемое значение - "Дня" 
    ТекстПоКоличеству("день", 10) // возвращаемое значение - "дней" 
*/

@ВПроекте
метод ТекстПоКоличеству(Текст: Строка, Количество: Число): Строка
    
    пер ПерваяБуква: Строка = Текст.ПодстрокаСНачала(1)
    пер ПерваяБукваБольшая: Булево = (ПерваяБуква == ПерваяБуква.ВВерхнийРегистр())
    знч Словарь = Словарь()
    знч СловоФорма = Словарь.ПолучитьИлиУмолчание(Текст.ВВерхнийРегистр())
    если СловоФорма == Неопределено
        возврат ""
    ;
    
    пер ОстатокОтДеленияНа10: Число = Количество % 10
    пер ВозвращаемыйТекст: Строка
    
    если Количество >=5 и Количество <= 20
        ВозвращаемыйТекст =  СловоФорма.РодительныйМножественное
    иначе если ОстатокОтДеленияНа10 == 1
        ВозвращаемыйТекст = СловоФорма.Именительный
    иначе если ОстатокОтДеленияНа10 > 1 и ОстатокОтДеленияНа10 < 5
        ВозвращаемыйТекст = СловоФорма.РодительныйЕдинственное
    иначе
        ВозвращаемыйТекст = СловоФорма.РодительныйМножественное
    ;
    
    если ПерваяБукваБольшая
        ВозвращаемыйТекст = ПерваяБуква + ВозвращаемыйТекст.Подстрока(1)
    ;
    
    возврат ВозвращаемыйТекст
    
;

метод Словарь(): Соответствие<Строка, СловоФорма>
    
    пер Словарь: Соответствие<Строка, СловоФорма>
    Словарь.Вставить("ДЕНЬ", новый СловоФорма("день", "дня", "дней"))
    Словарь.Вставить("НЕДЕЛЯ", новый СловоФорма("неделя", "недели", "недель"))
    Словарь.Вставить("МЕСЯЦ", новый СловоФорма("месяц", "месяца", "месяцев"))
    Словарь.Вставить("ГОД", новый СловоФорма("год", "года", "лет"))
    Словарь.Вставить("ЗАЯВЛЕНИЕ", новый СловоФорма("заявление", "заявления", "заявлений"))
    Словарь.Вставить("СОТРУДНИК", новый СловоФорма("сотрудник", "сотрудника", "сотрудников"))
    Словарь.Вставить("СОВМЕСТИТЕЛЬ", новый СловоФорма("совместитель", "совместителя", "совместителей"))
    Словарь.Вставить("ЛИСТ", новый СловоФорма("лист", "листа", "листов"))
    Словарь.Вставить("ПРАЗДНИЧНЫЙ ДЕНЬ", новый СловоФорма("праздничный день", "праздничных дня", "праздничных дней"))
    Словарь.Вставить("КАЛЕНДАРНЫЙ ДЕНЬ", новый СловоФорма("календарный день", "календарных дня", "календарных дней"))
    Словарь.Вставить("СИМВОЛ", новый СловоФорма("символ", "символа", "символов"))
    Словарь.Вставить("ПОДРАЗДЕЛЕНИЕ", новый СловоФорма("подразделение", "подразделения", "подразделений"))
    Словарь.Вставить("ЧЕЛОВЕК", новый СловоФорма("человек", "человека", "человек"))
    Словарь.Вставить("КОЛЛЕГА", новый СловоФорма("коллега", "коллеги", "коллег"))
    Словарь.Вставить("ДОКУМЕНТ", новый СловоФорма("документ", "документа", "документов"))
    Словарь.Вставить("ШАГ", новый СловоФорма("шаг", "шага", "шагов"))
    Словарь.Вставить("МУЖЧИНА", новый СловоФорма("мужчина", "мужчины", "мужчин"))
    Словарь.Вставить("ЖЕНЩИНА", новый СловоФорма("женщина", "женщины", "женщин"))
    Словарь.Вставить("ОРГАНИЗАЦИЯ", новый СловоФорма("организация", "организации", "организаций"))
    Словарь.Вставить("ВАКАНСИЯ", новый СловоФорма("вакансия", "вакансии", "вакансий"))
    Словарь.Вставить("КАНДИДАТ", новый СловоФорма("кандидат", "кандидата", "кандидатов"))
    Словарь.Вставить("ОТКЛИК", новый СловоФорма("отклик", "отклика", "откликов"))
    Словарь.Вставить("ОПРОС", новый СловоФорма("опрос", "опроса", "опросов"))
    Словарь.Вставить("ВОПРОС", новый СловоФорма("вопрос", "вопроса", "вопросов"))
    Словарь.Вставить("ТЕСТ", новый СловоФорма("тест", "теста", "тестов"))
    Словарь.Вставить("ОТВЕТ", новый СловоФорма("ответ", "ответа", "ответов"))
    Словарь.Вставить("ССЫЛКА", новый СловоФорма("ссылка", "ссылки", "ссылок"))
    Словарь.Вставить("ЗАПИСЬ", новый СловоФорма("запись", "записи", "записей"))
    Словарь.Вставить("КУРС", новый СловоФорма("курс", "курса", "курсов"))
    Словарь.Вставить("ВИД", новый СловоФорма("вид", "вида", "видов"))
    
    возврат Словарь 
;

@ВПроекте
метод ФормаПредметаИсчисления(Количество: Число, Форма1: Строка, Форма2: Строка, Форма5: Строка, Форма21: Строка? = Неопределено): Строка
    знч К = МенеджерЧисел.Модуль(Количество)
    если К == 1
        возврат Форма1
    иначе если К % 10 == 1 и К % 100 != 11
        возврат Форма21 ?? Форма1
    иначе если К % 10 >= 2 и К % 10 <=4 и (К % 100 < 10 или К % 100 >= 20)
        возврат Форма2
    иначе 
        возврат Форма5   
    ;
;

@ВПроекте
метод ОкончаниеГлаголаПрошедшегоВремени(Род: РодаСуществительных, МножественноеЧисло: Булево = Ложь): Строка
    если МножественноеЧисло
        возврат "и"
    иначе если Род == РодаСуществительных.Женский
        возврат "а"
    иначе если Род == РодаСуществительных.Средний
        возврат "о"
    иначе
        возврат ""
    ;
;

@ВПроекте
метод ДобавитьКонечныйСимвол(Текст: Строка, ДобавляемыйСимвол: Строка = "/"): Строка
    если Текст.Пусто()
        возврат Текст
    ;
    если Текст.ПодстрокаСКонца(1) == ДобавляемыйСимвол
        возврат Текст
    ; 
    возврат Текст + ДобавляемыйСимвол
;

@ВПроекте
метод ФорматЧисла(Значение: Число, ДлинаСВедущимиНулями: Число = 0, ВыделятьТриады: Булево = Истина, ДлинаДробнойЧасти: Число? = Неопределено): Строка
    если ДлинаДробнойЧасти != Неопределено
        пер Множитель: Число = 1
        пер Индекс: Число
        пока Индекс < ДлинаДробнойЧасти!
            Множитель *= 10
            Индекс += 1
        ;
        Значение = (Значение * Множитель).Округлить() / Множитель
    ;
    пер ДесятичнаяТочка: Строка = "." 
    пер ПредставлениеЧисла: Строка = (Значение).ВСтроку()
    если ДлинаСВедущимиНулями != 0
        ПредставлениеЧисла = Строки.Повторить("0", ДлинаСВедущимиНулями - ПредставлениеЧисла.Длина()) + ПредставлениеЧисла
    ;
    пер ПозицияТочки: Число = ПредставлениеЧисла.Найти(ДесятичнаяТочка)
    пер ЧислоЗнаковПослеТочки: Число = (ПозицияТочки == -1 ? 0 : ПредставлениеЧисла.Длина() - ПозицияТочки - 1)
    если ВыделятьТриады
        пер ДлинаЦелойЧасти: Число
        пер ДробнаяЧасть: Строка
        пер СтрокаСТриадами: Строка 
        если ПозицияТочки == -1
            ДлинаЦелойЧасти = ПредставлениеЧисла.Длина()
        иначе 
            ДлинаЦелойЧасти = ПозицияТочки
            ДробнаяЧасть = ПредставлениеЧисла.Подстрока(ПозицияТочки)
        ;
        пер ОстатокЦелойЧасти: Строка = ПредставлениеЧисла.ПодстрокаСНачала(ДлинаЦелойЧасти)
        пер Триада: Строка
        пока не ОстатокЦелойЧасти.Пусто()
            пер ДлинаОстатка = ОстатокЦелойЧасти.Длина()
            если ДлинаОстатка > 3
                Триада = ОстатокЦелойЧасти.ПодстрокаСКонца(3)
                ОстатокЦелойЧасти = ОстатокЦелойЧасти.ПодстрокаСНачала(ОстатокЦелойЧасти.Длина() - 3)
            иначе
                Триада = ОстатокЦелойЧасти
                ОстатокЦелойЧасти = ""
            ;
            СтрокаСТриадами = Триада + (СтрокаСТриадами.Пусто() ? "" : "\ю00160") + СтрокаСТриадами
        ;
        ПредставлениеЧисла = СтрокаСТриадами + ДробнаяЧасть
    ; 
    если ДлинаДробнойЧасти != Неопределено
        если ЧислоЗнаковПослеТочки < ДлинаДробнойЧасти!
            ПредставлениеЧисла += (ЧислоЗнаковПослеТочки == 0 ? ДесятичнаяТочка : "") + Строки.Повторить("0", ДлинаДробнойЧасти! - ЧислоЗнаковПослеТочки)
        ;
    ;
    возврат ПредставлениеЧисла
;

@ВПроекте
метод ДобавитьСтрокуСРазделителем(ФормируемаяСтрока: Строка, ДобавляемаяСтрока: Строка, Разделитель: Строка = ","): Строка
    если не ФормируемаяСтрока.Пусто()
        ФормируемаяСтрока += Разделитель
    ;
    ФормируемаяСтрока += ДобавляемаяСтрока
    возврат ФормируемаяСтрока
;

@ВПроекте
метод ЭкранироватьКомпонентыURL(ИсходнаяСтрока: Строка): Строка
    возврат Экранировать(ИсходнаяСтрока, ["-","_",".","!","~","*","'","(",")","0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"])
;

@ВПроекте
метод СтрокаЛатиницей(Значение: Строка): Строка
    
    пер Результат = ""
    знч ТолькоЗаглавныеВСтроке = ТолькоЗаглавныеВСтроке(Значение)
    
    для Символ из Значение
        пер СимволЛатиницей: Строка? = СимволЛатиницей(Символ.ВНижнийРегистр()) // Поиск соответствия без учета регистра.
        если СимволЛатиницей == Неопределено
            // Другие символы остаются "как есть".
            СимволЛатиницей = Символ
        иначе
            если ТолькоЗаглавныеВСтроке 
                СимволЛатиницей = СимволЛатиницей.ВВерхнийРегистр() // восстанавливаем регистр
            иначе если Символ == Символ.ВВерхнийРегистр()
                СимволЛатиницей = СимволЛатиницей.Символ(0).ВВерхнийРегистр()
                    + СимволЛатиницей.Подстрока(1).ВНижнийРегистр() // восстанавливаем регистр
            ;
        ;
        Результат += СимволЛатиницей
    ;
    
    возврат Результат
    
;

@ВПроекте
метод СтрокаВФорматеГосКлюча(ИсходнаяСтрока: Строка): Строка
    знч ДопустимыеСимволы = [" ","_","0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]
    пер ИтоговаяСтрока = <Строка>[]
    для СимволСтроки из ИсходнаяСтрока
        если ДопустимыеСимволы.Содержит(СимволСтроки)
            ИтоговаяСтрока.Добавить(СимволСтроки)
        иначе
            ИтоговаяСтрока.Добавить(" ")
        ;
    ;
    возврат Строки.Соединить(ИтоговаяСтрока, "")
;

метод Экранировать(ИсходнаяСтрока: Строка, ДопустимыеСимволы: Массив<Строка>): Строка

    пер ЭкранированнаяСтрока = <Строка>[]
    
    для СимволСтроки из ИсходнаяСтрока

        если ДопустимыеСимволы.Содержит(СимволСтроки)
            ЭкранированнаяСтрока.Добавить(СимволСтроки)
            продолжить
        ;

        пер Код = Символы.ПолучитьКод(СимволСтроки)
        если Код < 128
            ЭкранированнаяСтрока.Добавить(ЭкранированныйКод(Код))
        иначе если Код <= 2047
            пер Код1 = (Код / 64).ЦелаяЧасть() + 192
            пер Код2 = (Код % 64) + 128
            ЭкранированнаяСтрока.Добавить(ЭкранированныйКод(Код1))
            ЭкранированнаяСтрока.Добавить(ЭкранированныйКод(Код2))
        иначе если Код <= 65535
            пер Код1 = (Код / 4096).ЦелаяЧасть() + 224
            пер Код2 = ((Код / 64).ЦелаяЧасть() % 64) + 128
            пер Код3 = (Код % 64) + 128
            ЭкранированнаяСтрока.Добавить(ЭкранированныйКод(Код1))
            ЭкранированнаяСтрока.Добавить(ЭкранированныйКод(Код2))
            ЭкранированнаяСтрока.Добавить(ЭкранированныйКод(Код3))
        иначе если Код <= 1114111
            пер Код1 = (Код / 262144).ЦелаяЧасть() + 240
            пер Код2 = ((Код / 4096).ЦелаяЧасть() % 64) + 128
            пер Код3 = ((Код / 64).ЦелаяЧасть() % 64) + 128
            пер Код4 = (Код % 64) + 128
            ЭкранированнаяСтрока.Добавить(ЭкранированныйКод(Код1))
            ЭкранированнаяСтрока.Добавить(ЭкранированныйКод(Код2))
            ЭкранированнаяСтрока.Добавить(ЭкранированныйКод(Код3))
            ЭкранированнаяСтрока.Добавить(ЭкранированныйКод(Код4))
        ;       
        
    ;

    возврат Строки.Соединить(ЭкранированнаяСтрока, "")
    
;

метод ЭкранированныйКод(Код: Число): Строка

    пер СимволыHex = "0123456789ABCDEF"

    возврат "\%" + СимволыHex[(Код / 16).ЦелаяЧасть()] + СимволыHex[Код % 16]

;

метод ТолькоЗаглавныеВСтроке(Значение: Строка): Булево
    для Символ из Значение
        если Символ != Символ.ВВерхнийРегистр()
            возврат Ложь
        ;
    ;
    
    возврат Истина
;

метод СимволЛатиницей(Символ: Строка): Строка?
    возврат {
        "а": "a",
        "б": "b",
        "в": "v",
        "г": "g",
        "д": "d",
        "е": "e",
        "ё": "e",
        "ж": "zh",
        "з": "z",
        "и": "i",
        "й": "y",
        "к": "k",
        "л": "l",
        "м": "m",
        "н": "n",
        "о": "o",
        "п": "p",
        "р": "r",
        "с": "s",
        "т": "t",
        "у": "u",
        "ф": "f",
        "х": "kh",
        "ц": "ts",
        "ч": "ch",
        "ш": "sh",
        "щ": "shch",
        "ъ": "", // Пропускается.
        "ы": "y",
        "ь": "", // Пропускается.
        "э": "e",
        "ю": "yu",
        "я": "ya"
    }.ПолучитьИлиУмолчание(Символ)
; 
// Область Телефония

@ВПроекте
исключение ИсключениеНедопустимыеСимволыНомераТелефона
    обз пер НомерТелефона: Строка
    обз пер НедопустимыеСимволы: Массив<Строка>
;

@ВПроекте
исключение ИсключениеНеверныйФорматНомераТелефона
;

@ВПроекте
метод КанонизированныйНомерТелефона(НомерТелефона: Строка): Строка
    пер НормализованныйНомер: Строка = НомерТелефона
        .Удалить(" ")
        .Удалить("-")
        .Удалить("(")
        .Удалить(")")
        .Удалить("+")
        .Удалить(Символы.НЕРАЗРЫВНЫЙ_ПРОБЕЛ)
        .Удалить(Символы.ТАБ)
    если НормализованныйНомер.Пусто()
        возврат НормализованныйНомер
    ;
    если не НормализованныйНомер.ТолькоЦифры()
        пер Символ = 0
        пер НедопустимыеСимволы: Массив<Строка> = []
        пока Символ < НормализованныйНомер.Длина()
            если не Символы.ЭтоЦифра(НормализованныйНомер[Символ])
                НедопустимыеСимволы.Добавить(НормализованныйНомер[Символ])
            ;
            Символ += 1
        ;
        пер СимволыСтрокой: Строка = Строки.Соединить(НедопустимыеСимволы)
        выбросить новый ИсключениеНедопустимыеСимволыНомераТелефона(
            "Недопустимые символы: '%СимволыСтрокой' в номере телефона '%НомерТелефона'",
            НомерТелефона,
            НедопустимыеСимволы)
    ;
    если НормализованныйНомер.Длина() < 10
        выбросить новый ИсключениеНеверныйФорматНомераТелефона("Слишком мало символов в номере телефона '%НомерТелефона'")
    иначе если НормализованныйНомер.Длина() == 10
        НормализованныйНомер = "+7" + НормализованныйНомер
    иначе если НормализованныйНомер.Длина() == 11 и НормализованныйНомер.НачинаетсяС("8")
        НормализованныйНомер = "+7" + НормализованныйНомер.Подстрока(1)
    иначе
        НормализованныйНомер = "+" + НормализованныйНомер
    ;
    возврат НормализованныйНомер
;

// Конец Телефония

@ВПроекте
структура ПараметрыURI
    обз пер Схема: Строка
    обз пер Логин: Строка
    обз пер Пароль: Строка
    обз пер ИмяСервера: Строка
    обз пер Хост: Строка
    обз пер Порт: Число?
    обз пер ПутьНаСервере: Строка
;

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//                       <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>.
//
// Возвращаемое значение:
//  Структура - составные части URI согласно формату:
//   * Схема         - Строка - схема из URI.
//   * Логин         - Строка - логин из URI.
//   * Пароль        - Строка - пароль из URI.
//   * ИмяСервера    - Строка - часть <хост>:<порт> из URI.
//   * Хост          - Строка - хост из URI.
//   * Порт          - Строка - порт из URI.
//   * ПутьНаСервере - Строка - часть <путь>?<параметры>#<якорь> из URI.
//

@ВПроекте
метод СтруктураURI(СтрокаURI: Строка): ПараметрыURI
    пер ИзменяемаяСтрокаURI = СтрокаURI.Сократить()

    // схема
    пер Схема = ИзменяемаяСтрокаURI
    пер Позиция = ИзменяемаяСтрокаURI.Найти("://")
    если Позиция > 0
        Схема = Схема.ПодстрокаСНачала(Позиция).ВНижнийРегистр()
        ИзменяемаяСтрокаURI = ИзменяемаяСтрокаURI.Подстрока(Позиция + 3)
    ;
    // Строка соединения и путь на сервере.
    пер СтрокаСоединения = ИзменяемаяСтрокаURI
    пер ПутьНаСервере: Строка
    Позиция = СтрокаСоединения.Найти("/")
    если Позиция > 0
        ПутьНаСервере = СтрокаСоединения.Подстрока(Позиция + 1)
        СтрокаСоединения = СтрокаСоединения.ПодстрокаСНачала(Позиция)
    ;
    // Информация пользователя и имя сервера.
    пер СтрокаАвторизации: Строка
    пер ИмяСервера = СтрокаСоединения
    Позиция = СтрокаСоединения.НайтиСКонца("@")
    если Позиция > 0
        СтрокаАвторизации = СтрокаСоединения.ПодстрокаСНачала(Позиция)
        ИмяСервера = ИмяСервера.Подстрока(Позиция + 1)
    ;
    // логин и пароль
    пер Логин = СтрокаАвторизации
    пер Пароль: Строка
    Позиция = СтрокаАвторизации.Найти(":")
    если Позиция > 0
        Логин = Логин.ПодстрокаСНачала(Позиция)
        Пароль = СтрокаАвторизации.Подстрока(Позиция + 1)
    ;
    // хост и порт
    пер Хост = ИмяСервера
    пер ПортСтрока: Строка
    Позиция = ИмяСервера.Найти(":")
    если Позиция > 0
        Хост = Хост.ПодстрокаСНачала(Позиция - 1)
        ПортСтрока = ИмяСервера.Подстрока(Позиция + 1)
        если не ПортСтрока.ТолькоЦифры()
            ПортСтрока = ""
        ;
    ;
    пер Порт: Число?
    если не ПортСтрока.Пусто()
        Порт = новый Число(ПортСтрока)
    ;
    возврат новый ПараметрыURI(Схема, Логин, Пароль, ИмяСервера, Хост, Порт, ПутьНаСервере)
;

@ВПроекте
@НаСервере @НаКлиенте
метод НачатьСЗаглавной(ИсходнаяСтрока: Строка): Строка
    если ИсходнаяСтрока.Пусто()
        возврат ИсходнаяСтрока
    ;
    пер Текст = ИсходнаяСтрока.ВНижнийРегистр() 
    знч ПервыйСимвол = Текст.ПодстрокаСНачала(1)
    Текст = Текст.Заменить(ПервыйСимвол, ПервыйСимвол.ВВерхнийРегистр(), Истина)
    возврат Текст
;

/* Описание: Преобразует строку в формате CamelCase в читаемый текст с учетом аббревиатур
 * Пример:
 * До замены:
 * - `НеобходимоИспользоватьБСП`
 * После замены:
 * - `Необходимо использовать БСП`
 */
@ВПроекте
метод ИзВерблюжьегоРегистра(Строка: Строка): Строка
    знч Образец = '[а-яёa-z](?=[А-ЯЁA-Z])|[А-ЯЁA-Z](?=[А-ЯЁA-Z]{1,1}[а-яёa-z])'
    пер Результат = СтрЗаменить(Строка, Образец, "$1 ")
        .Разделить(" ")
        .Преобразовать(Слово -> Слово.Длина() >= 2 и Слово[1] == Слово[1].ВВерхнийРегистр() ? Слово : Слово.ВНижнийРегистр())
        .Соединить(" ")
    возврат Результат.Пусто() ? Результат : Результат.ЗаменитьДиапазон(Результат[0].ВВерхнийРегистр(), 0, 1)
;

/* Описание: Заменяет подстроки, удовлетворяющие регулярному выражению Образец, 
 * на строку Замена с возможностью указать группу 1
 * Аналог Стд::Строка.Заменить()
 * Зарегистрирована ошибка платформы 5.3.1-5: G5RT-27087
 */
метод СтрЗаменить(Строка: Строка, Образец: Образец, Замена: Строка = "$1"): Строка
    пер Результат = Строка
    пер НомерВхождения = 0
    для Совпадение из Образец.НайтиСовпадения(Строка)
        знч СтрокаЗамены = Замена.Заменить("$1", Совпадение.Значение())
        Результат = Результат.ЗаменитьДиапазон(
            Замена = СтрокаЗамены,
            От = Совпадение.Индекс() + НомерВхождения,
            До = Совпадение.Индекс() + НомерВхождения + 1)
        НомерВхождения += СтрокаЗамены.Длина() - 1
    ;
    возврат Результат
;

@ВПроекте
@НаКлиенте @НаСервере
метод ЭтоУуид(Строка: Строка): Булево
    возврат Строка.ПолноеСовпадение('\w{8}-\w{4}-\w{4}-\w{4}-\w{12}')
;

@ВПроекте
@НаКлиенте @НаСервере
метод ВОбычныйРегистр(Строка: Строка): Строка
    пер ПромежуточныйРезультат =
        Строка.Заменить('([a-zA-Zа-яА-ЯёЁ])([A-ZА-ЯЁ]|[-|_|\.])([a-zа-яё]*)', "$1 $2$3 ")
        .Заменить('[-|_|\.]', "")
        .Разделить(" ")
        .Преобразовать(Слово -> Слово.Длина() == 1 ? Слово.ВВерхнийРегистр().Сократить() : Слово.ВНижнийРегистр().Сократить())
        .Соединить(" ")
        .Заменить('([A-ZА-ЯЁ]) (?=[A-ZА-ЯЁ])', "$1")
        
    // Заменим positive lookahead
    знч Аббревиатура: Массив<Строка>
    пер НачалоАббревиатуры = 0
    знч Части = ПромежуточныйРезультат.Разделить(" ")
    знч РезультатЧасти: Массив<Строка>
    для Индекс = 0 по Части.Граница()
        если Индекс != Части.Граница() и Части[Индекс].Длина() == 1 и Части[Индекс + 1].Длина() == 1
            если Аббревиатура.Пусто()
                НачалоАббревиатуры = Индекс
                Аббревиатура.Добавить(Части[Индекс])
            ;
            Аббревиатура.Добавить(Части[Индекс + 1])
        иначе
            если Аббревиатура.Пусто()
                РезультатЧасти.Добавить(Части[Индекс])
            иначе
                РезультатЧасти.Добавить(Аббревиатура.Соединить())
            ;
            Аббревиатура.Очистить()
            НачалоАббревиатуры = 0
        ;
    ;
    
    если не Аббревиатура.Пусто()
        РезультатЧасти.Добавить(Аббревиатура.Соединить())
    ;
    
    знч Результат = РезультатЧасти.Соединить(" ")
        
    возврат Результат.ЗаменитьДиапазон(Результат[0].ВВерхнийРегистр(), 0, 1)
;