@ВПроекте
перечисление Вид
    Месяц
    Квартал
    Год

    @ВПроекте
    метод КоличествоМесяцев(): Число
        выбор этот
        когда Месяц
            возврат 1
        когда Квартал
            возврат 3
        когда Год
            возврат 12
        ;
    ;

    @ВПроекте
    статический метод ПоКоличествуМесяцев(КоличествоМесяцев: Число): Вид?
        выбор КоличествоМесяцев
        когда 1
            возврат Вид.Месяц
        когда 3
            возврат Вид.Квартал
        когда 12
            возврат Вид.Год
        иначе
            возврат Неопределено
        ;
    ;

    @ВПроекте
    метод НачалоПериода(ЛюбойДень: Дата): Дата
        выбор этот
        когда Месяц
            возврат ЛюбойДень.НачалоМесяца()
        когда Квартал
            возврат ЛюбойДень.НачалоКвартала()
        когда Год
            возврат ЛюбойДень.НачалоГода()
        ;
    ;

    @ВПроекте
    метод КонецПериода(ЛюбойДень: Дата): Дата
        выбор этот
        когда Месяц
            возврат ЛюбойДень.КонецМесяца()
        когда Квартал
            возврат ЛюбойДень.КонецКвартала()
        когда Год
            возврат ЛюбойДень.КонецГода()
        ;
    ;

    метод НачалоСмещенногоПериода(Смещение: Число, ЛюбойДень: Дата): Дата
        знч НачалоПериода = НачалоПериода(ЛюбойДень)
        возврат НачалоПериода.ДобавитьМесяцы(Смещение)
    ;
;

@ВПроекте
статический метод Создать(Вид: Вид, ЛюбойДень: Дата): СтандартныйПериод
    возврат новый СтандартныйПериод(
        Вид = Вид,
        Период = новый ЗакрытыйДиапазон(Вид.НачалоПериода(ЛюбойДень), Вид.КонецПериода(ЛюбойДень))
    )
;

@ВПроекте
статический метод Создать(Период: ЗакрытыйДиапазон<Дата>): СтандартныйПериод?
    знч КоличествоМесяцев = (Период.До.Год*12 + Период.До.Месяц) - (Период.От.Год*12 + Период.От.Месяц) + 1
    знч СоздаваемыйВид = Вид.ПоКоличествуМесяцев(КоличествоМесяцев)
    если СоздаваемыйВид == Неопределено
        возврат Неопределено
    ;
    если СоздаваемыйВид.НачалоПериода(Период.От) == Период.От и СоздаваемыйВид.КонецПериода(Период.До) == Период.До
        возврат Создать(СоздаваемыйВид, Период.От)
    ;
    возврат Неопределено
;

@ВПроекте
статический метод ЭтоСтандартныйПериод(Период: ЗакрытыйДиапазон<Дата>): Булево
    возврат Создать(Период) != Неопределено
;

@ВПроекте
статический метод Месяц(ЛюбойДень: Дата): СтандартныйПериод
    возврат Создать(Вид.Месяц, ЛюбойДень)
;

@ВПроекте
статический метод Квартал(ЛюбойДень: Дата): СтандартныйПериод
    возврат Создать(Вид.Квартал, ЛюбойДень)
;

@ВПроекте
статический метод Год(ЛюбойДень: Дата): СтандартныйПериод
    возврат Создать(Вид.Год, ЛюбойДень)
;

@ВПроекте
статический метод ТекущийМесяц(): СтандартныйПериод
    возврат Месяц(Дата.Сейчас())
;

@ВПроекте
статический метод ТекущийКвартал(): СтандартныйПериод
    возврат Квартал(Дата.Сейчас())
;

@ВПроекте
статический метод ТекущийГод(): СтандартныйПериод
    возврат Год(Дата.Сейчас())
;

@ВПроекте
статический метод ПрошлыйМесяц(): СтандартныйПериод
    возврат ТекущийМесяц().Прошлый()
;

@ВПроекте
статический метод ПрошлыйКвартал(): СтандартныйПериод
    возврат ТекущийКвартал().Прошлый()
;

@ВПроекте
статический метод ПрошлыйГод(): СтандартныйПериод
    возврат ТекущийГод().Прошлый()
;

@ВПроекте
@ПроверятьИспользованиеЗначения
метод Сместить(Смещение: Число): СтандартныйПериод
    возврат Создать(Вид, Вид.НачалоСмещенногоПериода(Смещение, Период!.От))
;

@ВПроекте
@ПроверятьИспользованиеЗначения
метод Прошлый(): СтандартныйПериод
    возврат Сместить(-1)
;

@ВПроекте
@ПроверятьИспользованиеЗначения
метод Следующий(): СтандартныйПериод
    возврат Сместить(1)
;