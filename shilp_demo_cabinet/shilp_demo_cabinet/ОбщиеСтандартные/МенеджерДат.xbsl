@ВПроекте конст ЧАСОВОЙ_ПОЯС_НУЛЕВОЙ: ЧасовойПояс = ЧасовойПояс{UTC}

@ВПроекте
структура Интервал
    обз пер ДатаНачала: Момент?
    обз пер ДатаОкончания: Момент?
;

@ВПроекте
метод ТекущаяДатаВремя(): Момент
    возврат Момент.Сейчас()
;

@ВПроекте
метод НачалоДня(Момент: Момент): Момент
    возврат Момент.ВДатаВремя(ЧасовойПоясТекущий()).НачалоДня().ВМомент(ЧасовойПоясТекущий())
;

@ВПроекте
метод КонецДня(Момент: Момент): Момент
    возврат Момент.ВДатаВремя(ЧасовойПоясТекущий()).КонецДня().ВМомент(ЧасовойПоясТекущий())
;

@ВПроекте
метод ДобавитьГоды(Момент: Момент, Годы: Число): Момент
    возврат Момент.ВДатаВремя(ЧасовойПоясТекущий()).ДобавитьГоды(Годы).ВМомент(ЧасовойПоясТекущий())
;

@ВПроекте
метод ДобавитьДни(Момент: Момент, Дней: Число): Момент
    возврат Момент.ВДатаВремя(ЧасовойПоясТекущий()).ДобавитьДни(Дней).ВМомент(ЧасовойПоясТекущий())
;

@ВПроекте
метод ДобавитьМинуты(Момент: Момент, Минут: Число): Момент
    возврат Момент.ВДатаВремя(ЧасовойПоясТекущий()).ДобавитьМинуты(Минут).ВМомент(ЧасовойПоясТекущий())
;

@ВПроекте
метод ДобавитьСекунды(Момент: Момент, Секунд: Число): Момент
    возврат Момент.ВДатаВремя(ЧасовойПоясТекущий()).ДобавитьСекунды(Секунд).ВМомент(ЧасовойПоясТекущий())
;

@ВПроекте
метод ЧасовойПоясТекущий(): ЧасовойПояс
    возврат ЧасовойПояс.Текущий()
;

@ВПроекте
метод БлижайшееВремя(ТекущееВремя: Время, КвантВремени: Длительность): Время
    пер СНачалаДня: Длительность = ТекущееВремя - Время{0:0:0}
    пер СНачалаДняКвантовВремени: Число = (СНачалаДня.ВСекундах() / КвантВремени.ВСекундах()).ЦелаяЧасть()
    возврат Время{0:0:0} + Длительность.ИзСекунд((СНачалаДняКвантовВремени + 1) * КвантВремени.ВСекундах())
;

/**
Описание: Обертка над методом Представление объекта ДатаВремя, которая принимает Момент и Неопределено 
    Преобразует Момент или Неопределено в строку по заданному формату
Параметры: Дата - Момент времени
    ФорматнаяСтрока - форматная строка, пригодная для испрользования в методе Представление
    ЧасовойПояс - часовой пояс в котром нужно получить представление даты 
*/
@ВПроекте
метод ФорматМомента(Дата: Момент?, ФорматнаяСтрока: Строка, ЧасовойПояс: ЧасовойПояс? = Неопределено, ПривязкаКТекущейДате: Булево = Ложь, ВыводВремени: Булево = Ложь): Строка
    пер ФорматированнаяДата: Строка
    если Дата == Неопределено
        возврат ФорматированнаяДата
    ;
    пер ДатаБезЧасовойЗоны: ДатаВремя?
    если ЧасовойПояс == Неопределено
        ДатаБезЧасовойЗоны = Дата!.ВДатаВремя(ЧасовойПоясТекущий())
    иначе
        ДатаБезЧасовойЗоны = Дата!.ВДатаВремя(ЧасовойПояс!)
    ;
    
    если ПривязкаКТекущейДате
        пер НачалоДня: Момент = МенеджерДат.НачалоДня(Момент.Сейчас())
        знч ФоматВремени = "ЧЧ:мм"
        // представление периода для дат, ближайших к текущей
        пер НачалоДняПериода: Момент = МенеджерДат.НачалоДня(Дата!)
        выбор 
        когда НачалоДняПериода == НачалоДня
            ФорматированнаяДата = "сегодня"
        когда МенеджерДат.ДобавитьДни(НачалоДняПериода, 1) == НачалоДня
            ФорматированнаяДата = "вчера"
        когда МенеджерДат.ДобавитьДни(НачалоДняПериода, 2) == НачалоДня
            ФорматированнаяДата = "позавчера"
        когда МенеджерДат.ДобавитьДни(НачалоДняПериода, -1) == НачалоДня
            ФорматированнаяДата = "завтра"
        когда МенеджерДат.ДобавитьДни(НачалоДняПериода, -2) == НачалоДня
            ФорматированнаяДата = "послезавтра"
        ;
        если не ФорматированнаяДата.Пусто() и ВыводВремени
            ФорматированнаяДата += ", в %{ДатаБезЧасовойЗоны!.Представление(ФоматВремени)}"
        ;
    ;
    
    если ФорматированнаяДата.Пусто()
        ФорматированнаяДата = ФорматДатыВремени(ДатаБезЧасовойЗоны!, ФорматнаяСтрока)
    ;
    
    возврат ФорматированнаяДата 
;

@ВПроекте
метод ФорматДаты(Дата: Дата?, ФорматнаяСтрока: Строка = "д ММММ гггг"): Строка
    если Дата == Неопределено
        возврат ""
    ;
    пер ФорматированнаяДата = Дата.Представление(ФорматнаяСтрока)
    если ФорматнаяСтрока.НачинаетсяС("ММММ")
        ФорматированнаяДата = ФорматированнаяДата.ПодстрокаСНачала(1).ВВерхнийРегистр() + ФорматированнаяДата.Подстрока(1)
    ;
    возврат ФорматированнаяДата
;

@ВПроекте
метод ФорматДатыВремени(ДатаВремя: ДатаВремя?, ФорматнаяСтрока: Строка = "дд ММММ гггг ЧЧ:мм"): Строка
    если ДатаВремя == Неопределено
        возврат ""
    ;    
    возврат ДатаВремя.Представление(ФорматнаяСтрока)
;

@ВПроекте
метод ПредставлениеПериода(ДатаОтсутствия: Дата, ВремяНачала: Время?, ВремяОкончания: Время?): Строка
    пер ФорматПериода: Строка = ФорматДаты(ДатаОтсутствия, "д ММММ гггг")
    возврат "%ФорматПериода (%{ПредставлениеПериодаВремени(ВремяНачала, ВремяОкончания)})"
;

@ВПроекте
метод ПредставлениеПериодаВремени(ВремяНачала: Время?, ВремяОкончания: Время?): Строка
    пер ФорматПериода: Строка
    если ВремяНачала == Неопределено и ВремяОкончания == Неопределено
        ФорматПериода = "весь день"
        возврат ФорматПериода
    ;
    
    выбор        
    когда ВремяНачала == Неопределено        
        ФорматПериода = "до %{ПредставлениеВремени(ВремяОкончания)}"
    когда ВремяОкончания == Неопределено
        ФорматПериода = "после %{ПредставлениеВремени(ВремяНачала)}"
    иначе 
        ФорматПериода = "%{ПредставлениеВремени(ВремяНачала)} - %{ПредставлениеВремени(ВремяОкончания)}"
    ;
    
    возврат ФорматПериода
;

@ВПроекте
метод ПредставлениеВремени(ДанныеВремени: Время?): Строка
    если ДанныеВремени == Неопределено
        возврат "00:00"
    ;
    возврат ДанныеВремени.Представление("ЧЧ:мм")
;

@ВПроекте
метод ПредставлениеПериода(Период: Диапазон<Дата>): Строка
    возврат ПредставлениеПериода(Период.От, Период.До)    
;

@ВПроекте
метод ПредставлениеПериода(ДатаНачала: Дата?, ДатаОкончания: Дата?): Строка
    пер ФорматПериода: Строка
    пер ФорматДняМесяцаГода = "д ММММ гггг"
    пер ФорматДняМесяца = "д ММММ"
    
    если ДатаНачала == Неопределено и ДатаОкончания == Неопределено
        возврат "Не задан"
    ;
    
    выбор        
    когда ДатаНачала == Неопределено        
        ФорматПериода = "до %{ДатаОкончания.Представление(ФорматДняМесяцаГода)}"
    когда ДатаОкончания == Неопределено
        ФорматПериода = "после %{ДатаНачала.Представление(ФорматДняМесяцаГода)}"
    когда ДатаНачала == ДатаОкончания
        ФорматПериода = ДатаОкончания.Представление(ФорматДняМесяцаГода)
    когда ДатаНачала.НачалоМесяца() == ДатаОкончания.НачалоМесяца()
        ФорматПериода = "%{(ДатаНачала.День).ВСтроку()} - %{ДатаОкончания.Представление(ФорматДняМесяцаГода)}"
    когда ДатаНачала.НачалоГода() == ДатаОкончания.НачалоГода()
        ФорматПериода = "%{ДатаНачала.Представление(ФорматДняМесяца)} - %{ДатаОкончания.Представление(ФорматДняМесяцаГода)}"
    иначе 
        ФорматПериода = "%{ДатаНачала.Представление(ФорматДняМесяцаГода)} - %{ДатаОкончания.Представление(ФорматДняМесяцаГода)}"
    ;
    возврат ФорматПериода
;

@ВПроекте 
метод ТекущееСмещениеВМинутах(): Число
    возврат ЧасовойПояс.Текущий().ТекущееСмещение().ВМинутах()
;

@ВПроекте 
метод ЧасовойПоясПоСмещению(СмещениеВМинутах: Число): ЧасовойПояс
    пер ЧасовойПояс: ЧасовойПояс?
    пер СмещениеВЧасах: Число = СмещениеВМинутах/60
    выбор СмещениеВЧасах
    когда -12 
        ЧасовойПояс = ЧасовойПояс{Etc/GMT+12}
    когда -11 
        ЧасовойПояс = ЧасовойПояс{Pacific/Pago_Pago}
    когда -10 
        ЧасовойПояс = ЧасовойПояс{Pacific/Honolulu}
    когда -9 
        ЧасовойПояс = ЧасовойПояс{Pacific/Gambier}
    когда -8 
        ЧасовойПояс = ЧасовойПояс{Pacific/Pitcairn}
    когда -7 
        ЧасовойПояс = ЧасовойПояс{America/Phoenix}
    когда -6 
        ЧасовойПояс = ЧасовойПояс{America/Swift_Current}
    когда -5 
        ЧасовойПояс = ЧасовойПояс{America/Rio_Branco}
    когда -4 
        ЧасовойПояс = ЧасовойПояс{America/Santo_Domingo}
    когда -3 
        ЧасовойПояс = ЧасовойПояс{Atlantic/Stanley}
    когда -2 
        ЧасовойПояс = ЧасовойПояс{Atlantic/South_Georgia}
    когда -1 
        ЧасовойПояс = ЧасовойПояс{Atlantic/Cape_Verde}
    когда 0 
        ЧасовойПояс = ЧасовойПояс{Africa/Abidjan}
    когда 1 
        ЧасовойПояс = ЧасовойПояс{Africa/Algiers}
    когда 2 
        ЧасовойПояс = ЧасовойПояс{Europe/Kaliningrad}
    когда 3 
        ЧасовойПояс = ЧасовойПояс{Europe/Moscow}
    когда 4 
        ЧасовойПояс = ЧасовойПояс{Europe/Samara}
    когда 5 
        ЧасовойПояс = ЧасовойПояс{Asia/Yekaterinburg}
    когда 6 
        ЧасовойПояс = ЧасовойПояс{Asia/Omsk}
    когда 7 
        ЧасовойПояс = ЧасовойПояс{Asia/Novosibirsk}
    когда 8 
        ЧасовойПояс = ЧасовойПояс{Asia/Irkutsk}
    когда 9 
        ЧасовойПояс = ЧасовойПояс{Asia/Yakutsk}
    когда 10 
        ЧасовойПояс = ЧасовойПояс{Asia/Vladivostok}
    когда 11 
        ЧасовойПояс = ЧасовойПояс{Asia/Sakhalin}
    когда 12 
        ЧасовойПояс = ЧасовойПояс{Asia/Anadyr}
    иначе
        ЧасовойПояс = ЧасовойПояс{Europe/Moscow}
    ;
    возврат ЧасовойПояс
;

@ВПроекте
метод КвантВремениПоУмолчанию(): Длительность
    возврат Длительность.ИзМинут(КвантВремениВМинутах(КвантВремени.Полчаса))
;

перечисление КвантВремени
    ДесятьМинут,
    ЧетвертьЧаса,
    Полчаса умолчание
;

метод КвантВремениВМинутах(КвантВремени: КвантВремени): Число
    пер КвантВремениВМинутах: Число    
    выбор КвантВремени
    когда ДесятьМинут
        КвантВремениВМинутах = 10
    когда ЧетвертьЧаса
        КвантВремениВМинутах = 15
    когда Полчаса 
        КвантВремениВМинутах = 30
    ;
    возврат КвантВремениВМинутах
;

@ВПроекте
конст МАКСИМАЛЬНАЯ_ДАТАВРЕМЯ_V8 = ДатаВремя{3999-12-31 23:59:59.999}

@ВПроекте
метод ДатаМожетБытьПереданаВV8(Значение: Дата | ДатаВремя | Момент | Неопределено, ВыбрасыватьИсключение=Истина): Булево
    
    знч ОбработчикОшибки = метод() ->
        если ВыбрасыватьИсключение 
            выбросить новый ИсключениеВалидации(
                Описание = "Указана дата из далекого будущего. У нас не поддерживаются даты пятого тысячелеия и более поздние",
                ОтображатьСообщениеОбОшибке = Ложь )                            
        ;
        возврат Ложь
    ;
            
    если Значение это Дата и (Значение как Дата) > МАКСИМАЛЬНАЯ_ДАТАВРЕМЯ_V8.Дата
        возврат ОбработчикОшибки()
    иначе если Значение это ДатаВремя и (Значение как ДатаВремя) > МАКСИМАЛЬНАЯ_ДАТАВРЕМЯ_V8
        возврат ОбработчикОшибки()
    иначе если Значение это Момент и (Значение как Момент) > МАКСИМАЛЬНАЯ_ДАТАВРЕМЯ_V8.ВМомент(ЧасовойПояс{UTC+0})
        возврат ОбработчикОшибки()
    ;
                        
    возврат Истина
;