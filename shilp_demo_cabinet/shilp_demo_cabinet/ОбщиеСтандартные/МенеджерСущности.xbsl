@ВПроекте
@НаСервере
метод УдалитьПодчиненныеОбъекты(Владелец: неизвестно, ТипОбъекта: Тип, ИмяПоляВладелец: Строка = "Владелец")
    исп Транзакции.Начать()
    знч ИмяТаблицы: Строка = ИмяТаблицыПоТипу(ТипОбъекта)
    пер Запрос = новый ПроизвольныйЗапрос() // текст запроса динамический
    Запрос.Текст =
        "Выбрать
            Ссылка
        Из
            %ИмяТаблицы
        Где
            %ИмяПоляВладелец == &Ссылка"
    Запрос.УстановитьПараметр("Ссылка", Владелец)
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        РезультатСтрока.Ссылка.ЗагрузитьОбъект(Истина).Удалить()
    ;
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЗначениеРеквизитаОбъекта(Ссылка: Сущность.Ключ, ИмяРеквизита: Строка): неизвестно
    пер ЗначениеРеквизита: неизвестно
    пер Значения: ЧитаемоеСоответствие<Строка, неизвестно>? = ЗначенияРеквизитовОбъекта(Ссылка, [ИмяРеквизита])
    если Значения != Неопределено
        ЗначениеРеквизита = Значения.Получить(ИмяРеквизита)
    ;
    возврат ЗначениеРеквизита
;

@ВПроекте
@НаСервере
метод ЗначениеРеквизитаОбъектов(МассивСсылок: ЧитаемоеМножество<Сущность.Ключ>, ИмяРеквизита: Строка): ЧитаемоеСоответствие<Сущность.Ключ, Объект?>
    пер ЗначенияРеквизитаОбъектов: Соответствие<Сущность.Ключ, Объект?>
    пер Значения: ЧитаемоеСоответствие<Сущность.Ключ, ЧитаемоеСоответствие<Строка, Объект?>> = ЗначенияРеквизитовОбъектов(МассивСсылок, [ИмяРеквизита])
    для Значение из Значения
        ЗначенияРеквизитаОбъектов.Вставить(Значение.Ключ, Значение.Значение.Получить(ИмяРеквизита))
    ; 
    возврат ЗначенияРеквизитаОбъектов
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЗначенияРеквизитовОбъекта(Ссылка: Сущность.Ключ, ИменаРеквизитов: ЧитаемыйМассив<Строка>): ЧитаемоеСоответствие<Строка, неизвестно>?
    пер ЗначенияРеквизитов: ЧитаемоеСоответствие<Строка, Объект?>?
    пер Значение: ЧитаемоеСоответствие<Сущность.Ключ, ЧитаемоеСоответствие<Строка, Объект?>> =
        ЗначенияРеквизитовОбъектов(новый ЧитаемоеМножество<Сущность.Ключ>([Ссылка]), ИменаРеквизитов)
    если Значение.СодержитКлюч(Ссылка)
        ЗначенияРеквизитов = Значение[Ссылка]
    ;
    возврат ЗначенияРеквизитов
;

@ВПроекте
@НаСервере
метод ЗначенияРеквизитовОбъектов(СсылкиНаОбъекты: ЧитаемоеМножество<Сущность.Ключ>, ИменаРеквизитов: ЧитаемыйМассив<Строка>): ЧитаемоеСоответствие<Сущность.Ключ, ЧитаемоеСоответствие<Строка, неизвестно>>
    пер ЗначенияРеквизитовОбъектов: Соответствие<Сущность.Ключ, ЧитаемоеСоответствие<Строка, Объект?>>
    пер ПоляЗапроса: Строка = "Ссылка Как Ссылка"
    если СсылкиНаОбъекты.Пусто()
        возврат ЗначенияРеквизитовОбъектов
    ;
    пер ПерваяСсылка: Сущность.Ключ?
    для ЭлементМножества из СсылкиНаОбъекты
        ПерваяСсылка = ЭлементМножества
        прервать
    ;
    для ИмяРеквизита из ИменаРеквизитов
        если ИмяРеквизита == "Ссылка"
            продолжить
        ;
        ПоляЗапроса += ", %ИмяРеквизита Как %{ИмяРеквизита.Заменить(".", "")}" 
    ;
    
    пер Запрос = новый ПроизвольныйЗапрос() // текст запроса динамический
    Запрос.УстановитьПараметр("СсылкиНаОбъекты", СсылкиНаОбъекты)
    Запрос.Текст =
        "Выбрать
            %ПоляЗапроса
        Из
            %{ИмяТаблицыПоСсылке(ПерваяСсылка)}
        Где
            Ссылка В (&СсылкиНаОбъекты)"

    исп РезультатЗапроса = Запрос.Выполнить() 
    для РезультатЗапросаСтрока из РезультатЗапроса
        пер ЗначенияРеквизитов = новый Соответствие<Строка, Объект?>()
        для ИмяРеквизита из ИменаРеквизитов
            пер ИмяРеквизитаЗапроса = ИмяРеквизита.Заменить(".", "")
            ЗначенияРеквизитов.Вставить(ИмяРеквизитаЗапроса, РезультатЗапросаСтрока[ИмяРеквизитаЗапроса])
        ;
        ЗначенияРеквизитовОбъектов.Вставить(РезультатЗапросаСтрока.Ссылка,
            новый ЧитаемоеСоответствие<Строка, Объект?>(ЗначенияРеквизитов))
    ;
    возврат ЗначенияРеквизитовОбъектов
;

@ВПроекте
@НаСервере
метод ИмяТаблицыПоСсылке(Ссылка: Сущность.Ключ): Строка
    возврат ИмяТаблицыПоТипу(Ссылка.ПолучитьТип())
;

@ВПроекте
@НаСервере
метод ИмяТаблицыПоТипу(ТипСущности: Тип): Строка
    знч ОтражениеЭлемента = ОтражениеЭлементаПроекта.ПоТипу(ТипСущности)
    если ОтражениеЭлемента это ОтражениеСущности
        знч ОтражениеСущности = ОтражениеЭлемента как ОтражениеСущности
        возврат ОтражениеСущности.ОсновнаяТаблица.ПолноеИмя.ВСтроку(ВариантВстроенногоЯзыка.Русский)
    ;
    выбросить новый ИсключениеВыполнения("Не удалось определить имя таблицы") 
;

@ВПроекте
@НаСервере
статический метод МенеджерСущностиПоСсылке(Ссылка: Сущность.Ключ): Справочник|Документ|ПланОбмена|РегистрСведений
    возврат МенеджерСущностиПоТипу(Ссылка.ПолучитьТип())
;

@ВПодсистеме
@НаСервере
статический метод МенеджерСущностиПоТипу(ТипСущности: Тип): Справочник|Документ|ПланОбмена|РегистрСведений
    знч ОтражениеЭлемента = ОтражениеЭлементаПроекта.ПоТипу(ТипСущности)
    выбор ОтражениеЭлемента
    когда это ОтражениеОбъектнойСущности
        знч ОтражениеСущности = ОтражениеЭлемента как ОтражениеОбъектнойСущности
        для Менеджер из Справочники
            если Менеджер.ПолучитьТип() == ОтражениеСущности.ТипМенеджер
                возврат Менеджер
            ;
        ;
        для Менеджер из Документы
            если Менеджер.ПолучитьТип() == ОтражениеСущности.ТипМенеджер
                возврат Менеджер
            ;
        ;
        для Менеджер из ПланыОбмена
            если Менеджер.ПолучитьТип() == ОтражениеСущности.ТипМенеджер
                возврат Менеджер
            ;
        ;
    когда это ОтражениеСущностиРегистра
        знч ОтражениеСущности = ОтражениеЭлемента как ОтражениеСущностиРегистра
        для Менеджер из РегистрыСведений
            если Менеджер.ПолучитьТип() == ОтражениеСущности.ТипМенеджер
                возврат Менеджер
            ;
        ;    
    ;
    выбросить новый ИсключениеВыполнения("Не удалось найти менеджер сущности")
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СсылкаСуществует(Ссылка: Сущность.Ключ): Булево
    знч ИмяТаблицы = ИмяТаблицыПоСсылке(Ссылка)
    пер Запрос = новый ПроизвольныйЗапрос() // текст запроса динамический
    Запрос.Текст =
        "Выбрать Первые 1
            Ссылка
        Из
            %ИмяТаблицы
        Где
            Ссылка == &Ссылка"
    Запрос.УстановитьПараметр("Ссылка", Ссылка)
    исп Результат = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        возврат Истина
    ;
    возврат Ложь
;

@ВПроекте
@НаСервере  @ДоступноСКлиента
метод ПредставлениеСсылки(Ссылка: Сущность.Ключ?, ПредставлениеЕслиНетОбъекта: Строка = "<Объект не найден>"): Строка
    пер ПредставлениеСсылки: Строка
    если Ссылка != Неопределено
        если не СсылкаСуществует(Ссылка)
            ПредставлениеСсылки = ПредставлениеЕслиНетОбъекта
        иначе 
            ПредставлениеСсылки = Ссылка.Представление()
        ;
    ;
    возврат ПредставлениеСсылки
;

@ВПроекте
@НаСервере
метод ПроверитьЗаполнениеРеквизита(Значение: Перечисление|Сущность.Ключ|Число|Строка|Дата|Неопределено, ИмяПроверяемогоРеквизита: Строка)
    если Значение == Неопределено
        выбросить новый ИсключениеВыполнения("Не заполнено значение %ИмяПроверяемогоРеквизита")
    ;
;

@ВПроекте
@НаСервере @ДоступноСКлиента
статический метод СсылкаПоТипуИИдентификатору(ТипСсылки: Тип, Идентификатор: Ууид): Сущность.Ключ
    возврат (МенеджерСущностиПоТипу(ТипСсылки) как неизвестно).ПолучитьСсылку(Идентификатор)
;

@ВПроекте
@НаСервере
метод ЗначениеМножественногоРеквизитаОбъектов(Ссылки: ЧитаемаяКоллекция<Сущность.Ключ>, Реквизит: Строка): Соответствие<Сущность.Ключ, ЧитаемаяКоллекция<Объект>>
    
    знч ЗначениеМножественногоРеквизитаОбъектов: Соответствие<Сущность.Ключ, ЧитаемаяКоллекция<Объект>>
    
    если Ссылки.Пусто()
        возврат ЗначениеМножественногоРеквизитаОбъектов
    ;
        
    знч ПерваяСсылка = Ссылки.ПервыйИлиУмолчание()!    
    
    пер Запрос: ПроизвольныйЗапрос
    Запрос.Текст = 
        "
        Выбрать
            Таблица.Владелец Как Контейнер,
            Таблица.Элемент Как Элемент
        Из
            %{ИмяТаблицыПоСсылке(ПерваяСсылка)}.%Реквизит Как Таблица
        Где
            Таблица.Владелец В (&Ссылки) 
        Упорядочить По
            Владелец,
            Индекс 
        "
    Запрос.УстановитьПараметр("Ссылки", Ссылки)
    
    пер ТекущийКонтейнер: Сущность.Ключ?
    пер ЭлементыРеквизита: Массив<Объект>
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        если ТекущийКонтейнер == Неопределено
            ТекущийКонтейнер = СтрокаРезультата.Контейнер
        иначе если ТекущийКонтейнер != СтрокаРезультата.Контейнер
            ЗначениеМножественногоРеквизитаОбъектов.Вставить(
                ТекущийКонтейнер, 
                новый ЧитаемыйМассив<Объект>(ЭлементыРеквизита)
            )
            ЭлементыРеквизита.Очистить()
            ТекущийКонтейнер = СтрокаРезультата.Контейнер
        ;
        ЭлементыРеквизита.Добавить(СтрокаРезультата.Элемент)        
    ;
    
    если ТекущийКонтейнер != Неопределено
        ЗначениеМножественногоРеквизитаОбъектов.Вставить(
            ТекущийКонтейнер, 
            новый ЧитаемыйМассив<Объект>(ЭлементыРеквизита)
        )    
    ;
     
    возврат ЗначениеМножественногоРеквизитаОбъектов      
;

@ВПроекте
@НаКлиенте
метод УведомлениеЕстьСсылкиНаОбъекты(Сущность: Сущность.Ключ, СсылкиНаСущность: Соответствие<Тип, Множество<Сущность.Ключ>>)
    если СсылкиНаСущность.Размер() == 0
        возврат
    ;
    пер ОбщееКоличествоСсылок: Число
    для Элемент из СсылкиНаСущность
        ОбщееКоличествоСсылок = ОбщееКоличествоСсылок + Элемент.Значение.Размер()
    ;
    знч ПредставлениеКоличестваСсылок = МенеджерСтрок.ТекстПоКоличеству("ссылка", ОбщееКоличествоСсылок)
    пер ТекстУведомления = 
    "Невозможно удалить \"%{Сущность.Представление()}\".
    Найдено %ОбщееКоличествоСсылок %ПредставлениеКоличестваСсылок в других объектах."
    
    пер Уведомление = новый Уведомление("Внимание", ТекстУведомления)
    Уведомление.Важность = ВажностьКлиентскогоУведомления.Обычная
    Уведомление.Изображение = Ресурс{ОшибкаВКруге.svg}.Ссылка
    Уведомление.Таймаут = 15с
    Уведомление.ОценкаИнформации = ОценкаИнформации.Предупреждающая
    Уведомление.Показать()
    
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЕстьЭлементыСущностиСФильтром(ТипОбъекта: Тип, Фильтр: ГруппаЭлементовФильтра): Булево
    знч ИмяТаблицы: Строка = ИмяТаблицыПоТипу(ТипОбъекта)
    знч РазделительПодсистемы = ИмяТаблицы.НайтиСКонца("::")
    пер Псевдоним = ИмяТаблицы
    если РазделительПодсистемы != -1
        Псевдоним = ИмяТаблицы.ПодстрокаСКонца(ИмяТаблицы.Длина()-РазделительПодсистемы-2)
    ;
    
    пер Запрос = новый ПроизвольныйЗапрос() // текст запроса динамический
    Запрос.Текст =
        "Выбрать Первые 1
            Ссылка
        Из
            %ИмяТаблицы как %Псевдоним
        Где 
            Истина
        "
        МенеджерЗапросов.ДополнитьЗапросФильтрами(Запрос, Фильтр)
        
    исп Результат = Запрос.Выполнить()
    возврат Результат.ПервыйИлиУмолчание() != Неопределено
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СсылкиНаСущность(Сущность: Сущность.Ключ): Соответствие<Тип, Множество<Сущность.Ключ>>
    
    знч ТипСсылки = Сущность.ПолучитьТип()
    знч ОтраженияИПоля = новый Соответствие<ОтражениеОбъектнойСущности|ОтражениеСущностиРегистра|ОтражениеТабличнойЧастиСущности, Множество<Строка>>()
    
    для Справочник из Справочники
        знч ОтражениеСправочника = ОтражениеЭлементаПроекта.ПоТипу(Справочник.ПолучитьТип()) как ОтражениеОбъектнойСущности
        если ОтражениеСправочника.ТипСсылка == ТипСсылки
            продолжить
        ;
        для Свойство из ОтражениеСправочника.ТипОбъект.ПолучитьСвойства()
            если Свойство.Типы.Содержит(ТипСсылки)
                если не ОтраженияИПоля.СодержитКлюч(ОтражениеСправочника)
                    ОтраженияИПоля.Вставить(ОтражениеСправочника, новый Множество<Строка>())
                ;
                ОтраженияИПоля[ОтражениеСправочника].Добавить(Свойство.Имя.Русский)             
            ;
        ;
        
        для ТабличнаяЧасть из ОтражениеСправочника.ТабличныеЧасти
            для Реквизит из ТабличнаяЧасть.Реквизиты
                если Реквизит.Тип.Содержит(ТипСсылки)
                    если не ОтраженияИПоля.СодержитКлюч(ТабличнаяЧасть)
                        ОтраженияИПоля.Вставить(ТабличнаяЧасть, новый Множество<Строка>())
                    ;
                    ОтраженияИПоля[ТабличнаяЧасть].Добавить(Реквизит.Имя.Русский)
                ;
            ;
        ;
    ;
    
    для Документ из Документы
        знч ОтражениеДокумента = ОтражениеЭлементаПроекта.ПоТипу(Документ.ПолучитьТип()) как ОтражениеОбъектнойСущности
        если ОтражениеДокумента.ТипСсылка == ТипСсылки
            продолжить
        ;
        для Свойство из ОтражениеДокумента.ТипОбъект.ПолучитьСвойства()
            если Свойство.Типы.Содержит(ТипСсылки)
                если не ОтраженияИПоля.СодержитКлюч(ОтражениеДокумента)
                    ОтраженияИПоля.Вставить(ОтражениеДокумента, новый Множество<Строка>())
                ;
                ОтраженияИПоля[ОтражениеДокумента].Добавить(Свойство.Имя.Русский)             
            ;
        ;

        для ТабличнаяЧасть из ОтражениеДокумента.ТабличныеЧасти
            для Реквизит из ТабличнаяЧасть.Реквизиты
                если Реквизит.Тип.Содержит(ТипСсылки)
                    если не ОтраженияИПоля.СодержитКлюч(ТабличнаяЧасть)
                        ОтраженияИПоля.Вставить(ТабличнаяЧасть, новый Множество<Строка>())
                    ;
                    ОтраженияИПоля[ТабличнаяЧасть].Добавить(Реквизит.Имя.Русский)
                ;
            ;
        ;
    ;
    
    для Элемент из РегистрыСведений
        знч ОтражениеРегистра = ОтражениеЭлементаПроекта.ПоТипу(Элемент.ПолучитьТип()) как ОтражениеСущностиРегистра
        для Свойство из ОтражениеРегистра.ТипЗапись.ПолучитьСвойства()
            если Свойство.Типы.Содержит(ТипСсылки)
                если не ОтраженияИПоля.СодержитКлюч(ОтражениеРегистра)
                    ОтраженияИПоля.Вставить(ОтражениеРегистра, новый Множество<Строка>())
                ;
                ОтраженияИПоля[ОтражениеРегистра].Добавить(Свойство.Имя.Русский)
            ;
        ;
    ;

    знч Ссылки = новый Соответствие<Тип, Множество<Сущность.Ключ>>()
    если ОтраженияИПоля.Размер() == 0
        возврат Ссылки
    ;   
    
    пер ТекстЗапроса: Строка
    для Элемент из ОтраженияИПоля

        пер УсловияФильтра: Строка
        для ИмяПоля из Элемент.Значение
            знч Разделитель = УсловияФильтра.Пусто() ? "" : "или "
            УсловияФильтра = "%УсловияФильтра%Разделитель%ИмяПоля == &Ссылка "
        ;

        знч РазделительЗапросов = ТекстЗапроса.Пусто() ? "" : "Объединить Все"
        пер ИмяТаблицы: Строка
        выбор Элемент.Ключ
        когда это ОтражениеОбъектнойСущности
            ИмяТаблицы = (Элемент.Ключ как ОтражениеОбъектнойСущности).ОсновнаяТаблица.Имя.Русский
            ТекстЗапроса =
            "%ТекстЗапроса
            %РазделительЗапросов
            ВЫБРАТЬ РАЗЛИЧНЫЕ
                Ссылка КАК Ссылка
            ИЗ
                %ИмяТаблицы
            ГДЕ
                %УсловияФильтра
            "
        когда это ОтражениеСущностиРегистра
            ИмяТаблицы = (Элемент.Ключ как ОтражениеСущностиРегистра).ОсновнаяТаблица.Имя.Русский
            ТекстЗапроса =
            "%ТекстЗапроса
            %РазделительЗапросов
            ВЫБРАТЬ
                RecordKey КАК Ссылка
            ИЗ
                %ИмяТаблицы
            ГДЕ
                %УсловияФильтра
            "
        когда это ОтражениеТабличнойЧастиСущности
            знч ИмяВладельца = (Элемент.Ключ как ОтражениеТабличнойЧастиСущности).Владелец.ОсновнаяТаблица.Имя.Русский
            знч ИмяТабличнойЧасти = (Элемент.Ключ как ОтражениеТабличнойЧастиСущности).Имя.Русский
            ИмяТаблицы =  "%ИмяВладельца.%ИмяТабличнойЧасти"
            ТекстЗапроса =
            "%ТекстЗапроса
            %РазделительЗапросов
            ВЫБРАТЬ РАЗЛИЧНЫЕ
                Владелец КАК Ссылка
            ИЗ
                %ИмяТаблицы
            ГДЕ
                %УсловияФильтра
            "
        ;
    ;

    область
        исп КонтекстДоступа.Привилегированный() 
        пер Запрос = новый ПроизвольныйЗапрос() // текст запроса динамический
        Запрос.Текст = ТекстЗапроса
        Запрос.УстановитьПараметр("Ссылка", Сущность)
        исп Результат = Запрос.Выполнить()
        для Элемент из Результат
            знч ЭлементСсылка = Элемент["Ссылка"]
            знч ЭлементТипСсылки = ЭлементСсылка.ПолучитьТип()
            если не Ссылки.СодержитКлюч(ЭлементТипСсылки)
                Ссылки.Вставить(ЭлементТипСсылки, новый Множество<Сущность.Ключ>())
            ;
            Ссылки[ЭлементТипСсылки].Добавить(ЭлементСсылка)
        ;
    ;
    возврат Ссылки
;

@ВПроекте
структура СсылкаJson
    пер reftype: Строка
    пер id: Строка
;

@ВПроекте
@НаСервере
метод СсылкаВJson(Сущность: Сущность.Ключ): Строка
    знч СсылкаJson: СсылкаJson
    знч Тип = Сущность.ПолучитьТип()
    СсылкаJson.reftype = Тип.ВСтроку()
    для Свойство из Тип.ПолучитьСвойства()
        если Свойство.Имя.Русский == "Ид"
            СсылкаJson.id = (Свойство.Получить(Сущность) как Ууид).ВСтроку()
            прервать
        ;
    ;
    возврат СериализацияJson.ЗаписатьОбъект(СсылкаJson)
;
    
@НаСервере @ДоступноСКлиента
статический метод JsonВСсылкаСервер(Json: Строка): Сущность.Ключ
    знч СсылкаJson = СериализацияJson.ПрочитатьОбъект(Json, Тип<СсылкаJson>)
    возврат СсылкаПоТипуИИдентификатору(НайтиТип(СсылкаJson.reftype), новый Ууид(СсылкаJson.id))
;
    
@ВПроекте
метод JsonВСсылка(Json: Строка): Сущность.Ключ
    возврат JsonВСсылкаСервер(Json)
;

@ВПроекте
@НаСервере
метод РеквизитыСущности(ТипОбъекта: Тип): Массив<Строка>
    возврат РеквизитыСущностиПоИмениТипа(ИмяТаблицыПоТипу(ТипОбъекта))
;

@ВПроекте
@НаСервере
метод ЕстьРеквизитСущности(ТипОбъекта: Тип, ИмяРеквизита: Строка): Булево
    возврат РеквизитыСущности(ТипОбъекта).Содержит(ИмяРеквизита)
;

@НаСервере
метод РеквизитыСущностиПоИмениТипа(ИмяТипа: Строка): Массив<Строка>

    пер ИменаРеквизитов: Массив<Строка>
    пер Запрос = новый ПроизвольныйЗапрос() // текст запроса динамический
    
    Запрос.Текст = Строки.Шаблон(
        "Выбрать Первые 0
            *
         Из
            $0", ИмяТипа)
        
    исп Результат = Запрос.Выполнить() 
    пер ОписанияКолонок = Результат.ПолучитьОписанияКолонок()
    для ОписаниеКолонки из ОписанияКолонок
        если ОписаниеКолонки.Имя != "Reference"
            и ОписаниеКолонки.Имя != "Ссылка" 
            и ОписаниеКолонки.Имя != "Presentation"
            и ОписаниеКолонки.Имя != "Представление"
            и ОписаниеКолонки.Имя != "VersionStamp" 
            и ОписаниеКолонки.Имя != "МеткаВерсии"
            ИменаРеквизитов.Добавить(ОписаниеКолонки.Имя)
        ;
    ;
    
    возврат ИменаРеквизитов
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ОбъектПоСсылке(Ссылка: Сущность.Ключ): Объект?
    выбор Ссылка
    когда это Справочник.Ссылка
        возврат (Ссылка как Справочник.Ссылка).ЗагрузитьОбъект()
    когда это Документ.Ссылка
        возврат (Ссылка как Документ.Ссылка).ЗагрузитьОбъект()
    иначе
        возврат Неопределено
    ;
;