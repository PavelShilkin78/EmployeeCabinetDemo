@ВПроекте конст ПРЕДСТАВЛЕНИЕ_СТАТУСА_РЕЗУЛЬТАТА_ПО_УМОЛЧАНИЮ: Строка = "Не запускалось"
@ВПроекте конст ПРОВЕРКА_АВТОЗАПУСКА_ЗАПЛАНИРОВАННЫХ_ЗАДАНИЙ: Строка = "ПроверкаАвтозапускаЗапланированныхЗаданий"

@ВПроекте
структура ОписаниеВыполненияЗапланированногоЗадания
    обз знч ВыполняетсяСейчас: Булево
    обз знч ОтклоненияВыполнения: Булево
    обз знч ДатаПоследнегоЗапуска: Момент?
    обз знч ДлительностьПоследнегоЗапуска: Длительность?
    обз знч СтатусРезультатаПоследнегоЗапуска: СтатусРезультатаЗадания?
    обз знч ПредставлениеРезультатаПоследнегоЗапуска: Строка  
;

@ВПроекте
@НаСервере
@ДоступноСКлиента
метод ПолучитьОписаниеВыполненияЗапланированногоЗаданияПоКлючу(КлючЗадания: Строка): ОписаниеВыполненияЗапланированногоЗадания
    
    знч ОписаниеСтатусаВыполненияЗадания = ЗапланированныеЗадания.ПолучитьПоКлючу(КлючЗадания)
    знч ОписаниеСтатусаРезультатаЗадания = ЗапланированныеЗадания.ПолучитьПоследнийРезультатПоКлючу(КлючЗадания) 
    
    знч ВыполняетсяСейчас = ОписаниеСтатусаВыполненияЗадания != Неопределено
    пер ОтклоненияВыполнения = Ложь
    знч ДатаПоследнегоЗапуска = ОписаниеСтатусаРезультатаЗадания?.ЗавершеноВ
    знч ДлительностьПоследнегоЗапуска = ОписаниеСтатусаРезультатаЗадания?.Длительность
    знч СтатусРезультатаПоследнегоЗапуска = ОписаниеСтатусаРезультатаЗадания?.Статус
    пер ПредставлениеРезультатаПоследнегоЗапуска = ПользовательскоеПредставлениеРезультатаПоследнегоЗапуска(ОписаниеСтатусаРезультатаЗадания)
    
    если ОписаниеСтатусаРезультатаЗадания != Неопределено и ОписаниеСтатусаРезультатаЗадания.Статус != СтатусРезультатаЗадания.Успешно 
        ОтклоненияВыполнения = Истина
    ;
     
    возврат новый ОписаниеВыполненияЗапланированногоЗадания(
        ВыполняетсяСейчас = ВыполняетсяСейчас,
        ОтклоненияВыполнения = ОтклоненияВыполнения,
        ДатаПоследнегоЗапуска = ДатаПоследнегоЗапуска,
        ДлительностьПоследнегоЗапуска = ДлительностьПоследнегоЗапуска,
        СтатусРезультатаПоследнегоЗапуска = СтатусРезультатаПоследнегоЗапуска,
        ПредставлениеРезультатаПоследнегоЗапуска = ПредставлениеРезультатаПоследнегоЗапуска    
    )    
;

@Локально
@НаСервере
метод ПользовательскоеПредставлениеРезультатаПоследнегоЗапуска(ОписаниеСтатусаРезультатаЗадания: РезультатЗадания?): Строка
    
    пер ПользовательскоеПредставлениеРезультатаПоследнегоЗапуска = ПРЕДСТАВЛЕНИЕ_СТАТУСА_РЕЗУЛЬТАТА_ПО_УМОЛЧАНИЮ
    
    если ОписаниеСтатусаРезультатаЗадания != Неопределено
        пер РусскоязычноеПредставлениеСтатусаРезультата: Строка
        
        выбор ОписаниеСтатусаРезультатаЗадания.Статус
        когда СтатусРезультатаЗадания.Успешно
            РусскоязычноеПредставлениеСтатусаРезультата = "Выполнено успешно"
        когда СтатусРезультатаЗадания.Отменено
            РусскоязычноеПредставлениеСтатусаРезультата = "Отменено в процессе выполнения"
        когда СтатусРезультатаЗадания.Прервано
            РусскоязычноеПредставлениеСтатусаРезультата = "Прервано в процессе выполнения"      
        иначе
            РусскоязычноеПредставлениеСтатусаРезультата = "Ошибка выполнения"        
        ;
        
        ПользовательскоеПредставлениеРезультатаПоследнегоЗапуска = "%{РусскоязычноеПредставлениеСтатусаРезультата}: ${ОписаниеСтатусаРезультатаЗадания.ЗавершеноВ} за ${ОписаниеСтатусаРезультатаЗадания.Длительность}"
 
    ;
    
    возврат ПользовательскоеПредставлениеРезультатаПоследнегоЗапуска    
;

@ВПроекте
@НаСервере
метод КлючЗаданияПоСсылке(Ссылка: Сущность.Ключ, ИмяЗадания: Строка): Строка
    пер КлючЗадания: Строка
    выбор Ссылка
    когда это Справочник.Ссылка
        КлючЗадания = (Ссылка как Справочник.Ссылка).Ид.ВСтроку() + "_" + ИмяЗадания
    иначе
        КлючЗадания = ИмяЗадания
    ;
    возврат КлючЗадания
;

@ВПроекте
@НаСервере @ДоступноСКлиента
статический метод АвтозапускЗапланированныхЗаданийВключен(): Булево 
    пер ЗначениеЗапускЗапланированныхЗаданийВключен = Ложь
    попытка
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        ЗначениеЗапускЗапланированныхЗаданийВключен = Истина
    поймать Ошибка: Исключение
    ;
    возврат ЗначениеЗапускЗапланированныхЗаданийВключен
;

@ВПроекте
исключение ИсключениеВыключенАвтозапускЗапланированныхЗаданий
;

@ВПроекте
@НаСервере
метод ПроверитьАвтозапускЗапланированныхЗаданийВключен()
    если не ПроверкаАвтозапускаЗапланированныхЗаданий.Включена()
        возврат
    ;
    
    знч Ключ = "ПроверкаАвтозапускаЗапланированныхЗаданий"
    // При повторном вызове предыдущее задание будет выполняться на время кэша (20 мин)
    // и проверка будет выполнена за время от 0 до 3 мс
    если ЗапланированныеЗадания.ПолучитьПоКлючу(Ключ)?.Статус == СтатусЗадания.Выполняется
        возврат
    ;
    знч Задание = ЗапланированныеЗадания.Создать(&ТестоваяПроверкаПовтИсп)
    знч ОписаниеИсключения =
        "В приложении отключен автозапуск запланированных заданий. Обратитесь к администратору приложения."
    Задание.Настроить(
            Ключ = ПРОВЕРКА_АВТОЗАПУСКА_ЗАПЛАНИРОВАННЫХ_ЗАДАНИЙ, 
            ПовторыПриОшибке = СтратегияПовтораЗадания.Отсутствует(),
            ХранениеРезультатов = СтратегияХраненияРезультатовЗаданий.Последний(),
            СтратегияПубликации = СтратегияПубликацииЗадания.Отбросить,
            РегистрацияСобытий = СтратегияРегистрацииСобытийЗаданий.Ошибка)
    
    пер Начало = Момент.Сейчас()
    попытка
        Задание.ЗапланироватьБезТранзакции()
    поймать Ошибка: Исключение
        выбросить новый ИсключениеВыключенАвтозапускЗапланированныхЗаданий(ОписаниеИсключения)
    ;

    пер ОжидатьЗавершения = Истина
    знч ДлительностьОжидания = 20с
    пер Результат: РезультатЗадания?
    пер Пауза = 1мс
    пока ОжидатьЗавершения
        // Если операционной системой выделен всего один поток,
        // тестовое задание будет в очереди и тогда необходимо проверять другие задания
        если ЗапланированныеЗадания.ПолучитьЗадания()
                .ЕстьСоответствия(КлючИЗначение -> КлючИЗначение.Значение.Статус == СтатусЗадания.Выполняется)
            возврат
        ;
        
        Результат = ЗапланированныеЗадания.ПолучитьПоследнийРезультатПоКлючу(Ключ)
        если Момент.Сейчас() - Начало > ДлительностьОжидания
            ОжидатьЗавершения = Ложь
        иначе если Результат == Неопределено или Результат.ЗавершеноВ.Сравнить(Начало) < 0
            Пауза(Пауза)
            Пауза = Мин(Пауза * 2, 1с)
        иначе
            ОжидатьЗавершения = Ложь
        ;
    ;

    если Результат?.Статус != СтатусРезультатаЗадания.Успешно или Результат.ЗавершеноВ.Сравнить(Начало) < 0
        выбросить новый ИсключениеВыключенАвтозапускЗапланированныхЗаданий(ОписаниеИсключения)
    ;
;

@НаСервере
метод ТестоваяПроверкаПовтИсп()
    // Проверка количества выделенных потоков
    знч Задание2 = ЗапланированныеЗадания.Создать(&ТестоваяПроверка)
    знч Ключ2 = "%{ПРОВЕРКА_АВТОЗАПУСКА_ЗАПЛАНИРОВАННЫХ_ЗАДАНИЙ}2"
    Задание2.Настроить(
        Ключ = Ключ2, 
        ПовторыПриОшибке = СтратегияПовтораЗадания.Отсутствует(),
        ХранениеРезультатов = СтратегияХраненияРезультатовЗаданий.Последний(),
        СтратегияПубликации = СтратегияПубликацииЗадания.Отбросить,
        РегистрацияСобытий = СтратегияРегистрацииСобытийЗаданий.Ошибка)
    Задание2.ЗапланироватьБезТранзакции()
    
    Пауза(10мс)
    
    знч ВыполняетсяЗаданий = ЗапланированныеЗадания.ПолучитьЗадания()
        .Значения()
        .Фильтровать(ОписаниеЗадания -> ОписаниеЗадания.Статус == СтатусЗадания.Выполняется)
        .Размер()
    ЗапланированныеЗадания.Удалить(Ключ2)   
    
    знч ВыделеноНесколькоПотоков = ВыполняетсяЗаданий > 1
    если ВыделеноНесколькоПотоков
        Пауза(20м)
    ;
;

@НаСервере
метод ТестоваяПроверка()
    Пауза(20с)
;

@НаСервере
@ДоступноСКлиента
@ВПроекте
метод ПолучитьОписаниеЗаданияПоКлючу(Ключ: Строка): ОписаниеЗадания?
    возврат ЗапланированныеЗадания.ПолучитьПоКлючу(Ключ)
;