импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт ВладельцыКабинетов
импорт Компания
импорт КонтрольДоступа
импорт ОбменДанными
импорт Компания::Согласования
импорт Криптография

//Область ОбработчикиСобытий

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПриЗаполнении()
    ФизическоеЛицо = ПользователиСистемы.ТекущееФизическоеЛицо()
    если ФизическоеЛицо == Неопределено
        возврат
    ;
    пер ЧасовойПояс: ЧасовойПояс = ВладельцыКабинетов.ЧасовойПоясФизическогоЛица(ФизическоеЛицо)    
    Дата = Дата.Сейчас(ЧасовойПояс)
    МоментСоздания = Момент.Сейчас()
    Год = Дата.Год
    если Дата.Месяц < 7
        Год = Дата.ДобавитьГоды(-1).Год
    ;    
    знч ВключаяУволенных = ФизЛица.СотрудникиФизическогоЛицаУволены(ФизическоеЛицо)
    Организация = Сотрудники.ОрганизацияФизическогоЛицаПоОсновномуМестуРаботы(
        ФизическоеЛицо = ФизическоеЛицо, ВключаяУволенных = ВключаяУволенных)
    
    если Организация == Неопределено
        Организация = Организации.ОрганизацияПоУмолчанию()
    ;
    ВариантПолученияДокумента = Сервер.ВариантПолученияДокументаПоУмолчанию()    
    знч ЗапрашиваемыеДанные: ВладельцыКабинетов.ЗапрашиваемыеДанныеВладельцевКабинетов
    ЗапрашиваемыеДанные.ЗапрашиваемыеДанныеФизическихЛиц.РабочаяКонтактнаяИнформация = Истина
    ЭлектроннаяПочта = ВладельцыКабинетов.ДанныеВладельцаКабинета(ФизическоеЛицо, ЗапрашиваемыеДанные).ДанныеФизлица.РабочаяКонтактнаяИнформация.ЭлектроннаяПочта
;

метод ПроверитьЗаполнение()
    МенеджерСущности.ПроверитьЗаполнениеРеквизита(ФизическоеЛицо, "Физическое лицо")
    МенеджерСущности.ПроверитьЗаполнениеРеквизита(Организация, "Организация")
    если Назначение != НазначениеСправок2Ндфл.ПодтверждениеДоходов
        МенеджерСущности.ПроверитьЗаполнениеРеквизита(Год, "Год")
    ;
    если Назначение == НазначениеСправок2Ндфл.ДекларированиеДоходов
        МенеджерСущности.ПроверитьЗаполнениеРеквизита(КоличествоМесяцев, "Количество месяцев")
    ;
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередЗаписью(ПредыдущееЗначение: ЗапросСправки2Ндфл.Данные, ПараметрыЗаписи: ЗапросСправки2Ндфл.ПараметрыЗаписи)
    если Назначение == НазначениеСправок2Ндфл.ДекларированиеДоходов
        ВидПериода = ВидПериодаСправки2Ндфл.Год
        КоличествоМесяцев = 12
    ;
    ЗаполнитьПредставление()
    ЗаполнитьМесяцСоздания()
    ПроверитьЗаполнение()
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПослеЗаписи(ПредыдущееЗначение: ЗапросСправки2Ндфл.Данные, ПараметрыЗаписи: ЗапросСправки2Ндфл.ПараметрыЗаписи)
    исп КонтекстДоступа.Привилегированный()
    пер ТребуетсяРегистрацияИзменений = РегистрацияИзменений.ТребуетсяРегистрацияИзмененийОбъекта(этот, ПредыдущееЗначение)
    ЗапросСправки2Ндфл.ПослеЗаписиДополнение(Ссылка, ФизическоеЛицо, ТребуетсяРегистрацияИзменений)
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередУдалением(ПараметрыУдаления: ЗапросСправки2Ндфл.ПараметрыУдаления)
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<СогласованияДокументов>, "Документ")
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<ПодписиДокументов>, "Документ")
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<ВерсииДанныхОбъектов>, "Объект")
;

//КонецОбласти

//Область СлужебныеПроцедурыИФункции

метод ЗаполнитьПредставление()
    если Назначение == НазначениеСправок2Ндфл.ДекларированиеДоходов
        ПредставлениеДокумента = "Для декларации, " + (Год).ВСтроку() 
    иначе если Назначение == НазначениеСправок2Ндфл.ПодтверждениеДоходов
        ПредставлениеДокумента = "Подтверждение доходов, " + МенеджерДат.ФорматДаты(Дата, "ММММ гггг")
    ;
;


метод ЗаполнитьМесяцСоздания()
    МесяцСоздания = Дата.НачалоМесяца()
;

//КонецОбласти