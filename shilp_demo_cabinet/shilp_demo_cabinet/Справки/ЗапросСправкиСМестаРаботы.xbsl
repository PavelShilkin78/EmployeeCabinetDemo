импорт ИнтерфейсныеКомпонентыСтандартные
импорт ВебApi
импорт Компания
импорт КонтрольДоступа
импорт ОбменДанными
импорт ОбщегоНазначения
импорт Компания::Согласования
импорт УниверсальныеМеханизмы
импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт Уведомления
импорт УниверсальныеМеханизмы::ШаблоныДокументов

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ЧтениеИРедактированиеАутентифицированным(этот)]
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ЗапросСправкиСМестаРаботы.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ЗапросСправкиСМестаРаботы.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ЗапросСправкиСМестаРаботы.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ЧтениеИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПоПолномочиям(
            [КонтрольДоступа.ПолномочиеПросмотрЛичныхДанных()],
            Элемент.ФизическоеЛицо
        ))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеРедактированиеДанныхСправочниковПерсонально([Элемент.ФизическоеЛицо]))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

//КонецОбласти

// Контракт СостояниеДокументовПоставщик

@ВПроекте
@Реализация
метод ПослеЗаписиСостоянияДокумента(ТекущееЗначение: СостояниеДокументов.Объект, ПредыдущееЗначение: СостояниеДокументов.Данные, ПараметрыЗаписи: СостояниеДокументов.ПараметрыЗаписи)
    если ТекущееЗначение.Документ это ЗапросСправкиСМестаРаботы.Ссылка
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        ЗапланированныеЗадания.Создать(&ПослеИзмененияСостоянияДополнение,
            ТекущееЗначение.Документ как ЗапросСправкиСМестаРаботы.Ссылка, ТекущееЗначение.Состояние, ПредыдущееЗначение.Состояние)
            .Настроить(Ключ = МенеджерЗаданий.КлючЗаданияПоСсылке(ТекущееЗначение.Документ, "ИСД"))
            .ЗапланироватьВТранзакции()
    ;
;

@ВПроекте
@Реализация
метод ЗаполнитьКартинкиДокументов(ДанныеЗапросов: ЧитаемыйМассив<СостояниеДокументаКомпонентДанных>)
    для Компонент из ДанныеЗапросов
        если Компонент.Документ это ЗапросСправкиСМестаРаботы.Ссылка 
            Компонент.Картинка = Ресурс{Справка.svg}.Ссылка
            Компонент.ЦветКартинки = БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Болотный)
        ; 
    ;
;

// Конец СостояниеДокументовПоставщик

//Область СлужебныйПрограммныйИнтерфейс

структура ДанныеJson
    обз знч ID:                 Строка
    пер version:            Число
    пер dateCreated:        Дата?
    пер personID:           Строка
    пер employerID:         Строка    
    пер certificateTypeID:  Строка?
    пер purpose:            Строка?
    пер note:               Строка?
    пер obtainingMode:      Сервер.ВариантыПолученияДокументаJson?
    пер copiesNumber:       Число?
    пер sendEmail:          Булево?
    пер addressEmail:       Строка?
    пер attachments:        Массив<МенеджерФайлов.ДанныеФайлаJson>
    пер document:           Файлы.ЭлектронныйДокументJson?
;

структура ДанныеJson_V2_0
    обз знч ID:                 Строка
    пер version:            Число
    пер dateCreated:        Дата?
    пер personID:           Строка
    пер employerID:         Строка    
    пер certificateTypeID:  Строка?
    пер purpose:            Строка?
    пер note:               Строка?
    пер obtainingMode:      Сервер.ВариантыПолученияДокументаJson?
    пер copiesNumber:       Число?
    пер sendEmail:          Булево?
    пер addressEmail:       Строка?
    пер attachments:        Массив<МенеджерФайлов.ДанныеФайлаJson>
    пер document:           Файлы.ЭлектронныйДокументJson_V2_0?
;

структура ДанныеJson_V2_1
    обз знч ID:                 Строка
    пер version:            Число
    пер dateCreated:        Дата?
    пер personID:           Строка
    пер employerID:         Строка    
    пер certificateTypeID:  Строка?
    пер purpose:            Строка?
    пер note:               Строка?
    пер obtainingMode:      Сервер.ВариантыПолученияДокументаJson?
    пер copiesNumber:       Число?
    пер sendEmail:          Булево?
    пер addressEmail:       Строка?
    пер attachments:        Массив<МенеджерФайлов.ДанныеФайлаJson>
    пер document:           Файлы.ЭлектронныйДокументJson_V2_1?
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    
    возврат {"certificatesFromEmployerRequests": ДанныеЗапросовВJson(Ссылки, Сервисы, ВерсияФорматаОбмена)}
;

метод ДанныеЗапросовВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ВерсияФорматаОбмена: Версия?, ДляПредставления: Булево = Ложь): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеЗапросовСправокСМестаРаботы(Ссылки)
        если ВерсияФорматаОбмена != Неопределено и ВерсияФорматаОбмена >= Версия{2.1}
            Данные.Добавить(ДанныеЗапросаСправкиВJson_V2_1(КлючИЗначение.Значение, Сервисы, ДляПредставления))    
        иначе если ВерсияФорматаОбмена != Неопределено и ВерсияФорматаОбмена >= Версия{2.0}
            Данные.Добавить(ДанныеЗапросаСправкиВJson_V2_0(КлючИЗначение.Значение, Сервисы, ДляПредставления))    
        иначе
            Данные.Добавить(ДанныеЗапросаСправкиВJson(КлючИЗначение.Значение, Сервисы, ДляПредставления))
        ;
    ;
    возврат Данные
;

@ВПроекте
метод ПолучитьДанныеJson(Ссылка: ЗапросСправкиСМестаРаботы.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Объект?
    если Ссылка == Неопределено 
        возврат Неопределено
    ;
    возврат ГруппаИзмененийВJson([Ссылка], Сервисы, ВерсияФорматаОбмена)["certificatesFromEmployerRequests"]  
;

метод ДанныеЗапросовСправокСМестаРаботы(ЗапросыСправок: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): 
        ЧитаемоеСоответствие<ЗапросСправкиСМестаРаботы.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    
    знч ДанныеЗапросов: Соответствие<ЗапросСправкиСМестаРаботы.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Запросы: Массив<ЗапросСправкиСМестаРаботы.Ссылка>
    для Запрос  из ЗапросыСправок
        Запросы.Добавить(Запрос как ЗапросСправкиСМестаРаботы.Ссылка)
    ;
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Дата,
            ФизическоеЛицо,
            МестоРаботы,
            ВидСправки,
            ВидСправки.Наименование Как ВидСправкиПредставление,
            Назначение,
            Комментарий,
            ВариантПолученияДокумента,
            КоличествоЭкземпляров,
            ОтправитьНаЭлектроннуюПочту,
            ЭлектроннаяПочта
        Из
            ЗапросСправкиСМестаРаботы
        Где
            Ссылка В (%Запросы) 
            И ФизическоеЛицо != Неопределено
            И МестоРаботы != Неопределено}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        ДанныеЗапросов.Вставить(
            РезультатСтрока.Ссылка,
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат))
    ;
            
    возврат ДанныеЗапросов
;


метод ДанныеЗапросаСправкиВJson(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево): ДанныеJson

    Сервисы.ПолучитьИдентификаторы([
        ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, 
        ДанныеОбъекта["МестоРаботы"] как Организации.Ссылка
    ])

    знч ДанныеВJson = новый ДанныеJson((ДанныеОбъекта["Ссылка"] как ЗапросСправкиСМестаРаботы.Ссылка).Ид.ВСтроку())
    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата
    ДанныеВJson.personID    = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.employerID  = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["МестоРаботы"] как Организации.Ссылка)
    ДанныеВJson.purpose = (ДанныеОбъекта["Назначение"] как Строка?) ?? ""
    ДанныеВJson.note = (ДанныеОбъекта["Комментарий"] как Строка?) ?? "" 
    если ДанныеОбъекта["ВидСправки"] != Неопределено
        ДанныеВJson.certificateTypeID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ВидСправки"] как ВидыПроизвольныхСправок.Ссылка)
    ;
    Сервер.ЗаполнитьПолучениеДокументаJson(ДанныеВJson, ДанныеОбъекта)
    
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson(
        ДанныеОбъекта["Ссылка"] как ЗапросСправкиСМестаРаботы.Ссылка, ДляПредставления, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.attachments = ДанныеФайлов.Вложения
    ;
    
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗапросСправкиСМестаРаботы.Ссылка))
    ;

    возврат ДанныеВJson
;

метод ДанныеЗапросаСправкиВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево): ДанныеJson_V2_0

    Сервисы.ПолучитьИдентификаторы([
        ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, 
        ДанныеОбъекта["МестоРаботы"] как Организации.Ссылка
    ])

    знч ДанныеВJson = новый ДанныеJson_V2_0((ДанныеОбъекта["Ссылка"] как ЗапросСправкиСМестаРаботы.Ссылка).Ид.ВСтроку())
    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата
    ДанныеВJson.personID    = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.employerID  = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["МестоРаботы"] как Организации.Ссылка)
    ДанныеВJson.purpose = (ДанныеОбъекта["Назначение"] как Строка?) ?? ""
    ДанныеВJson.note = (ДанныеОбъекта["Комментарий"] как Строка?) ?? "" 
    если ДанныеОбъекта["ВидСправки"] != Неопределено
        ДанныеВJson.certificateTypeID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ВидСправки"] как ВидыПроизвольныхСправок.Ссылка)
    ;
    Сервер.ЗаполнитьПолучениеДокументаJson(ДанныеВJson, ДанныеОбъекта)
    
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_0(
        ДанныеОбъекта["Ссылка"] как ЗапросСправкиСМестаРаботы.Ссылка, ДляПредставления, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.attachments = ДанныеФайлов.Вложения
    ;
    
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗапросСправкиСМестаРаботы.Ссылка))
    ;

    возврат ДанныеВJson
;

метод ДанныеЗапросаСправкиВJson_V2_1(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево): ДанныеJson_V2_1

    Сервисы.ПолучитьИдентификаторы([
        ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, 
        ДанныеОбъекта["МестоРаботы"] как Организации.Ссылка
    ])

    знч ДанныеВJson = новый ДанныеJson_V2_1((ДанныеОбъекта["Ссылка"] как ЗапросСправкиСМестаРаботы.Ссылка).Ид.ВСтроку())
    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата
    ДанныеВJson.personID    = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.employerID  = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["МестоРаботы"] как Организации.Ссылка)
    ДанныеВJson.purpose = (ДанныеОбъекта["Назначение"] как Строка?) ?? ""
    ДанныеВJson.note = (ДанныеОбъекта["Комментарий"] как Строка?) ?? "" 
    если ДанныеОбъекта["ВидСправки"] != Неопределено
        ДанныеВJson.certificateTypeID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ВидСправки"] как ВидыПроизвольныхСправок.Ссылка)
    ;
    Сервер.ЗаполнитьПолучениеДокументаJson(ДанныеВJson, ДанныеОбъекта)
    
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_1(
        ДанныеОбъекта["Ссылка"] как ЗапросСправкиСМестаРаботы.Ссылка, ДляПредставления, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.attachments = ДанныеФайлов.Вложения
    ;
    
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗапросСправкиСМестаРаботы.Ссылка))
    ;

    возврат ДанныеВJson
;

@ВПодсистеме
метод ПослеПодписания(Документ: ЗапросСправкиСМестаРаботы.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего)
    если ДанныеСогласующего.Роль == Согласования.РольПодписантаИсполнитель()
        СостДокументов.УстановитьСостояниеДокумента(Документ, СостоянияДокумента.Выполнен)
        возврат
    ;
    
    знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Документ, "ФизическоеЛицо")
    
    исп Транзакции.Начать()
    ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Документ, Истина)
    РегистрацияИзменений.ЗарегистрироватьИзменение(Документ, ФизическоеЛицо)
    СогласованияДокументов.ЗарегистрироватьПодписиОтправляемогоДокумента(Документ, Истина)
;

//КонецОбласти

//Область СлужебныеПроцедурыИФункции

@ВПодсистеме
метод ФизическиеЛицаДокументов(Документы: ЧитаемыйМассив<ЗапросСправкиСМестаРаботы.Ссылка>): ЧитаемоеСоответствие<ЗапросСправкиСМестаРаботы.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч ФизическиеЛицаДокументов: Соответствие<ЗапросСправкиСМестаРаботы.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ФизическоеЛицо
        ИЗ
            ЗапросСправкиСМестаРаботы
        ГДЕ
            Ссылка в (%Документы)   
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ФизическиеЛицаДокументов.Вставить(СтрокаРезультата.Ссылка, [СтрокаРезультата.ФизическоеЛицо])    
    ;
    возврат ФизическиеЛицаДокументов
;

метод ПослеИзмененияСостоянияДополнение(Документ: ЗапросСправкиСМестаРаботы.Ссылка, Состояние: СостоянияДокумента, ПрежнееСостояние: СостоянияДокумента?)
    пер РеквизитыДокумента: ЧитаемоеСоответствие<Строка, неизвестно> = МенеджерСущности.ЗначенияРеквизитовОбъекта(Документ, ["Ссылка", "ФизическоеЛицо"])
    знч ФизическоеЛицо: ФизическиеЛица.Ссылка = РеквизитыДокумента["ФизическоеЛицо"] как ФизическиеЛица.Ссылка
    ОбщегоНазначения.ПослеИзмененияСотоянияЗаявки(Документ, Состояние, ФизическоеЛицо)

    ОтправитьУведомлениеПриИзмененииСостояния(РеквизитыДокумента, Состояние)
;

метод ОтправитьУведомлениеПриИзмененииСостояния(РеквизитыДокумента: ЧитаемоеСоответствие<Строка, Объект?>, Состояние: СостоянияДокумента)
    пер Получатель: ФизическиеЛица.Ссылка? = РеквизитыДокумента["ФизическоеЛицо"] как ФизическиеЛица.Ссылка?
    пер Тема = "Получение справки с места работы"
    пер ТекстСообщения: Строка
    если Состояние == СостоянияДокумента.Выполнен
        ТекстСообщения = "Готова справка с места работы"
    иначе если Состояние == СостоянияДокумента.ПолученОтказ
        ТекстСообщения = "Отказано в предоставлении справки с места работы"
    ;
    если не ТекстСообщения.Пусто()
        пер ДанныеУведомления = новый УведомленияСервер.ДанныеУведомления(Уведомления.ВидыУведомлений.ПерсональнаяИнформация, РеквизитыДокумента["Ссылка"] как ЗапросСправкиСМестаРаботы.Ссылка)
        пер ТекстыУведомлений = новый УведомленияСервер.ТекстыСообщений(Тема, ТекстСообщения, ТекстСообщения, ТекстСообщения)
        УведомленияСервер.ОтправитьУведомление(Получатель, ТекстыУведомлений, ДанныеУведомления)
    ;
;

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: ЗапросСправкиСМестаРаботы.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?, ТребуетсяРегистрацияИзменений: Булево)

    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, ФизическоеЛицо)
    ;
    ОбщегоНазначения.ПослеЗаписиОбъектаСЭлектоннымиДокументамиПредставлений(Ссылка, ТребуетсяРегистрацияИзменений)
;

конст ИдентификаторЗапросаСправкиПоУмолчанию = Ууид{e1857a46-98cb-4303-ad3a-c426f0d81a0f}


метод ЗапросСправкиПоУмолчанию(): ЗапросСправкиСМестаРаботы.Ссылка 
    возврат ЗапросСправкиСМестаРаботы.ПолучитьСсылку(ИдентификаторЗапросаСправкиПоУмолчанию)
;

@ВПодсистеме
метод СоздатьЗапросСправкиПоУмолчанию()
    если не МенеджерСущности.СсылкаСуществует(ЗапросСправкиПоУмолчанию())
        знч ЗапросСправкиОбъект = новый ЗапросСправкиСМестаРаботы.Объект(ИдентификаторЗапросаСправкиПоУмолчанию).Заполнить()
        ЗапросСправкиОбъект.Записать()
    ;
;

@ВПодсистеме
метод ПодписываемыйФайлаДокумента(Документ: ЗапросСправкиСМестаРаботы.Ссылка): Файлы.Ссылка?
    возврат Файлы.ЭлектронныйДокументОбъекта(Документ)    
;

@ВПодсистеме
метод ОрганизацияДокумента(Документ: ЗапросСправкиСМестаРаботы.Ссылка): Организации.Ссылка?
    знч Запрос = Запрос{
        Выбрать Первые 1
            МестоРаботы как Организация
        Из
            ЗапросСправкиСМестаРаботы
        Где
            Ссылка == %Документ
    }
    исп Результат = Запрос.Выполнить()
    возврат Результат.ЕдинственныйИлиУмолчание().Организация
;

@ВПроекте
метод ПредставленияИдентификаторовЭлектронныхДокументов(ДокументСсылка: ЗапросСправкиСМестаРаботы.Ссылка): Соответствие<Строка, Строка>
    пер ПредставленияДокументов = новый Соответствие<Строка, Строка>()
    ПредставленияДокументов.Вставить("", "")
    возврат ПредставленияДокументов
;

метод ДанныеЗапросаСправкиСМестаРаботы(ЗапросСправки: ЗапросСправкиСМестаРаботы.Ссылка): ЧитаемоеСоответствие<Строка, Объект?>
    возврат ДанныеЗапросовСправокСМестаРаботы([ЗапросСправки])[ЗапросСправки]
;

@ВПодсистеме
метод ДанныеДокументаДляПечатнойФормы(ДокументСсылка: Объект): Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>
    
    пер ДанныеДокумента = новый Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>()
    знч ДанныеЗаявления = ДанныеЗапросаСправкиСМестаРаботы(ДокументСсылка как ЗапросСправкиСМестаРаботы.Ссылка)
    если не ДанныеЗаявления.Пусто()
        пер ПоставляемыеДанные = ПредставленияДокументов.ДанныеПредставленияДокумента(ДанныеЗаявления)
        ДанныеДокумента.Вставить("", новый ШаблоныДокументовМенеджер.ДанныеПечатныхФорм(Данные = ПоставляемыеДанные))
    ;
    
    ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента)
    возврат ДанныеДокумента 
;

@ВПодсистеме
метод ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента: Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>)
    для ДанныеИдентификатора из ДанныеДокумента
        пер ПоставляемыеДанные = ДанныеИдентификатора.Значение.Данные
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаНаименование", "Заявление")
        пер Текст: Строка
        
        Текст = "Прошу выдать справку с места работы"
        пер ВидСправки = ""
        если ПоставляемыеДанные["ДанныеДокументаВидСправки"] != Неопределено
            ВидСправки = ПоставляемыеДанные["ДанныеДокументаВидСправкиПредставление"] как Строка
        ;
        если не ВидСправки.Пусто()
            Текст = "%Текст (%ВидСправки)"
        ;
        знч Назначение = ПоставляемыеДанные["ДанныеДокументаНазначение"] как Строка
        если Назначение.Пусто()
            Текст = "%Текст."
        иначе
            Текст = "%Текст для %Назначение."
        ;
        
        Текст = ПредставленияДокументов.ТекстДокументаДополненныйКомментарием(Текст, ПоставляемыеДанные["ДанныеДокументаКомментарий"] как Строка)
        
        знч ОписаниеВложений = ПрисоединенныеФайлыМенеджер.ТекстОписанияПриложенныхФайлов(ПоставляемыеДанные["ДанныеДокументаСсылка"] как ЗапросСправкиСМестаРаботы.Ссылка)
        ПоставляемыеДанные.Вставить("ДанныеДокументаВложения", ОписаниеВложений)
        Текст = ПрисоединенныеФайлыМенеджер.ТекстCОписаниемПриложенныхФайлов(Текст, ОписаниеВложений)
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаТекст", Текст)
            
    ;
;

@ВПодсистеме
метод ДанныеДокументаДляПодготовкиОписаний(СсылкаНаДокумент: Сущность.Ключ): Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>
    
    пер ДанныеДокумента = новый Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>()
    знч ДанныеЗаявления = ДанныеЗапросаСправкиСМестаРаботы(СсылкаНаДокумент как ЗапросСправкиСМестаРаботы.Ссылка)
    ДанныеДокумента.Вставить("",
        новый Согласования.ДанныеДляПодготовкиОписания(
            ДанныеЗаявления["МестоРаботы"] как Организации.Ссылка,
            ДанныеЗаявления["Дата"] как Дата,
            "Запрос справки с места работы"
        )
    )
    возврат ДанныеДокумента
;

//КонецОбласти