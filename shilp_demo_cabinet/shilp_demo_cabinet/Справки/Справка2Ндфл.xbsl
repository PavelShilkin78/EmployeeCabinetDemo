импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт Компания
импорт ВебApi
импорт КонтрольДоступа
импорт ОбменДанными
импорт УниверсальныеМеханизмы

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ЧтениеАутентифицированным(этот),
            КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот)]
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<Справка2Ндфл.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<Справка2Ндфл.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<Справка2Ндфл.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПерсонально([Элемент.ФизическоеЛицо]))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

//КонецОбласти

//Область СлужебныйПрограммныйИнтерфейс

@ВПроекте
структура ДанныеJson
    обз знч ID:             Строка
    обз знч taxYear:        Число
    обз знч incomeAmount:   Число?
    обз знч taxAmount:      Число?
    обз знч note:           Строка?
    обз знч dateCreated:    ДатаВремя?
    обз пер requestID:      Строка?
    обз пер employerID:     Строка?
    обз пер personID:       Строка?
    обз знч attachment:     МенеджерФайлов.ДанныеФайлаJson?
    обз знч document:       Файлы.ЭлектронныйДокументJson?
;

@ВПодсистеме
структура ДанныеJson_V2_0
    обз знч ID:             Строка
    обз знч taxYear:        Число
    обз знч incomeAmount:   Число?
    обз знч taxAmount:      Число?
    обз знч note:           Строка?
    обз знч dateCreated:    ДатаВремя?
    обз пер requestID:      Строка?
    обз пер employerID:     Строка?
    обз пер personID:       Строка?
    обз знч attachment:     МенеджерФайлов.ДанныеФайлаJson?
    обз знч document:       Файлы.ЭлектронныйДокументJson_V2_0?
;

@ВПодсистеме
структура ДанныеJson_V2_1
    обз знч ID:             Строка
    обз знч taxYear:        Число
    обз знч incomeAmount:   Число?
    обз знч taxAmount:      Число?
    обз знч note:           Строка?
    обз знч dateCreated:    ДатаВремя?
    обз пер requestID:      Строка?
    обз пер employerID:     Строка?
    обз пер personID:       Строка?
    обз знч attachment:     МенеджерФайлов.ДанныеФайлаJson?
    обз знч document:       Файлы.ЭлектронныйДокументJson_V2_1?
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<ДанныеJson>
    иначе если ВерсияФорматаОбмена >= Версия{2.1}
        возврат Тип<ДанныеJson_V2_1>
    иначе если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<ДанныеJson_V2_0>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<ДанныеJson>
    ;
;

@ВПроекте
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Массив<ДанныеJson>>
    иначе если ВерсияФорматаОбмена >= Версия{2.1}
        возврат Тип<Массив<ДанныеJson_V2_1>>
    иначе если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<Массив<ДанныеJson_V2_0>>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Массив<ДанныеJson>>
    ;
;

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "forms2NDFL"
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)

    исп Транзакции.Начать()

    знч Справка2Ндфл = Сервисы.ПрочитатьОбъект(ДанныеJson.ID, &Справка2Ндфл.Объект.новый(Ууид), Тип<Справка2Ндфл.Ссылка>) как Справка2Ндфл.Объект
    Справка2Ндфл.Год = ДанныеJson.taxYear
    если ДанныеJson.incomeAmount != Неопределено 
        Справка2Ндфл.Доход = ДанныеJson.incomeAmount
    ;
    если ДанныеJson.taxAmount != Неопределено
        Справка2Ндфл.Налог = ДанныеJson.taxAmount
    ;
    если ДанныеJson.note != Неопределено
        Справка2Ндфл.Комментарий = ДанныеJson.note
    ;
    если ДанныеJson.dateCreated != Неопределено
        Справка2Ндфл.Дата = ДанныеJson.dateCreated.Дата
    ;
    если ДанныеJson.requestID != Неопределено 
        Справка2Ндфл.ЗапросСправки =
            ОбменДанными.ИдентификаторыЛокальныхОбъектов([ДанныеJson.requestID], Тип<ЗапросСправки2Ндфл.Ссылка>)
                .ПолучитьИлиУмолчание(ДанныеJson.requestID) как ЗапросСправки2Ндфл.Ссылка?
        Справка2Ндфл.Владелец = Справка2Ндфл.ЗапросСправки
    иначе
        Справка2Ндфл.Владелец = ЗапросСправки2Ндфл.ЗапросСправкиПоУмолчанию()
    ;
    если ДанныеJson.employerID != Неопределено
        Справка2Ндфл.Организация = Сервисы.ПолучитьСсылку(Организации.ВнешняяСсылка(ДанныеJson.employerID)) как Организации.Ссылка 
    ;
    если ДанныеJson.personID != Неопределено
        Справка2Ндфл.ФизическоеЛицо = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID)) как ФизическиеЛица.Ссылка
    ;
    пер ФайлыДокумента: Массив<Файлы.Объект>
    если ДанныеJson.document != Неопределено
        ФайлыДокумента = Файлы.ВложенияИзJson(ДанныеJson.document, Сервисы, Справка2Ндфл.Ссылка)
        для ФайлДокумента из ФайлыДокумента
            если ФайлДокумента.ВидФайла == ВидыФайла.ЭлектронныйДокумент
                Справка2Ндфл.Файл = ФайлДокумента.Ссылка
                прервать
            ;
        ;
    иначе если ДанныеJson.attachment != Неопределено
        пер ВложениеДанныеJson = новый МенеджерФайлов.ДанныеФайлаJson(ДанныеJson.attachment.fileID,
            ДанныеJson.attachment.name, "")
        ВложениеДанныеJson.extension = ДанныеJson.attachment.extension
        ВложениеДанныеJson.size = ДанныеJson.attachment.size
        ВложениеДанныеJson.electronicDocumentID = ДанныеJson.attachment.electronicDocumentID
        ФайлыДокумента = Файлы.ВложенияИзJson([ВложениеДанныеJson], Сервисы, Справка2Ндфл.Ссылка)
        если не ФайлыДокумента.Пусто()
            Справка2Ндфл.Файл = ФайлыДокумента[0].Ссылка
            ФайлыДокумента[0].ВидФайла = ВидыФайла.ЭлектронныйДокумент
        ;
    ;
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(Справка2Ндфл, ДанныеJson.ID), Сервисы.ИнструментыМенеджераОбъекта)
    Файлы.ЗаписатьФайлыПоВладельцу(ФайлыДокумента, Справка2Ндфл.Ссылка)
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson_V2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)

    исп Транзакции.Начать()

    знч Справка2Ндфл = Сервисы.ПрочитатьОбъект(ДанныеJson.ID, &Справка2Ндфл.Объект.новый(Ууид), Тип<Справка2Ндфл.Ссылка>) как Справка2Ндфл.Объект
    Справка2Ндфл.Год = ДанныеJson.taxYear
    если ДанныеJson.incomeAmount != Неопределено 
        Справка2Ндфл.Доход = ДанныеJson.incomeAmount
    ;
    если ДанныеJson.taxAmount != Неопределено
        Справка2Ндфл.Налог = ДанныеJson.taxAmount
    ;
    если ДанныеJson.note != Неопределено
        Справка2Ндфл.Комментарий = ДанныеJson.note
    ;
    если ДанныеJson.dateCreated != Неопределено
        Справка2Ндфл.Дата = ДанныеJson.dateCreated.Дата
    ;
    если ДанныеJson.requestID != Неопределено 
        Справка2Ндфл.ЗапросСправки =
            ОбменДанными.ИдентификаторыЛокальныхОбъектов([ДанныеJson.requestID], Тип<ЗапросСправки2Ндфл.Ссылка>)
                .ПолучитьИлиУмолчание(ДанныеJson.requestID) как ЗапросСправки2Ндфл.Ссылка?
        Справка2Ндфл.Владелец = Справка2Ндфл.ЗапросСправки
    иначе
        Справка2Ндфл.Владелец = ЗапросСправки2Ндфл.ЗапросСправкиПоУмолчанию()
    ;
    если ДанныеJson.employerID != Неопределено
        Справка2Ндфл.Организация = Сервисы.ПолучитьСсылку(Организации.ВнешняяСсылка(ДанныеJson.employerID)) как Организации.Ссылка 
    ;
    если ДанныеJson.personID != Неопределено
        Справка2Ндфл.ФизическоеЛицо = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID)) как ФизическиеЛица.Ссылка
    ;
    пер ФайлыДокумента: Массив<Файлы.Объект>
    если ДанныеJson.document != Неопределено
        ФайлыДокумента = Файлы.ВложенияИзJson_V2_0(ДанныеJson.document, Сервисы, Справка2Ндфл.Ссылка)
        для ФайлДокумента из ФайлыДокумента
            если ФайлДокумента.ВидФайла == ВидыФайла.ЭлектронныйДокумент
                Справка2Ндфл.Файл = ФайлДокумента.Ссылка
                прервать
            ;
        ;
    иначе если ДанныеJson.attachment != Неопределено
        пер ВложениеДанныеJson = новый МенеджерФайлов.ДанныеФайлаJson(ДанныеJson.attachment.fileID,
            ДанныеJson.attachment.name, "")
        ВложениеДанныеJson.extension = ДанныеJson.attachment.extension
        ВложениеДанныеJson.size = ДанныеJson.attachment.size
        ВложениеДанныеJson.electronicDocumentID = ДанныеJson.attachment.electronicDocumentID
        ФайлыДокумента = Файлы.ВложенияИзJson([ВложениеДанныеJson], Сервисы, Справка2Ндфл.Ссылка)
        если не ФайлыДокумента.Пусто()
            Справка2Ндфл.Файл = ФайлыДокумента[0].Ссылка
            ФайлыДокумента[0].ВидФайла = ВидыФайла.ЭлектронныйДокумент
        ;
    ;
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(Справка2Ндфл, ДанныеJson.ID), Сервисы.ИнструментыМенеджераОбъекта)
    Файлы.ЗаписатьФайлыПоВладельцу(ФайлыДокумента, Справка2Ндфл.Ссылка)
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson_V2_1, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)

    исп Транзакции.Начать()

    знч Справка2Ндфл = Сервисы.ПрочитатьОбъект(ДанныеJson.ID, &Справка2Ндфл.Объект.новый(Ууид), Тип<Справка2Ндфл.Ссылка>) как Справка2Ндфл.Объект
    Справка2Ндфл.Год = ДанныеJson.taxYear
    если ДанныеJson.incomeAmount != Неопределено 
        Справка2Ндфл.Доход = ДанныеJson.incomeAmount
    ;
    если ДанныеJson.taxAmount != Неопределено
        Справка2Ндфл.Налог = ДанныеJson.taxAmount
    ;
    если ДанныеJson.note != Неопределено
        Справка2Ндфл.Комментарий = ДанныеJson.note
    ;
    если ДанныеJson.dateCreated != Неопределено
        Справка2Ндфл.Дата = ДанныеJson.dateCreated.Дата
    ;
    если ДанныеJson.requestID != Неопределено 
        Справка2Ндфл.ЗапросСправки =
            ОбменДанными.ИдентификаторыЛокальныхОбъектов([ДанныеJson.requestID], Тип<ЗапросСправки2Ндфл.Ссылка>)
                .ПолучитьИлиУмолчание(ДанныеJson.requestID) как ЗапросСправки2Ндфл.Ссылка?
        Справка2Ндфл.Владелец       = Справка2Ндфл.ЗапросСправки
    иначе
        Справка2Ндфл.Владелец       = ЗапросСправки2Ндфл.ЗапросСправкиПоУмолчанию()
    ;
    если ДанныеJson.employerID != Неопределено
        Справка2Ндфл.Организация = Сервисы.ПолучитьСсылку(Организации.ВнешняяСсылка(ДанныеJson.employerID)) как Организации.Ссылка 
    ;
    если ДанныеJson.personID != Неопределено
        Справка2Ндфл.ФизическоеЛицо = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID)) как ФизическиеЛица.Ссылка
    ;
    пер ФайлыДокумента: Массив<Файлы.Объект>
    если ДанныеJson.document != Неопределено
        ФайлыДокумента = Файлы.ВложенияИзJson_V2_1(ДанныеJson.document, Сервисы, Справка2Ндфл.Ссылка)
        для ФайлДокумента из ФайлыДокумента
            если ФайлДокумента.ВидФайла == ВидыФайла.ЭлектронныйДокумент
                Справка2Ндфл.Файл = ФайлДокумента.Ссылка
                Справка2Ндфл.ВариантПодписания = Файлы.ВариантПодписанияДокументаИзJson(ДанныеJson.document)
                прервать
            ;
        ;
    иначе если ДанныеJson.attachment != Неопределено
        пер ВложениеДанныеJson = новый МенеджерФайлов.ДанныеФайлаJson(ДанныеJson.attachment.fileID,
            ДанныеJson.attachment.name, "")
        ВложениеДанныеJson.extension = ДанныеJson.attachment.extension
        ВложениеДанныеJson.size = ДанныеJson.attachment.size
        ВложениеДанныеJson.electronicDocumentID = ДанныеJson.attachment.electronicDocumentID
        ФайлыДокумента = Файлы.ВложенияИзJson([ВложениеДанныеJson], Сервисы, Справка2Ндфл.Ссылка)
        если не ФайлыДокумента.Пусто()
            Справка2Ндфл.Файл = ФайлыДокумента[0].Ссылка
            ФайлыДокумента[0].ВидФайла = ВидыФайла.ЭлектронныйДокумент
        ;
    ;
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(Справка2Ндфл, ДанныеJson.ID), Сервисы.ИнструментыМенеджераОбъекта)
    Файлы.ЗаписатьФайлыПоВладельцу(ФайлыДокумента, Справка2Ндфл.Ссылка)
;

@ВПодсистеме
метод ФизическиеЛицаДокументов(Документы: ЧитаемыйМассив<Справка2Ндфл.Ссылка>): ЧитаемоеСоответствие<Справка2Ндфл.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч ФизическиеЛицаДокументов: Соответствие<Справка2Ндфл.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ФизическоеЛицо
        ИЗ
            Справка2Ндфл
        ГДЕ
            Ссылка в (%Документы)   
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ФизическиеЛицаДокументов.Вставить(СтрокаРезультата.Ссылка, [СтрокаРезультата.ФизическоеЛицо])    
    ;
    возврат ФизическиеЛицаДокументов
;

@ВПодсистеме
метод ОформленыеСправки2Ндфл(ЗапросСправки: ЗапросСправки2Ндфл.Ссылка): ЧитаемаяКоллекция<Справка2Ндфл.Ссылка>
    возврат Справки2НдфлПоЗапросам([ЗапросСправки]).ПолучитьИлиУмолчание(ЗапросСправки, <Справка2Ндфл.Ссылка>[])
;


метод Справки2НдфлПоЗапросам(ЗапросыСправок: ЧитаемаяКоллекция<ЗапросСправки2Ндфл.Ссылка>):
    ЧитаемоеСоответствие<ЗапросСправки2Ндфл.Ссылка, ЧитаемаяКоллекция<Справка2Ндфл.Ссылка>>
    знч СправкиПоЗапросам: Соответствие<ЗапросСправки2Ндфл.Ссылка, Массив<Справка2Ндфл.Ссылка>>
    знч Запрос = Запрос{
        Выбрать
            ЗапросСправки Как Запрос,
            Ссылка
        Из 
            Справка2Ндфл
        Где 
            ЗапросСправки В (%ЗапросыСправок)
        Упорядочить По
            ЗапросСправки}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        пер Справки = СправкиПоЗапросам.ПолучитьИлиУмолчание(РезультатСтрока.Запрос, <Справка2Ндфл.Ссылка>[])
        Справки.Добавить(РезультатСтрока.Ссылка)
        СправкиПоЗапросам.Вставить(РезультатСтрока.Запрос, Справки)    
    ;
    возврат СправкиПоЗапросам
;

@ВПодсистеме
метод ДанныеСправки(Справка: Справка2Ндфл.Ссылка): ЧитаемоеСоответствие<Строка, Объект?>
    знч ДанныеСправки: Соответствие<Строка, Объект?>
    знч ДанныеСправок = ДанныеСправок([Справка])
    если ДанныеСправок.СодержитКлюч(Справка)
        ДанныеСправки.ВставитьВсе(ДанныеСправок[Справка])
    ;
    возврат ДанныеСправки
;


метод ДанныеСправок(Справки: Массив<Справка2Ндфл.Ссылка>): ЧитаемоеСоответствие<Справка2Ндфл.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    пер ДанныеСправок: Соответствие<Справка2Ндфл.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ЗапросСправки,
            Дата,
            Организация,
            ФизическоеЛицо,
            Год,
            Доход,
            Налог,
            Комментарий
        Из
            Справка2Ндфл 
        Где
            Ссылка В (%Справки)}
    исп Результат = Запрос.Выполнить() 
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        ДанныеСправок.Вставить(
            РезультатСтроки[0].Ссылка,
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтроки[0], Результат))
    ;
    возврат ДанныеСправок
;

//КонецОбласти