импорт ИнтерфейсныеКомпонентыСтандартные
импорт Зарплата
импорт ВебApi
импорт Компания
импорт КонтрольДоступа
импорт ОбменДанными
импорт ОбщегоНазначения
импорт Компания::Согласования
импорт УниверсальныеМеханизмы
импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт Уведомления
импорт УниверсальныеМеханизмы::ШаблоныДокументов

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ЧтениеИРедактированиеАутентифицированным(этот)]
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ЗапросСправки2Ндфл.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ЗапросСправки2Ндфл.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ЗапросСправки2Ндфл.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ЧтениеИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПоПолномочиям(
            [Зарплата.ПолномочиеПросмотрНдфл()],
            Элемент.ФизическоеЛицо
        ))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеРедактированиеДанныхСправочниковПерсонально([Элемент.ФизическоеЛицо]))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

//КонецОбласти

// Контракт СостояниеДокументовПоставщик

@ВПроекте
@Реализация
метод ПослеЗаписиСостоянияДокумента(ТекущееЗначение: СостояниеДокументов.Объект, ПредыдущееЗначение: СостояниеДокументов.Данные, ПараметрыЗаписи: СостояниеДокументов.ПараметрыЗаписи)
    если ТекущееЗначение.Документ это ЗапросСправки2Ндфл.Ссылка
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        ЗапланированныеЗадания.Создать(&ПослеИзмененияСостоянияДополнение,
            ТекущееЗначение.Документ как ЗапросСправки2Ндфл.Ссылка, ТекущееЗначение.Состояние, ПредыдущееЗначение.Состояние)
            .Настроить(Ключ = МенеджерЗаданий.КлючЗаданияПоСсылке(ТекущееЗначение.Документ, "ИСД"))
            .ЗапланироватьВТранзакции()
    ;
;

@ВПроекте
@Реализация
метод ЗаполнитьКартинкиДокументов(ДанныеЗапросов: ЧитаемыйМассив<СостояниеДокументаКомпонентДанных>)
    для Компонент из ДанныеЗапросов
        если Компонент.Документ это ЗапросСправки2Ндфл.Ссылка 
            Компонент.Картинка = Ресурс{Справка.svg}.Ссылка
            Компонент.ЦветКартинки = БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Синий)
        ; 
    ;
;

// Конец СостояниеДокументовПоставщик

//Область СлужебныйПрограммныйИнтерфейс

@ВПодсистеме
метод ФизическиеЛицаДокументов(Документы: ЧитаемыйМассив<ЗапросСправки2Ндфл.Ссылка>): ЧитаемоеСоответствие<ЗапросСправки2Ндфл.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч ФизическиеЛицаДокументов: Соответствие<ЗапросСправки2Ндфл.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ФизическоеЛицо
        ИЗ
            ЗапросСправки2Ндфл
        ГДЕ
            Ссылка в (%Документы)   
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ФизическиеЛицаДокументов.Вставить(СтрокаРезультата.Ссылка, [СтрокаРезультата.ФизическоеЛицо])    
    ;
    возврат ФизическиеЛицаДокументов
;

@ВПодсистеме
метод ПослеПодписания(Документ: ЗапросСправки2Ндфл.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего)
    если ДанныеСогласующего.Роль == Согласования.РольПодписантаИсполнитель()
        СостДокументов.УстановитьСостояниеДокумента(Документ, СостоянияДокумента.Выполнен)
        возврат
    ;
    
    знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Документ, "ФизическоеЛицо")
    
    исп Транзакции.Начать()
    ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Документ, Истина)
    РегистрацияИзменений.ЗарегистрироватьИзменение(Документ, ФизическоеЛицо)
    СогласованияДокументов.ЗарегистрироватьПодписиОтправляемогоДокумента(Документ, Истина)
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    
    возврат {"forms2NDFLRequests": ДанныеЗаявленийВJson(Ссылки, Сервисы, ВерсияФорматаОбмена)}
;

метод ДанныеЗаявленийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ВерсияФорматаОбмена: Версия?, ДляПредставления: Булево = Ложь): Массив<Объект?>
    
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеЗапросовСправок2Ндфл(Ссылки)
        если ВерсияФорматаОбмена != Неопределено и ВерсияФорматаОбмена >= Версия{2.1}
            Данные.Добавить(ДанныеЗапросаСправкиВJson_V2_1(КлючИЗначение.Значение, Сервисы, ДляПредставления))
        иначе если ВерсияФорматаОбмена != Неопределено и ВерсияФорматаОбмена >= Версия{2.0}
            Данные.Добавить(ДанныеЗапросаСправкиВJson_V2_0(КлючИЗначение.Значение, Сервисы, ДляПредставления))
        иначе
            Данные.Добавить(ДанныеЗапросаСправкиВJson(КлючИЗначение.Значение, Сервисы, ДляПредставления))
        ;
    ;
    возврат Данные
;

@ВПроекте
метод ПолучитьДанныеJson(Ссылка: ЗапросСправки2Ндфл.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Объект?
    если Ссылка == Неопределено 
        возврат Неопределено
    ;
    возврат ГруппаИзмененийВJson([Ссылка], Сервисы, ВерсияФорматаОбмена)["forms2NDFLRequests"] 
;

структура ДанныеJson
    обз знч ID: Строка
    обз знч purpose: form2NDFLRequestPurpose
    обз знч periodType: form2NDFLRequestPeriodType
    пер personID: Строка
    пер employerID: Строка
    пер dateCreated: Дата?
    пер taxYear: Число?
    пер proofPeriod: Число?
    пер incomePeriodStartDate: Дата?
    пер incomePeriodEndDate: Дата?
    пер note: Строка?
    пер obtainingMode: Сервер.ВариантыПолученияДокументаJson?
    пер copiesNumber: Число?
    пер sendEmail: Булево?
    пер addressEmail: Строка?
    пер attachments: Массив<МенеджерФайлов.ДанныеФайлаJson>
    пер document: Файлы.ЭлектронныйДокументJson?
    пер version: Число?
;

структура ДанныеJson_V2_0
    обз знч ID: Строка
    обз знч purpose: form2NDFLRequestPurpose
    обз знч periodType: form2NDFLRequestPeriodType
    пер personID: Строка
    пер employerID: Строка
    пер dateCreated: Дата?
    пер taxYear: Число?
    пер proofPeriod: Число?
    пер incomePeriodStartDate: Дата?
    пер incomePeriodEndDate: Дата?
    пер note: Строка?
    пер obtainingMode: Сервер.ВариантыПолученияДокументаJson?
    пер copiesNumber: Число?
    пер sendEmail: Булево?
    пер addressEmail: Строка?
    пер attachments: Массив<МенеджерФайлов.ДанныеФайлаJson>
    пер document: Файлы.ЭлектронныйДокументJson_V2_0?
    пер version: Число?
;

структура ДанныеJson_V2_1
    обз знч ID: Строка
    обз знч purpose: form2NDFLRequestPurpose
    обз знч periodType: form2NDFLRequestPeriodType
    пер personID: Строка
    пер employerID: Строка
    пер dateCreated: Дата?
    пер taxYear: Число?
    пер proofPeriod: Число?
    пер incomePeriodStartDate: Дата?
    пер incomePeriodEndDate: Дата?
    пер note: Строка?
    пер obtainingMode: Сервер.ВариантыПолученияДокументаJson?
    пер copiesNumber: Число?
    пер sendEmail: Булево?
    пер addressEmail: Строка?
    пер attachments: Массив<МенеджерФайлов.ДанныеФайлаJson>
    пер document: Файлы.ЭлектронныйДокументJson_V2_1?
    пер version: Число?
;

перечисление form2NDFLRequestPurpose
    incomeProof,
    declare
;

метод НазначениеСправок2НдфлВJson(): ЧитаемоеСоответствие<НазначениеСправок2Ндфл, form2NDFLRequestPurpose>
    возврат {
        НазначениеСправок2Ндфл.ДекларированиеДоходов: form2NDFLRequestPurpose.declare,
        НазначениеСправок2Ндфл.ПодтверждениеДоходов: form2NDFLRequestPurpose.incomeProof
    }
;

перечисление form2NDFLRequestPeriodType
    year,
    monthsCount
;

метод ВидыПериодовСправок2НдфлВJson(): ЧитаемоеСоответствие<ВидПериодаСправки2Ндфл, form2NDFLRequestPeriodType>
    возврат {
        ВидПериодаСправки2Ндфл.Год: form2NDFLRequestPeriodType.year,
        ВидПериодаСправки2Ндфл.КоличествоПоследнихМесяцев: form2NDFLRequestPeriodType.monthsCount
    }
;

@ВПроекте
структура ОтветНаЗапросСправки2НдфлДанныеJson
    обз пер requestID: Строка?
    обз пер employerID: Строка
    обз пер personID: Строка
    пер forms2NDFL: Массив<Справка2Ндфл.ДанныеJson>?
;

@ВПроекте
структура ОтветНаЗапросСправки2НдфлДанныеJson_V2_0
    обз пер requestID: Строка?
    обз пер employerID: Строка
    обз пер personID: Строка
    пер forms2NDFL: Массив<Справка2Ндфл.ДанныеJson_V2_0>?
;

@ВПроекте
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Массив<ОтветНаЗапросСправки2НдфлДанныеJson>>
    иначе если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<Массив<ОтветНаЗапросСправки2НдфлДанныеJson_V2_0>>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Массив<ОтветНаЗапросСправки2НдфлДанныеJson>>
    ;
;

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "forms2NDFL"
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ОтветНаЗапросСправки2НдфлДанныеJson, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    
    исп Транзакции.Начать()
    знч ЗапросСправки = ОбменДанными.ИдентификаторыЛокальныхОбъектов([ДанныеJson.requestID], Тип<ЗапросСправки2Ндфл.Ссылка>)
                        .ПолучитьИлиУмолчание(ДанныеJson.requestID)
    ВебApiСервер.УдалитьЭлементыСправочникаПоКлючу("Справка2Ндфл", {"ЗапросСправки": ЗапросСправки}, Истина)
    если ДанныеJson.forms2NDFL != Неопределено
        для Элемент из ДанныеJson.forms2NDFL
            если Элемент.employerID == Неопределено
                Элемент.employerID = ДанныеJson.employerID
            ;
            если Элемент.personID == Неопределено
                Элемент.personID = ДанныеJson.personID
            ;
            если Элемент.requestID == Неопределено
                Элемент.requestID = ДанныеJson.requestID
            ;
            Справка2Ндфл.ЗагрузитьОбъектИзJson(Элемент, Сервисы)
        ;
    ;
;

метод ДанныеЗапросаСправкиВJson(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево): ДанныеJson
    
    знч ДанныеВJson = новый ДанныеJson(
        (ДанныеОбъекта["Ссылка"] как ЗапросСправки2Ндфл.Ссылка).Ид.ВСтроку(),
        НазначениеСправок2НдфлВJson()[ДанныеОбъекта["Назначение"] как НазначениеСправок2Ндфл],
        ВидыПериодовСправок2НдфлВJson()[ДанныеОбъекта["ВидПериода"] как ВидПериодаСправки2Ндфл])
    
    Сервисы.ПолучитьИдентификаторы([
        ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, 
        ДанныеОбъекта["Организация"] как Организации.Ссылка
    ])

    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.employerID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Организация"] как Организации.Ссылка)

    если ДанныеОбъекта["ВидПериода"] == ВидПериодаСправки2Ндфл.Год
        ДанныеВJson.taxYear = ДанныеОбъекта["Год"] как Число
    иначе если ДанныеОбъекта["ВидПериода"] == ВидПериодаСправки2Ндфл.КоличествоПоследнихМесяцев
        ДанныеВJson.proofPeriod = ДанныеОбъекта["КоличествоМесяцев"] как Число
    ;
    ДанныеВJson.note = ДанныеОбъекта["Комментарий"] как Строка
    если ДанныеОбъекта["Назначение"] == НазначениеСправок2Ндфл.ПодтверждениеДоходов
        ДанныеВJson.incomePeriodStartDate = ДанныеОбъекта["МесяцНачалаПериодаПодтвержденияДохода"] как Дата?
        ДанныеВJson.incomePeriodEndDate = ДанныеОбъекта["МесяцОкончанияПериодаПодтвержденияДохода"] как Дата?
    ;
    Сервер.ЗаполнитьПолучениеДокументаJson(ДанныеВJson, ДанныеОбъекта)
    
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson(
        ДанныеОбъекта["Ссылка"] как ЗапросСправки2Ндфл.Ссылка, ДляПредставления, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.attachments = ДанныеФайлов.Вложения
    ;
    
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗапросСправки2Ндфл.Ссылка))
    ;
    
    возврат ДанныеВJson 
;

метод ДанныеЗапросаСправкиВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево): ДанныеJson_V2_0
    
    знч ДанныеВJson = новый ДанныеJson_V2_0(
        (ДанныеОбъекта["Ссылка"] как ЗапросСправки2Ндфл.Ссылка).Ид.ВСтроку(),
        НазначениеСправок2НдфлВJson()[ДанныеОбъекта["Назначение"] как НазначениеСправок2Ндфл],
        ВидыПериодовСправок2НдфлВJson()[ДанныеОбъекта["ВидПериода"] как ВидПериодаСправки2Ндфл])
    
    Сервисы.ПолучитьИдентификаторы([
        ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, 
        ДанныеОбъекта["Организация"] как Организации.Ссылка
    ])

    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.employerID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Организация"] как Организации.Ссылка)

    если ДанныеОбъекта["ВидПериода"] == ВидПериодаСправки2Ндфл.Год
        ДанныеВJson.taxYear = ДанныеОбъекта["Год"] как Число
    иначе если ДанныеОбъекта["ВидПериода"] == ВидПериодаСправки2Ндфл.КоличествоПоследнихМесяцев
        ДанныеВJson.proofPeriod = ДанныеОбъекта["КоличествоМесяцев"] как Число
    ;
    ДанныеВJson.note = ДанныеОбъекта["Комментарий"] как Строка
    если ДанныеОбъекта["Назначение"] == НазначениеСправок2Ндфл.ПодтверждениеДоходов
        ДанныеВJson.incomePeriodStartDate = ДанныеОбъекта["МесяцНачалаПериодаПодтвержденияДохода"] как Дата?
        ДанныеВJson.incomePeriodEndDate = ДанныеОбъекта["МесяцОкончанияПериодаПодтвержденияДохода"] как Дата?
    ;
    Сервер.ЗаполнитьПолучениеДокументаJson(ДанныеВJson, ДанныеОбъекта)
    
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_0(
        ДанныеОбъекта["Ссылка"] как ЗапросСправки2Ндфл.Ссылка, ДляПредставления, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.attachments = ДанныеФайлов.Вложения
    ;
    
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗапросСправки2Ндфл.Ссылка))
    ;
    
    возврат ДанныеВJson 
;

метод ДанныеЗапросаСправкиВJson_V2_1(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево): ДанныеJson_V2_1
    
    знч ДанныеВJson = новый ДанныеJson_V2_1(
        (ДанныеОбъекта["Ссылка"] как ЗапросСправки2Ндфл.Ссылка).Ид.ВСтроку(),
        НазначениеСправок2НдфлВJson()[ДанныеОбъекта["Назначение"] как НазначениеСправок2Ндфл],
        ВидыПериодовСправок2НдфлВJson()[ДанныеОбъекта["ВидПериода"] как ВидПериодаСправки2Ндфл])
    
    Сервисы.ПолучитьИдентификаторы([
        ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, 
        ДанныеОбъекта["Организация"] как Организации.Ссылка
    ])

    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.employerID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Организация"] как Организации.Ссылка)

    если ДанныеОбъекта["ВидПериода"] == ВидПериодаСправки2Ндфл.Год
        ДанныеВJson.taxYear = ДанныеОбъекта["Год"] как Число
    иначе если ДанныеОбъекта["ВидПериода"] == ВидПериодаСправки2Ндфл.КоличествоПоследнихМесяцев
        ДанныеВJson.proofPeriod = ДанныеОбъекта["КоличествоМесяцев"] как Число
    ;
    ДанныеВJson.note = ДанныеОбъекта["Комментарий"] как Строка
    если ДанныеОбъекта["Назначение"] == НазначениеСправок2Ндфл.ПодтверждениеДоходов
        ДанныеВJson.incomePeriodStartDate = ДанныеОбъекта["МесяцНачалаПериодаПодтвержденияДохода"] как Дата?
        ДанныеВJson.incomePeriodEndDate = ДанныеОбъекта["МесяцОкончанияПериодаПодтвержденияДохода"] как Дата?
    ;
    Сервер.ЗаполнитьПолучениеДокументаJson(ДанныеВJson, ДанныеОбъекта)
    
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_1(
        ДанныеОбъекта["Ссылка"] как ЗапросСправки2Ндфл.Ссылка, ДляПредставления, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.attachments = ДанныеФайлов.Вложения
    ;
    
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗапросСправки2Ндфл.Ссылка))
    ;
    
    возврат ДанныеВJson 
;

метод ДанныеЗапросовСправок2Ндфл(ЗапросыСправок: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): 
        ЧитаемоеСоответствие<ЗапросСправки2Ндфл.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    
    знч ДанныеЗапросов: Соответствие<ЗапросСправки2Ндфл.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Запросы: Массив<ЗапросСправки2Ндфл.Ссылка>
    для Запрос из ЗапросыСправок
        Запросы.Добавить(Запрос как ЗапросСправки2Ндфл.Ссылка)
    ;
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Дата,
            ФизическоеЛицо,
            Организация,
            Назначение,
            ВидПериода,
            Год,
            КоличествоМесяцев,
            ПериодПодтвержденияДохода,
            МесяцНачалаПериодаПодтвержденияДохода,
            МесяцОкончанияПериодаПодтвержденияДохода,
            Комментарий,
            ВариантПолученияДокумента,
            КоличествоЭкземпляров,
            ОтправитьНаЭлектроннуюПочту,
            ЭлектроннаяПочта
        Из
            ЗапросСправки2Ндфл
        Где
            Ссылка В (%Запросы) 
            И ФизическоеЛицо != Неопределено
            И Организация != Неопределено}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        ДанныеЗапросов.Вставить(
            РезультатСтрока.Ссылка,
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат))
    ;
            
    возврат ДанныеЗапросов
;

метод ДанныеСправокЗапроса(
        ДанныеВсехСправок: ЧитаемоеСоответствие<Справка2Ндфл.Ссылка, 
        ЧитаемоеСоответствие<Строка, Объект?>>, 
        Запрос: ЗапросСправки2Ндфл.Ссылка, 
        СправкиПоЗапросам: ЧитаемоеСоответствие<ЗапросСправки2Ндфл.Ссылка, 
        ЧитаемаяКоллекция<Справка2Ндфл.Ссылка>>): ЧитаемаяКоллекция<ЧитаемоеСоответствие<Строка, Объект?>>
    
    знч ДанныеСправок: Массив<ЧитаемоеСоответствие<Строка, Объект?>>
    если не СправкиПоЗапросам.СодержитКлюч(Запрос)
        возврат ДанныеСправок
    ;
    для Справка из СправкиПоЗапросам.Получить(Запрос)
        ДанныеСправок.Добавить(ДанныеВсехСправок[Справка])
    ;
    возврат ДанныеСправок
;

//КонецОбласти

//Область СлужебныеПроцедурыИФункции


метод ПослеИзмененияСостоянияДополнение(Документ: ЗапросСправки2Ндфл.Ссылка, Состояние: СостоянияДокумента, ПрежнееСостояние: СостоянияДокумента?)
    пер РеквизитыДокумента = МенеджерСущности.ЗначенияРеквизитовОбъекта(Документ, ["Ссылка", "ФизическоеЛицо"])

    знч ФизическоеЛицо: ФизическиеЛица.Ссылка = РеквизитыДокумента["ФизическоеЛицо"] как ФизическиеЛица.Ссылка
    ОбщегоНазначения.ПослеИзмененияСотоянияЗаявки(Документ, Состояние, ФизическоеЛицо)

    ОтправитьУведомлениеПриИзмененииСостояния(РеквизитыДокумента, Состояние)
;

метод ОтправитьУведомлениеПриИзмененииСостояния(РеквизитыДокумента: ЧитаемоеСоответствие<Строка, неизвестно>, Состояние: СостоянияДокумента)
    пер ТекстСообщения: Строка
    выбор Состояние
    когда Выполнен
        ТекстСообщения = "Готова справка 2-НДФЛ"
    когда ПолученОтказ
        ТекстСообщения = "Отказано в предоставлении справки 2-НДФЛ"
    ;
    если не ТекстСообщения.Пусто()
        пер ДанныеУведомления = новый УведомленияСервер.ДанныеУведомления(Уведомления.ВидыУведомлений.ПерсональнаяИнформация, РеквизитыДокумента["Ссылка"]) 
        пер Тема = "Запрос справки 2-НДФЛ"
        пер ТекстыУведомлений = новый УведомленияСервер.ТекстыСообщений(Тема, ТекстСообщения, ТекстСообщения, ТекстСообщения)
        пер Получатель: ФизическиеЛица.Ссылка? = РеквизитыДокумента["ФизическоеЛицо"]
        УведомленияСервер.ОтправитьУведомление(Получатель, ТекстыУведомлений, ДанныеУведомления)
    ;
;

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: ЗапросСправки2Ндфл.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?, ТребуетсяРегистрацияИзменений: Булево)

    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, ФизическоеЛицо)
    ;
    ОбщегоНазначения.ПослеЗаписиОбъектаСЭлектоннымиДокументамиПредставлений(Ссылка, ТребуетсяРегистрацияИзменений)
;

//КонецОбласти

конст ИдентификаторЗапросаСправкиПоУмолчанию = Ууид{9eaa7e64-2beb-421d-82b5-4f8951e960b5}

@ВПодсистеме
метод ЗапросСправкиПоУмолчанию(): ЗапросСправки2Ндфл.Ссылка 
    возврат ЗапросСправки2Ндфл.ПолучитьСсылку(ИдентификаторЗапросаСправкиПоУмолчанию)
;

@ВПодсистеме
метод СоздатьЗапросСправкиПоУмолчанию()
    если не МенеджерСущности.СсылкаСуществует(ЗапросСправкиПоУмолчанию())
        знч ЗапросСправкиОбъект = новый ЗапросСправки2Ндфл.Объект(ИдентификаторЗапросаСправкиПоУмолчанию).Заполнить()
        ЗапросСправкиОбъект.Записать()
    ;
;

@ВПодсистеме
метод ПодписываемыйФайлаДокумента(Документ: ЗапросСправки2Ндфл.Ссылка): Файлы.Ссылка?
    возврат Файлы.ЭлектронныйДокументОбъекта(Документ)    
;

@ВПодсистеме
метод ОрганизацияДокумента(Документ: ЗапросСправки2Ндфл.Ссылка): Организации.Ссылка?
    знч Запрос = Запрос{
        Выбрать Первые 1
            Организация
        Из
            ЗапросСправки2Ндфл
        Где
            Ссылка == %Документ
    }
    исп Результат = Запрос.Выполнить()
    возврат Результат.ЕдинственныйИлиУмолчание().Организация
;

@ВПроекте
метод ПредставленияИдентификаторовЭлектронныхДокументов(ДокументСсылка: ЗапросСправки2Ндфл.Ссылка): Соответствие<Строка, Строка>
    пер ПредставленияДокументов = новый Соответствие<Строка, Строка>()
    ПредставленияДокументов.Вставить("", "")
    возврат ПредставленияДокументов
;

метод ДанныеЗапросаСправки2Ндфл(ЗапросСправки: ЗапросСправки2Ндфл.Ссылка): ЧитаемоеСоответствие<Строка, Объект?>
    возврат ДанныеЗапросовСправок2Ндфл([ЗапросСправки])[ЗапросСправки]
;

@ВПодсистеме
метод ДанныеДокументаДляПечатнойФормы(ДокументСсылка: Объект): Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>
    
    пер ДанныеДокумента = новый Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>()
    знч ДанныеЗаявления = ДанныеЗапросаСправки2Ндфл(ДокументСсылка как ЗапросСправки2Ндфл.Ссылка)
    если не ДанныеЗаявления.Пусто()
        пер ПоставляемыеДанные = ПредставленияДокументов.ДанныеПредставленияДокумента(ДанныеЗаявления)
        ДанныеДокумента.Вставить("", новый ШаблоныДокументовМенеджер.ДанныеПечатныхФорм(Данные = ПоставляемыеДанные))
    ;
    ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента)
    возврат ДанныеДокумента 
;

@ВПодсистеме
метод ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента: Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>)
    для ДанныеИдентификатора из ДанныеДокумента
        пер ПоставляемыеДанные = ДанныеИдентификатора.Значение.Данные
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаНаименование", "Заявление")
        пер Текст: Строка
        
        пер ПериодСправки = ""
        если (ПоставляемыеДанные["ДанныеДокументаНазначение"] как НазначениеСправок2Ндфл) == НазначениеСправок2Ндфл.ДекларированиеДоходов
            знч ГодСтрокой = ПоставляемыеДанные["ДанныеДокументаГод"].ВСтроку()
            ПериодСправки = "%ГодСтрокой год"
        иначе
            если (ПоставляемыеДанные["ДанныеДокументаПериодПодтвержденияДохода"] как ВидПериодаПодтвержденияДохода) == ВидПериодаПодтвержденияДохода.Произвольный
                знч Начало = МенеджерДат.ФорматДаты(ПоставляемыеДанные["ДанныеДокументаМесяцНачалаПериодаПодтвержденияДохода"] как Дата, "ММММ гггг")
                знч Окончание = МенеджерДат.ФорматДаты(ПоставляемыеДанные["ДанныеДокументаМесяцОкончанияПериодаПодтвержденияДохода"] как Дата, "ММММ гггг")
                ПериодСправки = "период с %Начало по %Окончание"
            иначе
                ПериодСправки = ПоставляемыеДанные["ДанныеДокументаПериодПодтвержденияДохода"].Представление().ВНижнийРегистр()
            ;
        ;
        ПоставляемыеДанные.Вставить("ДанныеДокументаПериодСправки", ПериодСправки)
        знч Назначение = (ПоставляемыеДанные["ДанныеДокументаНазначение"] как НазначениеСправок2Ндфл).Представление().ВНижнийРегистр()
        ПоставляемыеДанные.Вставить("ДанныеДокументаНазначение", Назначение)
        Текст = "Прошу выдать справку о доходах за %ПериодСправки, назначение: %Назначение."
         
        Текст = ПредставленияДокументов.ТекстДокументаДополненныйКомментарием(Текст, ПоставляемыеДанные["ДанныеДокументаКомментарий"] как Строка)
        
        знч ОписаниеВложений = ПрисоединенныеФайлыМенеджер.ТекстОписанияПриложенныхФайлов(ПоставляемыеДанные["ДанныеДокументаСсылка"] как ЗапросСправки2Ндфл.Ссылка)
        ПоставляемыеДанные.Вставить("ДанныеДокументаВложения", ОписаниеВложений)
        Текст = ПрисоединенныеФайлыМенеджер.ТекстCОписаниемПриложенныхФайлов(Текст, ОписаниеВложений)
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаТекст", Текст)
            
    ;
;

@ВПодсистеме
метод ДанныеДокументаДляПодготовкиОписаний(СсылкаНаДокумент: Сущность.Ключ): Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>
    
    пер ДанныеДокумента = новый Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>()
    знч ДанныеЗаявления = ДанныеЗапросаСправки2Ндфл(СсылкаНаДокумент как ЗапросСправки2Ндфл.Ссылка)
    ДанныеДокумента.Вставить("",
        новый Согласования.ДанныеДляПодготовкиОписания(
            ДанныеЗаявления["Организация"] как Организации.Ссылка,
            ДанныеЗаявления["Дата"] как Дата,
            "Заявление на получение справки 2-НДФЛ"
        )
    )
    возврат ДанныеДокумента
;
