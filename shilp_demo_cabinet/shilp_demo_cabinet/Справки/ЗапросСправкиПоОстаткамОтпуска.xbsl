импорт ИнтерфейсныеКомпонентыСтандартные
импорт ВебApi
импорт КонтрольДоступа
импорт ОбменДанными
импорт ОбщегоНазначения
импорт Компания::Согласования
импорт УниверсальныеМеханизмы
импорт ОбщиеСтандартные
импорт Отпуск
импорт ФизическиеЛица
импорт Уведомления
импорт УниверсальныеМеханизмы::ШаблоныДокументов

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ЧтениеИРедактированиеАутентифицированным(этот)]
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ЗапросСправкиПоОстаткамОтпуска.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ЗапросСправкиПоОстаткамОтпуска.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ЗапросСправкиПоОстаткамОтпуска.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ЧтениеИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПоПолномочиям(
            [Отпуск.ПолномочиеПросмотрОтпусков()],
            Элемент.ФизическоеЛицо
        ))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеРедактированиеДанныхСправочниковПерсонально([Элемент.ФизическоеЛицо]))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

//КонецОбласти

// Контракт СостояниеДокументовПоставщик

@ВПроекте
@Реализация
метод ПослеЗаписиСостоянияДокумента(ТекущееЗначение: СостояниеДокументов.Объект, ПредыдущееЗначение: СостояниеДокументов.Данные, ПараметрыЗаписи: СостояниеДокументов.ПараметрыЗаписи)
    если ТекущееЗначение.Документ это ЗапросСправкиПоОстаткамОтпуска.Ссылка
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        ЗапланированныеЗадания.Создать(&ПослеИзмененияСостоянияДополнение,
            ТекущееЗначение.Документ как ЗапросСправкиПоОстаткамОтпуска.Ссылка, ТекущееЗначение.Состояние, ПредыдущееЗначение.Состояние)
            .Настроить(Ключ = МенеджерЗаданий.КлючЗаданияПоСсылке(ТекущееЗначение.Документ, "ИСД"))
            .ЗапланироватьВТранзакции()
    ;
;

@ВПроекте
@Реализация
метод ЗаполнитьКартинкиДокументов(ДанныеЗапросов: ЧитаемыйМассив<СостояниеДокументаКомпонентДанных>)
    для Компонент из ДанныеЗапросов
        если Компонент.Документ это ЗапросСправкиПоОстаткамОтпуска.Ссылка
            Компонент.Картинка = Ресурс{Справка.svg}.Ссылка
            Компонент.ЦветКартинки = БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Оранжевый)
        ; 
    ;
;

// Конец СостояниеДокументовПоставщик

//Область СлужебныйПрограммныйИнтерфейс

@ВПодсистеме
метод ФизическиеЛицаДокументов(Документы: ЧитаемыйМассив<ЗапросСправкиПоОстаткамОтпуска.Ссылка>): ЧитаемоеСоответствие<ЗапросСправкиПоОстаткамОтпуска.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч ФизическиеЛицаДокументов: Соответствие<ЗапросСправкиПоОстаткамОтпуска.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ФизическоеЛицо
        ИЗ
            ЗапросСправкиПоОстаткамОтпуска
        ГДЕ
            Ссылка в (%Документы)   
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ФизическиеЛицаДокументов.Вставить(СтрокаРезультата.Ссылка, [СтрокаРезультата.ФизическоеЛицо])    
    ;
    возврат ФизическиеЛицаДокументов
;

@ВПодсистеме
метод ПослеПодписания(Документ: ЗапросСправкиПоОстаткамОтпуска.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего)
    если ДанныеСогласующего.Роль == Согласования.РольПодписантаИсполнитель()
        СостДокументов.УстановитьСостояниеДокумента(Документ, СостоянияДокумента.Выполнен)
        возврат
    ;
;

//Область JSON

структура ДанныеJson
    обз знч ID: Строка
    пер personID: Строка
    пер dateCreated: Дата?
    пер obtainingMode: Сервер.ВариантыПолученияДокументаJson?
    пер copiesNumber: Число?
    пер sendEmail: Булево?
    пер addressEmail: Строка?
    пер attachments: Массив<МенеджерФайлов.ДанныеФайлаJson>
    пер version: Число?
;

структура ДанныеJson_V1_2
    обз знч ID: Строка
    пер personID: Строка
    пер dateCreated: Дата?
    пер obtainingMode: Сервер.ВариантыПолученияДокументаJson?
    пер copiesNumber: Число?
    пер sendEmail: Булево?
    пер addressEmail: Строка?
    пер attachments: Массив<МенеджерФайлов.ДанныеФайлаJson>
    пер document: Файлы.ЭлектронныйДокументJson?
    пер version: Число?
;

структура ДанныеJson_V2_0
    обз знч ID: Строка
    пер personID: Строка
    пер dateCreated: Дата?
    пер obtainingMode: Сервер.ВариантыПолученияДокументаJson?
    пер copiesNumber: Число?
    пер sendEmail: Булево?
    пер addressEmail: Строка?
    пер attachments: Массив<МенеджерФайлов.ДанныеФайлаJson>
    пер document: Файлы.ЭлектронныйДокументJson_V2_0?
    пер version: Число?
;

структура ДанныеJson_V2_1
    обз знч ID: Строка
    пер personID: Строка
    пер dateCreated: Дата?
    пер obtainingMode: Сервер.ВариантыПолученияДокументаJson?
    пер copiesNumber: Число?
    пер sendEmail: Булево?
    пер addressEmail: Строка?
    пер attachments: Массив<МенеджерФайлов.ДанныеФайлаJson>
    пер document: Файлы.ЭлектронныйДокументJson_V2_1?
    пер version: Число?
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"vacationBalanceRequests": ДанныеЗаявленийВJson(Ссылки, Сервисы, ВерсияФорматаОбмена)}
;

метод ДанныеЗаявленийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?, ДляПредставления: Булево = Ложь): Массив<Объект?>
    знч Данные: Массив<Объект?>

    для КлючИЗначение из ДанныеЗапросовСправок(Ссылки)
        если ВерсияФорматаОбмена == Неопределено
            Данные.Добавить(ДанныеЗапросаСправкиВJson(КлючИЗначение.Значение, Сервисы, ДляПредставления))
        иначе если ВерсияФорматаОбмена >= Версия{2.1}
            Данные.Добавить(ДанныеЗапросаСправкиВJson_V2_1(КлючИЗначение.Значение, Сервисы, ДляПредставления))
        иначе если ВерсияФорматаОбмена >= Версия{2.0}
            Данные.Добавить(ДанныеЗапросаСправкиВJson_V2_0(КлючИЗначение.Значение, Сервисы, ДляПредставления))
        иначе если ВерсияФорматаОбмена >= Версия{1.2}
            Данные.Добавить(ДанныеЗапросаСправкиВJson_V1_2(КлючИЗначение.Значение, Сервисы, ДляПредставления))
        иначе если ВерсияФорматаОбмена >= Версия{1.0}
            Данные.Добавить(ДанныеЗапросаСправкиВJson(КлючИЗначение.Значение, Сервисы, ДляПредставления))
        ;
    ;
    возврат Данные
;

@ВПроекте
метод ПолучитьДанныеJson(Ссылка: ЗапросСправкиПоОстаткамОтпуска.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<Объект?>?
    если Ссылка == Неопределено 
        возврат Неопределено
    ;
    возврат ГруппаИзмененийВJson([Ссылка], Сервисы, ВерсияФорматаОбмена)["vacationBalanceRequests"]  
;

метод ДанныеЗапросовСправок(ЗапросыСправок: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): 
            ЧитаемоеСоответствие<ЗапросСправкиПоОстаткамОтпуска.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>

    знч Запросы: Массив<ЗапросСправкиПоОстаткамОтпуска.Ссылка>
    для Запрос из ЗапросыСправок
        Запросы.Добавить(Запрос как ЗапросСправкиПоОстаткамОтпуска.Ссылка)
    ;
    знч ДанныеЗапросов: Соответствие<ЗапросСправкиПоОстаткамОтпуска.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Дата,
            ФизическоеЛицо,
            ВариантПолученияДокумента,
            КоличествоЭкземпляров,
            ОтправитьНаЭлектроннуюПочту,
            ЭлектроннаяПочта
        Из
            ЗапросСправкиПоОстаткамОтпуска
        Где
            Ссылка В (%Запросы) 
            И ФизическоеЛицо != Неопределено}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        ДанныеЗапросов.Вставить(РезультатСтрока.Ссылка, МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат))
    ;
    возврат ДанныеЗапросов
;

метод ДанныеЗапросаСправкиВJson(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ДляПредставления: Булево): ДанныеJson

    знч ДанныеВJson = новый ДанныеJson(
        (ДанныеОбъекта["Ссылка"] как ЗапросСправкиПоОстаткамОтпуска.Ссылка).Ид.ВСтроку())
    
    Сервисы.ПолучитьИдентификаторы([
        ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка
    ])

    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    Сервер.ЗаполнитьПолучениеДокументаJson(ДанныеВJson, ДанныеОбъекта)
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗапросСправкиПоОстаткамОтпуска.Ссылка))
    ;
    возврат ДанныеВJson
;

метод ДанныеЗапросаСправкиВJson_V1_2(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ДляПредставления: Булево): ДанныеJson_V1_2

    знч ДанныеВJson = новый ДанныеJson_V1_2(
        (ДанныеОбъекта["Ссылка"] как ЗапросСправкиПоОстаткамОтпуска.Ссылка).Ид.ВСтроку())
    
    Сервисы.ПолучитьИдентификаторы([
        ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка
    ])

    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    Сервер.ЗаполнитьПолучениеДокументаJson(ДанныеВJson, ДанныеОбъекта)
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson(
        ДанныеОбъекта["Ссылка"] как ЗапросСправкиПоОстаткамОтпуска.Ссылка, ДляПредставления, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗапросСправкиПоОстаткамОтпуска.Ссылка))
    ;
    возврат ДанныеВJson
;

метод ДанныеЗапросаСправкиВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ДляПредставления: Булево): ДанныеJson_V2_0

    знч ДанныеВJson = новый ДанныеJson_V2_0(
        (ДанныеОбъекта["Ссылка"] как ЗапросСправкиПоОстаткамОтпуска.Ссылка).Ид.ВСтроку())
    
    Сервисы.ПолучитьИдентификаторы([
        ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка
    ])

    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    Сервер.ЗаполнитьПолучениеДокументаJson(ДанныеВJson, ДанныеОбъекта)
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_0(
        ДанныеОбъекта["Ссылка"] как ЗапросСправкиПоОстаткамОтпуска.Ссылка, ДляПредставления, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗапросСправкиПоОстаткамОтпуска.Ссылка))
    ;
    возврат ДанныеВJson
;

метод ДанныеЗапросаСправкиВJson_V2_1(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ДляПредставления: Булево): ДанныеJson_V2_1

    знч ДанныеВJson = новый ДанныеJson_V2_1(
        (ДанныеОбъекта["Ссылка"] как ЗапросСправкиПоОстаткамОтпуска.Ссылка).Ид.ВСтроку())
    
    Сервисы.ПолучитьИдентификаторы([
        ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка
    ])

    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    Сервер.ЗаполнитьПолучениеДокументаJson(ДанныеВJson, ДанныеОбъекта)
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_1(
        ДанныеОбъекта["Ссылка"] как ЗапросСправкиПоОстаткамОтпуска.Ссылка, ДляПредставления, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗапросСправкиПоОстаткамОтпуска.Ссылка))
    ;
    возврат ДанныеВJson
;

//КонецОбласти

//Область СлужебныеПроцедурыИФункции

метод ПослеИзмененияСостоянияДополнение(Документ: ЗапросСправкиПоОстаткамОтпуска.Ссылка, Состояние: СостоянияДокумента, ПрежнееСостояние: СостоянияДокумента?)
    знч РеквизитыДокумента: ЧитаемоеСоответствие<Строка, Объект?> = МенеджерСущности.ЗначенияРеквизитовОбъекта(Документ, ["Ссылка", "ФизическоеЛицо"])
    знч ФизическоеЛицо: ФизическиеЛица.Ссылка = РеквизитыДокумента["ФизическоеЛицо"] как ФизическиеЛица.Ссылка
    ОбщегоНазначения.ПослеИзмененияСотоянияЗаявки(Документ, Состояние, ФизическоеЛицо)
    исп Транзакция = Транзакции.Начать()
    ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Документ, Истина)
    РегистрацияИзменений.ЗарегистрироватьИзменение(Документ, ФизическоеЛицо)
    СогласованияДокументов.ЗарегистрироватьПодписиОтправляемогоДокумента(Документ, Истина)
    Транзакция.Фиксировать()
    ОтправитьУведомлениеПриИзмененииСостояния(РеквизитыДокумента, Состояние)
;

метод ОтправитьУведомлениеПриИзмененииСостояния(РеквизитыДокумента: ЧитаемоеСоответствие<Строка, Объект?>, Состояние: СостоянияДокумента)
    знч Получатель: ФизическиеЛица.Ссылка? = РеквизитыДокумента["ФизическоеЛицо"] как ФизическиеЛица.Ссылка? 
    знч ЗапросСправки: ЗапросСправкиПоОстаткамОтпуска.Ссылка = РеквизитыДокумента["Ссылка"] как ЗапросСправкиПоОстаткамОтпуска.Ссылка
    пер Тема = "Получение справки по использованным отпускам"
    пер ТекстСообщения: Строка
    
    если Состояние == СостоянияДокумента.Выполнен
        ТекстСообщения = "Готова справка по использованным отпускам"
    иначе если Состояние == СостоянияДокумента.ПолученОтказ
        ТекстСообщения = "Отказано в предоставлении справки по использованным отпускам"
    ;
    если не ТекстСообщения.Пусто()
        пер ДанныеУведомления = новый УведомленияСервер.ДанныеУведомления(Уведомления.ВидыУведомлений.ПерсональнаяИнформация, ЗапросСправки) 
        пер ТекстыУведомлений = новый УведомленияСервер.ТекстыСообщений(Тема, ТекстСообщения, ТекстСообщения, ТекстСообщения)
        УведомленияСервер.ОтправитьУведомление(Получатель, ТекстыУведомлений, ДанныеУведомления)
    ;
;

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: ЗапросСправкиПоОстаткамОтпуска.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, ФизическоеЛицо)
    ;
    ОбщегоНазначения.ПослеЗаписиОбъектаСЭлектоннымиДокументамиПредставлений(Ссылка, ТребуетсяРегистрацияИзменений)
;

@ВПодсистеме
метод ИсключаемыеВариантыПолученияДокумента(): ЧитаемыйМассив<ВариантыПолученияДокумента>
    пер ИсключаемыеВарианты = новый Массив<ВариантыПолученияДокумента>()
    ИсключаемыеВарианты.Добавить(ВариантыПолученияДокумента.ФайлСЭлектроннойПодписью)
    возврат ИсключаемыеВарианты
;

конст ИдентификаторЗапросаСправкиПоУмолчанию = Ууид{7fbad460-01ec-435d-baa9-485165cf52f0}

@ВПодсистеме
метод ЗапросСправкиПоУмолчанию(): ЗапросСправкиПоОстаткамОтпуска.Ссылка 
    возврат ЗапросСправкиПоОстаткамОтпуска.ПолучитьСсылку(ИдентификаторЗапросаСправкиПоУмолчанию)
;

@ВПодсистеме
метод СоздатьЗапросСправкиПоУмолчанию()
    если не МенеджерСущности.СсылкаСуществует(ЗапросСправкиПоУмолчанию())
        знч ЗапросСправкиОбъект = новый ЗапросСправкиПоОстаткамОтпуска.Объект(ИдентификаторЗапросаСправкиПоУмолчанию).Заполнить()
        ЗапросСправкиОбъект.Записать()
    ;
;

@ВПроекте
метод ПредставленияИдентификаторовЭлектронныхДокументов(ДокументСсылка: ЗапросСправкиПоОстаткамОтпуска.Ссылка): Соответствие<Строка, Строка>
    пер ПредставленияДокументов = новый Соответствие<Строка, Строка>()
    ПредставленияДокументов.Вставить("", "")
    возврат ПредставленияДокументов
;

метод ДанныеЗапросаСправкиПоОстаткамОтпусков(ЗапросСправки: ЗапросСправкиПоОстаткамОтпуска.Ссылка): ЧитаемоеСоответствие<Строка, Объект?>
    возврат ДанныеЗапросовСправок([ЗапросСправки])[ЗапросСправки]
;

@ВПодсистеме
метод ДанныеДокументаДляПечатнойФормы(ДокументСсылка: Объект): Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>
    
    пер ДанныеДокумента = новый Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>()
    знч ДанныеЗаявления = ДанныеЗапросаСправкиПоОстаткамОтпусков(ДокументСсылка как ЗапросСправкиПоОстаткамОтпуска.Ссылка)
    если не ДанныеЗаявления.Пусто()
        пер ПоставляемыеДанные = ПредставленияДокументов.ДанныеПредставленияДокумента(ДанныеЗаявления)
        ДанныеДокумента.Вставить("", новый ШаблоныДокументовМенеджер.ДанныеПечатныхФорм(Данные = ПоставляемыеДанные))
    ;
    
    ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента)
    возврат ДанныеДокумента 
;

@ВПодсистеме
метод ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента: Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>)
    для ДанныеИдентификатора из ДанныеДокумента
        пер ПоставляемыеДанные = ДанныеИдентификатора.Значение.Данные
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаНаименование", "Заявление")
        пер Текст = "Прошу предоставить справку об остатках отпусков."
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаТекст", Текст)
            
    ;
;

//КонецОбласти