импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт ВладельцыКабинетов
импорт КонтрольДоступа
импорт ОбменДанными
импорт Компания::Согласования
импорт Криптография

//Область ОбработчикиСобытий

@Обработчик
метод ПриЗаполнении()
    ФизическоеЛицо = ПользователиСистемы.ТекущееФизическоеЛицо()
    если ФизическоеЛицо == Неопределено
        возврат
    ;
    пер ЧасовойПояс: ЧасовойПояс = ВладельцыКабинетов.ЧасовойПоясФизическогоЛица(ФизическоеЛицо)    
    Дата = Дата.Сейчас(ЧасовойПояс)
    МоментСоздания = Момент.Сейчас()
    знч ВариантПолученияДокументаПоУмолчанию = Сервер.ВариантПолученияДокументаПоУмолчанию(ЗапросСправкиПоОстаткамОтпуска.ИсключаемыеВариантыПолученияДокумента())
    если ВариантПолученияДокументаПоУмолчанию != Неопределено
        ВариантПолученияДокумента = ВариантПолученияДокументаПоУмолчанию
    ;
    знч ЗапрашиваемыеДанные: ВладельцыКабинетов.ЗапрашиваемыеДанныеВладельцевКабинетов
    ЗапрашиваемыеДанные.ЗапрашиваемыеДанныеФизическихЛиц.РабочаяКонтактнаяИнформация = Истина
    ЭлектроннаяПочта = ВладельцыКабинетов.ДанныеВладельцаКабинета(ФизическоеЛицо, ЗапрашиваемыеДанные).ДанныеФизлица.РабочаяКонтактнаяИнформация.ЭлектроннаяПочта
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередЗаписью(ПредыдущееЗначение: ЗапросСправкиПоОстаткамОтпуска.Данные, ПараметрыЗаписи: ЗапросСправкиПоОстаткамОтпуска.ПараметрыЗаписи)
    ЗаполнитьПредставление()
    ЗаполнитьМесяцСоздания()
    ПроверитьЗаполнение()
;

метод ЗаполнитьПредставление()
    ПредставлениеДокумента = "Запрос справки по остаткам отпусков, " + МенеджерДат.ФорматДаты(Дата, "ММММ гггг") 
;


метод ЗаполнитьМесяцСоздания()
    МесяцСоздания = Дата.НачалоМесяца()
;

метод ПроверитьЗаполнение()
    МенеджерСущности.ПроверитьЗаполнениеРеквизита(ФизическоеЛицо, "Физическое лицо")    
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПослеЗаписи(ПредыдущееЗначение: ЗапросСправкиПоОстаткамОтпуска.Данные, ПараметрыЗаписи: ЗапросСправкиПоОстаткамОтпуска.ПараметрыЗаписи)
    исп КонтекстДоступа.Привилегированный()
    пер ТребуетсяРегистрацияИзменений = РегистрацияИзменений.ТребуетсяРегистрацияИзмененийОбъекта(этот, ПредыдущееЗначение)
    ЗапросСправкиПоОстаткамОтпуска.ПослеЗаписиДополнение(Ссылка, ФизическоеЛицо, ТребуетсяРегистрацияИзменений)
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередУдалением(ПараметрыУдаления: ЗапросСправкиПоОстаткамОтпуска.ПараметрыУдаления)
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<СогласованияДокументов>, "Документ")
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<ПодписиДокументов>, "Документ")
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<ВерсииДанныхОбъектов>, "Объект")
;

//КонецОбласти