импорт КонтрольДоступа
импорт ВебApi
импорт УниверсальныеМеханизмы
импорт ОбменДанными
импорт ОбщиеСтандартные

// Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат КонтрольДоступа.РазрешенияДоступаТаблицыКонтентДанныхАбонентаЧтениеВсем()
;

// КонецОбласти РазрешенияДоступа

@ВПроекте
структура ДанныеJson
    обз знч ID: Строка
    обз знч presentation: Строка
    обз знч description: Строка?
    обз знч inUse: Булево?
    обз знч order: Число?
    пер sample: МенеджерФайлов.ДанныеФайлаJson?
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<ДанныеJson>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<ДанныеJson>
    ;
;

@ВПроекте
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Массив<ДанныеJson>>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Массив<ДанныеJson>>
    ;
;

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "certificatesFromEmployerTypes"
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)

    исп Транзакции.Начать()

    знч ВидыПроизвольныхСправок = Сервисы.ПрочитатьОбъект(ДанныеJson.ID,
        &ВидыПроизвольныхСправок.Объект.новый(Ууид), Тип<ВидыПроизвольныхСправок.Ссылка>) как ВидыПроизвольныхСправок.Объект
    ВидыПроизвольныхСправок.Наименование = ДанныеJson.presentation
    если ДанныеJson.description != Неопределено
        ВидыПроизвольныхСправок.Пояснение = ДанныеJson.description
    ;
    если ДанныеJson.inUse != Неопределено
        ВидыПроизвольныхСправок.Используется = ДанныеJson.inUse
    иначе
        ВидыПроизвольныхСправок.Используется = Истина
    ;
    если ДанныеJson.order != Неопределено
        ВидыПроизвольныхСправок.Порядок = ДанныеJson.order
    ;
    
    пер ФайлыДокумента: Массив<Файлы.Объект>
    если ДанныеJson.sample != Неопределено
        //знч ДанныеЗагруженногоФайла = Сервисы.ПолучитьДанныеФайла(ДанныеJson.sample)
        знч ДанныеЗагруженногоФайла = ОбменДанными.ЗагруженныйФайл(ДанныеJson.sample)
        знч ФайлОбъект = Файлы.НовыйФайл(ДанныеЗагруженногоФайла.Загрузить(), ДанныеJson.sample.size)
        ФайлОбъект.ЗаполнитьПоЗагруженномуФайлу(ДанныеJson.sample)
        ВидыПроизвольныхСправок.Пример = ФайлОбъект.Ссылка 
        ФайлыДокумента.Добавить(ФайлОбъект)
    ;
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ВидыПроизвольныхСправок, ДанныеJson.ID), Сервисы.ИнструментыМенеджераОбъекта)
    Файлы.ЗаписатьФайлыПоВладельцу(ФайлыДокумента, ВидыПроизвольныхСправок.Ссылка) 
;

@ВПодсистеме
метод ВидыПроизвольныхСправок(): ЧитаемоеСоответствие<ВидыПроизвольныхСправок.Ссылка, ВидыПроизвольныхСправокКлиентСервер.ВидСправки> 
    возврат ДанныеВидовСправок()
;

@ВПроекте
метод ПолучитьДанныеJson(Ссылка: ВидыПроизвольныхСправок.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Объект?
    если ВерсияФорматаОбмена == Неопределено
        возврат ПолучитьДанныеJson(Ссылка, Сервисы)
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат ПолучитьДанныеJson(Ссылка, Сервисы)
    ;
;

@ВПроекте
метод ПолучитьДанныеJson(Ссылка: ВидыПроизвольныхСправок.Ссылка, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДанныеJson
    знч ВидыПроизвольныхСправок = ДанныеВидовСправок([Ссылка])
    знч ДанныеВидыПроизвольныхСправок = ВидыПроизвольныхСправок.ПолучитьИлиУмолчание(Ссылка)
   
    знч ДанныеJson = новый ДанныеJson(
        Сервисы.ПолучитьИдентификатор(Ссылка), 
        ДанныеВидыПроизвольныхСправок.Представление, 
        ДанныеВидыПроизвольныхСправок.Пояснение,
        ДанныеВидыПроизвольныхСправок.Используется,
        ДанныеВидыПроизвольныхСправок.Порядок)
   
    если ДанныеВидыПроизвольныхСправок.Пример != Неопределено
        ДанныеJson.sample = Файлы.ДанныеФайлаJson(ДанныеВидыПроизвольныхСправок.Пример!, Сервисы)
    ;
    
    возврат ДанныеJson  
;

метод ДанныеВидовСправок(ВидыПроизвольныхСправок: ЧитаемаяКоллекция<ВидыПроизвольныхСправок.Ссылка>? = Неопределено, 
        ТолькоИспользуемые: Булево = Ложь): 
    ЧитаемоеСоответствие<ВидыПроизвольныхСправок.Ссылка, ВидыПроизвольныхСправокКлиентСервер.ВидСправки>

    знч Данные: Соответствие<ВидыПроизвольныхСправок.Ссылка, ВидыПроизвольныхСправокКлиентСервер.ВидСправки>

    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Наименование,
            Пояснение,
            Используется,
            Порядок,
            Пример
        Из 
            ВидыПроизвольныхСправок
        Где 
            (%{ВидыПроизвольныхСправок == Неопределено}
                Или Ссылка В (%ВидыПроизвольныхСправок))
            И (%{не ТолькоИспользуемые}
                Или Используется)
        Упорядочить по
            Порядок}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        знч ВидСправки = новый ВидыПроизвольныхСправокКлиентСервер.ВидСправки(РезультатСтрока.Ссылка)
        ВидСправки.Используется = РезультатСтрока.Используется
        ВидСправки.Представление = РезультатСтрока.Наименование
        ВидСправки.Пояснение = РезультатСтрока.Пояснение
        ВидСправки.Порядок = РезультатСтрока.Порядок
        ВидСправки.Пример = РезультатСтрока.Пример
        Данные.Вставить(ВидСправки.Ссылка, ВидСправки)
    ;
    возврат Данные
;