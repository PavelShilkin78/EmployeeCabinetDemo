импорт ЛичныеКабинетыПользователей
импорт ИнтерфейсныеКомпонентыСтандартные
импорт Компания
импорт ОбщиеСтандартные
импорт Отпуск
импорт СтандартноеПриложение
импорт ФизическиеЛица
импорт ГрафикОтпусков
импорт Обсуждения

// Контракт ИнициализируемыйКомпонент

@ВПроекте
@Реализация
метод Инициализировать()
    Компоненты.Поиск.ВыполнитьПоиск = &СтрокаПоискаВыполнитьПоиск
    ИзмененЗапланированныйОтпускФизическогоЛица.ПодключитьОбработчик(&ОбновитьДанные)
    Компоненты.СворачиваемаяГруппа.Свернут = Истина
    ОбновитьДанные()    
    ИнтерфейсныеКомпоненты.ИнициализироватьПодчиненныеКомпоненты(Компоненты)
;

// Конец ИнициализируемыйКомпонент

@ВПодсистеме
метод ОбновитьДанные()
    если ПоказАдминистратору == Неопределено 
        ПоказАдминистратору = ГрафикОтпусковСотрудников.ПоказатьСоставлениеГрафикаОтпусковАдминистраторуИИнициатору()
    ;
    если ПоказОтветственному == Неопределено 
        ПоказОтветственному = ГрафикОтпусковСотрудников.ПоказатьСоставлениеГрафикаОтпусковОтветственному()
    ;
    
    пер ПараметрыПрочтения = ПрочитатьДанные(
        ФизическоеЛицоСеанса = ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо,
        ПодразделенияРуководителя = Компания.ПараметрыСеанса().ПодразделенияРуководителя,
        ГодТекущейКампанииСоставленияГрафикаОтпусков = ГрафикОтпусковСотрудников.ПараметрыСеанса().ГодТекущейКампанииСоставленияГрафикаОтпусков, 
        ГрафикОтпусковПредприятияТекущейКампании = ГрафикОтпусковСотрудников.ПараметрыСеанса().ГрафикОтпусковПредприятияТекущейКампании,
        СтруктурнаяЕдиница = СтруктурнаяЕдиница, 
        ВариантОтображения = ВариантОтображения, 
        СтрокаПоиска = СтрокаПоиска,
        ПоказАдминистратору = ПоказАдминистратору или ПоказОтветственному
    )
    
    ЗаполнитьДанные(ПараметрыПрочтения.КоллекцияДанных)
    ПервичноеСостояниеКампанииПодразделения = ПервичноеСостояниеКампанииПодразделения(ДанныеПоПодразделениям)          
    ВторичноеСостояниеКампанииПодразделения = ВторичноеСостояниеКампанииПодразделения(ПараметрыПрочтения.КоллекцияДанных)          
    КоличествоФизическихЛицОбщее = ПараметрыПрочтения.КоличествоОбщее
    КоличествоФизическихЛицОтображаемых = ПараметрыПрочтения.КоличествоОтображаемых
    
;

метод ЗаполнитьДанные(Данные: ЧитаемыйМассив<СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков>): Булево
    возврат Компоненты.ИнформацияОЗапланированныхОтпусках.ЗаполнитьИсточникДанных(Данные)
;

@ВПроекте
метод СтрокаПоискаВыполнитьПоиск(Источник: СтрокаПоиска, Событие: СобытиеСДанными<Строка>)
    знч ПоисковаяСтрока: Строка = Событие.Данные
    СтрокаПоиска = ПоисковаяСтрока
    ОбновитьДанные()
;

метод ПолучитьЗаголовокСворачиваемойГруппы(): Строка
    если Компоненты.СворачиваемаяГруппа.Свернут
        знч Представление = СтруктурнаяЕдиница?.Представление() ?? ""
        если ПервичноеСостояниеКампанииПодразделения == СостояниеГрафикаОтпусков.Утверждено
            возврат "[Закрыт] %{Представление}" 
        иначе
            возврат Представление
        ;
    ;
    возврат "Настройки"
;

метод ПерепискаВидимость(): Булево
    возврат Обсуждения.ИспользуютсяОбсуждения() и ГрафикОтпусковПодразделения != Неопределено
;

метод ФормФакторГрафикаОтпусков(): ФормФакторГрафикаОтпусков
    пер ФормФактор: ФормФакторГрафикаОтпусков = ГрафикОтпусковСотрудников.ФормФакторПоШиринеОкнаПриложения(КлиентскоеУстройство.ШиринаОкнаПриложения)
    если ЗафиксироватьСокращенныйФормФактор и ФормФактор == ФормФакторГрафикаОтпусков.Полный
        ФормФактор = ФормФакторГрафикаОтпусков.Сокращенный
    ;
    возврат ФормФактор    
;

метод ГлавнаяГруппаУстановленнаяШиринаОбластиРазмещения(): Число
    возврат ОсновнойИнтерфейс.ШиринаОсновногоОкнаПриложения()
;

метод ГлавнаяГруппаМинимальнаяШиринаКолонок(): Число
    возврат ОсновнойИнтерфейс.МинимальнаяШиринаПанелейПодразделов()
;

метод ЗаполнениеГрафикаЯвляетсяСкрытымПриИзменении(Источник: Флажок, Событие: СобытиеПриИзменении<Булево?>)
    ГрафикОтпусковСтруктурнойЕдиницы.ЗаписатьИзмененияВГрафикеОтпусковПодразделения(
        Изменения = новый ГрафикОтпусковСтруктурнойЕдиницы.ИзмененияВГрафикеОтпусковПодразделения(
            Ссылка = ГрафикОтпусковПодразделения!,
            ЗаполнениеГрафикаЯвляетсяСкрытым = Событие.НовоеЗначение!
    ))
    АктуализироватьДанныеГрафикаПодразделения(новый ИзмененияВДанныхПодразделения(
        ЗаполнениеГрафикаЯвляетсяСкрытым = Событие.НовоеЗначение!
    ))
;

метод ЗаполнениеГрафикаЯвляетсяСкрытымДоступность(): Булево
    возврат ЕстьПравоНаРедактированиеГрафиковОтпусков() 
          и ПервичноеСостояниеКампанииПодразделения != Неопределено
          и {СостояниеГрафикаОтпусков.ВРаботе,
             СостояниеГрафикаОтпусков.Черновик}.Содержит(ПервичноеСостояниеКампанииПодразделения!)
;

@НаСервере @ДоступноСКлиента
статический метод ЕстьПравоНаРедактированиеГрафиковОтпусков(): Булево
    возврат Истина
;

метод ГлавнаяГруппаШиринаКолонок(): Число
    возврат ОсновнойИнтерфейс.МаксимальнаяШиринаПанелейПодразделов()
;

метод ИнформацияОЗапланированныхОтпускахПриНажатииЭлемента(Источник: ИнформацияОЗапланированныхОтпускахТаблицей, Событие: СобытиеСДанными<ЭлементДиаграммыГанта<СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков, СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска>>)
    пер ДанныеСоставленияГрафикаОтпусков = Событие.Данные.Данные
    если ГрафикОтпусковПредприятияТекущейКампанииАктуален() и ДанныеСоставленияГрафикаОтпусков.ЛичныйКабинетСоздан
        КарточкаЗапланированногоОтпуска.ОткрытьВМодальномОкне(
            ОжидатьЗакрытия = Истина, 
            ДанныеСоставленияГрафикаОтпусков = ДанныеСоставленияГрафикаОтпусков
        )   
    ;
;

метод БыстрыйФильтрПриНажатии(Источник: КомпонентВыбора, Событие: СобытиеПриНажатии)
    пер Компонент:  КомпонентВыбора = Источник
    ВариантОтображения = Компонент.ДополнительныеДанные как СтатусПланированияГрафикаСотрудника?
    ОбновитьДанные()
;

метод ВсеСотрудникиАктивность(): Булево
    возврат ВариантОтображения == Неопределено
;

метод ПланированиеВРаботеАктивность(): Булево
    возврат ВариантОтображения == СтатусПланированияГрафикаСотрудника.ВРаботе
;  

метод ПланированиеНеПроводитсяАктивность(): Булево
    возврат ВариантОтображения == СтатусПланированияГрафикаСотрудника.НеПроводится
;

метод СостояниеСогласованияЦветФона(): Цвет 
    возврат СборГрафиковОтпусков.ИконкаЦвет(
        ГрафикОтпусковПодразделения == Неопределено 
            ? Неопределено : ГрафикОтпусковПодразделения != Неопределено и ПервичноеСостояниеКампанииПодразделения == СостояниеГрафикаОтпусков.Утверждено 
                ? ПервичноеСостояниеКампанииПодразделения : ВторичноеСостояниеКампанииПодразделения)    
;

метод ПервичноеСостояниеКампанииПодразделения(КоллекцияИсточника: Массив<СборГрафиковОтпусков.ДанныеКампанииПодразделения>): СостояниеГрафикаОтпусков?
    для ДанныеПодразделения из КоллекцияИсточника
        если ДанныеПодразделения.ГрафикОтпусковПодразделения == ГрафикОтпусковПодразделения
           возврат ДанныеПодразделения.ПервичноеСостояниеКампанииПодразделения 
        ;
    ;
    
    возврат Неопределено
;

метод ВторичноеСостояниеКампанииПодразделения(КоллекцияИсточника: Массив<СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков>): СостояниеГрафикаОтпусков?
    пер ВторичноеСостояние: СостояниеГрафикаОтпусков?
    для КомпонентДанных из КоллекцияИсточника
        пер СостояниеКомпонентаДанных: СостояниеГрафикаОтпусков? = (КомпонентДанных).ЗапланированоСостояниеОбщее
        если ВторичноеСостояние == Неопределено или СостояниеКомпонентаДанных == СостояниеГрафикаОтпусков.Отказано
            ВторичноеСостояние = СостояниеКомпонентаДанных   
        иначе если ВторичноеСостояние != СостояниеГрафикаОтпусков.Отказано 
            если СостояниеКомпонентаДанных == СостояниеГрафикаОтпусков.Черновик или СостояниеКомпонентаДанных == СостояниеГрафикаОтпусков.ВРаботе
                ВторичноеСостояние = СостояниеКомпонентаДанных        
            ;
        ; 
    ;   
    возврат ВторичноеСостояние  
;

метод НачатьКампаниюПодразделенияПриНажатии(Команда: ОбычнаяКоманда)
    если ГрафикОтпусковПредприятияТекущейКампанииАктуален()
        пер ГрафикОтпусковПредприятияТекущейКампании = ГрафикОтпусковСотрудников.ПараметрыСеанса().ГрафикОтпусковПредприятияТекущейКампании
        если ГрафикОтпусковПредприятияТекущейКампании == Неопределено или СтруктурнаяЕдиница == Неопределено
            возврат
        ;
        пер ПараметрыКампанииПодразделения = СборГрафиковОтпусков.НачатьКампаниюПодразделения(ГрафикОтпусковПредприятияТекущейКампании, ГрафикОтпусковПодразделения, СтруктурнаяЕдиница)
        если ГрафикОтпусковПодразделения == Неопределено
            ГрафикОтпусковПодразделения = ПараметрыКампанииПодразделения.ГрафикОтпусковПодразделения
        ;
        ПервичноеСостояниеКампанииПодразделения = ПараметрыКампанииПодразделения.ПервичноеСостояниеКампанииПодразделения
        АктуализироватьДанныеГрафикаПодразделения(новый ИзмененияВДанныхПодразделения(Состояние = ПервичноеСостояниеКампанииПодразделения))
        ИзмененЗапланированныйОтпускФизическогоЛица.Оповестить()
    ;
;

метод ЗавершитьКампаниюПодразделенияПриНажатии(Команда: ОбычнаяКоманда)
    если ГрафикОтпусковПредприятияТекущейКампанииАктуален()
        знч СостояниеУтверждено: СостояниеГрафикаОтпусков = СостояниеГрафикаОтпусков.Утверждено
        СборГрафиковОтпусков.ЗавершитьКампаниюПодразделения(ГрафикОтпусковПодразделения, СостояниеУтверждено)
        ПервичноеСостояниеКампанииПодразделения = СостояниеУтверждено
        АктуализироватьДанныеГрафикаПодразделения(новый ИзмененияВДанныхПодразделения(Состояние = СостояниеУтверждено))
        ИзмененЗапланированныйОтпускФизическогоЛица.Оповестить()
    ;
;

@Локально
структура ИзмененияВДанныхПодразделения
    знч Состояние: СостояниеГрафикаОтпусков | Авто = Авто
    знч Ответственный: ФизическиеЛица.Ссылка | Авто = Авто
    знч ЗаполнениеГрафикаЯвляетсяСкрытым: Булево | Авто = Авто
;

метод АктуализироватьДанныеГрафикаПодразделения(НовыеЗначения: ИзмененияВДанныхПодразделения)
    
    знч ДанныеПодразделения = ДанныеПоПодразделениям
        .Фильтровать(Запись -> Запись.ГрафикОтпусковПодразделения == ГрафикОтпусковПодразделения)
        .ПервыйИлиУмолчание()
    
    если ДанныеПодразделения == Неопределено
        возврат
    ;
    
    ДанныеПодразделения.ПервичноеСостояниеКампанииПодразделения = НовыеЗначения.Состояние == Авто
        ? ДанныеПодразделения.ПервичноеСостояниеКампанииПодразделения
        : НовыеЗначения.Состояние как СостояниеГрафикаОтпусков
    
    ДанныеПодразделения.ОтветственныйЗаСбор = НовыеЗначения.Ответственный == Авто 
        ? ДанныеПодразделения.ОтветственныйЗаСбор
        : НовыеЗначения.Ответственный как ФизическиеЛица.Ссылка
        
    ДанныеПодразделения.ЗаполнениеГрафикаЯвляетсяСкрытым = НовыеЗначения.ЗаполнениеГрафикаЯвляетсяСкрытым == Авто
        ? ДанныеПодразделения.ЗаполнениеГрафикаЯвляетсяСкрытым
        : НовыеЗначения.ЗаполнениеГрафикаЯвляетсяСкрытым как Булево

;

метод ОтветственныйПриИзменении(Источник: ПолеВвода<ФизическиеЛица.Ссылка?>, Событие: СобытиеПриИзменении<ФизическиеЛица.Ссылка?>)
    если Событие.СтароеЗначение == Событие.НовоеЗначение
        возврат
    ;
    если Событие.НовоеЗначение == Неопределено
        Источник.Значение = Событие.СтароеЗначение
        знч Уведомление = новый Уведомление(
            "Сбор графиков отпусков",
            "Ответственный должен быть назначен")
        Уведомление.ОценкаИнформации = ОценкаИнформации.Отрицательная
        Уведомление.Показать()
        возврат          
    ;
    
    УстановитьОтветственного(ГрафикОтпусковПодразделения, Событие.НовоеЗначение)
    АктуализироватьДанныеГрафикаПодразделения(новый ИзмененияВДанныхПодразделения(Ответственный = Событие.НовоеЗначение))
    ИзмененОтветственныйЗаСборПожеланийПоПодразделению.Оповестить()
;

@НаСервере @ДоступноСКлиента
статический метод УстановитьОтветственного(ГрафикОтпусковПодразделения: ГрафикОтпусковСтруктурнойЕдиницы.Ссылка?, Ответственный: ФизическиеЛица.Ссылка?)
    исп Транзакции.Начать()
    пер ГрафикПодразделенияОбъект = ГрафикОтпусковПодразделения.ЗагрузитьОбъект(Истина)
    если ГрафикПодразделенияОбъект.Ответственный == Неопределено и ГрафикПодразделенияОбъект.Ответственный != Ответственный
        СборГрафиковОтпусков.ОбработатьИзменениеСостоянияПериодовОтпускаГрафикаПодразделения(ГрафикПодразделенияОбъект.ГрафикОтпусковПредприятия, ГрафикПодразделенияОбъект.Ссылка, СостояниеГрафикаОтпусков.Черновик)
    ;
    ГрафикПодразделенияОбъект.Ответственный = Ответственный
    ГрафикПодразделенияОбъект.Записать()
    СборГрафиковОтпусков.ОбработатьОбсужденияПоГрафикамСотрудников(ГрафикПодразделенияОбъект.Ссылка, ГрафикПодразделенияОбъект.Ответственный)
;

метод ПолучитьВидимостьГруппыФункцийКомандногоИнтерфейса(): Булево
    возврат ГрафикОтпусковСотрудников.ПараметрыСеанса().КампанияСоставленияГрафикаОтпусковАктивна и СтруктурнаяЕдиница != Неопределено и ОтветственныйЗаСбор == ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
;

метод ПолучитьВидимостьГруппыПолейГрафикаПодразделения(): Булево
    возврат (ПоказРуководителю или ПоказАдминистратору или ПоказОтветственному) и СтруктурнаяЕдиница != Неопределено
;

метод ПолучитьВидимостьГруппыВзаимодействияСогласования(): Булево
    возврат ГрафикОтпусковСотрудников.ПараметрыСеанса().КампанияСоставленияГрафикаОтпусковАктивна и СтруктурнаяЕдиница != Неопределено и ОтветственныйЗаСбор == ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
;

метод ЗаголовокФильтраВсеСотрудники(): Строка
    возврат КлиентскоеУстройство.ВидИнтерфейса != ВидИнтерфейса.Телефон и ВариантОтображения == Неопределено ? "Все" : ""
;

метод ЗаголовокФильтраПланированиеВРаботе(): Строка
    возврат КлиентскоеУстройство.ВидИнтерфейса != ВидИнтерфейса.Телефон и ВариантОтображения == СтатусПланированияГрафикаСотрудника.ВРаботе ? КоличествоФизическихЛицОтображаемых.ВСтроку()+" из "+КоличествоФизическихЛицОбщее.ВСтроку() : ""
;

метод ЗаголовокФильтраПланированиеНеПроводится(): Строка
    возврат КлиентскоеУстройство.ВидИнтерфейса != ВидИнтерфейса.Телефон и ВариантОтображения == СтатусПланированияГрафикаСотрудника.НеПроводится ? КоличествоФизическихЛицОтображаемых.ВСтроку()+" из "+КоличествоФизическихЛицОбщее.ВСтроку() : ""
;

метод ГрафикОтпусковПредприятияТекущейКампанииАктуален(): Булево 
    
    знч СостояниеГрафикаОтпусковТекущейКомпании = МенеджерСущности.ЗначениеРеквизитаОбъекта(
        ГрафикОтпусковСотрудников.ПараметрыСеанса().ГрафикОтпусковПредприятияТекущейКампании,
        "Состояние"
    )
    
    ПоказатьЗаглушку = СостояниеГрафикаОтпусковТекущейКомпании == СостояниеГрафикаОтпусков.Утверждено 
                        или СостояниеГрафикаОтпусковТекущейКомпании == СостояниеГрафикаОтпусков.Отказано
    если ПоказатьЗаглушку
        если КлиентскоеУстройство.ВидИнтерфейса != ВидИнтерфейса.Телефон
            знч Уведомление = новый Уведомление(
                "Сбор графиков отпусков",
                "Изменились данные о сборе графиков, необходимо обновить страницу")
            Уведомление.Показать()  
        ;
        если КомпонентВладелец != Неопределено
            КомпонентВладелец.ПоказатьЗаглушку = ПоказатьЗаглушку
        ;
    ;
    возврат не ПоказатьЗаглушку
;

@ВПроекте
@НаКлиенте
метод НастройкиВводаСсылокНаОтветственногоЗаСбор(): НастройкиВводаСсылок
    знч ПотенциальныеОтветственныеЗаСбор = ГрафикОтпусковСотрудников.ПотенциальныеОтветственныеЗаСбор()
    знч Настройка = новый НастройкиВводаСсылки(
        ПсевдонимОсновнойТаблицы = "ФизическиеЛица",
        Фильтр = новый ГруппаЭлементовФильтра(
            ВидГруппы = ВидГруппыЭлементовФильтра.ГруппаИли,
            Элементы = [
                новый ЭлементФильтра(
                        Поле = "ФизическиеЛица.Ссылка",
                        ВидСравнения = ВидСравнения.Равно,
                        Значение = ОтветственныйЗаСбор,
                        Использовать = Истина
                ),
                новый ГруппаЭлементовФильтра(
                    ВидГруппы = ВидГруппыЭлементовФильтра.ГруппаИ,
                    Элементы = [
                        новый ЭлементФильтра(
                            Поле = "ФизическиеЛица.Активен",
                            ВидСравнения = ВидСравнения.Равно,
                            Значение = Истина,
                            Использовать = Истина),
                        новый ЭлементФильтра(
                            Поле = "ФизическиеЛица.Ссылка",
                            ВидСравнения = ВидСравнения.ВСписке,
                            Значение = ПотенциальныеОтветственныеЗаСбор,
                            Использовать = Истина)
                    ]
                )
            ]
        )
    )
    возврат новый НастройкиВводаСсылок({Тип<ФизическиеЛица.Ссылка>: Настройка})
;

метод ВыбраннаяСтруктурнаяЕдиницаПриАвтоПодборе(Источник: ПолеВвода<СтруктураПредприятия.Ссылка?>, Событие: СобытиеПриАвтоПодборе)		    
    для ДанныеПодразделения из ДанныеПоПодразделениям
        знч Представление = ДанныеПодразделения.СтруктурнаяЕдиница.Представление()
        если Представление.Содержит(Событие.Текст)
            Событие.ЗначенияАвтоПодбора.Добавить(новый ЭлементСпискаЗначений<Объект?>(
                Значение = ДанныеПодразделения.СтруктурнаяЕдиница,
                Представление = Представление
            ))
        ;
    ;
    Событие.СтандартнаяОбработка = Ложь

;

метод ВыбраннаяСтруктурнаяЕдиницаПриИзменении(Источник: ПолеВвода<СтруктураПредприятия.Ссылка?>, Событие: СобытиеПриИзменении<СтруктураПредприятия.Ссылка?>)
    если Событие.НовоеЗначение == Неопределено
        Источник.Значение = Событие.СтароеЗначение
    иначе                
        знч ДанныеПодразделения = ДанныеПоПодразделениям
            .Фильтровать(Данные -> Данные.СтруктурнаяЕдиница == Событие.НовоеЗначение)
            .ПервыйИлиУмолчание()      
            
        если ДанныеПодразделения == Неопределено
            Источник.Значение = Событие.СтароеЗначение
            СтандартныеФормы.ПоказатьУведомление("Ошибка", "Не удалось прочитать данные подразделения %{Событие.НовоеЗначение.Представление()}", ОценкаИнформации.Отрицательная)
            возврат            
        ;
        
        ГрафикОтпусковПодразделения = ДанныеПодразделения.ГрафикОтпусковПодразделения
        ОтветственныйЗаСбор = ДанныеПодразделения.ОтветственныйЗаСбор
        ЗаполнениеГрафикаЯвляетсяСкрытым = ДанныеПодразделения.ЗаполнениеГрафикаЯвляетсяСкрытым
        ОбновитьДанные()              
    ;
;

метод ВыбраннаяСтруктурнаяЕдиницаПослеСоздания()
;


//Область СлужебныеПроцедурыИФункции
 
@ВПодсистеме
@НаСервере @НаКлиенте
структура ПараметрыПрочтенияДанных
    пер КоллекцияДанных: Массив<СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков> 
    пер КоличествоОбщее: Число
    пер КоличествоОтображаемых: Число   
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
статический метод ПрочитатьДанные(ФизическоеЛицоСеанса: ФизическиеЛица.Ссылка, ПодразделенияРуководителя: Массив<СтруктураПредприятия.Ссылка>,
        ГодТекущейКампанииСоставленияГрафикаОтпусков: Число?, ГрафикОтпусковПредприятияТекущейКампании: ГрафикОтпусковПредприятия.Ссылка?, 
        СтруктурнаяЕдиница: СтруктураПредприятия.Ссылка?, ВариантОтображения: СтатусПланированияГрафикаСотрудника?, СтрокаПоиска: Строка, 
        ПоказАдминистратору: Булево): ПараметрыПрочтенияДанных
        
    знч Подразделения = ОрганизационнаяСтруктура.ПодразделенияФизическогоЛица(ФизическоеЛицоСеанса)
    знч ФильтрСтрокаПоискаНеВключен = СтрокаПоиска.Пусто()
    знч ШаблонПоиска = "\%%{СтрокаПоиска}\%"
    знч ОтборСтруктурнаяЕдиницаНеВключен = СтруктурнаяЕдиница == Неопределено
    знч Запрос = Запрос{
        выбрать 
            ПодразделенияИСотрудники.ФизическоеЛицо как ФизическоеЛицо,
            выбор
                когда ЛичныеКабинеты.Состояние.ЗаменитьNull(СостоянияЛичногоКабинета.НеСоздан) != СостоянияЛичногоКабинета.НеСоздан
                    и ЛичныеКабинеты.Доступность.ЗаменитьNull(Неопределено) == ДоступностьЛичногоКабинета.Включен
                    тогда Истина
                иначе Ложь
            конец как ЛичныйКабинетСоздан,
            ПодразделенияИСотрудники.Подразделение,
            ПодразделенияИСотрудники.Подразделение.Руководитель.ЗаменитьNull(Неопределено) как РуководительПодразделения,
            выбор
                когда ЛичныеКабинетыРуководителя.Состояние.ЗаменитьNull(СостоянияЛичногоКабинета.НеСоздан) != СостоянияЛичногоКабинета.НеСоздан
                    и ЛичныеКабинетыРуководителя.Доступность.ЗаменитьNull(Неопределено) == ДоступностьЛичногоКабинета.Включен
                    тогда Истина
                иначе Ложь
            конец как ЛичныйКабинетРуководителяСоздан,
            ПодразделенияИСотрудники.ФизическоеЛицо.Фамилия.ЗаменитьNull("") как Фамилия,
            ПодразделенияИСотрудники.ФизическоеЛицо.Имя.ЗаменитьNull("") как Имя,
            ПодразделенияИСотрудники.ФизическоеЛицо.Отчество.ЗаменитьNull("") как Отчество,
            ПодразделенияИСотрудники.ФизическоеЛицо.ИнициалыИмени.ЗаменитьNull("") как ИнициалыИмени,
            ПодразделенияИСотрудники.ФизическоеЛицо.Представление.ЗаменитьNull("") как ФизическоеЛицоПредставление,
            ПериодыЗапланированногоОтпуска.Ссылка.ЗаменитьNull(Неопределено) как ПериодОтпускаСсылка,
            ПериодыЗапланированногоОтпуска.ДатаНачала.ЗаменитьNull(Дата{}) как ДатаНачала,
            ПериодыЗапланированногоОтпуска.ДатаОкончания.ЗаменитьNull(Дата{}) как ДатаОкончания,
            ПериодыЗапланированногоОтпуска.Состояние.ЗаменитьNull(Неопределено) как Состояние,
            ГрафикОтпусковСотрудника.Ссылка.ЗаменитьNull(Неопределено) как ГрафикОтпусковСотрудника,
            ГрафикОтпусковСотрудника.ОтпускНеПланирует.ЗаменитьNull(Ложь) как ОтпускНеПланирует,
            ГрафикОтпусковСтруктурнойЕдиницы.Состояние.ЗаменитьNull(Неопределено) как СостояниеГрафикаСтруктурнойЕдиницы,
            ГрафикОтпусковСтруктурнойЕдиницы.Ответственный.ЗаменитьNull(Неопределено) как ОтветственныйГрафикаСтруктурнойЕдиницы,
            ИнформацияОбОтпуске.ДопустимаяПродолжнительностьОтпускаМенее14Дней.ЗаменитьNull(0) как ДопустимаяПродолжнительностьОтпускаМенее14Дней
        из 
            ПодразделенияИСотрудники как ПодразделенияИСотрудники
            левое соединение ПериодыОтпуска как ПериодыЗапланированногоОтпуска
                по ПодразделенияИСотрудники.ФизическоеЛицо == ПериодыЗапланированногоОтпуска.ФизическоеЛицо
                    и ПериодыЗапланированногоОтпуска.ДатаНачала.Год == %ГодТекущейКампанииСоставленияГрафикаОтпусков
            левое соединение ГрафикОтпусковСотрудника как ГрафикОтпусковСотрудника
                внутреннее соединение ГрафикОтпусковСтруктурнойЕдиницы как ГрафикОтпусковСтруктурнойЕдиницы
                    внутреннее соединение ГрафикОтпусковПредприятия как ГрафикОтпусковПредприятияСсылка
                        по ГрафикОтпусковСтруктурнойЕдиницы.ГрафикОтпусковПредприятия == ГрафикОтпусковПредприятияСсылка.Ссылка
                            и ГрафикОтпусковПредприятияСсылка.Ссылка == %ГрафикОтпусковПредприятияТекущейКампании
                    по ГрафикОтпусковСотрудника.ГрафикОтпусковПодразделения == ГрафикОтпусковСтруктурнойЕдиницы.Ссылка
                по ПодразделенияИСотрудники.ФизическоеЛицо == ГрафикОтпусковСотрудника.ФизическоеЛицо  
            левое соединение ИнформацияОбОтпуске как ИнформацияОбОтпуске  
                по ПодразделенияИСотрудники.ФизическоеЛицо == ИнформацияОбОтпуске.ФизическоеЛицо
            левое соединение ЛичныеКабинеты как ЛичныеКабинеты
                по ПодразделенияИСотрудники.ФизическоеЛицо == ЛичныеКабинеты.ФизическоеЛицо
            левое соединение ЛичныеКабинеты как ЛичныеКабинетыРуководителя
                по ПодразделенияИСотрудники.Подразделение.Руководитель == ЛичныеКабинетыРуководителя.ФизическоеЛицо
            левое соединение Сотрудники как Сотрудники
                по ПодразделенияИСотрудники.Объект == Сотрудники.Ссылка
        где 
            ПодразделенияИСотрудники.ОсновноеМестоРаботы
                и (%ФильтрСтрокаПоискаНеВключен
                    Или ПодразделенияИСотрудники.ФизическоеЛицо.Представление подобно %ШаблонПоиска)
                и (ПодразделенияИСотрудники.Подразделение в(%Подразделения)
                    или ПодразделенияИСотрудники.Подразделение в(%ПодразделенияРуководителя)
                    или %ПоказАдминистратору)
                и (%ОтборСтруктурнаяЕдиницаНеВключен
                    или ПодразделенияИСотрудники.Подразделение == %СтруктурнаяЕдиница)
                и не (Сотрудники.Уволен.ЗаменитьNull(Истина)
                        или Сотрудники.СкрыватьВСписках.ЗаменитьNull(Истина))
                и (%ПоказАдминистратору
                    или ГрафикОтпусковСтруктурнойЕдиницы.ЗаполнениеГрафикаЯвляетсяСкрытым == Ложь
                    или ПодразделенияИСотрудники.ФизическоеЛицо == %ФизическоеЛицоСеанса)
        сгруппировать по
            ПодразделенияИСотрудники.ФизическоеЛицо,
            ПодразделенияИСотрудники.Подразделение,
            ПериодыЗапланированногоОтпуска.Ссылка,
            ПериодыЗапланированногоОтпуска.ДатаНачала,
            ПериодыЗапланированногоОтпуска.ДатаОкончания,
            ПериодыЗапланированногоОтпуска.Состояние,
            ГрафикОтпусковСотрудника.Ссылка,
            ГрафикОтпусковСотрудника.ОтпускНеПланирует,
            ГрафикОтпусковСтруктурнойЕдиницы.Состояние,
            ГрафикОтпусковСтруктурнойЕдиницы.Ответственный,
            ИнформацияОбОтпуске.ДопустимаяПродолжнительностьОтпускаМенее14Дней,
            ЛичныеКабинеты.Состояние,
            ЛичныеКабинеты.Доступность,
            ЛичныеКабинетыРуководителя.Состояние,
            ЛичныеКабинетыРуководителя.Доступность
        упорядочить по
            ПодразделенияИСотрудники.Подразделение,
            ПодразделенияИСотрудники.ФизическоеЛицо.Представление,
            ПериодыЗапланированногоОтпуска.ДатаНачала
        }        
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    исп Результат = Запрос.Выполнить() 
    ПривилегированныйРежим.Закрыть()
    возврат ЗаполнитьКоллекцию(Результат, ФизическоеЛицоСеанса, ВариантОтображения)
;

@НаСервере
статический метод ЗаполнитьКоллекцию(Результат: РезультатЗапроса<неизвестно>, ФизическоеЛицоСеанса: ФизическиеЛица.Ссылка, ВариантОтображения: СтатусПланированияГрафикаСотрудника?): ПараметрыПрочтенияДанных
    пер ПараметрыПрочтенияДанных = новый ПараметрыПрочтенияДанных()
    пер КомпонентДанных = новый СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков()
    ПодготовитьДанныеПланированияПоМесяцам(КомпонентДанных)
    пер КоличествоПериодов = 1
    пер КоличествоДнейОбщее: Число
    для СтрокаРезультата из Результат
        пер ДатаНачалаОтпуска = СтрокаРезультата.ДатаНачала
        пер ДатаОкончанияОтпуска = СтрокаРезультата.ДатаНачала.Месяц == СтрокаРезультата.ДатаОкончания.Месяц 
                                    ? СтрокаРезультата.ДатаОкончания : СтрокаРезультата.ДатаНачала.КонецМесяца()
        пер КоличествоМесяцевВПериоде = СтрокаРезультата.ДатаОкончания == Дата{} и СтрокаРезультата.ДатаНачала == Дата{}
                                        ? 0 : СтрокаРезультата.ДатаОкончания.Месяц - СтрокаРезультата.ДатаНачала.Месяц + 1
        если КомпонентДанных.ФизическоеЛицо != Неопределено и КомпонентДанных.ФизическоеЛицо != СтрокаРезультата.ФизическоеЛицо
            ЗаполнитьПредставления(КомпонентДанных, КоличествоПериодов, КоличествоДнейОбщее)
            ДобавитьКомпонентВКоллекцию(ПараметрыПрочтенияДанных, КомпонентДанных, ФизическоеЛицоСеанса, ВариантОтображения)
            КомпонентДанных = новый СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков()
            ПодготовитьДанныеПланированияПоМесяцам(КомпонентДанных)
            КоличествоПериодов = 1
            КоличествоДнейОбщее = 0  
        ;
        если КомпонентДанных.ФизическоеЛицо == Неопределено
            КомпонентДанных.ФизическоеЛицо = СтрокаРезультата.ФизическоеЛицо
            КомпонентДанных.ФизическоеЛицоПредставление = СтрокаРезультата.ФизическоеЛицоПредставление
            знч ФИО = новый ФизЛица.ФИО(СтрокаРезультата.Фамилия, СтрокаРезультата.Имя, СтрокаРезультата.Отчество, СтрокаРезультата.ИнициалыИмени)
            КомпонентДанных.ФизическоеЛицоФамилияИО = ФИО.ПредставлениеИмени(ФизЛица.ВариантПредставленияИмени.ФамилияИОРаздельно)
            КомпонентДанных.Подразделение = СтрокаРезультата.Подразделение
            КомпонентДанных.ГрафикОтпусковСотрудника = СтрокаРезультата.ГрафикОтпусковСотрудника
            КомпонентДанных.ОтпускНеПланирует = СтрокаРезультата.ОтпускНеПланирует
            КомпонентДанных.ПраздничныеДни = Отпуск.ПраздничныеДни(СтрокаРезультата.ФизическоеЛицо)
            КомпонентДанных.ПервичноеСостояниеКампанииПодразделения = СтрокаРезультата.СостояниеГрафикаСтруктурнойЕдиницы
            КомпонентДанных.ОтветственныйГрафикаСтруктурнойЕдиницы = СтрокаРезультата.ОтветственныйГрафикаСтруктурнойЕдиницы
            КомпонентДанных.ДопустимаяПродолжнительностьОтпускаМенее14Дней = СтрокаРезультата.ДопустимаяПродолжнительностьОтпускаМенее14Дней
            КомпонентДанных.РуководительПодразделения = СтрокаРезультата.РуководительПодразделения
            КомпонентДанных.ЛичныйКабинетСоздан = СтрокаРезультата.ЛичныйКабинетСоздан
            КомпонентДанных.ЛичныйКабинетРуководителяСоздан = СтрокаРезультата.ЛичныйКабинетРуководителяСоздан
            ПараметрыПрочтенияДанных.КоличествоОбщее +=1
        ;
        пока КоличествоМесяцевВПериоде > 0                   
            пер НомерМесяца = ДатаНачалаОтпуска.Месяц
            пер КомпонентДанныхМесяц = КомпонентДанных.ЗапланированоПоМесяцам.Получить(НомерМесяца-1)
            КомпонентДанныхМесяц.ПериодОтпускаСсылка = СтрокаРезультата.ПериодОтпускаСсылка
            КомпонентДанныхМесяц.НомерМесяца = НомерМесяца
            КомпонентДанныхМесяц.СостояниеЗапланированногоОтпуска = СтрокаРезультата.Состояние
            КомпонентДанныхМесяц.КоличествоДнейВМесяце = 
                КомпонентДанныхМесяц.КоличествоДнейВМесяце + ДнейЗапланированногоОтпускаБезПраздников(ДатаНачалаОтпуска, ДатаОкончанияОтпуска, КомпонентДанных.ПраздничныеДни)   
            КомпонентДанныхМесяц.ПредставлениеЗначкаМесяц = КомпонентДанныхМесяц.КоличествоДнейВМесяце.ВСтроку()
            ДатаНачалаОтпуска = ДатаОкончанияОтпуска.ДобавитьДни(1)
            ДатаОкончанияОтпуска = ДатаНачалаОтпуска.Месяц == СтрокаРезультата.ДатаОкончания.Месяц 
                                    ? СтрокаРезультата.ДатаОкончания : ДатаНачалаОтпуска.КонецМесяца()
            КоличествоМесяцевВПериоде -= 1
        ;
        если не (СтрокаРезультата.ДатаОкончания == Дата{} и СтрокаРезультата.ДатаНачала == Дата{})
            КомпонентДанных.ЗапланированоПоПериодам.Добавить(новый СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска())
            пер КомпонентДанныхПериод = КомпонентДанных.ЗапланированоПоПериодам.Последний()
            КомпонентДанныхПериод.ПериодОтпускаСсылка = СтрокаРезультата.ПериодОтпускаСсылка
            КомпонентДанныхПериод.ДатаНачалаПериода = СтрокаРезультата.ДатаНачала
            КомпонентДанныхПериод.ДатаОкончанияПериода = СтрокаРезультата.ДатаОкончания
            КомпонентДанныхПериод.ПериодЗапланированногоОтпуска = новый ЗакрытыйДиапазон<Дата>(СтрокаРезультата.ДатаНачала, СтрокаРезультата.ДатаОкончания)
            КомпонентДанныхПериод.СостояниеЗапланированногоОтпуска = СтрокаРезультата.Состояние
            КомпонентДанныхПериод.КоличествоДнейВПериоде = ДнейЗапланированногоОтпускаБезПраздников(СтрокаРезультата.ДатаНачала, СтрокаРезультата.ДатаОкончания, КомпонентДанных.ПраздничныеДни)     
            КомпонентДанныхПериод.ПредставлениеЗначкаПериод =
                СтрокаРезультата.ДатаНачала.Представление("дд МММ") + КомпонентДанныхПериод.КоличествоДнейВПериоде.ВСтроку() + "дн"   
            КоличествоПериодов += 1
            КоличествоДнейОбщее += КомпонентДанныхПериод.КоличествоДнейВПериоде
        ;
        если КомпонентДанных.ЗапланированоСостояниеОбщее == Неопределено или СтрокаРезультата.Состояние == СостояниеГрафикаОтпусков.Отказано
            КомпонентДанных.ЗапланированоСостояниеОбщее = СтрокаРезультата.Состояние   
        иначе если КомпонентДанных.ЗапланированоСостояниеОбщее != СостояниеГрафикаОтпусков.Отказано 
            если СтрокаРезультата.Состояние == СостояниеГрафикаОтпусков.Черновик или СтрокаРезультата.Состояние == СостояниеГрафикаОтпусков.ВРаботе
                КомпонентДанных.ЗапланированоСостояниеОбщее = СтрокаРезультата.Состояние        
            ;
        ;
    ;
    если КомпонентДанных.ФизическоеЛицо != Неопределено 
        ЗаполнитьПредставления(КомпонентДанных, КоличествоПериодов, КоличествоДнейОбщее)
        ДобавитьКомпонентВКоллекцию(ПараметрыПрочтенияДанных, КомпонентДанных, ФизическоеЛицоСеанса, ВариантОтображения)
    ;
    возврат ПараметрыПрочтенияДанных
;

@НаСервере
статический метод ДнейЗапланированногоОтпускаБезПраздников(ДатаНачала: Дата?, ДатаОкончания: Дата?, ПраздничныеДни: Соответствие<Число, Массив<Дата>>): Число
    пер ДнейЗапланированногоОтпуска: Число 
    пер ПраздничныхДней: Число
    если ДатаНачала != Неопределено и ДатаОкончания != Неопределено
            и ДатаНачала! <= ДатаОкончания!
        ДнейЗапланированногоОтпуска = (ДатаОкончания - ДатаНачала + 1д).ВДнях()
        если не ПраздничныеДни.Пусто()
                и ПраздничныеДни.СодержитКлюч(ДатаНачала.Год)
            пер Праздники: Массив<Дата> = ПраздничныеДни[ДатаНачала.Год]
            для Праздник из Праздники
                если Праздник >= ДатаНачала! и Праздник <= ДатаОкончания!
                    ПраздничныхДней += 1
                ;
            ;
        ;
    ;
    возврат ДнейЗапланированногоОтпуска - ПраздничныхДней
;

@НаСервере @ДоступноСКлиента
статический метод ПодготовитьДанныеПланированияПоМесяцам(КомпонентДанных: СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков)
    КомпонентДанных.ЗапланированоПоМесяцам.Очистить()
    для сч = 1 по 12 
        КомпонентДанных.ЗапланированоПоМесяцам.Добавить(новый СборГрафиковОтпусков.ДанныеЗапланированногоОтпуска())
    ;   
;

@НаСервере @ДоступноСКлиента
статический метод ЗаполнитьПредставления(КомпонентДанных: СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков, КоличествоПериодов: Число, КоличествоДнейОбщее: Число)    
    КоличествоПериодов -= 1
    если КоличествоПериодов > 0
        КомпонентДанных.ЗапланированоПредставлениеОбщее = "всего %{КоличествоДнейОбщее}дн"
    ;
    
    для Период = 1 по КоличествоПериодов
        пер КомпонентДанныхПериод = КомпонентДанных.ЗапланированоПоПериодам[Период-1]      
        КомпонентДанныхПериод.ПредставлениеЗначкаОстаток = "еще %{КоличествоДнейОбщее}дн"
        КоличествоДнейОбщее = КоличествоДнейОбщее - КомпонентДанныхПериод.КоличествоДнейВПериоде        
    ;
;

@НаСервере @ДоступноСКлиента
статический метод ДобавитьКомпонентВКоллекцию(ПараметрыПрочтенияДанных: ПараметрыПрочтенияДанных, КомпонентДанных: СборГрафиковОтпусков.ДанныеСоставленияГрафикаОтпусков, ФизическоеЛицоСеанса: ФизическиеЛица.Ссылка, ВариантОтображения: СтатусПланированияГрафикаСотрудника?)
    если ВариантОтображения == Неопределено
        или (ВариантОтображения == СтатусПланированияГрафикаСотрудника.ВРаботе 
                и КомпонентДанных.ЗапланированоСостояниеОбщее != СостояниеГрафикаОтпусков.Утверждено 
                и КомпонентДанных.ЛичныйКабинетСоздан
                и не КомпонентДанных.ОтпускНеПланирует)
        или (ВариантОтображения == СтатусПланированияГрафикаСотрудника.НеПроводится 
                и (КомпонентДанных.ОтпускНеПланирует или не КомпонентДанных.ЛичныйКабинетСоздан))  
        если КомпонентДанных.ФизическоеЛицо == ФизическоеЛицоСеанса
            ПараметрыПрочтенияДанных.КоллекцияДанных.Вставить(0, КомпонентДанных)
        иначе      
            ПараметрыПрочтенияДанных.КоллекцияДанных.Добавить(КомпонентДанных)
        ;
        ПараметрыПрочтенияДанных.КоличествоОтображаемых +=1
    ;    
;

//КонецОбласти