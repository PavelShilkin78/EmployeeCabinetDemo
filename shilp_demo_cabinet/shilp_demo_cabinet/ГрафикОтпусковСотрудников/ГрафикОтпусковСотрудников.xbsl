импорт ГрафикОтпусков
импорт Компания
импорт ФизическиеЛица
импорт СтандартноеПриложение
импорт КонтрольДоступа
импорт ОбщиеСтандартные
импорт ИнтерфейсныеКомпонентыСтандартные
импорт ЛичныеКабинетыПользователей
импорт ВладельцыКабинетов
импорт ОбменДанными
импорт ВебApi

@ВПодсистеме конст ИД_ПОДСИСТЕМЫ = "ГрафикОтпусковСотрудников"

// ПараметрыСеанса

@ВПодсистеме
конст КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: Строка = "ГрафикОтпусковСотрудниковПараметрыСеанса" 

@ВПроекте
структура ПараметрыСеанса
    пер КампанияСоставленияГрафикаОтпусковАктивна: Булево
    пер ГодТекущейКампанииСоставленияГрафикаОтпусков: Число?
    пер ПодразделениеФизическогоЛица: СтруктураПредприятия.Ссылка?
    пер ГрафикОтпусковПредприятияТекущейКампании: ГрафикОтпусковПредприятия.Ссылка?
    пер ГрафикОтпусковПредприятияТекущейКампанииИнициатор: ФизическиеЛица.Ссылка?
    пер ГрафикОтпусковПодразделенияТекущейКампании: ГрафикОтпусковСтруктурнойЕдиницы.Ссылка?
    пер ГрафикОтпусковСотрудникаТекущейКампании: ГрафикОтпусковСотрудника.Ссылка?
;

@ВПроекте
@НаКлиенте
метод ПараметрыСеанса(): ПараметрыСеанса
    возврат ПараметрыСеансаСервис.ПолучитьСервис().ПараметрПоКлючу(КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА) как ПараметрыСеанса
;

@ВПроекте
@НаСервере
метод ПолучитьЗначенияПараметровСеанса(): ПараметрыСеанса
    пер ПараметрыСеанса = новый ПараметрыСеанса() 
    ПараметрыСеанса.КампанияСоставленияГрафикаОтпусковАктивна = Ложь
    исп РезультатГрафикОтпусковПредприятия = СборГрафиковОтпусков.ГрафикОтпусковПредприятияЗапрос()
    для СтрокаРезультатаГрафикОтпусковПредприятия из РезультатГрафикОтпусковПредприятия
        ПараметрыСеанса.КампанияСоставленияГрафикаОтпусковАктивна = (
            СтрокаРезультатаГрафикОтпусковПредприятия.Состояние == СостояниеГрафикаОтпусков.Черновик
            или СтрокаРезультатаГрафикОтпусковПредприятия.Состояние == СостояниеГрафикаОтпусков.ВРаботе
        )
        ПараметрыСеанса.ГодТекущейКампанииСоставленияГрафикаОтпусков = Макс<Число>(СтрокаРезультатаГрафикОтпусковПредприятия.Год, Дата.Сейчас().Год)
        ПараметрыСеанса.ГрафикОтпусковПредприятияТекущейКампании = СтрокаРезультатаГрафикОтпусковПредприятия.Ссылка 
        ПараметрыСеанса.ГрафикОтпусковПредприятияТекущейКампанииИнициатор = СтрокаРезультатаГрафикОтпусковПредприятия.Инициатор
    ;
    пер ФизическоеЛицо = ПользователиСистемы.ТекущееФизическоеЛицо()
    если ФизическоеЛицо != Неопределено
        ЗаполнитьЗначенияПараметровСеансаГрафиковОтпусковАктивнойКампании(ПараметрыСеанса, ФизическоеЛицо)
        ПроверитьЗаполнениеПараметровСеансаГрафиковОтпусковАктивнойКампании(ПараметрыСеанса, ФизическоеЛицо)
    ;
    возврат ПараметрыСеанса
;

@НаСервере
метод ЗаполнитьЗначенияПараметровСеансаГрафиковОтпусковАктивнойКампании(ПараметрыСеанса: ПараметрыСеанса, ФизическоеЛицо: ФизическиеЛица.Ссылка?): ПараметрыСеанса
    пер ЗапросГрафикОтпусковСотрудника = Запрос{
        Выбрать Первые 1 
            ПодразделенияИСотрудники.ФизическоеЛицо Как ФизическоеЛицо,
            ПодразделенияИСотрудники.Подразделение Как Подразделение,
            ГрафикОтпусковСтруктурнойЕдиницыБезГрафикаСотрудника.Ссылка.ЗаменитьNull(Неопределено) Как ГрафикОтпусковСтруктурнойЕдиницы,
            ГрафикОтпусковСотрудника.Ссылка.ЗаменитьNull(Неопределено) Как ГрафикОтпусковСотрудника 
        Из
            ПодразделенияИСотрудники КАК ПодразделенияИСотрудники
            Левое Соединение ГрафикОтпусковСотрудника КАК ГрафикОтпусковСотрудника
                Внутреннее соединение ГрафикОтпусковСтруктурнойЕдиницы КАК ГрафикОтпусковСтруктурнойЕдиницы
                    Внутреннее соединение ГрафикОтпусковПредприятия КАК ГрафикОтпусковПредприятияСсылка
                        ПО ГрафикОтпусковСтруктурнойЕдиницы.ГрафикОтпусковПредприятия == ГрафикОтпусковПредприятияСсылка.Ссылка
                            И ГрафикОтпусковПредприятияСсылка.Ссылка == %{ПараметрыСеанса.ГрафикОтпусковПредприятияТекущейКампании}
                    ПО ГрафикОтпусковСотрудника.ГрафикОтпусковПодразделения == ГрафикОтпусковСтруктурнойЕдиницы.Ссылка
                ПО ПодразделенияИСотрудники.ФизическоеЛицо == ГрафикОтпусковСотрудника.ФизическоеЛицо
            Левое соединение ГрафикОтпусковСтруктурнойЕдиницы КАК ГрафикОтпусковСтруктурнойЕдиницыБезГрафикаСотрудника
                Внутреннее соединение ГрафикОтпусковПредприятия КАК ГрафикОтпусковПредприятияБезГрафикаСотрудника
                    ПО ГрафикОтпусковСтруктурнойЕдиницыБезГрафикаСотрудника.ГрафикОтпусковПредприятия == ГрафикОтпусковПредприятияБезГрафикаСотрудника.Ссылка
                        И ГрафикОтпусковПредприятияБезГрафикаСотрудника.Ссылка == %{ПараметрыСеанса.ГрафикОтпусковПредприятияТекущейКампании}
                ПО ПодразделенияИСотрудники.Подразделение == ГрафикОтпусковСтруктурнойЕдиницыБезГрафикаСотрудника.СтруктурнаяЕдиница 
        Где
            ПодразделенияИСотрудники.ОсновноеМестоРаботы
            И ПодразделенияИСотрудники.ФизическоеЛицо == %ФизическоеЛицо
        }
    исп РезультатГрафикОтпусковСотрудника = ЗапросГрафикОтпусковСотрудника.Выполнить()
    для СтрокаРезультатаГрафикОтпусковСотрудника из РезультатГрафикОтпусковСотрудника 
        ПараметрыСеанса.ПодразделениеФизическогоЛица = СтрокаРезультатаГрафикОтпусковСотрудника.Подразделение
        ПараметрыСеанса.ГрафикОтпусковПодразделенияТекущейКампании = СтрокаРезультатаГрафикОтпусковСотрудника.ГрафикОтпусковСтруктурнойЕдиницы
        ПараметрыСеанса.ГрафикОтпусковСотрудникаТекущейКампании = СтрокаРезультатаГрафикОтпусковСотрудника.ГрафикОтпусковСотрудника 
    ;
    возврат ПараметрыСеанса
;

@НаСервере
метод ПроверитьЗаполнениеПараметровСеансаГрафиковОтпусковАктивнойКампании(ПараметрыСеанса: ПараметрыСеанса, ФизическоеЛицо: ФизическиеЛица.Ссылка?)
    если ПараметрыСеанса.КампанияСоставленияГрафикаОтпусковАктивна
            и ПараметрыСеанса.ГрафикОтпусковПредприятияТекущейКампании != Неопределено
            и ПараметрыСеанса.ПодразделениеФизическогоЛица != Неопределено
        ПроверитьГрафикОтпусковПодразделенияТекущейКампании(ПараметрыСеанса)
        ПроверитьГрафикОтпусковСотрудникаТекущейКампании(ПараметрыСеанса, ФизическоеЛицо)
    ;
;

@НаСервере
метод ПроверитьГрафикОтпусковПодразделенияТекущейКампании(ПараметрыСеанса: ПараметрыСеанса)
    если ПараметрыСеанса.ГрафикОтпусковПодразделенияТекущейКампании == Неопределено
        пер ГрафикПодразделенияОбъект: ГрафикОтпусковСтруктурнойЕдиницы.Объект? = 
            СборГрафиковОтпусков.ГрафикОтпусковСтруктурнойЕдиницы(
                ПараметрыСеанса.ГрафикОтпусковПредприятияТекущейКампании,
                ПараметрыСеанса.ГрафикОтпусковПодразделенияТекущейКампании,
                ПараметрыСеанса.ПодразделениеФизическогоЛица    
            )
        если ГрафикПодразделенияОбъект != Неопределено
            ПараметрыСеанса.ГрафикОтпусковПодразделенияТекущейКампании = 
                ГрафикПодразделенияОбъект.Ссылка
            знч ПодчиненныеПодразделения = 
                СтруктураПредприятия.ПодчиненныеПодразделения(
                    новый Массив<СтруктураПредприятия.Ссылка>([ПараметрыСеанса.ПодразделениеФизическогоЛица])
                )
            для КлючИЗначение из ПодчиненныеПодразделения
                для ПодчиненноеПодразделение из КлючИЗначение.Значение
                    ФоновыеЗадания.Выполнить(&СборГрафиковОтпусков.ГрафикОтпусковСтруктурнойЕдиницы,
                        ПараметрыСеанса.ГрафикОтпусковПредприятияТекущейКампании,
                        Неопределено,
                        ПодчиненноеПодразделение    
                    )
                ; 
            ;
        ;
    ;    
;

@НаСервере
метод ПроверитьГрафикОтпусковСотрудникаТекущейКампании(ПараметрыСеанса: ПараметрыСеанса, ФизическоеЛицо: ФизическиеЛица.Ссылка?)
    если ПараметрыСеанса.ГрафикОтпусковСотрудникаТекущейКампании == Неопределено
        пер ГрафикОтпусковСотрудникаОбъект: ГрафикОтпусковСотрудника.Объект? =
        СборГрафиковОтпусков.ГрафикОтпусковСотрудника(
            ПараметрыСеанса.ГрафикОтпусковПредприятияТекущейКампании, 
            ПараметрыСеанса.ГрафикОтпусковПодразделенияТекущейКампании, 
            ПараметрыСеанса.ПодразделениеФизическогоЛица,
            ФизическоеЛицо
        )        
        ПараметрыСеанса.ГрафикОтпусковСотрудникаТекущейКампании = 
            ГрафикОтпусковСотрудникаОбъект?.Ссылка
        ФоновыеЗадания.Выполнить(
            &СборГрафиковОтпусков.ОбработатьГрафикиОтпусковСотрудников,
            ПараметрыСеанса.ГрафикОтпусковПредприятияТекущейКампании,
            ПараметрыСеанса.ГрафикОтпусковПодразделенияТекущейКампании,
            ПараметрыСеанса.ПодразделениеФизическогоЛица
        )
    ;
    если ПараметрыСеанса.ГрафикОтпусковПодразделенияТекущейКампании != Неопределено
        и ПараметрыСеанса.ГрафикОтпусковСотрудникаТекущейКампании != Неопределено
        и ПараметрыСеанса.ГрафикОтпусковПодразделенияТекущейКампании != МенеджерСущности.ЗначениеРеквизитаОбъекта(ПараметрыСеанса.ГрафикОтпусковСотрудникаТекущейКампании, "ГрафикОтпусковПодразделения")  
        // возможно произошел кадровый перевод сотрудника, актуализируем график 
        исп Транзакции.Начать()
        пер ГрафикОтпусковСотрудникаОбъект = ПараметрыСеанса.ГрафикОтпусковСотрудникаТекущейКампании.ЗагрузитьОбъект(Истина)
        ГрафикОтпусковСотрудникаОбъект.ГрафикОтпусковПодразделения = ПараметрыСеанса.ГрафикОтпусковПодразделенияТекущейКампании    
        ГрафикОтпусковСотрудникаОбъект.Записать()  
    ;  
;

// Конец ПараметрыСеанса

@ВПодсистеме
структура ПериодыОтпускаДляЗапроса
    обз пер ПериодОтпускаСсылка: ПериодыОтпуска.Ссылка?
    обз пер ДатаНачалаПериода: Дата
    обз пер ДатаОкончанияПериода: Дата
    обз пер Удалено: Булево
;

@ВПодсистеме
@НаКлиенте
метод ФормФакторПоШиринеОкнаПриложения(ШиринаОсновногоОкна: Число): ФормФакторГрафикаОтпусков
    пер РазмерПолуинтервала: Число = Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА
    // определим форм-фактор от количества возможных к выводу по ширине окна приложения колонок
    ШиринаОсновногоОкна -= СтандартноеПриложение.ПараметрыСеанса().НастройкиИнтерфейса.ШиринаПанелиНавигации
    знч ШиринаНедостаточнаДляФормФактораПолный: Булево = ШиринаОсновногоОкна < 90*РазмерПолуинтервала 
    знч ШиринаКолонкиМесяца: Число = ШиринаНедостаточнаДляФормФактораПолный ? 20*РазмерПолуинтервала : 8*РазмерПолуинтервала
    ШиринаОсновногоОкна -= ШиринаНедостаточнаДляФормФактораПолный ? 18*РазмерПолуинтервала : 40*РазмерПолуинтервала // колонка ФизическоеЛицо
    ШиринаОсновногоОкна -= 15*РазмерПолуинтервала // колонка ОтпускНеПланируетЗначок
    пер КоличествоКолонокКВыводу = ШиринаОсновногоОкна / ШиринаКолонкиМесяца
    КоличествоКолонокКВыводу = КоличествоКолонокКВыводу.ЦелаяЧасть()
    если КоличествоКолонокКВыводу >= 12 
        возврат ФормФакторГрафикаОтпусков.Полный
    иначе если КоличествоКолонокКВыводу < 3  
        возврат ФормФакторГрафикаОтпусков.Одинарный    
    иначе 
        возврат ФормФакторГрафикаОтпусков.Сокращенный
    ;
;

@ВПодсистеме
@НаКлиенте
метод ВвестиПериод(Данные: Массив<СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска?>)
    пер КомпонентДанных: СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска
    КомпонентДанных.Добавлено = Истина
    КомпонентДанных.Удалено = Ложь
    если Данные.Пусто()
        КомпонентДанных.ДатаНачалаПериода = Дата.Сейчас()
    иначе                            
        пер ПредыдущийЭлемент = Данные.Последний()
        КомпонентДанных.ДатаНачалаПериода = ПредыдущийЭлемент.ДатаОкончанияПериода < Дата.Сейчас() 
                                            ? Дата.Сейчас() : ПредыдущийЭлемент.ДатаОкончанияПериода.ДобавитьДни(1)
    ;
    КомпонентДанных.ДатаОкончанияПериода = КомпонентДанных.ДатаНачалаПериода   
    КомпонентДанных.ПериодЗапланированногоОтпуска = новый ЗакрытыйДиапазон<Дата>(КомпонентДанных.ДатаНачалаПериода, КомпонентДанных.ДатаОкончанияПериода)
    КомпонентДанных.СостояниеЗапланированногоОтпуска = СостояниеГрафикаОтпусков.Черновик
    Данные.Добавить(КомпонентДанных)
;

@ВПроекте
@НаКлиенте
метод ПоказатьСоставлениеГрафикаОтпусковАдминистраторуИИнициатору(): Булево
    если ГрафикОтпусков.ПараметрыСеанса().ФункциональныеОпции.ИспользованиеПодсистемы
        и ГрафикОтпусковСотрудников.ПараметрыСеанса().КампанияСоставленияГрафикаОтпусковАктивна
        и (ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо == ПараметрыСеанса().ГрафикОтпусковПредприятияТекущейКампанииИнициатор
            или ВладельцыКабинетов.ПараметрыСеанса().ТекущийПользовательАдминистраторАбонента)
        возврат Истина    
    ;
    возврат Ложь      
;

@ВПроекте
@НаКлиенте
метод ПоказатьСоставлениеГрафикаОтпусковОтветственному(): Булево
    если ГрафикОтпусков.ПараметрыСеанса().ФункциональныеОпции.ИспользованиеПодсистемы
        и ГрафикОтпусковСотрудников.ПараметрыСеанса().КампанияСоставленияГрафикаОтпусковАктивна 
        и (не СборГрафиковОтпусков.ГрафикиОтпусковСтруктурнойЕдиницыОтветственного(ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо, ПараметрыСеанса().ГрафикОтпусковПредприятияТекущейКампании).Пусто())
        возврат Истина    
    ;
    возврат Ложь      
;

@ВПроекте
@НаКлиенте
метод ПоказатьПредупреждениеГрафикОтпусковУстановкаОтветственных(): Булево
    если ГрафикОтпусков.ПараметрыСеанса().ФункциональныеОпции.ИспользованиеПодсистемы
        и ГрафикОтпусковСотрудников.ПараметрыСеанса().КампанияСоставленияГрафикаОтпусковАктивна
        и (ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо == ПараметрыСеанса().ГрафикОтпусковПредприятияТекущейКампанииИнициатор
            или ВладельцыКабинетов.ПараметрыСеанса().ТекущийПользовательАдминистраторАбонента)
        и (не СборГрафиковОтпусков.ГрафикиОтпусковСтруктурнойЕдиницыОтветственного(Неопределено, ПараметрыСеанса().ГрафикОтпусковПредприятияТекущейКампании).Пусто())
        возврат Истина
    ;
    возврат Ложь
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ГрафикОтпусковСтруктурнойЕдиницыУтвержден(ГрафикОтпусковСтруктурнойЕдиницы: ГрафикОтпусковСтруктурнойЕдиницы.Ссылка?): Булево
    если ГрафикОтпусковСтруктурнойЕдиницы != Неопределено
        возврат ГрафикОтпусковСтруктурнойЕдиницы.ЗагрузитьОбъект(Ложь).Состояние == СостояниеГрафикаОтпусков.Утверждено
    ;
    возврат Ложь
;

@ВПроекте
@НаСервере
метод ОбработатьАктивациюЛичногоКабинетаРуководителя(ФизическоеЛицо: ФизическиеЛица.Ссылка?)
    ФоновыеЗадания.Выполнить(&ИзменитьСостоянияПериодовОтпускаПриАктивацииЛичногоКабинетаРуководителя, ФизическоеЛицо, СостояниеГрафикаОтпусков.Черновик)
;

@НаСервере
метод ИзменитьСостоянияПериодовОтпускаПриАктивацииЛичногоКабинетаРуководителя(ФизическоеЛицо: ФизическиеЛица.Ссылка?, Состояние: СостояниеГрафикаОтпусков)
    знч ЭтоРуководитель: Булево = не ОрганизационнаяСтруктура.ПодразделенияРуководителя(ФизическоеЛицо).Пусто()
    если не ЭтоРуководитель 
        возврат    
    ;
    пер КампанияСоставленияГрафикаОтпусковАктивна: Булево
    пер ГрафикОтпусковПредприятия: ГрафикОтпусковПредприятия.Ссылка?
    исп РезультатГрафикОтпусковПредприятия = СборГрафиковОтпусков.ГрафикОтпусковПредприятияЗапрос()
    для СтрокаРезультатаГрафикОтпусковПредприятия из РезультатГрафикОтпусковПредприятия
        КампанияСоставленияГрафикаОтпусковАктивна = (
            СтрокаРезультатаГрафикОтпусковПредприятия.Состояние == СостояниеГрафикаОтпусков.Черновик
            или СтрокаРезультатаГрафикОтпусковПредприятия.Состояние == СостояниеГрафикаОтпусков.ВРаботе
        )                
        ГрафикОтпусковПредприятия = СтрокаРезультатаГрафикОтпусковПредприятия.Ссылка
    ;  
    если КампанияСоставленияГрафикаОтпусковАктивна и ГрафикОтпусковПредприятия != Неопределено
        пер ГрафикиПодразделения: Массив<ГрафикОтпусковСтруктурнойЕдиницы.Ссылка>
        исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
        знч Запрос = Запрос{
            Выбрать 
                ПериодыОтпуска.Ссылка Как ПериодОтпуска,
                ПериодыОтпуска.Состояние Как Состояние,
                ГрафикОтпусковСтруктурнойЕдиницы.Ссылка Как ГрафикОтпусковСтруктурнойЕдиницы
            Из 
            ПериодыОтпуска Как ПериодыОтпуска
            Внутреннее Соединение ГрафикОтпусковСотрудника КАК ГрафикОтпусковСотрудника
                Внутреннее соединение ГрафикОтпусковСтруктурнойЕдиницы КАК ГрафикОтпусковСтруктурнойЕдиницы
                    Внутреннее соединение ГрафикОтпусковПредприятия КАК ГрафикОтпусковПредприятияСсылка
                    По ГрафикОтпусковСтруктурнойЕдиницы.ГрафикОтпусковПредприятия == ГрафикОтпусковПредприятияСсылка.Ссылка
                        И ГрафикОтпусковПредприятияСсылка.Ссылка == %ГрафикОтпусковПредприятия
                По ГрафикОтпусковСотрудника.ГрафикОтпусковПодразделения == ГрафикОтпусковСтруктурнойЕдиницы.Ссылка
                    и ГрафикОтпусковСтруктурнойЕдиницы.Ответственный == %ФизическоеЛицо
            По ПериодыОтпуска.ФизическоеЛицо == ГрафикОтпусковСотрудника.ФизическоеЛицо
        Где
            ПериодыОтпуска.ДатаНачала.Год == ГрафикОтпусковПредприятия.Год
            и ПериодыОтпуска.Состояние != %Состояние            
        }
        исп Результат = Запрос.Выполнить() 
        для СтрокаРезультата из Результат
            исп Транзакции.Начать()
            пер ПериодОтпуска = СтрокаРезультата.ПериодОтпуска.ЗагрузитьОбъект(Истина)
            ПериодОтпуска.Состояние = Состояние
            ПериодОтпуска.Записать()
            если не ГрафикиПодразделения.Содержит(СтрокаРезультата.ГрафикОтпусковСтруктурнойЕдиницы)
                ГрафикиПодразделения.Добавить(СтрокаРезультата.ГрафикОтпусковСтруктурнойЕдиницы)        
            ;
        ;
        для ГрафикОтпусковСтруктурнойЕдиницы из ГрафикиПодразделения
            исп Транзакции.Начать()
            ГрафикОтпусковСтруктурнойЕдиницы.ЗагрузитьОбъект(Истина).Записать()  
        ;
        ПривилегированныйРежим.Закрыть()
    ;
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
статический метод ПотенциальныеОтветственныеЗаСбор(): ЧитаемаяКоллекция<ФизическиеЛица.Ссылка>
    знч Ответственные = новый Множество<ФизическиеЛица.Ссылка>()
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч Запрос = Запрос{
        Выбрать 
            ПодразделенияИСотрудники.ФизическоеЛицо Как ФизическоеЛицо
        Из
            ПодразделенияИСотрудники КАК ПодразделенияИСотрудники
            Левое Соединение ЛичныеКабинеты Как ЛичныеКабинеты
                ПО ПодразделенияИСотрудники.ФизическоеЛицо == ЛичныеКабинеты.ФизическоеЛицо
        Где
            ПодразделенияИСотрудники.ОсновноеМестоРаботы
            и ЛичныеКабинеты.Состояние.ЗаменитьNull(СостоянияЛичногоКабинета.НеСоздан) != СостоянияЛичногоКабинета.НеСоздан
		    и ЛичныеКабинеты.Доступность.ЗаменитьNull(Неопределено) == ДоступностьЛичногоКабинета.Включен
        Упорядочить по
            ПодразделенияИСотрудники.ФизическоеЛицо.Представление.ЗаменитьNull("")        
    }
    исп Результат = Запрос.Выполнить()
    ПривилегированныйРежим.Закрыть()
    для СтрокаРезультата из Результат
        Ответственные.Добавить(СтрокаРезультата.ФизическоеЛицо)
    ;
    возврат Ответственные
;

// ОбработчикиОбновления

@ВПодсистеме
@НаСервере
метод ЗаполнитьНастройкиГрафиковОтпусковПоУмолчанию()
    знч Настройки: НастройкиГрафиковОтпусков.ДанныеНастроек
    Настройки.СостояниеГрафикаОтпусковСтруктурнойЕдиницыПоУмолчанию = СостояниеГрафикаОтпусков.ВРаботе
    НастройкиГрафиковОтпусков.ЗаполнитьДанныеНастроекПриОбновлении(Настройки)    
;

@ВПодсистеме
@НаСервере
метод СборГрафиковОтпусковОбновитьИнформационныеСистемыРазделителейДанныхГрафиковОтпусковПредприятия()
    знч ДанныеИнформационныхСистем = ИнформационныеСистемы.ДанныеИнформационныхСистем()
    если ДанныеИнформационныхСистем.Размер() == 1
        // если в "Информационные системы" одна запись, проверяем наличие разделителя ГрафикОтпусковПредприятия, 
        // иначе определить систему инициатора кампании по сбору графиков не представляется возможным
        для ДанныеИнформационнойСистемы из ДанныеИнформационныхСистем
            если ДанныеИнформационнойСистемы.Значение.ВидПриложения == ВидПриложения.Hrm
                // заполнение разделителя справедливо для ГрафикОтпусковПредприятия, инициированных из HRM (например, при обновлении с 6.0.x на 7.0.x)
                знч Запрос = Запрос{
                    Выбрать 
                        ГрафикОтпусковПредприятия.Ссылка Как ГрафикОтпусковПредприятияСсылка
                    Из
                        ГрафикОтпусковПредприятия КАК ГрафикОтпусковПредприятия
                        Левое Соединение ИнформационныеСистемыРазделителейДанных Как ИнформационныеСистемыРазделителейДанных
                        По ГрафикОтпусковПредприятия.Ссылка == ИнформационныеСистемыРазделителейДанных.РазделительВыгружаемыхДанных
                    Где
                        ГрафикОтпусковПредприятия.Состояние В (СостояниеГрафикаОтпусков.Черновик, СостояниеГрафикаОтпусков.ВРаботе)
                        И ИнформационныеСистемыРазделителейДанных.РазделительВыгружаемыхДанных Есть Null    
                }
                исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
                исп Результат = Запрос.Выполнить()
                ПривилегированныйРежим.Закрыть()
                для СтрокаРезультата из Результат
                    // активные Графики отпусков предприятия, отсутствующие в "Информационные системы разделителей данных", указываем как разделители
                    ИнформационныеСистемыРазделителейДанных.ОбновитьИнформационныеСистемыРазделителейДанных(
                        СтрокаРезультата.ГрафикОтпусковПредприятияСсылка,
                        ДанныеИнформационнойСистемы.Ключ
                    )
                ;
            ;
        ;
    ;
;

@ВПодсистеме
@НаСервере
метод ГрафикОтпусковПредприятияЗаполнитьРеквизитИнформационнаяСистемаИнициатор()
    знч ДанныеИнформационныхСистем = ИнформационныеСистемы.ДанныеИнформационныхСистем()
    если ДанныеИнформационныхСистем.Размер() == 1
        // если в "Информационные системы" одна запись, проверяем заполненность реквизита, 
        // иначе определить систему инициатора кампании по сбору графиков не представляется возможным
        для ДанныеИнформационнойСистемы из ДанныеИнформационныхСистем
            если ДанныеИнформационнойСистемы.Значение.ВидПриложения == ВидПриложения.Hrm
                знч Запрос = Запрос{
                    Выбрать 
                        ГрафикОтпусковПредприятия.Ссылка Как ГрафикОтпусковПредприятияСсылка
                    Из
                        ГрафикОтпусковПредприятия КАК ГрафикОтпусковПредприятия
                    Где
                        ГрафикОтпусковПредприятия.ИнформационнаяСистемаИнициатор == Неопределено
                }
                исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
                исп Результат = Запрос.Выполнить()
                ПривилегированныйРежим.Закрыть()
                для СтрокаРезультата из Результат
                    исп Транзакции.Начать()
                    пер ГрафикОтпусковПредприятияОбъект = СтрокаРезультата.ГрафикОтпусковПредприятияСсылка.ЗагрузитьОбъект(Истина)
                    ГрафикОтпусковПредприятияОбъект.ИнформационнаяСистемаИнициатор = ДанныеИнформационнойСистемы.Ключ
                    ГрафикОтпусковПредприятияОбъект.Записать()
                ;
            ;
        ;
    ;
;

// Конец ОбработчикиОбновления

@ВПодсистеме
@НаСервере
метод ОбработатьГрафикиОтпусковПредприятияИнициированныеИзHRM()
    знч ДанныеИнформационныхСистем = ИнформационныеСистемы.ДанныеИнформационныхСистем()
    если ДанныеИнформационныхСистем.Размер() > 1
        // если в "Информационные системы" несколько записей, проверяем, присутствует ли среди них HR 
        // и регистрируем к отправке активные корневые сборы из HRM
        для ДанныеИнформационнойСистемы из ДанныеИнформационныхСистем
            если ДанныеИнформационнойСистемы.Значение.ВидПриложения == ВидПриложения.Hr
                знч Запрос = Запрос{
                    Выбрать 
                        ГрафикОтпусковПредприятия.Ссылка Как ГрафикОтпусковПредприятияСсылка,
                        ГрафикОтпусковПредприятия.Состояние Как Состояние, 
                        ГрафикОтпусковПредприятия.ИнформационнаяСистемаИнициатор Как ИнформационнаяСистемаИнициатор,
                        ИнформационныеСистемы.ВидПриложения.ЗаменитьNull(Неопределено) Как ИнформационнаяСистемаИнициаторВидПриложения
                        
                    Из
                        ГрафикОтпусковПредприятия КАК ГрафикОтпусковПредприятия
                        Левое соединение ИнформационныеСистемы КАК ИнформационныеСистемы
                            ПО ГрафикОтпусковПредприятия.ИнформационнаяСистемаИнициатор == ИнформационныеСистемы.Ссылка
                    Где
                        ГрафикОтпусковПредприятия.ИнформационнаяСистемаИнициатор != Неопределено
                        И ГрафикОтпусковПредприятия.Состояние В(СостояниеГрафикаОтпусков.Черновик, СостояниеГрафикаОтпусков.ВРаботе)
                }
                исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
                исп Результат = Запрос.Выполнить()
                ПривилегированныйРежим.Закрыть()
                для СтрокаРезультата из Результат
                    знч СервисРегистрацииИзменений = ГрафикОтпусковРегистрацияИзменений.ПолучитьСервис()
                    если СервисРегистрацииИзменений.ГрафикОтпусковПредприятияТребуетсяРегистрация(СтрокаРезультата.Состояние, СтрокаРезультата.ИнформационнаяСистемаИнициаторВидПриложения)
                        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(СтрокаРезультата.ГрафикОтпусковПредприятияСсылка, Истина)
                        РегистрацияИзменений.ЗарегистрироватьИзменение(
                            СтрокаРезультата.ГрафикОтпусковПредприятияСсылка,
                            СервисРегистрацииИзменений.ГрафикОтпусковПредприятияРазделитель(СтрокаРезультата.Состояние))
                    ;
                ;
            ;
        ;
    ;
;