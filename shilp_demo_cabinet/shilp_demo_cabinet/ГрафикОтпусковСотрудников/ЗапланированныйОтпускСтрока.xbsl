импорт ИнтерфейсныеКомпонентыСтандартные
импорт Компания
импорт КонтрольДоступа
импорт ОбщиеСтандартные
импорт Отпуск
импорт Отсутствия
импорт ФизическиеЛица
импорт ЛичныеКабинетыПользователей
импорт ГрафикОтпусков

метод ПриИзмененииПериодаЗапланированногоОтпуска(Источник: ПолеВвода<ЗакрытыйДиапазон<Дата>?>, Событие: СобытиеПриИзменении<ЗакрытыйДиапазон<Дата>?>)
    если ДанныеСтроки.ПериодЗапланированногоОтпуска != Неопределено
        ДанныеСтроки.ДатаНачалаПериода = ДанныеСтроки.ПериодЗапланированногоОтпуска.От
        ДанныеСтроки.ДатаОкончанияПериода = ДанныеСтроки.ПериодЗапланированногоОтпуска.До
        ДанныеСтроки.СостояниеЗапланированногоОтпуска = СостояниеГрафикаОтпусков.Черновик
    ;
    ПроверитьЗаполнение()
;

метод КоллекцияИсточника(): Массив<СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска?>
    возврат СписокВладелец.Источник.Данные
;

метод ПредставлениеПериодОтпуска(ДанныеСтроки: СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска): Строка
    пер ГодПланирования = ГрафикОтпусковСотрудников.ПараметрыСеанса().ГодТекущейКампанииСоставленияГрафикаОтпусков
    если ДлительностьОтпуска.КалендарныхДней <= 1 
        возврат ДанныеСтроки.ДатаНачалаПериода.Представление("dd MMMM")
    иначе если ДанныеСтроки.ДатаНачалаПериода.Год == ГодПланирования и ДанныеСтроки.ДатаОкончанияПериода.Год == ГодПланирования
            и ДанныеСтроки.ДатаНачалаПериода.Месяц == ДанныеСтроки.ДатаОкончанияПериода.Месяц
        возврат "%{ДанныеСтроки.ДатаНачалаПериода.Представление("dd")}-%{ДанныеСтроки.ДатаОкончанияПериода.Представление("dd")}" +
                " %{МенеджерСтрок.Просклонять(ДанныеСтроки.ДатаНачалаПериода.Представление("MMMM"), МенеджерСтрок.Падежи.Родительный)}"
    иначе
        возврат (ДанныеСтроки.ДатаНачалаПериода.Год != ГодПланирования 
                ? "%{ДанныеСтроки.ДатаНачалаПериода.Представление("dd MMMM yyyy")}" : "%{ДанныеСтроки.ДатаНачалаПериода.Представление("dd MMMM")}")
                + " - " +
                (ДанныеСтроки.ДатаОкончанияПериода.Год != ГодПланирования 
                ? "%{ДанныеСтроки.ДатаОкончанияПериода.Представление("dd MMMM yyyy")}" : "%{ДанныеСтроки.ДатаОкончанияПериода.Представление("dd MMMM")}")
    ;          
;

метод ВвестиПериодВидимость(ДанныеСтроки: СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска): Булево
    возврат не КоллекцияИсточника().Пусто() и ДанныеСтроки == КоллекцияИсточника().Последний()
;

метод ВвестиПериодПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ГрафикОтпусковСотрудников.ВвестиПериод(КоллекцияИсточника())      
;

метод КартинкаУдалитьПриНажатии(Источник: Картинка, Событие: СобытиеПриНажатии)
    ДанныеСтроки.Удалено = Истина
    если ДанныеСтроки.Добавлено и ДанныеСтроки.Удалено
        КоллекцияИсточника().Удалить(ДанныеСтроки)
    ;
;

метод СогласоватьПриНажатии(Источник: Надпись, Событие: СобытиеПриНажатии)
    если КомпонентВладелец.ДанныеСоставленияГрафикаОтпусков.ОтпускНеПланирует
        или КомпонентВладелец.ДанныеСоставленияГрафикаОтпусков.ПервичноеСостояниеКампанииПодразделения == СостояниеГрафикаОтпусков.Утверждено
        возврат
    ;
    если КомпонентВладелец.ДанныеСоставленияГрафикаОтпусков.ОтветственныйГрафикаСтруктурнойЕдиницы != ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
        возврат
    ;
    СборГрафиковОтпусков.ЗаполнитьПунктыМенюСогласования(Согласовать, ДанныеСтроки.СостояниеЗапланированногоОтпуска)
    Согласовать.Открыть()
;

метод КартинкаСогласоватьВидимость(): Булево
    если КомпонентВладелец.ДанныеСоставленияГрафикаОтпусков.ОтпускНеПланирует
        или КомпонентВладелец.ДанныеСоставленияГрафикаОтпусков.ПервичноеСостояниеКампанииПодразделения == СостояниеГрафикаОтпусков.Утверждено
        или КомпонентВладелец.ДанныеСоставленияГрафикаОтпусков.ОтветственныйГрафикаСтруктурнойЕдиницы != ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо 
        возврат Ложь
    ;
    возврат Истина    
;

метод КартинкаСогласоватьПриНажатии(Источник: Картинка, Событие: СобытиеПриНажатии)
    СборГрафиковОтпусков.ЗаполнитьПунктыМенюСогласования(
        Согласовать, 
        ДанныеСтроки.СостояниеЗапланированногоОтпуска
    )
    Согласовать.Открыть()    
;

метод СогласоватьПриВыбореЭлемента(Компонент: ВсплывающееМеню, СобытиеСДанными: СобытиеСДанными<ЭлементМеню>)
    пер СостояниеСогласования = СобытиеСДанными.Данные.ДополнительныеПараметры как СостояниеГрафикаОтпусков
    Согласовать.Закрыть()
    пер ПериодыОтпускаСсылка: ПериодыОтпуска.Ссылка? = ДанныеСтроки.ПериодОтпускаСсылка 
    если ПериодыОтпускаСсылка != Неопределено
        пер ПериодыОтпуска = новый Массив<ПериодыОтпуска.Ссылка>([ПериодыОтпускаСсылка])
        если не ПериодыОтпуска.Пусто()
            СборГрафиковОтпусков.ИзменитьСостояниеПериодовОтпуска(
                СостояниеСогласования, 
                ПериодыОтпуска)
            ДанныеСтроки.СостояниеЗапланированногоОтпуска =
                СостояниеСогласования
            ИзмененЗапланированныйОтпускФизическогоЛица.Оповестить()
        ;
    ;
;

@ВПодсистеме
метод ПроверитьЗаполнение(): Булево
    пер РезультатПроверки = ПроверитьПериод()
    ДанныеСтроки.ОшибкаЗаполнения = не РезультатПроверки
    возврат РезультатПроверки
;

метод ПроверитьПериод(): Булево
    пер РезультатПроверки = Истина
    РезультатПроверкиЗаполненияПериода = ""
    если не ПериодЗаполнен()
        РезультатПроверкиЗаполненияПериода = "Не заполнен период"
        РезультатПроверки = Ложь
    иначе если ПрошедшийПериод()
        РезультатПроверкиЗаполненияПериода = "Дата начала меньше текущей даты"
        РезультатПроверки = Ложь
    иначе 
        пер ПересекающиесяПериоды: Строка =  ПересекающиесяПериоды(ДанныеСтроки.ПериодЗапланированногоОтпуска?.От, ДанныеСтроки.ПериодЗапланированногоОтпуска?.До, ФизическоеЛицо)
        пер ПересекающиесяПлановыеПериоды = ПересекающиесяПлановыеПериоды(ДанныеСтроки, КомпонентВладелец.КоллекцияИсточника(), ДанныеСтроки.ПериодЗапланированногоОтпуска?.От, ДанныеСтроки.ПериодЗапланированногоОтпуска?.До)
        если не ПересекающиесяПериоды.Пусто()
            РезультатПроверкиЗаполненияПериода = ПересекающиесяПериоды
            РезультатПроверки = Ложь
        иначе если не ПересекающиесяПлановыеПериоды.Пусто()
            РезультатПроверкиЗаполненияПериода = ПересекающиесяПлановыеПериоды
            РезультатПроверки = Ложь
        ;
    ;
    возврат РезультатПроверки
;

метод ПериодЗаполнен(): Булево
    возврат ДанныеСтроки.ПериодЗапланированногоОтпуска != Неопределено
;

метод ПрошедшийПериод(): Булево
    возврат ДанныеСтроки.ПериодЗапланированногоОтпуска.От < Дата.Сейчас()
;

метод ПериодОтсутствияСообщениеОбОшибкеВвода(): Строка
    пер СообщениеОшибка: Строка
    пер ГодПланирования = ГрафикОтпусковСотрудников.ПараметрыСеанса().ГодТекущейКампанииСоставленияГрафикаОтпусков
    если РезультатПроверкиЗаполненияПериода.Пусто()
        если ДанныеСтроки.ДатаНачалаПериода.Год != ГодПланирования и ДанныеСтроки.ДатаОкончанияПериода.Год != ГодПланирования
            СообщениеОшибка = "Период отпуска должен включать год планирования текущей кампании составления графика отпусков"
        иначе если ДанныеСтроки.ДатаНачалаПериода.Год != ГодПланирования или ДанныеСтроки.ДатаОкончанияПериода.Год != ГодПланирования
            СообщениеОшибка = "Год %{ДанныеСтроки.ДатаНачалаПериода.Год != ГодПланирования ? "начала":"окончания"} периода отпуска должен соответствовать году планирования"
        иначе если не Отпуск.ПроверитьНаличиеРабочихДнейВОтпуске(ДанныеСтроки.ПериодЗапланированногоОтпуска, НастройкиОтпусков, ФизическоеЛицо)
            СообщениеОшибка = "Период отпуска должен включать хотя бы один рабочий день"
        иначе если не КомпонентВладелец.ОтпускНеМенее14ДнейПрисутствуетВСписке 
            и ДанныеСтроки == ПоследнийВидимый()
            если не Отпуск.ПроверитьПродолжительностьОтпуска(ДанныеСтроки.ПериодЗапланированногоОтпуска, НастройкиОтпусков, ПраздничныеДни, ДопустимаяПродолжнительностьОтпускаМенее14Дней)
                СообщениеОшибка = ПредставлениеПериода()
                пер ДопустимаяПродолжительность = ДопустимаяПродолжнительностьОтпускаМенее14Дней
                если ДопустимаяПродолжительность == 0
                    СообщениеОшибка += Символы.НОВАЯ_СТРОКА + "Можно взять не менее 14 дней отпуска, чтобы одна часть отпуска была 14 дней (ст. 125 ТК РФ)"
                иначе
                    СообщениеОшибка += Символы.НОВАЯ_СТРОКА + "Можно взять не менее 14 дней отпуска, или не более %ДопустимаяПродолжительность дней, чтобы одна часть отпуска была 14 дней (ст. 125 ТК РФ)"
                ;
            ;
        иначе если ОстатокОтпускаНаДатуНачала != Неопределено
                и НастройкиОтпусков.ОграничиватьКоличествоДнейОтпускаАвансом
                и ДлительностьОтпуска.КалендарныхДней > НастройкиОтпусков.МаксимальноеКоличествоДнейОтпускаАвансом + ОстатокОтпускаНаДатуНачала
            СообщениеОшибка = ПредставлениеПериода()
            СообщениеОшибка += ", из них %{ДлительностьОтпуска.КалендарныхДней - (ОстатокОтпускаНаДатуНачала)} авансом"
            если НастройкиОтпусков.МаксимальноеКоличествоДнейОтпускаАвансом == 0
                СообщениеОшибка += Символы.НОВАЯ_СТРОКА + "Отпуск авансом не предоставляется"
            иначе
                пер КоличествоДнейОтпускаАвансом: Строка = (НастройкиОтпусков.МаксимальноеКоличествоДнейОтпускаАвансом).ВСтроку() + " " + МенеджерСтрок.ТекстПоКоличеству("день", НастройкиОтпусков.МаксимальноеКоличествоДнейОтпускаАвансом)
                СообщениеОшибка += Символы.НОВАЯ_СТРОКА + "Можно взять не более чем %КоличествоДнейОтпускаАвансом отпуска авансом"
            ;
        ; 
    иначе    
        СообщениеОшибка = РезультатПроверкиЗаполненияПериода
    ;
    возврат СообщениеОшибка
;

метод ПериодОтпускаРезультатПроверкиДанных(): РезультатПроверкиДанных
    если не СообщениеОбОшибкеВвода.Пусто()
        возврат РезультатПроверкиДанных.Ошибка
    ;
    
    возврат РезультатПроверкиДанных.Отсутствует
;

метод ПоследнийВидимый(): СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска
    пер СтрокаДанные: СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска
    для СтрокаКоллекции из КоллекцияИсточника()
        если СтрокаКоллекции.Удалено
            продолжить
        ;    
        СтрокаДанные = СтрокаКоллекции
    ;  
    возврат СтрокаДанные  
;

метод ОсновнаяГруппаСтрокиСтатусВысотаСтроки(): Число
    пер ВысотаПоляВвода:Число = 4*Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА
    пер ВысотаСтроки:Число = 3*Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА
    пер ДлинаСтроки: Число = 5*Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА 
    пер ДлинаТекста: Число = СообщениеОбОшибкеВвода.Длина() + ПредставлениеПериода.Длина() 
    ДлинаТекста += ФизическоеЛицо == КонтрольДоступа.ПараметрыСеанса().ФизлицоТекущегоПользователя  ? ДлинаСтроки : 0
    возврат ((ДлинаТекста / ДлинаСтроки).Округлить(РежимОкругления.Вверх) * ВысотаСтроки) + ВысотаПоляВвода
;

//Область СлужебныеПроцедурыИФункции
@ВПодсистеме
@НаСервере @ДоступноСКлиента
статический метод ПересекающиесяПериоды(ДатаНачала: Дата?, ДатаОкончания: Дата?, ФизическоеЛицо: ФизическиеЛица.Ссылка?): Строка
    возврат Отсутствия.ПересекающиесяПериоды(
        Организации = новый Массив<Организации.Ссылка>(),
        ДатаНачала = ДатаНачала.НачалоДня(),
        ДатаОкончания =  ДатаОкончания.КонецДня(), 
        Причина = ВидыОтсутствий.Отпуск, 
        ФизическоеЛицо = ФизическоеЛицо, 
        ИсключаемыеСсылки = Неопределено).Ошибки
;

@ВПодсистеме 
@НаСервере @ДоступноСКлиента
статический метод ПересекающиесяПлановыеПериоды(ДанныеСтроки: СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска, КоллекцияДанных: ЧитаемыйМассив<СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска?>, ДатаНачала: Дата, ДатаОкончания: Дата): Строка
    пер ПредставлениеПериода: Строка
    если КоллекцияДанных.Размер() < 2
        возврат ПредставлениеПериода
    ;
    пер НесколькоПериодов = Ложь
    для СтрокаКоллекции из КоллекцияДанных
        пер СтрокаДанные: СборГрафиковОтпусков.ПериодыЗапланированногоОтпуска = СтрокаКоллекции
        если СтрокаДанные == ДанныеСтроки
            продолжить
        ;
        если СтрокаДанные.Удалено или СтрокаДанные.ДатаНачалаПериода >= ДатаОкончания или СтрокаДанные.ДатаОкончанияПериода <= ДатаНачала    
            продолжить
        ;
        
        если не ПредставлениеПериода.Пусто()
            ПредставлениеПериода += ", "
            НесколькоПериодов = Истина
        ;
        ПредставлениеПериода += МенеджерДат.ПредставлениеПериода(СтрокаДанные.ДатаНачалаПериода, СтрокаДанные.ДатаОкончанияПериода)
    ; 
    если не ПредставлениеПериода.Пусто()
        ПредставлениеПериода = (НесколькоПериодов ? "Уже заполнены плановые отпуска " : "Уже заполнен плановый отпуск ") + ПредставлениеПериода
    ;
    возврат ПредставлениеПериода
;

метод ПредставлениеПериода(ПоказыватьОстатокОтпуска: Булево = Ложь, ПоказыватьПраздничныеДни: Булево = Ложь): Строка
    пер ПродолжительностьПредставление: Строка
    если РезультатПроверкиЗаполненияПериода.Пусто()
        ПродолжительностьПредставление = (ДлительностьОтпуска.КалендарныхДней - ДлительностьОтпуска.ПраздничныхДней).ВСтроку() + " " + МенеджерСтрок.ТекстПоКоличеству("день", ДлительностьОтпуска.КалендарныхДней - ДлительностьОтпуска.ПраздничныхДней)
        если ПоказыватьПраздничныеДни
                и ДлительностьОтпуска.ПраздничныхДней > 0
            ПродолжительностьПредставление += ", в том числе " + ДлительностьОтпуска.ПраздничныхДней.ВСтроку() + " " + МенеджерСтрок.ТекстПоКоличеству("праздничный день", ДлительностьОтпуска.ПраздничныхДней) + (ДлительностьОтпуска.ПраздничныхДней == 1 ? " который не оплачивается" : " которые не оплачиваются")
        ;   
        если ПоказыватьОстатокОтпуска
                и ДлительностьОтпуска.КалендарныхДней != 0
                и не (ДанныеСтроки.ПериодЗапланированногоОтпуска != Неопределено и ДанныеСтроки.ПериодЗапланированногоОтпуска.От <= Дата.Сейчас())
            если ОстатокОтпускаНаДатуНачала == Неопределено
                ПродолжительностьПредставление += ". Пока не ясно сколько дней отпуска можно взять."
            иначе
                знч ФорматнаяСтрока = "д ММММ"
                пер ДатаНачала: Строка = МенеджерДат.ФорматДаты(ДанныеСтроки.ПериодЗапланированногоОтпуска.От, ФорматнаяСтрока)
                пер КоличествоДней: Строка = (ОстатокОтпускаНаДатуНачала!).ВСтроку() + " " + МенеджерСтрок.ТекстПоКоличеству("день", ОстатокОтпускаНаДатуНачала!) 
                ПродолжительностьПредставление += ". На %ДатаНачала"
                ПродолжительностьПредставление += ФизическоеЛицо == ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо 
                                                    ? " вы будете":" будет"
                если ОстатокОтпускаНаДатуНачала! >= ДлительностьОтпуска.КалендарныхДней - ДлительностьОтпуска.ПраздничныхДней
                    ПродолжительностьПредставление += " иметь право на %КоличествоДней отпуска"
                иначе
                    ПродолжительностьПредставление += " иметь право только на %КоличествоДней отпуска"
                ;
            ;
        ;
    ;
    возврат ПродолжительностьПредставление  
;

метод ОстатокОтпускаНаДатуНачала(): Число?
    пер ОстатокОтпускаНаДату: Число? 
    если ФизическоеЛицо != Неопределено и ДанныеСтроки.ПериодЗапланированногоОтпуска != Неопределено
        ОстатокОтпускаНаДату = Отпуск.ОстатокОтпускаФизическогоЛицаНаДату(ФизическоеЛицо, ДанныеСтроки.ПериодЗапланированногоОтпуска.От)
    ;
    если ОстатокОтпускаНаДату == Неопределено
        ОстатокОтпускаНаДату = Отпуск.ПараметрыСеанса().ОстатокОтпуска
    ;
    возврат ОстатокОтпускаНаДату
;

метод ПоказыватьОстаток(): Булево
    возврат ОстатокОтпускаНаДатуНачала != Неопределено 
            и не НастройкиОтпусков.ОграничиватьКоличествоДнейОтпускаАвансом
            и ДлительностьОтпуска.КалендарныхДней > НастройкиОтпусков.МаксимальноеКоличествоДнейОтпускаАвансом + ОстатокОтпускаНаДатуНачала 
;

метод ДлительностьОтпуска(): Отпуск.ДлительностьОтпуска
    пер Длительность: Отпуск.ДлительностьОтпуска
    если ДанныеСтроки.ПериодЗапланированногоОтпуска != Неопределено
        Длительность = Отпуск.ПродолжительностьОтпуска(ДанныеСтроки.ПериодЗапланированногоОтпуска.От, ДанныеСтроки.ПериодЗапланированногоОтпуска.До, ПраздничныеДни)   
    ;
    возврат Длительность
;
//КонецОбласти