импорт Анкетирование
импорт СтандартноеПриложение
импорт УниверсальныеМеханизмы
импорт ОбщиеСтандартные
импорт ИнтерфейсныеКомпонентыСтандартные
импорт КонтрольДоступа

@ВПодсистеме
конст КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: Строка = "Тестирование"

@ВПроекте
конст ИД_РАЗДЕЛА_ТЕСТИРОВАНИЕ: Строка = "Тестирование"

@ВПодсистеме конст ИМЯ_РАЗДЕЛА_ТЕСТИРОВАНИЕ: Строка = "Тестирование"

@ВПроекте
конст ИД_НАСТРОЕК_ТЕСТИРОВАНИЯ: Строка = "НастройкаТестирования"

@ВПроекте
конст ИД_ПОДСИСТЕМЫ = "Тестирование"

@ВПодсистеме конст ГРУППА_РЕСУРСОВ_ТЕСТИРОВАНИЕ = "Тестирование"

@ВПодсистеме
структура ПараметрыСеанса
    пер ФункциональныеОпции: ФункциональныеОпции
;

@ВПодсистеме
@НаКлиенте
структура МаксимальныйБаллВопроса
    обз пер ИдВопроса: Ууид
    обз пер МаксимальныйБалл: Число
;

@ВПодсистеме
@НаКлиенте
структура ПараметрыСмайлика
    пер Иконка: ДвоичныйОбъект.Ссылка?
    пер Цвет: Цвет?
;

@ВПодсистеме
@НаКлиенте
структура ПравильностьВарианта
    обз пер ИдВарианта: Ууид?
    обз пер ТекстВарианта: Строка
    обз пер Правильный: Булево
    обз пер БаллыЗаОтвет: Число
;

@ВПодсистеме
@НаКлиенте @НаСервере
структура ДанныеТеста
    пер ВсегоБаллов: Число
    пер ОценкиОтветов: Массив<ОценкаОтвета>
    пер ИтоговыеОценки: Массив<ИтоговаяОценка>
    пер Шаблон: ШаблоныАнкет.Ссылка?
;

@ВПодсистеме
структура ОценкаЗаТест
    обз пер НабраноБаллов: Число
    обз пер ИтоговаяОценка: ИтоговаяОценка
;

@ВПроекте
@НаКлиенте
метод ПараметрыСеанса(): ПараметрыСеанса
    возврат ПараметрыСеансаСервис.ПолучитьСервис().ПараметрПоКлючу(КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА) как ПараметрыСеанса
;

// Область ФункциональныеОпции

@ВПроекте
структура ФункциональныеОпции
    пер ИспользованиеПодсистемы: Булево
;

@ВПроекте
@НаСервере
метод ПолучитьФункциональныеОпции(): ФункциональныеОпции?
    возврат ИспользуемаяФункциональность.ФункциональныеОпции()
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЗаписатьФункциональныеОпции(ФункциональныеОпции: ФункциональныеОпции)
    ИспользуемаяФункциональность.ЗаписатьФункциональныеОпции(ФункциональныеОпции)
;

// Конец ФункциональныеОпции

// КонтрольДоступа

@ВПроекте
@НаСервере
метод ДобавитьРоли()
    ДобавитьРольСоздательТестов()
;

@НаСервере
метод ДобавитьРольСоздательТестов()
    КонтрольДоступа.ДобавитьРоль(
        "Создатель тестов",
        РОЛЬ_СОЗДАТЕЛЬ_ТЕСТОВ,
        [
            ПолномочиеПросмотрТестов(),
            ПолномочиеРедактированиеТестов(),
            ПолномочиеПросмотрРезультатовТестов()
        ]
    )
;

конст ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ТЕСТОВ = "РедактированиеТестов"
конст ПОЛНОМОЧИЕ_ПРОСМОТР_ТЕСТОВ = "ПросмотрТестов"
конст ПОЛНОМОЧИЕ_ПРОСМОТР_РЕЗУЛЬТАТОВ_ТЕСТОВ = "ПросмотрРезультатовТестов"
конст РОЛЬ_СОЗДАТЕЛЬ_ТЕСТОВ = "СоздательТестов"

@ВПроекте
@НаСервере
метод ПолномочиеПросмотрТестов(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_ПРОСМОТР_ТЕСТОВ)
;

@ВПроекте
@НаСервере
метод ПолномочиеРедактированиеТестов(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ТЕСТОВ)
;

@ВПроекте
@НаСервере
метод ПолномочиеПросмотрРезультатовТестов(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_ПРОСМОТР_РЕЗУЛЬТАТОВ_ТЕСТОВ)
;

@ВПодсистеме
@НаСервере
метод ДобавитьПолномочия()
    ДобавитьПолномочиеРедактированиеТестов()
    ДобавитьПолномочиеПросмотрТестов()
    ДобавитьПолномочиеПросмотрРезультатовТестов()
;

@НаСервере
метод ДобавитьПолномочиеРедактированиеТестов()
    КонтрольДоступа.ДобавитьПолномочие(
        "Редактирование тестов",
        ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ТЕСТОВ,
        "")
;

@НаСервере
метод ДобавитьПолномочиеПросмотрТестов()
    КонтрольДоступа.ДобавитьПолномочие(
        "Просмотр тестов",
        ПОЛНОМОЧИЕ_ПРОСМОТР_ТЕСТОВ,
        "")
;

@НаСервере
метод ДобавитьПолномочиеПросмотрРезультатовТестов()
    КонтрольДоступа.ДобавитьПолномочие(
        "Просмотр результатов тестов",
        ПОЛНОМОЧИЕ_ПРОСМОТР_РЕЗУЛЬТАТОВ_ТЕСТОВ,
        "")
;

// Конец КонтрольДоступа


@ВПроекте
@НаКлиенте
метод ВидЦветаПоСостояниюТеста(Статус: СостоянияТестирования?): БиблиотекаЦветов.ВидыЦвета
    пер ВидЦвета: БиблиотекаЦветов.ВидыЦвета
    выбор Статус
    когда НеНачато
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.Синий
    когда Выполняется
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.Оранжевый
    когда Завершено
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.Зеленый
    иначе
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.КнопкаПоУмолчанию
    ;
    
    возврат ВидЦвета
;

@ВПодсистеме
@НаКлиенте
метод МаксимальныйБалл(ПравильныеВарианты: Массив<ПравильныйВариант>): Число   
   
    пер БаллыПоВопросам: Соответствие<Ууид, Число>
    
    для Вариант из ПравильныеВарианты
        если БаллыПоВопросам.СодержитКлюч(Вариант.ИдВопроса)
            если БаллыПоВопросам.Получить(Вариант.ИдВопроса) < Вариант.КоличествоБаллов
                БаллыПоВопросам[Вариант.ИдВопроса] = Вариант.КоличествоБаллов
            ;
        иначе
            БаллыПоВопросам.Вставить(Вариант.ИдВопроса, Вариант.КоличествоБаллов)
        ;
    ;
    
    пер МаксимумПоТесту = 0
    для МаксимумПоВопросу из БаллыПоВопросам
        МаксимумПоТесту += МаксимумПоВопросу.Значение
    ;
        
    возврат МаксимумПоТесту
;

@ВПодсистеме
@НаКлиенте
метод ОценкаЗаТест(ДанныеТеста: ДанныеТеста, ВопросыТеста: Массив<ДанныеЭлементаКонструктора>): ОценкаЗаТест
    пер ВыбранныеОтветы = ВыбранныеОтветы(ВопросыТеста)
    пер НабраноБаллов = НабраноБаллов(ДанныеТеста, ВыбранныеОтветы)
    пер ИтоговаяОценка = ИтоговаяОценкаПоКоличествуБаллов(ДанныеТеста, НабраноБаллов)
    
    возврат новый ОценкаЗаТест(НабраноБаллов, ИтоговаяОценка)
;

метод ВыбранныеОтветы(ВопросыТеста: Массив<ДанныеЭлементаКонструктора>): Массив<Ууид>
    пер ВыбранныеОтветы: Массив<Ууид>
    для ВопросАнкеты из ВопросыТеста
        для ВариантОтвета из ВопросАнкеты.ДанныеОтвета.ЗначенияПредопределенные
            ВыбранныеОтветы.Добавить(ВариантОтвета.Ид)
        ;
    ;
    
    возврат ВыбранныеОтветы
;

метод ИтоговаяОценкаПоКоличествуБаллов(ДанныеТеста: ДанныеТеста, Баллы: Число): ИтоговаяОценка
    пер Результат = новый ИтоговаяОценка()
    
    пер ИтоговыеОценки = ДанныеТеста.ИтоговыеОценки
    ИтоговыеОценки = ИтоговыеОценки.СортироватьПо(Оценка -> Оценка.МинимальноеКоличествоБаллов,НаправлениеСортировки.ПоУбыванию)
    для ИтоговаяОценка из ИтоговыеОценки
        если Баллы >= ИтоговаяОценка.МинимальноеКоличествоБаллов
            Результат = ИтоговаяОценка
            прервать
        ;
    ;
    
    возврат Результат                 
;

метод НабраноБаллов(ДанныеТеста: ДанныеТеста, ВыбранныеОтветы: Массив<Ууид>): Число
    пер НабраноБаллов = 0
    для ВыбранныйОтвет из ВыбранныеОтветы
        для ОценкаОтвета из ДанныеТеста.ОценкиОтветов
            если ОценкаОтвета.ПравильныйОтветВариантОтвета.Ид == ВыбранныйОтвет
                НабраноБаллов = НабраноБаллов + ОценкаОтвета.КоличествоБаллов
            ;
        ;    
    ;
    
    возврат НабраноБаллов
;

@ВПроекте
@НаКлиенте
метод ОтобразитьОценку(АнкетаКомпонент: АнкетаКомпонент, ДанныеТеста: ДанныеТеста, ОценкаЗаТест: ОценкаЗаТест)
    
    пер БлокЗавершения =  АнкетаКомпонент.ПодчиненныеКомпоненты().БлокЗавершения
    пер БлокЗавершенияГруппаПросмотра = БлокЗавершения.Содержимое.Последний()
    пер Результат = новый РезультатТестаКомпонент(ИтоговаяОценка = ОценкаЗаТест.ИтоговаяОценка, ВсегоБаллов = ДанныеТеста.ВсегоБаллов.ВСтроку(), НабраноБаллов = ОценкаЗаТест.НабраноБаллов.ВСтроку())
    (БлокЗавершенияГруппаПросмотра как ФиксированнаяГруппа).Содержимое.Вставить(0, Результат)
;

@НаКлиенте @НаСервере
структура ДанныеСамотестирования
    пер ДанныеТеста: ДанныеТеста
    пер ДанныеШаблона: Анкетирование.ДанныеШаблонаАнкет
    пер ВопросыТеста: Массив<ДанныеЭлементаКонструктора>
;

@ВПроекте
@НаКлиенте
метод ОткрытьФормуСамотестирования(Тест: Тесты.Ссылка, ЗамещаемаяФорма: ЗамещаемаяФорма)
    знч ДанныеСамотестирования = ДанныеСамотестирования(Тест)
    знч ФормаСамотестирования = новый СамотестированиеФорма(
            ДанныеТеста = ДанныеСамотестирования.ДанныеТеста, 
            ДанныеШаблона = ДанныеСамотестирования.ДанныеШаблона, 
            ВопросыТеста = ДанныеСамотестирования.ВопросыТеста)
            
    ФормаСамотестирования.ТестИнициализировать()
    ИнтерфейсныеКомпоненты.ОткрытьЗамещающуюФорму(ЗамещаемаяФорма, ФормаСамотестирования)    
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеСамотестирования(Тест: Тесты.Ссылка): ДанныеСамотестирования
    знч ДанныеСамотестирования = новый ДанныеСамотестирования()
    ДанныеСамотестирования.ДанныеТеста = ДанныеТеста(Тест)

    // Поскольку доступен экземпляр анкеты позволяем считать его описание
    исп КонтекстДоступа.Привилегированный()
    ДанныеСамотестирования.ДанныеШаблона = ДанныеШаблона(ДанныеСамотестирования.ДанныеТеста.Шаблон)
    ДанныеСамотестирования.ВопросыТеста = Анкетирование.ВопросыШаблона(ДанныеСамотестирования.ДанныеТеста.Шаблон)
    возврат ДанныеСамотестирования
;

@ВПодсистеме
@НаКлиенте
метод ПараметрыСмайлика(СмайликОценки: ВидыСмайликовОценки): Тестирование.ПараметрыСмайлика
    пер ПараметрыСмайлика: Тестирование.ПараметрыСмайлика
    
    выбор СмайликОценки
    когда Радость
        ПараметрыСмайлика.Иконка = Ресурс{СмайликРадость.svg}.Ссылка
        ПараметрыСмайлика.Цвет = БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Зеленый)
    когда Улыбка
        ПараметрыСмайлика.Иконка = Ресурс{СмайликУлыбка.svg}.Ссылка
        ПараметрыСмайлика.Цвет = БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Зеленый, 0.5)
    когда Нейтральный
        ПараметрыСмайлика.Иконка = Ресурс{СмайликНейтральный.svg}.Ссылка
        ПараметрыСмайлика.Цвет = БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.КнопкаПоУмолчанию)
    когда Грусть
        ПараметрыСмайлика.Иконка = Ресурс{СмайликГрусть.svg}.Ссылка
        ПараметрыСмайлика.Цвет = БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Оранжевый)
    когда Плач
        ПараметрыСмайлика.Иконка = Ресурс{СмайликПлач.svg}.Ссылка
        ПараметрыСмайлика.Цвет = БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Красный)
    иначе
        ПараметрыСмайлика.Иконка =  Неопределено
        ПараметрыСмайлика.Цвет = Неопределено
    ;
    
    возврат ПараметрыСмайлика        
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеШаблона(Шаблон: ШаблоныАнкет.Ссылка?): Анкетирование.ДанныеШаблонаАнкет
    
    пер ДанныеШаблона = новый Анкетирование.ДанныеШаблонаАнкет()
    если Шаблон == Неопределено
        возврат ДанныеШаблона
    ;
    пер ШаблонОбъект = Шаблон.ЗагрузитьОбъект()

    ДанныеШаблона.Ссылка = Шаблон
    ДанныеШаблона.Наименование = ШаблонОбъект.Наименование
    ДанныеШаблона.ЗаголовокПриветствия = ШаблонОбъект.ЗаголовокПриветствия
    ДанныеШаблона.КартинкаПриветствия = ШаблонОбъект.КартинкаПриветствия
    ДанныеШаблона.ТекстПриветствия = ШаблонОбъект.ТекстПриветствия
    ДанныеШаблона.ЗаголовокЗавершения = ШаблонОбъект.ЗаголовокЗавершения
    ДанныеШаблона.КартинкаЗавершения= ШаблонОбъект.КартинкаЗавершения
    ДанныеШаблона.ТекстЗавершения = ШаблонОбъект.ТекстЗавершения
    ДанныеШаблона.КоличествоРазделов = ШаблонОбъект.КоличествоРазделов
    ДанныеШаблона.КоличествоВопросов = ШаблонОбъект.КоличествоВопросов
    ДанныеШаблона.ОтображатьПриветствие = ШаблонОбъект.Приветствие
    ДанныеШаблона.ОтображатьЗавершение = ШаблонОбъект.Завершение
    ДанныеШаблона.Разделы = Анкетирование.РазделыШаблона(Шаблон)
    ДанныеШаблона.ТекущийРаздел= ДанныеШаблона.Разделы[0]
    
    возврат ДанныеШаблона  
    
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
статический метод ДанныеТеста(Тест: Тесты.Ссылка): ДанныеТеста
    пер ТестОбъект = Тест.ЗагрузитьОбъект()
    пер Оценки: Массив<ОценкаОтвета>
    Оценки.ДобавитьВсе(ТестОбъект.ОценкиОтветов)
    
    пер ИтоговыеОценки: Массив<ИтоговаяОценка>
    ИтоговыеОценки.ДобавитьВсе(ТестОбъект.ИтоговыеОценки)
    
    возврат новый ДанныеТеста(ТестОбъект.КоличествоБаллов, Оценки, ИтоговыеОценки, ТестОбъект.ШаблонАнкеты)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СоздатьРезультатТестирования(Респондент: РеспондентАнкетирования.Ссылка?, Тест: Тесты.Ссылка): РезультатыТестирования.Ссылка?
    исп Транзакции.Начать()
    пер Шаблон = ШаблонТеста(Тест)
    пер Анкета = Анкетирование.СоздатьАнкету(Респондент, Шаблон, СтатусыАнкет.Отправлена, Неопределено)
    пер РезультатыТестирования = новый РезультатыТестирования.Объект()
    РезультатыТестирования.Анкета = Анкета
    РезультатыТестирования.Тест = Тест
    РезультатыТестирования.Статус = СостоянияТестирования.НеНачато
    РезультатыТестирования.Записать()
    ОповеститьПодсистемыОбОтправкеРеспонденту(РезультатыТестирования.Ссылка, Респондент)    
    возврат РезультатыТестирования.Ссылка
;

@НаСервере
метод ОповеститьПодсистемыОбОтправкеРеспонденту(РезультатТестирования: РезультатыТестирования.Ссылка, Респондент: РеспондентАнкетирования.Ссылка?)
    знч Сервисы = СобытияРезультатыТестирования.ПолучитьСервисы()
    для Сервис из Сервисы
        Сервис.ПриОтправкеРеспонденту(РезультатТестирования, Респондент)
    ;
;

@ВПодсистеме
@НаСервере
метод ОповеститьПодсистемыОЗавершенииТеста(РезультатТестирования: РезультатыТестирования.Ссылка)
    пер Сервисы = СобытияРезультатыТестирования.ПолучитьСервисы()
    для Сервис из Сервисы
        Сервис.ПриЗавершении(РезультатТестирования)
    ;   
;

@НаСервере
метод ШаблонТеста(Тест: Тесты.Ссылка): ШаблоныАнкет.Ссылка
    возврат МенеджерСущности.ЗначениеРеквизитаОбъекта(Тест, "ШаблонАнкеты")
;

@ВПроекте конст ОТПРАВКА_ТЕСТА_РЕСПОНДЕНТУ_SMS = "ОтправкаТестаРеспондентуSMS"
@ВПроекте конст ОТПРАВКА_ТЕСТА_РЕСПОНДЕНТУ_PUSH = "ОтправкаТестаРеспондентуPush"
@ВПроекте конст ОТПРАВКА_ТЕСТА_РЕСПОНДЕНТУ_EMAIL = "ОтправкаТестаРеспондентуEmail"
@ВПроекте конст ОТПРАВКА_ТЕСТА_РЕСПОНДЕНТУ_ТЕМА = "ОтправкаТестаРеспондентуТема"
@ВПроекте конст ПОЛУЧЕНЫ_РЕЗУЛЬТАТЫ_ТЕСТА_SMS = "ПолученыРезультатыТестаSMS"
@ВПроекте конст ПОЛУЧЕНЫ_РЕЗУЛЬТАТЫ_ТЕСТА_PUSH = "ПолученыРезультатыТестаPush"
@ВПроекте конст ПОЛУЧЕНЫ_РЕЗУЛЬТАТЫ_ТЕСТА_EMAIL = "ПолученыРезультатыТестаEmail"
@ВПроекте конст ПОЛУЧЕНЫ_РЕЗУЛЬТАТЫ_ТЕСТА_ТЕМА = "ПолученыРезультатыТестаТема"

@ВПроекте
@НаСервере
метод ОбновитьСтроковыеРесурсы()
    
    пер ОтправкаТестаРеспондентуSMS = "Вам поступил новый тест."
    пер Комментарий = "Отправка теста респонденту (sms)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ТЕСТИРОВАНИЕ, ОТПРАВКА_ТЕСТА_РЕСПОНДЕНТУ_SMS, Комментарий, ОтправкаТестаРеспондентуSMS, 70)
        
    пер ОтправкаТестаРеспондентуPush = "Вам поступил новый тест \%КМНаименованиеТеста\%."
    Комментарий = "Отправка теста респонденту (push)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ТЕСТИРОВАНИЕ, ОТПРАВКА_ТЕСТА_РЕСПОНДЕНТУ_PUSH, Комментарий, ОтправкаТестаРеспондентуPush)
    
    пер ОтправкаТестаРеспондентуEmail = 
        "Добрый день, \%КМПолноеИмяПолучателя\%
        
        Вам необходимо пройти тест \%КМНаименованиеТеста\%.
        Вы можете это сделать в личном кабинете.
        
        \%КМПодпись\%"
    Комментарий = "Отправка теста респонденту (email)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ТЕСТИРОВАНИЕ, ОТПРАВКА_ТЕСТА_РЕСПОНДЕНТУ_EMAIL, Комментарий, ОтправкаТестаРеспондентуEmail)
    
    пер ОтправкаТестаРеспондентуТема = "Вам поступил новый тест \%КМНаименованиеТеста\%"
    Комментарий = "Отправка теста респонденту (тема письма)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ТЕСТИРОВАНИЕ, ОТПРАВКА_ТЕСТА_РЕСПОНДЕНТУ_ТЕМА, Комментарий, ОтправкаТестаРеспондентуТема)
    
    пер ПолученыРезультатыТестаSMS = "Результаты теста были получены."
    Комментарий = "Получены результаты теста (sms)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ТЕСТИРОВАНИЕ, ПОЛУЧЕНЫ_РЕЗУЛЬТАТЫ_ТЕСТА_SMS, Комментарий, ПолученыРезультатыТестаSMS, 70)
        
    пер ПолученыРезультатыТестаPush = "Результаты теста \%КМНаименованиеТеста\% (\%КМПолноеИмяСотрудника\%) были получены."
    Комментарий = "Получены результаты теста (push)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ТЕСТИРОВАНИЕ, ПОЛУЧЕНЫ_РЕЗУЛЬТАТЫ_ТЕСТА_PUSH, Комментарий, ПолученыРезультатыТестаPush)
    
    пер ПолученыРезультатыТестаEmail = 
        "Добрый день, \%КМПолноеИмяПолучателя\%
        
        Вы можете ознакомиться с результатами теста \%КМНаименованиеТеста\% в личном кабинете или перейти по ссылке
        \%КМРезультатыТестирования\%
        
        \%КМПодпись\%"
    Комментарий = "Получены результаты теста (email)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ТЕСТИРОВАНИЕ, ПОЛУЧЕНЫ_РЕЗУЛЬТАТЫ_ТЕСТА_EMAIL, Комментарий, ПолученыРезультатыТестаEmail)
    
    пер ПолученыРезультатыТестаТема = "Результаты теста \%КМНаименованиеТеста\% (\%КМПолноеИмяСотрудника\%) были получены"
    Комментарий = "Получены результаты теста (тема письма)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ТЕСТИРОВАНИЕ, ПОЛУЧЕНЫ_РЕЗУЛЬТАТЫ_ТЕСТА_ТЕМА, Комментарий, ПолученыРезультатыТестаТема)
    
;

@ВПроекте
@НаСервере
метод ЗаполнитьПроисхождениеАнкет()
    
    исп Транзакции.Начать()
    
    знч Запрос = Запрос{
        Выбрать
        Анкеты.Ссылка,
       	Выбор
                Когда АнкетыОпроса.Опрос Есть Null
                    Тогда Ложь
		Иначе Истина
            Конец Как Опросная,
	    Выбор
                Когда РезультатыТестирования.Ссылка Есть Null
                    Тогда Ложь
		Иначе Истина
            Конец Как Тестовая
        Из 
            Анкеты как Анкеты
        Левое Соединение АнкетыОпроса как АнкетыОпроса
                По Анкеты.Ссылка == АнкетыОпроса.Анкета
        Левое Соединение РезультатыТестирования как РезультатыТестирования
                По Анкеты.Ссылка == РезультатыТестирования.Анкета}
    исп Результат = Запрос.Выполнить()
    
    для РезультатСтрока из Результат
        знч ПроисхождениеАнкеты = ПроисхождениеАнкеты(РезультатСтрока.Опросная, РезультатСтрока.Тестовая)
        если ПроисхождениеАнкеты != Неопределено
            ЗаполнитьПроисхождениеАнкеты(РезультатСтрока.Ссылка, ПроисхождениеАнкеты)
        ;
    ;
    
;

@ВПодсистеме
@НаСервере
метод ЗаполнитьПоставщикаШаблоновАнкет()
    
    исп Транзакции.Начать()
    
    пер Запрос = Запрос{
        Выбрать
            ШаблонАнкеты как Шаблон,
            ШаблонАнкеты.ИдПодсистемыПоставщика.ЗаменитьNull("") как ИдПодсистемыПоставщика
        Из
            Тесты как Тесты}
    исп Результат = Запрос.Выполнить()
    
    для РезультатСтрока из Результат
        если РезультатСтрока.ИдПодсистемыПоставщика.Пусто()
            ЗаполнитьПоставщикаШаблона(РезультатСтрока.Шаблон)
        ;
    ;
;

@НаСервере
метод ЗаполнитьПоставщикаШаблона(Шаблон: ШаблоныАнкет.Ссылка)
    знч Элемент = Шаблон.ЗагрузитьОбъект(Истина)
    Элемент.ИдПодсистемыПоставщика = Тестирование.ИД_ПОДСИСТЕМЫ
    Элемент.Записать()
;

@НаСервере
метод ПроисхождениеАнкеты(Опросная: Булево, Тестовая: Булево): ПроисхождениеАнкет?
    пер Происхождение: ПроисхождениеАнкет?

    если Тестовая
        Происхождение = Неопределено
    иначе если Опросная
        Происхождение = ПроисхождениеАнкет.ЧастьОпроса
    иначе
        Происхождение = ПроисхождениеАнкет.Отдельная    
    ;
    
    возврат Происхождение
;

@НаСервере
метод ЗаполнитьПроисхождениеАнкеты(Анкета: Анкеты.Ссылка, Происхождение: ПроисхождениеАнкет?)
    знч Элемент = Анкета.ЗагрузитьОбъект(Истина)
    Элемент.Происхождение = Происхождение
    Элемент.Записать()
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ЕстьПолномочиеПросмотрТестов(): Булево
    возврат КонтрольДоступа.ЕстьПравоНаПолномочие(ПолномочиеПросмотрТестов())
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ЕстьПолномочиеРедактированиеТестов(): Булево
    возврат КонтрольДоступа.ЕстьПравоНаПолномочие(ПолномочиеРедактированиеТестов())
;
