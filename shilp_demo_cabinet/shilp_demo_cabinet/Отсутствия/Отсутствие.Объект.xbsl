импорт ОбщиеСтандартные
импорт Компания
импорт КонтрольДоступа
импорт ОбменДанными
импорт Компания::Согласования
импорт УниверсальныеМеханизмы
импорт Криптография

//Область ОбработчикиСобытий 

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПриЗаполнении()
    ФизическоеЛицо = ПользователиСистемы.ТекущееФизическоеЛицо()
    МоментСоздания = Момент.Сейчас()
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередЗаписью(ПредыдущееЗначение: Отсутствие.Данные, ПараметрыЗаписи: Отсутствие.ПараметрыЗаписи)
    ЗаполнитьПредставление()
    ЗаполнитьМесяцСоздания()
    ЗаполнитьИдентификаторыЭлектронныхДокументов()
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПослеЗаписи(ПредыдущееЗначение: Отсутствие.Данные, ПараметрыЗаписи: Отсутствие.ПараметрыЗаписи)
    исп КонтекстДоступа.Привилегированный()
    пер ТребуетсяРегистрацияИзменений = РегистрацияИзменений.ТребуетсяРегистрацияИзмененийОбъекта(этот, ПредыдущееЗначение)
    Отсутствие.ПослеЗаписиДополнение(Ссылка, ФизическоеЛицо, ТребуетсяРегистрацияИзменений)   
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередУдалением(ПараметрыУдаления: Отсутствие.ПараметрыУдаления)
    ЗапланированныеОтсутствия.УдалитьЗапланированноеОтсутствие(Ссылка)
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<СогласованияДокументов>, "Документ")
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<ПодписиДокументов>, "Документ")
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<ЗаписиОтсутствий>, "Документ")
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<ВерсииДанныхОбъектов>, "Объект")
;

//КонецОбласти

//Область СлужебныеПроцедурыИФункции

/*
    Выставить метод наружу потребовалось для обработки старых данных
    см. УдалитьСловоПосле() 
*/
метод ЗаполнитьПредставление()
    если ПолныйДень
        ПредставлениеДокумента = Отсутствия.ПредставлениеОтсутствия(
            ДатаНачала, ДатаОкончания, Причина, ФизическоеЛицо)
    иначе
        ПредставлениеДокумента = Отсутствия.ПредставлениеВнутрисменногоОтсутствия(
            ДатаОтсутствия, ВремяНачала, ВремяОкончания, Причина, ФизическоеЛицо)
    ;
;


метод ЗаполнитьМесяцСоздания()
    МесяцСоздания = Дата.НачалоМесяца()
;

метод ЗаполнитьИдентификаторыЭлектронныхДокументов()
    выбор Причина
    когда ВидыОтсутствий.ЛичныеОбстоятельства, ВидыОтсутствий.Опоздание
        ИдентификаторыЭлектронныхДокументов.Очистить()
        ИдентификаторыЭлектронныхДокументов.Добавить(
            Сотрудники.ОрганизацияФизическогоЛицаПоОсновномуМестуРаботы(ФизическоеЛицо)) 
    когда ВидыОтсутствий.Болезнь, ВидыОтсутствий.ОтпускПоБеременностиИРодам, ВидыОтсутствий.ОтпускПоУходуЗаРебенком,
        ВидыОтсутствий.УходЗаРебенкомИнвалидом
        ИдентификаторыЭлектронныхДокументов.Очистить()
        пер ОрганизацииФизическогоЛица = Сотрудники.ОрганизацииФизическогоЛица(ФизическоеЛицо, Ложь)
        для ДанныеОрганизации из ОрганизацииФизическогоЛица
            ИдентификаторыЭлектронныхДокументов.Добавить(ДанныеОрганизации.Организация)
        ;
    ; 
;

@ВПодсистеме
метод ЗапланироватьОтсутствия()  
    пер НачалоПериода: ДатаВремя 
    пер ОкончаниеПериода: ДатаВремя 
    если ПолныйДень
        НачалоПериода = ДатаНачала.НачалоДня()
        ОкончаниеПериода = ДатаОкончания.КонецДня()
    иначе
        НачалоПериода = новый ДатаВремя(ДатаОтсутствия, ВремяНачала ?? Время{00:00})
        ОкончаниеПериода = новый ДатаВремя(ДатаОтсутствия, ВремяОкончания)        
    ;
       
    знч ТекущееСостояние = СостДокументов.СостояниеДокумента(Ссылка) 
    если [СостоянияДокумента.Выполнен, СостоянияДокумента.Подготовлен].Содержит(ТекущееСостояние)
        ЗапланированныеОтсутствия.ЗаписатьЗапланированныеОтсутствия(
            Отсутствие = Ссылка,
            ВидОтсутствия = Причина,
            НачалоПериода = НачалоПериода,
            ОкончаниеПериода = ОкончаниеПериода,
            ФизическоеЛицо = ФизическоеЛицо,
            Организации = ИдентификаторыЭлектронныхДокументов,
            Внутрисменное = не ПолныйДень 
        )
    ;
;

//КонецОбласти