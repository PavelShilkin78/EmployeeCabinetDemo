импорт ИнтерфейсныеКомпонентыСтандартные
импорт Компания::Согласования
импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт Компания
импорт КонтрольДоступа
импорт Уведомления
импорт СтандартноеПриложение
импорт УниверсальныеМеханизмы

@ВПроекте
перечисление ГруппыОтсутствийПодчиненных
    ТребуютМоегоСогласования,
    ЯСогласовал,
    Архив
;

@ВПроекте
перечисление ДействиеPushУведомленияОбОтсутствии
    ОткрытьФормуДокумента,
    ОткрытьФормуРаздела,
    Согласование
;

@НаСервере
структура ПараметрыОтсутствия
    пер ВариантОтображения: ВариантыОтображенияОтсутствий
    пер Условие: Строка
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ОтсутствияСотрудника(ФизическоеЛицо: ФизическиеЛица.Ссылка, ВариантОтображения: ВариантыОтображенияОтсутствий,
    ЧасовойПояс:ЧасовойПояс, СначалаРанние: Булево = Ложь): Массив<ОтсутствиеСотрудникаКомпонентДанных>
    
    пер Данные = новый Массив<ОтсутствиеСотрудникаКомпонентДанных>()
    пер ПараметрыОтсутствий = ПараметрыОтсутствийПоВариантуОтображения(ВариантОтображения)
    пер Запрос = новый ПроизвольныйЗапрос() // текст запроса динамический
    пер ТекущаяДата = МенеджерДат.ТекущаяДатаВремя()
    
    Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата)
    Запрос.УстановитьПараметр("ТекущаяДатаНачалоДня", МенеджерДат.НачалоДня(ТекущаяДата))
    Запрос.УстановитьПараметр("ТекущаяДатаКонецДня", МенеджерДат.КонецДня(ТекущаяДата))
    Запрос.УстановитьПараметр("ВыбранныеФизическиеЛица", [ФизическоеЛицо])
    
    для Параметры из ПараметрыОтсутствий
        пер Условие = "Отсутствия.ФизическоеЛицо В (&ВыбранныеФизическиеЛица) И %{Параметры.Условие}" 
        ЗаполнитьДанныеОтсутствий(Запрос, Данные, Условие, 1000, ЧасовойПояс, СначалаРанние)
    ;
    возврат Данные
;

@НаСервере
метод ПараметрыОтсутствийПоВариантуОтображения(ВариантОтображения: ВариантыОтображенияОтсутствий): ЧитаемыйМассив<ПараметрыОтсутствия>
    пер ПараметрыОтсутствий: Массив<ПараметрыОтсутствия>
    пер ПараметрыОтсутствия: ПараметрыОтсутствия
    выбор ВариантОтображения
    когда Сегодня
        ПараметрыОтсутствия = новый ПараметрыОтсутствия(ВариантОтображения, "Выбор Когда Отсутствия.Причина == ВидыОтсутствий.Опоздание Тогда Отсутствия.Окончание Иначе Отсутствия.Начало Конец <=| &ТекущаяДатаКонецДня И Отсутствия.Окончание >=| &ТекущаяДатаНачалоДня")
        ПараметрыОтсутствий.Добавить(ПараметрыОтсутствия)
    когда Архив
        ПараметрыОтсутствия = новый ПараметрыОтсутствия(ВариантОтображения, "Отсутствия.Окончание <| &ТекущаяДатаНачалоДня")
        ПараметрыОтсутствий.Добавить(ПараметрыОтсутствия)
    иначе
        ПараметрыОтсутствия = новый ПараметрыОтсутствия(ВариантОтображения, "Отсутствия.Окончание >| &ТекущаяДатаКонецДня")
        ПараметрыОтсутствий.Добавить(ПараметрыОтсутствия)
    ; 
    возврат ПараметрыОтсутствий
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ОтсутствияСотрудников(КоличествоОтсутствий: Число, ВариантОтображения: ВариантыОтображенияОтсутствий, СтрокаПоиска: Строка,
    ТекущееФизическоеЛицо: ФизическиеЛица.Ссылка, ЧасовойПояс: ЧасовойПояс): Массив<ОтсутствиеСотрудникаКомпонентДанных>
    
    пер Данные = новый Массив<ОтсутствиеСотрудникаКомпонентДанных>()
    
    пер Коллеги = ОрганизационнаяСтруктура.КоллегиФизическогоЛица(ТекущееФизическоеЛицо, СтрокаПоиска)
    пер Руководитель = Коллеги.Руководитель
    пер СотрудникиНаДолжности = Коллеги.СотрудникиНаДолжности
    пер СотрудникиПодразделения = Коллеги.СотрудникиПодразделения
    пер ВыбранныеФизическиеЛица = Коллеги.ВыбранныеФизическиеЛица
    
    пер ТекущаяДата = МенеджерДат.НачалоДня(МенеджерДат.ТекущаяДатаВремя())
    
    пер СписокФизическихЛиц = новый Массив<ФизическиеЛица.Ссылка>()
    СписокФизическихЛиц.ДобавитьВсе(СотрудникиПодразделения)
    СписокФизическихЛиц.ДобавитьВсе(СотрудникиНаДолжности)
    если Руководитель != Неопределено
        СписокФизическихЛиц.Добавить(Руководитель)
    ;
    
    пер Запрос = новый ПроизвольныйЗапрос() // текст запроса динамический
    
    Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата)
    Запрос.УстановитьПараметр("ТекущаяДатаНачалоДня", МенеджерДат.НачалоДня(ТекущаяДата))
    Запрос.УстановитьПараметр("ТекущаяДатаКонецДня", МенеджерДат.КонецДня(ТекущаяДата))
    Запрос.УстановитьПараметр("Руководитель", Руководитель)
    Запрос.УстановитьПараметр("СотрудникиНаДолжности", СотрудникиНаДолжности)
    Запрос.УстановитьПараметр("СотрудникиПодразделения", СотрудникиПодразделения)
    Запрос.УстановитьПараметр("ВыбранныеФизическиеЛица", ВыбранныеФизическиеЛица)
    Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц)
    
    пер ПараметрыОтсутствий = ПараметрыОтсутствийПоВариантуОтображения(ВариантОтображения)
    для Параметры из ПараметрыОтсутствий
        если Руководитель != Неопределено
            пер Условие = "Отсутствия.ФизическоеЛицо == &Руководитель И Не Отсутствия.Долгосрочное И %{Параметры.Условие}" 
            ЗаполнитьДанныеОтсутствий(Запрос, Данные, Условие, КоличествоОтсутствий, ЧасовойПояс, Истина)
        ;
        если СотрудникиНаДолжности.Размер() > 0
            пер Условие = "Отсутствия.ФизическоеЛицо В (&СотрудникиНаДолжности) И Не Отсутствия.Долгосрочное И %{Параметры.Условие}"
            ЗаполнитьДанныеОтсутствий(Запрос, Данные, Условие, КоличествоОтсутствий, ЧасовойПояс, Истина)
        ;
        если СотрудникиПодразделения.Размер() > 0
            пер Условие = "Отсутствия.ФизическоеЛицо В (&СотрудникиПодразделения) И Не Отсутствия.Долгосрочное И %{Параметры.Условие}"
            ЗаполнитьДанныеОтсутствий(Запрос, Данные, Условие, КоличествоОтсутствий, ЧасовойПояс, Истина)
        ;
        пер Условие = "Отсутствия.ФизическоеЛицо В (&СписокФизическихЛиц) И Отсутствия.Долгосрочное И %{Параметры.Условие}"
        если не СтрокаПоиска.Пусто()
            Условие += " И Отсутствия.ФизическоеЛицо В (&ВыбранныеФизическиеЛица)"
        ;
        ЗаполнитьДанныеОтсутствий(Запрос, Данные, Условие, КоличествоОтсутствий, ЧасовойПояс, Истина)
    ;
    возврат Данные
;

@НаСервере
метод ЗаполнитьДанныеОтсутствий(Запрос: ПроизвольныйЗапрос, Данные: Массив<ОтсутствиеСотрудникаКомпонентДанных>, Условие: Строка,
    КоличествоОтсутствий: Число, ЧасовойПоясКлиента: ЧасовойПояс, СначалаРанние: Булево = Ложь)
    
    пер Элемент: ОтсутствиеСотрудникаКомпонентДанных
    пер ДанныеПредставления: СтрокаСпискаСМиниатюройКомпонентДанных
    пер Остаток: Число?
    если КоличествоОтсутствий != 0
        Остаток = КоличествоОтсутствий - Данные.Размер()
    ;
    если Остаток == 0
        возврат
    ;
    
    пер ВыбратьТекст: Строка = "Выбрать"
    если Остаток != Неопределено
        ВыбратьТекст = "Выбрать Первые " + (Остаток).ВСтроку()
    ;

    пер Сортировка: Строка
    если СначалаРанние
        Сортировка = "Убыв"
    ;
    
    пер ТекстЗапроса = 
        "%ВыбратьТекст 
            Отсутствия.ФизическоеЛицо Как ФизическоеЛицо, 
            Отсутствия.ФизическоеЛицо.Представление.ЗаменитьNull(\"\") Как ФизическоеЛицоПредставление, 
            Отсутствия.ФизическоеЛицо.Миниатюра.ЗаменитьNull(Неопределено) Как Миниатюра, 
            Отсутствия.Документ Как Документ, 
            Отсутствия.Причина,
            Отсутствия.Начало, 
            Отсутствия.Окончание,
            Отсутствия.ДатаНачала, 
            Отсутствия.ДатаОкончания,
            Отсутствия.Внутрисменное,
            Отсутствия.Ссылка
        Из 
           ЗаписиОтсутствий Как Отсутствия 
        Где 
           %Условие
        Упорядочить По 
           Отсутствия.Начало %Сортировка" 
            
    Запрос.Текст = ТекстЗапроса
    
    исп Результат = Запрос.Выполнить() 
    для СтрокаРезультата из Результат
        Элемент = новый ОтсутствиеСотрудникаКомпонентДанных()
        Элемент.ФизическоеЛицо = СтрокаРезультата.ФизическоеЛицо
        Элемент.Документ = СтрокаРезультата.Документ
        Элемент.Начало = СтрокаРезультата.Начало
        Элемент.Окончание = СтрокаРезультата.Окончание
        Элемент.ДатаНачала = СтрокаРезультата.ДатаНачала
        Элемент.ДатаОкончания = СтрокаРезультата.ДатаОкончания
        Элемент.Внутрисменное = СтрокаРезультата.Внутрисменное
        Элемент.Причина = СтрокаРезультата.Причина
        Элемент.ЗаписьОтсутствия = СтрокаРезультата.Ссылка
        
        ДанныеПредставления = новый СтрокаСпискаСМиниатюройКомпонентДанных()
        ДанныеПредставления.Изображение = ФизическиеЛица.ФотографияИзФайла(СтрокаРезультата.Миниатюра)
        ДанныеПредставления.Представление = СтрокаРезультата.ФизическоеЛицоПредставление
        если Элемент.Внутрисменное
            ДанныеПредставления.ДополнительноеПредставление =
                Отсутствия.ПредставлениеВнутрисменногоОтсутствия(Элемент.Начало, Элемент.Окончание, Элемент.Причина, ЧасовойПоясКлиента)
        иначе
            ДанныеПредставления.ДополнительноеПредставление =
                Отсутствия.ПредставлениеОтсутствия(Элемент.ДатаНачала, Элемент.ДатаОкончания, Элемент.Причина)
        ;
        Элемент.ДанныеДляПредставления = ДанныеПредставления
        
        Данные.Добавить(Элемент)
    ;
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод СогласованиеДокумента(Заявление: ОснованиеОтсутствия.Ссылка, Действие: PushУведомления.ДействияУведомлений, Текст: Строка, ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка, ПарольЗакрытогоКлюча: Строка): Булево
    пер ДействиеВыполнено: Булево
    пер Согласующий: ФизическиеЛица.Ссылка = ПользователиСистемы.ТекущееФизическоеЛицо()
    попытка
        знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Заявление как Справочник.Ссылка, "ФизическоеЛицо")
        знч ДанныеСогласующего = Согласования.ДанныеСогласующего(
            Согласующий, ВидЗаявления, ФизическоеЛицо)
        
        если ДанныеСогласующего == Неопределено
            Журналирование.ЗарегистрироватьОшибку("ОшибкаМаршрутаСогласования", Важность = ВажностьСобытияЖурналаСобытий.Высокая, 
                Описание = "Согласующий %{Согласующий.Представление()} не найден в правилах согласования")
            возврат Ложь
        ;
        
        выбор Действие
        когда Согласовать
            Согласования.ПроверитьНастройкиИПодписатьДокумент(Заявление как ПодписываемыйДокумент.Ссылка, ДанныеСогласующего, ПарольЗакрытогоКлюча)
            ДействиеВыполнено = Истина
        когда Отказать
            СогласованияДокументов.ОтклонитьДокумент(Заявление как ПодписываемыйДокумент.Ссылка?, ДанныеСогласующего, Текст)
            ДействиеВыполнено = Истина
        ;
    поймать Ошибка: Исключение
    ;
    возврат ДействиеВыполнено
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ДействиеPushУведомления(Заявление: ОснованиеОтсутствия.Ссылка, Действие: PushУведомления.ДействияУведомлений, Текст: Строка, ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка, ПарольЗакрытогоКлюча: Строка): ДействиеPushУведомленияОбОтсутствии
    пер ДействиеPushУведомления: ДействиеPushУведомленияОбОтсутствии = ДействиеPushУведомленияОбОтсутствии.Согласование
    если не СогласованиеДокумента(Заявление, Действие, Текст, ВидЗаявления, ПарольЗакрытогоКлюча)
        знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Заявление как Справочник.Ссылка, "ФизическоеЛицо")
        ДействиеPushУведомления = ФизическоеЛицо == ПользователиСистемы.ТекущееФизическоеЛицо() ? ДействиеPushУведомленияОбОтсутствии.ОткрытьФормуДокумента : ДействиеPushУведомленияОбОтсутствии.ОткрытьФормуРаздела
    ;
    возврат ДействиеPushУведомления
;