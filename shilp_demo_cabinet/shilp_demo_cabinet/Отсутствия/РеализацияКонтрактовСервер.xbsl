импорт ИнтерфейсныеКомпонентыСтандартные
импорт СтандартноеПриложение
импорт КонтрольДоступа
импорт ФизическиеЛица
импорт ВебApi
импорт ОбщегоНазначения
импорт УниверсальныеМеханизмы
импорт Компания::Согласования
импорт ОбменДанными
импорт Криптография
импорт Компания
импорт ЛичныеКабинетыПользователей
импорт Уведомления
импорт Статистика
импорт ВладельцыКабинетов
импорт Документы
импорт ОбщиеСтандартные
импорт УниверсальныеМеханизмы::ШаблоныДокументов
импорт КлиентСервисаПодписания

// Контракт ПараметрыСеансаПоставщик
@ВПроекте
@Реализация
метод КоллекцияПараметровСеанса(МобильныйИнтерфейс: Булево): Соответствие<Строка, Объект>
    пер ПараметрыСеанса = новый Отсутствия.ПараметрыСеанса()
    ЗаполнитьПараметрыСеанса(ПараметрыСеанса)
    возврат {Отсутствия.КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: ПараметрыСеанса}
;
// Конец ПараметрыСеансаПоставщик

метод ЗаполнитьПараметрыСеанса(ПараметрыСеанса: Отсутствия.ПараметрыСеанса)
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка? = ПользователиСистемы.ТекущееФизическоеЛицо()
    если ФизическоеЛицо == Неопределено
        возврат
    ;
    
    ПараметрыСеанса.ФункциональныеОпции = ИспользуемаяФункциональность.ФункциональныеОпции()
;

// Контракт ПодсистемаПриложения

@ВПроекте
@Реализация
метод ОписаниеПодсистемы(): СтандартноеПриложение.ОписаниеПодсистемы
    возврат новый СтандартноеПриложение.ОписаниеПодсистемы(
        Отсутствия.ИД_ПОДСИСТЕМЫ,
        {
            КонтрольДоступа.ИД_ПОДСИСТЕМЫ, 
            Компания.ИД_ПОДСИСТЕМЫ,
            Криптография.ИД_ПОДСИСТЕМЫ,
            ОбменДанными.ИД_ПОДСИСТЕМЫ,
            ФизЛица.ИД_ПОДСИСТЕМЫ,
            // Отпуск.ИД_ПОДСИСТЕМЫ,
            ПолученныеДокументы.ИД_ПОДСИСТЕМЫ,
            ЛичныеКабинетыПользователей.ИД_ПОДСИСТЕМЫ,
            Уведомления.ИД_ПОДСИСТЕМЫ,
            // ПриложениеНастройки.ИД_ПОДСИСТЕМЫ,
            Статистика.ИД_ПОДСИСТЕМЫ,
            // Справки.ИД_ПОДСИСТЕМЫ,
            ВладельцыКабинетов.ИД_ПОДСИСТЕМЫ,
            УниверсальныеМеханизмы.ИД_ПОДСИСТЕМЫ
        }
    )
;

// Конец ПодсистемаПриложения

// Контракт ОбновляемаяПодсистема

@ВПроекте
@Реализация
метод ОбработчикиЗаполнения(): Массив<СтандартноеПриложение.ОписаниеОбработчикаЗаполнения>
    пер Обработчики: Массив<СтандартноеПриложение.ОписаниеОбработчикаЗаполнения>
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаЗаполнения(
                Отсутствия.ИД_ПОДСИСТЕМЫ, 
                "ВидыОтсутствийНастройкаЗаполнить", 
                &ВидыОтсутствийНастройка.Заполнить()))
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаЗаполнения(
                Отсутствия.ИД_ПОДСИСТЕМЫ, 
                "ОтсутствияОбновитьСтроковыеРесурсы", 
                &Отсутствия.ОбновитьСтроковыеРесурсы()))
    возврат Обработчики
;

@ВПроекте
@Реализация
метод ОбработчикиОбновления(): Массив<СтандартноеПриложение.ОписаниеОбработчикаОбновления>
    пер Обработчики: Массив<СтандартноеПриложение.ОписаниеОбработчикаОбновления>
    пер Сервис = ОтсутствияПоставщикВерсииПриложения.ПолучитьСервис()
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаОбновления(
                Отсутствия.ИД_ПОДСИСТЕМЫ, 
                "ОтсутствияОбновитьСтроковыеРесурсы", 
                &Отсутствия.ОбновитьСтроковыеРесурсы(),
                Сервис.ОтсутствияОбновитьСтроковыеРесурсы()))
    Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаОбновления(
                Отсутствия.ИД_ПОДСИСТЕМЫ, 
                "ОтсутствияИсправитьСтроковыеРесурсы", 
                &Отсутствия.ОбновитьСтроковыеРесурсы(),
                Сервис.ОтсутствияИсправитьСтроковыеРесурсы()))
    
    возврат Обработчики
;

// Конец ОбновляемаяПодсистема

//Контракт КонтрольДоступаПоПолномочиямСервис

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеПолномочия()
    Отсутствия.ДобавитьПолномочия()
;

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеРоли()
    Отсутствия.ДобавитьРоли()
;

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеТипыАтрибутов()
;

@ВПроекте
@Реализация
метод СоздатьНаборыОграниченийДоступа()
;

@ВПроекте
@Реализация
метод ТипыАтрибутовПоТипамЗначений(): ЧитаемоеСоответствие<Тип, ТипыАтрибутов.Ссылка>
    возврат {:}
;

//Конец КонтрольДоступаПоПолномочиямСервис

//Контракт ДанныеAPI
@ВПроекте
@Реализация
метод МассивТипов(Получатель: ВидПриложения?, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>
    если Получатель == ВидПриложения.Hrm или Получатель == ВидПриложения.Ess
        Типы.Добавить(Тип<Отсутствие.Ссылка>)
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод ТипДанныхJson(ТипОбъекта: Тип, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>
    выбор ТипОбъекта
    когда Тип<ДниДополнительногоОтдыха.Ссылка>
        Типы.Добавить(ДниДополнительногоОтдыха.ТипДанныхJson(ВерсияФорматаОбмена))
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод ТипКоллекцииДанныхJson(ТипОбъекта: Тип, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>
    выбор ТипОбъекта
    когда Тип<ДниДополнительногоОтдыха.Ссылка>
        Типы.Добавить(ДниДополнительногоОтдыха.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод ИнструментыМенеджераОбъекта(ТипОбъекта: Тип): Массив<ВебApiСервер.ИнструментыМенеджераОбъекта>
    пер НаборИнструментыМенеджераОбъекта: Массив<ВебApiСервер.ИнструментыМенеджераОбъекта>
    пер ИнструментыМенеджераОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта
    выбор ТипОбъекта
    когда Тип<ДниДополнительногоОтдыха.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как ДниДополнительногоОтдыха.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    ;
    возврат НаборИнструментыМенеджераОбъекта
;

@ВПроекте
@Реализация
метод ПолучитьДанныеJson(ТипОбъекта: Тип, Ссылка: ВходящиеДанные.Ссылка|ИсходящиеДанные.Ссылка, 
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<Объект?>
    
    пер ДанныеJson: Массив<Объект?>
    выбор ТипОбъекта
    когда Тип<Отсутствие.Ссылка>
        ДанныеJson.Добавить(Отсутствие.ПолучитьДанныеJson(Ссылка как Отсутствие.Ссылка, Сервисы, ВерсияФорматаОбмена))
    ;
    возврат ДанныеJson
;

@ВПроекте
@Реализация
метод МассивСсылокПоФильтру(ТипОбъекта: Тип, Фильтр: () -> ЧитаемыйМассив<Справочник.Ссылка>): Массив<ЧитаемыйМассив<Справочник.Ссылка>>
    пер МассивСсылок: Массив<ЧитаемыйМассив<Справочник.Ссылка>>
    возврат МассивСсылок
;

@ВПроекте
@Реализация
метод УдалитьОбъекты(ТипОбъекта: Тип, ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>, Сервисы: ВебApiСервер.СервисыУдаленияОбъектов)
    выбор ТипОбъекта
    когда Тип<ДниДополнительногоОтдыха.Ссылка>
        ДниДополнительногоОтдыха.УдалитьОбъекты(ПараметрыЗапроса, Сервисы)
    ;
;

@ВПроекте
@Реализация
метод ТипОбъектаJson(ТипОбъекта: Тип): Массив<Строка>
    пер ТипОбъектаJson: Массив<Строка>
    выбор ТипОбъекта
    когда Тип<ДниДополнительногоОтдыха.Ссылка>
        ТипОбъектаJson.Добавить(ДниДополнительногоОтдыха.ТипОбъектаJson())
    ;
    возврат ТипОбъектаJson
;

@ВПроекте
@Реализация
метод ЗагрузитьОбъектИзJson(ТипОбъекта: Тип, ТипДанных: Тип, ДанныеJson: Объект?, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    выбор ТипОбъекта
    когда Тип<ДниДополнительногоОтдыха.Ссылка>
        выбор ТипДанных
        когда Тип<ДниДополнительногоОтдыха.ДанныеJson>
            ДниДополнительногоОтдыха.ЗагрузитьОбъектИзJson(ДанныеJson как ДниДополнительногоОтдыха.ДанныеJson, Сервисы)
        ;
    ;
;

@ВПроекте
@Реализация
метод ПослеЗаписиГруппыОбъектов(ТипОбъекта: Тип, МассивОбъектовОтложенногоОбновления: Массив<ВебApiСервер.ОбъектОтложенногоОбновления>)
;

@ВПроекте
@Реализация
метод ИзменитьОбъектИзJson(ТипОбъекта: Тип, ДанныеJson: Объект, Сервисы: ВебApiСервер.СервисыЗагрузкиJson, ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации)
;

@ВПроекте
@Реализация
метод ЗавершитьИзменениеОбъектИзJson(ТипОбъекта: Тип, МассивСсылок: ЧитаемыйМассив<ВходящиеДанные.Ссылка>, ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации)
;

@ВПроекте
@Реализация
метод ГруппаИзмененийВJson(ТипОбъекта: Тип, Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<ЧитаемоеСоответствие<Строка, Массив<Объект?>>>
    
    пер ДанныеJson: Массив<ЧитаемоеСоответствие<Строка, Массив<Объект?>>>
    выбор ТипОбъекта
    когда Тип<Отсутствие.Ссылка>
        ДанныеJson.Добавить(Отсутствие.ГруппаИзмененийВJson(Ссылки, Сервисы, ВерсияФорматаОбмена))
    ;
    возврат ДанныеJson
;

//Конец ДанныеApi

// Контракт СогласованияПользователь
@ВПроекте
@Реализация
метод СформироватьПредставленияДокумента(Документ: ПодписываемыйДокумент.Ссылка)
    выбор Документ
    когда это Отсутствие.Ссылка
        ПредставленияДокументов.СформироватьПредставленияДокумента(Документ как Справочник.Ссылка, Ложь)
    ;
;

@ВПроекте
@Реализация
метод ДокументСогласованияJson(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson): СогласованияДокументов.ДокументСогласованияJson?
    
    знч Документ = ДанныеОбъекта["Документ"] как Справочник.Ссылка
    выбор Документ
    когда это Отсутствие.Ссылка
        
        возврат новый СогласованияДокументов.ДокументСогласованияJson(
            Документ.Ид.ВСтроку()
        )
    ;
    
    возврат Неопределено
;

@ВПроекте
@Реализация
метод ПослеПодписанияДокумента(Документ: ПодписываемыйДокумент.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего, ОбновитьПредставление: Булево)
    пер ЭтоДокументПодсистемы = Ложь
    выбор Документ
    когда это Отсутствие.Ссылка
        ЭтоДокументПодсистемы = Истина
        Отсутствие.ПослеПодписания(Документ как Отсутствие.Ссылка, ДанныеСогласующего)
    ;
    если ЭтоДокументПодсистемы и ОбновитьПредставление
        СформироватьПредставленияДокумента(Документ)
    ;
;

@ВПроекте
@Реализация
метод ОтправлятьСогласование(Документ: ПодписываемыйДокумент.Ссылка): Булево
    пер ЭтоДокументПодсистемы: Булево
    выбор Документ
    когда это Отсутствие.Ссылка
        ЭтоДокументПодсистемы = ОбменДанными.ЭтоОтправляемыйДокумент(Документ как ИсходящиеДанные.Ссылка)
    ;
    возврат ЭтоДокументПодсистемы
;

@ВПроекте
@Реализация
метод ДокументыНаСогласовании(Согласующий: ФизическиеЛица.Ссылка): ЧитаемыйМассив<ПодписываемыйДокумент.Ссылка>
    знч Документы: Массив<Отсутствие.Ссылка>
    знч Запрос = Запрос{
        Выбрать Различные
            Отсутствие.Ссылка как Документ,
            Отсутствие.ФизическоеЛицо как ФизическоеЛицо
        Из
            Отсутствие как Отсутствие
            Внутреннее соединение СостояниеДокументов как СостояниеДокументов
                по СостояниеДокументов.Документ == Отсутствие.Ссылка
                и Отсутствие.ТребуетСогласования
            Внутреннее соединение СогласующиеЗаявленийСотрудников как СогласующиеЗаявленийСотрудников
                по Отсутствие.ФизическоеЛицо == СогласующиеЗаявленийСотрудников.Сотрудник
                и СогласующиеЗаявленийСотрудников.ВидСогласуемогоЗаявления == %{Отсутствия.ВидСогласуемогоЗаявленияОтсутствие()}
                и (СогласующиеЗаявленийСотрудников.Согласующий == %Согласующий
                    или (СогласующиеЗаявленийСотрудников.СпособЗамещения == СпособыЗамещения.ВместеССогласующим)
                        и СогласующиеЗаявленийСотрудников.ПервичныйСогласующий == %Согласующий)
            Левое соединение СогласованияДокументов как СогласованияДокументов
                по СогласованияДокументов.Документ == СостояниеДокументов.Документ
                    и (СогласованияДокументов.НомерШагаСогласования > СогласующиеЗаявленийСотрудников.ШагСогласования
                            или СогласованияДокументов.УчастникСогласования == %Согласующий)
            Левое соединение ОтправляемыеДокументы как ОтправляемыеДокументы
                по ОтправляемыеДокументы.Владелец == СостояниеДокументов.Документ
        Где
            СостояниеДокументов.Состояние != СостоянияДокумента.Черновик
            и СостояниеДокументов.Состояние != СостоянияДокумента.ПолученОтказ
            и ОтправляемыеДокументы.Владелец Есть Null
            и СогласованияДокументов.Документ Есть Null
            и не 1 в 
                (Выбрать Первые 1
                    1 как поле
                из
                    СогласованияДокументов как СогласованияВСервисеПодписания
                где
                    СогласованияВСервисеПодписания.Документ == Отсутствие.Ссылка
                    и СогласованияВСервисеПодписания.УчастникСогласования == Отсутствие.ФизическоеЛицо
                    и СогласованияВСервисеПодписания.Результат == РезультатыСогласования.НаПодписанииВСервисеПодписания)
    }
    
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        пер ДолженСогласовать = Ложь
        знч ТекущиеСогласующие = Согласования.ТекущиеСогласующие(
            РезультатСтрока.Документ, Отсутствия.ВидСогласуемогоЗаявленияОтсутствие(), РезультатСтрока.ФизическоеЛицо)
            
        для ТекущийСогласующий из ТекущиеСогласующие
            если ТекущийСогласующий.Согласующий == Согласующий
                ДолженСогласовать = Истина
                прервать
            ;
        ;
        если не ДолженСогласовать
            продолжить
        ;

        Документы.Добавить(РезультатСтрока.Документ)
    ;
    
    возврат Документы
;

@ВПроекте
@Реализация
метод ДокументыСогласованные(Согласующий: ФизическиеЛица.Ссылка): ЧитаемыйМассив<ПодписываемыйДокумент.Ссылка>
    знч Документы: Массив<Отсутствие.Ссылка>
    
    знч Запрос = Запрос{
        Выбрать Различные
            Отсутствие.Ссылка как Документ
        Из
            Отсутствие как Отсутствие
            Внутреннее соединение СостояниеДокументов как СостояниеДокументов
                по СостояниеДокументов.Документ == Отсутствие.Ссылка
                и Отсутствие.ТребуетСогласования
            Внутреннее соединение СогласующиеЗаявленийСотрудников как СогласующиеЗаявленийСотрудников
                по Отсутствие.ФизическоеЛицо == СогласующиеЗаявленийСотрудников.Сотрудник
                и СогласующиеЗаявленийСотрудников.ВидСогласуемогоЗаявления == %{Отсутствия.ВидСогласуемогоЗаявленияОтсутствие()}
                и (СогласующиеЗаявленийСотрудников.Согласующий == %Согласующий
                    или (СогласующиеЗаявленийСотрудников.СпособЗамещения == СпособыЗамещения.ВместеССогласующим)
                        и СогласующиеЗаявленийСотрудников.ПервичныйСогласующий == %Согласующий)
            Внутреннее соединение СогласованияДокументов как СогласованияДокументов
                по СогласованияДокументов.Документ == СостояниеДокументов.Документ
                    и (СогласованияДокументов.НомерШагаСогласования > СогласующиеЗаявленийСотрудников.ШагСогласования
                        или СогласованияДокументов.УчастникСогласования == %Согласующий)
        Где
            СостояниеДокументов.Состояние != СостоянияДокумента.Черновик
    }
    
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        Документы.Добавить(РезультатСтрока.Документ)
    ;
    
    возврат Документы
;

@ВПроекте
@Реализация
метод ДокументДляОзнакомления(Документ: ПодписываемыйДокумент.Ссылка): Булево
    возврат Ложь
;

@ВПроекте
@Реализация
метод ПравилаСогласованияПоУмолчанию(): ЧитаемыйМассив<Согласования.ПравилоСогласования>
    знч ПравилоСогласования = новый Согласования.ПравилоСогласования(
        ВидСогласуемогоЗаявления = Отсутствия.ВидСогласуемогоЗаявленияОтсутствие(),
        ТипПравила = ТипыПравилСогласования.ДляВсех,
        ПоУмолчанию = Истина)
    ПравилоСогласования.ШагиПравила.Добавить(
        новый Согласования.ШагПравилаСогласования(
            1,
            ТипыШаговСогласования.ВсеСогласующие,
            [Согласования.РольПодписантаНепосредственныйРуководитель()]
        )
    )
    
    возврат [ПравилоСогласования]
;

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеВидыСогласуемыхЗаявлений()
    ВидыСогласуемыхЗаявлений.ДобавитьПредопределенныйВидСогласуемогоЗаявления(
        "Согласование отсутствий",
        "absences",
        Отсутствия.ВИД_СОГЛАСОВАНИЯ_ОТСУТСТВИЙ,
        ВидыСогласуемыхЗаявленийУстарело.ЗаявлениеНаОтсутствие,
        Истина
    )
;

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеРолиПодписантов()
;

конст ОТСУТСТВИЕ = "Отсутствие"

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеТипыСогласуемыхДокументов()
    Согласования.ДобавитьПредопределенныйТипСогласуемогоДокумента(ОТСУТСТВИЕ)
;

@ВПроекте
@Реализация
метод ТипСогласуемогоДокумента(ОбъектСогласования: ПодписываемыйДокумент.Ссылка|ВидыСогласуемыхЗаявлений.Ссылка): ТипыСогласуемыхДокументов.Ссылка?
    выбор ОбъектСогласования
    когда это Отсутствие.Ссылка
        возврат Согласования.НайтиТипСогласуемогоДокумента(ОТСУТСТВИЕ)
    ;
    
    если ОбъектСогласования == Отсутствия.ВидСогласуемогоЗаявленияОтсутствие()
        возврат Согласования.НайтиТипСогласуемогоДокумента(ОТСУТСТВИЕ)
    ;
    
    возврат Неопределено
;

@ВПроекте
@Реализация
метод ТипыСогласуемыхДокументовПолучателя(Получатель: ВидПриложения?): Массив<ТипыСогласуемыхДокументов.Ссылка>
    пер Типы: Массив<ТипыСогласуемыхДокументов.Ссылка>
    если Получатель == ВидПриложения.Hrm
        Типы.Добавить(Согласования.НайтиТипСогласуемогоДокумента(ОТСУТСТВИЕ))
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод РольСогласующегоЗаявления(ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка): Роли.Ссылка?
    если ВидЗаявления == Отсутствия.ВидСогласуемогоЗаявленияОтсутствие()
        возврат Отсутствия.РольСогласованиеОтсутствий()
    иначе
        возврат Неопределено
    ;
;

@ВПроекте
@Реализация
метод ВидСогласуемогоЗаявления(Документ: ПодписываемыйДокумент.Ссылка): ВидыСогласуемыхЗаявлений.Ссылка?
    если Документ это Отсутствие.Ссылка
        возврат Отсутствия.ВидСогласуемогоЗаявленияОтсутствие()
    иначе 
        возврат Неопределено
    ;
;

@ВПроекте
@Реализация
метод Согласуемый(Документ: ПодписываемыйДокумент.Ссылка): ФизическиеЛица.Ссылка?
    если Документ это Отсутствие.Ссылка
        знч Запрос = Запрос{
            Выбрать
                Отсутствие.ФизическоеЛицо Как ФизическоеЛицо
            Из
                Отсутствие Как Отсутствие
            Где
                Отсутствие.Ссылка == %Документ
        } 
        возврат Запрос.Выполнить().ЕдинственныйИлиУмолчание()?.ФизическоеЛицо!
    иначе 
        возврат Неопределено
    ;
;

@ВПроекте
@Реализация
метод ИдентификаторыЭлектронныхДокументов(Документ: ПодписываемыйДокумент.Ссылка): ЧитаемыйМассив<Строка>
    знч ИдентификаторыЭлектронныхДокументов: Массив<Строка>
    если Документ это Отсутствие.Ссылка
        пер ИдентификаторыОтсутствия = Отсутствие.ИдентификаторыЭлектронныхДокументовОтсутствий([Документ как Отсутствие.Ссылка])[Документ как Отсутствие.Ссылка]
        для ИдентификаторОтсутствия из ИдентификаторыОтсутствия
            ИдентификаторыЭлектронныхДокументов.Добавить(
                Файлы.ИдентификаторЭлектронногоДокумента(Документ, ИдентификаторОтсутствия))
        ;
    ;
    возврат ИдентификаторыЭлектронныхДокументов
;

// Конец СогласованияПользователь

// Контракт ПодписываемыйДокументПоставщикОграничений

@ВПроекте
@Реализация
метод РазрешенияДоступаПодписываемыхДокументов(Документы: ЧитаемыйМассив<ПодписываемыйДокумент.Ссылка>): ЧитаемоеСоответствие<ПодписываемыйДокумент.Ссылка, ЧитаемыйМассив<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ПодписываемыйДокумент.Ссылка, ЧитаемыйМассив<РазрешениеДоступа>>
    знч ВладельцыСогласуемыхДокументов: Соответствие<ПодписываемыйДокумент.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч ДокументыОтсутствие: Массив<Отсутствие.Ссылка>
    знч ДокументыПодсистемы: Массив<ПодписываемыйДокумент.Ссылка>
    для Документ из Документы
        выбор Документ
        когда это Отсутствие.Ссылка
            ДокументыОтсутствие.Добавить(Документ как Отсутствие.Ссылка)
            ДокументыПодсистемы.Добавить(Документ)
        ;
    ;   
        
    ВладельцыСогласуемыхДокументов.ВставитьВсе(Отсутствие.ФизическиеЛицаДокументов(ДокументыОтсутствие))
    
    для Документ из ДокументыПодсистемы
        знч РазрешенияДокумента: Массив<РазрешениеДоступа>
        РазрешенияДокумента.ДобавитьВсе(
            КонтрольДоступа.ЧтениеДанныхСправочниковПерсонально(ВладельцыСогласуемыхДокументов.ПолучитьИлиУмолчание(Документ)))
        РазрешенияДокумента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПоПолномочиям(
            [Отсутствия.ПолномочиеПросмотрОтсутствий()],
            ВладельцыСогласуемыхДокументов.ПолучитьИлиУмолчание(Документ, [])
        ))
        Разрешения.Вставить(Документ, РазрешенияДокумента)
    ;
    
    возврат Разрешения
;

// Конец ПодписываемыйДокументПоставщикОграничений

// Контракт Документы
@ВПроекте
@Реализация
метод СтрокиДокументовНаСогласовании(Документы: ЧитаемыйМассив<ПодписываемыйДокумент.Ссылка>): ЧитаемоеСоответствие<ПодписываемыйДокумент.Ссылка, СтрокаСпискаСМиниатюройКомпонентДанных>
    знч ПредставлениеДокументов: Соответствие<Отсутствие.Ссылка, СтрокаСпискаСМиниатюройКомпонентДанных>
    
    знч ДокументыОтсутствие: Массив<Отсутствие.Ссылка>
    для Документ из Документы
        если Документ это Отсутствие.Ссылка
            ДокументыОтсутствие.Добавить(Документ как Отсутствие.Ссылка)
        ;
    ;
    
    знч Запрос = Запрос{
        Выбрать Различные
            Отсутствие.Ссылка как Документ,
            СостояниеДокументов.Состояние как Состояние,
            Отсутствие.ДатаНачала как ДатаНачала,
            Отсутствие.ДатаОкончания как ДатаОкончания,
            Отсутствие.ДатаОтсутствия как ДатаОтсутствия,
            Отсутствие.ВремяНачала как ВремяНачала,
            Отсутствие.ВремяОкончания как ВремяОкончания,
            Отсутствие.ПолныйДень как ПолныйДень,
            Отсутствие.ФизическоеЛицо как ФизическоеЛицо,
            Отсутствие.ФизическоеЛицо.Представление.ЗаменитьNull("") как ФизическоеЛицоПредставление,
            Отсутствие.ФизическоеЛицо.Миниатюра.ЗаменитьNull(Неопределено) как Миниатюра,
            Отсутствие.Причина как Причина
        Из
            Отсутствие как Отсутствие
            Внутреннее соединение СостояниеДокументов как СостояниеДокументов
                по СостояниеДокументов.Документ == Отсутствие.Ссылка
        Где
            СостояниеДокументов.Документ В (%ДокументыОтсутствие)
        Упорядочить По
            ДатаНачала Убыв
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        знч ДанныеПредставления = новый СтрокаСпискаСМиниатюройКомпонентДанных()
        ДанныеПредставления.Представление = СтрокаРезультата.ФизическоеЛицоПредставление
        если СтрокаРезультата.ПолныйДень
            ДанныеПредставления.ДополнительноеПредставление =
                Отсутствия.ПредставлениеОтсутствия(
                    СтрокаРезультата.ДатаНачала,
                    СтрокаРезультата.ДатаОкончания,
                    СтрокаРезультата.Причина)
        иначе
            ДанныеПредставления.ДополнительноеПредставление =
                Отсутствия.ПредставлениеВнутрисменногоОтсутствия(
                    СтрокаРезультата.ДатаОтсутствия,
                    СтрокаРезультата.ВремяНачала,
                    СтрокаРезультата.ВремяОкончания,
                    СтрокаРезультата.Причина)
        ;
        
        ДанныеПредставления.Изображение = ФизическиеЛица.ФотографияИзФайла(СтрокаРезультата.Миниатюра)
        
        ПредставлениеДокументов.Вставить(СтрокаРезультата.Документ, ДанныеПредставления)
    ;
    
    возврат ПредставлениеДокументов
;
//Конец Документы

// Контракт СтатистикаПоставщик

@ВПроекте
@Реализация
метод СтатистикаСправочников(): Массив<СтатистикаДанных.Справочник>
    знч СправочникиСтатистика: Массив<СтатистикаДанных.Справочник>
    возврат СправочникиСтатистика
;

@ВПроекте
@Реализация
метод СтатистикаДокументов(): Массив<СтатистикаДанных.Документ>
    знч ДокументыСтатистика: Массив<СтатистикаДанных.Документ>
    ДокументыСтатистика.ДобавитьВсе(СтатистикаДанных.СтатистикаПоДокументу(Отсутствие))
    возврат ДокументыСтатистика
;

// Конец СтатистикаПоставщик

// Контракт ДанныеПодписанияСервис
@ВПроекте
@Реализация
метод ДанныеОрганизации(ДокументСсылка: ДокументПодписываемыйВСервисеПодписания.Ссылка): Соответствие<Строка, ОрганизацияПодписываемогоДокумента.Ссылка?>?
    пер ОрганизацииДокумента: Соответствие<Строка, ОрганизацияПодписываемогоДокумента.Ссылка?>?
    если ДокументСсылка это Отсутствие.Ссылка
        ОрганизацииДокумента = новый Соответствие<Строка, ОрганизацияПодписываемогоДокумента.Ссылка?>()
        пер ИдентификаторыОтсутствия =
            Отсутствие.ИдентификаторыЭлектронныхДокументовОтсутствий([ДокументСсылка как Отсутствие.Ссылка])[ДокументСсылка как Отсутствие.Ссылка]
        для ИдентификаторОтсутствия из ИдентификаторыОтсутствия
            ОрганизацииДокумента.Вставить(
                Файлы.ИдентификаторЭлектронногоДокумента(ДокументСсылка, ИдентификаторОтсутствия),
                ИдентификаторОтсутствия)
        ;
    ;
    возврат ОрганизацииДокумента
;

@ВПроекте
@Реализация
метод ДанныеДокументов(ДокументСсылка: ДокументПодписываемыйВСервисеПодписания.Ссылка): Массив<ДокументПодписываемыйВСервисеПодписания.Ссылка>?
    возврат Неопределено
;
// Конец ДанныеПодписанияСервис

// Контракт ИсходящиеДокументыСОписанием

@ВПроекте
@Реализация
метод ДокументСнабжаетсяФайломОписания(СсылкаНаДокумент: Сущность.Ключ): Булево
    если СсылкаНаДокумент это Отсутствие.Ссылка
        знч Причина = МенеджерСущности.ЗначениеРеквизитаОбъекта(СсылкаНаДокумент, "Причина")
        возврат Причина != Неопределено
            и Причина != ВидыОтсутствий.Опоздание
            и Причина != ВидыОтсутствий.Болезнь
            и Причина != ВидыОтсутствий.ЛичныеОбстоятельства
    ;
    возврат Ложь
;

@ВПроекте
@Реализация
метод ДанныеДляПодготовкиОписаний(СсылкаНаДокумент: Сущность.Ключ): Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>?
    
    если СсылкаНаДокумент это Отсутствие.Ссылка
        возврат Отсутствие.ДанныеДокументаДляПодготовкиОписаний(СсылкаНаДокумент)
    ;
    возврат Неопределено
;

// Конец ИсходящиеДокументыСОписанием

// Контракт ПоставщикШаблонов

@ВПроекте
@Реализация
метод ДанныеШаблонаДокумента(ДокументСсылка: Справочник.Ссылка, ДополнительныеПараметры: Соответствие<Строка, Объект>? = Неопределено): ШаблоныДокументовМенеджер.ДанныеДляШаблонаПечатнойФормы?
    выбор ДокументСсылка
    когда это Отсутствие.Ссылка
        знч Ид = УниверсальныеМеханизмы.Ид(Отсутствия.ПОДСИСТЕМА_ОТСУТСТВИЯ, Отсутствия.ШАБЛОН_ЗАЯВЛЕНИЯ_НА_ОТСУТСТВИЕ)
        пер ДанныеДляШаблона =  новый ШаблоныДокументовМенеджер.ДанныеДляШаблонаПечатнойФормы(
            УниверсальныеМеханизмы.ДвоичныеДанные(Ид),
            УсловияВыводаОбластейШаблонов.УсловияВыводаОбластей(Ид),
            Отсутствие.ДанныеДокументаДляПечатнойФормы(ДокументСсылка))
        ШаблоныДокументовМенеджер.ДополнитьДанныеДополнительнымиРеквизитами(ДанныеДляШаблона, ДокументСсылка, Ид)
        возврат ДанныеДляШаблона
    ;
    возврат Неопределено
;

@ВПроекте
@Реализация
метод ДополнитьДанныеШаблонаДокумента(ДокументСсылка: Справочник.Ссылка, ДанныеДокумента: Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>): Булево
    выбор ДокументСсылка
    когда это Отсутствие.Ссылка
        Отсутствие.ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента)
        возврат Истина
    ;
    возврат Ложь
;

// Конец ПоставщикШаблонов

// Контракт ПоставщикОбщихДанныхДляПечатныхФорм

@ВПроекте
@Реализация
метод ДополнитьДанныеДокументаОбщимиДанными(ДанныеДокумента: ШаблоныДокументовМенеджер.ДанныеДляШаблонаПечатнойФормы)
    ДанныеДокумента.ЗначенияПеречислений.ВставитьВсе(ЗначенияПеречисленийОбщихДанных())
;

метод ЗначенияПеречисленийОбщихДанных(): Соответствие<Строка, Объект>
    пер ЗначенияПеречислений = новый Соответствие<Строка, Объект>()
    для ВидОтсутствия из ВидыОтсутствий.Элементы()
        ЗначенияПеречислений.Вставить("reasons.%{Отсутствие.ПричиныОтсутствийВJson(ВидОтсутствия)}", ВидОтсутствия)
    ;
    возврат ЗначенияПеречислений
;

// Конец ПоставщикОбщихДанныхДляПечатныхФорм

// Контракт СтроковыеРесурсыПоставщик

@ВПроекте
@Реализация
метод ИменаРесурсовПоГруппеРесурсов(УчитыватьИспользуемуюФункциональность: Булево): Соответствие<Строка, Коллекция<Строка>>
    знч Ресурсы = <Строка>[]

    Отсутствия.ШаблонСообщения.Элементы()
        .ДляКаждого(ШаблонСообщения -> Уведомления.ВидыТекстов.Элементы()
                .ДляКаждого(ВидТекста -> Ресурсы.Добавить(ШаблонСообщения.ВСтроку() + ВидТекста.ВСтроку())))
                
    возврат {Отсутствия.ГРУППА_РЕСУРСОВ_ОТСУТСТВИЯ: Ресурсы}
;

// Конец СтроковыеРесурсыПоставщик