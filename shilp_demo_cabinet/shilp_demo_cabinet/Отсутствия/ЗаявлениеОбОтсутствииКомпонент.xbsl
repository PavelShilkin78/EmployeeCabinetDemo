импорт УниверсальныеМеханизмы
импорт Компания::Согласования
импорт ИнтерфейсныеКомпонентыСтандартные
импорт ИнтерфейсныеКомпонентыКабинеты
импорт Компания
импорт КонтрольДоступа
импорт ОбменДанными
импорт ОбщегоНазначения
импорт ОбщиеСтандартные
импорт УниверсальныеМеханизмы::ШаблоныДокументов
импорт ФизическиеЛица
импорт ВладельцыКабинетов
импорт ЛичныеКабинетыПользователей

// Контракт ДокументСотрудникаКомпонент

@ВПроекте
@Реализация
метод УстановитьТекущееЗаявление(Заявление: Объект)
    если Заявление это Отсутствие.Объект
        Объект = Заявление как Отсутствие.Объект
        ПрочитатьОбъект()
    ;
;

// Конец ДокументСотрудникаКомпонент

метод ПрочитатьОбъект()
    если Объект.ЭтоНовый()
        Объект.Дата = Дата.Сейчас()
        если Объект.ПолныйДень
            пер Завтра: Дата = Дата.Сейчас().ДобавитьДни(1)
            ПериодОтсутствия = новый ЗакрытыйДиапазон<Дата>(Завтра, Завтра)
        иначе
            пер ВремяОтсутствияПоУмолчанию: ЗакрытыйДиапазон<Время> = Отсутствия.ВремяОтсутствияПоУмолчанию()
            Объект.ДатаОтсутствия = Время.Сейчас() <= ВремяОтсутствияПоУмолчанию.От ? Дата.Сейчас() : Дата.Сейчас().ДобавитьДни(1)
            ПериодОтсутствия = новый ЗакрытыйДиапазон<Дата>(Объект.ДатаОтсутствия, Объект.ДатаОтсутствия)
            если Объект.Причина == ВидыОтсутствий.Опоздание
                ВремяОпоздания = МенеджерДат.БлижайшееВремя(
                    ВремяОтсутствияПоУмолчанию.От, 
                    ВладельцыКабинетов.ПараметрыСеанса().КвантВремени
                )
            иначе
                ВремяОтсутствия = ВремяОтсутствияПоУмолчанию
            ;
        ;
    иначе
        если Объект.ПолныйДень
            ПериодОтсутствия = новый ЗакрытыйДиапазон<Дата>(Объект.ДатаНачала, Объект.ДатаОкончания)
        иначе если Объект.Причина == ВидыОтсутствий.Опоздание
            ВремяОпоздания = Объект.ВремяОкончания
        иначе
            ВремяОтсутствия = новый ЗакрытыйДиапазон<Время>(Объект.ВремяНачала, Объект.ВремяОкончания)
        ;
    ;
    если Объект.Причина == ВидыОтсутствий.Командировка
        или Объект.Причина == ВидыОтсутствий.УчебныйОтпуск
        или Объект.Причина == ВидыОтсутствий.Отгул
        
        пер ИдентификаторыЭлектронныхДокументов = Объект.ИдентификаторыЭлектронныхДокументов
        если не ИдентификаторыЭлектронныхДокументов.Пусто()
            Организация = ИдентификаторыЭлектронныхДокументов[0]
        ;
    иначе
        Организация = Неопределено
    ;
    ПрочитатьДополнительныеДанныеДокумента(Объект.Причина)
    ДанныеСогласующего = ДанныеДокумента.ДанныеСогласующего
    СброситьМодифицированностьТабличныхЧастей()
    если Объект.ЭтоНовый()
        Объект.ТребуетСогласования = ДанныеДокумента.ВидОтсутствияТребуетСогласования и ДанныеДокумента.ЕстьСогласующие
        Компоненты.Заместители.СобственнаяМодифицированность = не ДанныеДокумента.ТабличныеЧасти.ТаблицаЗаместители.Заместители.Пусто()
        Компоненты.Уведомляемые.СобственнаяМодифицированность = не ДанныеДокумента.ТабличныеЧасти.ТаблицаУведомляемые.Уведомляемые.Пусто()
        Компоненты.ДополнительныеРеквизиты.СобственнаяМодифицированность = не ДанныеДокумента.ТабличныеЧасти.ДополнительныеРеквизиты.Реквизиты.Пусто()
    ;
    
    пер МаксимальныйШагСогласования: Число
    пер ТекущийШагСогласования: Число
    для Элемент из ДанныеДокумента.ТабличныеЧасти.ТаблицаСогласующие.Согласующие
        если Элемент.Результат == РезультатыСогласования.НаСогласовании
            продолжить
        ;
        МаксимальныйШагСогласования = Макс(МаксимальныйШагСогласования, Элемент.НомерШагаСогласования)
        если Элемент.УчастникСогласования == ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
            ПодписанТекущимФизическимЛицом = Истина
            ТекущийШагСогласования = Элемент.НомерШагаСогласования
        ;
    ;
    
    ПодписанПослеАвтора = ТекущийШагСогласования < МаксимальныйШагСогласования
    
    РежимСогласования = Согласования.ЭтоРежимСогласования(
        ДанныеДокумента.Состояние, ДанныеДокумента.Отправлен,ПодписанТекущимФизическимЛицом,
        (Объект.ФизическоеЛицо),
        ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо,
        ДанныеСогласующего)
        
    РедактированиеЗапрещено = ОбщегоНазначения.РедактированиеЗапрещено(ДанныеДокумента.Состояние, Объект.ФизическоеЛицо, ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо)
    если не РежимПросмотра
        ОтслеживатьИзменениеДанных(Компоненты.ПрисоединенныеФайлы, Истина)
        ОтслеживатьИзменениеДанных(Компоненты.Заместители, Истина)
        ОтслеживатьИзменениеДанных(Компоненты.Уведомляемые, Истина)
        ОтслеживатьИзменениеДанных(Компоненты.ДополнительныеРеквизиты, Истина)
        ЗавершеноЧтениеДанных(новый СобытиеКомпонента())
    ;
    ИнтерфейсныеКомпоненты.ИнициализироватьПодчиненныеКомпоненты(Компоненты)
    СобственнаяМодифицированность = Ложь
;

метод ЗаявлениеОбОтсутствииКомпонентЗаголовок(): Строка
    пер ЗаявлениеОбОтсутствииКомпонентЗаголовок: Строка
    если РежимПросмотра
        ЗаявлениеОбОтсутствииКомпонентЗаголовок = ЗаголовокФормы()
    ;
    возврат ЗаявлениеОбОтсутствииКомпонентЗаголовок
;

метод ЗаявлениеОбОтсутствииКомпонентОтступПоВертикали(): РазмерОтступа | Авто
    возврат РежимПросмотра ? РазмерОтступа.Двойной : РазмерОтступа.Отсутствует
;

@ВПодсистеме 
метод ЗаголовокФормы(): Строка
    пер ЗаголовокФормы: Строка
    пер Причина: ВидыОтсутствий? = Объект?.Причина
    если Причина != Неопределено
        ЗаголовокФормы = Причина.Представление()
    ;
    возврат ЗаголовокФормы
;

метод ДатаОтсутствияПриИзмененииЗначения(Источник: ПолеВводаРасширенноеДата, Событие: СобытиеПриИзменении<Объект?>)
    пер ДатаОтсутствия: Дата? = Объект.ДатаОтсутствия
    если ДатаОтсутствия != Неопределено
        ВремяОтсутствия = Отсутствия.ВремяОтсутствияПоУмолчанию(ДатаОтсутствия)
        ПериодОтсутствия = новый ЗакрытыйДиапазон<Дата>(ДатаОтсутствия, ДатаОтсутствия)
        Объект.ДатаНачала = ПериодОтсутствия?.От
        Объект.ДатаОкончания = ПериодОтсутствия?.До
    ;
    СброситьПредупрежденияПериода()
;


метод ПериодОтсутствияПриИзмененииЗначения(Источник: ПолеВводаРасширенноеПериод, Событие: СобытиеПриИзменении<ЗакрытыйДиапазон<Дата>?>)
    СброситьПредупрежденияПериода()
;

метод ВремяОтсутствияПриИзмененииЗначения(Источник: ПолеВводаРасширенноеПериодВремени, Событие: СобытиеПриИзменении<ЗакрытыйДиапазон<Время>?>)
    СброситьПредупрежденияПериода()   
;

метод ВремяОпозданияПриИзмененииЗначения(Источник: ПолеВводаРасширенноеВремя, Событие: СобытиеПриИзменении<Время?>)
    СброситьПредупрежденияПериода()   
;

метод ПолныйДеньПриИзмененииЗначения(Источник: ФлажокРасширенный, Событие: СобытиеПриИзменении<Булево?>)
    если ЦелодневноеОтсутствие()
        пер ТабличныеЧасти = ДанныеТабличныхЧастейПоУмолчанию(
            Объект.Ссылка,
            (Объект.ФизическоеЛицо)
        )
        ДанныеДокумента.ТабличныеЧасти.ТаблицаУведомляемые = ТабличныеЧасти.ТаблицаУведомляемые
    иначе
        ДанныеДокумента.ТабличныеЧасти.ТаблицаУведомляемые.Уведомляемые.Очистить()
    ;
;

метод ПрочитатьДополнительныеДанныеДокумента(ПричинаОтсутствия: ВидыОтсутствий)
    ДанныеДокумента = ДополнительныеДанныеДокумента(
        Объект.ЭтоНовый(),
        Объект.Ссылка, 
        Объект.ФизическоеЛицо, 
        ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо,
        Компания.ПараметрыСеанса().РуководительТекущегоПользователя,
        ПричинаОтсутствия, 
        Организация
    )
;

метод СогласующиеТаблицаСогласующие(): Согласующие
    пер Таблица: Согласующие
    если ДанныеДокумента != Неопределено
        Таблица = ДанныеДокумента.ТабличныеЧасти.ТаблицаСогласующие
    ;
    возврат Таблица 
;

метод ЗаместителиТаблицаЗаместители(): Заместители
    возврат ТаблицаЗаместители()
;

метод УведомляемыеТаблицаУведомляемые(): Уведомляемые
    пер Таблица: Уведомляемые
    если Объект.ПолныйДень и ДанныеДокумента != Неопределено
        Таблица = ДанныеДокумента.ТабличныеЧасти.ТаблицаУведомляемые
    ;
    возврат Таблица 
;

метод УведомляемыеТаблицаЗаместители(): Заместители
    возврат ТаблицаЗаместители()
;

метод ПрисоединенныеФайлыТаблицаФайлы(): ПрисоединенныеФайлы
    пер Таблица: ПрисоединенныеФайлы
    если ДанныеДокумента != Неопределено
        Таблица = ДанныеДокумента.ТабличныеЧасти.ТаблицаФайлы
    ;
    возврат Таблица 
;

метод ТаблицаЗаместители(): Заместители
    пер Таблица: Заместители
    если ДанныеДокумента != Неопределено
        Таблица = ДанныеДокумента.ТабличныеЧасти.ТаблицаЗаместители
    ;
    возврат Таблица 
;

метод ДополнительныеРеквизитыТаблицаПараметров(): РеквизитыШаблона
    пер Таблица: РеквизитыШаблона
    если ДанныеДокумента != Неопределено
        Таблица = ДанныеДокумента.ТабличныеЧасти.ДополнительныеРеквизиты
    ;
    возврат Таблица 
;

метод ФизическоеЛицоЗаголовок(): Строка
    пер ФизическоеЛицоЗаголовок: Строка
    если ДанныеДокумента != Неопределено
        ФизическоеЛицоЗаголовок = ДанныеДокумента.ФизическоеЛицоЗаголовок
    ;
    возврат ФизическоеЛицоЗаголовок
;

метод ПредставлениеРабочегоМестаЗаголовок(): Строка
    если ДанныеДокумента != Неопределено
        возврат ДанныеДокумента.ПредставлениеРабочегоМеста
    ;
    возврат ""
;

метод ФизическоеЛицоВидимость(): Булево
    возврат (Объект.ФизическоеЛицо) != ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
;

метод ПредставлениеРабочегоМестаВидимость(): Булево
    возврат ФизическоеЛицоВидимость()
;

метод ДатаОтсутствияЗаголовок(): Строка
    пер ЗаголовокПоляДатаОтсутствия = "Дата отсутствия"
    если Объект.Причина == ВидыОтсутствий.Опоздание
        ЗаголовокПоляДатаОтсутствия = "Дата опоздания"
    ;
    возврат ЗаголовокПоляДатаОтсутствия
;

метод ПолныйДеньВидимость(): Булево
    возврат Объект.Причина == ВидыОтсутствий.ЛичныеОбстоятельства
;

метод ВремяОтсутствияВидимость(): Булево
    возврат ВнутрисменноеОтсутствие() и не ВремяОпозданияВидимость()
;

метод ВремяОпозданияВидимость(): Булево
    возврат Объект.Причина == ВидыОтсутствий.Опоздание
;

метод ЦелодневноеОтсутствие(): Булево
    возврат Объект.ПолныйДень
;

метод ВнутрисменноеОтсутствие(): Булево
    возврат не ЦелодневноеОтсутствие()
;

метод ЗаместителиВидимость(): Булево
    возврат (Объект.Причина != ВидыОтсутствий.Опоздание)
;

метод УведомляемыеВидимость(): Булево
    возврат ЦелодневноеОтсутствие()
;

метод ТребуетСогласованияВидимость(): Булево
    пер ТребуетСогласованияВидимость: Булево
    если ДанныеДокумента != Неопределено
        ТребуетСогласованияВидимость = ДанныеДокумента.ВидОтсутствияТребуетСогласования и ДанныеДокумента.ЕстьСогласующие и не ТолькоЧтение
    ;
    возврат ТребуетСогласованияВидимость
;

метод ПериодОтсутствияВидимость(): Булево
    возврат ЦелодневноеОтсутствие()
;

метод ЗаместителиТолькоЧтение(): Булево
    возврат РежимСогласования или РедактированиеЗапрещено или РежимПросмотра
;

метод УведомляемыеТолькоЧтение(): Булево
    возврат РежимСогласования или РедактированиеЗапрещено или РежимПросмотра
;

метод ПрисоединенныеФайлыДобавлятьФайлы(): Булево
    возврат не (РедактированиеЗапрещено или РежимСогласования) и не РежимПросмотра
;

метод ПрисоединенныеФайлыВидимость(): Булево
    пер ПрисоединенныеФайлыВидимость: Булево
    если ДанныеДокумента != Неопределено
        ПрисоединенныеФайлыВидимость = РежимПросмотра и ДанныеДокумента.ТабличныеЧасти.ТаблицаФайлы.Файлы.Размер() > 0 или не РежимПросмотра  
    ;
    возврат ПрисоединенныеФайлыВидимость
;

метод СогласованиеДокументаВидимость(): Булево
    возврат ДанныеДокумента != Неопределено и ДанныеДокумента.Состояние != Неопределено
;

метод ОсновноеСодержаниеФормыТолькоЧтение(): Булево
    возврат РежимСогласования или РедактированиеЗапрещено 
;

метод СогласующиеСостояние(): СостоянияДокумента
    возврат СостояниеДокумента()
;

метод СогласующиеДатаСостояния(): Момент?
    пер ДатаСостояния: Момент?
    если ДанныеДокумента != Неопределено
        ДатаСостояния = ДанныеДокумента.ДатаСостояния
    ;
    возврат ДатаСостояния
;

метод УведомляемыеСостояние(): СостоянияДокумента
    возврат СостояниеДокумента()
;

метод СостояниеДокумента(): СостоянияДокумента
    пер Состояние: СостоянияДокумента
    если ДанныеДокумента != Неопределено
        Состояние = ДанныеДокумента.Состояние
    ;
    возврат Состояние
;

@ВПодсистеме
метод ПроверитьЗаполнение(): Булево
    пер РезультатПроверки = Истина
    
    знч Проверки = [
        &ПроверитьЗаполнениеПериода(),
        &ПроверитьЗаполнениеДатыОтсутствия(),
        &ПроверитьЗаполнениеВремениОтсутствия(),
        &ПроверитьВремяОпоздания()
    ]
    
    для Проверка из Проверки
        РезультатПроверки = Проверка() и РезультатПроверки    
    ;
    
    возврат РезультатПроверки
    
;

метод ПериодОтсутствияРезультатПроверкиДанных(): РезультатПроверкиДанных
    если не РезультатПроверкиЗаполненияПериода.Пусто()
        возврат РезультатПроверкиДанных.Ошибка
    иначе если не РезультатПредупрежденияЗаполненияПериода.Пусто()
        возврат РезультатПроверкиДанных.Предупреждение
    иначе
        возврат РезультатПроверкиДанных.Отсутствует
    ;
;

метод ПериодОтсутствияСообщениеОбОшибкеВвода(): Строка
    возврат РезультатПроверкиЗаполненияПериода
;

метод ДатаОтсутствияСообщениеОбОшибкеВвода(): Строка
    возврат РезультатПроверкиЗаполненияДатыОтсутствия
;

метод ВремяОтсутствияСообщениеОбОшибкеВвода(): Строка
    возврат РезультатПроверкиЗаполненияВремениОтсутствия
;

метод ВремяОпозданияСообщениеОбОшибкеВвода(): Строка
    возврат РезультатПроверкиЗаполненияВремениОпоздания
;

метод ПроверитьЗаполнениеПериода(): Булево
    если не (Объект.ПолныйДень)
        // Дату проверяем отдельным обработчиком
        возврат Истина
    ;
    
    попытка

        если не ПериодЗаполнен()
            выбросить новый ИсключениеВалидации("Не заполнен период")
        ;

        если ПрошедшийПериод(ПериодОтсутствия.От) 
            выбросить новый ИсключениеВалидации("Дата начала меньше текущей даты")
        ;
        
        МенеджерДат.ДатаМожетБытьПереданаВV8(ПериодОтсутствия?.До)

        знч ПересекающиесяПериоды = Отсутствия.ПересекающиесяПериоды(
            Организации = Объект.ИдентификаторыЭлектронныхДокументов, 
            ДатаНачала = ПериодОтсутствия.От.НачалоДня(), 
            ДатаОкончания = ПериодОтсутствия.До.КонецДня(),
            Причина = Объект.Причина, 
            ФизическоеЛицо = Объект.ФизическоеЛицо, 
            ИсключаемыеСсылки = Объект.Ссылка)
    
        если не ПересекающиесяПериоды.Предупреждения.Пусто()
            РезультатПредупрежденияЗаполненияПериода = ПересекающиесяПериоды.Предупреждения
        ;
        
        если не ПересекающиесяПериоды.Ошибки.Пусто()
            выбросить новый ИсключениеВалидации(ПересекающиесяПериоды.Ошибки)
        ;
            
    поймать Ошибка: Исключение
        РезультатПроверкиЗаполненияПериода = Ошибка.Описание
        Компоненты.ПериодОтсутствия.Активировать()
        возврат Ложь
    ;
    
    возврат Истина

;

метод ПроверитьЗаполнениеДатыОтсутствия(): Булево
    если Объект.ПолныйДень
        // Период проверяем отдельным обработчиком
        возврат Истина
    ;
    
    попытка    
        если не ДатаОтсутствияЗаполнена()
            выбросить новый ИсключениеВалидации("Не указана дата")
        ;
        
        если ПрошедшийПериод(Объект.ДатаОтсутствия)
            выбросить новый ИсключениеВалидации("Дата отсутствия меньше текущей даты")
        ;
        
        МенеджерДат.ДатаМожетБытьПереданаВV8(Объект.ДатаОтсутствия)
        
    поймать Ошибка: ИсключениеВалидации
        РезультатПроверкиЗаполненияДатыОтсутствия = Ошибка.Описание
        Компоненты.ДатаОтсутствия.Активировать()
        возврат Ложь
    ;
    
    возврат Истина
;

метод ПроверитьЗаполнениеВремениОтсутствия(): Булево
    пер РезультатПроверки = Истина
    если (Объект.ПолныйДень) или (Объект.Причина == ВидыОтсутствий.Опоздание)
        возврат РезультатПроверки
    ;
    
    пер ПересекающиесяПериоды: Отсутствия.ПересечениеПериодов = Отсутствия.ПересекающиесяПериоды(
            Организации = Объект.ИдентификаторыЭлектронныхДокументов, 
            ДатаНачала = (новый ДатаВремя(Объект.ДатаОтсутствия, ВремяОтсутствия.От)), 
            ДатаОкончания = (новый ДатаВремя(Объект.ДатаОтсутствия, ВремяОтсутствия.До)) ,
            Причина = Объект.Причина, 
            ФизическоеЛицо = Объект.ФизическоеЛицо, 
            ИсключаемыеСсылки = Объект.Ссылка)
    РезультатПредупрежденияЗаполненияПериода = ПересекающиесяПериоды.Предупреждения
    
    если не ВремяЗаполнено()
        РезультатПроверки = Ложь
        РезультатПроверкиЗаполненияВремениОтсутствия = "Не указано время отсутствия"
    иначе
        пер КвантВремени: Длительность = ВладельцыКабинетов.ПараметрыСеанса().КвантВремени
        если (ВремяОтсутствия.До - ВремяОтсутствия.От) < КвантВремени 
            РезультатПроверки = Ложь
            РезультатПроверкиЗаполненияВремениОтсутствия = "Минимальное время отсутствия - %{КвантВремени.Минуты} минут"
        иначе 
            если не ПересекающиесяПериоды.Ошибки.Пусто()
                РезультатПроверки = Ложь
                РезультатПроверкиЗаполненияВремениОтсутствия = ПересекающиесяПериоды.Ошибки
            ;
        ;
         
    ;
    если не РезультатПроверки
        Компоненты.ВремяОтсутствия.Активировать()
    ;
    возврат РезультатПроверки
;

метод ПроверитьВремяОпоздания(): Булево
    пер РезультатПроверки = Истина
    если Объект.Причина == ВидыОтсутствий.Опоздание 
        если ВремяОпоздания == Неопределено
            РезультатПроверки = Ложь
            РезультатПроверкиЗаполненияВремениОпоздания = "Время опоздания не указано"
        ;
    ;
    если не РезультатПроверки
        Компоненты.ВремяОпоздания.Активировать()
    ;
    возврат РезультатПроверки
;

метод ДатаОтсутствияЗаполнена(): Булево
    возврат Объект.ДатаОтсутствия != Неопределено
;

метод ПериодЗаполнен(): Булево
    возврат ПериодОтсутствия != Неопределено
;

метод ВремяЗаполнено(): Булево
    пер Результат: Булево
    если Объект.Причина == ВидыОтсутствий.Опоздание
        Результат = ВремяОпоздания != Неопределено
    иначе
        Результат = ВремяОтсутствия != Неопределено
    ;
    возврат Результат
;

метод ПрошедшийПериод(ДатаПроверки: Дата): Булево
    если ОформлятьЗаднимЧислом(Объект.Причина)
        возврат Ложь
    ;
    если не ДанныеДокумента.ВидОтсутствияТребуетСогласования
        возврат Ложь
    ;
    возврат (ДатаПроверки) < Дата.Сейчас()
;

@НаСервере @ДоступноСКлиента
статический метод ОформлятьЗаднимЧислом(ВидОтсутствия: ВидыОтсутствий): Булево
    возврат НастройкиОтсутствий.НастройкиПоВидуОтсутствия(ВидОтсутствия).ОформлятьЗаднимЧислом    
;

@ВПодсистеме
метод МодифицированныеТабличныеЧасти(): Отсутствия.ТабличныеЧасти
    пер ТабличныеЧасти: Отсутствия.ТабличныеЧасти
    если Компоненты.ПрисоединенныеФайлы.СобственнаяМодифицированность
        ОбщегоНазначения.ОчиститьКлиентскиеДанные(ДанныеДокумента.ТабличныеЧасти.ТаблицаФайлы)    
        ТабличныеЧасти.ТаблицаФайлы = ДанныеДокумента.ТабличныеЧасти.ТаблицаФайлы
    ;
    если Компоненты.Заместители.СобственнаяМодифицированность
        ТабличныеЧасти.ТаблицаЗаместители = ДанныеДокумента.ТабличныеЧасти.ТаблицаЗаместители
    ;
    если Компоненты.Уведомляемые.СобственнаяМодифицированность
        ТабличныеЧасти.ТаблицаУведомляемые = ДанныеДокумента.ТабличныеЧасти.ТаблицаУведомляемые
    ;
    если Компоненты.ДополнительныеРеквизиты.СобственнаяМодифицированность
        ТабличныеЧасти.ДополнительныеРеквизиты = ДанныеДокумента.ТабличныеЧасти.ДополнительныеРеквизиты
    ;
    возврат ТабличныеЧасти
;

@ВПодсистеме 
метод СброситьМодифицированностьТабличныхЧастей()
    Компоненты.ПрисоединенныеФайлы.СобственнаяМодифицированность = Ложь
    Компоненты.Заместители.СобственнаяМодифицированность = Ложь
    Компоненты.Уведомляемые.СобственнаяМодифицированность = Ложь
    Компоненты.ДополнительныеРеквизиты.СобственнаяМодифицированность = Ложь
;

// Контракт ВладелецПрисоединенныеФайлыКомпонент

@ВПроекте
@Реализация
метод ПрисоединенныеФайлыНачатаЗагрузкаФайлов(Источник: ПрисоединенныеФайлыКомпонент, Событие: неизвестно, ИдКомпонента: Строка = "")
    ИзменениеСостоянияЗагрузкиФайлов(новый СобытиеСДанными(Истина))
;

@ВПроекте
@Реализация
метод ПрисоединенныеФайлыЗавершенаЗагрузкаФайлов(Источник: ПрисоединенныеФайлыКомпонент, Событие: неизвестно, ИдКомпонента: Строка = "")
    ИзменениеСостоянияЗагрузкиФайлов(новый СобытиеСДанными(Ложь))
;
// Конец ВладелецПрисоединенныеФайлыКомпонент

метод ОрганизацияВидимость(): Булево
    возврат Отсутствия.ПараметрыСеанса().ФункциональныеОпции.ЗапросМестаРаботыВЗаявлениях
        и (Объект.Причина == ВидыОтсутствий.Командировка
            или Объект.Причина == ВидыОтсутствий.УчебныйОтпуск
            или Объект.Причина == ВидыОтсутствий.Отгул)
;

метод ОрганизацияПриИзмененииЗначения(Источник: ВыборОрганизацииФизическогоЛица, Событие: СобытиеПриИзменении<Организации.Ссылка?>)
    пер НоваяОрганизация = Событие.НовоеЗначение
    (Объект.ИдентификаторыЭлектронныхДокументов).Очистить()
    если НоваяОрганизация != Неопределено
        (Объект.ИдентификаторыЭлектронныхДокументов).Добавить(НоваяОрганизация)
    ;
    СброситьПредупрежденияПериода()
;

@НаСервере @НаКлиенте
@ВПодсистеме
структура ДополнительныеДанныеДокумента
    пер Состояние: СостоянияДокумента?
    пер Отправлен: Булево
    пер ФизическоеЛицоЗаголовок: Строка
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка?
    пер ВидОтсутствияТребуетСогласования: Булево
    пер ЕстьСогласующие: Булево
    пер ДатаСостояния: Момент?
    пер ДанныеСогласующего: Согласования.ДанныеСогласующего?
    пер ТабличныеЧасти: Отсутствия.ТабличныеЧасти
    пер ПредставлениеРабочегоМеста: Строка
;

@НаСервере @ДоступноСКлиента
статический метод ДополнительныеДанныеДокумента(ЭтоНовый: Булево, СсылкаНаДокумент: Отсутствие.Ссылка?, ФизическоеЛицо: ФизическиеЛица.Ссылка?, 
        ТекущееФизическоеЛицо: ФизическиеЛица.Ссылка?, НепосредственныйРуководитель: ФизическиеЛица.Ссылка?,
        ПричинаОтсутствия: ВидыОтсутствий, Организация: Организации.Ссылка?): ДополнительныеДанныеДокумента
    
    пер ДополнительныеДанныеДокумента: ДополнительныеДанныеДокумента
    ДополнительныеДанныеДокумента.ФизическоеЛицо = ТекущееФизическоеЛицо
    если ТекущееФизическоеЛицо == Неопределено
        ДополнительныеДанныеДокумента.ФизическоеЛицо =
            ПользователиСистемы.ТекущееФизическоеЛицо()
    ;
    если не ЭтоНовый 
        ДополнительныеДанныеДокумента.Отправлен = ЭтоОтправляемыйДокумент(СсылкаНаДокумент)
        ДополнительныеДанныеДокумента.ФизическоеЛицоЗаголовок = МенеджерСущности.ПредставлениеСсылки(ФизическоеЛицо)
        ДополнительныеДанныеДокумента.ТабличныеЧасти = ДанныеТабличныхЧастей(СсылкаНаДокумент, ФизическоеЛицо)
        знч Согласовавшие: Массив<ФизическиеЛица.Ссылка>
        пер НомерШагаСогласования = 1
        для Согласующий из ДополнительныеДанныеДокумента.ТабличныеЧасти.ТаблицаСогласующие.Согласующие
            если Согласующий.УчастникСогласования != Неопределено
                и Согласующий.Результат != РезультатыСогласования.НаСогласовании
                
                Согласовавшие.Добавить(Согласующий.УчастникСогласования)
            ;
            НомерШагаСогласования = Макс(НомерШагаСогласования, Согласующий.НомерШагаСогласования)
        ;
        ДополнительныеДанныеДокумента.ДанныеСогласующего = Согласования.ДанныеСогласующего(
            ТекущееФизическоеЛицо,
            Отсутствия.ВидСогласуемогоЗаявленияОтсутствие(),
            ФизическоеЛицо,
            НомерШагаСогласования,
            Согласовавшие
        )
    иначе
        ДополнительныеДанныеДокумента.ТабличныеЧасти = ДанныеТабличныхЧастейПоУмолчанию(СсылкаНаДокумент,
            ДополнительныеДанныеДокумента.ФизическоеЛицо)
    ;
    ЗаполнитьДанныеСостояния(СсылкаНаДокумент, ДополнительныеДанныеДокумента)
    ДополнительныеДанныеДокумента.ВидОтсутствияТребуетСогласования = Отсутствия.ВидОтсутствияТребуетСогласования(ПричинаОтсутствия)
    ДополнительныеДанныеДокумента.ЕстьСогласующие = не Согласования.ТекущиеСогласующие(СсылкаНаДокумент, Отсутствия.ВидСогласуемогоЗаявленияОтсутствие(), ФизическоеЛицо).Пусто()
    
    знч ОрганизацияЗадана = Организация != Неопределено
    знч ВключаяУволенных = ФизЛица.СотрудникиФизическогоЛицаУволены(ФизическоеЛицо)
    если не ОрганизацияЗадана
        Организация = Сотрудники.ОрганизацияФизическогоЛицаПоОсновномуМестуРаботы(
            ФизическоеЛицо = ФизическоеЛицо,
            ВключаяУволенных = ВключаяУволенных)
    ;
    знч Сотрудник = Сотрудники.ОсновнойСотрудникФизическогоЛицаОрганизации(
        ФизическоеЛицо = ФизическоеЛицо,
        Организация = Организация,
        ВключаяУволенных = ВключаяУволенных)
    ДополнительныеДанныеДокумента.ПредставлениеРабочегоМеста = Сотрудники.ПредставлениеРабочегоМеста(Сотрудник, не ОрганизацияЗадана)
    
    возврат ДополнительныеДанныеДокумента
;


@НаСервере
статический метод ЭтоОтправляемыйДокумент(Ссылка: Отсутствие.Ссылка): Булево
    возврат ОбменДанными.ЭтоОтправляемыйДокумент(Ссылка)
;

@НаСервере
статический метод ЗаполнитьДанныеСостояния(Ссылка: Отсутствие.Ссылка, ДополнительныеДанныеДокумента: ДополнительныеДанныеДокумента)
    пер ДанныеСостояния = СостДокументов.ДанныеСостоянияДокумента(Ссылка)
    ДополнительныеДанныеДокумента.Состояние = ДанныеСостояния.Состояние
    ДополнительныеДанныеДокумента.ДатаСостояния = ДанныеСостояния.Дата
;

 
@НаСервере
статический метод ДанныеТабличныхЧастей(Владелец: Отсутствие.Ссылка?, ФизическоеЛицо: ФизическиеЛица.Ссылка): Отсутствия.ТабличныеЧасти
    пер ДанныеТабличныхЧастей: Отсутствия.ТабличныеЧасти
    ДанныеТабличныхЧастей.ТаблицаФайлы = ПрисоединенныеФайлыМенеджер.ПрисоединенныеФайлы(Владелец)
    ДанныеТабличныхЧастей.ТаблицаЗаместители =  ЗаместителиМенеджер.Заместители(Владелец, Тип<ОтсутствиеЗаместители.Ссылка>)
    ДанныеТабличныхЧастей.ТаблицаУведомляемые = УведомляемыеМенеджер.Уведомляемые(Владелец)
    ДанныеТабличныхЧастей.ТаблицаСогласующие = Согласования.Согласующие(
        Владелец, Отсутствия.ВидСогласуемогоЗаявленияОтсутствие(), ФизическоеЛицо)
    ДанныеТабличныхЧастей.ДополнительныеРеквизиты = ШаблоныДокументовМенеджер.РеквизитыШаблона(
        Владелец, УниверсальныеМеханизмы.Ид(Отсутствия.ИД_ПОДСИСТЕМЫ, Отсутствия.ШАБЛОН_ЗАЯВЛЕНИЯ_НА_ОТСУТСТВИЕ))
    
    возврат ДанныеТабличныхЧастей
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеТабличныхЧастейПоУмолчанию(Заявление: Отсутствие.Ссылка, Владелец: ФизическиеЛица.Ссылка): Отсутствия.ТабличныеЧасти
    пер ДанныеТабличныхЧастей: Отсутствия.ТабличныеЧасти
    пер ТаблицаФайлы: ПрисоединенныеФайлы
    ТаблицаФайлы.Владелец = Заявление
    пер Заместители = ЗаместителиМенеджер.Заместители(Владелец, Тип<ЗаместителиНаВремяОтсутствия.Ссылка>)
    Заместители.Владелец = Заявление
    для ДанныеЗаместителя из Заместители.Заместители
        ДанныеЗаместителя.Ссылка = Неопределено
    ;
    знч Уведомляемые = УведомляемыеМенеджер.УведомляемыеПоУмолчанию(Заявление, Владелец)
    пер Согласующие: Согласующие
    Согласующие.Владелец = Заявление
    
    ДанныеТабличныхЧастей.ТаблицаФайлы = ТаблицаФайлы
    ДанныеТабличныхЧастей.ТаблицаЗаместители = Заместители
    ДанныеТабличныхЧастей.ТаблицаУведомляемые = Уведомляемые
    ДанныеТабличныхЧастей.ТаблицаСогласующие = Согласующие
    ДанныеТабличныхЧастей.ДополнительныеРеквизиты = ШаблоныДокументовМенеджер.РеквизитыШаблона(
            Неопределено, УниверсальныеМеханизмы.Ид(Отсутствия.ИД_ПОДСИСТЕМЫ, Отсутствия.ШАБЛОН_ЗАЯВЛЕНИЯ_НА_ОТСУТСТВИЕ))
    ДанныеТабличныхЧастей.ДополнительныеРеквизиты.Владелец = Заявление
        
    возврат ДанныеТабличныхЧастей
;

@НаКлиенте
метод СброситьПредупрежденияПериода()
    РезультатПроверкиЗаполненияПериода = ""
    РезультатПроверкиЗаполненияДатыОтсутствия = ""
    РезультатПроверкиЗаполненияВремениОтсутствия = ""
    РезультатПроверкиЗаполненияВремениОпоздания = ""
    РезультатПредупрежденияЗаполненияПериода = ""
    ОзнакомленСПредупреждениями = Ложь
;

@НаСервере @ДоступноСКлиента
статический метод ОтсутствиеОбъект(Заявление: Отсутствие.Ссылка): Отсутствие.Объект?
    ПредставленияДокументов.СформироватьПредставленияДокумента(Заявление, Ложь)

    возврат Заявление.ЗагрузитьОбъект()    
;