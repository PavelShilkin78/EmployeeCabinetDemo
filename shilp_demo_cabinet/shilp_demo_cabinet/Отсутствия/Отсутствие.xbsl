импорт ВебApi
импорт УниверсальныеМеханизмы
импорт Компания::Согласования
импорт Компания
импорт КонтрольДоступа
импорт ОбменДанными
импорт ОбщегоНазначения
импорт ОбщиеСтандартные
импорт УниверсальныеМеханизмы::ШаблоныДокументов
импорт ФизическиеЛица
импорт ВладельцыКабинетов
импорт Уведомления

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ПолныйДоступАутентифицированным(этот)]
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<Отсутствие.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<Отсутствие.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<Отсутствие.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ЧтениеИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПоПолномочиям(
            [Отсутствия.ПолномочиеПросмотрОтсутствий()],
            Элемент.ФизическоеЛицо
        ))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеРедактированиеУдалениеДанныхСправочниковПерсонально([Элемент.ФизическоеЛицо]))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

//КонецОбласти

// Контракт СостояниеДокументовПоставщик

@ВПроекте
@Реализация
метод ПослеЗаписиСостоянияДокумента(ТекущееЗначение: СостояниеДокументов.Объект, ПредыдущееЗначение: СостояниеДокументов.Данные, ПараметрыЗаписи: СостояниеДокументов.ПараметрыЗаписи)
    если ТекущееЗначение.Документ это Отсутствие.Ссылка
        если ТекущееЗначение.Состояние == СостоянияДокумента.Черновик и ПредыдущееЗначение.Состояние == СостоянияДокумента.Подготовлен
            если ОбменДанными.ЭтоОтправляемыйДокумент(ТекущееЗначение.Документ как ИсходящиеДанные.Ссылка)
                выбросить новый ОбменДанными.ИсключениеДокументУжеОтправлен("Документ уже отправлен", ТекущееЗначение.Документ)
            ;
            пер СписокПодписавших = СогласованияДокументов.СписокПодписавших(ТекущееЗначение.Документ)
            если не СписокПодписавших.Пусто()
                выбросить новый Согласования.ИсключениеДокументУжеПодписан("Документ уже подписан", ТекущееЗначение.Документ)
            ;
        ;
        
        ЗапланированныеОтсутствия.ПриИзмененииСогласования(ТекущееЗначение.Документ как Отсутствие.Ссылка, ТекущееЗначение.Состояние)
        
        пер НастройкиОтложеннойОтправки = ОбщегоНазначения.НастройкиОтложеннойОтправкиУведомлений()
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        ЗапланированныеЗадания.Создать(&ПослеИзмененияСостоянияДополнение, ТекущееЗначение.Документ как Отсутствие.Ссылка)
            .Настроить(Ключ = МенеджерЗаданий.КлючЗаданияПоСсылке(ТекущееЗначение.Документ, "ИСД"))
            .ЗапланироватьВТранзакции()

        ЗапланированныеЗадания.Создать(&ПослеИзмененияСостоянияДополнениеСПаузой, ТекущееЗначение.Документ как Отсутствие.Ссылка, ТекущееЗначение.Состояние)
            .Настроить(
                Ключ = (новый Ууид().ВСтроку()) + "ИСДП",
                Задержка = Длительность.ИзСекунд(НастройкиОтложеннойОтправки.Задержка))
            .Запланировать()
    ;
;

@ВПроекте
@Реализация
метод ЗаполнитьКартинкиДокументов(ДанныеЗапросов: ЧитаемыйМассив<СостояниеДокументаКомпонентДанных>)
    пер Документы: Массив<Отсутствие.Ссылка>
    для Элемент из ДанныеЗапросов
        пер Компонент: СостояниеДокументаКомпонентДанных = Элемент
        если Компонент.Документ это Отсутствие.Ссылка
            Документы.Добавить(Компонент.Документ как Отсутствие.Ссылка)
        ; 
    ;
    если не Документы.Пусто()
        пер ВидыОтсутствий: Соответствие<Отсутствие.Ссылка, ВидыОтсутствий>
        знч Запрос = Запрос{
            Выбрать 
                Ссылка Как Документ, 
                Причина Как Причина
            Из Отсутствие Как Отсутствие
            Где Ссылка В (%Документы)}
        исп Результат = Запрос.Выполнить()
        для РезультатСтрока из Результат
            ВидыОтсутствий.Вставить(РезультатСтрока.Документ, РезультатСтрока.Причина)
        ;
        пер КартинкиВидовОтсутствий: ЧитаемоеСоответствие<ВидыОтсутствий, ДвоичныйОбъект.Ссылка> = Отсутствия.КартинкиВидовОтсутствий()
        пер ЦветаВидовОтсутствий: ЧитаемоеСоответствие<ВидыОтсутствий, Цвет> = Отсутствия.ЦветаВидовОтсутствий()
        для Компонент из ДанныеЗапросов
            если Компонент.Документ это Отсутствие.Ссылка
                пер Документ: Отсутствие.Ссылка = Компонент.Документ как Отсутствие.Ссылка
                Компонент.Картинка = КартинкиВидовОтсутствий[ВидыОтсутствий[Документ]]
                Компонент.ЦветКартинки = ЦветаВидовОтсутствий[ВидыОтсутствий[Документ]]
            ;
        ;
    ;
;

// Конец СостояниеДокументовПоставщик

//Область СлужебныйПрограммныйИнтерфейс

/**
Описание: Получает данные документа Отсутствие. 
Параметры:
 ОтсутствиеСсылка - ссылка на документ, данные которого нужно получить.
Возвращает: Данные документа в виде соответствия.
*/

метод ДанныеОтсутствия(ОтсутствиеСсылка: Отсутствие.Ссылка, ИдентификаторыДокумента: Массив<Организации.Ссылка>? = Неопределено):
    ЧитаемоеСоответствие<Строка, Объект?>?
    
    пер ИдентификаторыДокументов: Соответствие<Отсутствие.Ссылка, Массив<Организации.Ссылка>>?
    если ИдентификаторыДокумента != Неопределено
        ИдентификаторыДокументов = новый Соответствие<Отсутствие.Ссылка, Массив<Организации.Ссылка>>()
        ИдентификаторыДокументов.Вставить(ОтсутствиеСсылка, ИдентификаторыДокумента)
    ;
    
    возврат ДанныеОтсутствий([ОтсутствиеСсылка], ИдентификаторыДокументов)[0]
;

метод ПослеИзмененияСостоянияДополнение(Документ: Отсутствие.Ссылка)
    знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Документ, "ФизическоеЛицо")
    РегистрацияИзменений.ЗарегистрироватьИзменение(Документ, ФизическоеЛицо)
;

метод ПослеИзмененияСостоянияДополнениеСПаузой(Документ: Отсутствие.Ссылка, Состояние: СостоянияДокумента)
    пер ТекущееСостояние = СостДокументов.СостояниеДокумента(Документ)
    если ТекущееСостояние != Состояние
        возврат
    ;
    знч РеквизитыСсылки = МенеджерСущности.ЗначенияРеквизитовОбъекта(Документ, ["Ссылка", "ФизическоеЛицо","ТребуетСогласования","ПолныйДень","Причина", "ДатаНачала", 
            "ДатаОкончания", "ДатаОтсутствия", "ПредставлениеДокумента"])
    если РеквизитыСсылки == Неопределено
        возврат
    ;
    пер РеквизитыОтсутствия = новый Соответствие<Строка, Объект?>(РеквизитыСсылки)
    РеквизитыОтсутствия.Вставить("УведомитьРуководителя", Истина)
    СформироватьДвижения(Документ, Состояние, РеквизитыОтсутствия["ФизическоеЛицо"] как ФизическиеЛица.Ссылка?, РеквизитыОтсутствия["Причина"] как ВидыОтсутствий)

    ОбщегоНазначения.ПослеИзмененияСотоянияЗаявки(Документ, Состояние, РеквизитыСсылки["ФизическоеЛицо"])
    
    ОтправитьИнформационныеУведомленияСотрудникам(РеквизитыОтсутствия, Состояние)
;

@ВПроекте
метод ПослеПодписания(Документ: Отсутствие.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего)
    
    знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Документ, "ФизическоеЛицо")
    пер СостояниеЗапроса: СостоянияДокумента = СостДокументов.СостояниеДокумента(Документ)
    пер РолиПодписантовESS = Согласования.РолиПодписантовПриложения()      
    // Состояние запроса сотрудника уже изменилось (запрос отозван или, напротив, уже обработан) 
    если ФизическоеЛицо != ДанныеСогласующего.Согласующий
        и РолиПодписантовESS.Содержит(ДанныеСогласующего.Роль) и СостояниеЗапроса != СостоянияДокумента.Подготовлен
        
        выбросить новый ОбщегоНазначения.ИсключениеНедопустимоеСостояниеЗапроса("Недопустимое состояние документа при подписании", СостояниеЗапроса)
    ;
    
    // Документ уже отправлен донор-приложению 
    если РолиПодписантовESS.Содержит(ДанныеСогласующего.Роль) и ОбменДанными.ЭтоОтправляемыйДокумент(Документ)            
        выбросить новый ОбменДанными.ИсключениеДокументУжеОтправлен("Документ уже отправлен", Документ)
    ;
    
    пер НастройкиОтложеннойОтправки = ОбщегоНазначения.НастройкиОтложеннойОтправкиУведомлений()
    
    МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
    ЗапланированныеЗадания.Создать(&Отсутствие.ПослеПодписанияДополнениеСПаузой, Документ,
        ДанныеСогласующего.Роль, ДанныеСогласующего.НомерШага, ФизическоеЛицо)
        .Настроить(
            Ключ = (новый Ууид().ВСтроку()) + "ОП",
            Задержка = Длительность.ИзСекунд(НастройкиОтложеннойОтправки.Задержка))
        .Запланировать()
;

@ВПроекте
метод ПослеПодписанияДополнениеСПаузой(Документ: Отсутствие.Ссылка, РольСогласующего: РолиПодписантов.Ссылка,
    НомерШагаСогласования: Число, ФизическоеЛицо: ФизическиеЛица.Ссылка)
    
    знч ТекущиеСогласующие = Согласования.ТекущиеСогласующие(Документ, Отсутствия.ВидСогласуемогоЗаявленияОтсутствие(),
        ФизическоеЛицо)
    знч РеквизитыОтсутствия = МенеджерСущности.ЗначенияРеквизитовОбъекта(Документ, 
            ["Ссылка", "ФизическоеЛицо","Причина", "ДатаНачала", "ДатаОкончания", "ДатаОтсутствия", "ТребуетСогласования", "ПредставлениеДокумента", "ПолныйДень"])
                
    если РольСогласующего == Согласования.РольПодписантаИсполнитель()
        СостДокументов.УстановитьСостояниеДокумента(Документ, СостоянияДокумента.Выполнен)
    иначе если ОтправлятьДокумент(РеквизитыОтсутствия, ТекущиеСогласующие)
        РегистрацияИзменений.ЗарегистрироватьИзменение(Документ, ФизическоеЛицо)
        СогласованияДокументов.ПослеПолногоСогласования(Документ)
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Документ, Истина)
        СогласованияДокументов.ЗарегистрироватьПодписиОтправляемогоДокумента(Документ, Истина)
        ОтправитьУведомлениеОПодписании(Документ)
    иначе если ТекущиеСогласующие.Первый().НомерШага > НомерШагаСогласования
        ОтправитьУведомленияСогласующим(РеквизитыОтсутствия, ТекущиеСогласующие)
    ;
;

метод ОтправлятьДокумент(ЗначенияРеквизитов: ЧитаемоеСоответствие<Строка, Объект?>, ТекущиеСогласующие: ЧитаемыйМассив<Согласования.ДанныеСогласующего>): Булево
    пер ТребуетСогласования = ЗначенияРеквизитов["ТребуетСогласования"] как Булево
    пер Причина = ЗначенияРеквизитов["Причина"] как ВидыОтсутствий
    если ТребуетСогласования и Отсутствия.ВидОтсутствияТребуетСогласования(Причина)
        возврат ТекущиеСогласующие.Пусто()
    ;
    
    возврат Истина
;

//КонецОбласти

// Область ВыполнитьДействие

// КонецОбласти ВыполнитьДействие


//Область СлужебныеПроцедурыИФункции

@ВПодсистеме
метод ФизическиеЛицаДокументов(Документы: ЧитаемыйМассив<Отсутствие.Ссылка>): ЧитаемоеСоответствие<Отсутствие.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч ФизическиеЛицаДокументов: Соответствие<Отсутствие.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ФизическоеЛицо
        ИЗ
            Отсутствие
        ГДЕ
            Ссылка в (%Документы)   
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ФизическиеЛицаДокументов.Вставить(СтрокаРезультата.Ссылка, [СтрокаРезультата.ФизическоеЛицо])    
    ;
    возврат ФизическиеЛицаДокументов
;

метод СформироватьДвижения(Документ: Отсутствие.Ссылка, Состояние: СостоянияДокумента, ФизическоеЛицо: ФизическиеЛица.Ссылка?, Причина: ВидыОтсутствий)
    пер ЗаписиОтсутствия: Массив<ЗаписиОтсутствий.ЗаписьОтсутствия>
    пер ЭтоБольничный: Булево = Состояние == СостоянияДокумента.Подготовлен и Причина == ВидыОтсутствий.Болезнь
    если Состояние == СостоянияДокумента.Выполнен или ЭтоБольничный
        ЗаполнитьЗаписиОтсутствия(ЗаписиОтсутствия, Документ)
    ;
    ЗаписиОтсутствий.ОбновитьЗаписиОтсутствияДокумента(ЗаписиОтсутствия, Документ)
    // Обновление измененных данных.
    если Состояние == СостоянияДокумента.Выполнен или Состояние == СостоянияДокумента.ПолученОтказ или ЭтоБольничный
        ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(ФизическоеЛицо, Истина)
    ;
    если Состояние == СостоянияДокумента.Подготовлен
        пер Руководитель = ОрганизационнаяСтруктура.НепосредственныйРуководительФизическогоЛица(ФизическоеЛицо)
        ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(Руководитель, Истина)
    ;
;

метод ЗаполнитьЗаписиОтсутствия(ЗаписиОтсутствия: Массив<ЗаписиОтсутствий.ЗаписьОтсутствия>, ОтсутствиеСсылка: Отсутствие.Ссылка)
    пер ДанныеОтсутствия = Отсутствие.ДанныеОтсутствия(ОтсутствиеСсылка)
    пер Отсутствие: ЗаписиОтсутствий.ЗаписьОтсутствия = новый ЗаписиОтсутствий.ЗаписьОтсутствия()
    Отсутствие.ФизическоеЛицо = ДанныеОтсутствия["ФизическоеЛицо"] как ФизическиеЛица.Ссылка
    Отсутствие.Причина = ДанныеОтсутствия["Причина"] как ВидыОтсутствий
    
    пер ЧасовойПояс: ЧасовойПояс = ВладельцыКабинетов.ЧасовойПоясФизическогоЛица(Отсутствие.ФизическоеЛицо)
        
    Отсутствие.Внутрисменное = не (ДанныеОтсутствия["ПолныйДень"] как Булево)

    если Отсутствие.Внутрисменное
        если Отсутствие.Причина != ВидыОтсутствий.Опоздание
            Отсутствие.Начало =
                новый Момент(ДанныеОтсутствия["ДатаОтсутствия"] как Дата, ДанныеОтсутствия["ВремяНачала"] как Время, ЧасовойПояс)
        ;
                 
        Отсутствие.Окончание = 
            новый Момент(ДанныеОтсутствия["ДатаОтсутствия"] как Дата, ДанныеОтсутствия["ВремяОкончания"] как Время, ЧасовойПояс)
    иначе
        Отсутствие.Начало = новый Момент(ДанныеОтсутствия["ДатаНачала"] как Дата, Время{0:0:0}, ЧасовойПояс)
        Отсутствие.Окончание = новый Момент(ДанныеОтсутствия["ДатаОкончания"] как Дата, Время{23:59:59}, ЧасовойПояс)
    ;
            
    Отсутствие.ДатаНачала = ДанныеОтсутствия["ДатаНачала"] как Дата?
    Отсутствие.ДатаОкончания = ДанныеОтсутствия["ДатаОкончания"] как Дата?
    
    Отсутствие.СпособСвязи = ДанныеОтсутствия["СпособСвязи"] как СпособыСвязи?
    Отсутствие.Документ = ДанныеОтсутствия["Ссылка"] как Отсутствие.Ссылка
    Отсутствие.Комментарий = ДанныеОтсутствия["Комментарий"] как Строка
    
    ЗаписиОтсутствия.Добавить(Отсутствие)
;

метод ОтправитьИнформационныеУведомленияСотрудникам(РеквизитыОтсутствия: Соответствие<Строка, Объект?>, Состояние: СостоянияДокумента)
    знч Документ = РеквизитыОтсутствия["Ссылка"] как Отсутствие.Ссылка
    знч Причина = РеквизитыОтсутствия["Причина"] как ВидыОтсутствий
    знч ТребуетСогласования = РеквизитыОтсутствия["ТребуетСогласования"] как Булево
    знч ФизическоеЛицо = РеквизитыОтсутствия["ФизическоеЛицо"] как ФизическиеЛица.Ссылка
    знч ПолныйДень = РеквизитыОтсутствия["ПолныйДень"] как Булево

    пер УведомляемыеРуководители = ОрганизационнаяСтруктура.УведомляемыеРуководители(ФизическоеЛицо)
    пер СписокУведомляемых = новый Соответствие<Отсутствия.ШаблонСообщения, Множество<ФизическиеЛица.Ссылка>>()
    пер УведомляемыеСотрудники = новый Множество<ФизическиеЛица.Ссылка>()
    
    если Состояние == СостоянияДокумента.Выполнен и Отсутствия.ВидОтсутствияТребуетСогласования(Причина)
        или Состояние == СостоянияДокумента.Подготовлен и не Отсутствия.ВидОтсутствияТребуетСогласования(Причина)
        
        знч Уведомляемые = УведомляемыеМенеджер.Уведомляемые(РеквизитыОтсутствия["Ссылка"] как Отсутствие.Ссылка?)
        для ДанныеУведомляемого из Уведомляемые.Уведомляемые
            УведомляемыеСотрудники.Добавить(ДанныеУведомляемого.Уведомляемый!)
        ;
        пер Заместители = ЗаместителиМенеджер.Заместители(РеквизитыОтсутствия["Ссылка"] как Отсутствие.Ссылка?, Тип<ОтсутствиеЗаместители.Ссылка>)
        для ДанныеЗаместителя из Заместители.Заместители
            если не УведомляемыеСотрудники.Содержит(ДанныеЗаместителя.Заместитель)
                УведомляемыеСотрудники.Добавить(ДанныеЗаместителя.Заместитель!)
            ;
        ;
        если ПолныйДень
            пер Сотрудники = Сотрудники.СотрудникиФизическогоЛица(ФизическоеЛицо)
            если не Сотрудники.Пусто()
                пер Подразделение = МенеджерСущности.ЗначениеРеквизитаОбъекта(Сотрудники[0], "МестоВСтруктуреПредприятия")
                пер Коллеги = новый Массив<ФизическиеЛица.Ссылка>(ОрганизационнаяСтруктура.ФизическиеЛицаПодразделения(Подразделение))
                для Коллега из Коллеги
                    если Коллега != ФизическоеЛицо
                        и не УведомляемыеСотрудники.Содержит(Коллега) и не УведомляемыеРуководители.Содержит(Коллега)
                        УведомляемыеСотрудники.Добавить(Коллега)
                    ;
                ;
            ;
        ;
    ;
    выбор
    когда Состояние == СостоянияДокумента.Выполнен и ТребуетСогласования
        СписокУведомляемых.Вставить(Отсутствия.ШаблонСообщения.УведомлениеРуководителюОбОтсутствии, УведомляемыеРуководители)
        СписокУведомляемых.Вставить(Отсутствия.ШаблонСообщения.ОтсутствиеСогласовано, новый Множество([ФизическоеЛицо]))        
    когда (Состояние == СостоянияДокумента.Выполнен и Отсутствия.ВидОтсутствияТребуетСогласования(Причина)
        или Состояние == СостоянияДокумента.Подготовлен и не Отсутствия.ВидОтсутствияТребуетСогласования(Причина))
        и не ТребуетСогласования и (РеквизитыОтсутствия["УведомитьРуководителя"] как Булево)
        УведомляемыеСотрудники.ДобавитьВсе(УведомляемыеРуководители)
    когда Состояние == СостоянияДокумента.ПолученОтказ
        СписокУведомляемых.Вставить(Отсутствия.ШаблонСообщения.ОтсутствиеНеСогласовано, новый Множество([ФизическоеЛицо]))
    ;
    если не УведомляемыеСотрудники.Пусто()
        СписокУведомляемых.Вставить(Отсутствия.ШаблонСообщения.УведомлениеОбОтсутствии, УведомляемыеСотрудники)
    ;
    ОтправитьУведомления(
        Документ, 
        Уведомления.ВидыУведомлений.ПерсональнаяИнформация,
        СписокУведомляемых,
        ПараметрыУведомлений(РеквизитыОтсутствия, ФизическоеЛицо, Причина)
    )
;

метод ОтправитьУведомленияСогласующим(РеквизитыОтсутствия: ЧитаемоеСоответствие<Строка, Объект?>,
    ТекущиеСогласующие: ЧитаемыйМассив<Согласования.ДанныеСогласующего>)
    
    знч Документ = РеквизитыОтсутствия["Ссылка"] как Отсутствие.Ссылка
    знч ФизическоеЛицо = РеквизитыОтсутствия["ФизическоеЛицо"] как ФизическиеЛица.Ссылка

    для Согласующий из ТекущиеСогласующие
        ОтправитьУведомление(
            Согласующий.Согласующий, 
            Документ, 
            Уведомления.ВидыУведомлений.Согласование, 
            Отсутствия.ШаблонСообщения.СогласованиеОтсутствия,
            ПараметрыУведомлений(РеквизитыОтсутствия, ФизическоеЛицо)
        )
        ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(Согласующий.Согласующий, Истина)
    ;
;

метод ОтправитьУведомлениеОПодписании(Документ: Отсутствие.Ссылка)
    пер РеквизитыОтсутствия: ЧитаемоеСоответствие<Строка, неизвестно> = МенеджерСущности.ЗначенияРеквизитовОбъекта(Документ, ["Ссылка", "ФизическоеЛицо", "ПредставлениеДокумента"])
    пер Получатель: ФизическиеЛица.Ссылка = РеквизитыОтсутствия["ФизическоеЛицо"]
    ОтправитьУведомление(
        Получатель, 
        Документ, 
        Уведомления.ВидыУведомлений.ПерсональнаяИнформация, 
        Отсутствия.ШаблонСообщения.УведомлениеОПодписании,
        ПараметрыУведомлений(РеквизитыОтсутствия, Получатель)
    )
;

метод ОтправитьУведомления(Документ: Отсутствие.Ссылка, ВидУведомления: Уведомления.ВидыУведомлений, 
        Уведомляемые: Соответствие<Отсутствия.ШаблонСообщения, Множество<ФизическиеЛица.Ссылка>>, Параметры: Соответствие<Строка, Строка>)
    пер ВидОтсутствия = Параметры.ПолучитьИлиУмолчание("ВидОтсутствия", "")
    пер ВидОтсутствияДляКоллег = Параметры.ПолучитьИлиУмолчание("ВидОтсутствияДляКоллег", "")
    пер ПредставлениеПериода = Параметры.ПолучитьИлиУмолчание("ПредставлениеПериода", "")
    пер ПредставлениеПериодаДляКоллег = Параметры.ПолучитьИлиУмолчание("ПредставлениеПериодаДляКоллег", "")
    для КлючИЗначение из Уведомляемые
        если не КлючИЗначение.Значение.Пусто()
            если КлючИЗначение.Ключ == Отсутствия.ШаблонСообщения.УведомлениеОбОтсутствии и не ВидОтсутствияДляКоллег.Пусто()
                Параметры.Вставить("ВидОтсутствия", ВидОтсутствияДляКоллег)
                Параметры.Вставить("ПредставлениеПериода", ПредставлениеПериодаДляКоллег)
            иначе если не ВидОтсутствия.Пусто()
                Параметры.Вставить("ВидОтсутствия", ВидОтсутствия)
                Параметры.Вставить("ПредставлениеПериода", ПредставлениеПериода)
            ;
            для Получатель из КлючИЗначение.Значение
                ОтправитьУведомление(Получатель, Документ, ВидУведомления, КлючИЗначение.Ключ, Параметры)
            ;
        ;
    ;
;

метод ОтправитьУведомление(Получатель: ФизическиеЛица.Ссылка, Документ: Отсутствие.Ссылка, ВидУведомления: Уведомления.ВидыУведомлений,
        СтроковыйРесурс: Отсутствия.ШаблонСообщения, Параметры: Соответствие<Строка, Строка>)

    пер ИменаРесурсов = новый Массив<Строка>()
    пер ПрефиксРесурса = СтроковыйРесурс.ВСтроку()
    для Элемент из Уведомления.ВидыТекстов.Элементы()
        ИменаРесурсов.Добавить(ПрефиксРесурса + Элемент.ВСтроку())
    ;
    пер ЗначенияРесурсов = УниверсальныеМеханизмы.ЗначенияРесурсовПодсистемы(Отсутствия.ПОДСИСТЕМА_ОТСУТСТВИЯ, ИменаРесурсов)
    пер УниверсальныеПараметры = ОбщегоНазначения.УниверсальныеПараметрыСтроковыхРесурсов(ЗначенияРесурсов, новый ЧитаемоеМножество([Получатель]))
    для ИмяРесурса из ЗначенияРесурсов.Ключи()
        пер Содержание = ОбщегоНазначения.ЗаполнитьУниверсальныеПараметрыВСообщении(ЗначенияРесурсов[ИмяРесурса], УниверсальныеПараметры[Получатель])
        для Параметр из Параметры    
            Содержание = Содержание.Заменить("\%" + Параметр.Ключ + "\%", Параметр.Значение)
        ;
        ЗначенияРесурсов[ИмяРесурса] = Содержание
    ;
    пер ДанныеУведомления = новый УведомленияСервер.ДанныеУведомления(ВидУведомления, Документ)
    пер ТекстыУведомлений = новый УведомленияСервер.ТекстыСообщений(
        ЗначенияРесурсов.ПолучитьИлиУмолчание(ПрефиксРесурса + Уведомления.ВидыТекстов.ТемаПисьма, ""),
        ЗначенияРесурсов.ПолучитьИлиУмолчание(ПрефиксРесурса + Уведомления.ВидыТекстов.ТекстSms, ""),
        ЗначенияРесурсов.ПолучитьИлиУмолчание(ПрефиксРесурса + Уведомления.ВидыТекстов.ТекстPush, ""),
        ЗначенияРесурсов.ПолучитьИлиУмолчание(ПрефиксРесурса + Уведомления.ВидыТекстов.ТекстПисьма, "")
    )
    УведомленияСервер.ОтправитьУведомление(Получатель, ТекстыУведомлений, ДанныеУведомления)
;

метод ПараметрыУведомлений(РеквизитыОтсутствия: ЧитаемоеСоответствие<Строка, Объект?>, ФизическоеЛицо: ФизическиеЛица.Ссылка, 
        Причина: ВидыОтсутствий? = Неопределено): Соответствие<Строка, Строка>
    знч ПараметрыШаблона: Соответствие<Строка, Строка>
    если Причина != Неопределено
        ПараметрыШаблона.Вставить("ВидОтсутствия", Причина.Представление())
        ПараметрыШаблона.Вставить("ВидОтсутствияДляКоллег", Отсутствия.ПредставлениеВидаОтсутствияДляКоллег(Причина))
        пер ПредставлениеПериодаДляКоллег: Строка
        если не ПараметрыШаблона["ВидОтсутствияДляКоллег"].Пусто()
            ПредставлениеПериодаДляКоллег = Отсутствия.ПредставлениеОтсутствия(
                РеквизитыОтсутствия["ДатаНачала"] как Дата?, 
                РеквизитыОтсутствия["ДатаОкончания"] как Дата?, 
                РеквизитыОтсутствия["Причина"] как ВидыОтсутствий?, 
                РеквизитыОтсутствия["ФизическоеЛицо"] как ФизическиеЛица.Ссылка?,
                ПараметрыШаблона["ВидОтсутствияДляКоллег"])
        ;
        ПараметрыШаблона.Вставить("ПредставлениеПериодаДляКоллег", ПредставлениеПериодаДляКоллег)
        пер Окончание = ""
        выбор Причина 
        когда Командировка 
            Окончание = МенеджерСтрок.ОкончаниеГлаголаПрошедшегоВремени(МенеджерСтрок.РодаСуществительных.Женский)
        когда ЛичныеОбстоятельства
            Окончание = "ы"
        ;
        ПараметрыШаблона.Вставить("Согласовано", "Согласован" + Окончание)
        ПараметрыШаблона.Вставить("ЗаСвойСчет", (Причина == ВидыОтсутствий.ОтпускЗаСвойСчет) ? "за свой счет" : "")
    ;
    ПараметрыШаблона.Вставить("ПредставлениеПериода", РеквизитыОтсутствия["ПредставлениеДокумента"] как Строка)
    ПараметрыШаблона.Вставить("СотрудникФио", МенеджерСущности.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "Представление"))
    знч ДанныеОтказа = СогласованияДокументов.ДанныеПодписейДокумента(РеквизитыОтсутствия["Ссылка"], Неопределено, [], РезультатыСогласования.Отказано)
    пер КомментарийПриОтказе = ""
    если не ДанныеОтказа.Пусто()
        КомментарийПриОтказе = ДанныеОтказа.Первый().Комментарий
    ;
    ПараметрыШаблона.Вставить("КомментарийПриОтказе", КомментарийПриОтказе)
    возврат ПараметрыШаблона
;

@ВПодсистеме
метод УдалитьДокумент(Документ: Отсутствие.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?)
    
    исп Транзакции.Начать()
    пер СписокПодписавших = СогласованияДокументов.СписокПодписавших(Документ)
    если не СписокПодписавших.Пусто()
        выбросить новый Согласования.ИсключениеДокументУжеПодписан("Документ уже подписан", Документ)
    ;
    СостДокументов.УдалитьСостояниеДокумента(Документ)
    Документ.ЗагрузитьОбъект().Удалить()

    ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(ФизическоеЛицо, Истина)
    
    пер Руководитель = ОрганизационнаяСтруктура.НепосредственныйРуководительФизическогоЛица(ФизическоеЛицо)
    ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(Руководитель, Истина)

;

метод ДанныеОтсутствий(ОтсутствияСсылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>,
    ИдентификаторыДокументов: Соответствие<Отсутствие.Ссылка, Массив<Организации.Ссылка>>? = Неопределено): 
        ЧитаемыйМассив<ЧитаемоеСоответствие<Строка, Объект?>>
    
    знч СсылкиНаОтсутствия: Массив<Отсутствие.Ссылка>
    для Отсутствие из ОтсутствияСсылки
        СсылкиНаОтсутствия.Добавить(Отсутствие как Отсутствие.Ссылка)
    ;
    если ИдентификаторыДокументов == Неопределено
        ИдентификаторыДокументов = ИдентификаторыЭлектронныхДокументовОтсутствий(СсылкиНаОтсутствия)
    ;
    знч Запрос = Запрос{
        Выбрать 
            Ссылка, 
            Дата, 
            ФизическоеЛицо, 
            Причина, 
            ДатаНачала, 
            ДатаОкончания,
            ВремяНачала,
            ВремяОкончания, 
            ПолныйДень, 
            ДатаОтсутствия, 
            СпособСвязи, 
            ТребуетСогласования, 
            Повторяется, 
            ЧастотаПовторения, 
            ИнтервалПовторения, 
            Комментарий, 
            ПредставлениеДокумента,
            СправкаВторогоРодителяПриложена,
            СведенияОбОтсутствииСправкиВторогоРодителя,
            КоличествоЛистовПриложений
         Из 
            Отсутствие
         Где 
            Ссылка В (%СсылкиНаОтсутствия)
            И ФизическоеЛицо != Неопределено}
    исп Результат = Запрос.Выполнить()
    пер Данные = новый Массив<Соответствие<Строка, Объект?>>()
    для РезультатСтрока из Результат
        пер ДанныеЗапроса = МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат)
        пер ДанныеОтсутствия: Соответствие<Строка, Объект?>
        для ЭлементСоответствия из ДанныеЗапроса
            ДанныеОтсутствия.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение)
        ;
        если ИдентификаторыДокументов.СодержитКлюч(РезультатСтрока.Ссылка)
            ДанныеОтсутствия.Вставить("ИдентификаторыЭлектронныхДокументов",
                ИдентификаторыДокументов.Получить(РезультатСтрока.Ссылка))
        иначе
            ДанныеОтсутствия.Вставить("ИдентификаторыЭлектронныхДокументов", новый Массив<Организации.Ссылка>())
        ;
        Данные.Добавить(ДанныеОтсутствия)
    ; 
    возврат Данные
;

@ВПроекте
метод ИдентификаторыЭлектронныхДокументовОтсутствий(СсылкиНаОтсутствия: ЧитаемаяКоллекция<Отсутствие.Ссылка>):
        Соответствие<Отсутствие.Ссылка, Массив<Организации.Ссылка>>
        
    знч ФункциональныеОпции = ИспользуемаяФункциональность.ФункциональныеОпции()
    пер ИдентификаторыЭлектронныхДокументовСсылок = новый Соответствие<Отсутствие.Ссылка, Массив<Организации.Ссылка>>()
    если ФункциональныеОпции.ЗапросМестаРаботыВЗаявлениях
        знч ЗапросИдентификаторов = Запрос{
            Выбрать Различные
                ОтсутствиеИдентификаторыЭлектронныхДокументов.Владелец Как Ссылка,
                ОтсутствиеИдентификаторыЭлектронныхДокументов.Элемент Как ИдентификаторЭлектронногоДокумента
            Из
                Отсутствие.ИдентификаторыЭлектронныхДокументов Как ОтсутствиеИдентификаторыЭлектронныхДокументов
            Где
                ОтсутствиеИдентификаторыЭлектронныхДокументов.Владелец В (%СсылкиНаОтсутствия)}
        исп РезультатПоИдентификаторамЭлектронныхДокументов = ЗапросИдентификаторов.Выполнить()
        для РезультатПоИдентификаторамЭлектронныхДокументовСтрока из РезультатПоИдентификаторамЭлектронныхДокументов
            пер ИдентификаторыЭлектронныхДокументовСсылки = новый Массив<Организации.Ссылка>()
            если ИдентификаторыЭлектронныхДокументовСсылок.СодержитКлюч(
                РезультатПоИдентификаторамЭлектронныхДокументовСтрока.Ссылка)
                
                ИдентификаторыЭлектронныхДокументовСсылки =
                    ИдентификаторыЭлектронныхДокументовСсылок.Получить(
                        РезультатПоИдентификаторамЭлектронныхДокументовСтрока.Ссылка)
            ;
            ИдентификаторыЭлектронныхДокументовСсылки.Добавить(
                РезультатПоИдентификаторамЭлектронныхДокументовСтрока.ИдентификаторЭлектронногоДокумента)
            ИдентификаторыЭлектронныхДокументовСсылок.Вставить(
                РезультатПоИдентификаторамЭлектронныхДокументовСтрока.Ссылка,
                ИдентификаторыЭлектронныхДокументовСсылки)
        ;
    ;
    возврат ИдентификаторыЭлектронныхДокументовСсылок
;

метод ИдентификаторыЭлектронныхДокументовОтсутствия(ОтсутствиеСсылка: Справочник.Ссылка):
    Массив<Организации.Ссылка>
    знч ИдентификаторыДокументов = ИдентификаторыЭлектронныхДокументовОтсутствий([ОтсутствиеСсылка как Отсутствие.Ссылка])
    если ИдентификаторыДокументов.СодержитКлюч(ОтсутствиеСсылка как Отсутствие.Ссылка)
        возврат ИдентификаторыДокументов[ОтсутствиеСсылка как Отсутствие.Ссылка]
    ;
    возврат новый Массив<Организации.Ссылка>()
;

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: Отсутствие.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?,
    ТребуетсяРегистрацияИзменений: Булево)

    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, ФизическоеЛицо)
    ;
    ОбщегоНазначения.ПослеЗаписиОбъектаСЭлектоннымиДокументамиПредставлений(Ссылка, ТребуетсяРегистрацияИзменений)
;

//Область JSON

структура ДанныеJson
    обз знч ID: Строка
    пер personID: Строка
    пер employerID: Строка?
    пер reason: reasons?
    пер dateCreated: Дата?
    пер allDay: Булево
    пер startDate: Дата|ДатаВремя?
    пер endDate: Дата|ДатаВремя?
    пер electronicDocumentID: Строка
    пер communicationType: ВладельцыКабинетов.СпособСвязиJson?
    пер needsApproval: Булево
    пер recurrenceSchedule: РасписаниеПовторовJson?
    пер note: Строка
    пер attachments: Массив<МенеджерФайлов.ДанныеФайлаJson>
    пер document: Файлы.ЭлектронныйДокументJson?
    пер version: Число?
;

структура ДанныеJson_V2_0
    обз знч ID: Строка
    пер personID: Строка
    пер employerID: Строка?
    пер reason: reasons?
    пер dateCreated: Дата?
    пер allDay: Булево
    пер startDate: Дата|ДатаВремя?
    пер endDate: Дата|ДатаВремя?
    пер electronicDocumentID: Строка
    пер communicationType: ВладельцыКабинетов.СпособСвязиJson?
    пер needsApproval: Булево
    пер recurrenceSchedule: РасписаниеПовторовJson?
    пер note: Строка
    пер attachments: Массив<МенеджерФайлов.ДанныеФайлаJson>
    пер document: Файлы.ЭлектронныйДокументJson_V2_0?
    пер version: Число?
;

структура ДанныеJson_V2_1
    обз знч ID: Строка
    пер personID: Строка
    пер employerID: Строка?
    пер reason: reasons?
    пер dateCreated: Дата?
    пер allDay: Булево
    пер startDate: Дата|ДатаВремя?
    пер endDate: Дата|ДатаВремя?
    пер electronicDocumentID: Строка
    пер communicationType: ВладельцыКабинетов.СпособСвязиJson?
    пер needsApproval: Булево
    пер recurrenceSchedule: РасписаниеПовторовJson?
    пер note: Строка
    пер attachments: Массив<МенеджерФайлов.ДанныеФайлаJson>
    пер document: Файлы.ЭлектронныйДокументJson_V2_1?
    пер version: Число?
;

структура РасписаниеПовторовJson
    пер frequency: ЧастотаПовторенияJson?
    пер interval: Число
    пер days: Массив<Число>?
;

перечисление ЧастотаПовторенияJson
    day,
    week,
    month,
    year    
;

метод ЧастотаПовторенияВJson(Частота: ЧастотаПовторения): ЧастотаПовторенияJson?
    пер Часота: ЧастотаПовторенияJson?
    выбор Частота
    когда День
        Часота = ЧастотаПовторенияJson.day
    когда Неделя
        Часота = ЧастотаПовторенияJson.week
    когда Месяц
        Часота = ЧастотаПовторенияJson.month
    когда Год
        Часота = ЧастотаПовторенияJson.year
    ;
    возврат Часота
;

@ВПодсистеме
перечисление reasons
    late,
    vacation,
    studyLeave,
    unpaidLeave,
    maternityLeave,
    parentalLeave,
    timeOff,
    businessTrip,
    illness,
    personalReason,
    invalidChildCare
;

конст СООТВЕТСТВИЕ_ПРИЧИНЫ_ОТСУТСТВИЙ_JSON = {
    ВидыОтсутствий.Опоздание: reasons.late,
    ВидыОтсутствий.Отпуск: reasons.vacation,
    ВидыОтсутствий.УчебныйОтпуск: reasons.studyLeave,
    ВидыОтсутствий.ОтпускЗаСвойСчет: reasons.unpaidLeave,
    ВидыОтсутствий.ОтпускПоБеременностиИРодам: reasons.maternityLeave,
    ВидыОтсутствий.ОтпускПоУходуЗаРебенком: reasons.parentalLeave,
    ВидыОтсутствий.Отгул: reasons.timeOff,
    ВидыОтсутствий.Командировка: reasons.businessTrip,
    ВидыОтсутствий.Болезнь: reasons.illness,
    ВидыОтсутствий.ЛичныеОбстоятельства: reasons.personalReason,
    ВидыОтсутствий.УходЗаРебенкомИнвалидом: reasons.invalidChildCare    
}

@ВПодсистеме
метод ПричиныОтсутствийВJson(ПричинаОтсутствия: ВидыОтсутствий): reasons
    возврат СООТВЕТСТВИЕ_ПРИЧИНЫ_ОТСУТСТВИЙ_JSON[ПричинаОтсутствия]    
;

@ВПодсистеме
метод ПричиныОтсутствийИзJson(ПричинаОтсутствийJson: reasons): ВидыОтсутствий
    для КлючИЗначение из СООТВЕТСТВИЕ_ПРИЧИНЫ_ОТСУТСТВИЙ_JSON
        если КлючИЗначение.Значение == ПричинаОтсутствийJson
            возврат КлючИЗначение.Ключ
        ;    
    ;    
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    
    знч ГруппаИзмененийJson: Массив<Объект?>

    для ДанныеОтсутствия из ДанныеОтсутствий(Ссылки)
        если (ДанныеОтсутствия["ИдентификаторыЭлектронныхДокументов"] как Массив<Организации.Ссылка>).Пусто()
            ГруппаИзмененийJson.Добавить(ДанныеОтсутствияВJson(ДанныеОтсутствия, Сервисы, ВерсияФорматаОбмена, Ложь))
        иначе
            для Организация из ДанныеОтсутствия["ИдентификаторыЭлектронныхДокументов"] как Массив<Организации.Ссылка>
                ГруппаИзмененийJson.Добавить(ДанныеОтсутствияВJson(ДанныеОтсутствия, Сервисы, ВерсияФорматаОбмена, Ложь, Организация))
            ;                    
        ;
    ;
    возврат {"absences": ГруппаИзмененийJson}
;

@ВПроекте
метод ПолучитьДанныеJson(Ссылка: Отсутствие.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Объект?
    если Ссылка == Неопределено 
        возврат Неопределено
    ;
    возврат ГруппаИзмененийВJson([Ссылка], Сервисы, ВерсияФорматаОбмена)["absences"]
;

метод ДанныеОтсутствияВJson(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?, ДляПредставления: Булево,
    Организация: Организации.Ссылка? = Неопределено): ДанныеJson | ДанныеJson_V2_0 | ДанныеJson_V2_1
    
    если ВерсияФорматаОбмена != Неопределено и ВерсияФорматаОбмена >= Версия{2.1}
        возврат ДанныеОтсутствияВJson_V2_1(ДанныеОбъекта, Сервисы, ДляПредставления, Организация)
    иначе если ВерсияФорматаОбмена != Неопределено и ВерсияФорматаОбмена >= Версия{2.0}
        возврат ДанныеОтсутствияВJson_V2_0(ДанныеОбъекта, Сервисы, ДляПредставления, Организация)
    ;
    возврат ДанныеОтсутствияВJson(ДанныеОбъекта, Сервисы, ДляПредставления, Организация)
;

метод ДанныеОтсутствияВJson(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево, Организация: Организации.Ссылка? = Неопределено): ДанныеJson

    знч ДанныеВJson = новый ДанныеJson(
        (ДанныеОбъекта["Ссылка"] как Отсутствие.Ссылка).Ид.ВСтроку())
    
    знч ИдентификаторыСсылок = новый Массив<ВходящиеДанные.Ссылка>()
    ИдентификаторыСсылок.Добавить(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    если Организация != Неопределено
        ИдентификаторыСсылок.Добавить(Организация)
    ;

    Сервисы.ПолучитьИдентификаторы(ИдентификаторыСсылок)

    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.reason = ПричиныОтсутствийВJson(ДанныеОбъекта["Причина"] как ВидыОтсутствий)
    если Организация != Неопределено
        ДанныеВJson.employerID = Сервисы.ПолучитьИдентификатор(Организация)
        ДанныеВJson.electronicDocumentID = Файлы.ИдентификаторЭлектронногоДокумента(
            ДанныеОбъекта["Ссылка"] как Отсутствие.Ссылка, Организация)
    ;
    ДанныеВJson.allDay = ДанныеОбъекта["ПолныйДень"] как Булево
    если ДанныеОбъекта["ПолныйДень"] как Булево
        ДанныеВJson.startDate = ДанныеОбъекта["ДатаНачала"] как Дата?
        ДанныеВJson.endDate = ДанныеОбъекта["ДатаОкончания"] как Дата?
    иначе
        если ДанныеОбъекта["ВремяНачала"] != Неопределено
            ДанныеВJson.startDate = новый ДатаВремя(ДанныеОбъекта["ДатаОтсутствия"] как Дата, ДанныеОбъекта["ВремяНачала"] как Время)
        ;
        ДанныеВJson.endDate = новый ДатаВремя(ДанныеОбъекта["ДатаОтсутствия"] как Дата, ДанныеОбъекта["ВремяОкончания"] как Время)
    ;
    ДанныеВJson.communicationType = ВладельцыКабинетов.СпособСвязиВJson(ДанныеОбъекта["СпособСвязи"] как СпособыСвязи)
    ДанныеВJson.needsApproval = ДанныеОбъекта["ТребуетСогласования"] как Булево
    если ДанныеОбъекта["Повторяется"] как Булево
        ДанныеВJson.recurrenceSchedule = ДанныеПовторенияВJson(ДанныеОбъекта)
    ;
    ДанныеВJson.note = ДанныеОбъекта["Комментарий"] как Строка

    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson(
        ДанныеОбъекта["Ссылка"] как Отсутствие.Ссылка, ДляПредставления, Сервисы, ДанныеВJson.electronicDocumentID)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.attachments = ДанныеФайлов.Вложения
    ;
    
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как Отсутствие.Ссылка))
    ;

    возврат ДанныеВJson

;

метод ДанныеОтсутствияВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево, Организация: Организации.Ссылка? = Неопределено): ДанныеJson_V2_0

    знч ДанныеВJson = новый ДанныеJson_V2_0(
        (ДанныеОбъекта["Ссылка"] как Отсутствие.Ссылка).Ид.ВСтроку())
    
    знч ИдентификаторыСсылок = новый Массив<ВходящиеДанные.Ссылка>()
    ИдентификаторыСсылок.Добавить(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    если Организация != Неопределено
        ИдентификаторыСсылок.Добавить(Организация)
    ;

    Сервисы.ПолучитьИдентификаторы(ИдентификаторыСсылок)

    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.reason = ПричиныОтсутствийВJson(ДанныеОбъекта["Причина"] как ВидыОтсутствий)
    если Организация != Неопределено
        ДанныеВJson.employerID = Сервисы.ПолучитьИдентификатор(Организация)
        ДанныеВJson.electronicDocumentID = Файлы.ИдентификаторЭлектронногоДокумента(
            ДанныеОбъекта["Ссылка"] как Отсутствие.Ссылка, Организация)
    ;
    ДанныеВJson.allDay = ДанныеОбъекта["ПолныйДень"] как Булево
    если ДанныеОбъекта["ПолныйДень"] как Булево
        ДанныеВJson.startDate = ДанныеОбъекта["ДатаНачала"] как Дата?
        ДанныеВJson.endDate = ДанныеОбъекта["ДатаОкончания"] как Дата?
    иначе
        если ДанныеОбъекта["ВремяНачала"] != Неопределено
            ДанныеВJson.startDate = новый ДатаВремя(ДанныеОбъекта["ДатаОтсутствия"] как Дата, ДанныеОбъекта["ВремяНачала"] как Время)
        ;
        ДанныеВJson.endDate = новый ДатаВремя(ДанныеОбъекта["ДатаОтсутствия"] как Дата, ДанныеОбъекта["ВремяОкончания"] как Время)
    ;
    ДанныеВJson.communicationType = ВладельцыКабинетов.СпособСвязиВJson(ДанныеОбъекта["СпособСвязи"] как СпособыСвязи)
    ДанныеВJson.needsApproval = ДанныеОбъекта["ТребуетСогласования"] как Булево
    если ДанныеОбъекта["Повторяется"] как Булево
        ДанныеВJson.recurrenceSchedule = ДанныеПовторенияВJson(ДанныеОбъекта)
    ;
    ДанныеВJson.note = ДанныеОбъекта["Комментарий"] как Строка

    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_0(
        ДанныеОбъекта["Ссылка"] как Отсутствие.Ссылка, ДляПредставления, Сервисы, ДанныеВJson.electronicDocumentID)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.attachments = ДанныеФайлов.Вложения
    ;
    
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как Отсутствие.Ссылка))
    ;

    возврат ДанныеВJson

;

метод ДанныеОтсутствияВJson_V2_1(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево, Организация: Организации.Ссылка? = Неопределено): ДанныеJson_V2_1

    знч ДанныеВJson = новый ДанныеJson_V2_1(
        (ДанныеОбъекта["Ссылка"] как Отсутствие.Ссылка).Ид.ВСтроку())
    
    знч ИдентификаторыСсылок = новый Массив<ВходящиеДанные.Ссылка>()
    ИдентификаторыСсылок.Добавить(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    если Организация != Неопределено
        ИдентификаторыСсылок.Добавить(Организация)
    ;

    Сервисы.ПолучитьИдентификаторы(ИдентификаторыСсылок)

    ДанныеВJson.dateCreated = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.personID = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    ДанныеВJson.reason = ПричиныОтсутствийВJson(ДанныеОбъекта["Причина"] как ВидыОтсутствий)
    если Организация != Неопределено
        ДанныеВJson.employerID = Сервисы.ПолучитьИдентификатор(Организация)
        ДанныеВJson.electronicDocumentID = Файлы.ИдентификаторЭлектронногоДокумента(
            ДанныеОбъекта["Ссылка"] как Отсутствие.Ссылка, Организация)
    ;
    ДанныеВJson.allDay = ДанныеОбъекта["ПолныйДень"] как Булево
    если ДанныеОбъекта["ПолныйДень"] как Булево
        ДанныеВJson.startDate = ДанныеОбъекта["ДатаНачала"] как Дата?
        ДанныеВJson.endDate = ДанныеОбъекта["ДатаОкончания"] как Дата?
    иначе
        если ДанныеОбъекта["ВремяНачала"] != Неопределено
            ДанныеВJson.startDate = новый ДатаВремя(ДанныеОбъекта["ДатаОтсутствия"] как Дата, ДанныеОбъекта["ВремяНачала"] как Время)
        ;
        ДанныеВJson.endDate = новый ДатаВремя(ДанныеОбъекта["ДатаОтсутствия"] как Дата, ДанныеОбъекта["ВремяОкончания"] как Время)
    ;
    ДанныеВJson.communicationType = ВладельцыКабинетов.СпособСвязиВJson(ДанныеОбъекта["СпособСвязи"] как СпособыСвязи)
    ДанныеВJson.needsApproval = ДанныеОбъекта["ТребуетСогласования"] как Булево
    если ДанныеОбъекта["Повторяется"] как Булево
        ДанныеВJson.recurrenceSchedule = ДанныеПовторенияВJson(ДанныеОбъекта)
    ;
    ДанныеВJson.note = ДанныеОбъекта["Комментарий"] как Строка

    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_1(
        ДанныеОбъекта["Ссылка"] как Отсутствие.Ссылка, ДляПредставления, Сервисы, ДанныеВJson.electronicDocumentID)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.document = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.attachments = ДанныеФайлов.Вложения
    ;
    
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.version = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как Отсутствие.Ссылка))
    ;

    возврат ДанныеВJson

;

метод ДанныеПовторенияВJson(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>): РасписаниеПовторовJson
    знч ДанныеВJson = новый РасписаниеПовторовJson()
    ДанныеВJson.frequency = ЧастотаПовторенияВJson(ДанныеОбъекта["ЧастотаПовторения"] как ЧастотаПовторения)
    ДанныеВJson.interval = ДанныеОбъекта["ИнтервалПовторения"] как Число
    если [ЧастотаПовторения.Неделя, ЧастотаПовторения.Месяц].Содержит(ДанныеОбъекта["ЧастотаПовторения"] как ЧастотаПовторения)
        ДанныеВJson.days = (ДанныеОбъекта["Ссылка"] как Отсутствие.Ссылка).ЗагрузитьОбъект()!.ДниПовтора
    ;
    возврат ДанныеВJson
;

@ВПодсистеме
метод ФизическоеЛицоДокумента(Документ: Отсутствие.Ссылка): ФизическиеЛица.Ссылка?
    знч Запрос = Запрос{
        Выбрать Первые 1
            ФизическоеЛицо
        Из
            Отсутствие
        Где
            Ссылка == %Документ
    }
    
    возврат Запрос.Выполнить().ЕдинственныйИлиУмолчание().ФизическоеЛицо
;

//КонецОбласти

@ВПроекте
метод ПредставленияИдентификаторовЭлектронныхДокументов(ДокументСсылка: Отсутствие.Ссылка): Соответствие<Строка, Строка>
    пер ПредставленияДокументов = новый Соответствие<Строка, Строка>()
    знч ФункциональныеОпции = ИспользуемаяФункциональность.ФункциональныеОпции()
    если ФункциональныеОпции.ЗапросМестаРаботыВЗаявлениях
        знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ФизическоеЛицо")
        если ФизическоеЛицо != Неопределено
            знч ВсеОрганизацииДокумента = Сотрудники.ОрганизацииФизическогоЛица(ФизическоеЛицо, Истина)
            для ОрганизацияДокумента из ВсеОрганизацииДокумента
                ПредставленияДокументов.Вставить(
                    Файлы.ИдентификаторЭлектронногоДокумента(ДокументСсылка, ОрганизацияДокумента.Организация),
                    ОрганизацияДокумента.Представление)
            ;
        ;
    иначе
        ПредставленияДокументов.Вставить("", "")
    ;
    возврат ПредставленияДокументов
;

//КонецОбласти

@ВПроекте
метод ДанныеДокументаДляПечатнойФормы(ДокументСсылка: Объект, ИдентификаторыДокумента: Массив<Организации.Ссылка>? = Неопределено):
    Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>
    
    пер ДанныеДокумента = новый Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>()
    пер ДанныеЗаявления: Соответствие<Строка, Объект?>? =
        ДанныеОтсутствия(ДокументСсылка как Отсутствие.Ссылка, ИдентификаторыДокумента) как Соответствие<Строка, Объект?>?
        
    если ДанныеЗаявления != Неопределено
        пер ПоставляемыеДанные = ПредставленияДокументов.ДанныеПредставленияДокумента(ДанныеЗаявления)
        если ((ДанныеЗаявления["ИдентификаторыЭлектронныхДокументов"]) как Массив<Организации.Ссылка>).Пусто()
            ДанныеДокумента.Вставить("", новый ШаблоныДокументовМенеджер.ДанныеПечатныхФорм(Данные = ПоставляемыеДанные))
        иначе
            для Организация из (ДанныеЗаявления)["ИдентификаторыЭлектронныхДокументов"] как Массив<Организации.Ссылка>
                знч ИдентификаторЭлектронногоДокумента = Файлы.ИдентификаторЭлектронногоДокумента(ДокументСсылка как Отсутствие.Ссылка, Организация)
                пер ПоставляемыеДанныеИдентификатора = новый Соответствие<Строка, Объект?>()
                ПоставляемыеДанныеИдентификатора.ВставитьВсе(ПоставляемыеДанные)
                ПоставляемыеДанныеИдентификатора.Вставить("Организация", Организация)
                ДанныеДокумента.Вставить(ИдентификаторЭлектронногоДокумента,
                    новый ШаблоныДокументовМенеджер.ДанныеПечатныхФорм(
                        ИдентификаторЭлектронногоДокумента,
                        ПоставляемыеДанныеИдентификатора))
            ;
        ;
    ;
    ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента)
    возврат ДанныеДокумента
;

@ВПодсистеме
метод ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента: Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>)
    для ДанныеИдентификатора из ДанныеДокумента
        пер ПоставляемыеДанные = ДанныеИдентификатора.Значение.Данные
        
        пер ПериодОтсутствия: Строка
        пер ДнейОтсутствия = 1
        знч Начало = МенеджерДат.ФорматДаты(ПоставляемыеДанные["ДанныеДокументаДатаНачала"] как Дата?, "д ММММ гггг")
        знч Окончание = МенеджерДат.ФорматДаты(ПоставляемыеДанные["ДанныеДокументаДатаОкончания"] как Дата?, "д ММММ гггг")
        если ПоставляемыеДанные["ДанныеДокументаДатаНачала"] == ПоставляемыеДанные["ДанныеДокументаДатаОкончания"]
            ПериодОтсутствия = Начало
        иначе
            ДнейОтсутствия = ((ПоставляемыеДанные["ДанныеДокументаДатаОкончания"] как Дата) - (ПоставляемыеДанные["ДанныеДокументаДатаНачала"] как Дата)).Дни + 1
            ПериодОтсутствия = "с %{Начало} по %{Окончание}"
        ;
        ПоставляемыеДанные.Вставить("ДанныеДокументаПериодОтсутствия", ПериодОтсутствия)
        ПоставляемыеДанные.Вставить("ДанныеДокументаДнейОтсутствия", ДнейОтсутствия)
        
        если ПоставляемыеДанные["ДанныеДокументаДатаНачала"] == Неопределено
            ПоставляемыеДанные.Вставить("ДанныеДокументаПериодОтсутствияДатаНачала", ПоставляемыеДанные["ДанныеДокументаДатаОтсутствия"])
            ПоставляемыеДанные.Вставить("ДанныеДокументаПериодОтсутствияДатаОкончания", ПоставляемыеДанные["ДанныеДокументаДатаОтсутствия"])
        иначе
            ПоставляемыеДанные.Вставить("ДанныеДокументаПериодОтсутствияДатаНачала", ПоставляемыеДанные["ДанныеДокументаДатаНачала"])
            ПоставляемыеДанные.Вставить("ДанныеДокументаПериодОтсутствияДатаОкончания", ПоставляемыеДанные["ДанныеДокументаДатаОкончания"])
        ;
    
        пер ВремяОтсутствия = ""
        если ПоставляемыеДанные["ДанныеДокументаПолныйДень"] как Булево
            ВремяОтсутствия = "весь день"
        иначе
            ВремяОтсутствия = МенеджерДат.ПредставлениеПериодаВремени(
                ПоставляемыеДанные["ДанныеДокументаВремяНачала"] как Время? ?? Время{00:00},
                ПоставляемыеДанные["ДанныеДокументаВремяОкончания"] как Время)
        ;
        ПоставляемыеДанные.Вставить("ДанныеДокументаВремяОтсутствия", ВремяОтсутствия)
        ПоставляемыеДанные.Вставить("ДанныеДокументаВремяОтсутствияВремяНачала",
            МенеджерДат.ПредставлениеВремени(ПоставляемыеДанные["ДанныеДокументаВремяНачала"] как Время?))
        ПоставляемыеДанные.Вставить("ДанныеДокументаВремяОтсутствияВремяОкончания",
            МенеджерДат.ПредставлениеВремени(ПоставляемыеДанные["ДанныеДокументаВремяОкончания"] как Время?))
        
        пер ДатаОтсутствия = ""
        если ПоставляемыеДанные["ДанныеДокументаДатаОтсутствия"] это Строка
            ДатаОтсутствия = ПоставляемыеДанные["ДанныеДокументаДатаОтсутствия"] как Строка
        иначе
            ДатаОтсутствия = МенеджерДат.ФорматДаты(ПоставляемыеДанные["ДанныеДокументаДатаОтсутствия"] как Дата?, "д ММММ гггг")
        ;
        ПоставляемыеДанные.Вставить("ДанныеДокументаДатаОтсутствия", ДатаОтсутствия)
        если ПоставляемыеДанные.ПолучитьИлиУмолчание("ДанныеДокументаКоличествоЛистовПриложений", 0) == 0
            ПоставляемыеДанные.Вставить("ДанныеДокументаКоличествоЛистовПриложений", "____")
        ;
    
        пер Наименование: Строка
        выбор ПоставляемыеДанные["ДанныеДокументаПричина"]
        когда ВидыОтсутствий.Опоздание
            Наименование = "Объяснительная записка"
        когда ВидыОтсутствий.Болезнь
            Наименование = "Уведомление"
        иначе
            Наименование = "Заявление"    
        ;
        ПоставляемыеДанные.Вставить("ДанныеДокументаНаименование", Наименование)
    
        пер ВремяОпоздания = МенеджерДат.ПредставлениеВремени(ПоставляемыеДанные["ДанныеДокументаВремяОкончания"] как Время?)
        ПоставляемыеДанные.Вставить("ДанныеДокументаВремяОпоздания", ВремяОпоздания)
        
        пер Текст: Строка
        выбор ПоставляемыеДанные["ДанныеДокументаПричина"]
        когда ВидыОтсутствий.ЛичныеОбстоятельства
            Текст = "Прошу согласовать отсутствие %ДатаОтсутствия (%ВремяОтсутствия) по личным обстоятельствам"
        когда ВидыОтсутствий.Опоздание
            Текст =
                "%ДатаОтсутствия.
                Опаздываю, буду на рабочем месте к %ВремяОпоздания"
        когда ВидыОтсутствий.Болезнь
            если ПоставляемыеДанные["ДанныеДокументаДатаНачала"] == ПоставляемыеДанные["ДанныеДокументаДатаОкончания"]
                Текст = "Болею. %ПериодОтсутствия буду отсутствовать"
            иначе
                Текст = "Болею. Буду отсутствовать %ПериодОтсутствия"
            ;
        когда ВидыОтсутствий.Отгул
            Текст = "Прошу предоставить дополнительные дни отдыха %ПериодОтсутствия"
        когда ВидыОтсутствий.Командировка
            Текст = "Прошу согласовать командировку %ПериодОтсутствия"
        когда ВидыОтсутствий.УчебныйОтпуск
            Текст = "Прошу предоставить дополнительный отпуск %ПериодОтсутствия"
        когда ВидыОтсутствий.ОтпускПоБеременностиИРодам
            Текст = "Прошу предоставить отпуск по беременности и родам %ПериодОтсутствия"
        когда ВидыОтсутствий.ОтпускПоУходуЗаРебенком
            Текст = "Прошу предоставить отпуск по уходу за ребенком %ПериодОтсутствия"
        когда ВидыОтсутствий.УходЗаРебенкомИнвалидом
            Текст = "Прошу предоставить дополнительные выходные дни для ухода за ребенком-инвалидом %ПериодОтсутствия"
        ;
        
        знч Заместители = ЗаместителиМенеджер.ТекстПредставленияЗаместителей(
            ПоставляемыеДанные["ДанныеДокументаСсылка"] как Отсутствие.Ссылка, Тип<ОтсутствиеЗаместители.Ссылка>)
        ПоставляемыеДанные.Вставить("ДанныеДокументаЗаместители", Заместители)
        если не Заместители.Пусто()
            Текст =  "%Текст\н%Заместители."
        ;
        Текст = ПредставленияДокументов.ТекстДокументаДополненныйКомментарием(Текст, ПоставляемыеДанные["ДанныеДокументаКомментарий"] как Строка)

        
        знч ОписаниеВложений = ПрисоединенныеФайлыМенеджер.ТекстОписанияПриложенныхФайлов(ПоставляемыеДанные["ДанныеДокументаСсылка"] как Отсутствие.Ссылка)
        ПоставляемыеДанные.Вставить("ДанныеДокументаВложения", ОписаниеВложений)
        Текст = ПрисоединенныеФайлыМенеджер.ТекстCОписаниемПриложенныхФайлов(Текст, ОписаниеВложений)
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаТекст", Текст)
        ПоставляемыеДанные.Вставить("ДанныеДокументаЕстьУведомляемые", Ложь)
        ПоставляемыеДанные.Вставить("ДанныеДокументаЕстьЗаместители", Ложь)
    ;
;

@ВПодсистеме
метод ДанныеДокументаДляПодготовкиОписаний(СсылкаНаДокумент: Сущность.Ключ): Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>
    
    пер ДанныеДокумента = новый Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>()
    знч ДанныеЗаявления = ДанныеОтсутствия(СсылкаНаДокумент как Отсутствие.Ссылка)
    пер Наименование: Строка
    пер Код = ШаблоныДокументов.КОД_ДОКУМЕНТА_КЭДО_ПРОЧЕЕ
    выбор ДанныеЗаявления["Причина"]
    когда ВидыОтсутствий.Отгул
        Наименование = "Заявление о предоставлении дополнительных дней отпуска"
    когда ВидыОтсутствий.Командировка
        Наименование = "Заявление о необходимости направления в командировку"
    когда ВидыОтсутствий.УчебныйОтпуск
        Наименование = "Заявление о предоставления отпуска в связи с учебой"
    когда ВидыОтсутствий.ОтпускПоБеременностиИРодам
        Наименование = "Заявление на отпуск по беременности и родам"
    когда ВидыОтсутствий.ОтпускПоУходуЗаРебенком
        Наименование = "Заявление на отпуск по уходу за ребенком"
    когда ВидыОтсутствий.УходЗаРебенкомИнвалидом
        Наименование = "Заявление о предоставлении дополнительных оплачиваемых выходных дней для ухода за детьми-инвалидами"
        Код = "02.019"
    ;
    
    если ((ДанныеЗаявления)["ИдентификаторыЭлектронныхДокументов"] как Массив<Организации.Ссылка>).Пусто()
        ДанныеДокумента.Вставить("",
            новый Согласования.ДанныеДляПодготовкиОписания(
                ДанныеЗаявления["Организация"] как Организации.Ссылка,
                ДанныеЗаявления["Дата"] как Дата,
                Наименование,
                Код
            )
        )
    иначе
        для Организация из (ДанныеЗаявления)["ИдентификаторыЭлектронныхДокументов"] как Массив<Организации.Ссылка>
            знч ИдентификаторЭлектронногоДокумента = Файлы.ИдентификаторЭлектронногоДокумента(СсылкаНаДокумент как Отсутствие.Ссылка, Организация)
            ДанныеДокумента.Вставить(ИдентификаторЭлектронногоДокумента,
                новый Согласования.ДанныеДляПодготовкиОписания(
                    Организация,
                    ДанныеЗаявления["Дата"] как Дата,
                    Наименование,
                    Код
                )
            )
        ;
    ;
    возврат ДанныеДокумента
;