импорт ФизическиеЛица
импорт ВебApi
импорт КонтрольДоступа

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ЧтениеАутентифицированным(этот),
            КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот)]    
;


@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ДниДополнительногоОтдыха.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ДниДополнительногоОтдыха.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ДниДополнительногоОтдыха.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПерсонально([Элемент.Владелец]))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

// КонецОбласти

//Область JSON

@ВПодсистеме
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<ДанныеJson>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<ДанныеJson>
    ;
;

@ВПодсистеме
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Массив<ДанныеJson>>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Массив<ДанныеJson>>
    ;
;

@ВПроекте
структура ДанныеJson
    обз знч personID: Строка
    обз знч daysNotUsed: Число
;

@ВПодсистеме
метод ТипОбъектаJson(): Строка
    возврат "timeOffSummaries"
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    знч ФизическоеЛицо = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.personID)) как ФизическиеЛица.Ссылка
    УстановитьОстатокДней(ФизическоеЛицо, ДанныеJson.daysNotUsed)    
;

@ВПодсистеме
метод УдалитьОбъекты(ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>, Сервисы: ВебApiСервер.СервисыУдаленияОбъектов)
    знч ФизическоеЛицо = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ПараметрыЗапроса["personID"] как Строка)) как ФизическиеЛица.Ссылка
    СброситьОстатокДней(ФизическоеЛицо, Истина)
;

//КонецОбласти


метод УстановитьОстатокДней(ФизическоеЛицо: ФизическиеЛица.Ссылка, Остаток: Число)
    
    пер Элемент = ЭлементОстаткаДней(ФизическоеЛицо)
    
    если Элемент == Неопределено
        Элемент = новый ДниДополнительногоОтдыха.Объект()
        Элемент.Владелец = ФизическоеЛицо
    ;
    
    Элемент.Остаток = Остаток
    Элемент.Записать()
;

метод СброситьОстатокДней(ФизическоеЛицо: ФизическиеЛица.Ссылка, Заблокировать: Булево = Ложь)

    исп Транзакции.Начать()
    
    пер Элемент = ЭлементОстаткаДней(ФизическоеЛицо, Заблокировать)
    если Элемент == Неопределено
        возврат
    ;
    Элемент.Удалить()

;

метод ЭлементОстаткаДней(ФизическоеЛицо: ФизическиеЛица.Ссылка, Заблокировать: Булево = Ложь): ДниДополнительногоОтдыха.Объект?
    
    знч Запрос = Запрос{
        Выбрать 
             Ссылка
         Из 
             ДниДополнительногоОтдыха 
         Где 
             Владелец == %ФизическоеЛицо}
    исп Результат = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        возврат РезультатСтроки[0].Ссылка.ЗагрузитьОбъект(Заблокировать)
    ;
    возврат Неопределено
;