импорт ОбщиеСтандартные
импорт ИнтерфейсныеКомпонентыСтандартные
импорт СтандартноеПриложение
импорт ФизическиеЛица
импорт ВладельцыКабинетов
импорт Компания
импорт ЛичныеКабинетыПользователей

@Обработчик
метод ПослеСоздания()
    если ВладельцыКабинетов.ЭтоРуководительПодразделения()
        ПодчиненныеРуководителя = ПодчиненныеРуководителя(ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо, Компания.ПараметрыСеанса().ПодразделенияРуководителя)
    ;
    УстановитьФильтрСписка()
    Компоненты.Поиск.ВыполнитьПоиск = &СтрокаПоискаВыполнитьПоиск
    ИнтерфейсныеКомпоненты.ИнициализироватьТаблицу(Таблица = Компоненты.ОтсутствияСотрудников, ИспользоватьВыделениеСтроки = Истина)
;

метод СтрокаПоискаВыполнитьПоиск(Источник: СтрокаПоиска, Событие: СобытиеСДанными<Строка>)
    знч ПоисковаяСтрока: Строка = Событие.Данные
    СтрокаПоиска = ПоисковаяСтрока
    УстановитьФильтрСписка()
;

метод БыстрыйФильтрПриНажатии(Источник: КомпонентВыбора, Событие: СобытиеПриНажатии)
    пер Компонент:  КомпонентВыбора = Источник
    ВариантОтображения = Компонент.ДополнительныеДанные как ВариантыОтображенияОтсутствий
    УстановитьФильтрСписка()
;


метод Элемент(Группа: ГруппаЭлементовФильтра, Индексы: Массив<Число>): ЭлементФильтра
    для А=0 по Индексы.Граница() - 1
        Группа = Группа.Элементы[Индексы[А]] как ГруппаЭлементовФильтра
    ;
    возврат Группа.Элементы[Индексы[Индексы.Граница()]] как ЭлементФильтра
;

метод УстановитьФильтрСписка()
    пер ТекущаяДата = МенеджерДат.ТекущаяДатаВремя()
    пер ТекущаяДатаНачалоДня = МенеджерДат.НачалоДня(ТекущаяДата)
    пер ТекущаяДатаКонецДня = МенеджерДат.КонецДня(ТекущаяДата)
    пер ИсточникДанныхФильтр = ОтсутствияСотрудниковИсточник().Фильтр
    пер ЭлементФильтра = ИсточникДанныхФильтр.Элементы[0] как ЭлементФильтра

    ЭлементФильтра.Значение = СтрокаПоиска
    ЭлементФильтра.Использовать = не СтрокаПоиска.Пусто()
    
    пер ГруппаЭлементовФильтра = ИсточникДанныхФильтр.Элементы[1] как ГруппаЭлементовФильтра
    Элемент(ГруппаЭлементовФильтра, [0, 0, 0]).Значение = ТекущаяДатаКонецДня
    Элемент(ГруппаЭлементовФильтра, [0, 0, 1]).Значение = ВидыОтсутствий.Опоздание
    Элемент(ГруппаЭлементовФильтра, [0, 1, 0]).Значение = ТекущаяДатаКонецДня
    Элемент(ГруппаЭлементовФильтра, [0, 1, 1]).Значение = ВидыОтсутствий.Опоздание
    Элемент(ГруппаЭлементовФильтра, [1]).Значение = ТекущаяДатаНачалоДня
    ГруппаЭлементовФильтра.Использовать = ВариантОтображения == ВариантыОтображенияОтсутствий.Сегодня
    
    ЭлементФильтра = ИсточникДанныхФильтр.Элементы[2] как ЭлементФильтра
    ЭлементФильтра.Значение = ТекущаяДатаКонецДня
    ЭлементФильтра.Использовать = ВариантОтображения == ВариантыОтображенияОтсутствий.Будущие
    
    ЭлементФильтра = ИсточникДанныхФильтр.Элементы[3] как ЭлементФильтра
    ЭлементФильтра.Значение = ТекущаяДатаНачалоДня
    ЭлементФильтра.Использовать = ВариантОтображения == ВариантыОтображенияОтсутствий.Архив

    ЭлементФильтра = ИсточникДанныхФильтр.Элементы[4] как ЭлементФильтра
    ЭлементФильтра.Использовать = ВариантОтображения != ВариантыОтображенияОтсутствий.Архив
;

метод ОтсутствияСотрудниковИсточник(): ДинамическийСписок
    возврат Компоненты.ОтсутствияСотрудников.Источник
;

метод СегодняАктивность(): Булево
    возврат ВариантОтображения == ВариантыОтображенияОтсутствий.Сегодня
;  

метод БудущиеАктивность(): Булево
    возврат ВариантОтображения == ВариантыОтображенияОтсутствий.Будущие
;  

метод АрхивАктивность(): Булево
    возврат ВариантОтображения == ВариантыОтображенияОтсутствий.Архив
;  

метод СегодняЗаголовок(): Строка
    возврат ВариантыОтображенияОтсутствий.Сегодня.Представление()
;

метод БудущиеЗаголовок(): Строка
    возврат ВариантыОтображенияОтсутствий.Будущие.Представление()
;

метод АрхивЗаголовок(): Строка
    возврат ВариантыОтображенияОтсутствий.Архив.Представление()
;

// Область Методы обслуживания ТаблицаРасширенная 

метод ОтсутствияСотрудниковПриНажатииСтроки(Источник: Список<ДинамическийСписок>, Событие: СобытиеСДанными<СтрокаСписка<СтрокаДинамическогоСписка>>)
    пер ДанныеСобытия = новый ОтсутствиеСотрудникаКомпонентДанных()
    ДанныеСобытия.ФизическоеЛицо = Событие.Данные.ДанныеСтроки.Данные["ФизическоеЛицо"] как ФизическиеЛица.Ссылка?
    ДанныеСобытия.Документ =  Событие.Данные.ДанныеСтроки.Данные["Документ"] как ОснованиеОтсутствия.Ссылка?
    ПриАктивацииСтроки(новый СобытиеСДанными(ДанныеСобытия))
;

метод ФотографияАдресКартинки(ДанныеЭлемента: СтрокаДинамическогоСписка): ДвоичныйОбъект.Ссылка?
    если ДанныеЭлемента.Данные["Миниатюра"] != Неопределено
        возврат ДанныеЭлемента.Данные["Миниатюра_Хранилище"] как ДвоичныйОбъект.Ссылка?
    ;
    возврат СтандартноеПриложение.ПараметрыСеанса().АватарПоУмолчанию
;

метод ПредставлениеОтсутствияЗаголовок(ДанныеЭлемента: СтрокаДинамическогоСписка): Строка
    пер Представление: Строка
    пер Начало: Момент? = ДанныеЭлемента.Данные["Начало"] как Момент?
    пер Окончание: Момент? = ДанныеЭлемента.Данные["Окончание"] как Момент?
    пер ДатаНачала: Дата? = ДанныеЭлемента.Данные["ДатаНачала"] как Дата?
    пер ДатаОкончания: Дата? = ДанныеЭлемента.Данные["ДатаОкончания"] как Дата?
    пер Причина = ДанныеЭлемента.Данные["Причина"] как ВидыОтсутствий
    пер Внутрисменное: Булево = ДанныеЭлемента.Данные["Внутрисменное"] как Булево
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка? = ДанныеЭлемента.Данные["ФизическоеЛицо"] как ФизическиеЛица.Ссылка?
    
    пер ПредставлениеПричины: Строка
    если ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо != ФизическоеЛицо
        и ФизическоеЛицо != Неопределено и не ПодчиненныеРуководителя.Содержит(ФизическоеЛицо)
        ПредставлениеПричины = Отсутствия.ПредставлениеВидаОтсутствияДляКоллег(Причина)
    ;
    
    если Внутрисменное
        Представление = Отсутствия.ПредставлениеВнутрисменногоОтсутствия(Начало, Окончание, Причина)
    иначе
        Представление = Отсутствия.ПредставлениеОтсутствия(ДатаНачала, ДатаОкончания, Причина, Неопределено, ПредставлениеПричины)
    ;
    возврат Представление
;

@НаСервере @ДоступноСКлиента
статический метод ПодчиненныеРуководителя(Руководитель: ФизическиеЛица.Ссылка?, Подразделения: ЧитаемыйМассив<СтруктураПредприятия.Ссылка>): Множество<ФизическиеЛица.Ссылка>
    возврат ОрганизационнаяСтруктура.ПодчиненныеРуководителя(Руководитель, Подразделения)
;

// КонецОбласти Методы обслуживания ТаблицаРасширенная 