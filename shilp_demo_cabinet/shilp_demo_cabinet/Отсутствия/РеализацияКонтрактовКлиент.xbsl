импорт СтандартноеПриложение
импорт Документы
импорт ИнтерфейсныеКомпонентыСтандартные
импорт Компания
импорт Криптография
импорт ЛичныеКабинетыПользователей
импорт УниверсальныеМеханизмы
импорт Уведомления
импорт ФизическиеЛица
импорт ВладельцыКабинетов
импорт ОбщиеСтандартные

// Контракт ОсновнойИнтерфейсПоставщик
@ВПроекте
@Реализация
метод РазделыПриложения(): ЧитаемаяКоллекция<ОсновнойИнтерфейс.ОписаниеРаздела>
    знч Разделы: Массив<ОсновнойИнтерфейс.ОписаниеРаздела>
    если ИспользованиеРазделаОтсутствия()
        Разделы.Добавить(ОписаниеРазделаОтсутствия())
    ;
    возврат Разделы
;

@ВПроекте
@Реализация
метод Виджеты(): ЧитаемаяКоллекция<ОсновнойИнтерфейс.ОписаниеВиджета>
    знч Виджеты: Массив<ОсновнойИнтерфейс.ОписаниеВиджета>
    если ИспользованиеРазделаОтсутствия()
        Виджеты.Добавить(ОписаниеВиджетаОтсутствия())
    ;
    возврат Виджеты
;

@ВПроекте
@Реализация
метод ДополнительныеКоманды(): ЧитаемыйМассив<Команда>
    возврат []
;

@ВПроекте
@Реализация
метод КомандыПанелиДействий(): ЧитаемыйМассив<Команда>
    возврат []
;

@ВПроекте
@Реализация
метод КомандыВсеФункции(): ЧитаемаяКоллекция<ОсновнойИнтерфейс.ОписательКомандыВсеФункции>
    знч Группа = новый ОсновнойИнтерфейс.ОписательГруппыКомандВсеФункции(Отсутствия.ИМЯ_РАЗДЕЛА_ОТСУТСТВИЯ, 4)
    возврат [
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Настройка видов отсутствий",
            СоздательФормыСписка = метод()-> возврат новый ВидыОтсутствийНастройка.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ВидыОтсутствийНастройка.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Дни дополнительного отдыха",
            СоздательФормыСписка = метод()-> возврат новый ДниДополнительногоОтдыха.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ДниДополнительногоОтдыха.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Заместители (Отсутствия)",
            СоздательФормыСписка = метод()-> возврат новый ОтсутствиеЗаместители.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ОтсутствиеЗаместители.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Уведомляемые (Отсутствия) (устарело)",
            СоздательФормыСписка = () -> новый ОтсутствиеУведомляемыеУстарело.АвтоматическаяФормаСписка(),
            СоздательФормыОбъекта = () -> новый ОтсутствиеУведомляемыеУстарело.АвтоматическаяФормаОбъекта()
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Отсутствие",
            СоздательФормыСписка = метод()-> возврат новый Отсутствие.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый Отсутствие.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Записи отсутствий",
            СоздательФормыСписка = метод()-> возврат новый ЗаписиОтсутствий.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ЗаписиОтсутствий.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Запланированные отсутствия",
            СоздательФормыСписка = метод()-> возврат новый ЗапланированныеОтсутствия.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ЗапланированныеОтсутствия.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Настройки отсутствий",
            СоздательФормыСписка = метод()-> возврат новый НастройкиОтсутствий.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый НастройкиОтсутствий.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Используемая функциональность (Отсутствия)",
            СоздательФормыСписка = метод()-> возврат новый ИспользуемаяФункциональность.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ИспользуемаяФункциональность.АвтоматическаяФормаОбъекта();
            )
    ]
;

@ВПроекте
@Реализация
метод ДополнительныеКомандыПанелиГлавное(): ЧитаемыйМассив<Команда>
    возврат []
;

// Конец ОсновнойИнтерфейсПоставщик

// Контракт PushУведомленияОбработчик
@ВПроекте 
@Реализация
метод ВыполнитьДействие(ДанныеPush: PushУведомления.ДанныеPush)
    выбор
    когда ДанныеPush.Ссылка это Отсутствие.Ссылка
        пер Заявление: Отсутствие.Ссылка = ДанныеPush.Ссылка как Отсутствие.Ссылка
        пер ДействиеPushУведомления: ВызовСервера.ДействиеPushУведомленияОбОтсутствии 
            = ВызовСервера.ДействиеPushУведомления(Заявление, ДанныеPush.Действие, ДанныеPush.Текст, Отсутствия.ВидСогласуемогоЗаявленияОтсутствие(), Криптография.ПараметрыСеанса().ПарольЗакрытогоКлючаПользователя)
        если ДействиеPushУведомления == ВызовСервера.ДействиеPushУведомленияОбОтсутствии.ОткрытьФормуДокумента
            ОтсутствиеФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = ДанныеPush.Ссылка как Отсутствие.Ссылка)
        ;
    ;
;
// Конец PushУведомленияОбработчик

// Контракт ДокументыСотрудниковПоставщик

@ВПроекте
@Реализация
метод КомандыСоздатьЗаявление(): ЧитаемыйМассив<ЭлементСпискаЗначений<Объект?>>
    пер СписокОтсутствий: Массив<ЭлементСпискаЗначений<Объект?>>
    для ВидОтсутствия из Отсутствия.СписокВидовОтсутствий()
        пер СтрокаСписка = новый ЭлементСпискаЗначений<Объект?>(
            Значение = ВидОтсутствия,
            Представление = ВидОтсутствия.Представление())
        
        СписокОтсутствий.Добавить(СтрокаСписка)
    ;
    возврат СписокОтсутствий    
;

@ВПроекте
@Реализация
метод КомпонентДокумента(Заявление: ДокументСотрудника.Ссылка): ДокументСотрудникаКомпонент?
    выбор Заявление
    когда это Отсутствие.Ссылка
        возврат новый ЗаявлениеОбОтсутствииКомпонент()
    иначе
        возврат Неопределено
    ;
;

@ВПроекте
@Реализация
метод ОткрытьЗаявлениеМодально(Заявление: ДокументСотрудника.Ссылка): СтандартныеФормы.ДействиеВФорме?
    если не (Заявление это Отсутствие.Ссылка)
        возврат Неопределено
    ;
    
    возврат ОтсутствиеФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = Заявление как Отсутствие.Ссылка)
;

@ВПроекте
@Реализация
метод ВыполнитьКомандуСоздать(Действие: ЭлементСпискаЗначений<Объект?>)
    если не (Действие.Значение это ВидыОтсутствий)
            или (Действие.Значение == ВидыОтсутствий.Отпуск или Действие.Значение == ВидыОтсутствий.ОтпускЗаСвойСчет) 
        возврат    
    ;
    ОтсутствиеФормаДокумента.ОткрытьВМодальномОкне(Причина = (Действие.Значение как ВидыОтсутствий))   
;

@ВПроекте
@Реализация
метод ПредставленияДокументов(): ЧитаемаяКоллекция<СостояниеДокументаКомпонентДанных>
    знч ФизЛицо = ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
    знч Состояния: Массив<СостоянияДокумента>
    возврат Отсутствия.ПредставленияЗаявленийФизлица(ФизЛицо, Состояния, Ложь)  
;

// Конец ДокументыСотрудниковПоставщик

// Контракт ДокументОтсутствия

@ВПроекте
@Реализация
метод Создать(ВидОтсутствия: ВидыОтсутствий): Булево
    знч ВидыОтсутствия = [
        ВидыОтсутствий.Болезнь,
        ВидыОтсутствий.Командировка,
        ВидыОтсутствий.ЛичныеОбстоятельства,
        ВидыОтсутствий.Опоздание,
        ВидыОтсутствий.Отгул,
        ВидыОтсутствий.ОтпускПоБеременностиИРодам,
        ВидыОтсутствий.ОтпускПоУходуЗаРебенком,
        ВидыОтсутствий.УходЗаРебенкомИнвалидом,
        ВидыОтсутствий.УчебныйОтпуск]
        
    если ВидыОтсутствия.Найти(ВидОтсутствия) != Неопределено
        ОтсутствиеФормаДокумента.ОткрытьВМодальномОкне(Причина = ВидОтсутствия)
        возврат Истина
    ;
    возврат Ложь
;

@ВПроекте
@Реализация
метод Компонент(Отсутствие: ОснованиеОтсутствия.Ссылка): Компонент?
    пер Компонент: ЗаявлениеОбОтсутствииКомпонент?
    если Отсутствие это Отсутствие.Ссылка
        Компонент = новый ЗаявлениеОбОтсутствииКомпонент()
        Компонент.УстановитьТекущееЗаявление(МенеджерСущности.ОбъектПоСсылке(Отсутствие))
        Компонент.РежимПросмотра = Истина
    ;
    возврат Компонент
;

@ВПроекте
@Реализация
метод Форма(Отсутствие: ОснованиеОтсутствия.Ссылка): Форма<неизвестно>?
    пер Форма: ОтсутствиеФормаДокумента?
    если Отсутствие это Отсутствие.Ссылка
        Форма = новый ОтсутствиеФормаДокумента(КлючОбъекта = Отсутствие как Отсутствие.Ссылка)
    ;
    возврат Форма
;

@ВПроекте
@Реализация
метод ДоступныеВидыОтсутствия(): ЧитаемыйМассив<ВидыОтсутствий>
    знч ДоступныеВидыОтсутствия: Массив<ВидыОтсутствий>
    пер ФункциональныеОпцииОтсутствия: Отсутствия.ФункциональныеОпции = Отсутствия.ПараметрыСеанса().ФункциональныеОпции
    пер ТекущееФизическоеЛицоПол: ПолФизическогоЛица = ВладельцыКабинетов.ПараметрыСеанса().Пол
    если ФункциональныеОпцииОтсутствия.Болезнь
        ДоступныеВидыОтсутствия.Добавить(ВидыОтсутствий.Болезнь)
    ;
    если ФункциональныеОпцииОтсутствия.Командировка
        ДоступныеВидыОтсутствия.Добавить(ВидыОтсутствий.Командировка)
    ;
    если ФункциональныеОпцииОтсутствия.ЛичныеОбстоятельства
        ДоступныеВидыОтсутствия.Добавить(ВидыОтсутствий.ЛичныеОбстоятельства)
    ;
    если ФункциональныеОпцииОтсутствия.Опоздание
        ДоступныеВидыОтсутствия.Добавить(ВидыОтсутствий.Опоздание)
    ;
    если ФункциональныеОпцииОтсутствия.Отгул
        ДоступныеВидыОтсутствия.Добавить(ВидыОтсутствий.Отгул)
    ;
    если ФункциональныеОпцииОтсутствия.ОтпускПоБеременностиИРодам и ТекущееФизическоеЛицоПол == ПолФизическогоЛица.Женский
        ДоступныеВидыОтсутствия.Добавить(ВидыОтсутствий.ОтпускПоБеременностиИРодам)
    ;
    если ФункциональныеОпцииОтсутствия.ОтпускПоУходуЗаРебенком
        ДоступныеВидыОтсутствия.Добавить(ВидыОтсутствий.ОтпускПоУходуЗаРебенком)
    ;
    если ФункциональныеОпцииОтсутствия.УходЗаРебенкомИнвалидом
        ДоступныеВидыОтсутствия.Добавить(ВидыОтсутствий.УходЗаРебенкомИнвалидом)
    ;
    если ФункциональныеОпцииОтсутствия.УчебныйОтпуск
        ДоступныеВидыОтсутствия.Добавить(ВидыОтсутствий.УчебныйОтпуск)
    ;
    возврат ДоступныеВидыОтсутствия
;

// Конец ДокументОтсутствия

метод ИспользованиеРазделаОтсутствия(): Булево
    возврат ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо != Неопределено и 
        (Компания.ПараметрыСеанса().ТекущийПользовательСотрудник
            или ВладельцыКабинетов.ПараметрыСеанса().ДнейДоОтключенияКабинета != Неопределено) и
        Отсутствия.ПараметрыСеанса().ФункциональныеОпции.ИнформацияОбОтсутствиях
;

метод ОписаниеРазделаОтсутствия(): ОсновнойИнтерфейс.ОписаниеРаздела
    возврат новый ОсновнойИнтерфейс.ОписаниеРаздела(
        Ид = Отсутствия.ИД_РАЗДЕЛА_ОТСУТСТВИЯ,
        Имя = Отсутствия.ИМЯ_РАЗДЕЛА_ОТСУТСТВИЯ,
        Пиктограмма = НавигацияОтсутствия.Изображение,
        ЦветПиктограммы = БиблиотекаЦветов.ВидыЦвета.Синий,
        НавигационнаяКомандаРаздела = НавигацияОтсутствия,
        ШиринаДляПанелиНавигации = 168)
;

метод ОписаниеВиджетаОтсутствия(): ОсновнойИнтерфейс.ОписаниеВиджета
    возврат новый ОсновнойИнтерфейс.ОписаниеВиджета(
        Ид = Отсутствия.ИД_РАЗДЕЛА_ОТСУТСТВИЯ,
        ИдРаздела = Отсутствия.ИД_РАЗДЕЛА_ОТСУТСТВИЯ,
        Имя = Отсутствия.ИМЯ_РАЗДЕЛА_ОТСУТСТВИЯ,
        Компонент = новый ОтсутствияВиджетСодержимое(),
        Команда = Отсутствия.СформироватьКомандыСоздания())
;
