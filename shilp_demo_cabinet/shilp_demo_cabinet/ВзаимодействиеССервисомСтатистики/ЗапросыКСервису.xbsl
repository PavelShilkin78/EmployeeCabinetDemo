импорт ВзаимодействиеСBearerСервером
импорт СтандартноеПриложение

@ВПроекте
исключение ИсключениеВыполненияЗапросаКСервису
    обз пер АдресРесурса: Строка
    обз пер КодСостояния: Число
    обз пер ТелоОтвета: Строка   
;

@ВПроекте
исключение ИсключениеРесурсСервсиаНеНайден
;

@ВПодсистеме
метод ВыполнитьЗапросОбновления(Ресурс: РесурсыСервисаСтатистики.ЛичныеКабинеты|
                                        РесурсыСервисаСтатистики.Справочники|
                                        РесурсыСервисаСтатистики.Документы|
                                        РесурсыСервисаСтатистики.РасчетныеЛистки|
                                        РесурсыСервисаСтатистики.Вложения|
                                        РесурсыСервисаСтатистики.ОшибкиПриложения, 
                                ТелоЗапроса: Строка,
                                ПараметрыДоступаКСервису: КлиентСервисаСтатистики.ПараметрыДоступаКСервису)
                                
    пер Запрос: ЗапросHttp = СоединениеHttp.Клиент().ЗапросPut(АдресЗапроса(ПараметрыДоступаКСервису.АдресСервера, ПараметрыДоступаКСервису.ИмяПриложения, Ресурс))
        .УстановитьЗаголовок("Content-Type", "application/json")
        .УстановитьТело(ТелоЗапроса)
    
    ВыполнитьЗапрос(Запрос, ПараметрыДоступаКСервису)
;

метод ВыполнитьЗапрос(Запрос: ЗапросHttp, ПараметрыДоступа: КлиентСервисаСтатистики.ПараметрыДоступаКСервису)
    пер ТелоОтвета: Строка
    пер КодСостояния: Число
    пер НомерПопытки = 0
    пер ВремяНачала: Момент = Момент.Сейчас()
    пер ПовторятьЗапрос = Истина
    пока ПовторятьЗапрос
        НомерПопытки += 1
        ПаузаПередЗапросом(НомерПопытки - 1)
        попытка 
            исп Ответ = КлиентBearerСервера.ВыполнитьЗапрос(
                Запрос, 
                новый КлиентBearerСервера.ПараметрыДоступаКСерверу(
                    ПараметрыДоступа.АдресСервера,
                    ПараметрыДоступа.ИдКлиента,
                    ПараметрыДоступа.СекретКлиента
                )
            )
            ТелоОтвета = Ответ.Тело.ПрочитатьКакСтроку()
            КодСостояния = Ответ.КодСостояния
        поймать Ошибка: Аутентификация.ИсключениеАутентификации
            если ПовторитьЗапрос(Ошибка, ВремяНачала)
                продолжить
            ;
            выбросить новый ЗапросыКСервису.ИсключениеВыполненияЗапросаКСервису(
                "Ошибка аутентификации при выполнении запроса к сервису статистики  по адресу \"%{Запрос.АбсолютныйUrl}\"",
                Запрос.АбсолютныйUrl,
                Ошибка.КодСостояния,
                Ошибка.ТелоОтвета,
                Ошибка
            )  
         поймать Ошибка: Аутентификация.СервисАутентификацииНедоступен
            если ПовторитьЗапрос(Ошибка, ВремяНачала)
                продолжить
            ;
            ПовторятьЗапрос = Ложь
            выбросить новый ЗапросыКСервису.ИсключениеВыполненияЗапросаКСервису(
                "Ошибка аутентификации при выполнении запроса к сервису статистики по адресу \"%{Запрос.АбсолютныйUrl}\"",
                Запрос.АбсолютныйUrl,
                Ошибка.КодСостояния,
                Ошибка.ТелоОтвета,
                Ошибка
            )  
        поймать Ошибка: Исключение
            если ПовторитьЗапрос(Ошибка, ВремяНачала)
                продолжить
            ;
            ПовторятьЗапрос = Ложь
            выбросить Ошибка
        ;         
        если КодСостояния == 200 или КодСостояния == 201
            возврат
        иначе если ПовторитьЗапрос(КодСостояния, ВремяНачала)
            продолжить
        иначе
            ПовторятьЗапрос = Ложь
            ВыброситьИсключениеВыполненияЗапроса(КодСостояния, ТелоОтвета, Запрос)
        ;
    ;  
;

метод ВыброситьИсключениеВыполненияЗапроса(КодСостояния: Число, ТелоОтвета: Строка, Запрос: ЗапросHttp)
    выбор КодСостояния
    когда 404
        выбросить новый ИсключениеРесурсСервсиаНеНайден(
            "Ресурс сервиса статистики по адресу \"%{Запрос.АбсолютныйUrl}\" не найден"   
        )
    иначе
        пер ТекстОшибки: Строка = 
            "Ошибка обращения к сервсиу статистики по адресу \"%{Запрос.АбсолютныйUrl}\" получен код состояния %{КодСостояния.ВСтроку()}"
        
        пер Исключение = новый ИсключениеВыполненияЗапросаКСервису(
            ТекстОшибки,
            Запрос.АбсолютныйUrl, 
            КодСостояния,
            ТелоОтвета
        )
        
        Журналирование.ЗарегистрироватьОшибку(Исключение)
        выбросить Исключение
    ;
;

метод ПовторитьЗапрос(Ошибка: Исключение, ВремяНачалаВыполнения: Момент): Булево
    если Ошибка это ИсключениеHttp или Ошибка это Аутентификация.СервисАутентификацииНедоступен
        возврат (Момент.Сейчас() - ВремяНачалаВыполнения <=  600с) 
    иначе
        возврат Ложь
    ;
;

метод ПовторитьЗапрос(КодОтвета: Число, ВремяНачалаВыполнения: Момент): Булево
    если КодОтвета == 404
        возврат (Момент.Сейчас() - ВремяНачалаВыполнения <= 600с) 
    иначе если КодОтвета == 500
        возврат (Момент.Сейчас() - ВремяНачалаВыполнения <= 60с)     
    иначе
        возврат Ложь
    ;
;

метод ПаузаПередЗапросом(КоличествоНеудачныхПопыток: Число)
    если КоличествоНеудачныхПопыток == 0
        возврат
    ;
    пер ДлительностьПаузыВМилисекундах = Мин(30000, 1000 * (1.4 ** КоличествоНеудачныхПопыток)).ЦелаяЧасть()
    Пауза(Длительность.ИзМиллисекунд(ДлительностьПаузыВМилисекундах))
;


метод АдресЗапроса(АдресСервера: Строка, 
                   ИмяПриложения: Строка,
                   Ресурс: РесурсыСервисаСтатистики.ЛичныеКабинеты|
                           РесурсыСервисаСтатистики.Справочники|
                           РесурсыСервисаСтатистики.Документы|
                           РесурсыСервисаСтатистики.РасчетныеЛистки|
                           РесурсыСервисаСтатистики.Вложения|
                           РесурсыСервисаСтатистики.ОшибкиПриложения): Строка
    
    возврат "%АдресСервера/applications/%ИмяПриложения/api%{РесурсыСервисаСтатистики.АдресРесурса(Ресурс)}/"
;