импорт КонтрольДоступа
импорт ИнтерфейсныеКомпонентыСтандартные
импорт ОбщиеСтандартные
импорт УниверсальныеМеханизмы
импорт ФизическиеЛица

структура УведомлениеПриЗаписи
    обз пер Заголовок: Строка
    обз пер Текст: Строка
;

@Обработчик
метод ПослеЧтения()
    Инициализировать()
;

метод Инициализировать()
    если ЭтоНовый()
        Объект.Статус = СтатусыОпросов.НеЗапущен
        ПериодПроведенияОпросаПоУмолчанию()
    иначе
        ЗаполнитьУчастников()
        Компоненты.ПредставлениеРежимаРедактирования.Инициализировать()
    ;
    
    ЗаполнитьПериодПроведения()
;

метод ПериодПроведенияОпросаПоУмолчанию()
    пер НачалоДня: Момент = МенеджерДат.НачалоДня(Момент.Сейчас())
    Объект.ДатаНачала = НачалоДня.ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий()).Дата
    Объект.ДатаОкончания = МенеджерДат.ДобавитьДни(НачалоДня, 14).ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий()).Дата
;

метод ЗаполнитьПериодПроведения()
    пер ДатаНачалаОпроса = Объект.ДатаНачала
    пер ДатаОкончанияОпроса = Объект.ДатаОкончания
    если ДатаОкончанияОпроса > ДатаНачалаОпроса
        ПериодПроведения = новый ЗакрытыйДиапазон<Дата>(ДатаНачалаОпроса, ДатаОкончанияОпроса)
    ;
;

метод ПериодПроведенияВДаты()
    Объект.ДатаНачала = ПериодПроведения == Неопределено ? Дата{} : ПериодПроведения.От
    Объект.ДатаОкончания = ПериодПроведения == Неопределено ? Дата{} : ПериодПроведения.До
;

метод ЗаполнитьУчастников()
    Участники.Очистить()
    если Объект.Статус == СтатусыОпросов.НеЗапущен или Объект.Статус == СтатусыОпросов.Запланирован
        для Участник из Объект.Участники
            Участники.Добавить(новый ДанныеУчастниковОпроса(Участник = Участник))
        ;
    иначе
        Участники = Анкетирование.ДанныеАнкетРеспондентов(Объект.Ссылка)
    ;   
;

метод УдалениеУчастника(Источник: Компонент, Событие: СобытиеСДанными<ФизическиеЛица.Ссылка>)
    Объект.Участники.Удалить(Событие.Данные)
    СтандартныеФормы.ПоказатьУведомление("Успешно!", "Участник был удалён из опроса")
    
    Записать()
;

метод СохранитьОпрос(Источник: Компонент, Событие: СобытиеСДанными<СтатусыОпросов>)
    если ИдетСохранение
        возврат
    ;
    ИдетСохранение = Истина
    пер ВсеУчастники: Массив<РеспондентАнкетирования.Ссылка>
    пер НовыеУчастники: Массив<РеспондентАнкетирования.Ссылка>
    
    для Участник из Участники
        если Участник.Анкета == Неопределено
            НовыеУчастники.Добавить(Участник.Участник)
        ;
        ВсеУчастники.Добавить(Участник.Участник)
    ;
    
    если ЭтоНовый()
        Объект.Автор = КонтрольДоступа.ПараметрыСеанса().ФизлицоТекущегоПользователя
    ;
    
    Объект.Участники.Очистить()
    Объект.Участники.ДобавитьВсе(ВсеУчастники)
    Объект.Статус = Событие.Данные
    
    ПериодПроведенияВДаты()
    СобственнаяМодифицированность = Ложь
    Записать()
    ЗаписанОпрос.Оповестить(Объект.Ссылка)
    выбор Событие.Данные
    когда Запущен
        если НовыеУчастники.Размер() > 0
            Анкетирование.СохранитьАнкетыОпроса(НовыеУчастники, Объект.Ссылка,  Объект.ШаблонАнкеты)
            СтандартныеФормы.ПоказатьУведомление("Успешно!", "Опрос запущен для выбранных респондентов")    
        ;
    Закрыть()
    когда Запланирован
        ЗапланироватьЗапускОпроса(НовыеУчастники,
            Объект.Ссылка,
            Объект.ШаблонАнкеты,
            Объект.ДатаНачала)
        СтандартныеФормы.ПоказатьУведомление("Успешно!", "Опрос будет запущен для выбранных респондентов в указанный период")
    Закрыть()   
    когда НеЗапущен
        если ЭтоНовый()
            СтандартныеФормы.ПоказатьУведомление("Черновик сохранен", "Вы можете продолжить его редактирование позже")
        ;
    ;
    Инициализировать()
    ИдетСохранение = Ложь
;

@НаСервере @ДоступноСКлиента
статический метод ЗапланироватьЗапускОпроса(Участники:  Массив<РеспондентАнкетирования.Ссылка>, Опрос: Опросы.Ссылка?, Шаблон: ШаблоныАнкет.Ссылка?, ДатаНачала: Дата)
    пер Ключ = МенеджерЗаданий.КлючЗаданияПоСсылке(Опрос, "ЗапускОпроса")
    знч РасписаниеЗапускаОпроса = Расписание.Однократно(ДатаНачала.НачалоДня().ВМомент(ЧасовойПояс.Текущий()), ИсполнятьПропущенное = Истина)
    
    если ЗапланированныеЗадания.ПолучитьПоКлючу(Ключ) == Неопределено
        ЗапланированныеЗадания
            .Создать(&ЗапуститьОпрос, Участники, Опрос, Шаблон)
            .Настроить( Ключ = Ключ, 
                    Расписание = РасписаниеЗапускаОпроса,
                    ПовторыПриОшибке = СтратегияПовтораЗадания.Интервал(60, Длительность.ИзСекунд(60)))
        .Запланировать()    
    ;
    
;

@НаСервере
статический метод ЗапуститьОпрос(Участники:  Массив<РеспондентАнкетирования.Ссылка>, Опрос: Опросы.Ссылка?, Шаблон: ШаблоныАнкет.Ссылка?)
    Анкетирование.СохранитьАнкетыОпроса(Участники, Опрос, Шаблон)
    пер ОпросОбъект = Опрос.ЗагрузитьОбъект()
    ОпросОбъект.Статус = СтатусыОпросов.Запущен
    ОпросОбъект.Записать()
;
