импорт ИнтерфейсныеКомпонентыСтандартные
импорт ОбщиеСтандартные
импорт ФизическиеЛица

@ВПодсистеме
@НаКлиенте
структура ДанныеДиаграммы
    пер ФорматКатегория: Строка
    пер Значение: Число
    пер ФорматЗначение: Строка
    пер Цвет: Цвет?
;

@ВПодсистеме
@НаКлиенте @НаСервере
структура СводныеПоказатели
    пер ЗавершилиОпрос:Число
    пер УчастниковВсего: Число
    пер ВопросыПоказатель: Строка
    пер УчастникиПоказатель: Строка
;

@ВПодсистеме
@НаКлиенте @НаСервере
структура ВопросОпроса
    обз пер Номер: Число
    обз пер Формулировка: Строка
    обз пер ТипОтвета: ТипыОтветов?
    обз пер Статистика: СтатистикаПоВопросам?
;

@ВПодсистеме
@НаКлиенте @НаСервере
структура СтатистикаПоВарианту
    обз пер Ответ: ПредопределенныеЗначенияОтветов.Ссылка
    обз пер ОтветовПоВарианту: Число
    обз пер ПроцентовПоВарианту: Число
;

@НаКлиенте @НаСервере
структура ЧисловаяСтатистика
    обз пер Минимум: Число
    обз пер Максимум: Число
;

@ВПодсистеме
@НаКлиенте @НаСервере
структура СтатистикаПоВопросам
    пер ОтветовНаВопрос: Число
    пер СтатистикаПоВариантам: Массив<СтатистикаПоВарианту>
    пер ЧисловаяСтатистика: ЧисловаяСтатистика?
;

@Обработчик
метод ПослеСоздания()
    СводныеПоказателиПоУмолчанию()
;

@ВПодсистеме
метод Инициализировать()
    если ОпросОбъект.Статус == СтатусыОпросов.Запущен или ОпросОбъект.Статус == СтатусыОпросов.Завершен
        СводныеПоказатели = СводныеПоказатели(ОпросОбъект.Ссылка, ОпросОбъект.ШаблонАнкеты)  
    ;
;

метод СводныеПоказателиПоУмолчанию()
    СводныеПоказатели = новый СводныеПоказатели(0, 100)
;

метод Данные(): Массив<ВопросОпроса>
    знч ДанныеСписка: Массив<ВопросОпроса>
    ДанныеСписка.ДобавитьВсе(ВопросыОпроса(ОпросОбъект.Ссылка, ОпросОбъект.ШаблонАнкеты))
    возврат ДанныеСписка
;

метод УчастникиУдалениеУчастника(Источник: ДанныеУчастниковКомпонент, Событие: СобытиеСДанными<ФизическиеЛица.Ссылка>)
    УдалениеУчастника(новый СобытиеСДанными(Событие.Данные))
;

метод АвторФамилияИмя(Автор: ФизическиеЛица.Ссылка?): Строка
    если Автор == Неопределено
        возврат "не указан"
    иначе
        возврат ФизЛица.ПредставлениеИмени(Автор, ФизЛица.ВариантПредставленияИмени.ФамилияИмя)
    ;
;

@НаСервере @ДоступноСКлиента
статический метод ВопросыОпроса(Опрос: Опросы.Ссылка, Шаблон: ШаблоныАнкет.Ссылка): Массив<ВопросОпроса>
    
    знч ЗапросАнкеты = Запрос{
        Выбрать
            Анкета как Анкета
        Из
            АнкетыОпроса
        Где
            Опрос == %Опрос
    }
    
    пер АнкетыОпроса: Массив<Анкеты.Ссылка>
        
    знч РезультатЗапросаАнкеты = новый ЧитаемыйМассив(ЗапросАнкеты.Выполнить())
    для РезультатСтрока из РезультатЗапросаАнкеты
        АнкетыОпроса.Добавить(РезультатСтрока.Анкета)
    ;
    
    пер СтатистикаПоВопросам: Соответствие<Вопросы.Ссылка, СтатистикаПоВопросам>
    СтатистикаПоВопросам.ВставитьВсе(СтатистикаПоОтветамСВариантами(Шаблон, АнкетыОпроса))
    СтатистикаПоВопросам.ВставитьВсе(СтатистикаПоОтветамПредопределенныхНаборов(АнкетыОпроса))
    СтатистикаПоВопросам.ВставитьВсе(СтатистикаПоЧисловымОтветам(АнкетыОпроса))
    СтатистикаПоВопросам.ВставитьВсе(СтатистикаПоПроизвольнымОтветам(АнкетыОпроса))
    
    пер ВопросыОпроса: Массив<ВопросОпроса>
    
    знч ЗапросВопросы = Запрос{
        Выбрать
            Приоритет,
            Вопрос как Вопрос,
            Вопрос.Формулировка.ЗаменитьNull("") как Формулировка,
            Вопрос.ТипОтвета.ЗаменитьNull(Неопределено) как ТипОтвета
        Из 
            ВопросыШаблоновАнкет
        Где Шаблон == %Шаблон
        Упорядочить По Приоритет
    }
    
    знч РезультатЗапроса = новый ЧитаемыйМассив(ЗапросВопросы.Выполнить())
    для РезультатСтрока из РезультатЗапроса
        
        ВопросыОпроса.Добавить(новый ВопросОпроса(РезультатСтрока.Приоритет,
                                                 РезультатСтрока.Формулировка, 
                                                 РезультатСтрока.ТипОтвета, 
                                                 СтатистикаПоВопросам.ПолучитьИлиУмолчание(РезультатСтрока.Вопрос)))    
    ;
    
    возврат ВопросыОпроса
    
;


@НаСервере
статический метод СтатистикаПоОтветамПредопределенныхНаборов(Анкеты: Массив<Анкеты.Ссылка>): Соответствие<Вопросы.Ссылка, СтатистикаПоВопросам>
    пер Статистика: Соответствие<Вопросы.Ссылка, СтатистикаПоВопросам>
    
    пер ТипыОтветов = [ТипыОтветов.ПредопределенныйВариантЕдиничный, ТипыОтветов.ПредопределенныйВариантМножественный]
    знч Запрос = Запрос{
        Выбрать 
            Максимум(Ссылка) как Ответ,
            Анкета,
            Вопрос
        Поместить ВтОтветПоРеспонденту
        Из Ответы
        Где Анкета В (%Анкеты) и Вопрос.ТипОтвета В (%ТипыОтветов) и Вопрос.ИспользоватьПредопределенныйНабор
        Сгруппировать По Анкета, Вопрос
        ;
        Выбрать 
            Количество(Ответ) как КоличествоОтветов,
            Вопрос
        Из ВтОтветПоРеспонденту
        Сгруппировать По Вопрос
        
    }
    
    знч РезультатЗапроса = Запрос.Выполнить()
    
    для РезультатСтрока из РезультатЗапроса
        Статистика.Вставить(РезультатСтрока.Вопрос, новый СтатистикаПоВопросам(РезультатСтрока.КоличествоОтветов))
    ;

    возврат Статистика
;


@НаСервере
статический метод СтатистикаПоЧисловымОтветам(Анкеты: Массив<Анкеты.Ссылка>): Соответствие<Вопросы.Ссылка, СтатистикаПоВопросам>
    пер Статистика: Соответствие<Вопросы.Ссылка, СтатистикаПоВопросам>
    
    знч Запрос = Запрос{
        Выбрать 
            Максимум(Ссылка) как Ответ,
            Анкета,
            Вопрос
        Поместить ВтОтветПоРеспонденту
        Из Ответы
        Где Анкета В (%Анкеты) и Вопрос.ТипОтвета == ТипыОтветов.Число и ЗначениеЧисло != Неопределено
        Сгруппировать По Анкета, Вопрос
        ;
        Выбрать 
            Максимум(Ответ.ЗначениеЧисло).ЗаменитьNull(0) как МаксимальныйОтвет,
            Минимум(Ответ.ЗначениеЧисло).ЗаменитьNull(0) как МинимальныйОтвет,
            Количество(Ответ.ЗначениеЧисло).ЗаменитьNull(0) как КоличествоОтветов,
            Вопрос
        Из ВтОтветПоРеспонденту
        Сгруппировать По Вопрос
    }
    
    исп РезультатЗапроса = Запрос.Выполнить()

    для РезультатСтрока из РезультатЗапроса
        пер СтатистикаПоВопросам = новый СтатистикаПоВопросам()
        СтатистикаПоВопросам.ОтветовНаВопрос = РезультатСтрока.КоличествоОтветов
        СтатистикаПоВопросам.ЧисловаяСтатистика = новый ЧисловаяСтатистика(РезультатСтрока.МинимальныйОтвет, РезультатСтрока.МаксимальныйОтвет)
        Статистика.Вставить(РезультатСтрока.Вопрос, СтатистикаПоВопросам)
    ;
    
    возврат Статистика
;

@НаСервере
статический метод СтатистикаПоПроизвольнымОтветам(Анкеты: Массив<Анкеты.Ссылка>): Соответствие<Вопросы.Ссылка, СтатистикаПоВопросам>
    пер Статистика: Соответствие<Вопросы.Ссылка, СтатистикаПоВопросам>
    
    пер ИсключаемыеТипыОтветов = [ТипыОтветов.Число, ТипыОтветов.ПредопределенныйВариантЕдиничный, ТипыОтветов.ПредопределенныйВариантМножественный]
    знч Запрос = Запрос{
        Выбрать 
            Максимум(Ссылка) как Ответ,
            Анкета,
            Вопрос
        Поместить ВтОтветПоРеспонденту
        Из Ответы
        Где Анкета В (%Анкеты) и не Вопрос.ТипОтвета В (%ИсключаемыеТипыОтветов) 
        Сгруппировать По Анкета, Вопрос
        ;
        Выбрать 
            Количество(Ответ) как КоличествоОтветов,
            Вопрос
        Из ВтОтветПоРеспонденту
        Сгруппировать По Вопрос
        
    }
    
    знч РезультатЗапроса = Запрос.Выполнить()
    
    для РезультатСтрока из РезультатЗапроса
        Статистика.Вставить(РезультатСтрока.Вопрос, новый СтатистикаПоВопросам(РезультатСтрока.КоличествоОтветов))
    ;

    возврат Статистика
;

@НаСервере
статический метод СтатистикаПоОтветамСВариантами(Шаблон: ШаблоныАнкет.Ссылка, Анкеты: Массив<Анкеты.Ссылка>): Соответствие<Вопросы.Ссылка, СтатистикаПоВопросам>
    
    пер Статистика: Соответствие<Вопросы.Ссылка, СтатистикаПоВопросам>
    пер ТипыОтветов = [ТипыОтветов.ПредопределенныйВариантЕдиничный, ТипыОтветов.ПредопределенныйВариантМножественный]
    
    знч ЗапросУникальныеОтветы = Запрос{
        Выбрать 
            Максимум(Ссылка) как Ответ,
            Анкета,
            Вопрос
        Поместить ВтОтветПоРеспонденту
        Из Ответы
        Где Анкета В (%Анкеты) и Вопрос.ТипОтвета В (%ТипыОтветов) 
        Сгруппировать По Анкета, Вопрос
        ;
        Выбрать 
            Количество(Ответ) как КоличествоОтветов,
            Вопрос
        Из ВтОтветПоРеспонденту
        Сгруппировать По Вопрос
        
    }
    
    знч РезультатЗапросаУникальныеОтветы = ЗапросУникальныеОтветы.Выполнить()
    пер УникальныеОтветыПоВопросу: Соответствие<Вопросы.Ссылка, Число>
    
    для РезультатСтрока из РезультатЗапросаУникальныеОтветы
        УникальныеОтветыПоВопросу.Вставить(РезультатСтрока.Вопрос, РезультатСтрока.КоличествоОтветов)
    ;
    
    знч Запрос = Запрос{
        Выбрать
            Владелец.Вопрос.ЗаменитьNull(Неопределено) как Вопрос,
            Элемент как Ответ,
            Количество(Элемент) как КоличествоОтветов
        Поместить ВТСгруппированныеОтветы
        Из
            Ответы.ЗначенияПредопределенные
        Где
            Владелец.Анкета В (%Анкеты)
        Сгруппировать по Владелец.Вопрос, Элемент
        ;
        Выбрать
            Вопрос как Вопрос,
            Вопрос.НаборВариантов как НаборВариантов
        Поместить ВТНаборы
        Из
            ВопросыШаблоновАнкет
        Где
            Шаблон == %Шаблон и Вопрос.НаборВариантов != Неопределено
        ;
        Выбрать
            Ссылка как Вариант,
            Наборы.Вопрос как Вопрос
        Поместить ВТВсеВарианты
        Из
            ВариантыОтветов как ВариантыОтветов
            Внутреннее Соединение ВТНаборы как Наборы
                По ВариантыОтветов.НаборВариантовОтвета == Наборы.НаборВариантов
        ;
        Выбрать
            ВсеВарианты.Вопрос как Вопрос,
            ВсеВарианты.Вариант как Ответ,
            СгруппированныеОтветы.КоличествоОтветов.ЗаменитьNull(0) как КоличествоОтветов
        Из
            ВТВсеВарианты как ВсеВарианты
            Левое Соединение ВТСгруппированныеОтветы как СгруппированныеОтветы
                По ВсеВарианты.Вариант == СгруппированныеОтветы.Ответ
            
    }
    
    пер ПредварительнаяСтатистика: Соответствие<Вопросы.Ссылка, Массив<СтатистикаПоВарианту>>
    знч РезультатЗапроса = Запрос.Выполнить()
    для РезультатСтрока из РезультатЗапроса
        если ПредварительнаяСтатистика.СодержитКлюч(РезультатСтрока.Вопрос)
            ПредварительнаяСтатистика.Получить(РезультатСтрока.Вопрос).Добавить(новый СтатистикаПоВарианту(РезультатСтрока.Ответ, РезультатСтрока.КоличествоОтветов, 0))  
        иначе
            ПредварительнаяСтатистика.Вставить(РезультатСтрока.Вопрос, [новый СтатистикаПоВарианту(РезультатСтрока.Ответ, РезультатСтрока.КоличествоОтветов, 0)])    
        ;
    ;
    
    для КлючЗначение из ПредварительнаяСтатистика
        пер СуммаОтветовПоВарианту = 0
        для СтатистикаПоВарианту из КлючЗначение.Значение
            СуммаОтветовПоВарианту += СтатистикаПоВарианту.ОтветовПоВарианту        
        ;
        
        если СуммаОтветовПоВарианту > 0
            для СтатистикаПоВарианту из КлючЗначение.Значение
                СтатистикаПоВарианту.ПроцентовПоВарианту = (СтатистикаПоВарианту.ОтветовПоВарианту / СуммаОтветовПоВарианту * 100).Округлить()
            ;    
        ;
        
        Статистика.Вставить(КлючЗначение.Ключ, новый СтатистикаПоВопросам(УникальныеОтветыПоВопросу.ПолучитьИлиУмолчание(КлючЗначение.Ключ, 0), КлючЗначение.Значение))
    ;

    
    возврат Статистика
;

@НаСервере @ДоступноСКлиента
статический метод СводныеПоказатели(Опрос: Опросы.Ссылка, Шаблон: ШаблоныАнкет.Ссылка): СводныеПоказатели
    пер СводныеПоказатели: СводныеПоказатели
    
    знч Запрос = Запрос{
        Выбрать
            Анкета как Анкета,
            Анкета.Статус как Статус
        Из
            АнкетыОпроса
        Где
            Опрос == %Опрос
        ;
    }
    
    пер КоличествоУчастников: Число
    пер ЗавершилиОпрос: Число
    
    знч РезультатЗапроса = Запрос.Выполнить()
    
    для РезультатСтрока из РезультатЗапроса
        КоличествоУчастников +=1
        если РезультатСтрока.Статус == СтатусыАнкет.Заполнена
            ЗавершилиОпрос +=1
        ; 
    ;
    СводныеПоказатели.ЗавершилиОпрос = ЗавершилиОпрос
    СводныеПоказатели.УчастниковВсего = КоличествоУчастников
    
    пер КоличествоВопросов = МенеджерСущности.ЗначениеРеквизитаОбъекта(Шаблон, "КоличествоВопросов")
    если КоличествоВопросов == 0
        СводныеПоказатели.ВопросыПоказатель = "-"
    иначе
        СводныеПоказатели.ВопросыПоказатель = КоличествоВопросов.ВСтроку()
    ;
    если КоличествоУчастников == 0
        СводныеПоказатели.УчастникиПоказатель = "-"
    иначе
        СводныеПоказатели.УчастникиПоказатель = КоличествоУчастников.ВСтроку()
    ;
    
    возврат СводныеПоказатели
;

метод СостояниеЦветФона(Статус: СтатусыАнкет): Цвет | Авто
    возврат БиблиотекаЦветов.Цвет(Анкетирование.ВидЦветаПоСостояниюАнкеты(Статус))
;

метод ОсновнаяТаблицаДанные(): Массив<Объект>
    знч ОсновнаяТаблицаДанные: Массив<Объект>
    пер ДанныеАнкетРеспондентов = Анкетирование.ДанныеАнкетРеспондентов(ОпросОбъект.Ссылка)
    для ДанныеАнкеты из ДанныеАнкетРеспондентов
        ОсновнаяТаблицаДанные.Добавить(ДанныеАнкеты)
    ;
    возврат ОсновнаяТаблицаДанные    
;

метод ИзменилсяСоставУчастников(Источник: ДанныеУчастниковКомпонент, Событие: неизвестно)
    
    знч Статус = ОпросОбъект.Статус
    СохранитьОпрос(новый СобытиеСДанными(Статус))
    Инициализировать()
;

метод СтатусПриИзменении(Источник: ВыборСтатусаОпроса, Событие: СобытиеПриИзменении<СтатусыОпросов>)
    
    пер ТекстВопроса: Строка
    
    выбор Событие.НовоеЗначение
    когда Запущен
        ТекстВопроса = "Опрос будет запущен. Продолжить?"
    когда Завершен
        ТекстВопроса = "Вы уверены, что хотите завершить опрос?"
    иначе
        ТекстВопроса = "Статус опроса будет изменён. Продолжить?"
    ;
    
    знч Ответ = ЗапросДействия.ОткрытьВМодальномОкне(ОжидатьЗакрытия = Истина, Текст = ТекстВопроса)
    если Ответ != КнопкиМодальныхДиалогов.Да
        возврат
    ;
    
    ОпросОбъект.Статус = Событие.НовоеЗначение
    СохранитьОпрос(новый СобытиеСДанными(ОпросОбъект.Статус))
;

метод ОписаниеПриИзменении(Источник: ПолеВвода<Строка>, Событие: СобытиеПриИзменении<Строка>)
    СохранитьОпрос(новый СобытиеСДанными(ОпросОбъект.Статус))
;

метод ПериодПроведенияПриИзменении(Источник: ПолеВвода<ЗакрытыйДиапазон<Дата>?>, Событие: СобытиеПриИзменении<ЗакрытыйДиапазон<Дата>?>)
    СохранитьОпрос(новый СобытиеСДанными(ОпросОбъект.Статус))
;

метод СкачатьПриНажатии(Источник: КомпонентВыбора, Событие: СобытиеПриНажатии)
    
    знч ФайлВыгрузки = СформироватьФайлВыгрузки(ОпросОбъект)
    знч ПредставлениеОпроса = ОпросОбъект.Наименование
    ВыгрузкаФайлов.НачатьВыгрузку(ФайлВыгрузки, "%ПредставлениеОпроса.xls") 
;

@НаСервере @ДоступноСКлиента
статический метод СформироватьФайлВыгрузки(ОпросОбъект: Опросы.Объект): ДвоичныйОбъект.Ссылка

    знч ТабличныйДокумент = ЗаполнитьТабличныйДокумент(ОпросОбъект)
    возврат ВыгрузитьВФормате(ТабличныйДокумент, ФорматЭкспортаТабличногоДокумента.Xls)
    
;

@НаСервере
структура ОбластиМакета
    обз знч Заголовок: ОбластьТабличногоДокумента
    обз знч Шапка: ОбластьТабличногоДокумента
    обз знч ШапкаТаблицы: ОбластьТабличногоДокумента
    обз знч СтрокаТаблицы: ОбластьТабличногоДокумента
    обз знч НаименованиеВопроса: ОбластьТабличногоДокумента
    обз знч ОтветНаВопрос: ОбластьТабличногоДокумента
;

@НаСервере
статический метод ЗаполнитьТабличныйДокумент(ОпросОбъект: Опросы.Объект): ТабличныйДокумент

    знч Макет = МенеджерТабличныхДокументов.ИзРесурса(Ресурс{Макеты/МакетОпросов.mxl})
    знч ОбластиМакета = ОбластиМакета(Макет)
    
    пер ТабличныйДокумент = новый ТабличныйДокумент()
    пер Писатель = ТабличныйДокумент.Запись
    Писатель.ВывестиВертикально(ОбластиМакета.Заголовок.ВВыводимуюОбласть().ЗаполнитьПараметры({"ДатаВыгрузки": Дата.Сейчас().Представление()}))
    Писатель.ВывестиВертикально(ОбластиМакета.Шапка.ВВыводимуюОбласть().ЗаполнитьПараметры({"НаименованиеОпроса": ОпросОбъект.Наименование}))
    Писатель.ВывестиВертикально(ОбластиМакета.ШапкаТаблицы)
    
    знч СписокВопросов = СписокВопросов(ОпросОбъект.ШаблонАнкеты)
    для Вопрос из СписокВопросов
        пер ОбластьНаименования = ОбластиМакета.НаименованиеВопроса.ВВыводимуюОбласть().ЗаполнитьПараметры({"НаименованиеВопроса": Вопрос.Формулировка})
        Писатель.ВывестиГоризонтально(ОбластьНаименования)
    ;

    знч СписокАнкет = СписокАнкет(ОпросОбъект)
    знч ОтветыАнкеты = ОтветыАнкеты(СписокАнкет)
    знч ПредставленияСтатусов = Анкетирование.ПредставленияСтатусовОпросныхАнкет()
    для Анкета из СписокАнкет
        пер ОбластьСтроки = ОбластиМакета.СтрокаТаблицы.ВВыводимуюОбласть()
        ОбластьСтроки.ЗаполнитьПараметры({"Респондент": Анкета.Респондент.Представление()})
        ОбластьСтроки.ЗаполнитьПараметры({"Статус":     ПредставленияСтатусов.Получить(Анкета.Статус)})
        ОбластьСтроки.ЗаполнитьПараметры({"ДатаИзменения": МенеджерДат.ФорматМомента(Анкета.ДатаРедактирования, "дд.ММ.гггг")})
        
        Писатель.ВывестиВертикально(ОбластьСтроки)
        
        если ОтветыАнкеты.СодержитКлюч(Анкета.Анкета)
            знч ОтветыНаВопросы = ОтветыАнкеты.Получить(Анкета.Анкета)
            для Вопрос из СписокВопросов
                знч ЗначенияОтвета = ОтветыНаВопросы.ПолучитьИлиУмолчание(Вопрос.Вопрос)
                пер ПредставлениеОтвета: Строка
                если ЗначенияОтвета == Неопределено
                    ПредставлениеОтвета = ""
                иначе
                    ПредставлениеОтвета = ЗаполнитьПредставление(Вопрос.ТипОтвета, ЗначенияОтвета)
                ;
                Писатель.ВывестиГоризонтально(ОбластиМакета.ОтветНаВопрос.ВВыводимуюОбласть().ЗаполнитьПараметры({"ОтветНаВопрос": ПредставлениеОтвета}))
            ;
        ;
    ;
    
    возврат ТабличныйДокумент
;

@НаСервере
статический метод ОтветыАнкеты(ДанныеАнкет: Массив<ДанныеОпроснойАнкеты>): Соответствие<Анкеты.Ссылка, Соответствие<Вопросы.Ссылка?, ЗначенияОтвета>>
    
    пер ОтветыАнкеты: Соответствие<Анкеты.Ссылка, Соответствие<Вопросы.Ссылка?, ЗначенияОтвета>>
    пер Анкеты = ДанныеАнкет.Преобразовать(Элемент -> Элемент.Анкета)
   
    знч Запрос = Запрос{
        Выбрать
            Анкета,
            Вопрос,
            ЗначениеСтрока,
            ЗначениеЧисло,
            ЗначениеДата,
            ПредставлениеПредопределенныхОтветов,
            ЗначениеФайл
        Породить ЗначенияОтвета
        Из
            Ответы
        Где
            Анкета В (%Анкеты)
    }
    
    исп КонтекстДоступа.Привилегированный()
    исп РезультатЗапроса = Запрос.Выполнить()
    знч РезультатЗапросаСтроки = новый ЧитаемыйМассив(РезультатЗапроса)
    
    для Анкета из Анкеты
        для СтрокаРезультата из РезультатЗапросаСтроки
            
            если СтрокаРезультата.Анкета == Анкета
                если ОтветыАнкеты.СодержитКлюч(Анкета)
                    ОтветыАнкеты.Получить(Анкета).ВставитьЕслиОтсутствует(СтрокаРезультата.Вопрос, СтрокаРезультата)
                иначе
                    ОтветыАнкеты.Вставить(Анкета, {СтрокаРезультата.Вопрос:СтрокаРезультата})
                ;
            ;
        ;
    ;
    
    возврат ОтветыАнкеты
    
;

@НаСервере
статический метод ЗаполнитьПредставление(ТипОтвета:ТипыОтветов?, ЗначенияОтвета: ЗначенияОтвета): Строка
    пер ПредставлениеОтвета: Строка
    
    если ТипОтвета == Неопределено
        возврат ПредставлениеОтвета
    ;
    
    выбор ТипОтвета
    когда Строка
        ПредставлениеОтвета = ЗначенияОтвета.ЗначениеСтрока
    когда Число
        ПредставлениеОтвета = ЗначенияОтвета.ЗначениеЧисло?.ВСтроку() ?? ""
    когда Дата
        ПредставлениеОтвета = ЗначенияОтвета.ЗначениеДата.Представление()
    когда ПредопределенныйВариантЕдиничный, ПредопределенныйВариантМножественный
        ПредставлениеОтвета = ЗначенияОтвета.ПредставлениеПредопределенныхОтветов
    когда Файл
        ПредставлениеОтвета = "файл"
    ;
    
    возврат ПредставлениеОтвета
;

@НаСервере
статический метод СписокВопросов(Шаблон: ШаблоныАнкет.Ссылка): Массив<ОсновныеДанныеВопроса>
    пер СписокВопросов: Массив<ОсновныеДанныеВопроса>
    
    знч Запрос = Запрос{
        Выбрать
            Вопрос,
            Вопрос.Формулировка.ЗаменитьNull("") как Формулировка,
            Вопрос.ТипОтвета.ЗаменитьNull(Неопределено) как ТипОтвета,
            Приоритет
        Поместить втВопросыШаблона
        Из
            ВопросыШаблоновАнкет
        Где
            Шаблон == %Шаблон;
        Выбрать
            Вопросы.Ссылка как Вопрос,
            Вопросы.Формулировка как Формулировка,
            Вопросы.ТипОтвета как ТипОтвета,
            (ВопросыШаблона.Приоритет + 0.1) как Приоритет
        Поместить втПодвопросы
        Из
            Вопросы как Вопросы
            Внутреннее Соединение втВопросыШаблона как ВопросыШаблона
                По Вопросы.СоставнойВопрос == ВопросыШаблона.Вопрос;
        Выбрать 
            Вопрос,
            Формулировка,
            ТипОтвета,
            Приоритет
        Породить ОсновныеДанныеВопроса
        Из втВопросыШаблона
        
        Объединить
        
        Выбрать 
            Вопрос,
            Формулировка,
            ТипОтвета,
            Приоритет
        Из втПодвопросы    
    }
    
    исп КонтекстДоступа.Привилегированный()
    исп РезультатЗапроса = Запрос.Выполнить()
    для СтрокаРезультата из РезультатЗапроса
        СписокВопросов.Добавить(СтрокаРезультата)
    ;
    
    СписокВопросов = СписокВопросов.СортироватьПо(Элемент -> Элемент.Приоритет, НаправлениеСортировки.ПоВозрастанию)
    возврат СписокВопросов
;

@НаСервере
статический метод СписокАнкет(ОпросОбъект: Опросы.Объект): Массив<ДанныеОпроснойАнкеты>
    пер СписокРеспондентов: Массив<ДанныеОпроснойАнкеты>
    знч Опрос = ОпросОбъект.Ссылка
    
    знч Запрос = Запрос{
        Выбрать
            Анкета как Анкета,
            Анкета.Статус.ЗаменитьNull(Неопределено) как Статус,
            Анкета.Респондент.ЗаменитьNull(Неопределено) как Респондент,
            Анкета.ДатаПоследнегоРедактирования.ЗаменитьNull(Неопределено) как ДатаРедактирования
        Породить ДанныеОпроснойАнкеты
        Из
            АнкетыОпроса
        Где
            Опрос == %Опрос
    }
    
    исп КонтекстДоступа.Привилегированный()
    исп РезультатЗапроса = Запрос.Выполнить()
     для СтрокаРезультата из РезультатЗапроса
        СписокРеспондентов.Добавить(СтрокаРезультата)
    ;
    
    возврат СписокРеспондентов
;

@НаСервере
статический метод ОбластиМакета(Макет: ТабличныйДокумент): ОбластиМакета

    возврат новый ОбластиМакета(
        Макет.ПолучитьОбласть("Заголовок"),
        Макет.ПолучитьОбласть("Шапка"),
        Макет.ПолучитьОбласть("ШапкаТаблицы"),
        Макет.ПолучитьОбласть("СтрокаТаблицы"),
        Макет.ПолучитьОбласть("НаименованиеВопроса"),
        Макет.ПолучитьОбласть("ОтветНаВопрос")
    )
;

@НаСервере
статический метод ВыгрузитьВФормате(ТабличныйДокумент: ТабличныйДокумент, Формат: ФорматЭкспортаТабличногоДокумента): ДвоичныйОбъект.Ссылка
    пер БайтыТаблицы = ТабличныйДокумент.ЭкспортироватьВБайты(ФорматЭкспортаТабличногоДокумента.Xls)
    пер СвойстваДвоичногоОбъекта = новый ДвоичныйОбъект.Свойства("ВыгрузкаОпроса")
        .Временные()
    знч Результат = ОбъектноеХранилище.ЗагрузитьИзБайт(Байты = БайтыТаблицы, Свойства = СвойстваДвоичногоОбъекта)
    возврат Результат.Ссылка
;