импорт СтандартноеПриложение
импорт ИнтерфейсныеКомпонентыСтандартные
импорт ЛичныеКабинетыПользователей

@ВПроекте
@НаКлиенте
структура ИсторияИдентификаторов
    пер Вопросы: Соответствие<Ууид, Ууид>
    пер Разделы: Соответствие<Ууид, Ууид>
    пер Варианты: Соответствие<Ууид, Ууид>
;

@Обработчик
метод ПослеСоздания()
    
    ИзмененТекущийРазделАнкеты.ПодключитьОбработчик((метод (НовыйТекущийРаздел) ->
        ТекущийРаздел = НовыйТекущийРаздел
        ТекущийНомерРаздела = НовыйТекущийРаздел.Приоритет
        ОбновитьОтображениеЭлементовКонструктора()
    ;))
    
    УдаленКомпонентКонструктора.ПодключитьОбработчик((метод (ЭлементКонструктора) ->
        ДанныеКонструктора.Удалить(ЭлементКонструктора)
        ОбновитьОтображениеЭлементовКонструктора() 
    ;))
    
    СкопированКомпонентКонструктора.ПодключитьОбработчик((метод (ДанныеСтроки) ->
        КопироватьКомпонент(ДанныеСтроки) 
    ;))
    
    ПеремещенВопрос.ПодключитьОбработчик((метод (ИдСоставногоВопроса, ПараметрыПеремещения) ->
        если ИдСоставногоВопроса != Неопределено
            возврат
        ;
        ПереместитьКомпонент(ПараметрыПеремещения)
    ;))
    
    ВыбраныГотовыеВопросы.ПодключитьОбработчик((метод (ВыбранныеВопросы) ->
        для ВыбранныйВопрос из ВыбранныеВопросы
            ДобавитьКомпонент(ВыбранныйВопрос)    
        ;  
    ;))
     
;

метод ВидыОтветовПриВыбореВида(Источник: ВидыОтветовКомпонент, Событие: ИнструментыКонструктора)
    если Событие == ИнструментыКонструктора.ГотовыеВопросы
            ФормаГотовыеВопросы.ОткрытьВМодальномОкне(ИдОбластиДанных = ШаблонОбъект.ИдОбластиДанных, ИспользуютсяПоставляемыеВопросы = ШаблонОбъект.СохранятьВопросыВПодсистему)
    иначе    
        ДобавитьКомпонент(Событие)
    ;
;

метод ДобавитьКомпонент(Данные: ИнструментыКонструктора|ДанныеВопроса)
    
    ВключенРежимРедактирования.Оповестить([])
       
    пер ЭлементКонструктора: ДанныеЭлементаКонструктора
    если Данные это ИнструментыКонструктора
        ЭлементКонструктора = ЭлементКонструктораПоТипуДанных(Данные)
    иначе если Данные это ДанныеВопроса
        ЭлементКонструктора = Анкетирование.ЗаполнитьЭлементКонструктораДанными(Данные как ДанныеВопроса, 
                                ТекущийРаздел.ИдРаздела, 
                                ТекущийРаздел.Приоритет)
    ;
    
    ДанныеКонструктора.Добавить(ЭлементКонструктора)
    ОбновитьОтображениеЭлементовКонструктора()
          
;

метод РазделыАнкетыДанные(): Массив<ДанныеРаздела>
    знч Данные: Массив<ДанныеРаздела>
    Данные.ДобавитьВсе(Разделы)
    возврат Данные
;

@ВПроекте
метод Инициализировать()
    
    если КопируемыйШаблон != Неопределено
        ИнициализироватьПоКопируемомуШаблону(КопируемыйШаблон!)
        возврат
    ;
    
    если ШаблонОбъект.ЭтоНовый()
        ШаблонОбъект.Автор = ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
        ДобавитьРаздел()
        ОбновитьРазделы()
        ЗаполнитьСписокОбластейДанных()
        
        возврат
    ;
    
    Разделы = Анкетирование.РазделыШаблона(ШаблонОбъект.Ссылка)
    если Разделы.Размер() > 0
        ИзмененТекущийРазделАнкеты.Оповестить(Разделы[0])
    ;
    
    ПрочитатьВопросыШаблона(ШаблонОбъект.Ссылка, Истина)
    ЗаполнитьСписокОбластейДанных() 
    ОбновитьРазделы()
    ОбновитьОтображениеЭлементовКонструктора() 
;



@ВПроекте
метод Инициализировать(ШаблонСущность: ШаблоныАнкет.Ссылка)
    
    Шаблон = ШаблонСущность
    ШаблонОбъект = ШаблонОбъект(ШаблонСущность)
    
    Разделы = Анкетирование.РазделыШаблона(ШаблонОбъект.Ссылка)
    если Разделы.Размер() > 0
        ИзмененТекущийРазделАнкеты.Оповестить(Разделы[0])
    ;
    ПрочитатьВопросыШаблона(Шаблон, Истина)
    
    ЗаполнитьСписокОбластейДанных() 
    ОбновитьРазделы()
    ОбновитьОтображениеЭлементовКонструктора() 
;

@НаСервере @ДоступноСКлиента
статический метод ШаблонОбъект(ШаблонСущность: ШаблоныАнкет.Ссылка):  ШаблоныАнкет.Объект
    пер ШаблонОбъект = ШаблонСущность.ЗагрузитьОбъект() ?? новый ШаблоныАнкет.Объект()
    возврат ШаблонОбъект
;

метод ИнициализироватьПоКопируемомуШаблону(КопируемыйШаблон: ШаблоныАнкет.Ссылка)
    
    ШаблонОбъект.Автор = ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
    пер ДанныеШаблона = ДанныеКопируемогоШаблона(КопируемыйШаблон)
    ШаблонОбъект.Наименование = ДанныеШаблона.Наименование
    
    ШаблонОбъект.Приветствие = ДанныеШаблона.ОтображатьПриветствие
    ШаблонОбъект.ЗаголовокПриветствия = ДанныеШаблона.ЗаголовокПриветствия
    ШаблонОбъект.ТекстПриветствия = ДанныеШаблона.ТекстПриветствия
    ШаблонОбъект.КартинкаПриветствия = ДанныеШаблона.КартинкаПриветствия
    
    ШаблонОбъект.Завершение = ДанныеШаблона.ОтображатьЗавершение
    ШаблонОбъект.ЗаголовокЗавершения = ДанныеШаблона.ЗаголовокЗавершения
    ШаблонОбъект.ТекстЗавершения = ДанныеШаблона.ТекстЗавершения
    ШаблонОбъект.КартинкаЗавершения = ДанныеШаблона.КартинкаЗавершения
    
    ШаблонОбъект.СпособОтображенияАнкеты = ДанныеШаблона.СпособОтображенияАнкеты
    ШаблонОбъект.ЗапретПовторныхОтветов = ДанныеШаблона.ЗапретПовторныхОтветов
    
    Разделы = Анкетирование.РазделыШаблона(КопируемыйШаблон)
    если Разделы.Размер() > 0
        ИзмененТекущийРазделАнкеты.Оповестить(Разделы[0])
    ;
    ПрочитатьВопросыШаблона(КопируемыйШаблон, Истина)
    СформироватьНовыеУуид()
     
    ЗаполнитьСписокОбластейДанных()    
    ОбновитьРазделы()
    ОбновитьОтображениеЭлементовКонструктора()
;

@ВПроекте
метод Инициализировать(ШаблонСущность: ШаблоныАнкет.Объект, КопируемыйШаблон: ШаблоныАнкет.Ссылка?)
    
    Шаблон = ШаблонСущность.Ссылка
    ШаблонОбъект = ШаблонСущность

    ШаблонОбъект.Автор = ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
    если КопируемыйШаблон != Неопределено
        
        пер ДанныеШаблона = ДанныеКопируемогоШаблона(КопируемыйШаблон)
        ШаблонОбъект.Наименование = ДанныеШаблона.Наименование
        
        ШаблонОбъект.Приветствие = ДанныеШаблона.ОтображатьПриветствие
        ШаблонОбъект.ЗаголовокПриветствия = ДанныеШаблона.ЗаголовокПриветствия
        ШаблонОбъект.ТекстПриветствия = ДанныеШаблона.ТекстПриветствия
        ШаблонОбъект.КартинкаПриветствия = ДанныеШаблона.КартинкаПриветствия
        
        ШаблонОбъект.Завершение = ДанныеШаблона.ОтображатьЗавершение
        ШаблонОбъект.ЗаголовокЗавершения = ДанныеШаблона.ЗаголовокЗавершения
        ШаблонОбъект.ТекстЗавершения = ДанныеШаблона.ТекстЗавершения
        ШаблонОбъект.КартинкаЗавершения = ДанныеШаблона.КартинкаЗавершения
        ШаблонОбъект.СпособОтображенияАнкеты = ДанныеШаблона.СпособОтображенияАнкеты
        ШаблонОбъект.ЗапретПовторныхОтветов = ДанныеШаблона.ЗапретПовторныхОтветов
        
        Разделы = Анкетирование.РазделыШаблона(КопируемыйШаблон)
        если Разделы.Размер() > 0
            ИзмененТекущийРазделАнкеты.Оповестить(Разделы[0])
        ;
        ПрочитатьВопросыШаблона(КопируемыйШаблон, Истина)
        СформироватьНовыеУуид()
    иначе
        ДобавитьРаздел()
    ;  
     
    ЗаполнитьСписокОбластейДанных()    
    ОбновитьРазделы()
    ОбновитьОтображениеЭлементовКонструктора()
;

метод СформироватьНовыеУуид()
    НовыеУуидРазделов()
    НовыеУуидВопросов()
;

метод НовыеУуидРазделов()
    для Раздел из Разделы
        пер НовыйИд= новый Ууид()
        ИсторияИдентификаторов.Разделы.Вставить(Раздел.ИдРаздела, НовыйИд)
        Раздел.ИдРаздела = НовыйИд
    ;
;

метод НовыеУуидВопросов()
    для ВопросШаблона из ДанныеКонструктора
        ЗаменитьУуидВопросаШаблона(ВопросШаблона)    
    ;
;

метод ЗаменитьУуидВопросаШаблона(ВопросШаблона: ДанныеЭлементаКонструктора)
    
    знч ИдРаздела = ИсторияИдентификаторов.Разделы.ПолучитьИлиУмолчание(ВопросШаблона.ИдРаздела)
    
    если ИдРаздела != Неопределено
        ВопросШаблона.ИдРаздела = ИдРаздела
    ;
    
    знч НовыйИдВопроса= новый Ууид()
    ИсторияИдентификаторов.Вопросы.Вставить(ВопросШаблона.ИдЭлемента, НовыйИдВопроса)
    ВопросШаблона.ИдЭлемента = НовыйИдВопроса
    
    ВопросШаблона.ДанныеВопроса.ИдВопроса = новый Ууид()
    
    ВопросШаблона.ДанныеВопроса.ИдНабораВариантов = новый Ууид()
    
    для ВариантОтвета из ВопросШаблона.ДанныеВопроса.ВариантыОтвета
        знч НовыйИдВариантаОтвета = новый Ууид()
        ИсторияИдентификаторов.Варианты.Вставить(ВариантОтвета.ИдВарианта, НовыйИдВариантаОтвета)
        ВариантОтвета.ИдВарианта = НовыйИдВариантаОтвета
    ;
    
    для Подвопрос из ВопросШаблона.ДанныеВопроса.СоставСтруктурногоОтвета
        знч ИдВопроса = ИсторияИдентификаторов.Вопросы.ПолучитьИлиУмолчание(Подвопрос.ИдСоставногоВопроса)
        если ИдВопроса != Неопределено
            Подвопрос.ИдСоставногоВопроса = ИдВопроса
        ;
        ЗаменитьУуидВопросаШаблона(Подвопрос)
    ; 
;

метод ЗаполнитьСписокОбластейДанных()
    пер Описания = Анкетирование.ОписаниеПодсистемГотовыхВопросов()
    для Описание из Описания
        пер СтрокаСписка = новый ЭлементСпискаЗначений<Ууид?>()
        СтрокаСписка.Значение = Описание.ИдОбластиДанных
        СтрокаСписка.Представление = Описание.Наименование
        СписокПодсистемПоставщиковВопросов.Добавить(СтрокаСписка)
    ;
;

метод ЗапретПовторныхОтветовВидимость(): Булево
    возврат ШаблонОбъект.СпособОтображенияАнкеты != СпособыОтображенияАнкеты.ВопросыНаОднойСтранице
;    

//Область ОбработчикиСобытий

метод СпособОтображенияАнкетыПриИзменении(Источник: ПолеВвода<СпособыОтображенияАнкеты>, Событие: СобытиеПриИзменении<неизвестно>)
    если Событие.НовоеЗначение == СпособыОтображенияАнкеты.ВопросыНаОднойСтранице
        ШаблонОбъект.ЗапретПовторныхОтветов = Ложь
    ;
;

метод НаименованиеАнкетыПриИзменении(Источник: ПолеВвода<Строка>, Событие: СобытиеПриИзменении<Строка>)
    СообщениеОбОшибке = ""
;

метод ОтображатьБлокПриветствияПриИзменении(Источник: Флажок, Событие: СобытиеПриИзменении<Булево?>)
    если ШаблонОбъект.Приветствие
        ТекущийБлок = БлокиШаблонаАнкеты.Приветствие
    ;
;

метод ОтображатьБлокЗавершенияПриИзменении(Источник: Флажок, Событие: СобытиеПриИзменении<Булево?>)
    если ШаблонОбъект.Завершение
        ТекущийБлок = БлокиШаблонаАнкеты.Завершение
    ;

;

метод ПриветствиеПриНажатии(Источник: Надпись, Событие: СобытиеПриНажатии)
    ТекущийБлок = БлокиШаблонаАнкеты.Приветствие
;

метод ЗавершениеПриНажатии(Источник: Надпись, Событие: СобытиеПриНажатии)
    ТекущийБлок = БлокиШаблонаАнкеты.Завершение    
;

метод РазделыАнкетыПослеСозданияСтроки(Источник: Список<ИсточникДанныхМассив<ДанныеРаздела>>, Событие: СобытиеСДанными<СтрокаСписка<ДанныеРаздела>>)
    пер ДанныеСтроки = Событие.Данные как РазделыАнкетыКомпонентСтроки
    ДанныеСтроки.ТекущийРаздел = ТекущийРаздел
    
;

метод ДобавитьРазделПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ДобавитьРаздел()
    ОбновитьРазделы()
;

метод ОчиститьПриНажатии(Источник: ОбычнаяКоманда)
    знч Ответ = ЗапросДействия.ОткрытьВМодальномОкне(ОжидатьЗакрытия = Истина, Текст = "Разделы и вопросы анкеты будут очищены. Продолжить?")
    если Ответ != КнопкиМодальныхДиалогов.Да
        возврат
    ;
    
    ОчиститьКонструктор()
    ОбновитьОтображениеЭлементовКонструктора()
;

метод РедактироватьРазделПриНажатии(Источник: ОбычнаяКоманда)
    Разделы[ТекущийРаздел.Приоритет-1].РежимРедактирования = Истина
;

метод УдалитьРазделПриНажатии(Источник: ОбычнаяКоманда)
    
    УдалитьВопросыРаздела()
    Разделы.Удалить(ТекущийРаздел)
    
    если Разделы.Размер() > 0
        ПеренумероватьРазделы()
        ИзмененТекущийРазделАнкеты.Оповестить(Разделы[Разделы.Размер()-1])
        ТекущийНомерРаздела = Разделы.Размер()
    иначе
        ДобавитьРаздел()   
    ;
    
    ОбновитьРазделы()
;

метод ПереместитьВпередПриНажатии(Источник: ОбычнаяКоманда)
    ПереместитьРаздел(Разделы[ТекущийРаздел.Приоритет-1], Анкетирование.НАПРАВЛЕНИЕ_ВНИЗ)
;

метод ПереместитьНазадПриНажатии(Источник: ОбычнаяКоманда)
    ПереместитьРаздел(Разделы[ТекущийРаздел.Приоритет-1], Анкетирование.НАПРАВЛЕНИЕ_ВВЕРХ)       
;

метод СодержимоеАнкетированияПослеСозданияСтроки(Источник: Список<ИсточникДанныхМассив<ДанныеЭлементаКонструктора>>, Событие: СобытиеСДанными<СтрокаСписка<ДанныеЭлементаКонструктора>>)
    пер ДанныеСтроки = Событие.Данные как АнкетированиеСтрока
    ДанныеСтроки.ИдТекущегоРаздела = ТекущийРаздел.ИдРаздела
    ДанныеСтроки.ОтображатьОбязательность = не ВсеОтветыОбязательны
    ДанныеСтроки.РазрешенныйИнструментКонструктора = РазрешенныеИнструментыКонструктора.Размер() == 1 ? РазрешенныеИнструментыКонструктора.Первый() : Неопределено 
    Компоненты.ОбходОшибкиПриАктивацииСтроки.Активировать()
    
;

метод ДобавитьКомпонентВыборИнструмента(Источник: ДобавитьКомпонентКонструктораКнопка, Событие: СобытиеСДанными<ИнструментыКонструктора>)
    ДобавитьКомпонент(Событие.Данные)
;

метод ПанельОсновнаяЗаписатьИЗакрыть(Источник: КоманднаяПанельФорм, Событие: СобытиеКомпонента)
       
    если не ПроверкаЗаполнения()
        СтандартныеФормы.ПоказатьУведомление(
            Заголовок = "Анкета",
            Текст = "Обнаружены ошибки при проверке заполнения. Исправьте их перед сохранением.",
            Коннотация = ОценкаИнформации.Предупреждающая)
        возврат
    ;
    
    СохранениеШаблона(новый СобытиеСДанными(СтруктураЗаписиШаблона()))
;

метод ДобавитьРазрешенныйКомпонентПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    пер РазрешенныйИнструмент = РазрешенныеИнструментыКонструктора.Первый()
    ДобавитьКомпонент(РазрешенныйИнструмент)
;

//Конец ОбработчикиСобытий


//Область ВычисляемыеСвойства
метод ИнструментыКонструктораВидимость(): Булево
    если РазрешенныеИнструментыКонструктора.Размер() == 1
        возврат Ложь
    ;
     
    возврат не ОсновнойИнтерфейс.РаботаНаУзкомУстройстве()
;

метод СтраницаНастроекОриентация(): ОриентацияСодержимого
    возврат ОсновнойИнтерфейс.РаботаНаУзкомУстройстве() ? ОриентацияСодержимого.Вертикальная : ОриентацияСодержимого.Горизонтальная
;

метод НаименованиеРезультатПроверкиДанных(): РезультатПроверкиДанных
    если не СообщениеОбОшибке.Пусто() 
        возврат РезультатПроверкиДанных.Ошибка
    иначе
        возврат РезультатПроверкиДанных.Отсутствует
    ;    
;

метод ПриветствиеЦвет(): Цвет | Авто
    возврат ТекущийБлок == БлокиШаблонаАнкеты.Приветствие ? БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Синий) :  БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Синий, 0.5)
;

метод ЗавершениеЦвет(): Цвет | Авто
    возврат ТекущийБлок == БлокиШаблонаАнкеты.Завершение ? БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Синий) :  БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Синий, 0.5)
;

метод ЗаглушкаСтраницыНастройкиВидимость(): Булево
    возврат не (ШаблонОбъект.Приветствие) и не (ШаблонОбъект.Завершение)
;

метод ВидыОтветовВидимостьГотовыхВопросов(): Булево
    возврат (ШаблонОбъект.СохранятьВопросыВПодсистему) и (ШаблонОбъект.ИдОбластиДанных) != Неопределено
;

метод КонтейнерКонструктораМаксимальнаяШирина(): Число
    возврат 110 * Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА
;

метод ОписаниеРазделаДанныеРаздела(): ДанныеРаздела
    возврат Разделы.Размер()>0 ? Разделы[ТекущийНомерРаздела-1] : новый ДанныеРаздела() 
;

метод ЗаглушкаВидимость(): Булево
    возврат ДанныеКонструктора.Размер() == 0
;

метод ЗаглушкаТекст(): Строка
    возврат ОсновнойИнтерфейс.РаботаНаУзкомУстройстве() или РазрешенныеИнструментыКонструктора.Размер()==1  ? "Добавьте вопрос с помощью кнопки ниже" : "Выберите вопрос из панели инструментов"
;

//Конец ВычисляемыеСвойства

метод ДобавитьРаздел()
    пер НовыйРаздел = новый ДанныеРаздела()
    НовыйРаздел.ИдРаздела = новый Ууид()
    НовыйРаздел.Приоритет = Разделы.Размер() + 1
    НовыйРаздел.Заголовок = "Раздел " + НовыйРаздел.Приоритет
    Разделы.Добавить(НовыйРаздел)
    ИзмененТекущийРазделАнкеты.Оповестить(НовыйРаздел)
;

метод ОбновитьРазделы()
    пер КоллекцияДанных = Компоненты.РазделыАнкеты.Источник.Данные
    КоллекцияДанных.Очистить()
    КоллекцияДанных.ДобавитьВсе(Разделы)    
;

метод ОчиститьКонструктор()
    ДанныеКонструктора.Очистить()
    Разделы.Очистить()
    ДобавитьРаздел()
    ОбновитьРазделы()   
;

метод ОбновитьОтображениеЭлементовКонструктора()
    знч ДанныеКонструктораПромежуточные = ДанныеКонструктора.СортироватьПо(ЭлементКонструктора -> ЭлементКонструктора.ПриоритетРаздела)
    ДанныеКонструктора.Очистить()
    ДанныеКонструктора.ДобавитьВсе(ДанныеКонструктораПромежуточные)
    
    ПересчитатьНомераВопросов()
    пер ФильтрДанныхКонструктора = новый Массив<ДанныеЭлементаКонструктора>()
    для ЭлементКонструктора из ДанныеКонструктора
        если ЭлементКонструктора.ИдРаздела == ТекущийРаздел.ИдРаздела
            ФильтрДанныхКонструктора.Добавить(ЭлементКонструктора)
        ;
    ;    
    ОбновитьСодержимоеСписка(ФильтрДанныхКонструктора)    
;

метод ПересчитатьНомераВопросов()
    пер НомерВопроса = 0
    для ЭлементДанных из ДанныеКонструктора
        НомерВопроса += 1
        ЭлементДанных.НомерВопроса = НомерВопроса
    ;    
;

метод ОбновитьСодержимоеСписка(ФильтрДанныхКонструктора: Массив<ДанныеЭлементаКонструктора>)
    пер КоллекцияДанных = Компоненты.СодержимоеАнкетирования.Источник.Данные
    КоллекцияДанных.Очистить()
    КоллекцияДанных.ДобавитьВсе(ФильтрДанныхКонструктора)    
;

метод УдалитьВопросыРаздела()
    пер МассивУдаляемых: Массив<ДанныеЭлементаКонструктора>
    для ЭлементКонструктора из ДанныеКонструктора
        если ЭлементКонструктора.ИдРаздела == ТекущийРаздел.ИдРаздела
            МассивУдаляемых.Добавить(ЭлементКонструктора)
        ;
    ;
    ДанныеКонструктора.УдалитьВсе(МассивУдаляемых)
    ОбновитьОтображениеЭлементовКонструктора()
;

метод ПеренумероватьРазделы()
    пер НомерРаздела = 0
    для Раздел из Разделы
        НомерРаздела += 1
        Раздел.Приоритет = НомерРаздела
    ;
;

метод ПереместитьРаздел(Раздел: ДанныеРаздела, Направление: Число)
    
    пер ИндексЭлемента = Разделы.Найти(Раздел)
    
    если ИндексЭлемента == Неопределено
        возврат
    ;    
    если Направление == Анкетирование.НАПРАВЛЕНИЕ_ВВЕРХ и ИндексЭлемента == 0
        возврат
    ;    
    если Направление == Анкетирование.НАПРАВЛЕНИЕ_ВНИЗ и ИндексЭлемента == Разделы.Граница()
        возврат    
    ;
        
    Разделы.Удалить(Раздел)
    Разделы.Вставить(ИндексЭлемента + Направление, Раздел)
    ПеренумероватьРазделы()
    ОбновитьРазделы()
    ОбновитьПриоритетыВопросов()
    ОбновитьОтображениеЭлементовКонструктора()      
;

метод ОбновитьПриоритетыВопросов()
    для ЭлементДанных из ДанныеКонструктора
        ЭлементДанных.ПриоритетРаздела = ПриоритетРаздела(ЭлементДанных.ИдРаздела)
    ;    
;

метод ПриоритетРаздела(ИдРаздела: Ууид?): Число

    для Раздел из Разделы
        если Раздел.ИдРаздела == ИдРаздела
            возврат Раздел.Приоритет
        ;
    ;
;

метод ЭлементКонструктораПоТипуДанных(Параметр: ДанныеВопроса|ИнструментыКонструктора): ДанныеЭлементаКонструктора?
    
    пер Данные: ДанныеВопроса   
    если Параметр это ИнструментыКонструктора
        Данные.ТипОтвета = Анкетирование.ТипОтветаИнструмента(Параметр как ИнструментыКонструктора)
        Данные = Анкетирование.ДанныеВопросаУмолчание(Данные.ТипОтвета)
    иначе если Параметр это ДанныеВопроса
        Данные = Анкетирование.СкопироватьДанныеВопроса(Параметр как ДанныеВопроса)      
    иначе
        возврат Неопределено
    ;    
    
    пер ЭлементКонструктора = Анкетирование.ЗаполнитьЭлементКонструктораДанными(Данные, ТекущийРаздел.ИдРаздела, ТекущийРаздел.Приоритет)
    
    возврат ЭлементКонструктора   
;

метод КопироватьКомпонент(ЭлементКонструктора: ДанныеЭлементаКонструктора)
    пер ИндексЭлемента = ДанныеКонструктора.Найти(ЭлементКонструктора)
    
    если ИндексЭлемента == Неопределено
        возврат
    ;
    
    пер КопияЭлемента = ЭлементКонструктораПоТипуДанных(ЭлементКонструктора.ДанныеВопроса)
    
    если КопияЭлемента == Неопределено
        СтандартныеФормы.ПоказатьУведомление("В разработке", "Не найден компонент конструктора", ОценкаИнформации.Предупреждающая)  
        возврат
    ;
    
    ДанныеКонструктора.Вставить(ИндексЭлемента + 1, КопияЭлемента)
    ОбновитьОтображениеЭлементовКонструктора()    
;

метод ПереместитьКомпонент(ПараметрыСдвига: Анкетирование.ПараметрыСдвигаКомпонента)
    
    пер ИндексЭлемента = ДанныеКонструктора.Найти(ПараметрыСдвига.ЭлементКонструктора)
    
    если ИндексЭлемента == Неопределено
        возврат
    ;    
    если ПараметрыСдвига.Направление == Анкетирование.НАПРАВЛЕНИЕ_ВВЕРХ и ИндексЭлемента == 0
        возврат
    ;    
    если ПараметрыСдвига.Направление == Анкетирование.НАПРАВЛЕНИЕ_ВНИЗ и ИндексЭлемента == ДанныеКонструктора.Граница()
        возврат    
    ;
        
    ДанныеКонструктора.Удалить(ПараметрыСдвига.ЭлементКонструктора)
    ДанныеКонструктора.Вставить(ИндексЭлемента + ПараметрыСдвига.Направление, ПараметрыСдвига.ЭлементКонструктора)
    ОбновитьОтображениеЭлементовКонструктора()    
;

метод ПрочитатьВопросыШаблона(Шаблон: ШаблоныАнкет.Ссылка?, КопироватьИдВопроса: Булево)
    ДанныеКонструктора = Анкетирование.ВопросыШаблона(Шаблон)
;

@ВПодсистеме
@НаКлиенте
перечисление ОшибкиПроверкиЗаполнения
    ФормулировкаНеЗаполнена
;

метод ПроверкаЗаполнения(): Булево
    пер Результат = Истина
    
    для Элемент из ДанныеКонструктора
        Элемент.РезультатПроверкиЗаполнения.Очистить()
        если Элемент.ДанныеВопроса.Формулировка.Пусто()
            Элемент.РезультатПроверкиЗаполнения.Вставить(ОшибкиПроверкиЗаполнения.ФормулировкаНеЗаполнена, "Поле обязательно для заполнения")
            Результат = Ложь
        ;
    ;

    если ШаблонОбъект.Наименование == ""
        Результат = Ложь
        СообщениеОбОшибке = "Не заполнен заголовок шаблона анкеты"
    ;
        
    возврат Результат
;

@ВПроекте
метод Просмотр()
    ВключенРежимРедактирования.Оповестить([])
    ФормаПросмотраШаблона.ОткрытьВМодальномОкне(ДанныеАнкеты = СкопироватьДанныеКонструктора(), ДанныеШаблона = ДанныеШаблона()) 
;

метод СкопироватьДанныеКонструктора(): Массив<ДанныеЭлементаКонструктора>
    пер КопияДанныхКонструктора = новый Массив<ДанныеЭлементаКонструктора>()
    
    для ЭлементКонструктора из ДанныеКонструктора
        пер ЭлементКопии = ЭлементКонструктораПоТипуДанных(ЭлементКонструктора.ДанныеВопроса)
        ЭлементКопии.НомерВопроса = ЭлементКонструктора.НомерВопроса
        ЭлементКопии.ИдРаздела = ЭлементКонструктора.ИдРаздела
        ЭлементКопии.ПриоритетРаздела = ЭлементКонструктора.ПриоритетРаздела
        ЭлементКопии.РежимРедактирования = Ложь
        ЭлементКопии.ТолькоПросмотр = Истина
        КопияДанныхКонструктора.Добавить(ЭлементКопии)        
    ;
    
    возврат КопияДанныхКонструктора    
;

метод СтруктураЗаписиШаблона(): Анкетирование.СтруктураЗаписиШаблона
    возврат новый Анкетирование.СтруктураЗаписиШаблона(ШаблонОбъект.ЭтоНовый(), ОбъектДляЗаписи(), ДанныеКонструктора)
;

метод ОбъектДляЗаписи(): Анкетирование.ДанныеШаблонаАнкет
    
    пер ДанныеСправочника = новый Анкетирование.ДанныеШаблонаАнкет() 
    
    ДанныеСправочника.Ссылка = ШаблонОбъект.Ссылка
    ДанныеСправочника.Разделы = Разделы
    ДанныеСправочника.КоличествоРазделов = ШаблонОбъект.КоличествоРазделов
    ДанныеСправочника.Наименование = ШаблонОбъект.Наименование
    ДанныеСправочника.Описание = ШаблонОбъект.Описание
    ДанныеСправочника.Предопределенный = ШаблонОбъект.Предопределенный
    ДанныеСправочника.Автор = ШаблонОбъект.Автор
    ДанныеСправочника.МоментРедактирования = Момент.Сейчас()
    ДанныеСправочника.ОтображатьПриветствие = ШаблонОбъект.Приветствие
    
    если ДанныеСправочника.ОтображатьПриветствие
        ДанныеСправочника.ЗаголовокПриветствия = ШаблонОбъект.ЗаголовокПриветствия
        ДанныеСправочника.ТекстПриветствия = ШаблонОбъект.ТекстПриветствия
        ДанныеСправочника.КартинкаПриветствия = ШаблонОбъект.КартинкаПриветствия
    ;
    
    ДанныеСправочника.ОтображатьЗавершение = ШаблонОбъект.Завершение
    если ДанныеСправочника.ОтображатьЗавершение
        ДанныеСправочника.ЗаголовокЗавершения = ШаблонОбъект.ЗаголовокЗавершения
        ДанныеСправочника.ТекстЗавершения = ШаблонОбъект.ТекстЗавершения
        ДанныеСправочника.КартинкаЗавершения = ШаблонОбъект.КартинкаЗавершения
    ;
    
    ДанныеСправочника.СохранятьВопросыВПодсистему = ШаблонОбъект.СохранятьВопросыВПодсистему
    ДанныеСправочника.СпособОтображенияАнкеты = ШаблонОбъект.СпособОтображенияАнкеты
    ДанныеСправочника.ИдОбластиДанных = ШаблонОбъект.ИдОбластиДанных
    ДанныеСправочника.ЗапретПовторныхОтветов = ШаблонОбъект.ЗапретПовторныхОтветов
    выбор ШаблонОбъект.МоментСоздания
        когда это Момент
            ДанныеСправочника.МоментСоздания = ШаблонОбъект.МоментСоздания
        когда это Неопределено
            ДанныеСправочника.МоментСоздания = Момент.Сейчас()
    ;
    
    возврат ДанныеСправочника   
;

метод ДанныеШаблона(): Анкетирование.ДанныеШаблонаАнкет
    
    пер ДанныеШаблона = новый Анкетирование.ДанныеШаблонаАнкет()
    ДанныеШаблона.Наименование = ШаблонОбъект.Наименование
    ДанныеШаблона.Описание = ШаблонОбъект.Описание
    ДанныеШаблона.ОтображатьПриветствие = ШаблонОбъект.Приветствие
    ДанныеШаблона.ЗаголовокПриветствия = ШаблонОбъект.ЗаголовокПриветствия
    ДанныеШаблона.ТекстПриветствия = ШаблонОбъект.ТекстПриветствия
    ДанныеШаблона.КартинкаПриветствия = ШаблонОбъект.КартинкаПриветствия
    ДанныеШаблона.ОтображатьЗавершение = ШаблонОбъект.Завершение
    ДанныеШаблона.ЗаголовокЗавершения = ШаблонОбъект.ЗаголовокЗавершения
    ДанныеШаблона.ТекстЗавершения = ШаблонОбъект.ТекстЗавершения
    ДанныеШаблона.КартинкаЗавершения = ШаблонОбъект.КартинкаЗавершения
    ДанныеШаблона.КоличествоРазделов = Разделы.Размер()
    ДанныеШаблона.ТекущийРаздел = ТекущийРаздел
    ДанныеШаблона.Разделы = Разделы
    ДанныеШаблона.СпособОтображенияАнкеты = ШаблонОбъект.СпособОтображенияАнкеты
    ДанныеШаблона.ЗапретПовторныхОтветов = ШаблонОбъект.ЗапретПовторныхОтветов
    
    возврат ДанныеШаблона
;

@ВПроекте
метод Компоненты(): КонструкторШаблонаКомпонент.Компоненты
    возврат Компоненты
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеКопируемогоШаблона(КопируемыйШаблон: ШаблоныАнкет.Ссылка): Анкетирование.ДанныеШаблонаАнкет
    пер Объект = КопируемыйШаблон.ЗагрузитьОбъект()
    пер ДанныеШаблона = новый Анкетирование.ДанныеШаблонаАнкет()
    ДанныеШаблона.Наименование = Объект.Наименование
    ДанныеШаблона.Описание = Объект.Описание
    
    ДанныеШаблона.ОтображатьПриветствие = Объект.Приветствие
    ДанныеШаблона.ЗаголовокПриветствия = Объект.ЗаголовокПриветствия
    ДанныеШаблона.ТекстПриветствия = Объект.ТекстПриветствия
    ДанныеШаблона.КартинкаПриветствия = Объект.КартинкаПриветствия
    
    ДанныеШаблона.ОтображатьЗавершение = Объект.Завершение
    ДанныеШаблона.ЗаголовокЗавершения = Объект.ЗаголовокЗавершения
    ДанныеШаблона.ТекстЗавершения = Объект.ТекстЗавершения
    ДанныеШаблона.КартинкаЗавершения = Объект.КартинкаЗавершения
    
    ДанныеШаблона.ЗапретПовторныхОтветов = Объект.ЗапретПовторныхОтветов
    ДанныеШаблона.СпособОтображенияАнкеты = Объект.СпособОтображенияАнкеты
        
    возврат ДанныеШаблона
;