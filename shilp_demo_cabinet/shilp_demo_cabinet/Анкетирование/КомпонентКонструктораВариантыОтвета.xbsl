импорт ИнтерфейсныеКомпонентыСтандартные
импорт ОбщиеСтандартные

@НаСервере @НаКлиенте
структура ДанныеНабора
    обз пер ИдНабора: Ууид
    обз пер Статический: Булево
;

@Обработчик
метод ПослеСоздания()
    ОшибкаЗаполненияВопроса.ПодключитьОбработчик((метод (ИдВопроса: Ууид) ->
        если ИдВопроса == Данные.ИдЭлемента
            СообщениеОбОшибке = "ответ не указан"
        ;    
    ;))
    
    УдаленВариантОтвета.ПодключитьОбработчик((метод (ДанныеВариантаОтвета) ->
        УдалитьВариант(ДанныеВариантаОтвета)
    ;))
    
    ИзмененоЗначениеВарианта.ПодключитьОбработчик((метод (ИдВопроса: Ууид) ->
        если ИдВопроса == Данные.ИдЭлемента 
            ОбновитьСписокОтветов()
        ;
    ;))
;

@ВПроекте
@Реализация
метод Инициализировать()
    
    ИдКомпонента = новый Ууид()
    ПрочитатьВариантыОтветов()
    
    если МножественныйВыбор
        Данные.ЗаголовокЭлемента = "Несколько"
        Данные.ИконкаЭлемента = Ресурс{ВыборВарианта.svg}.Ссылка
    иначе
        Данные.ЗаголовокЭлемента = "Один из списка"
        Данные.ИконкаЭлемента = Ресурс{ВыборВариантаЕдиничный.svg}.Ссылка
    ;    

    ЗаполнитьСписокЭлементовВыбора()
    ЗаполнитьСписокСистемныхНаборовВариантов()
    Настройки = Компоненты.Настройки
;

метод ЗаполнитьСписокСистемныхНаборовВариантов()
    
    для Набор из ПредопределенныеНаборыВариантов()
        пер ЗначениеСписок = новый ЭлементСпискаЗначений<НаборыВариантовОтвета.Ссылка?>(
        Значение = Набор,
        Представление = Набор.Представление())
        
        СписокСистемныхНаборов.Добавить(ЗначениеСписок)
    ;
;

@НаСервере @ДоступноСКлиента
статический метод ПредопределенныеНаборыВариантов(): Массив<НаборыВариантовОтвета.Ссылка>

    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    
    пер Наборы: Массив<НаборыВариантовОтвета.Ссылка>
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка как Набор
            Из 
            НаборыВариантовОтвета 
        Где 
            Предопределенный}

    исп РезультатЗапроса = Запрос.Выполнить()
    ПривилегированныйРежим.Закрыть() 
    
    для РезультатЗапросаСтрока из РезультатЗапроса
        Наборы.Добавить(РезультатЗапросаСтрока.Набор)
    ;
    
    возврат Наборы
;

метод ОбновитьСписокОтветов()
    
    Данные.ДанныеОтвета.ЗначенияПредопределенные.Очистить()
    для Вариант из Данные.ДанныеВопроса.ВариантыОтвета
        если Вариант.Вариант != Неопределено и Вариант.ЗначениеВарианта == Истина
            Данные.ДанныеОтвета.ЗначенияПредопределенные.Добавить(Вариант.Вариант)   
        ;
    ;
;

метод ВариантыРадиоКнопкиПриИзменении(Источник: ГруппаРадиоКнопок<ДанныеВариантаОтвета?>, Событие: СобытиеПриИзменении<неизвестно>)
    ВариантЕдиничныйПриИзменении(Событие.НовоеЗначение.Вариант)   
;

метод ВариантыВыпадающийСписокПриИзменении(Источник: ПолеВвода<ДанныеВариантаОтвета?>, Событие: СобытиеПриИзменении<неизвестно>)
    если Событие.НовоеЗначение != Неопределено
        ВариантЕдиничныйПриИзменении(Событие.НовоеЗначение.Вариант)
    ;          
;

метод ВариантЕдиничныйПриИзменении(НовоеЗначение: ПредопределенныеЗначенияОтветов.Ссылка?)
    если НовоеЗначение == Неопределено
        возврат
    ;
    Данные.ДанныеОтвета.ЗначенияПредопределенные.Очистить()
    Данные.ДанныеОтвета.ЗначенияПредопределенные.Добавить(НовоеЗначение)
    СообщениеОбОшибке = ""    
;

метод ЗаполнитьСписокЭлементовВыбора()
    пер ЗначениеСписок = новый ЭлементСпискаЗначений<ВидыКомпонентаВыбора?>(
    Значение = ВидыКомпонентаВыбора.Список,
    Представление = ВидыКомпонентаВыбора.Список.Представление())
    
    пер ЗначениеВыпадающийСписок = новый ЭлементСпискаЗначений<ВидыКомпонентаВыбора?>(
    Значение = ВидыКомпонентаВыбора.ВыпадающийСписок,
    Представление = ВидыКомпонентаВыбора.ВыпадающийСписок.Представление())
    
    СписокВидовКомпонентаВыбора.Добавить(ЗначениеСписок)
    СписокВидовКомпонентаВыбора.Добавить(ЗначениеВыпадающийСписок)
;

метод ВариантыОтвета(): Массив<ДанныеВариантаОтвета>?
    если Данные.ДанныеВопроса == Неопределено
        возврат Неопределено
    ;
    возврат Данные.ДанныеВопроса.ВариантыОтвета   
;
    
метод ПрочитатьВариантыОтветов()
    если Данные.ДанныеВопроса == Неопределено
        возврат
    ;
    
    если Данные.ДанныеВопроса.ИспользоватьПредопределенныйНабор и Данные.ДанныеВопроса.НаборВариантов != Неопределено
        ЗаполнитьПредопределенныеВариантыОтвета(Данные.ДанныеВопроса.НаборВариантов)
    ;
    
    ВариантыОтвета = Данные.ДанныеВопроса.ВариантыОтвета
    если Данные.ДанныеОтвета.ЗначенияПредопределенные.Размер() > 0
        для Вариант из ВариантыОтвета
            если Данные.ДанныеОтвета.ЗначенияПредопределенные.Найти(Вариант.Вариант) != Неопределено
                Вариант.ЗначениеВарианта = Истина
                Ответ = Вариант
            ;  
        ;
    ;
    
    ОбновитьСписокВариантовОтвета()
    пер КоллекцияИсточника = КоллекцияИсточникаВариантыОтветов()
    КоллекцияИсточника.Очистить()
    КоллекцияИсточника.ДобавитьВсе(ВариантыОтвета)
    ЗагрузкаВариантовЗавершена = Истина   
;

метод ВариантыВыпадающийСписокПодсказкаВвода(): Строка
    возврат ЗагрузкаВариантовЗавершена ? "выбрать..." : "Загрузка вариантов..."
;

метод ОбновитьСписокВариантовОтвета()
    СписокВариантыОтвета.Очистить()
    для ВариантОтвета из Данные.ДанныеВопроса.ВариантыОтвета
        пер ЗначениеСписок = новый ЭлементСпискаЗначений<ДанныеВариантаОтвета?>(
        Значение = ВариантОтвета,
        Представление = ВариантОтвета.ПредставлениеВарианта)
        СписокВариантыОтвета.Добавить(ЗначениеСписок)    
    ;    
;

метод КоллекцияИсточникаВариантыОтветов(): Массив<ДанныеВариантаОтвета>
    возврат Компоненты.ВариантыОтвета.Источник.Данные
;

метод УдалитьВариант(Вариант: ДанныеВариантаОтвета)
    Данные.ДанныеВопроса.ВариантыОтвета.Удалить(Вариант)
    ПрочитатьВариантыОтветов()        
;

метод ДобавитьВариантПриНажатии(Источник: Надпись, Событие: СобытиеПриНажатии)
    пер НовыйВариант = новый ДанныеВариантаОтвета()
    НовыйВариант.ИдВарианта = новый Ууид()
    НовыйВариант.ПредставлениеВарианта = "Вариант " + (Данные.ДанныеВопроса.ВариантыОтвета.Размер() + 1)
    Данные.ДанныеВопроса.ВариантыОтвета.Добавить(НовыйВариант)
    ПрочитатьВариантыОтветов()    
;

метод ВариантыОтветаПослеСозданияСтроки(Источник: Список<ИсточникДанныхМассив<ДанныеВариантаОтвета>>, Событие: СобытиеСДанными<СтрокаСписка<ДанныеВариантаОтвета>>)
    пер ДанныеСтроки = Событие.Данные как ВариантОтветаСтрока
    ДанныеСтроки.МножественныйВыбор= МножественныйВыбор
    ДанныеСтроки.ВидКомпонентаВыбора = ВидыКомпонентаВыбора.Список
    ДанныеСтроки.Данные = Данные
    ДанныеСтроки.ИзменениеПорядка = &ИзменениеПорядка
;

метод ИзменениеПорядка(Источник: ВариантОтветаСтрока, Событие: СобытиеСДанными<Направление>)
    пер ДанныеСтроки = Источник.ДанныеСтроки
    знч ИндексЭлемента = ВариантыОтвета.Найти(ДанныеСтроки)
    пер НаправлениеСдвига: Число
    выбор Событие.Данные
    когда Вверх
        если ИндексЭлемента == 0
            возврат
        ;
        НаправлениеСдвига = -1
    когда Вниз
        если ИндексЭлемента == ВариантыОтвета.Граница()
            возврат
        ;
        НаправлениеСдвига = 1
    ;
    
    ВариантыОтвета.Удалить(ДанныеСтроки)
    ВариантыОтвета.Вставить(ИндексЭлемента + НаправлениеСдвига, ДанныеСтроки)
    ПрочитатьВариантыОтветов()
;

метод НастройкиВидимость(): Булево
    возврат Данные.РежимРедактирования и не МножественныйВыбор
;

// Контракт КомпонентКонструктора
@ВПроекте
@Реализация
метод ОткрытьНастройки(): Компонент
    возврат Компоненты.Настройки
;
// Конец КомпонентКонструктора

метод ЗаполненВариант(): Булево
    пер ЗаполненВариант = Ложь
    для Вариант из Данные.ДанныеВопроса.ВариантыОтвета
        если Вариант.ЗначениеВарианта == Истина
            ЗаполненВариант = Истина
        ;
    ;
    
    возврат ЗаполненВариант
;

метод ПредопределенныйНаборПриИзменении(Источник: ПолеВвода<НаборыВариантовОтвета.Ссылка?>, Событие: СобытиеПриИзменении<НаборыВариантовОтвета.Ссылка?>)
    
    пер Набор = Событие.НовоеЗначение
    ЗаполнитьПредопределенныеВариантыОтвета(Набор)

;

метод ЗаполнитьПредопределенныеВариантыОтвета(Набор: НаборыВариантовОтвета.Ссылка)
    пер ДанныеНабора = ДанныеНабора(Набор)
    
    если ДанныеНабора.Статический
        Данные.ДанныеВопроса.ВариантыОтвета = Анкетирование.ВариантыОтветаПоНабору(Набор)
    иначе
        Данные.ДанныеВопроса.ВариантыОтвета = ЗначенияНабораВариантов(ДанныеНабора.ИдНабора)       
    ;
;

@НаСервере @ДоступноСКлиента
статический метод ЗначенияНабораВариантов(ИдНабора: Ууид): Массив<ДанныеВариантаОтвета>
    пер СтатическиеВарианты: Массив<ДанныеВариантаОтвета>
        знч Сервисы = ПоставщикЗначенийВариантовОтвета.ПолучитьСервисы()
        для Сервис из Сервисы
            СтатическиеВарианты.ДобавитьВсе(Сервис.ЗначенияНабораВариантов(ИдНабора))
        ;
    возврат СтатическиеВарианты    
;

метод ИспользоватьПредопределенныйНаборПриИзменении(Источник: Флажок, Событие: СобытиеПриИзменении<Булево?>)
    если Событие.НовоеЗначение == Ложь
        Данные.ДанныеВопроса.ВариантыОтвета = Анкетирование.ВариантыОтветаУмолчание()
    иначе
        Данные.ДанныеВопроса.НаборВариантов = Неопределено
        Данные.ДанныеВопроса.НастройкиВопроса.ВидКомпонентаВыбора = ВидыКомпонентаВыбора.ВыпадающийСписок 
    ;
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеНабора(Набор: НаборыВариантовОтвета.Ссылка): ДанныеНабора
    пер НаборОбъект = Набор.ЗагрузитьОбъект()
    возврат новый ДанныеНабора(НаборОбъект.ИдПредопределенногоНабора, НаборОбъект.Статический)
;