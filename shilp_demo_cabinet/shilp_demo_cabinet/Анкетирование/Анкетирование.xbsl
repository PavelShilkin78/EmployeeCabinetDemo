импорт ИнтерфейсныеКомпонентыСтандартные
импорт УниверсальныеМеханизмы
импорт ФизическиеЛица
импорт ОбщиеСтандартные
импорт СтандартноеПриложение
импорт КонтрольДоступа

@ВПодсистеме
@НаКлиенте
конст НАПРАВЛЕНИЕ_ВВЕРХ = -1

@ВПодсистеме
@НаКлиенте
конст НАПРАВЛЕНИЕ_ВНИЗ  =  1

@ВПодсистеме конст ГРУППА_РЕСУРСОВ_АНКЕТИРОВАНИЕ = "Анкетирование"

@ВПроекте конст ИД_РАЗДЕЛА_АНКЕТИРОВАНИЕ = "Анкетирование"
@ВПодсистеме конст ИМЯ_РАЗДЕЛА_АНКЕТИРОВАНИЕ = "Анкетирование"

@ВПроекте
конст ИД_ПОДСИСТЕМЫ = "Анкетирование"

@ВПроекте
конст ИД_НАСТРОЙКИ_АНКЕТИРОВАНИЯ = "НастройкаАнкетирования"

@ВПодсистеме
конст КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: Строка = "Анкетирование"

@ВПодсистеме
структура ПараметрыСеанса
    пер ФункциональныеОпции: ФункциональныеОпции
;

@ВПодсистеме
@НаКлиенте @НаСервере
структура ОтветыСоставногоВопроса
    обз пер ИдОтвета: Ууид?
    обз пер Ответ: Массив<ДанныеЭлементаКонструктора>
;

@ВПроекте
@НаКлиенте @НаСервере
структура ИмпортируемыйОтвет
    пер ИдОбластиДанных: Ууид?
    пер Респондент: РеспондентАнкетирования.Ссылка?
    пер Ответы: Массив<СтруктураОтвета>
;

@ВПроекте
@НаКлиенте @НаСервере
структура ОбластьДанных
    пер ИдОбластиДанных: Ууид?
    пер Наименование: Строка
;

@ВПроекте
@НаКлиенте @НаСервере
структура СтруктураОтвета
    пер ИдВопроса: Ууид?
    пер Ответ: ДанныеОтвета
    пер Подвопрос: Булево
;

@ВПроекте
@НаКлиенте @НаСервере
структура ОписаниеНабораВариантов
    пер Ид: Ууид?
    пер Наименование: Строка
    пер ТипЗначений: Тип?
    пер Статический: Булево
    пер ФильтрНабора: Массив<ОписаниеФильтраНабора>  
;

@НаКлиенте @НаСервере
структура ОписаниеФильтраНабора
    обз пер ИмяПоля: Строка
    обз пер ЗначениеФильтра: Объект?
;

@ВПроекте
@НаКлиенте @НаСервере
структура СтруктураЗаписиШаблона
    обз пер ЭтоНовый: Булево
    обз пер ДанныеШаблонаАнкет: ДанныеШаблонаАнкет
    обз пер ДанныеКонструктора: Массив<ДанныеЭлементаКонструктора>
; 

@ВПодсистеме
@НаКлиенте
структура ДанныеВыбораГотовогоВопроса
    обз пер ДанныеВопроса: ДанныеВопроса
    обз пер Добавить: Булево
; 

@ВПодсистеме
@НаКлиенте
структура СтруктураВопроса
    пер ИдСтроки: Ууид?
    пер ЗаголовокПоля: Строка
    пер ТипОтвета: ТипыОтветов?
    пер Подсказка: Строка
    пер ОтветОбязателен: Булево
;

@ВПодсистеме
@НаКлиенте
структура ПараметрыСдвигаКомпонента
    обз пер ЭлементКонструктора: ДанныеЭлементаКонструктора
    обз пер Направление: Число
;

@ВПодсистеме
@НаКлиенте
структура ПараметрыИзмененияВариантаВыбора
    обз пер ИдВладельцаСтроки: Ууид
    обз пер ВидКомпонентаВыбора: ВидыКомпонентаВыбора?
;

@ВПроекте
@НаСервере @НаКлиенте
структура ДанныеШаблонаАнкет
    пер Ссылка: ШаблоныАнкет.Ссылка?
    пер ЭтоНовый: Булево
    пер Автор: ФизическиеЛица.Ссылка?
    пер МоментСоздания: Момент?
    пер МоментРедактирования: Момент?
    пер Наименование: Строка
    пер Описание: Строка
    пер Предопределенный: Булево
    пер ТекстПриветствия: Строка
    пер ЗаголовокПриветствия: Строка
    пер КоличествоРазделов: Число
    пер КоличествоВопросов: Число
    пер КартинкаПриветствия: ДвоичныйОбъект.Ссылка?
    пер ЗаголовокЗавершения: Строка
    пер ТекстЗавершения: Строка 
    пер КартинкаЗавершения: ДвоичныйОбъект.Ссылка?
    пер СохранятьВопросыВПодсистему: Булево
    пер Разделы: Массив<ДанныеРаздела>?
    пер ОтображатьПриветствие: Булево
    пер ОтображатьЗавершение: Булево
    пер ТекущийРаздел: ДанныеРаздела
    пер СпособОтображенияАнкеты: СпособыОтображенияАнкеты
    пер ИдОбластиДанных: Ууид?
    пер ЗапретПовторныхОтветов: Булево
    пер ИдПодсистемыПоставщика: Строка
;

@ВПроекте
@НаКлиенте
метод ПараметрыСеанса(): ПараметрыСеанса
    возврат ПараметрыСеансаСервис.ПолучитьСервис().ПараметрПоКлючу(КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА) как ПараметрыСеанса
;

// Область ФункциональныеОпции

@ВПроекте
структура ФункциональныеОпции
    пер ИспользованиеПодсистемы: Булево
;

@ВПроекте
@НаСервере
метод ПолучитьФункциональныеОпции(): ФункциональныеОпции?
    возврат ИспользуемаяФункциональность.ФункциональныеОпции()
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЗаписатьФункциональныеОпции(ФункциональныеОпции: ФункциональныеОпции)
    ИспользуемаяФункциональность.ЗаписатьФункциональныеОпции(ФункциональныеОпции)
;

// Конец ФункциональныеОпции

@ВПодсистеме
@НаКлиенте
метод СформироватьКомандыСоздания(): Команда|ГруппаКомандногоИнтерфейса<Команда>|?

    пер ДействияКомандыСоздания = <Команда>[]
    
    если ЕстьПолномочиеРедактированиеАнкет()
        знч СозданиеАнкеты = новый ОбычнаяКоманда(
                    Обработчик = Команда -> ФормаСозданияАнкет.ОткрытьВМодальномОкне(ВидимостьШаблона = Истина),
                    Представление = "Анкета")
        ДействияКомандыСоздания.Добавить(СозданиеАнкеты)
        ;
    если ЕстьПолномочиеЗапускОпросов()
        знч СозданиеОпроса = новый ОбычнаяКоманда(
                    Обработчик = Команда -> ОпросФормаОбъекта.ОткрытьВМодальномОкне(РежимЗапуска = Истина),
                    Представление = "Опрос")
        ДействияКомандыСоздания.Добавить(СозданиеОпроса)
    ;
    
    если ДействияКомандыСоздания.Пусто()
        возврат Неопределено
    ;
    
    возврат новый ГруппаКомандногоИнтерфейса<Команда>("Добавить", Неопределено, ДействияКомандыСоздания)
;

@НаСервере @ДоступноСКлиента
метод ЕстьПолномочиеРедактированиеАнкет(): Булево
    возврат КонтрольДоступа.ЕстьПравоНаПолномочие(Анкетирование.ПолномочиеРедактированиеАнкет())
;

@НаСервере @ДоступноСКлиента
метод ЕстьПолномочиеЗапускОпросов(): Булево
    возврат КонтрольДоступа.ЕстьПравоНаПолномочие(Анкетирование.ПолномочиеРедактированиеОпросов())
;

//КонтрольДоступа

@ВПроекте конст ОТПРАВКА_АНКЕТЫ_РЕСПОНДЕНТУ_SMS = "ОтправкаАнкетыРеспондентуSMS"
@ВПроекте конст ОТПРАВКА_АНКЕТЫ_РЕСПОНДЕНТУ_PUSH = "ОтправкаАнкетыРеспондентуPush"
@ВПроекте конст ОТПРАВКА_АНКЕТЫ_РЕСПОНДЕНТУ_EMAIL = "ОтправкаАнкетыРеспондентуEmail"
@ВПроекте конст ОТПРАВКА_АНКЕТЫ_РЕСПОНДЕНТУ_ТЕМА = "ОтправкаАнкетыРеспондентуТема"
@ВПроекте конст ОТПРАВКА_ОПРОСА_РЕСПОНДЕНТУ_SMS = "ОтправкаОпросаРеспондентуSMS"
@ВПроекте конст ОТПРАВКА_ОПРОСА_РЕСПОНДЕНТУ_PUSH = "ОтправкаОпросаРеспондентуPush"
@ВПроекте конст ОТПРАВКА_ОПРОСА_РЕСПОНДЕНТУ_EMAIL = "ОтправкаОпросаРеспондентуEmail"
@ВПроекте конст ОТПРАВКА_ОПРОСА_РЕСПОНДЕНТУ_ТЕМА = "ОтправкаОпросаРеспондентуТема"
@ВПроекте конст ПОЛУЧЕНЫ_РЕЗУЛЬТАТЫ_АНКЕТЫ_SMS = "ПолученыРезультатыАнкетыSMS"
@ВПроекте конст ПОЛУЧЕНЫ_РЕЗУЛЬТАТЫ_АНКЕТЫ_PUSH = "ПолученыРезультатыАнкетыPush"
@ВПроекте конст ПОЛУЧЕНЫ_РЕЗУЛЬТАТЫ_АНКЕТЫ_EMAIL = "ПолученыРезультатыАнкетыEmail"
@ВПроекте конст ПОЛУЧЕНЫ_РЕЗУЛЬТАТЫ_АНКЕТЫ_ТЕМА = "ПолученыРезультатыАнкетыТема"

конст ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ШАБЛОНОВ_АНКЕТ = "РедактированиеШаблоновАнкет"
конст ПОЛНОМОЧИЕ_ПРОСМОТР_ШАБЛОНОВ_АНКЕТ = "ПросмотрШаблоновАнкет"
конст ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ОПРОСОВ = "РедактированиеОпросов"
конст ПОЛНОМОЧИЕ_ПРОСМОТР_ОПРОСОВ = "ПросмотрОпросов"
конст ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_АНКЕТ = "РедактированиеАнкет"
конст ПОЛНОМОЧИЕ_ПРОСМОТР_АНКЕТ = "ПросмотрАнкет"
конст ПОЛНОМОЧИЕ_ПРОСМОТР_ОТВЕТОВ_АНКЕТ = "ПросмотрОтветовАнкет"
@ВПроекте
конст РОЛЬ_АНКЕТОЛОГ = "Анкетолог"

@ВПроекте
@НаСервере
метод ДобавитьРоли()
    ДобавитьРольАнкетолог()
;

@НаСервере
метод ДобавитьРольАнкетолог()
    КонтрольДоступа.ДобавитьРоль(
        "Анкетолог",
        РОЛЬ_АНКЕТОЛОГ,
        [
            ПолномочиеРедактированиеШаблоновАнкет(),
            ПолномочиеПросмотрШаблоновАнкет(),
            ПолномочиеРедактированиеОпросов(),
            ПолномочиеПросмотрОпросов(),
            ПолномочиеРедактированиеАнкет(),
            ПолномочиеПросмотрАнкет(),
            ПолномочиеПросмотрОтветовАнкет()
        ],
        "Отвечает за разработку, администрирование, проведение и анализ опросов (анкет) в компании."
    )
;

@ВПодсистеме
@НаСервере
метод ДобавитьПолномочия()
    ДобавитьПолномочиеРедактированиеШаблоновАнкет()
    ДобавитьПолномочиеПросмотрШаблоновАнкет()
    ДобавитьПолномочиеРедактированиеОпросов()
    ДобавитьПолномочиеПросмотрОпросов()
    ДобавитьПолномочиеРедактированиеАнкет()
    ДобавитьПолномочиеПросмотрАнкет()
    ДобавитьПолномочиеПросмотрОтветовАнкет()
;

@ВПроекте
@НаСервере
метод ПолномочиеРедактированиеШаблоновАнкет(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ШАБЛОНОВ_АНКЕТ)
;

@ВПроекте
@НаСервере
метод ПолномочиеПросмотрШаблоновАнкет(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_ПРОСМОТР_ШАБЛОНОВ_АНКЕТ)
;

@ВПроекте
@НаСервере
метод ПолномочиеРедактированиеОпросов(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ОПРОСОВ)
;

@ВПроекте
@НаСервере
метод ПолномочиеПросмотрОпросов(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_ПРОСМОТР_ОПРОСОВ)
;

@ВПроекте
@НаСервере
метод ПолномочиеРедактированиеАнкет(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_АНКЕТ)
;

@ВПроекте
@НаСервере
метод ПолномочиеПросмотрАнкет(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_ПРОСМОТР_АНКЕТ)
;

@ВПроекте
@НаСервере
метод ПолномочиеПросмотрОтветовАнкет(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_ПРОСМОТР_ОТВЕТОВ_АНКЕТ)
;

@НаСервере
метод ДобавитьПолномочиеРедактированиеШаблоновАнкет()
    КонтрольДоступа.ДобавитьПолномочие(
        "Редактирование шаблонов анкет",
        ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ШАБЛОНОВ_АНКЕТ,
        "")
;

@НаСервере
метод ДобавитьПолномочиеПросмотрШаблоновАнкет()
    КонтрольДоступа.ДобавитьПолномочие(
        "Просмотр шаблонов анкет",
        ПОЛНОМОЧИЕ_ПРОСМОТР_ШАБЛОНОВ_АНКЕТ,
        "")
;

@НаСервере
метод ДобавитьПолномочиеРедактированиеОпросов()
    КонтрольДоступа.ДобавитьПолномочие(
        "Редактирование опросов",
        ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_ОПРОСОВ,
        "")
;

@НаСервере
метод ДобавитьПолномочиеПросмотрОпросов()
    КонтрольДоступа.ДобавитьПолномочие(
        "Просмотр опросов",
        ПОЛНОМОЧИЕ_ПРОСМОТР_ОПРОСОВ,
        "")
;

@НаСервере
метод ДобавитьПолномочиеРедактированиеАнкет()
    КонтрольДоступа.ДобавитьПолномочие(
        "Редактирование анкет",
        ПОЛНОМОЧИЕ_РЕДАКТИРОВАНИЕ_АНКЕТ,
        "",
        КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица())
;

@НаСервере
метод ДобавитьПолномочиеПросмотрАнкет()
    КонтрольДоступа.ДобавитьПолномочие(
        "Просмотр анкет",
        ПОЛНОМОЧИЕ_ПРОСМОТР_АНКЕТ,
        "",
        КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица())
;

@НаСервере
метод ДобавитьПолномочиеПросмотрОтветовАнкет()
    КонтрольДоступа.ДобавитьПолномочие(
        "Просмотр ответов анкет",
        ПОЛНОМОЧИЕ_ПРОСМОТР_ОТВЕТОВ_АНКЕТ,
        "",
        КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица())
;

//КонтрольДоступа

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ЗаполненОтвет(Вопрос: ДанныеЭлементаКонструктора): Булево

    выбор Вопрос.ДанныеВопроса.ТипОтвета
    когда Строка
        возврат не Вопрос.ДанныеОтвета.ЗначениеСтрока.Пусто()
    когда ПредопределенныйВариантЕдиничный
        возврат Вопрос.ДанныеОтвета.ЗначенияПредопределенные.Размер() != 0
    когда ПредопределенныйВариантМножественный
        возврат Вопрос.ДанныеОтвета.ЗначенияПредопределенные.Размер() != 0
    когда Дата
        возврат Вопрос.ДанныеОтвета.ЗначениеДата != Дата{}
    когда Файл
        возврат Вопрос.ДанныеОтвета.ЗначениеПрисоединенныйФайл != Неопределено
    когда Число
        возврат Вопрос.ДанныеОтвета.ЗначениеЧисло != Неопределено
    ;
    
    возврат Истина          
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод СохранитьАнкетыОпроса(Респонденты: Массив<РеспондентАнкетирования.Ссылка>, Опрос: Опросы.Ссылка, Шаблон: ШаблоныАнкет.Ссылка)
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    исп Транзакции.Начать()
    знч НаборЗаписей = новый АнкетыОпроса.НаборЗаписей()
    НаборЗаписей.Фильтр.Опрос.Установить(Опрос)
    
    для Респондент из Респонденты
        пер Анкета = Анкетирование.СоздатьАнкету(Респондент, Шаблон, СтатусыАнкет.Отправлена, ПроисхождениеАнкет.ЧастьОпроса)
        
        НаборЗаписей.ДобавитьЗапись(
            Опрос = Опрос,
            Анкета = Анкета
        )
    ;
    
    попытка 
        НаборЗаписей.Записать(Замещать = Ложь)
    поймать Исключение: ИсключениеЗаписьНеУникальна
        выбросить Исключение
    вконце
        ПривилегированныйРежим.Закрыть()
    ;
    
;

@ВПодсистеме
@НаКлиенте
метод ВидЦветаПоСостояниюОпроса(Статус: СтатусыОпросов): БиблиотекаЦветов.ВидыЦвета
    пер ВидЦвета: БиблиотекаЦветов.ВидыЦвета
    выбор Статус
    когда НеЗапущен
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.Серый
    когда Запущен
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.Синий
    когда Запланирован
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.КнопкаПоУмолчанию
    когда Завершен
    
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.Зеленый
    ;
    
    возврат ВидЦвета
;

@ВПодсистеме
@НаКлиенте
метод СкопироватьДанныеВопроса(КопируемыеДанные: ДанныеВопроса): ДанныеВопроса
    
    пер ДанныеВопроса = новый ДанныеВопроса()
    ДанныеВопроса.Формулировка = КопируемыеДанные.Формулировка
    ДанныеВопроса.Пояснение = КопируемыеДанные.Пояснение
    ДанныеВопроса.ТипОтвета = КопируемыеДанные.ТипОтвета
    ДанныеВопроса.ОтветОбязателен = КопируемыеДанные.ОтветОбязателен
    ДанныеВопроса.НомерРаздела = КопируемыеДанные.НомерРаздела
    ДанныеВопроса.Подсказка = КопируемыеДанные.Подсказка
    ДанныеВопроса.ИдПредопределенногоВопроса = КопируемыеДанные.ИдПредопределенногоВопроса
    ДанныеВопроса.ИспользоватьПредопределенныйНабор = КопируемыеДанные.ИспользоватьПредопределенныйНабор
    ДанныеВопроса.ИдНабораВариантов = КопируемыеДанные.ИдНабораВариантов
    если ДанныеВопроса.ИспользоватьПредопределенныйНабор и ДанныеВопроса.ИдПредопределенногоВопроса != Неопределено
        ДанныеВопроса.НаборВариантов = НаборыВариантовОтвета.ПредопределенныйНабор(ДанныеВопроса.ИдНабораВариантов)
    ;
    
    для КопируемыйПодвопрос из КопируемыеДанные.СоставСтруктурногоОтвета
        пер Подвопрос = новый ДанныеЭлементаКонструктора()
        Подвопрос.ДанныеВопроса = новый ДанныеВопроса()
        Подвопрос.ДанныеВопроса.Формулировка = КопируемыйПодвопрос.ДанныеВопроса.Формулировка
        Подвопрос.ДанныеВопроса.Пояснение = КопируемыйПодвопрос.ДанныеВопроса.Пояснение
        Подвопрос.ДанныеВопроса.Подсказка = КопируемыйПодвопрос.ДанныеВопроса.Подсказка
        Подвопрос.ДанныеВопроса.ТипОтвета = КопируемыйПодвопрос.ДанныеВопроса.ТипОтвета
        Подвопрос.ДанныеВопроса.ОтветОбязателен = КопируемыйПодвопрос.ДанныеВопроса.ОтветОбязателен
        Подвопрос.ДанныеВопроса.ИдПредопределенногоВопроса = КопируемыйПодвопрос.ДанныеВопроса.ИдПредопределенногоВопроса
        Подвопрос.ДанныеВопроса.НомерРаздела = КопируемыйПодвопрос.ДанныеВопроса.НомерРаздела
        Подвопрос.ДанныеВопроса.ИспользоватьПредопределенныйНабор = КопируемыйПодвопрос.ДанныеВопроса.ИспользоватьПредопределенныйНабор
        Подвопрос.ДанныеВопроса.ИдНабораВариантов = КопируемыйПодвопрос.ДанныеВопроса.ИдНабораВариантов
        
        если Подвопрос.ДанныеВопроса.ИспользоватьПредопределенныйНабор и Подвопрос.ДанныеВопроса.ИдПредопределенногоВопроса != Неопределено
            Подвопрос.ДанныеВопроса.НаборВариантов = НаборыВариантовОтвета.ПредопределенныйНабор(КопируемыйПодвопрос.ДанныеВопроса.ИдНабораВариантов)
        ;
        
        Подвопрос.ЗаголовокЭлемента = КопируемыйПодвопрос.ЗаголовокЭлемента
        Подвопрос.ИконкаЭлемента = КопируемыйПодвопрос.ИконкаЭлемента
        Подвопрос.ИдРаздела = КопируемыйПодвопрос.ИдРаздела
        Подвопрос.ПриоритетРаздела = КопируемыйПодвопрос.ПриоритетРаздела
        Подвопрос.НомерВопроса = КопируемыйПодвопрос.НомерВопроса
        Подвопрос.ИдСоставногоВопроса = КопируемыйПодвопрос.ИдСоставногоВопроса
        
        Подвопрос.ДанныеВопроса.НастройкиВопроса = КопируемыйПодвопрос.ДанныеВопроса.НастройкиВопроса
        пер СвойстваНастроек = Подвопрос.ДанныеВопроса.НастройкиВопроса.ПолучитьТип().ПолучитьСвойства()
        для СвойствоНастроек из СвойстваНастроек
            пер КопируемоеСвойство = КопируемыйПодвопрос.ДанныеВопроса.НастройкиВопроса.ПолучитьТип().ПолучитьСвойство(СвойствоНастроек.Имя.Русский)
            КопируемоеСвойство = СвойствоНастроек
        ; 
        
        Подвопрос.ДанныеВопроса.ВариантыОтвета = СкопироватьВарианты(КопируемыйПодвопрос.ДанныеВопроса.ВариантыОтвета)
    
        ДанныеВопроса.СоставСтруктурногоОтвета.Добавить(Подвопрос)
        
    ;

    ДанныеВопроса.НастройкиВопроса = КопируемыеДанные.НастройкиВопроса
    пер СвойстваНастроек = ДанныеВопроса.НастройкиВопроса.ПолучитьТип().ПолучитьСвойства()
    для СвойствоНастроек из СвойстваНастроек
        пер КопируемоеСвойство = КопируемыеДанные.НастройкиВопроса.ПолучитьТип().ПолучитьСвойство(СвойствоНастроек.Имя.Русский)
        КопируемоеСвойство = СвойствоНастроек
    ;    
    
    ДанныеВопроса.ВариантыОтвета = СкопироватьВарианты(КопируемыеДанные.ВариантыОтвета)
    
    возврат ДанныеВопроса  
;

метод СкопироватьВарианты(КопируемыеВарианты: Массив<ДанныеВариантаОтвета> ): Массив<ДанныеВариантаОтвета>
    пер ВариантыОтвета: Массив<ДанныеВариантаОтвета> 
    для ВариантОтвета из КопируемыеВарианты
        пер Вариант = новый ДанныеВариантаОтвета()
        Вариант.ПредставлениеВарианта = ВариантОтвета.ПредставлениеВарианта
        Вариант.ЗначениеВарианта = Ложь
        Вариант.ИдВарианта = новый Ууид()
        ВариантыОтвета.Добавить(Вариант)        
    ;    
    
    возврат ВариантыОтвета
;

@ВПроекте
@НаКлиенте
метод ВидЦветаПоСостояниюАнкеты(Статус: СтатусыАнкет?): БиблиотекаЦветов.ВидыЦвета
    пер ВидЦвета: БиблиотекаЦветов.ВидыЦвета
    выбор Статус
    когда Создана
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.Серый
    когда Отправлена
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.Синий
    когда Заполняется
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.Оранжевый
    когда Заполнена
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.Зеленый
    иначе
        ВидЦвета = БиблиотекаЦветов.ВидыЦвета.КнопкаПоУмолчанию
    ;
    
    возврат ВидЦвета
;

@ВПроекте
@НаКлиенте
метод МаксимальнаяШиринаФормыДокумента(): Число
    возврат 75 * Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА 
;

@ВПроекте
@НаКлиенте
метод МинимальнаяШиринаФормыДокумента(): Число
    пер МинимальнаяШиринаПолуинтервалы: Число
    если КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон
        МинимальнаяШиринаПолуинтервалы = 36
    иначе
        МинимальнаяШиринаПолуинтервалы = 40
    ;      
    возврат МинимальнаяШиринаПолуинтервалы * Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА
;

@ВПроекте
@НаКлиенте
метод ВысотаФормыДокумента(ПредпочтительнаяВысотаВПолуинтервалах: Число): Число
    пер ВысотаФормыДокумента: Число
    если КлиентскоеУстройство.ВидИнтерфейса != ВидИнтерфейса.Телефон
        пер МаксимальнаяВысота: Число = КлиентскоеУстройство.ВысотаОкнаПриложения * 0.9
        МаксимальнаяВысота = (МаксимальнаяВысота/Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА).Округлить() * Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА
        пер ПредпочтительнаяВысота: Число = ПредпочтительнаяВысотаВПолуинтервалах * Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА
        ВысотаФормыДокумента = ПредпочтительнаяВысота > МаксимальнаяВысота ? МаксимальнаяВысота : ПредпочтительнаяВысота
    ;
    возврат ВысотаФормыДокумента
;

@ВПодсистеме
@НаКлиенте
метод ДанныеВопросаУмолчание(ТипОтвета: ТипыОтветов): ДанныеВопроса
    пер ДанныеВопроса = новый ДанныеВопроса()
    ДанныеВопроса.ВариантыОтвета = ВариантыОтветаУмолчание()
    ДанныеВопроса.ТипОтвета = ТипОтвета
    возврат ДанныеВопроса    
;

@ВПодсистеме
@НаКлиенте @НаСервере
метод ЗаполнитьЭлементКонструктораДанными(ДанныеВопроса: ДанныеВопроса, ИдРаздела: Ууид, ПриоритетРаздела: Число): ДанныеЭлементаКонструктора

    пер ЭлементКонструктора = новый ДанныеЭлементаКонструктора()
    ЭлементКонструктора.ИдЭлемента = новый Ууид()
    ЭлементКонструктора.РежимРедактирования = Истина
    ЭлементКонструктора.ДанныеВопроса = ДанныеВопроса
    ЭлементКонструктора.ИдРаздела = ИдРаздела
    ЭлементКонструктора.ПриоритетРаздела = ПриоритетРаздела
    возврат ЭлементКонструктора
;

@ВПодсистеме
@НаКлиенте
метод ВариантыОтветаУмолчание(): Массив<ДанныеВариантаОтвета>
    пер МассивВариантов = новый Массив<ДанныеВариантаОтвета>()
    для счетчик = 1 по 2
        пер Вариант = новый ДанныеВариантаОтвета()
        Вариант.ПредставлениеВарианта = "Вариант " + счетчик.ВСтроку()
        Вариант.ЗначениеВарианта = Ложь
        Вариант.ИдВарианта = новый Ууид()
        МассивВариантов.Добавить(Вариант)        
    ;

    возврат МассивВариантов    
;

@ВПодсистеме
@НаКлиенте
метод КомпонентКонструктораПоТипуОтвета(ТипОтвета:ТипыОтветов): КомпонентКонструктора?
    
    пер КомпонентКонструктора: КомпонентКонструктора?
    
    выбор ТипОтвета      
    когда Строка
        КомпонентКонструктора = новый КомпонентКонструктораТекст()
    когда Число
        КомпонентКонструктора = новый КомпонентКонструктораЧисло()
    когда ПредопределенныйВариантЕдиничный
        КомпонентКонструктора = новый КомпонентКонструктораВариантыОтвета(МножественныйВыбор = Ложь)
    когда ПредопределенныйВариантМножественный
        КомпонентКонструктора = новый КомпонентКонструктораВариантыОтвета(МножественныйВыбор = Истина)
    когда Файл
        КомпонентКонструктора = новый КомпонентКонструктораЗагрузкаФайла()
    когда Дата
        КомпонентКонструктора = новый КомпонентКонструктораДата()
    когда Составной
        КомпонентКонструктора = новый КомпонентКонструктораСоставной()
    иначе 
        КомпонентКонструктора = Неопределено    
    ;
    
    возврат КомпонентКонструктора
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ОписаниеПодсистемГотовыхВопросов(): Массив<ОбластьДанных>
    пер Описания: Массив<ОбластьДанных>
    знч Сервисы = ПриемникОтветов.ПолучитьСервисы()
    для Сервис из Сервисы
        Описания.ДобавитьВсе(Сервис.ОбластиДанных())
    ;
    возврат Описания
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ГотовыеВопросыПодсистемы(ИдОбластиДанных: Ууид?): Массив<ДанныеВопроса>
    пер ГотовыеВопросыПодсистем: Массив<ДанныеВопроса>
    
    если ИдОбластиДанных == Неопределено
        возврат ГотовыеВопросыПодсистем
    ;
    
    знч Сервисы = ПриемникОтветов.ПолучитьСервисы()
    для Сервис из Сервисы
        пер Вопросы = Сервис.ПредопределенныеВопросы(ИдОбластиДанных)
        ГотовыеВопросыПодсистем.ДобавитьВсе(Вопросы)
    ;
    возврат ГотовыеВопросыПодсистем
;

@ВПодсистеме
@НаКлиенте
метод ТипОтветаИнструмента(ИнструментКонструктора: ИнструментыКонструктора): ТипыОтветов?
    
    пер ТипОтвета: ТипыОтветов?
    
    выбор ИнструментКонструктора      
    когда Текст
        ТипОтвета = ТипыОтветов.Строка
    когда Число
        ТипОтвета = ТипыОтветов.Число
    когда ВыборОдногоВарианта
        ТипОтвета = ТипыОтветов.ПредопределенныйВариантЕдиничный
    когда ВыборНесколькихВариантов
        ТипОтвета = ТипыОтветов.ПредопределенныйВариантМножественный
    когда ЗагрузкаФайла
        ТипОтвета = ТипыОтветов.Файл
    когда Дата
        ТипОтвета = ТипыОтветов.Дата
    когда СоставнойОтвет
        ТипОтвета = ТипыОтветов.Составной
    иначе 
        ТипОтвета = Неопределено    
    ;
    
    возврат ТипОтвета
;

@ВПодсистеме
@НаКлиенте
метод КопияПодвопросов(СоставнойВопрос: ДанныеЭлементаКонструктора): Массив<ДанныеЭлементаКонструктора>
    пер КопияПодвопросов: Массив<ДанныеЭлементаКонструктора>
    для Подвопрос из СоставнойВопрос.ДанныеВопроса.СоставСтруктурногоОтвета
        пер КопияПодвопроса = КопияПодвопроса(Подвопрос, СоставнойВопрос.ИдРаздела, СоставнойВопрос.ПриоритетРаздела)
        КопияПодвопросов.Добавить(КопияПодвопроса)
    ;
    
    возврат КопияПодвопросов
;

@ВПодсистеме
@НаКлиенте @НаСервере
метод КопияПодвопроса(Подвопрос: ДанныеЭлементаКонструктора, ИдРаздела: Ууид?, ПриоритетРаздела: Число): ДанныеЭлементаКонструктора
    пер КопияПодвопроса = ЗаполнитьЭлементКонструктораДанными(Подвопрос.ДанныеВопроса, ИдРаздела, ПриоритетРаздела)
    КопияПодвопроса.ДанныеОтвета = новый ДанныеОтвета()
    КопияПодвопроса.РежимРедактирования = Ложь
    КопияПодвопроса.НомерВопроса = Подвопрос.НомерВопроса
    КопияПодвопроса.ИдСоставногоВопроса = Подвопрос.ИдСоставногоВопроса
    КопияПодвопроса.НомерСоставногоВопроса = Подвопрос.НомерСоставногоВопроса
    
    возврат КопияПодвопроса
;

@ВПодсистеме
@НаКлиенте @НаСервере
структура ДанныеВопросаШаблона
    обз пер ИдВопросаШаблона: Ууид?
    обз пер Приоритет: Число
    обз пер Вопрос: Вопросы.Ссылка?
    обз пер Шаблон: ШаблоныАнкет.Ссылка?
    обз пер Раздел: РазделыАнкет.Ссылка?
    обз пер ИдРаздела: Ууид?
    обз пер ДанныеВопроса: ДанныеВопроса
    обз пер ОтветОбязателен: Булево 
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СоздатьАнкету(Респондент: РеспондентАнкетирования.Ссылка?, Шаблон: ШаблоныАнкет.Ссылка?, Статус: СтатусыАнкет, Происхождение: ПроисхождениеАнкет?): Анкеты.Ссылка?
    исп Транзакции.Начать()
    пер АнкетаОбъект = новый Анкеты.Объект()
    АнкетаОбъект.Наименование = Шаблон.Представление()
    АнкетаОбъект.Респондент = Респондент
    АнкетаОбъект.Шаблон = Шаблон
    АнкетаОбъект.ДатаПоследнегоРедактирования = МенеджерДат.ТекущаяДатаВремя()
    АнкетаОбъект.Создатель = ПользователиСистемы.ТекущееФизическоеЛицо()
    АнкетаОбъект.ДатаСоздания = МенеджерДат.ТекущаяДатаВремя()
    АнкетаОбъект.Статус = Статус
    знч СервисРегистрацииИзменений = АнкетированиеРегистрацияИзменений.ПолучитьСервис()
    АнкетаОбъект.УровеньДоступности = СервисРегистрацииИзменений.УровеньДоступностиАнкеты()
    АнкетаОбъект.Происхождение = Происхождение
    АнкетаОбъект.Записать()
    УведомитьПодсистемыОбОтправкеРеспонденту(АнкетаОбъект.Ссылка, Респондент)
    возврат АнкетаОбъект.Ссылка
;   

@НаСервере
метод УведомитьПодсистемыОбОтправкеРеспонденту(Анкета: Анкеты.Ссылка, Респондент: РеспондентАнкетирования.Ссылка?)
    знч СервисыУведомлений = УведомленияАнкетирования.ПолучитьСервисы()
    для СервисУведомления из СервисыУведомлений
        СервисУведомления.ОтправкаАнкетыРеспонденту(Анкета, Респондент)
    ;
;

@ВПроекте
@НаКлиенте
метод СписокШаблоновИзображение(ДанныеСтроки: СтрокаДинамическогоСписка): ДвоичныйОбъект.Ссылка?
    если ДанныеСтроки.Данные["Аватар"] это Null
        возврат СтандартноеПриложение.ПараметрыСеанса().АватарПоУмолчанию
    иначе
        возврат ДанныеСтроки.Данные["Аватар"] как ДвоичныйОбъект.Ссылка?
    ;
;

@ВПроекте
@НаКлиенте
метод СписокШаблоновФамилияИнициалы(ДанныеСтроки: СтрокаДинамическогоСписка): Строка
    если ДанныеСтроки.Данные["Фамилия"] это Null
        возврат "не указан"
    иначе
        возврат (ДанныеСтроки.Данные["Фамилия"] как Строка) + " " + (ДанныеСтроки.Данные["ИнициалыИмени"] как Строка)
    ;
;

@ВПроекте
@НаКлиенте
метод СписокШаблоновДатаСоздания(ДанныеСтроки: СтрокаДинамическогоСписка): Строка
    пер ДатаСоздания = ДанныеСтроки.Данные["МоментСоздания"] как Момент?
    
    возврат ДатаСоздания == Неопределено ? "" : ДатаСоздания!.ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий()).Представление("дд.ММ.гггг ЧЧ:мм")
;

@ВПроекте
@НаКлиенте
метод СписокШаблоновДатаРедактирования(ДанныеСтроки: СтрокаДинамическогоСписка): Строка
    пер ДатаРедактирования = ДанныеСтроки.Данные["МоментРедактирования"] как Момент?
    
    возврат ДатаРедактирования == Неопределено ? "" : ДатаРедактирования!.ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий()).Представление("дд.ММ.гггг ЧЧ:мм")   
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СохранитьОтвет(Анкета: Анкеты.Ссылка?, Вопрос: Вопросы.Ссылка?, ДанныеОтвета: ДанныеОтвета, СоставнойОтвет: Ответы.Ссылка?): Ответы.Ссылка?
    пер Ответ = новый Ответы.Объект()
    Ответ.Анкета = Анкета
    Ответ.Вопрос = Вопрос
    Ответ.ЗначениеСтрока = ДанныеОтвета.ЗначениеСтрока
    Ответ.ЗначениеДата = ДанныеОтвета.ЗначениеДата
    Ответ.ЗначениеЧисло = ДанныеОтвета.ЗначениеЧисло
    если ДанныеОтвета.ЗначениеПрисоединенныйФайл != Неопределено
        Ответ.ЗначениеФайл = СохранитьПрисоединенныйФайл(ДанныеОтвета.ЗначениеПрисоединенныйФайл, Анкета)
    ;
    Ответ.ЯвляетсяСоставным = ДанныеОтвета.ЯвляетсяСоставным
    Ответ.СоставнойОтвет = СоставнойОтвет
    Ответ.ЗначениеКомментария = ДанныеОтвета.ЗначениеКомментария
    
    пер ПредставлениеПредопределенныхОтветов: Строка
    
    для ПредопределенныйОтвет из ДанныеОтвета.ЗначенияПредопределенные
        Ответ.ЗначенияПредопределенные.Добавить(ПредопределенныйОтвет)
        ПредставлениеПредопределенныхОтветов += ПредопределенныйОтвет.Представление() + ";"
    ;
    
    Ответ.ПредставлениеПредопределенныхОтветов = ПредставлениеПредопределенныхОтветов
    Ответ.Записать()
    
    возврат Ответ.Ссылка
;

@НаСервере
метод СохранитьПрисоединенныйФайл(ПрисоединенныйФайл: ПрисоединенныйФайл, Владелец: ВладелецФайлы.Ссылка): Файлы.Ссылка?
    
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    
    пер ФайлОбъект: Файлы.Объект = новый Файлы.Объект().Заполнить()
    ФайлОбъект.Наименование = ПрисоединенныйФайл.Наименование
    ФайлОбъект.Расширение = ПрисоединенныйФайл.Расширение
    ФайлОбъект.Размер = ПрисоединенныйФайл.Размер
    ФайлОбъект.Хранилище = ПрисоединенныйФайл.Хранилище
    ФайлОбъект.ДатаСоздания = ПрисоединенныйФайл.ДатаСоздания
    ФайлОбъект.ВидФайла = ПрисоединенныйФайл.ВидФайла
    ФайлОбъект.ИдентификаторЭлектронногоДокумента = ПрисоединенныйФайл.ИдентификаторЭлектронногоДокумента
    ФайлОбъект.Владелец = Владелец
    ФайлОбъект.Записать()
    
    ПривилегированныйРежим.Закрыть()
    
    возврат ФайлОбъект.Ссылка
;
@ВПроекте
@НаСервере @ДоступноСКлиента
метод ВопросыШаблона(Шаблон: ШаблоныАнкет.Ссылка?): Массив<ДанныеЭлементаКонструктора>
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()    
    пер ВопросыШаблона = новый Массив<ДанныеЭлементаКонструктора>()
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка.Ид как ИдЭлемента,
            Ссылка как ВопросШаблона,
            Приоритет,
            Шаблон,
            Раздел.ЗаменитьNull(Неопределено) как Раздел,
            Раздел.Ид.ЗаменитьNull(Неопределено) как ИдРаздела,
            Вопрос,
            Вопрос.Ид.ЗаменитьNull(Неопределено) как ИдВопроса,
            Вопрос.Формулировка.ЗаменитьNull("") как ФормулировкаВопроса,
            Вопрос.Пояснение.ЗаменитьNull("") как ПояснениеВопроса,
            Вопрос.ПодсказкаВвода.ЗаменитьNull("") как ПодсказкаВвода,
            Вопрос.ТипОтвета.ЗаменитьNull(Неопределено) как ТипОтветаВопроса,
            Вопрос.СоставнойВопрос.ЗаменитьNull(Неопределено) как СоставнойВопрос,
            Вопрос.ИспользоватьПредопределенныйНабор.ЗаменитьNull(Ложь) как ИспользоватьПредопределенныйНабор,
            Вопрос.ИдПредопределенногоВопроса.ЗаменитьNull(Неопределено) как ИдПредопределенногоВопроса,
            Вопрос.НаборВариантов.ЗаменитьNull(Неопределено) как НаборВариантов,
            Вопрос.НаборВариантов.ИдПредопределенногоНабора.ЗаменитьNull(Неопределено) как ИдПредопределенногоНабора,
            Вопрос.НастройкиВопроса.ЗаменитьNull(Неопределено) как НастройкиВопроса,
            ОтветОбязателен
        Из 
            ВопросыШаблоновАнкет как ВопросыШаблоновАнкет
        Где
            Шаблон == %Шаблон}

    исп РезультатЗапроса = Запрос.Выполнить()
    ПривилегированныйРежим.Закрыть()
    
    для РезультатЗапросаСтрока из РезультатЗапроса
        пер ДанныеВопроса = новый ДанныеВопроса()
        ДанныеВопроса.ИдВопроса = РезультатЗапросаСтрока.ИдВопроса
        ДанныеВопроса.Формулировка = РезультатЗапросаСтрока.ФормулировкаВопроса
        ДанныеВопроса.Пояснение = РезультатЗапросаСтрока.ПояснениеВопроса
        ДанныеВопроса.Подсказка = РезультатЗапросаСтрока.ПодсказкаВвода
        ДанныеВопроса.ТипОтвета = РезультатЗапросаСтрока.ТипОтветаВопроса
        ДанныеВопроса.ОтветОбязателен = РезультатЗапросаСтрока.ОтветОбязателен
        ДанныеВопроса.Вопрос = РезультатЗапросаСтрока.Вопрос
        ДанныеВопроса.ИспользоватьПредопределенныйНабор = РезультатЗапросаСтрока.ИспользоватьПредопределенныйНабор
        ДанныеВопроса.ИдПредопределенногоВопроса = РезультатЗапросаСтрока.ИдПредопределенногоВопроса
        если РезультатЗапросаСтрока.НастройкиВопроса != Неопределено
            ДанныеВопроса.НастройкиВопроса = РезультатЗапросаСтрока.НастройкиВопроса!
        ;
        если РезультатЗапросаСтрока.НаборВариантов != Неопределено
            ДанныеВопроса.НаборВариантов = РезультатЗапросаСтрока.НаборВариантов
            ДанныеВопроса.ИдНабораВариантов = РезультатЗапросаСтрока.ИдПредопределенногоНабора
            ДанныеВопроса.ВариантыОтвета = ВариантыОтветаПоНабору(РезультатЗапросаСтрока.НаборВариантов)    
        ;
        
        если РезультатЗапросаСтрока.ТипОтветаВопроса == ТипыОтветов.Составной
            ДанныеВопроса.СоставСтруктурногоОтвета = ПодвопросыСоставногоВопроса(РезультатЗапросаСтрока.Вопрос, РезультатЗапросаСтрока.ИдРаздела, РезультатЗапросаСтрока.Приоритет, ДанныеВопроса.ОтветОбязателен)
        ;
        
        пер ВопросШаблона = новый ДанныеЭлементаКонструктора()
        ВопросШаблона.ДанныеВопроса = ДанныеВопроса
        ВопросШаблона.ИдРаздела = РезультатЗапросаСтрока.ИдРаздела
        ВопросШаблона.ИдЭлемента = РезультатЗапросаСтрока.ИдЭлемента
        ВопросШаблона.НомерВопроса = РезультатЗапросаСтрока.Приоритет
        ВопросШаблона.РежимРедактирования = Ложь
        ВопросыШаблона.Добавить(ВопросШаблона)
    ;
    
    возврат ВопросыШаблона
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод УдалитьПредыдущиеОтветы(Анкета: Анкеты.Ссылка?)
    
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный() 
    
    знч Запрос = Запрос{
    Выбрать
        Ссылка как Ответ
    Из 
        Ответы как Ответы
    Где 
        Анкета == %Анкета}
        
    исп РезультатЗапроса = Запрос.Выполнить()
     для РезультатСтрока из РезультатЗапроса
        пер ОтветыОбъект = РезультатСтрока.Ответ.ЗагрузитьОбъект()
        ОтветыОбъект.Удалить()
    ; 
    
    ПривилегированныйРежим.Закрыть()
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СохранитьОтветы(Анкета: Анкеты.Ссылка?, ДанныеАнкеты: Массив<ДанныеЭлементаКонструктора>)
    
    пер ИмпортируемыйОтвет: ИмпортируемыйОтвет
    пер СтруктураОтвета: Массив<СтруктураОтвета>
    
    для ЭлементАнкеты из ДанныеАнкеты
        если не ЗаполненОтвет(ЭлементАнкеты)
            продолжить
        ;
        если ЭлементАнкеты.ДанныеВопроса.ТипОтвета == ТипыОтветов.Составной
            для СоставнойОтвет из ЭлементАнкеты.ДанныеСоставногоОтвета
                если не ЗаполненОдинИзОтветовСоставногоВопроса(СоставнойОтвет.Ответ)
                    продолжить
                ;
                
                ЭлементАнкеты.ДанныеОтвета.ЯвляетсяСоставным = Истина
                пер ОтветСсылка = СохранитьОтвет(Анкета, ЭлементАнкеты.ДанныеВопроса.Вопрос, ЭлементАнкеты.ДанныеОтвета, Неопределено)
                СтруктураОтвета.Добавить(новый СтруктураОтвета(ЭлементАнкеты.ДанныеВопроса.ИдПредопределенногоВопроса, ЭлементАнкеты.ДанныеОтвета))
                для Ответ из СоставнойОтвет.Ответ
                    СохранитьОтвет(Анкета, Ответ.ДанныеВопроса.Вопрос, Ответ.ДанныеОтвета, ОтветСсылка)
                    СтруктураОтвета.Добавить(новый СтруктураОтвета(Ответ.ДанныеВопроса.ИдПредопределенногоВопроса, Ответ.ДанныеОтвета))
                ;
            ;
        иначе
            пер ДанныеОтвета = ЭлементАнкеты.ДанныеОтвета
            СохранитьОтвет(Анкета, ЭлементАнкеты.ДанныеВопроса.Вопрос, ДанныеОтвета, Неопределено)
            СтруктураОтвета.Добавить(новый СтруктураОтвета(ЭлементАнкеты.ДанныеВопроса.ИдПредопределенногоВопроса, ДанныеОтвета))
        ;
    ;
    
    пер АнкетаОбъект = Анкета.ЗагрузитьОбъект()
    
    ИмпортируемыйОтвет.Респондент = АнкетаОбъект.Респондент
    ИмпортируемыйОтвет.ИдОбластиДанных = АнкетаОбъект.Шаблон.ЗагрузитьОбъект().ИдОбластиДанных
    ИмпортируемыйОтвет.Ответы = СтруктураОтвета
    
    ОповеститьПоставщиковВопросов(ИмпортируемыйОтвет)
;

метод ЗаполненОдинИзОтветовСоставногоВопроса(Ответы: Массив<ДанныеЭлементаКонструктора>): Булево
    пер ЗаполненОтвет = Ложь
    для Ответ из Ответы
        если ЗаполненОтвет(Ответ)
            ЗаполненОтвет = Истина
            прервать
        ;    
    ;
    
    возврат ЗаполненОтвет
;

@ВПроекте
@НаСервере
метод ЗаполнитьСтуктуруОтветов(ДанныеАнкеты: Массив<ДанныеЭлементаКонструктора>): Массив<СтруктураОтвета>
    
    пер СтруктураОтвета: Массив<СтруктураОтвета>
    
    для ЭлементАнкеты из ДанныеАнкеты
        если ЭлементАнкеты.ДанныеВопроса.ТипОтвета == ТипыОтветов.Составной
            для СоставнойОтвет из ЭлементАнкеты.ДанныеСоставногоОтвета
                ЭлементАнкеты.ДанныеОтвета.ЯвляетсяСоставным = Истина
                СтруктураОтвета.Добавить(новый СтруктураОтвета(ЭлементАнкеты.ДанныеВопроса.ИдПредопределенногоВопроса, ЭлементАнкеты.ДанныеОтвета))
                для Ответ из СоставнойОтвет.Ответ
                    СтруктураОтвета.Добавить(новый СтруктураОтвета(Ответ.ДанныеВопроса.ИдПредопределенногоВопроса, Ответ.ДанныеОтвета))
                ;
            ;
        иначе
            пер ДанныеОтвета = ЭлементАнкеты.ДанныеОтвета
            СтруктураОтвета.Добавить(новый СтруктураОтвета(ЭлементАнкеты.ДанныеВопроса.ИдПредопределенногоВопроса, ДанныеОтвета))
        ;
    ;
    возврат СтруктураОтвета
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод РазделыШаблона(Шаблон: ШаблоныАнкет.Ссылка): Массив<ДанныеРаздела>?
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч Запрос = Запрос{
        Выбрать
            Ссылка как Раздел,
            Ссылка.Ид как ИдРаздела, 
            Наименование,
            Подсказка,
            Приоритет,
            Шаблон
        Из 
            РазделыАнкет
        Где 
            Шаблон == %Шаблон
        Упорядочить По Приоритет Возр}

    исп РезультатЗапроса = Запрос.Выполнить()
    ПривилегированныйРежим.Закрыть()
    знч РезультатЗапросаСтроки = новый ЧитаемыйМассив(РезультатЗапроса)
    если РезультатЗапросаСтроки.Пусто()
        возврат Неопределено
    ;
    пер Разделы = новый Массив<ДанныеРаздела>()
    для РезультатЗапросаСтрока из РезультатЗапросаСтроки
        пер Раздел = новый ДанныеРаздела()
        Раздел.Раздел = РезультатЗапросаСтрока.Раздел
        Раздел.ИдРаздела = РезультатЗапросаСтрока.ИдРаздела
        Раздел.Заголовок = РезультатЗапросаСтрока.Наименование
        Раздел.Пояснение = РезультатЗапросаСтрока.Подсказка
        Раздел.Приоритет = РезультатЗапросаСтрока.Приоритет
        Разделы.Добавить(Раздел) 
    ;
    
    возврат Разделы
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ПодвопросыСоставногоВопроса(СоставнойВопрос: Вопросы.Ссылка?, ИдРаздела: Ууид, НомерСоставногоВопроса: Число, ОтветОбязателен: Булево): Массив<ДанныеЭлементаКонструктора>
    
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()    
    пер ВопросыШаблона = новый Массив<ДанныеЭлементаКонструктора>()
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка как Вопрос,
            Ссылка.Ид как ИдВопроса,
            Формулировка как ФормулировкаВопроса,
            Пояснение как ПояснениеВопроса,
            ПодсказкаВвода как ПодсказкаВвода,
            ТипОтвета как ТипОтветаВопроса,
            СоставнойВопрос как СоставнойВопрос,
            НаборВариантов как НаборВариантов,
            НаборВариантов.ИдПредопределенногоНабора.ЗаменитьNull(Неопределено) как ИдПредопределенногоНабора,
            НастройкиВопроса как НастройкиВопроса,
            ИспользоватьПредопределенныйНабор как ИспользоватьПредопределенныйНабор,
            ИдПредопределенногоВопроса
        Из 
            Вопросы 
        Где
            СоставнойВопрос == %СоставнойВопрос}

    исп РезультатЗапроса = Запрос.Выполнить()
    ПривилегированныйРежим.Закрыть()
    пер Приоритет = 0
    для РезультатЗапросаСтрока из РезультатЗапроса
        Приоритет +=1
        пер ДанныеВопроса = новый ДанныеВопроса()
        ДанныеВопроса.ИдВопроса = РезультатЗапросаСтрока.ИдВопроса
        ДанныеВопроса.Вопрос = РезультатЗапросаСтрока.Вопрос
        ДанныеВопроса.Формулировка = РезультатЗапросаСтрока.ФормулировкаВопроса
        ДанныеВопроса.Пояснение = РезультатЗапросаСтрока.ПояснениеВопроса
        ДанныеВопроса.Подсказка = РезультатЗапросаСтрока.ПодсказкаВвода
        ДанныеВопроса.ТипОтвета = РезультатЗапросаСтрока.ТипОтветаВопроса
        ДанныеВопроса.ОтветОбязателен = ОтветОбязателен
        ДанныеВопроса.НастройкиВопроса = РезультатЗапросаСтрока.НастройкиВопроса
        ДанныеВопроса.ИдПредопределенногоВопроса = РезультатЗапросаСтрока.ИдПредопределенногоВопроса
        ДанныеВопроса.ИспользоватьПредопределенныйНабор = РезультатЗапросаСтрока.ИспользоватьПредопределенныйНабор

        если РезультатЗапросаСтрока.НаборВариантов != Неопределено
            ДанныеВопроса.НаборВариантов = РезультатЗапросаСтрока.НаборВариантов
            ДанныеВопроса.ИдНабораВариантов = РезультатЗапросаСтрока.ИдПредопределенногоНабора
            ДанныеВопроса.ВариантыОтвета = ВариантыОтветаПоНабору(РезультатЗапросаСтрока.НаборВариантов)    
        ;
        
        пер ВопросШаблона = новый ДанныеЭлементаКонструктора()
        ВопросШаблона.ДанныеВопроса = ДанныеВопроса
        ВопросШаблона.ИдРаздела = ИдРаздела
        ВопросШаблона.ИдЭлемента = РезультатЗапросаСтрока.ИдВопроса
        ВопросШаблона.НомерВопроса = Приоритет
        ВопросШаблона.НомерСоставногоВопроса = НомерСоставногоВопроса
        ВопросШаблона.РежимРедактирования = Ложь
        ВопросШаблона.ИдСоставногоВопроса = СоставнойВопрос.Ид
        ВопросыШаблона.Добавить(ВопросШаблона)
    ;
    
    возврат ВопросыШаблона
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ВариантыОтветаПоНабору(НаборВариантовОтвета: НаборыВариантовОтвета.Ссылка): Массив<ДанныеВариантаОтвета>?
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный() 
    пер ВариантыОтвета = новый Массив<ДанныеВариантаОтвета>()
    знч Запрос = Запрос{
        Выбрать
            Ссылка.Ид как ИдВарианта,
            Ссылка,
            Наименование
            Из 
            ВариантыОтветов 
        Где 
            НаборВариантовОтвета == %НаборВариантовОтвета}

    исп РезультатЗапроса = Запрос.Выполнить()
    ПривилегированныйРежим.Закрыть() 
    для РезультатЗапросаСтрока из РезультатЗапроса
        пер ВариантОтвета = новый ДанныеВариантаОтвета()
        ВариантОтвета.ИдВарианта = РезультатЗапросаСтрока.ИдВарианта
        ВариантОтвета.ПредставлениеВарианта =  РезультатЗапросаСтрока.Наименование
        ВариантОтвета.ЗначениеВарианта = Ложь
        ВариантОтвета.Вариант = РезультатЗапросаСтрока.Ссылка
        ВариантыОтвета.Добавить(ВариантОтвета)
    ;
    
    возврат ВариантыОтвета
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ДанныеАнкеты(Анкета: Анкеты.Ссылка?, Статус: СтатусыАнкет, Шаблон: ШаблоныАнкет.Ссылка?): Массив<ДанныеЭлементаКонструктора>
    
    пер ВопросыШаблона = ВопросыШаблона(Шаблон)
    
    если Статус != СтатусыАнкет.Создана
        пер ОтветыАнкеты = ОтветыАнкеты(Анкета)
        
        для ВопросАнкеты из ВопросыШаблона
            если ВопросАнкеты.ДанныеВопроса.ТипОтвета == ТипыОтветов.Составной
                
                пер СоставныеОтветы = ОтветыАнкеты.ПолучитьИлиУмолчание(ВопросАнкеты.ДанныеВопроса.Вопрос)
                если СоставныеОтветы != Неопределено
                    для СоставнойОтвет из СоставныеОтветы
                        пер ВопросыСОтветами = новый Массив<ДанныеЭлементаКонструктора>()
                        для Подвопрос из ВопросАнкеты.ДанныеВопроса.СоставСтруктурногоОтвета
                            пер КопияПодвопроса = КопияПодвопроса(Подвопрос, ВопросАнкеты.ИдРаздела, ВопросАнкеты.ПриоритетРаздела)
                            ЗаполнитьОтветПодвопроса(КопияПодвопроса, СоставнойОтвет, ОтветыАнкеты)
                            ВопросыСОтветами.Добавить(КопияПодвопроса)
                        ;
                    ВопросАнкеты.ДанныеСоставногоОтвета.Добавить(новый Анкетирование.ОтветыСоставногоВопроса(ИдОтвета = новый Ууид(), Ответ = ВопросыСОтветами))        
                    ;
                ;
            иначе

                пер ДанныеОтветов = ОтветыАнкеты.ПолучитьИлиУмолчание(ВопросАнкеты.ДанныеВопроса.Вопрос)
                если ДанныеОтветов != Неопределено
                    пер ДанныеОтвета = ДанныеОтветов.Первый()
                    если ДанныеОтвета.СоставнойОтвет != Неопределено
                        продолжить
                    ;
                    пер ЗначенияПредопределенные: Массив <ПредопределенныеЗначенияОтветов.Ссылка>
                    для Ответ из ДанныеОтветов
                        ЗначенияПредопределенные.ДобавитьВсе(Ответ.ЗначенияПредопределенные)    
                    ;
                    ДанныеОтвета.ЗначенияПредопределенные = ЗначенияПредопределенные
                    ВопросАнкеты.ДанныеОтвета = ДанныеОтвета
                ;
            ;

        ;
    ;
    возврат ВопросыШаблона    
;

@НаСервере
метод ЗаполнитьОтветПодвопроса(Подвопрос: ДанныеЭлементаКонструктора, СоставнойОтвет: ДанныеОтвета, ОтветыАнкеты: Соответствие<Вопросы.Ссылка, Массив<ДанныеОтвета>>)
    пер ОтветыНаПодвопрос = ОтветыАнкеты.ПолучитьИлиУмолчание(Подвопрос.ДанныеВопроса.Вопрос)
    если ОтветыНаПодвопрос != Неопределено
        для ОтветНаПодвопрос из ОтветыНаПодвопрос
            если ОтветНаПодвопрос.СоставнойОтвет == СоставнойОтвет.Ответ
                Подвопрос.ДанныеОтвета = ОтветНаПодвопрос
            ;
        ;    
    ;
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ОтветыАнкеты(Анкета: Анкеты.Ссылка?): Соответствие<Вопросы.Ссылка, Массив<ДанныеОтвета>>
    
    пер ОтветыАнкеты: Соответствие<Вопросы.Ссылка, Массив<ДанныеОтвета>>
    
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный() 
    
    знч Запрос = Запрос{
    Выбрать
        Ссылка как Ответ,
        Анкета,
        Вопрос,
        ЯвляетсяСоставным,
        СоставнойОтвет,
        ЗначениеСтрока,
        ЗначениеДата,
        ЗначениеЧисло,
        ЗначениеФайл,
        ЗначениеКомментария,
        ЗначенияПредопределенные.Элемент.ЗаменитьNull(Неопределено) как ПредопределенныйОтвет,
        ПредставлениеПредопределенныхОтветов
    Из 
        Ответы как Ответы
        Левое Соединение Ответы.ЗначенияПредопределенные как ЗначенияПредопределенные
        По Ответы.Ссылка == ЗначенияПредопределенные.Владелец
    Где 
        Анкета == %Анкета
    Упорядочить По
        Вопрос}
        
    исп РезультатЗапроса = Запрос.Выполнить()
    ПривилегированныйРежим.Закрыть()
     
    для РезультатЗапросаСтрока из РезультатЗапроса
        пер ДанныеОтвета = новый ДанныеОтвета(
                ЗначениеСтрока = РезультатЗапросаСтрока.ЗначениеСтрока,
                ЗначениеЧисло = РезультатЗапросаСтрока.ЗначениеЧисло,
                ЗначениеДата = РезультатЗапросаСтрока.ЗначениеДата,
                ЗначениеФайл = РезультатЗапросаСтрока.ЗначениеФайл,
                ЯвляетсяСоставным = РезультатЗапросаСтрока.ЯвляетсяСоставным,
                СоставнойОтвет = РезультатЗапросаСтрока.СоставнойОтвет,
                ЗначениеКомментария = РезультатЗапросаСтрока.ЗначениеКомментария,
                Ответ = РезультатЗапросаСтрока.Ответ)
        если РезультатЗапросаСтрока.ЗначениеФайл != Неопределено
            ДанныеОтвета.ЗначениеПрисоединенныйФайл = ПрисоединенныеФайлыМенеджер.ПрисоединенныйФайл(РезультатЗапросаСтрока.ЗначениеФайл)
            ДанныеОтвета.ЗначениеФайл = РезультатЗапросаСтрока.ЗначениеФайл
        ;
            
        если РезультатЗапросаСтрока.ПредопределенныйОтвет != Неопределено
            ДанныеОтвета.ЗначенияПредопределенные.Добавить(РезультатЗапросаСтрока.ПредопределенныйОтвет)
        ;
                
        если ОтветыАнкеты.СодержитКлюч(РезультатЗапросаСтрока.Вопрос)
            пер Ответы = ОтветыАнкеты.Получить(РезультатЗапросаСтрока.Вопрос)
            Ответы.Добавить(ДанныеОтвета)
        иначе
            ОтветыАнкеты.Вставить(РезультатЗапросаСтрока.Вопрос,[ДанныеОтвета])  
        ;    
    ;
    
    возврат ОтветыАнкеты      
;

@ВПодсистеме
@НаСервере
метод СохранитьВопрос(ДанныеВопроса: ДанныеВопроса, СоставнойВопрос: Вопросы.Ссылка?): Вопросы.Ссылка
    
    пер Вопрос = новый Вопросы.Объект()    
    Вопрос.Формулировка = ДанныеВопроса.Формулировка
    Вопрос.Пояснение = ДанныеВопроса.Пояснение
    Вопрос.ПодсказкаВвода = ДанныеВопроса.Подсказка
    Вопрос.ТипОтвета = ДанныеВопроса.ТипОтвета
    Вопрос.НастройкиВопроса = ДанныеВопроса.НастройкиВопроса
    Вопрос.ИспользоватьПредопределенныйНабор = ДанныеВопроса.ИспользоватьПредопределенныйНабор
    Вопрос.ИдПредопределенногоВопроса = ДанныеВопроса.ИдПредопределенногоВопроса
    если СоставнойВопрос != Неопределено
        Вопрос.СоставнойВопрос = СоставнойВопрос
    ;
         
    если ДанныеВопроса.ТипОтвета == ТипыОтветов.ПредопределенныйВариантЕдиничный или ДанныеВопроса.ТипОтвета == ТипыОтветов.ПредопределенныйВариантМножественный
        
        если ДанныеВопроса.ИспользоватьПредопределенныйНабор
            Вопрос.НаборВариантов = ДанныеВопроса.НаборВариантов
        иначе
            Вопрос.НаборВариантов = НовыйНаборВариантов(ДанныеВопроса.Формулировка)
            СохранитьВариантыОтвета(Вопрос.НаборВариантов, ДанныеВопроса.ВариантыОтвета)
        ;
    ;
    
    Вопрос.Записать()
    
    если ДанныеВопроса.ТипОтвета == ТипыОтветов.Составной
        для ДанныеПодвопроса из ДанныеВопроса.СоставСтруктурногоОтвета
            СохранитьВопрос(ДанныеПодвопроса.ДанныеВопроса, Вопрос.Ссылка)    
        ;
    ;
    
    возврат Вопрос.Ссылка
;

@ВПодсистеме
@НаСервере
метод СохранитьВопросШаблона(ДанныеВопросаШаблона: Анкетирование.ДанныеВопросаШаблона): ВопросыШаблоновАнкет.Ссылка
    пер ВопросШаблона = новый ВопросыШаблоновАнкет.Объект(Ид = ДанныеВопросаШаблона.ИдВопросаШаблона)
    ВопросШаблона.Приоритет = ДанныеВопросаШаблона.Приоритет
    ВопросШаблона.Шаблон = ДанныеВопросаШаблона.Шаблон
    ВопросШаблона.Раздел = ДанныеВопросаШаблона.Раздел
    ВопросШаблона.Вопрос = ДанныеВопросаШаблона.Вопрос
    ВопросШаблона.ОтветОбязателен = ДанныеВопросаШаблона.ОтветОбязателен
    ВопросШаблона.Записать()
    
    возврат ВопросШаблона.Ссылка  
;

@ВПодсистеме
@НаСервере
метод НовыйНаборВариантов(Наименование: Строка): НаборыВариантовОтвета.Ссылка
    пер НаборВариантовОтвета = новый НаборыВариантовОтвета.Объект()
    НаборВариантовОтвета.Наименование = Наименование
    НаборВариантовОтвета.Записать()
    
    возврат НаборВариантовОтвета.Ссылка    
;

@ВПодсистеме
@НаСервере
метод СохранитьВариантыОтвета(НаборВариантовОтвета: НаборыВариантовОтвета.Ссылка, ВариантыОтвета: Массив<ДанныеВариантаОтвета>?)
    для ВариантОтвета из ВариантыОтвета
        пер ВариантОтветаОбъект = новый ВариантыОтветов.Объект(Ид=ВариантОтвета.ИдВарианта)
        ВариантОтветаОбъект.НаборВариантовОтвета = НаборВариантовОтвета
        ВариантОтветаОбъект.Наименование = ВариантОтвета.ПредставлениеВарианта
        ВариантОтветаОбъект.Записать()
    ;    
;
@ВПодсистеме
@НаКлиенте
метод ЕстьНезаполненныеАнкеты(): Булево
    пер РеспондентыТекущегоПользователя = УниверсальныеМеханизмы.ПараметрыСеанса().РеспондентыТекущегоПользователя
    если РеспондентыТекущегоПользователя.Пусто()
        возврат Ложь
    ;
    
    возврат ЕстьАнкетыТекущегоПользователя(РеспондентыТекущегоПользователя)
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ЕстьАнкетыТекущегоПользователя(Респонденты: Массив<РеспондентАнкетирования.Ссылка>): Булево
    
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный() 
    знч Запрос = Запрос{
        Выбрать
            Ссылка
        Из 
            Анкеты 
        Где 
            Респондент В (%Респонденты) и
            (Статус == СтатусыАнкет.Отправлена или Статус == СтатусыАнкет.Заполняется)}

    исп РезультатЗапроса = Запрос.Выполнить()
    ПривилегированныйРежим.Закрыть()
    знч РезультатЗапросаСтроки = новый ЧитаемыйМассив(РезультатЗапроса)
    возврат не РезультатЗапросаСтроки.Пусто()
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЗаписатьШаблон(СтруктураЗаписи: СтруктураЗаписиШаблона)

   исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный() 

    пер Шаблон: ШаблоныАнкет.Объект?
    пер ШаблонСсылка: ШаблоныАнкет.Ссылка? = СтруктураЗаписи.ДанныеШаблонаАнкет.Ссылка
    если СтруктураЗаписи.ЭтоНовый
        Шаблон = новый ШаблоныАнкет.Объект(ШаблонСсылка.Ид)
    иначе
        Шаблон = ШаблонСсылка.ЗагрузитьОбъект()
    ;
    
    если не СтруктураЗаписи.ЭтоНовый
        ОчиститьВопросыПредыдущейВерсии(Шаблон.Ссылка)
    ;
    
    Шаблон!.Автор = СтруктураЗаписи.ДанныеШаблонаАнкет.Автор
    Шаблон!.МоментРедактирования = СтруктураЗаписи.ДанныеШаблонаАнкет.МоментРедактирования
    Шаблон!.МоментСоздания = СтруктураЗаписи.ДанныеШаблонаАнкет.МоментСоздания
    Шаблон!.Наименование = СтруктураЗаписи.ДанныеШаблонаАнкет.Наименование
    Шаблон!.Описание = СтруктураЗаписи.ДанныеШаблонаАнкет.Описание
    Шаблон!.Предопределенный = СтруктураЗаписи.ДанныеШаблонаАнкет.Предопределенный
    Шаблон!.ТекстПриветствия = СтруктураЗаписи.ДанныеШаблонаАнкет.ТекстПриветствия
    Шаблон!.КоличествоРазделов = СтруктураЗаписи.ДанныеШаблонаАнкет.КоличествоРазделов
    Шаблон!.Приветствие = СтруктураЗаписи.ДанныеШаблонаАнкет.ОтображатьПриветствие
    Шаблон!.Завершение = СтруктураЗаписи.ДанныеШаблонаАнкет.ОтображатьЗавершение
    Шаблон!.ЗаголовокПриветствия = СтруктураЗаписи.ДанныеШаблонаАнкет.ЗаголовокПриветствия
    Шаблон!.ЗаголовокЗавершения = СтруктураЗаписи.ДанныеШаблонаАнкет.ЗаголовокЗавершения
    Шаблон!.КартинкаПриветствия = СтруктураЗаписи.ДанныеШаблонаАнкет.КартинкаПриветствия
    Шаблон!.ТекстЗавершения = СтруктураЗаписи.ДанныеШаблонаАнкет.ТекстЗавершения
    Шаблон!.КартинкаЗавершения = СтруктураЗаписи.ДанныеШаблонаАнкет.КартинкаЗавершения
    Шаблон!.КоличествоВопросов = СтруктураЗаписи.ДанныеКонструктора.Размер()
    Шаблон!.СохранятьВопросыВПодсистему = СтруктураЗаписи.ДанныеШаблонаАнкет.СохранятьВопросыВПодсистему
    Шаблон!.СпособОтображенияАнкеты = СтруктураЗаписи.ДанныеШаблонаАнкет.СпособОтображенияАнкеты
    Шаблон!.ИдОбластиДанных = СтруктураЗаписи.ДанныеШаблонаАнкет.ИдОбластиДанных
    Шаблон!.ЗапретПовторныхОтветов = СтруктураЗаписи.ДанныеШаблонаАнкет.ЗапретПовторныхОтветов
    Шаблон!.ИдПодсистемыПоставщика = СтруктураЗаписи.ДанныеШаблонаАнкет.ИдПодсистемыПоставщика
    
    исп Транзакции.Начать()
    
    Шаблон.Записать()
    
    для Раздел из СтруктураЗаписи.ДанныеШаблонаАнкет.Разделы
        ЗаписатьРаздел(Раздел, Шаблон.Ссылка)
    ;
    
    ЗаписатьВопросы(СтруктураЗаписи.ДанныеКонструктора, СтруктураЗаписи.ДанныеШаблонаАнкет.Разделы, Шаблон.Ссылка)
    ПривилегированныйРежим.Закрыть()
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ОчиститьВопросыПредыдущейВерсии(Шаблон: ШаблоныАнкет.Ссылка)
    ОчиститьВопросы(Шаблон)
    ОчиститьРазделы(Шаблон)
; 

@НаСервере
метод ОчиститьВопросы(Шаблон: ШаблоныАнкет.Ссылка)
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка как ВопросШаблона, 
            Вопрос,
            Вопрос.НаборВариантов.ЗаменитьNull(Неопределено) как НаборВариантов,
            Вопрос.НаборВариантов.Предопределенный.ЗаменитьNull(Ложь) как НаборПредопределенный,
            Вопрос.Общедоступный.ЗаменитьNull(Ложь) как Общедоступный,
            Вопрос.СоставнойВопрос.ЗаменитьNull(Ложь) как СоставнойВопрос,
            Вопрос.ТипОтвета.ЗаменитьNull(Неопределено) как ТипОтвета,
            ОтветОбязателен
        Породить СоставляющиеВопроса
        Из 
            ВопросыШаблоновАнкет 
        Где 
            Шаблон == %Шаблон}

    исп РезультатЗапроса = Запрос.Выполнить() 
    для РезультатЗапросаСтрока из РезультатЗапроса
        РезультатЗапросаСтрока.ВопросШаблона.ЗагрузитьОбъект().Удалить()
        если РезультатЗапросаСтрока.ТипОтвета == ТипыОтветов.Составной
            ОчиститьПодвопросы(РезультатЗапросаСтрока.Вопрос)
        иначе
            ОчиститьСоставляющиеВопроса(РезультатЗапросаСтрока)
        ;
    ;

;

@НаСервере
метод ОчиститьПодвопросы(СоставнойВопрос: Вопросы.Ссылка?)
    
    знч ВопросШаблона = новый ВопросыШаблоновАнкет.Ссылка(новый Ууид())
    знч Запрос = Запрос{
        Выбрать
            %ВопросШаблона как ВопросШаблона, 
            Ссылка как Вопрос,
            НаборВариантов как НаборВариантов,
            НаборВариантов.Предопределенный.ЗаменитьNull(Ложь) как НаборПредопределенный,
            Общедоступный как Общедоступный,
            СоставнойВопрос как СоставнойВопрос,
            ТипОтвета как ТипОтвета,
            Ложь как ОтветОбязателен
        Заполнить СоставляющиеВопроса
        Из 
            Вопросы
        Где 
            СоставнойВопрос == %СоставнойВопрос}

    исп РезультатЗапроса = Запрос.Выполнить() 
    для РезультатЗапросаСтрока из РезультатЗапроса
        ОчиститьСоставляющиеВопроса(РезультатЗапросаСтрока)
    ;

;

@НаСервере
метод ОчиститьСоставляющиеВопроса(СоставляющиеВопроса: СоставляющиеВопроса)
    если СоставляющиеВопроса.Вопрос == Неопределено
        возврат
    ;
    
    если не СоставляющиеВопроса.Общедоступный
        СоставляющиеВопроса.Вопрос.ЗагрузитьОбъект().Удалить()
    ;
        
    если СоставляющиеВопроса.НаборВариантов != Неопределено и не СоставляющиеВопроса.НаборПредопределенный

        знч ВариантыОтвета = Анкетирование.ВариантыОтветаПоНабору(СоставляющиеВопроса.НаборВариантов!)
        для Вариант из ВариантыОтвета
            если Вариант.Вариант это ВариантыОтветов.Ссылка
                (Вариант.Вариант как ВариантыОтветов.Ссылка).ЗагрузитьОбъект().Удалить()
            ;
        ;
        знч Набор = СоставляющиеВопроса.НаборВариантов
        Набор.ЗагрузитьОбъект().Удалить()   
    ;
;

@НаСервере
метод ОчиститьРазделы(Шаблон: ШаблоныАнкет.Ссылка)
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка как РазделАнкеты
        Из 
            РазделыАнкет 
        Где 
            Шаблон == %Шаблон}

    исп РезультатЗапроса = Запрос.Выполнить() 
    для РезультатЗапросаСтрока из РезультатЗапроса
        РезультатЗапросаСтрока.РазделАнкеты.ЗагрузитьОбъект().Удалить()
    ;

;

@НаСервере
метод ЗаписатьВопросы(ДанныеКонструктора: Массив<ДанныеЭлементаКонструктора>, Разделы: Массив<ДанныеРаздела>, Шаблон: ШаблоныАнкет.Ссылка)
    для ЭлементКонструктора из ДанныеКонструктора
        СохранитьВопросШаблона(ЭлементКонструктора, Разделы, Шаблон)
    ;
;

@НаСервере @ДоступноСКлиента
метод СохранитьВопросШаблона(ЭлементКонструктора: ДанныеЭлементаКонструктора, Разделы: Массив<ДанныеРаздела>, Шаблон: ШаблоныАнкет.Ссылка)      
    
    исп Транзакции.Начать()
    
    пер ДанныеВопроса = ЭлементКонструктора.ДанныеВопроса
    пер Вопрос = СохранитьВопрос(ДанныеВопроса)
    пер РазделВопроса = НайтиРаздел(ЭлементКонструктора.ИдРаздела, Разделы).Раздел
    пер ДанныеВопросаШаблона = новый Анкетирование.ДанныеВопросаШаблона(
        ЭлементКонструктора.ИдЭлемента,
        ЭлементКонструктора.НомерВопроса,
        Вопрос,
        Шаблон,
        РазделВопроса,
        РазделВопроса.Ид,
        ДанныеВопроса,
        ДанныеВопроса.ОтветОбязателен)
        
    СохранитьВопросШаблона(ДанныеВопросаШаблона)      
;

@ВПодсистеме
@НаКлиенте @НаСервере
метод НайтиРаздел(ИдРаздела: Ууид?, Разделы: Массив<ДанныеРаздела>): ДанныеРаздела
    
    для Раздел из Разделы
        если Раздел.ИдРаздела == ИдРаздела
            возврат Раздел
        ;
    ;
;

@НаСервере @ДоступноСКлиента
метод СохранитьВопрос(ДанныеЭлемента: ДанныеВопроса): Вопросы.Ссылка?
    возврат Анкетирование.СохранитьВопрос(ДанныеЭлемента, Неопределено)
;

@НаСервере
метод ЗаписатьРаздел(ДанныеРаздела: ДанныеРаздела, Шаблон: ШаблоныАнкет.Ссылка)
    
    пер Раздел = новый РазделыАнкет.Объект()
    Раздел.Наименование = ДанныеРаздела.Заголовок
    Раздел.Подсказка = ДанныеРаздела.Пояснение
    Раздел.Приоритет = ДанныеРаздела.Приоритет
    Раздел.Шаблон = Шаблон
    Раздел.Записать()
    ДанныеРаздела.Раздел = Раздел.Ссылка
       
;

@ВПодсистеме
@НаСервере
метод ОповеститьПоставщиковВопросов(ИмпортируемыйОтвет: ИмпортируемыйОтвет)
    пер Сервисы = ПриемникОтветов.ПолучитьСервисы()
    для Сервис из Сервисы
        Сервис.ИмпортированиеОтветов(ИмпортируемыйОтвет)
    ;
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ДанныеШаблона(Шаблон: ШаблоныАнкет.Ссылка, ДанныеШаблона: Анкетирование.ДанныеШаблонаАнкет): Анкетирование.ДанныеШаблонаАнкет
    
    знч Запрос = Запрос{
        Выбрать
            Наименование,
            ЗаголовокПриветствия,
            КартинкаПриветствия,
            ТекстПриветствия,
            ЗаголовокЗавершения,
            КартинкаЗавершения,
            ТекстЗавершения,
            КоличествоРазделов,
            Приветствие,
            Завершение,
            СпособОтображенияАнкеты,
            ЗапретПовторныхОтветов
        Из
            ШаблоныАнкет
        Где
            Ссылка == %Шаблон
    }
    исп Результат = Запрос.Выполнить()
    
    для СтрокаРезультата из Результат
        ДанныеШаблона.Ссылка = Шаблон
        ДанныеШаблона.Наименование = СтрокаРезультата.Наименование
        ДанныеШаблона.ЗаголовокПриветствия = СтрокаРезультата.ЗаголовокПриветствия
        ДанныеШаблона.КартинкаПриветствия = СтрокаРезультата.КартинкаПриветствия
        ДанныеШаблона.ТекстПриветствия = СтрокаРезультата.ТекстПриветствия
        ДанныеШаблона.ЗаголовокЗавершения = СтрокаРезультата.ЗаголовокЗавершения
        ДанныеШаблона.КартинкаЗавершения = СтрокаРезультата.КартинкаЗавершения
        ДанныеШаблона.ТекстЗавершения = СтрокаРезультата.ТекстЗавершения
        ДанныеШаблона.КоличествоРазделов = СтрокаРезультата.КоличествоРазделов
        ДанныеШаблона.ОтображатьПриветствие = СтрокаРезультата.Приветствие
        ДанныеШаблона.ОтображатьЗавершение = СтрокаРезультата.Завершение
        ДанныеШаблона.СпособОтображенияАнкеты = СтрокаРезультата.СпособОтображенияАнкеты
        ДанныеШаблона.ЗапретПовторныхОтветов =  СтрокаРезультата.ЗапретПовторныхОтветов   
    ;
    
    возврат ДанныеШаблона
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ДанныеАнкетРеспондентов(Опрос: Опросы.Ссылка?): Массив<ДанныеУчастниковОпроса>
    пер ДанныеУчастников: Массив<ДанныеУчастниковОпроса>
    
    знч Запрос = Запрос{
        Выбрать
            Анкета,
            Анкета.Респондент.ЗаменитьNull(Неопределено) как Респондент,
            Анкета.Статус.ЗаменитьNull(Неопределено) как Статус
        Из
            АнкетыОпроса
        Где
            Опрос == %Опрос
    }

    знч РезультатЗапроса = Запрос.Выполнить()
    для СтрокаРезультата из РезультатЗапроса 
        ДанныеУчастников.Добавить(
            новый ДанныеУчастниковОпроса(Участник = СтрокаРезультата.Респондент,
                Анкета = СтрокаРезультата.Анкета,
                СтатусАнкеты = СтрокаРезультата.Статус,
                СтатусАнкетыСтрокой = СтрокаРезультата.Статус.Представление()))
    ;

    возврат ДанныеУчастников
    
;

@ВПодсистеме
@НаСервере @НаКлиенте
структура СтатистикаПрохожденияОпроса
    пер ВсегоУчастников: Число
    пер Завершили: Число
    пер ВПроцессе: Число
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод СтатистикаПрохожденияОпроса(Опрос: Опросы.Ссылка?): СтатистикаПрохожденияОпроса
    пер Статистика: СтатистикаПрохожденияОпроса
    пер ДанныеАнкетРеспондентов = ДанныеАнкетРеспондентов(Опрос)
    
    для ДанныеАнкеты из ДанныеАнкетРеспондентов
        Статистика.ВсегоУчастников += 1
        если ДанныеАнкеты.СтатусАнкеты == СтатусыАнкет.Заполнена
            Статистика.Завершили += 1
        ;
    ;
    
    Статистика.ВПроцессе = ДанныеАнкетРеспондентов.Размер() - Статистика.Завершили

    возврат Статистика
    
;

//Служебные
@ВПроекте
@НаСервере @ДоступноСКлиента
метод УдалитьВсеДанныеСправочников()
    исп ПривилегированныйРежим = КонтекстДоступа.Привилегированный()
    исп Транзакции.Начать()
    
    УдалитьРазделыАнкеты()
    УдалитьВариантыОтветов()
    УдалитьНаборыВариантовОтветов()
    УдалитьАнкеты()
    УдалитьВопросы()
    УдалитьВопросыШаблонов()
    УдалитьШаблоны()
    УдалитьОтветы()
    
    ПривилегированныйРежим.Закрыть() 
;

@НаСервере
метод УдалитьРазделыАнкеты()

    знч Запрос = Запрос{
        Выбрать
        Ссылка
        из РазделыАнкет}
    исп Результат = Запрос.Выполнить()
    
    для РезультатСтрока из Результат
        пер РазделыАнкетыОбъект = РезультатСтрока.Ссылка.ЗагрузитьОбъект()
        РазделыАнкетыОбъект.Удалить()
    ;        
;

@НаСервере
метод УдалитьВариантыОтветов()

    знч Запрос = Запрос{
        Выбрать
        Ссылка
        из ВариантыОтветов}
    исп Результат = Запрос.Выполнить()
    
    для РезультатСтрока из Результат
        пер ВариантыОтветовОбъект = РезультатСтрока.Ссылка.ЗагрузитьОбъект()
        ВариантыОтветовОбъект.Удалить()
    ;    
        
;

@НаСервере
метод УдалитьНаборыВариантовОтветов()

    знч Запрос = Запрос{
        Выбрать
        Ссылка
        из НаборыВариантовОтвета}
    исп Результат = Запрос.Выполнить()
    
    для РезультатСтрока из Результат
        пер НаборыВариантовОтветовОбъект = РезультатСтрока.Ссылка.ЗагрузитьОбъект()
        НаборыВариантовОтветовОбъект.Удалить()
    ;    
        
;

@НаСервере
метод УдалитьАнкеты()

    знч Запрос = Запрос{
        Выбрать
        Ссылка
        из Анкеты}
    исп Результат = Запрос.Выполнить()
    
    для РезультатСтрока из Результат
        пер АнкетыОбъект = РезультатСтрока.Ссылка.ЗагрузитьОбъект()
        АнкетыОбъект.Удалить()
    ;    
        
;

@НаСервере
метод УдалитьВопросы()

    знч Запрос = Запрос{
        Выбрать
        Ссылка
        из Вопросы}
    исп Результат = Запрос.Выполнить()
    
    для РезультатСтрока из Результат
        пер ВопросыОбъект = РезультатСтрока.Ссылка.ЗагрузитьОбъект()
        ВопросыОбъект.Удалить()
    ;    
        
;

@НаСервере
метод УдалитьВопросыШаблонов()

    знч Запрос = Запрос{
        Выбрать
        Ссылка
        из ВопросыШаблоновАнкет}
    исп Результат = Запрос.Выполнить()
    
    для РезультатСтрока из Результат
        пер ВопросыШаблоновАнкетОбъект = РезультатСтрока.Ссылка.ЗагрузитьОбъект()
        ВопросыШаблоновАнкетОбъект.Удалить()
    ;    
        
;

@НаСервере
метод УдалитьШаблоны()

    знч Запрос = Запрос{
        Выбрать
        Ссылка
        из ШаблоныАнкет}
    исп Результат = Запрос.Выполнить()
    
    для РезультатСтрока из Результат
        пер ШаблоныАнкетОбъект = РезультатСтрока.Ссылка.ЗагрузитьОбъект()
        ШаблоныАнкетОбъект.Удалить()
    ;    
        
;

@НаСервере
метод УдалитьОтветы()

    знч Запрос = Запрос{
        Выбрать
        Ссылка
        из Ответы}
    исп Результат = Запрос.Выполнить()
    
    для РезультатСтрока из Результат
        пер ОтветыОбъект = РезультатСтрока.Ссылка.ЗагрузитьОбъект()
        ОтветыОбъект.Удалить()
    ;    
        
;
//Конец Служебные

@ВПроекте
@НаСервере
метод ОбновитьСтроковыеРесурсы()
    
    пер ОтправкаАнкетыРеспондентуSMS = "Вам поступила новая анкета. Пожалуйста заполните ее."
    пер Комментарий = "Отправка анкеты респонденту (sms)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_АНКЕТИРОВАНИЕ, ОТПРАВКА_АНКЕТЫ_РЕСПОНДЕНТУ_SMS, Комментарий, ОтправкаАнкетыРеспондентуSMS, 70)
        
    пер ОтправкаАнкетыРеспондентуPush = "Вам поступила новая анкета \%КМНаименованиеАнкеты\%. Пожалуйста заполните ее."
    Комментарий = "Отправка анкеты респонденту (push)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_АНКЕТИРОВАНИЕ, ОТПРАВКА_АНКЕТЫ_РЕСПОНДЕНТУ_PUSH, Комментарий, ОтправкаАнкетыРеспондентуPush)
    
    пер ОтправкаАнкетыРеспондентуEmail = 
        "Добрый день, \%КМПолноеИмяПолучателя\%
        
        Вам необходимо пройти анкету \%КМНаименованиеАнкеты\%.
        Вы можете это сделать в личном кабинете.
        
        \%КМПодпись\%"
    Комментарий = "Отправка анкеты респонденту (email)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_АНКЕТИРОВАНИЕ, ОТПРАВКА_АНКЕТЫ_РЕСПОНДЕНТУ_EMAIL, Комментарий, ОтправкаАнкетыРеспондентуEmail)
    
    пер ОтправкаАнкетыРеспондентуТема = "Вам поступила новая анкета \%КМНаименованиеАнкеты\%"
    Комментарий = "Отправка анкеты респонденту (тема письма)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_АНКЕТИРОВАНИЕ, ОТПРАВКА_АНКЕТЫ_РЕСПОНДЕНТУ_ТЕМА, Комментарий, ОтправкаАнкетыРеспондентуТема)
    
    пер ОтправкаОпросаРеспондентуSMS = "Вам поступил новый опрос. Пожалуйста заполните его."
    Комментарий = "Отправка опроса респонденту (sms)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_АНКЕТИРОВАНИЕ, ОТПРАВКА_ОПРОСА_РЕСПОНДЕНТУ_SMS, Комментарий, ОтправкаОпросаРеспондентуSMS, 70)
        
    пер ОтправкаОпросаРеспондентуPush = "Вам поступил новый опрос \%КМНаименованиеОпроса\%. Пожалуйста заполните его."
    Комментарий = "Отправка опроса респонденту (push)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_АНКЕТИРОВАНИЕ, ОТПРАВКА_ОПРОСА_РЕСПОНДЕНТУ_PUSH, Комментарий, ОтправкаОпросаРеспондентуPush)
    
    пер ОтправкаОпросаРеспондентуEmail = 
        "Добрый день, \%КМПолноеИмяПолучателя\%
        
        Вам необходимо пройти опрос \%КМНаименованиеОпроса\%.
        Вы можете это сделать в личном кабинете.
        
        \%КМПодпись\%"
    Комментарий = "Отправка опроса респонденту (email)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_АНКЕТИРОВАНИЕ, ОТПРАВКА_ОПРОСА_РЕСПОНДЕНТУ_EMAIL, Комментарий, ОтправкаОпросаРеспондентуEmail)
    
    пер ОтправкаОпросаРеспондентуТема = "Вам поступил новый опрос \%КМНаименованиеОпроса\%"
    Комментарий = "Отправка опроса респонденту (тема письма)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_АНКЕТИРОВАНИЕ, ОТПРАВКА_ОПРОСА_РЕСПОНДЕНТУ_ТЕМА, Комментарий, ОтправкаОпросаРеспондентуТема)
    
    пер ПолученыРезультатыАнкетыSMS = "Результаты по анкете были получены."
    Комментарий = "Получены результаты анкеты (sms)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_АНКЕТИРОВАНИЕ, ПОЛУЧЕНЫ_РЕЗУЛЬТАТЫ_АНКЕТЫ_SMS, Комментарий, ПолученыРезультатыАнкетыSMS, 70)
        
    пер ПолученыРезультатыАнкетыPush = "Результаты по анкете \%КМНаименованиеАнкеты\% (\%КМПолноеИмяСотрудника\%) были получены."
    Комментарий = "Получены результаты анкеты (push)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_АНКЕТИРОВАНИЕ, ПОЛУЧЕНЫ_РЕЗУЛЬТАТЫ_АНКЕТЫ_PUSH, Комментарий, ПолученыРезультатыАнкетыPush)
    
    пер ПолученыРезультатыАнкетыEmail = 
        "Добрый день, \%КМПолноеИмяПолучателя\%
        
        Вы можете ознакомиться с результатами анкеты \%КМНаименованиеАнкеты\% в личном кабинете или перейти по ссылке
        \%КМАнкета\%
        
        \%КМПодпись\%"
    Комментарий = "Получены результаты анкеты (email)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_АНКЕТИРОВАНИЕ, ПОЛУЧЕНЫ_РЕЗУЛЬТАТЫ_АНКЕТЫ_EMAIL, Комментарий, ПолученыРезультатыАнкетыEmail)
    
    пер ПолученыРезультатыАнкетыТема = "Результаты по анкете \%КМНаименованиеАнкеты\% (\%КМПолноеИмяСотрудника\%) были получены"
    Комментарий = "Получены результаты анкеты (тема письма)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_АНКЕТИРОВАНИЕ, ПОЛУЧЕНЫ_РЕЗУЛЬТАТЫ_АНКЕТЫ_ТЕМА, Комментарий, ПолученыРезультатыАнкетыТема)
    
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ПоШаблонуСозданыАнкеты(Шаблон: ШаблоныАнкет.Ссылка): Булево
    знч Запрос = Запрос{
        Выбрать
        Ссылка
        из Анкеты
        где Шаблон == %Шаблон}
    исп Результат = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    
    возврат не РезультатСтроки.Пусто()
;

@ВПроекте
@НаСервере @ДоступноСКлиента
статический метод ПредставленияСтатусовОпросныхАнкет(): Соответствие<СтатусыАнкет, Строка>
    возврат {СтатусыАнкет.Создана : "Не начат",
             СтатусыАнкет.Отправлена: "Не начат",
             СтатусыАнкет.Заполняется: "В процессе",
             СтатусыАнкет.Заполнена : "Завершен"}
;