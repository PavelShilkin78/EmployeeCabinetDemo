импорт ВебApi
импорт ОбменДанными
импорт УниверсальныеМеханизмы
импорт ФизическиеЛица

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "questionnaires"
;

@ВПроекте
структура Анкета_2_0
    @JsonСвойство("ID")
    обз знч Ид: Строка
    @JsonСвойство("name")
    обз знч Наименование: Строка
    @JsonСвойство("template")
    обз знч Шаблон: Строка
    @JsonСвойство("respondent")
    пер Респондент: ОбменДанными.ЭлементКонтрактаСущностиJson?
    @JsonСвойство("dateCreate")
    пер ДатаСоздания: Момент?
    @JsonСвойство("dateUpdate")
    пер ДатаПоследнегоРедактирования: Момент?
    @JsonСвойство("status")
    пер Статус: СтатусыАнкетJson?
    @JsonСвойство("availabilityLevel")
    пер УровеньДоступности: УровниДоступностиАнкетJson?
    @JsonСвойство("origin")
    пер Происхождение: ПроисхождениеАнкетJson?
    @JsonСвойство("creatorID")
    пер ИдСоздателя: Строка?
;

перечисление СтатусыАнкетJson
    created,
    inProgress,
    sent,
    completed    
;

перечисление ПроисхождениеАнкетJson
    separate,
    surveyPart 
;

перечисление УровниДоступностиАнкетJson
    allApps,
    currentApp 
;

конст СООТВЕТСТВИЕ_СТАТУСЫ_АНКЕТ_JSON = {
    СтатусыАнкетJson.created: СтатусыАнкет.Создана,
    СтатусыАнкетJson.inProgress: СтатусыАнкет.Заполняется,
    СтатусыАнкетJson.sent: СтатусыАнкет.Отправлена,
    СтатусыАнкетJson.completed: СтатусыАнкет.Заполнена    
}

конст СООТВЕТСТВИЕ_УРОВНИ_ДОСТУПНОСТИ_JSON = {
    УровниДоступностиАнкетJson.allApps: УровниДоступностиАнкет.ВсеПриложения,
    УровниДоступностиАнкетJson.currentApp: УровниДоступностиАнкет.ТекущееПриложение
}

конст СООТВЕТСТВИЕ_ПРОИСХОЖДЕНИЕ_АНКЕТ_JSON = {
    ПроисхождениеАнкетJson.separate: ПроисхождениеАнкет.Отдельная,
    ПроисхождениеАнкетJson.surveyPart: ПроисхождениеАнкет.ЧастьОпроса
}

метод УровниДоступностиВJson(УровеньДоступности: УровниДоступностиАнкет): УровниДоступностиАнкетJson
    для КлючИЗначение из СООТВЕТСТВИЕ_УРОВНИ_ДОСТУПНОСТИ_JSON
        если КлючИЗначение.Значение == УровеньДоступности
            возврат КлючИЗначение.Ключ
        ;     
    ;     
;

метод УровниДоступностиИзJson(УровеньДоступностиJson: УровниДоступностиАнкетJson): УровниДоступностиАнкет
    возврат СООТВЕТСТВИЕ_УРОВНИ_ДОСТУПНОСТИ_JSON[УровеньДоступностиJson] 
;

метод СтатусыАнкетВJson(СтатусАнкеты: СтатусыАнкет): СтатусыАнкетJson
    для КлючИЗначение из СООТВЕТСТВИЕ_СТАТУСЫ_АНКЕТ_JSON
        если КлючИЗначение.Значение == СтатусАнкеты
            возврат КлючИЗначение.Ключ
        ;     
    ;     
;

метод ПроисхождениеАнкетИзJson(ПроисхождениеАнкетJson: ПроисхождениеАнкетJson): ПроисхождениеАнкет
    возврат СООТВЕТСТВИЕ_ПРОИСХОЖДЕНИЕ_АНКЕТ_JSON[ПроисхождениеАнкетJson]    
;

метод ПроисхождениеАнкетВJson(ПроисхождениеАнкеты: ПроисхождениеАнкет): ПроисхождениеАнкетJson
    для КлючИЗначение из СООТВЕТСТВИЕ_ПРОИСХОЖДЕНИЕ_АНКЕТ_JSON
        если КлючИЗначение.Значение == ПроисхождениеАнкеты
            возврат КлючИЗначение.Ключ
        ;
    ;
;

метод СтатусыАнкетИзJson(СтатусАнкетыJson: СтатусыАнкетJson): СтатусыАнкет
    возврат СООТВЕТСТВИЕ_СТАТУСЫ_АНКЕТ_JSON[СтатусАнкетыJson]    
;

@ВПодсистеме
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{2.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    
    если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<Анкета_2_0>
    ;
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(СериализованнаяАнкета: Анкета_2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    
    исп Транзакции.Начать()

    знч Анкета = Сервисы.ПрочитатьОбъект(СериализованнаяАнкета.Ид, &Анкеты.Объект.новый(Ууид), Тип<Анкеты.Ссылка>) как Анкеты.Объект
    Анкета.Наименование = СериализованнаяАнкета.Наименование
    Анкета.Шаблон = Сервисы.ПолучитьСсылку(ШаблоныАнкетDto.ВнешняяСсылка(СериализованнаяАнкета.Шаблон)) как ШаблоныАнкет.Ссылка
    знч СервисыКонтракта = РеспондентыАнкетированияApi.ПолучитьСервисы()
    пер ВнешняяСсылка: ВебApiСервер.ВнешняяСсылка?
    если СериализованнаяАнкета.Респондент != Неопределено
        для СервисКонтракта из СервисыКонтракта
        ВнешняяСсылка = СервисКонтракта.ВнешняяСсылкаРеспондентАнкетирования(СериализованнаяАнкета.Респондент)
        если ВнешняяСсылка != Неопределено
            Анкета.Респондент = Сервисы.ПолучитьСсылку(ВнешняяСсылка) как РеспондентАнкетирования.Ссылка
            прервать
        ;    
    ; 
        если ВнешняяСсылка == Неопределено
            Анкета.Респондент = ОбменДанными.ИдентификаторыЛокальныхОбъектов([СериализованнаяАнкета.Респондент.ID])
                            .ПолучитьИлиУмолчание(СериализованнаяАнкета.Респондент.ID) как РеспондентАнкетирования.Ссылка?    
        ;  
    ;
     
    если СериализованнаяАнкета.ДатаСоздания != Неопределено
        Анкета.ДатаСоздания = СериализованнаяАнкета.ДатаСоздания
    иначе
        Анкета.ДатаСоздания = Момент.Сейчас()
    ;
    
    если СериализованнаяАнкета.ИдСоздателя != Неопределено
        Анкета.Создатель = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(СериализованнаяАнкета.ИдСоздателя)) как ФизическиеЛица.Ссылка
    ;
    
    если СериализованнаяАнкета.ДатаПоследнегоРедактирования != Неопределено
        Анкета.ДатаПоследнегоРедактирования = СериализованнаяАнкета.ДатаПоследнегоРедактирования
    иначе
        Анкета.ДатаПоследнегоРедактирования = Момент.Сейчас()
    ;
    если СериализованнаяАнкета.Статус != Неопределено
        Анкета.Статус = СтатусыАнкетИзJson(СериализованнаяАнкета.Статус)
    ; 
    
    если СериализованнаяАнкета.УровеньДоступности != Неопределено
        Анкета.УровеньДоступности = УровниДоступностиИзJson(СериализованнаяАнкета.УровеньДоступности)
    ;
    
    если СериализованнаяАнкета.Происхождение != Неопределено
        Анкета.Происхождение = ПроисхождениеАнкетИзJson(СериализованнаяАнкета.Происхождение)
    ;
    
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(Анкета, СериализованнаяАнкета.Ид), Сервисы.ИнструментыМенеджераОбъекта)
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"questionnaires": ДанныеАнкетВJson(Ссылки, Сервисы)}
;

метод ДанныеАнкетВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеАнкет(Ссылки)
        Данные.Добавить(ДанныеАнкетыВJson_V2_0(КлючИЗначение.Значение, Сервисы))
    ;
    возврат Данные
;

@ВПроекте
метод ДанныеАнкет(АнкетыСсылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<Анкеты.Ссылка, ДанныеАнкеты>
    
    знч ДанныеАнкет: Соответствие<Анкеты.Ссылка, ДанныеАнкеты>
    
    если АнкетыСсылки.Пусто()
        возврат ДанныеАнкет
    ;
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Наименование,
            Шаблон,
            Респондент,
            Создатель,
            ДатаСоздания,
            ДатаПоследнегоРедактирования,
            Статус,
            УровеньДоступности,
            Происхождение
        Породить ДанныеАнкеты
        Из
            Анкеты
        Где
            Ссылка В (%АнкетыСсылки)
    }
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ДанныеАнкет.Вставить(
            СтрокаРезультата.Ссылка,
            СтрокаРезультата)        
    ;
    
    возврат ДанныеАнкет   
;

метод ДанныеАнкетыВJson_V2_0(ДанныеАнкеты: ДанныеАнкеты, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Анкета_2_0
    
    знч СериализованнаяАнкета = новый Анкета_2_0(
        Сервисы.ПолучитьИдентификатор(ДанныеАнкеты.Ссылка),
        ДанныеАнкеты.Наименование,
        Сервисы.ПолучитьИдентификатор(ДанныеАнкеты.Шаблон)    
    )     
    если ДанныеАнкеты.Респондент != Неопределено
        знч СервисыКонтракта = РеспондентыАнкетированияApi.ПолучитьСервисы()
        пер ОписаниеЭлемента: ОбменДанными.ЭлементКонтрактаСущностиJson?
        для СервисКонтракта из СервисыКонтракта
            ОписаниеЭлемента = СервисКонтракта.ОписаниеЭлементаРеспондентАнкетирования(
                ДанныеАнкеты.Респондент,
                Сервисы    
            )
            если ОписаниеЭлемента != Неопределено
                СериализованнаяАнкета.Респондент = ОписаниеЭлемента
            ;
        ;
    ;
    СериализованнаяАнкета.ДатаСоздания = ДанныеАнкеты.ДатаСоздания
    
    если ДанныеАнкеты.Создатель != Неопределено
        СериализованнаяАнкета.ИдСоздателя = Сервисы.ПолучитьИдентификатор(ДанныеАнкеты.Создатель)
    ;
    
    СериализованнаяАнкета.ДатаПоследнегоРедактирования = ДанныеАнкеты.ДатаПоследнегоРедактирования
    СериализованнаяАнкета.Статус = СтатусыАнкетВJson(ДанныеАнкеты.Статус)
    если ДанныеАнкеты.Происхождение != Неопределено
        СериализованнаяАнкета.Происхождение = ПроисхождениеАнкетВJson(ДанныеАнкеты.Происхождение)
    ;
    
    если ДанныеАнкеты.УровеньДоступности != Неопределено
        СериализованнаяАнкета.УровеньДоступности = УровниДоступностиВJson(ДанныеАнкеты.УровеньДоступности)
    ;
    
    возврат СериализованнаяАнкета
;

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> Анкеты.ПолучитьСсылку(Ууид))
;

// Конец JSON