импорт ОбщиеСтандартные
импорт СтандартноеПриложение

@ВПроекте
исключение ИсключениеНеверныйПсевдонимКлюча
; 

@ВПроекте
структура ДанныеЭлектроннойПодписи
    обз пер Сертификат: ЦифровойСертификат
    обз пер ЗакрытыйКлюч: ЗакрытыйКлюч
    пер АдресСертификатаИздателя: Строка
    пер АдресТочкиРаспространенияСпискаОтзыва: Строка
    пер ХранилищеСертификатаИздателя: ХранилищеСертификатов.Ссылка?
    пер СерийныйНомер: Строка
;

@ВПроекте
структура ЦифровойСертификатНумерованный
    обз знч СерийныйНомер: Строка
    обз знч Сертификат: ЦифровойСертификат
;

@ВПроекте
структура АдресаЦифровогоСертификата
    обз пер АдресСертификатаИздателя: Строка
    обз пер АдресТочкиРаспространенияСпискаОтзыва: Строка
    обз пер Ид: Ууид
;

@ВПроекте
структура ОтзываемыйСертификат
    обз знч СерийныйНомер: Байты
    обз знч МоментОтзыва: Момент
    обз знч ПричинаОтзыва: ПричинаОтзываСертификата
;

@ВПроекте
метод СоздатьЦифровойСертификатИздателя(ИнформацияОСубъекте: ОбъектыКриптографии.ИнформацияОСубъекте, ПарольЗакрытогоКлюча: Строка?, СрокДействия: МенеджерДат.Интервал, АдресаСертификата: АдресаЦифровогоСертификата): ЦифровойСертификат?
    пер Сертификат: ЦифровойСертификат?
    попытка
        знч Хранилище = новый ХранилищеPkcs12()
        знч ДанныеСертификата = СоздатьЦифровойСертификат(ИнформацияОСубъекте, СрокДействия, Неопределено)
        
        пер ПсевдонимСертификата: Строка = ПсевдонимСертификата(ИнформацияОСубъекте)
        Хранилище.ДобавитьЗакрытыйКлюч(ПсевдонимСертификата, ДанныеСертификата.ЗакрытыйКлюч, ПарольЗакрытогоКлюча, ДанныеСертификата.Сертификат)
        ХранилищеСертификатов.ДобавитьСертификатИздателя(
            ДанныеСертификата.Сертификат,
            ПсевдонимСертификата,
            ПарольЗакрытогоКлюча,
            Хранилище,
            НовыйСписокОтозванныхСертификатов(ДанныеСертификата.Сертификат, ДанныеСертификата.ЗакрытыйКлюч),
            АдресаСертификата.Ид)
        
    поймать Ошибка: ИсключениеКриптографии
        Журналирование.ЗарегистрироватьОшибку(Ошибка, Важность = ВажностьСобытияЖурналаСобытий.Высокая)
    ;
    возврат Сертификат
;

@ВПроекте
метод СоздатьЦифровойСертификат(
        ИнформацияОСубъекте: ОбъектыКриптографии.ИнформацияОСубъекте, 
        СрокДействия: МенеджерДат.Интервал, 
        ДанныеЭлектроннойПодписиИздателя: ДанныеЭлектроннойПодписи?): ДанныеЭлектроннойПодписи
        
    пер ДанныеЭлектроннойПодписи: ДанныеЭлектроннойПодписи?
    попытка
        пер Параметры = новый ГенераторСертификата(АлгоритмАсимметричногоШифрования.Гост3410_2012)
        пер АтрибутыСубъекта: Соответствие<АтрибутX500, Строка> = АтрибутыСубъекта(ИнформацияОСубъекте)
        для Элемент из АтрибутыСубъекта
            Параметры.УстановитьАтрибутСубъекта(Элемент.Ключ, Элемент.Значение)
        ;
        если не ИнформацияОСубъекте.ИНН.Пусто()
            Параметры.УстановитьАтрибутСубъекта(АтрибутX500.Инн, ИнформацияОСубъекте.ИНН)
        ;
        если не ИнформацияОСубъекте.СНИЛС.Пусто()
            Параметры.УстановитьАтрибутСубъекта(АтрибутX500.Снилс, ИнформацияОСубъекте.СНИЛС)
        ;
        Параметры.ДействителенС = СрокДействия.ДатаНачала
        Параметры.ДействителенПо = СрокДействия.ДатаОкончания
        если ДанныеЭлектроннойПодписиИздателя != Неопределено 
            Параметры.УстановитьЗакрытыйКлючПодписиСертификата(ДанныеЭлектроннойПодписиИздателя.ЗакрытыйКлюч, ДанныеЭлектроннойПодписиИздателя.Сертификат)
            Параметры.АдресСертификатаИздателя = ДанныеЭлектроннойПодписиИздателя.АдресСертификатаИздателя
            Параметры.ДобавитьТочкуРаспространенияСпискаОтзыва(ДанныеЭлектроннойПодписиИздателя.АдресТочкиРаспространенияСпискаОтзыва)
        ;
        знч Сертификат = Параметры.СоздатьСертификат()
        ЗарегистрироватьСозданиеЦифровогоСертификата(Сертификат)
        ДанныеЭлектроннойПодписи = новый ДанныеЭлектроннойПодписи(Сертификат, Параметры.ЗакрытыйКлюч)
    поймать Ошибка: ИсключениеКриптографии
        Журналирование.ЗарегистрироватьОшибку(Ошибка, ВажностьСобытияЖурналаСобытий.Высокая)
    ;
    возврат ДанныеЭлектроннойПодписи 
;

метод ЗарегистрироватьСозданиеЦифровогоСертификата(Сертификат: ЦифровойСертификат)
    новый СозданЦифровойСертификат(
        Сертификат = "%Сертификат",
        Издатель = Сертификат.Издатель,
        Субъект = Сертификат.Субъект,
        СерийныйНомер = "%{Сертификат.СерийныйНомер}"
    ).Записать()    
;

@ВПроекте
метод ДобавитьЦифровойСертификат(Хранилище: ХранилищеPkcs12, ПсевдонимСертификата: Строка, ЦифровойСертификат: ЦифровойСертификат)
    Хранилище.ДобавитьСертификат(ПсевдонимСертификата, ЦифровойСертификат)
;

@ВПроекте
метод НовоеХранилищеЗакрытогоКлюча(ДанныеСертификата: ДанныеЭлектроннойПодписи, ПсевдонимСертификата: Строка, ПарольЗакрытогоКлюча: Строка): ХранилищеPkcs12
    знч Хранилище = новый ХранилищеPkcs12()
    Хранилище.ДобавитьЗакрытыйКлюч(ПсевдонимСертификата, ДанныеСертификата.ЗакрытыйКлюч, ПарольЗакрытогоКлюча, ДанныеСертификата.Сертификат)
    возврат Хранилище
;

@ВПроекте
метод ОтозватьЦифровойСертификат(ХранилищеСертификатаИздателя: ХранилищеСертификатов.Ссылка, ОтзываемыйСертификат: ЦифровойСертификат)
    пер СписокОтозванныхСертификатов = ХранилищеСертификатов.СписокОтозванныхСертификатов(ХранилищеСертификатаИздателя)
    знч Генератор = новый ГенераторСпискаОтозванныхСертификатов(ОтзываемыйСертификат.Издатель, Момент.Сейчас())
    знч ДанныеЭлектроннойПодписиИздателя = ДанныеЭлектроннойПодписиИздателя(ХранилищеСертификатаИздателя)
    если СписокОтозванныхСертификатов != Неопределено
        пер ДанныеСертификатов = СписокОтозванныхСертификатов.ПолучитьОтозванныеСертификаты()
        для ОтозванныйСертификат из ДанныеСертификатов
            Генератор.ДобавитьОтозванныйСертификат(ОтозванныйСертификат.СерийныйНомер, ОтозванныйСертификат.ДатаОтзыва, ОтозванныйСертификат.ПричинаОтзыва)
        ;
    ;
    Генератор.ДобавитьОтозванныйСертификат(ОтзываемыйСертификат.СерийныйНомер, Момент.Сейчас(), ПричинаОтзываСертификата.Заменен) 
    СписокОтозванныхСертификатов = Генератор.СоздатьСписокОтозванныхСертификатов(ДанныеЭлектроннойПодписиИздателя.ЗакрытыйКлюч, "GOST3411-2012-256")
    
    знч ОтозванныеСертификаты = ОбъектноеХранилище.ЗагрузитьИзБайт(СписокОтозванныхСертификатов!.ВБайты()).Ссылка
    ХранилищеСертификатов.ОбновитьСписокОтозванныхСертификатов(ХранилищеСертификатаИздателя, ОтозванныеСертификаты)
;

@ВПроекте
метод ОбновитьСписокОтозванныхСертификатов(ХранилищеСертификатаИздателя: ХранилищеСертификатов.Ссылка, ОтзываемыеСертификаты: ЧитаемаяКоллекция<ОтзываемыйСертификат>,
    СерийныеНомераДействующихСертификатов: ЧитаемаяКоллекция<Строка>)
    
    знч ДанныеЭлектроннойПодписиИздателя = ДанныеЭлектроннойПодписиИздателя(ХранилищеСертификатаИздателя)
    пер СписокОтозванныхСертификатов = ХранилищеСертификатов.СписокОтозванныхСертификатов(ХранилищеСертификатаИздателя)
    знч Генератор = новый ГенераторСпискаОтозванныхСертификатов(ДанныеЭлектроннойПодписиИздателя.Сертификат.Издатель, Момент.Сейчас())
    знч ОтозванныеСертификатыКДобавлению = новый Множество<ОтзываемыйСертификат>(ОтзываемыеСертификаты)
    если СписокОтозванныхСертификатов != Неопределено
        знч ОтозванныеСертификаты = СписокОтозванныхСертификатов.ПолучитьОтозванныеСертификаты()
        для ОтозванныйСертификат из ОтозванныеСертификаты
            ОтозванныеСертификатыКДобавлению.Добавить(
                новый ОтзываемыйСертификат(ОтозванныйСертификат.СерийныйНомер, ОтозванныйСертификат.ДатаОтзыва, ОтозванныйСертификат.ПричинаОтзыва))
        ;
    ;
    
    для ОтозванныйСертификат из ОтозванныеСертификатыКДобавлению
        если не СерийныеНомераДействующихСертификатов.Содержит(ОтозванныйСертификат.СерийныйНомер.ВСтроку())
            Генератор.ДобавитьОтозванныйСертификат(
                ОтозванныйСертификат.СерийныйНомер, ОтозванныйСертификат.МоментОтзыва, ОтозванныйСертификат.ПричинаОтзыва)
        ;
    ;
    
    СписокОтозванныхСертификатов = Генератор.СоздатьСписокОтозванныхСертификатов(ДанныеЭлектроннойПодписиИздателя.ЗакрытыйКлюч, "GOST3411-2012-256")
    
    знч НовыеОтозванныеСертификаты = ОбъектноеХранилище.ЗагрузитьИзБайт(СписокОтозванныхСертификатов!.ВБайты()).Ссылка
    ХранилищеСертификатов.ОбновитьСписокОтозванныхСертификатов(ХранилищеСертификатаИздателя, НовыеОтозванныеСертификаты)
;

@ВПроекте
метод ПсевдонимСертификата(ИнформацияОСубъекте: ОбъектыКриптографии.ИнформацияОСубъекте): Строка
    возврат ИнформацияОСубъекте.ИдПользователя
;

@ВПроекте
метод ПодписьДанных(Данные: Байты, ПсевдонимКлюча: Строка, ПарольЗакрытогоКлюча: Строка, Криптопровайдер: Криптопровайдеры): Байты
    пер Подпись: Байты
    знч ДанныеПодписи: ДанныеЭлектроннойПодписи = ДанныеЭлектроннойПодписи(ПсевдонимКлюча, ПарольЗакрытогоКлюча, Криптопровайдер)
    пер Вычислитель = новый ВычислительПодписи(Криптопровайдер(Криптопровайдер), ДанныеПодписи.Сертификат, ДанныеПодписи.ЗакрытыйКлюч, "GOST3411")
    пер АдресаСлужб: Массив<Строка> = АдресаСлужбШтамповВремени()
    для АдресСлужбы из АдресаСлужб
        попытка
            Вычислитель.УстановитьСлужбуШтамповВремени(АдресСлужбы, СоединениеHttp.Прокси())
            Подпись = Вычислитель.Подписать(Данные)
        поймать Ошибка: ИсключениеКриптографии
            продолжить
        ;
        прервать
    ;
    возврат Подпись
;

@ВПроекте
метод ПодписьДанных(Данные: Байты, ДанныеПодписи: ДанныеЭлектроннойПодписи): Байты
    пер Подпись: Байты
    пер Криптопровайдер = Криптопровайдер(Криптопровайдеры.BouncyCastle)
    пер Вычислитель = новый ВычислительПодписи(Криптопровайдер, ДанныеПодписи.Сертификат, ДанныеПодписи.ЗакрытыйКлюч, "GOST3411-2012-256")
    пер АдресаСлужб: Массив<Строка> = АдресаСлужбШтамповВремени()
    для АдресСлужбы из АдресаСлужб
        попытка
            Вычислитель.УстановитьСлужбуШтамповВремени(АдресСлужбы, СоединениеHttp.Прокси())
            Подпись = Вычислитель.Подписать(Данные)
        поймать Ошибка: ИсключениеКриптографии
            продолжить
        ;
        прервать
    ;
    возврат Подпись
;

@ВПроекте
метод ЦифровойСертификатИздателя(ХранилищеСертификата: ХранилищеСертификатов.Ссылка? = Неопределено): ЦифровойСертификат?
    знч ДанныеПодписи = ДанныеЭлектроннойПодписиИздателя(ХранилищеСертификата)
    если ДанныеПодписи != Неопределено
        возврат ДанныеЭлектроннойПодписиИздателя(ХранилищеСертификата).Сертификат
    ;
;

@ВПроекте
метод ЦифровыеСертификатыИздателя(): ЧитаемыйМассив<ЦифровойСертификатНумерованный>
    знч ЦифровыеСертификатыИздателя: Массив<ЦифровойСертификатНумерованный>
    
    для ДанныеЭлектроннойПодписи из ДанныеЭлектронныхПодписейИздателя()
        ЦифровыеСертификатыИздателя.Добавить(новый ЦифровойСертификатНумерованный(
                ДанныеЭлектроннойПодписи.СерийныйНомер, 
                ДанныеЭлектроннойПодписи.Сертификат))
    ;
    
    возврат новый ЧитаемыйМассив(ЦифровыеСертификатыИздателя)
;

@ВПроекте
метод ДействующийСертификатИздателя(): ХранилищеСертификатов.Ссылка?
    возврат ХранилищеСертификатов.ДействующийСертификатИздателя()
;

@ВПроекте
метод ХранилищеСертификатов(): ХранилищеPkcs12
    возврат ХранилищеСертификатов.ХранилищеКлючейPkcs12()
;

@ВПроекте
метод СписокОтозванныхСертификатов(): СписокОтозванныхСертификатов?
    возврат ХранилищеСертификатов.СписокОтозванныхСертификатов()
;

@ВПроекте
метод ХранилищеСертификатов(Ссылка: ХранилищеСертификатов.Ссылка): ХранилищеPkcs12
    возврат ХранилищеСертификатов.ХранилищеКлючейPkcs12(Ссылка)
;

@ВПроекте
метод СписокОтозванныхСертификатов(Ссылка: ХранилищеСертификатов.Ссылка): СписокОтозванныхСертификатов?
    возврат ХранилищеСертификатов.СписокОтозванныхСертификатов(Ссылка)
;

@ВПроекте
метод ДанныеЭлектроннойПодписиИздателя(ХранилищеСертификатаИздателя: ХранилищеСертификатов.Ссылка? = Неопределено): ДанныеЭлектроннойПодписи?
    пер ДанныеЭлектроннойПодписи: ДанныеЭлектроннойПодписи?
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ХранилищеPkcs12,
            ПсевдонимСертификата,
            ПарольЗакрытогоКлюча
        Из ХранилищеСертификатов
        Где
            Ссылка == %ХранилищеСертификатаИздателя
            или (%ХранилищеСертификатаИздателя == Неопределено и Текущий)}
    исп Результат = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если РезультатСтроки.Пусто()
        возврат ДанныеЭлектроннойПодписи
    ;
    
    знч Хранилище: ХранилищеPkcs12 = новый ХранилищеPkcs12(РезультатСтроки[0].ХранилищеPkcs12.Загрузить().ПолучитьБайты())
    ДанныеЭлектроннойПодписи = ДанныеЭлектроннойПодписи(Хранилище, РезультатСтроки[0].ПсевдонимСертификата, РезультатСтроки[0].ПарольЗакрытогоКлюча)
    ДанныеЭлектроннойПодписи.ХранилищеСертификатаИздателя = РезультатСтроки[0].Ссылка
    
    возврат ДанныеЭлектроннойПодписи
;

@ВПроекте
метод ДанныеЭлектронныхПодписейИздателя(): ЧитаемыйМассив<ДанныеЭлектроннойПодписи>
    знч ДанныеЭлектронныхПодписейИздателя: Массив<ДанныеЭлектроннойПодписи>
    
    знч Запрос = Запрос{ВЫБРАТЬ
            ХранилищеСертификатов.Ссылка,
            ХранилищеСертификатов.ХранилищеPkcs12,
            ХранилищеСертификатов.ПсевдонимСертификата,
            ХранилищеСертификатов.ПарольЗакрытогоКлюча,
            ХранилищеСертификатов.СерийныйНомер
        ИЗ ХранилищеСертификатов КАК ХранилищеСертификатов}
   
    для СтрокаРезультата из Запрос.Выполнить()
        знч ДанныеЭлектроннойПодписи = ДанныеЭлектроннойПодписи(
                новый ХранилищеPkcs12(СтрокаРезультата.ХранилищеPkcs12.Загрузить().ПолучитьБайты()), 
                СтрокаРезультата.ПсевдонимСертификата, 
                СтрокаРезультата.ПарольЗакрытогоКлюча)
        ДанныеЭлектроннойПодписи.ХранилищеСертификатаИздателя = СтрокаРезультата.Ссылка
        ДанныеЭлектроннойПодписи.СерийныйНомер = СтрокаРезультата.СерийныйНомер
        
        ДанныеЭлектронныхПодписейИздателя.Добавить(ДанныеЭлектроннойПодписи)
    ;
    
    возврат новый ЧитаемыйМассив(ДанныеЭлектронныхПодписейИздателя)
;

/*
@ВПроекте
метод ДанныеЭлектроннойПодписи(ПсевдонимКлюча: Строка, ПарольЗакрытогоКлюча: Строка): ДанныеЭлектроннойПодписи
    знч Хранилище: ХранилищеPkcs12 = ХранилищеСертификатов.ХранилищеКлючейPkcs12()
    возврат ДанныеЭлектроннойПодписи(Хранилище, ПсевдонимКлюча, ПарольЗакрытогоКлюча)
;
*/

@ВПроекте
метод ДанныеЭлектроннойПодписи(ПсевдонимКлюча: Строка, ПарольЗакрытогоКлюча: Строка): ДанныеЭлектроннойПодписи
    возврат ДанныеЭлектроннойПодписи(ПсевдонимКлюча, ПарольЗакрытогоКлюча, ИспользуемыйКриптопровайдер())
;

@ВПроекте
метод ДанныеЭлектроннойПодписи(ПсевдонимКлюча: Строка, ПарольЗакрытогоКлюча: Строка, Криптопровайдер: Криптопровайдеры): ДанныеЭлектроннойПодписи
    знч Хранилище: ХранилищеКлючей = ХранилищеКлючей(Криптопровайдер)
    возврат ДанныеЭлектроннойПодписи(Хранилище, ПсевдонимКлюча, ПарольЗакрытогоКлюча)
;

@ВПроекте
метод ДанныеЭлектроннойПодписи(Хранилище: ХранилищеКлючей, ПсевдонимКлюча: Строка, ПарольЗакрытогоКлюча: Строка): ДанныеЭлектроннойПодписи
    пер ДанныеЭлектроннойПодписи: ДанныеЭлектроннойПодписи?
    пер Сертификат: ЦифровойСертификат? = ЦифровойСертификат(Хранилище, ПсевдонимКлюча)
    пер Ключ: ЗакрытыйКлюч? = Хранилище.НайтиЗакрытыйКлюч(ПсевдонимКлюча, ПарольЗакрытогоКлюча)
    если Ключ != Неопределено и Сертификат != Неопределено
         ДанныеЭлектроннойПодписи = новый ДанныеЭлектроннойПодписи(Сертификат, Ключ)
    иначе
        выбросить новый ИсключениеНеверныйПсевдонимКлюча("Неверный псевдоним ключа или пароль закрытого ключа")
    ;
    возврат ДанныеЭлектроннойПодписи
;

@ВПроекте
метод ЦифровойСертификат(Хранилище: ХранилищеКлючей, ПсевдонимКлюча: Строка): ЦифровойСертификат?
    возврат Хранилище.НайтиСертификат(ПсевдонимКлюча)
;

@ВПроекте
метод ПроверитьПодпись(Данные: Байты, Подпись: Байты): Булево
    возврат ПроверитьПодпись(Данные, Подпись, ИспользуемыйКриптопровайдер())
;

@ВПроекте
метод ПроверитьПодпись(Данные: Байты, Подпись: Байты, Криптопровайдер: Криптопровайдеры): Булево
    пер Результат: Булево
    пер Верификатор = новый ВерификаторПодписи(Криптопровайдер(Криптопровайдер), Подпись)
    попытка
        Результат = Верификатор.Проверить(Данные)
    поймать Ошибка: ИсключениеКриптографии 
        Результат = Ложь
        Журналирование.ЗарегистрироватьОшибку(Ошибка)
    ;
    возврат Результат
;

@ВПроекте
метод ДанныеСертификатовИзПодписи(Подпись: Байты, Криптопровайдер: Криптопровайдеры): Массив<ОбъектыКриптографии.ИнформацияОСертификате>
    пер ДанныеСертификатовИзПодписи: Массив<ОбъектыКриптографии.ИнформацияОСертификате>
    пер Верификатор = новый ВерификаторПодписи(Криптопровайдер(Криптопровайдер), Подпись)
    пер Сертификаты: ЧитаемыйМассив<ЦифровойСертификат> = Верификатор.ПолучитьСертификаты()
    
    для Сертификат из Сертификаты
        ДанныеСертификатовИзПодписи.Добавить(ИнформацияОСертификате(Сертификат))
    ;
    возврат ДанныеСертификатовИзПодписи
;
метод АдресаСлужбШтамповВремени(): Массив<Строка>
    пер АдресаСлужб: Массив<Строка>
    АдресаСлужб.Добавить("http://dss.1stdss.1c.ru/TSP/tsp.srf")
    АдресаСлужб.Добавить("http://service.itk23.ru/itcomTSP/tsp.srf")
    АдресаСлужб.Добавить("http://service.itk23.ru/tsp/tsp.srf")
    АдресаСлужб.Добавить("http://qs.cryptopro.ru/tsp/tsp.srf")
    АдресаСлужб.Добавить("http://tax4.tensor.ru/tsp-tensor_gost2012/tsp.srf")
    возврат АдресаСлужб
;

метод Криптопровайдер(Криптопровайдер: Криптопровайдеры): Криптопровайдер
    попытка
        выбор Криптопровайдер
        когда BouncyCastle
            возврат КриптопровайдерBouncyCastle()
        когда КриптоПро
            возврат Криптография.ПолучитьКриптоПро()
        ;
    поймать Ошибка: ИсключениеКриптографии
        Журналирование.ЗарегистрироватьОшибку("Криптография", Ошибка.ВСтроку(), Ошибка, ВажностьСобытияЖурналаСобытий.Высокая)
        выбросить новый ИсключениеВыполнения("Не установлен криптопровайдер %{Криптопровайдер.Представление()}") 
    ;
;

@ВПроекте
метод КриптопровайдерBouncyCastle(): Криптопровайдер
    возврат Криптография.ПолучитьBouncyCastle()
;

метод ХранилищеКлючей(Криптопровайдер: Криптопровайдеры): ХранилищеКлючей
    выбор Криптопровайдер
    когда BouncyCastle
        возврат ХранилищеСертификатов.ХранилищеКлючейPkcs12()
    когда КриптоПро
        возврат новый ХранилищеКриптоПро("HDImageStore")
    ;
;

метод ДанныеСертификатовИзПодписи(Подпись: Байты): Массив<ОбъектыКриптографии.ИнформацияОСертификате>
    пер ДанныеСертификатовИзПодписи: Массив<ОбъектыКриптографии.ИнформацияОСертификате>
    пер Криптопровайдер = Криптопровайдер(Криптопровайдеры.BouncyCastle)
    пер Верификатор = новый ВерификаторПодписи(Криптопровайдер, Подпись)
    пер Сертификаты: ЧитаемыйМассив<ЦифровойСертификат> = Верификатор.ПолучитьСертификаты()
    
    для Сертификат из Сертификаты
        ДанныеСертификатовИзПодписи.Добавить(ИнформацияОСертификате(Сертификат))
    ;
    возврат ДанныеСертификатовИзПодписи
;

метод ИспользуемыйКриптопровайдер(): Криптопровайдеры
    возврат Криптопровайдеры.BouncyCastle
;

@ВПроекте
@НаСервере
метод ИнформацияОСертификате(Сертификат: ЦифровойСертификат): ОбъектыКриптографии.ИнформацияОСертификате
    знч ПериодДействия = новый МенеджерДат.Интервал(Сертификат.ДействителенС, Сертификат.ДействителенПо)
    знч АтрибутыСубъекта = Сертификат.ПолучитьАтрибутыСубъекта()
    возврат новый ОбъектыКриптографии.ИнформацияОСертификате(
        Сертификат.Субъект,
        Сертификат.СерийныйНомер.ВСтроку(),
        ПериодДействия,
        Сертификат.ВБайты(),
        АтрибутыСубъекта.ПолучитьИлиУмолчание(АтрибутX500.Инн),
        АтрибутыСубъекта.ПолучитьИлиУмолчание(АтрибутX500.Снилс))
;

метод АтрибутыСубъекта(ИнформацияОСубъекте: ОбъектыКриптографии.ИнформацияОСубъекте): Соответствие<АтрибутX500, Строка>
    пер АтрибутыСубъекта: Соответствие<АтрибутX500, Строка>
    если не ИнформацияОСубъекте.Имя.Пусто()
        АтрибутыСубъекта.Вставить(АтрибутX500.Имя, ИнформацияОСубъекте.Имя)
    ;
    если не ИнформацияОСубъекте.Организация.Пусто()
        АтрибутыСубъекта.Вставить(АтрибутX500.Организация, ИнформацияОСубъекте.Организация)
    ;
    возврат АтрибутыСубъекта
;

@ВПроекте
метод ХешДвоичныхДанных(Данные: ДвоичныйОбъект): Строка
    возврат Данные.Хеш.ВСтроку()
;

@ВПроекте
метод ИнформацияОСертификатеПодписи(Подпись: ДвоичныйОбъект): ОбъектыКриптографии.ИнформацияОСертификате

    пер ПодписьВБайтах = Подпись.ПолучитьБайты()
    пер СертификатыПодписи = ДанныеСертификатовИзПодписи(ПодписьВБайтах)
    если не СертификатыПодписи.Пусто()
        возврат СертификатыПодписи[0]
    ;
    возврат новый ОбъектыКриптографии.ИнформацияОСертификате()  
;

@ВПодсистеме
метод НовыйСписокОтозванныхСертификатов(Сертификат: ЦифровойСертификат, ЗакрытыйКлюч: ЗакрытыйКлюч): СписокОтозванныхСертификатов
    знч Генератор = новый ГенераторСпискаОтозванныхСертификатов(Сертификат.Издатель, Момент.Сейчас())
    знч СписокОтозванныхСертификатов = Генератор.СоздатьСписокОтозванныхСертификатов(ЗакрытыйКлюч, "GOST3411-2012-256")
    возврат СписокОтозванныхСертификатов
;


@ВПроекте
метод ОбновитьИнфомрациюКорневогоСертификата(ПсевдонимСертификата: Строка, ПарольЗакрытогоКлюча: Строка)
    знч ХранилищеСертификатаИздателя = ХранилищеСертификатов.ОбновитьИнфомрациюКорневогоСертификата(ПсевдонимСертификата, ПарольЗакрытогоКлюча)
    знч ДанныеЭлектроннойПодписи = ДанныеЭлектроннойПодписи(ПсевдонимСертификата, ПарольЗакрытогоКлюча)
    пер СписокОтозванныхСертификатов = СписокОтозванныхСертификатов()
    если СписокОтозванныхСертификатов == Неопределено и ХранилищеСертификатаИздателя != Неопределено
        СписокОтозванныхСертификатов = НовыйСписокОтозванныхСертификатов(ДанныеЭлектроннойПодписи.Сертификат, ДанныеЭлектроннойПодписи.ЗакрытыйКлюч)
        знч ОтозванныеСертификаты = ОбъектноеХранилище.ЗагрузитьИзБайт(СписокОтозванныхСертификатов!.ВБайты()).Ссылка
        ХранилищеСертификатов.ОбновитьСписокОтозванныхСертификатов(ХранилищеСертификатаИздателя, ОтозванныеСертификаты)
    ;
;

@ВПроекте
метод МоментПодписи(Подпись: ДвоичныйОбъект.Ссылка): Момент?
    возврат МоментПодписи(Подпись.Загрузить().ПолучитьБайты())
;

@ВПроекте
метод МоментПодписи(Подпись: Байты): Момент?
    знч Верификатор = новый ВерификаторПодписи(Криптопровайдер(Криптопровайдеры.BouncyCastle), Подпись)
    возврат Верификатор.МоментПодписи
;