импорт ВзаимодействиеСEssm
импорт Уведомления
импорт СтандартноеПриложение
импорт ПриложениеНастройки
импорт ОбщиеСтандартные
импорт ЛичныеКабинетыПользователей
импорт КонтрольДоступа
импорт ОбменДанными
импорт ВебApi
импорт Статистика
импорт Почта

@НаСервере
конст ТЕМА_ТЕСТОВОГО_ПИСЬМА = "1С:Кабинет сотрудника тест отправки письма"
конст СПРАВКА_ПРОКСИ = 
"На этом шаге мы проверяем доступность внешних Интернет ресурсов, необходимых для работы Кабинета сотрудников на сервере.\н
Если в вашей организации используется прокси-сервер для доступа к внешним интернет ресурсам, на этом шаге вам нужно ввести его основные параметры.\н
Эти данные вы можете запросить у своего системного администратора."
конст СПРАВКА_РЕГИСТРАЦИЯ =
"Регистрация необходима для полноценной работы сервиса и осуществления поддержки.\н
После регистрации вы получите свой уникальный идентификатор. Этот номер нужно будет сообщать при обращении в тех. поддержку (support@1c-cabinet.ru)"
конст СПРАВКА_ОТПРАВКА_СМС =
"На этом шаге вы можете отказаться от использования Sms уведомлений и тогда Ваши сотрудники будут получать важные сообщения только на почту.\н
В случае недоступности сервиса, Вы можете включить использование Sms после регистрации, в разделе Настройки."
конст СПРАВКА_ОБМЕН =
"Адрес сервиса - это адрес по которому он будет доступен сотрудникам вашего предприятия через Интернет.\н
Например: https://ess.mycompany.ru/\н
Это может быть адрес, который настроен в реверс-прокси. Если сервис будет доступен сотрудникам только из локальной сети предприятия, это может быть адрес сервера в локальной сети."

@ВПодсистеме
перечисление Этапы
    ЗагрузкаНастроек умолчание,
    НастройкаПрокси,
    СервисРегистрации,
    СервисWelcome,
    СервисPush,
    СервисОтправкиSms,
    НастройкиПочты,
    КадроваяСистема,
    УстановкаОбмена
;

@ВПодсистеме
@НаСервере @НаКлиенте
структура ПараметрыРегистации
    пер ИдПриложения: Строка
    пер УуидПриложения: Ууид?
;

@ВПодсистеме
структура ПараметрыЭтапа
    пер Отображение: ПереключаемаяГруппа.РежимОтображения
    пер Подсветка: ОценкаИнформации
    пер ДополнительныйТекст: Строка = ""
    пер ОтображаемоеУведомление: Компонент?
;

//Область инициализации

@Обработчик
метод ПослеСоздания()
    ОбновитьДанные(ОценкаИнформации.Обычная)
    ПриложениеЗарегистрировано = не ИдПриложения().Пусто()
    если ПриложениеЗарегистрировано
        ЗапуститьЭтапРегистрации(Этапы.УстановкаОбмена)
    ;
;

метод ОбновитьДанные(Подсветка: ОценкаИнформации)
    ДанныеЭтапов = новый Соответствие<РегистрацияПриложенияКомпонент.Этапы, РегистрацияПриложенияКомпонент.ПараметрыЭтапа>()
    для Этап из Этапы.Элементы()
        ДанныеЭтапов.Вставить(Этап, новый ПараметрыЭтапа(ПереключаемаяГруппа.РежимОтображения.Компактный, Подсветка))
    ;
;

//КонецОбласти

//Область управления интерфейсом

метод ВидимостьРегистрацияГруппаКнопок(): Булево
    возврат ДанныеРегистрации.ИдПриложения.Пусто()
;

метод ДанныеАктуальногоЭтапа(): ПараметрыЭтапа
    возврат ДанныеЭтапов.Получить(АктуальныйЭтапРегистрации)
;

метод ЭтоАктуальныйЭтап(Этап: Этапы): Булево
    возврат этот.АктуальныйЭтапРегистрации == Этап
;

метод ОтобразитьУведомлениеШага(Подсветка: ОценкаИнформации, Компонент: Компонент)
    знч Этап = ДанныеЭтапов[АктуальныйЭтапРегистрации]
    Этап.ОтображаемоеУведомление = Компонент
    Этап.Подсветка = Подсветка
    
    если Этап.Подсветка != ОценкаИнформации.Положительная
        Этап.Отображение = ПереключаемаяГруппа.РежимОтображения.Развернутый
    ;
;

метод ЗапуститьЭтапРегистрации(ЭтапРегистарции: Этапы)
    ДанныеЭтапов[АктуальныйЭтапРегистрации].Отображение = ПереключаемаяГруппа.РежимОтображения.Компактный
    АктуальныйЭтапРегистрации = ЭтапРегистарции
    
    знч НастройкиЭтапа = ДанныеЭтапов[АктуальныйЭтапРегистрации]
    НастройкиЭтапа.Отображение = ПереключаемаяГруппа.РежимОтображения.Развернутый
    
    выбор ЭтапРегистарции
    когда Этапы.НастройкаПрокси
        ПроверкаДоступностиРесурсов(НастройкиЭтапа)
    когда Этапы.СервисРегистрации
        РегистрацияПриложения(НастройкиЭтапа)
    когда Этапы.СервисWelcome
        ПроверкаДоступностиСервисаWelcome(НастройкиЭтапа)
    когда Этапы.СервисPush
        ПроверкаДоступностиСервисаPush(НастройкиЭтапа)
    когда Этапы.СервисОтправкиSms
        ПроверкаДоступностиОтправкиSms(НастройкиЭтапа)
    когда Этапы.НастройкиПочты
        пер НастройкиПочты = ДанныеПодключенияПочты()
        если НастройкиПочты != Неопределено
            Компоненты.УчетнаяЗаписьПочтыКомпонент.Заполнить(НастройкиПочты)
        ;
    ;
;

//КонецОбласти

//Область обработки событий клиента

метод ПропуститьШагНастрокаПочты(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ДанныеЭтапов[АктуальныйЭтапРегистрации].Подсветка = ОценкаИнформации.Предупреждающая
    ЗапуститьЭтапРегистрации(Этапы.КадроваяСистема)
;

метод ПропуститьШагСервисаPush(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ЗапуститьЭтапРегистрации(Этапы.СервисОтправкиSms)
;

метод ПропуститьШагСервисаWelcome(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ЗапуститьЭтапРегистрации(Этапы.СервисPush)
;
    
метод НастройкаПроксиШагДалее(Источник: Кнопка, Событие: СобытиеПриНажатии)
    если Компоненты.НастройкиСтандартногоПриложения.Записать()
        ПроверкаДоступностиРесурсов(ДанныеЭтапов[АктуальныйЭтапРегистрации])
    ;
;

метод ПовторнаяРегистрация(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ЗапуститьЭтапРегистрации(Этапы.СервисРегистрации)
;

метод НастройкаSmsШагДалее(Источник: Кнопка, Событие: СобытиеПриНажатии)
    если ДанныеЭтапов[АктуальныйЭтапРегистрации].Подсветка != ОценкаИнформации.Предупреждающая
        если ЗапретитьИспользоватьSms
            знч Ответ = Диалог.Вопрос(
                            "Вы действительно хотите отключить отправку SMS сообщений?", 
                            [КнопкаДиалога.Да, КнопкаДиалога.Отмена], 
                            "Вы вбрали отказ от SMS", Ресурс{ПредупреждениеКонтур.svg}.Ссылка)     
            если Ответ == КнопкаДиалога.Отмена
                возврат
            ;
        ;
        ДанныеЭтапов[АктуальныйЭтапРегистрации].Подсветка = ОценкаИнформации.Положительная
    ;
    ЗапуститьЭтапРегистрации(Этапы.НастройкиПочты)
;

метод НастройкаПочтыСохранить(Источник: Кнопка, Событие: СобытиеПриНажатии)
    СохранениеНастроекПочты(ДанныеЭтапов[АктуальныйЭтапРегистрации])
;

метод НастройкаПочтыШагДалее(Источник: Кнопка, Событие: СобытиеПриНажатии)
    СохранениеНастроекПочты(ДанныеЭтапов[АктуальныйЭтапРегистрации])
;

метод НастройкаВыгрузитьФайл(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ВыгрузкаФайлов.НачатьВыгрузку(ДанныеФайлаНастроек(), "Настройки подключения кадровой системы.json")
;

метод ЗавершитьРегистрациюСВыгрузкойНастроек(Источник: Кнопка, Событие: СобытиеПриНажатии)
    Компоненты.АдресПриложения.РезультатПроверкиДанных = РезультатПроверкиДанных.Успех
    если ДанныеНастроек.Приложение.АдресПриложения.Пусто()
        Компоненты.АдресПриложения.РезультатПроверкиДанных = РезультатПроверкиДанных.Ошибка
        возврат
    ;
    ЗаписатьПоставляемыеНастройки(ДанныеНастроек, ДанныеРегистрации, ЗапретитьИспользоватьSms)
    ВыгрузкаФайлов.НачатьВыгрузку(ДанныеФайлаНастроек(), "Настройки подключения кадровой системы.json")
    ЗаписатьСпособыУведомлений(ЗапретитьИспользоватьSms)
    ДанныеЭтапов[АктуальныйЭтапРегистрации].Подсветка = ОценкаИнформации.Положительная
    ЗапуститьЭтапРегистрации(Этапы.УстановкаОбмена)
;

метод ВыборФайловПриИзменении(Источник: ВыборФайлов, Событие: СобытиеПриИзменении<ЧитаемыйМассив<ВыбранныйФайл>>)
    если ЗагрузкаПоставляемыхНастроек(Событие.НовоеЗначение[0])
        ЗапуститьЭтапРегистрации(Этапы.НастройкаПрокси)
    иначе
        Компоненты.ОшибкаЗагрузкиФайлаНастроек.Видимость = Истина
    ;
;

метод ЗавершитьРегистрацию(Источник: Кнопка, Событие: СобытиеПриНажатии)
    если не Приложение.Пусто()
        РегистрацияЗавершена(новый СобытиеКомпонента())
    иначе
        ОтобразитьУведомлениеШага(ОценкаИнформации.Отрицательная, Компоненты.ОшибкаОбменНеПроизведен)
    ;
;

метод ОткрытьЗагрузкуНастроек(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ЗапуститьЭтапРегистрации(Этапы.ЗагрузкаНастроек)
;

//КонецОбласти

//Область служебные методы

метод ЗагрузкаПоставляемыхНастроек(ФайлНастроек: ВыбранныйФайл): Булево
    пер ЗагрузкаФайла = ЗагрузкаФайлов.НачатьЗагрузку(ФайлНастроек)
    пер ПоставляемыеНастройки = ЗагрузкаФайла.ПолучитьРезультат()
    попытка
        ДанныеНастроек = ПриложениеНастройки.ЗагрузитьПоставляемыеНастройки(ПоставляемыеНастройки)
    поймать Ошибка: Исключение
        возврат Ложь
    ;
    возврат Истина
;

метод РегистрацияПриложения(Параметры: ПараметрыЭтапа)
    Параметры.Отображение = ПереключаемаяГруппа.РежимОтображения.Компактный
    ДанныеРегистрации = ЗарегистрироватьПриложение(ДанныеНастроек)
    знч УспешнаяРегистрация = не ДанныеРегистрации.ИдПриложения.Пусто()
    если УспешнаяРегистрация
        Параметры.Подсветка = ОценкаИнформации.Положительная
        Параметры.ДополнительныйТекст = "Ваш регистрационный номер: %{ДанныеРегистрации.ИдПриложения}"
        ЗапуститьЭтапРегистрации(Этапы.СервисWelcome)
    иначе
        ОтобразитьУведомлениеШага(ОценкаИнформации.Отрицательная, Компоненты.СервисРегистрацииНеДоступен)
    ;
;

метод СохранениеНастроекПочты(Параметры: ПараметрыЭтапа)
    если Компоненты.УчетнаяЗаписьПочтыКомпонент.Записать()
        Параметры.Подсветка = ОценкаИнформации.Положительная
    иначе
        ОтобразитьУведомлениеШага(ОценкаИнформации.Отрицательная, Компоненты.ПочтаОшибкаСохранения)
        возврат
    ;
    если ОтправитьТестовоеПисьмо()
        Параметры.Подсветка = ОценкаИнформации.Положительная
    иначе
        ОтобразитьУведомлениеШага(ОценкаИнформации.Отрицательная, Компоненты.ОшибкаОтправкиПочты)
        возврат
    ;
    ЗапуститьЭтапРегистрации(Этапы.КадроваяСистема)
;
    

метод ПроверкаДоступностиРесурсов(Параметры: ПараметрыЭтапа)
    Параметры.Отображение = ПереключаемаяГруппа.РежимОтображения.Компактный
    если Приложение.ИнтернетДоступОткрыт(ДанныеНастроек)
        Параметры.Подсветка = ОценкаИнформации.Положительная
        ЗапуститьЭтапРегистрации(Этапы.СервисРегистрации)
    иначе
        ОтобразитьУведомлениеШага(ОценкаИнформации.Отрицательная, Компоненты.ОшибкаДоступностиРесурсов)
    ;
;

метод ПроверкаДоступностиСервисаWelcome(Параметры: ПараметрыЭтапа)
    Параметры.Отображение = ПереключаемаяГруппа.РежимОтображения.Компактный
    если ЛичныеКабинетыПользователей.СервисWelcomeДоступен()
        Параметры.Подсветка = ОценкаИнформации.Положительная
        ЗапуститьЭтапРегистрации(Этапы.СервисPush)
    иначе
        ОтобразитьУведомлениеШага(ОценкаИнформации.Предупреждающая, Компоненты.СервисWelcomeНеДоступен)
    ;
;

метод ПроверкаДоступностиСервисаPush(Параметры: ПараметрыЭтапа)
    Параметры.Отображение = ПереключаемаяГруппа.РежимОтображения.Компактный
    если СервисPushДоступен(ДанныеНастроек.ИдентификаторPushNotifications)
        Параметры.Подсветка = ОценкаИнформации.Положительная
        ЗапуститьЭтапРегистрации(Этапы.СервисОтправкиSms)
    иначе
        ОтобразитьУведомлениеШага(ОценкаИнформации.Предупреждающая, Компоненты.СервисPushНеДоступен)
    ;
;

метод ПроверкаДоступностиОтправкиSms(Параметры: ПараметрыЭтапа)
    знч SmsСервисДоступен = СервисОтправкиSmsДоступен(ДанныеНастроек.ОтправкаSms.НастройкиУчетнойЗаписи)
    ЗапретитьИспользоватьSms = не SmsСервисДоступен
    Компоненты.ФражокРазрешитьИспользованиеCмс.Доступность = SmsСервисДоступен
    
    если SmsСервисДоступен
        Параметры.Подсветка = ОценкаИнформации.Обычная
    иначе
        ОтобразитьУведомлениеШага(ОценкаИнформации.Предупреждающая, Компоненты.СервисОтправкиSmsНеДоступен)
    ;
;

метод ВсеСервисыДоступны(): Булево
    пер Результат = Истина
    для Этап из [Этапы.СервисPush, Этапы.СервисWelcome, Этапы.СервисОтправкиSms]
        Результат = Результат и (ДанныеЭтапов[Этап].Подсветка == ОценкаИнформации.Положительная)
    ;
    возврат Результат
;

@НаСервере @ДоступноСКлиента
статический метод СервисPushДоступен(Идентификатор: Строка): Булево
    возврат УведомленияСервер.СервисPushУведомленийДоступен(Идентификатор)
;

@НаСервере @ДоступноСКлиента
статический метод СервисОтправкиSmsДоступен(УчетнаяЗаписьSms: Уведомления.НастройкиУчетнойЗаписиОтправкиSms): Булево
    возврат УведомленияСервер.СервисОтправкиSmsДоступен(УчетнаяЗаписьSms)
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеПодключенияПочты(): ПодключениеПочтовогоСервера?
    возврат УчетныеЗаписиПочты.ПодключениеПодсистемы(Почта.ИД_ПОДСИСТЕМЫ)
;

@НаСервере @ДоступноСКлиента
статический метод ОтправитьТестовоеПисьмо(): Булево
    знч УчетнаяЗаписьСервераПочты = ДанныеПодключенияПочты()
    если УчетнаяЗаписьСервераПочты == Неопределено
        возврат Ложь
    ;
    знч Сообщение = новый ПочтовоеСообщение(
        Тема = ТЕМА_ТЕСТОВОГО_ПИСЬМА,
        ПолучателиПисьма = [УчетнаяЗаписьСервераПочты.УчетнаяЗапись],
        ОтправительПочта = УчетнаяЗаписьСервераПочты.УчетнаяЗапись,
        ДатаОтправки = МенеджерДат.ТекущаяДатаВремя()
    )
    пер РезультатОтправки = Почта.ОтправитьСообщение(Сообщение)
    если РезультатОтправки.Статус == СтатусыОтправки.Отправлено
        ПользователиСистемы.УстановитьШлюзSmtp(
            Почта.НастройкиШлюза(УчетнаяЗаписьСервераПочты)
        )
        возврат Истина
    ;
    возврат Ложь
;

//КонецОбласти

//Область чтения и записи данных

@НаСервере @ДоступноСКлиента
статический метод ЗарегистрироватьПриложение(ПараметрыДоступа: ПриложениеНастройки.ПоставляемыеНастройкиПриложения): ПараметрыРегистации
    пер Приложение: КлиентEssm.Приложение?
    пер Регистрация = новый ПараметрыРегистации()
    попытка
        Приложение = КлиентEssm.ЗарегистрироватьПриложения(ПараметрыДоступа.ПараметрыДоступаКEssm)
    поймать Ошибка: Исключение
        Журналирование.ЗарегистрироватьОшибку(
            Тип = "РегистрацияПриложения", 
            Описание = "Отказ в регистрации",
            Причина = Ошибка,
            Важность = ВажностьСобытияЖурналаСобытий.Высокая)
        возврат Регистрация
    ;
    МенеджерНастроекПриложения.УстановитьИдентификаторыПриложения(Приложение!.Ид, Приложение!.Ууид)
    пер ИнформационнаяСистема: ИнформационныеСистемы.Ссылка? = ИнформационныеСистемы.НайтиПоНаименованию(ПриложениеНастройки.НАИМЕНОВАНИЕ_1С_ПРЕДПРИЯТИЕ)
    если ИнформационнаяСистема == Неопределено
        пер ИдентификаторПользователя = СоздатьПользователяИнформационнойСистемы()
        СоздатьИнформационнуюСистему(ИдентификаторПользователя)
    ;
    ОтключитьСаморегистрациюПользователей()
    Статистика.ИнициализироватьОтправку()
    Регистрация.ИдПриложения = Приложение.Ид
    Регистрация.УуидПриложения = новый Ууид(Приложение.Ууид)
    возврат Регистрация
;

@НаСервере
статический метод ОтключитьСаморегистрациюПользователей()
    пер СписокПользователей = СпискиПользователей.ПолучитьСписокПоУмолчанию()
    СпискиПользователей.Изменить(СписокПользователей.ССамостоятельнойРегистрацией(Ложь))
;

@ВПроекте
@НаСервере @ДоступноСКлиента
статический метод ЗаписатьСпособыУведомлений(ОтключитьSmsУведомления: Булево)
    если Уведомления.НастройкиУведомлений().Пусто()
        знч СпособыУведомлений = СпособыУведомления.Элементы()
        СпособыУведомлений.Удалить(СпособыУведомления.НеУведомлять)
        Уведомления.ЗаписатьСпособыУведомлений(СпособыУведомлений)
    ;
    если ОтключитьSmsУведомления
        Уведомления.ОтключитьОтправкуSms()
    ;
;

@ВПроекте
@НаСервере @ДоступноСКлиента
статический метод ЗаписатьПоставляемыеНастройки(ДанныеНастроек: ПриложениеНастройки.ПоставляемыеНастройкиПриложения, ДанныеРегистрации: ПараметрыРегистации,
        ЗапретитьИспользоватьSms: Булево)
    пер Настройки = МенеджерНастроекПриложения.НастройкиПриложения()
    Настройки.УуидПриложения = ДанныеРегистрации.УуидПриложения
    Настройки.ИдПриложения = ДанныеРегистрации.ИдПриложения
    Настройки.ИдEssWelcome = ДанныеНастроек.ИдEssWelcome
    МенеджерНастроекПриложения.СохранитьНастройки(Настройки)
    
    пер Идентификаторы = новый Уведомления.ИдентификаторыПриложения()
    пер КлючиИдентификаторов = ["pushNotificationId"]
    Идентификаторы.ИдентификаторPushNotifications = ДанныеНастроек.ИдентификаторPushNotifications
    если не ЗапретитьИспользоватьSms
        КлючиИдентификаторов.Добавить("smsGate")
        Идентификаторы.ИдентификаторSmsGate = ДанныеНастроек.ОтправкаSms.ИдентификаторSmsGate
        Уведомления.УстановитьНастройкиУчетнойЗаписиОтправкиSms(ДанныеНастроек.ОтправкаSms.НастройкиУчетнойЗаписи)
        Уведомления.ВключитьОтправкуSms(
            новый Уведомления.НастройкиОтправкиSms(
                Идентификаторы.ИдентификаторSmsGate,
                ДанныеНастроек.ОтправкаSms.НастройкиУчетнойЗаписи
            )
        )
    ;
    Уведомления.УстановитьИдентификаторыПриложения(Идентификаторы, КлючиИдентификаторов)
    ВзаимодействиеСEssm.СохранитьПараметрыДоступаКEssm(ДанныеНастроек.ПараметрыДоступаКEssm)
    
    пер НастройкиПриложения = СтандартноеПриложение.НастройкиПриложения()
    НастройкиПриложения.АдресПриложения = ДанныеНастроек.Приложение.АдресПриложения
    СтандартноеПриложение.ЗаписатьНастройкиПриложения(НастройкиПриложения)
;

@НаСервере
статический метод СоздатьПользователяИнформационнойСистемы(): ИдПользователя
    пер СвойстваПользователя = новый КонтрольДоступа.СвойстваПользователя()
    СвойстваПользователя.Представление = "InfoSystem"
    СвойстваПользователя.РолиДоступа.Добавить(РолиДоступа.МенеджерСервиса)
    СвойстваПользователя.РолиДоступа.Добавить(РолиДоступа.ИнформационнаяСистема)
    СвойстваПользователя.РолиДоступа.Добавить(РолиДоступа.АдминистраторАбонента)
    
    пер СписокБезПодтвержденияУчетнойЗаписи = ПользователиСистемы.СписокБезПодтвержденияУчетнойЗаписи()
    пер Пользователь: Пользователи.Объект = ПользователиСистемы.СоздатьПользователя(СвойстваПользователя, СписокБезПодтвержденияУчетнойЗаписи)
    
    возврат Пользователь.Ид
;

@НаСервере
статический метод СоздатьИнформационнуюСистему(ИдПользователя: ИдПользователя)
    пер ДанныеИнформационнойСистемы = новый ИнформационныеСистемы.ДанныеИнформационнойСистемы()
    ДанныеИнформационнойСистемы.Наименование = ПриложениеНастройки.НАИМЕНОВАНИЕ_1С_ПРЕДПРИЯТИЕ
    ДанныеИнформационнойСистемы.ИдПользователя = ИдПользователя
    ДанныеИнформационнойСистемы.ВидПриложения = ВидПриложения.Hrm
    ИнформационныеСистемы.СоздатьИнформационнуюСистему(ДанныеИнформационнойСистемы)
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеФайлаНастроек(): ДвоичныйОбъект.Ссылка
    возврат МенеджерНастроекПриложения.ДанныеФайлаНастроек()
;

@НаСервере @ДоступноСКлиента
статический метод ИдПриложения(): Строка
    возврат МенеджерНастроекПриложения.ОбщедоступныеНастройкиПриложения().ИдПриложения
;

//КонецОбласти
