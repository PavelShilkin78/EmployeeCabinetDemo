импорт ИнтерфейсныеКомпонентыСтандартные
импорт ОбщиеСтандартные
импорт ВладельцыКабинетов
импорт ФизическиеЛица
импорт ОбщегоНазначения

@ВПроекте
@Реализация
метод Инициализировать()

    ИнтерфейсныеКомпоненты.ИнициализироватьПодчиненныеКомпоненты(Компоненты)
    ПолучитьИнформациюОПоследнемЗапросеНаВыплату()
    ОбновитьВидимостьЭлементов() 
            
    МенеджерГлобальныхКлиентскихСобытий.ПодключитьОбработчик(метод (Источник, Параметры) ->
        выбор Источник 
        когда ОбщегоНазначения.СОГЛАСИЕ_КЭДО_ПОДПИСАНО
            ОбновитьВидимостьЭлементов()
        ;
        возврат
    ;)
    
    МенеджерГлобальныхКлиентскихСобытий.ПодключитьОбработчик(метод (Источник, Параметры) ->
        выбор Источник
        когда ФизЛица.ТРЕБУЕТСЯ_ОБНОВЛЕНИЕ_ДАННЫХ_ФИЗИЧЕСКОГО_ЛИЦА
            ПослеИзмененияСтатусаЗапроса()
        ;
        возврат
    ;)
    
    ПодключитьОжиданиеФинальныхСтатусов()

;

метод ПодключитьОжиданиеФинальныхСтатусов()

    если ИнформацияОЗапросеНаВыплату == Неопределено
        возврат
    ;
    
    если ИнформацияОЗапросеНаВыплату.ЗапросНаВыплату.Статус == СтатусыЗапросовНаВыплату.Исполнен
          ЗарплатаСразу.ЖдатьИзменениеСтатусаЗапроса(
            ИнформацияОЗапросеНаВыплату.ЗапросНаВыплату.Ид, 
            СтатусыЗапросовНаВыплату.Завершен,
            ВладельцыКабинетов.ПараметрыСеанса().ФизическоеЛицо)
    иначе если ИнформацияОЗапросеНаВыплату.ЗапросНаВыплату.Статус != СтатусыЗапросовНаВыплату.Завершен
        и ИнформацияОЗапросеНаВыплату.ЗапросНаВыплату.Статус != СтатусыЗапросовНаВыплату.Отклонен
            ЗарплатаСразу.ЖдатьИзменениеСтатусаЗапроса(
            ИнформацияОЗапросеНаВыплату.ЗапросНаВыплату.Ид, 
            СтатусыЗапросовНаВыплату.Исполнен,
            ВладельцыКабинетов.ПараметрыСеанса().ФизическоеЛицо)
    ;

;

метод ПолучитьИнформациюОПоследнемЗапросеНаВыплату()

   если БылиЗапросыНаВыплату()
        ИнформацияОЗапросеНаВыплату = 
            ЗарплатаСразу.ИнформацияОЗапросеНаВыплату(ЗарплатаСразу.ПоследнийЗапросНаВыплату(ИнформацияОСотруднике.ЗапросыНаВыплату).Ид)   
    ;

;

метод БылиЗапросыНаВыплату(): Булево

   возврат ЗарплатаСразу.ЗарплатаСразуДоступна()
        и ИнформацияОСотруднике != Неопределено
        и ИнформацияОСотруднике.ЗапросыНаВыплату.Граница() >= 0
        
;

метод ЗаголовокСуммаКомиссии(): Строка
    
    если ДатаВремя.Сейчас() < ИнформацияОЗапросеНаВыплату.ОплатаКомиссии.ДатаОплатыСоСкидкой.ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий()) 
        возврат МенеджерСтрок.ФорматЧисла(ИнформацияОЗапросеНаВыплату.ОплатаКомиссии.РасчетнаяСуммаСоСкидкой, ДлинаДробнойЧасти = 0) + " ₽"
    иначе 
        возврат МенеджерСтрок.ФорматЧисла(ИнформацияОЗапросеНаВыплату.ОплатаКомиссии.РасчетнаяСуммаБезСкидки, ДлинаДробнойЧасти = 0) + " ₽"
    ;
;

метод ТекстПоСтатусуОплатыЛицензии(): Строка
    
    выбор ИнформацияОЗапросеНаВыплату.ОплатаКомиссии.Статус
    когда СтатусыОплатыКомиссии.ВОбработке
        возврат "Обрабатывается оплата сервиса"
    иначе
        возврат "Ожидается оплата сервиса"
    ;
;

метод ОплатитьЛицензиюПриНажатии(Источник: Кнопка, Собитие: СобытиеПриНажатии)
    
    знч СсылкаДляВозврата = ЗарплатаСразу.НавигационнаяСсылкаОсновногоРаздела()
    пер СсылкаНаОплатуКомиссии = ЗарплатаСразу.СсылкаНаПроведениеКомиссионногоПлатежа(ИнформацияОЗапросеНаВыплату.ЗапросНаВыплату.Ид, СсылкаДляВозврата)
   
    ПерейтиПоСсылке(СсылкаНаОплатуКомиссии.СсылкаНаОплату, Истина)
    
    ЗарплатаСразу.ЖдатьИзменениеСтатусаЗапроса(
        ИнформацияОЗапросеНаВыплату.ЗапросНаВыплату.Ид, 
        СтатусыЗапросовНаВыплату.Завершен,
        ВладельцыКабинетов.ПараметрыСеанса().ФизическоеЛицо)
 
;

метод ПослеИзмененияСтатусаЗапроса()
    
    если БылиЗапросыНаВыплату()
    
        ИнформацияОЗапросеНаВыплату = ЗарплатаСразу.ИнформацияОЗапросеНаВыплату(ИнформацияОЗапросеНаВыплату.ЗапросНаВыплату.Ид)
    
        ЗаявлениеНаВыплату.Перезаписать(ИнформацияОЗапросеНаВыплату)
        ИнформацияОСотруднике = ЗарплатаСразу.ОбновитьИнформациюОСотруднике(ИнформацияОСотруднике.Сотрудник.Ид)
    ;
;


метод ИсторияЗапросовКнопкаПриНажатии(Источник: Кнопка, Собитие: СобытиеПриНажатии)

    СписокЗаявленийНаВыплату.ОткрытьВМодальномОкне(ЕстьЗапросыНаВыплату = Истина)
   
;

метод ВидимостьГруппыОплатыЛицензии(): Булево

    возврат ИнформацияОЗапросеНаВыплату != Неопределено 
        и (ИнформацияОСотруднике.Лимит.ОплачиваетКомиссию == Истина или ИнформацияОСотруднике.Лимит.ЕстьНеоплаченныеКомиссии)
        и ИнформацияОЗапросеНаВыплату.ОплатаКомиссии != Неопределено
        и ИнформацияОЗапросеНаВыплату.ОплатаКомиссии.Статус != СтатусыОплатыКомиссии.Оплачена
        и ИнформацияОСотруднике.Лимит.МожноСоздатьЗапросНаВыплату == Ложь

;

метод ЗаголовокСуммаБезСкидки(): Строка
    
    пер ВремяОплатыСоСкидкой = МенеджерДат.ФорматМомента(
        ИнформацияОЗапросеНаВыплату.ОплатаКомиссии.ДатаОплатыСоСкидкой, "ЧЧ:мм", МенеджерДат.ЧасовойПоясТекущий())
    пер ДатаОплатыСоСкидкой = МенеджерДат.ФорматМомента(
        ИнформацияОЗапросеНаВыплату.ОплатаКомиссии.ДатаОплатыСоСкидкой, "дд.ММ.гггг", МенеджерДат.ЧасовойПоясТекущий())
    пер Сумма = МенеджерСтрок.ФорматЧисла(ИнформацияОЗапросеНаВыплату.ОплатаКомиссии.РасчетнаяСуммаБезСкидки, ДлинаДробнойЧасти = 0)
    
    возврат 
        "Скидка действует до %ВремяОплатыСоСкидкой %ДатаОплатыСоСкидкой, 
        после %ВремяОплатыСоСкидкой %ДатаОплатыСоСкидкой к оплате %Сумма ₽"

;

метод ЗаголовокСуммаОплатить(): Строка
    
    пер СуммаКомиссии = ЗаголовокСуммаКомиссии()
    возврат "Оплатить %СуммаКомиссии"

;

метод ЗаголовокЗаВыплату(): Строка

    пер Сумма = МенеджерСтрок.ФорматЧисла(ИнформацияОЗапросеНаВыплату.ЗапросНаВыплату.Сумма, ДлинаДробнойЧасти = 0)
    пер Дата = МенеджерДат.ФорматМомента(ИнформацияОЗапросеНаВыплату.ЗапросНаВыплату.ДатаВремяСоздания, "дд.ММ.гггг")
    
    возврат "за выплату %Сумма ₽ от %Дата" 
    
;

метод ВидимостьНеудачнаяПопыткаОплатыЛицензии(): Булево
    
    возврат ИнформацияОЗапросеНаВыплату != Неопределено 
        и ИнформацияОЗапросеНаВыплату.ОплатаКомиссии != Неопределено
        и ИнформацияОЗапросеНаВыплату.ОплатаКомиссии.Статус == СтатусыОплатыКомиссии.Отклонена 
        и ВидимостьГруппыОплатыЛицензии()
;

метод ЗаголовокПричинаБлокировки(): Строка
    
    если ИнформацияОСотруднике.Лимит.ПричинаБлокировкиЗапросаНаВыплату != Неопределено
        возврат ИнформацияОСотруднике.Лимит.ПричинаБлокировкиЗапросаНаВыплату
    иначе
        возврат ""
    ;

;

метод ПовторитьКнопкаПриНажатии(Источник: Кнопка, Собитие: СобытиеПриНажатии)

    ПолучитьИнформациюОПоследнемЗапросеНаВыплату()

;

метод УсловияРаботыСервисаКнопкаПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)

    пер Текст = ЗарплатаСразу.ТекстПС()
    
    если Текст != Неопределено
        ПросмотрHtml.ОткрытьВМодальномОкне(Контент = Текст)    
    ;
;

метод ВидимостьЗапроситьВыплатуКнопка(): Булево

    возврат ИнформацияОСотруднике.Лимит.МожноСоздатьЗапросНаВыплату
        и не НеПодключенККЭДОНетСогласияНадписьВидимость 
        и не КомандаПодключитесьККэдоВидимость
        и не ЕстьСогласиеНетЭПНадписьВидимость 

;

метод ЗаголовокНеПодключенККЭДОНадпись(): Строка
    возврат СогласиеНаПрисоединениеККэдоКлиентСервер.ТекстПриглашенияККэдоРасширенный(ВладельцыКабинетов.ПараметрыСеанса().ФункциональныеОпции.ПолучениеСогласияКэдоУнэп)
;

метод НеПодключенККЭДОКнопкаПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    КомплектСогласиеНаПрисоединениеККэдоФорма.ОткрытьВМодальномОкне()  
;

метод КартинкаПамяткаПриНажатии(Источник: Картинка, Событие: СобытиеПриНажатии)
    ПодсказкаКЭДОКомпонент.ОткрытьВоВсплывающемОкне(ТекстКЭДО = ЗаголовокНеПодключенККЭДОНадпись())
;

метод ОбновитьВидимостьЭлементов()
    знч ДанныеЗаполнения = ДанныеЗаполнения(ВладельцыКабинетов.ПараметрыСеанса().ФизическоеЛицо)
    КомандаПодключитесьККэдоВидимость =  ДанныеЗаполнения.ЕстьНеподписанныеСогласия
    НеПодключенККЭДОНетСогласияНадписьВидимость = не ДанныеЗаполнения.ИспользуетКэдо
    ЕстьСогласиеНетЭПНадписьВидимость = ДанныеЗаполнения.ПамяткаКэдоВидимость
    ВидимостьОшибкиПриПолученииЗапроса = БылиЗапросыНаВыплату() и ИнформацияОЗапросеНаВыплату == Неопределено
;

метод ЗаголовокНеПодключенККЭДОНетСогласияНадпись(): Строка
    возврат "Для запроса аванса требуется получить согласие на подключение к кадровому электронному документообороту. Пожалуйста, обратитесь к Вашему работодателю."
;

@НаСервере @НаКлиенте
структура ДанныеЗаполнения
    пер ЕстьНеподписанныеСогласия: Булево
    пер ИспользуетКэдо: Булево
    пер ПамяткаКэдоВидимость: Булево
;

метод ЗаголовокЕстьСогласиеНетЭПНадпись(): Строка

    возврат СогласиеНаПрисоединениеККэдоКлиентСервер.ТекстПамяткаКэдо(ВладельцыКабинетов.ПараметрыСеанса().ИспользуетКэдо)
;

@НаСервере @ДоступноСКлиента
статический метод ДанныеЗаполнения(ФизическоеЛицо: ФизическиеЛица.Ссылка): ДанныеЗаполнения

    пер ДанныеЗаполнения: ДанныеЗаполнения
    
    ДанныеЗаполнения.ЕстьНеподписанныеСогласия = СогласиеНаПрисоединениеККэдоСервер.ЕстьНеподписанныеСогласия(ФизическоеЛицо)
    ДанныеЗаполнения.ИспользуетКэдо = ВладельцыКабинетов.ФизическоеЛицоИспользуетКэдо(ФизическоеЛицо)
    ДанныеЗаполнения.ПамяткаКэдоВидимость = СогласиеНаПрисоединениеККэдоСервер.ПамяткаКэдоВидимость()
    
    возврат ДанныеЗаполнения
;