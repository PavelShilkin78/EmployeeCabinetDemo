импорт Зарплата
импорт ВебApi
импорт Компания
импорт Компания::Согласования
импорт КонтрольДоступа
импорт ОбменДанными
импорт ОбщиеСтандартные
импорт УниверсальныеМеханизмы
импорт УниверсальныеМеханизмы::ШаблоныДокументов
импорт ФизическиеЛица

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ПолныйДоступАутентифицированным(этот)]
;


@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ЗаявлениеНаВыплату.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ЗаявлениеНаВыплату.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ЗаявлениеНаВыплату.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ЧтениеИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПоПолномочиям(
            [Зарплата.ПолномочиеПросмотрЗарплаты()],
            Элемент.ФизическоеЛицо
        ))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеРедактированиеУдалениеДанныхСправочниковПерсонально([Элемент.ФизическоеЛицо]))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

//КонецОбласти

@ВПодсистеме
метод ФизическиеЛицаДокументов(Документы: ЧитаемыйМассив<ЗаявлениеНаВыплату.Ссылка>): ЧитаемоеСоответствие<ЗаявлениеНаВыплату.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч ФизическиеЛицаДокументов: Соответствие<ЗаявлениеНаВыплату.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ФизическоеЛицо
        ИЗ
            ЗаявлениеНаВыплату
        ГДЕ
            Ссылка в (%Документы)   
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ФизическиеЛицаДокументов.Вставить(СтрокаРезультата.Ссылка, [СтрокаРезультата.ФизическоеЛицо])    
    ;
    возврат ФизическиеЛицаДокументов
;

@ВПроекте
метод ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента: Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>)
    
    для ДанныеИдентификатора из ДанныеДокумента
        пер ПоставляемыеДанные = ДанныеИдентификатора.Значение.Данные
        пер Текст = Символы.ТАБ + "Настоящим сообщаю, что мной в период"
        пер НачалоПериода = (ПоставляемыеДанные["ДанныеДокументаПериодС"] как Дата).Представление("дд ММММ гггг")
        пер КонецПериода = (ПоставляемыеДанные["ДанныеДокументаПериодПо"]  как Дата).Представление("дд ММММ гггг")
        пер Сумма = (ПоставляемыеДанные["ДанныеДокументаСумма"]  как Число).ВСтроку()
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаНаименование", "Заявление")
        
        Текст = 
            "   %Текст c %НачалоПериода г. по %КонецПериода г. добросовестно выполнялись мои трудовые функции и обязанности. Прогулов, несогласованных отсутствий и дней за свой счёт, опозданий, неучтённых больничных дней и замечаний к моей работе за указанный период также не было. В связи с этим прошу выдать мне раньше срока часть заработной платы за отработанные дни в размере %Сумма руб. Запрошенная сумма указана за вычетом налога на доходы физических лиц (НДФЛ).
                                                                 
                Если в ходе расчёта моей зарплаты выяснится, что у меня не было оснований для получения указанной суммы и возникла переплата, обязуюсь вернуть обратно полученные деньги. Также даю своё согласие на удержание части моей зарплаты до полного погашения возникшей переплаты."
        ПоставляемыеДанные.Вставить("ДанныеДокументаТекст", Текст)
    ;
;

@ВПроекте
метод ДанныеДокументаДляПечатнойФормы(ДокументСсылка: Объект):
    Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>
    
   пер ДанныеДокумента = новый Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>()
   
    знч ДанныеЗаявления = ДанныеЗаявленияНаВыплату(ДокументСсылка как ЗаявлениеНаВыплату.Ссылка)
    если не ДанныеЗаявления.Пусто()
        пер ПоставляемыеДанные = ПредставленияДокументов.ДанныеПредставленияДокумента(ДанныеЗаявления)
        ДанныеДокумента.Вставить("", новый ШаблоныДокументовМенеджер.ДанныеПечатныхФорм(Данные = ПоставляемыеДанные))
    ;
    ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента)
    возврат ДанныеДокумента 
;

метод ДанныеЗаявленияНаВыплату(ЗаявлениеНаВыплату: ЗаявлениеНаВыплату.Ссылка): ЧитаемоеСоответствие<Строка, Объект?>
    возврат ДанныеЗаявленийНаВыплату([ЗаявлениеНаВыплату])[ЗаявлениеНаВыплату]
;

@ВПодсистеме
метод ПодписываемыйФайлаДокумента(Документ: ЗаявлениеНаВыплату.Ссылка): Файлы.Ссылка?
    возврат Файлы.ЭлектронныйДокументОбъекта(Документ)    
;

@ВПодсистеме
метод ОрганизацияДокумента(Документ: ЗаявлениеНаВыплату.Ссылка): Организации.Ссылка?
    знч Запрос = Запрос{
        Выбрать Первые 1
            Организация
        Из
            ЗаявлениеНаВыплату
        Где
            Ссылка == %Документ
    }
    исп Результат = Запрос.Выполнить()
    возврат Результат.ЕдинственныйИлиУмолчание().Организация
;

//КонецОбласти

//Область СлужебныеПроцедурыИФункции
@ВПодсистеме
метод ПослеПодписания(Документ: ЗаявлениеНаВыплату.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего)
    если ДанныеСогласующего.Роль == Согласования.РольПодписантаИсполнитель()
        СостДокументов.УстановитьСостояниеДокумента(Документ, СостоянияДокумента.Выполнен)
        возврат
    ;
    
    знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Документ, "ФизическоеЛицо")
    
    исп Транзакции.Начать()
    ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Документ, Истина)
    РегистрацияИзменений.ЗарегистрироватьИзменение(Документ, ФизическоеЛицо)
    СогласованияДокументов.ЗарегистрироватьПодписиОтправляемогоДокумента(Документ, Истина)
;

структура ЗаявлениеНаВыплату_2_1
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка
    @JsonСвойство(Имя = "personID")
    обз знч ФизическоеЛицо: Строка
    @JsonСвойство(Имя = "version")
    пер Версия: Число?
    @JsonСвойство(Имя = "dateCreated")
    пер ДатаСоздания: ДатаВремя?
    @JsonСвойство(Имя = "employerID")
    пер Организация: Строка?
    @JsonСвойство(Имя = "amount")
    пер Сумма: Число?
    @JsonСвойство(Имя = "note")
    пер Комментарий: Строка?
    @JsonСвойство(Имя = "document")
    пер Документ: Файлы.ЭлектронныйДокументJson_V2_1?
;

метод ДанныеЗаявленийНаВыплату(ЗаявленияСсылка: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<ЗаявлениеНаВыплату.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    
    знч Заявления: Массив<ЗаявлениеНаВыплату.Ссылка>
    для Заявление из ЗаявленияСсылка
        Заявления.Добавить(Заявление как ЗаявлениеНаВыплату.Ссылка)
    ;
    знч ДанныеЗаявлений: Соответствие<ЗаявлениеНаВыплату.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Дата,
            ПериодС,
            ПериодПо,
            МоментСоздания,
            Ид, 
            ФизическоеЛицо,
            Организация,
            Сумма,
            Комментарий
        Из
            ЗаявлениеНаВыплату
        Где
            Ссылка В (%Заявления) 
            И ФизическоеЛицо != Неопределено
            И Организация != Неопределено}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        ДанныеЗаявлений.Вставить(
            РезультатСтрока.Ссылка,
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат))
    ;
    возврат ДанныеЗаявлений
    
;

метод ДанныеЗаявленийНаВыплатуВJson(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево): ЗаявлениеНаВыплату_2_1
    знч Ссылки: Массив<ВходящиеДанные.Ссылка>
    Ссылки.Добавить(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
    если ДанныеОбъекта["Организация"] != Неопределено
        Ссылки.Добавить(ДанныеОбъекта["Организация"] как Организации.Ссылка)
    ;

    Сервисы.ПолучитьИдентификаторы(Ссылки)

    знч ДанныеВJson = новый ЗаявлениеНаВыплату_2_1(
        (ДанныеОбъекта["Ссылка"] как ЗаявлениеНаВыплату.Ссылка).Ид.ВСтроку(),
        Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка))

    ДанныеВJson.ДатаСоздания = (ДанныеОбъекта["МоментСоздания"] как Момент?).ВДатаВремя(ЧасовойПояс.Текущий())
    ДанныеВJson.Сумма = ДанныеОбъекта["Сумма"] как Число?
        
    если ДанныеОбъекта["Организация"] != Неопределено
        ДанныеВJson.Организация = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Организация"] как Организации.Ссылка)
    ;
   
    ДанныеВJson.Комментарий = ДанныеОбъекта["Комментарий"] как Строка?
    
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_1(
        ДанныеОбъекта["Ссылка"] как ЗаявлениеНаВыплату.Ссылка, ДляПредставления, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.Документ = ДанныеФайлов.ЭлектронныйДокумент
    ;
  
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.Версия = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как ЗаявлениеНаВыплату.Ссылка))
    ;
    возврат ДанныеВJson 
;    

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"paymentRequests": ДанныеЗапросовВJson(Ссылки, Сервисы, ВерсияФорматаОбмена)}
;

метод ДанныеЗапросовВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?, ДляПредставления: Булево = Ложь): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеЗаявленийНаВыплату(Ссылки)
        Данные.Добавить(ДанныеЗаявленийНаВыплатуВJson(КлючИЗначение.Значение, Сервисы, ДляПредставления))
    ;
    
    возврат Данные
;

@ВПроекте
метод ПолучитьДанныеJson(Ссылка: ЗаявлениеНаВыплату.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Объект?
    возврат ДанныеЗапросовВJson([Ссылка], Сервисы, ВерсияФорматаОбмена)
;
@ВПроекте
метод ПредставленияИдентификаторовЭлектронныхДокументов(ДокументСсылка: ЗаявлениеНаВыплату.Ссылка): Соответствие<Строка, Строка>
    пер ПредставленияДокументов = новый Соответствие<Строка, Строка>()
    ПредставленияДокументов.Вставить("", "")
    возврат ПредставленияДокументов
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
статический метод Перезаписать(ЗаявлениеСсылка: ЗаявлениеНаВыплату.Ссылка?, ИнформацияОЗапросеНаВыплату: ЗарплатаСразу.ИнформацияОЗапросеНаВыплату?)
    
    если ИнформацияОЗапросеНаВыплату == Неопределено
        возврат
    ;
    пер Заявление: ЗаявлениеНаВыплату.Объект?
    
    Заявление = ЗаявлениеСсылка.ЗагрузитьОбъект()
    
    Заявление!.Ид = ИнформацияОЗапросеНаВыплату.ЗапросНаВыплату.Ид
    Заявление!.МоментСоздания = ИнформацияОЗапросеНаВыплату.ЗапросНаВыплату.ДатаВремяСоздания
    Заявление!.Статус = ИнформацияОЗапросеНаВыплату.ЗапросНаВыплату.Статус
    Заявление!.ОплатаКомиссии = ИнформацияОЗапросеНаВыплату.ОплатаКомиссии
    Заявление!.СобытияЗапросовНаВыплату.Очистить()
    для СобытиеЗапросаНаВыплату из ИнформацияОЗапросеНаВыплату.События
        Заявление.СобытияЗапросовНаВыплату.Добавить(СобытиеЗапросаНаВыплату)
    ;
    
    Заявление!.Записать()
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
статический метод Записать(
    ФизическоеЛицо: ФизическиеЛица.Ссылка?,
    Сумма: Число?,
    ИнформацияОСотруднике: ЗарплатаСразу.ИнформацияОСотруднике, 
    ДокументСсылка: ЗаявлениеНаВыплату.Ссылка)
    
    пер Заявление: ЗаявлениеНаВыплату.Объект?
    
    Заявление = ДокументСсылка.ЗагрузитьОбъект()
    если Заявление == Неопределено 
        Заявление = новый ЗаявлениеНаВыплату.Объект(ДокументСсылка.Ид).Заполнить()
    ;
    
    Заявление!.Организация = Сотрудники.ОрганизацияФизическогоЛицаПоОсновномуМестуРаботы(ФизическоеЛицо)
    Заявление!.ФизическоеЛицо = ФизическоеЛицо
    Заявление!.ПериодС = ИнформацияОСотруднике.РеквизитыДляЗаявления.ДатаС
    Заявление!.ПериодПо = ИнформацияОСотруднике.РеквизитыДляЗаявления.ДатаПо
    Заявление!.Дата = ДатаВремя.Сейчас().Дата
    Заявление!.Сумма = Сумма
    Заявление!.Комментарий = "Заявление на выплату на %Сумма руб."
        
    исп Транзакции.Начать()
    Заявление.Записать()
    
    ПредставленияДокументов.СформироватьПредставленияДокумента(ДокументСсылка, Истина)
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
статический метод Перезаписать(ИнформацияОЗапросеНаВыплату: ЗарплатаСразу.ИнформацияОЗапросеНаВыплату)
    
    пер Заявление: ЗаявлениеНаВыплату.Объект?
    
    пер ЗаявлениеСсылка = ЗаявлениеЗапросаНаВыплату(ИнформацияОЗапросеНаВыплату.ЗапросНаВыплату.Ид)
    
    если ЗаявлениеСсылка == Неопределено
        возврат
    ;
    Заявление = ЗаявлениеСсылка.ЗагрузитьОбъект()
    
    Заявление!.Ид = ИнформацияОЗапросеНаВыплату.ЗапросНаВыплату.Ид
    Заявление!.МоментСоздания = ИнформацияОЗапросеНаВыплату.ЗапросНаВыплату.ДатаВремяСоздания
    Заявление!.Статус = ИнформацияОЗапросеНаВыплату.ЗапросНаВыплату.Статус
    Заявление!.ОплатаКомиссии = ИнформацияОЗапросеНаВыплату.ОплатаКомиссии
    Заявление!.СобытияЗапросовНаВыплату.Очистить()
    для СобытиеЗапросаНаВыплату из ИнформацияОЗапросеНаВыплату.События
        Заявление.СобытияЗапросовНаВыплату.Добавить(СобытиеЗапросаНаВыплату)
    ;
    
    Заявление!.Записать()
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
статический метод УстановитьСтатус(ЗаявлениеСсылка: ЗаявлениеНаВыплату.Ссылка?, Статус: СтатусыЗапросовНаВыплату)
    
    пер Заявление: ЗаявлениеНаВыплату.Объект?
    
    Заявление = ЗаявлениеСсылка.ЗагрузитьОбъект()
    
    Заявление!.Статус = Статус
    
    Заявление!.Записать()
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
статический метод УдалитьЗаявление(ЗаявлениеСсылка: ЗаявлениеНаВыплату.Ссылка)
    пер Заявление = ЗаявлениеСсылка.ЗагрузитьОбъект()
    Заявление.Удалить()        
;

статический метод ЗаявлениеЗапросаНаВыплату(ИдЗапроса: Строка): ЗаявлениеНаВыплату.Ссылка?

    знч Запрос = Запрос{
        Выбрать
            Ссылка
        Из
            ЗаявлениеНаВыплату
        Где
            Ид == %ИдЗапроса}
    исп Результат = Запрос.Выполнить() 
 
    для РезультатСтрока из Результат
        возврат РезультатСтрока.Ссылка
    ;    
    
    возврат Неопределено
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
статический метод УФизическогоЛицаЕстьЗаявленияНаВыплату(ФизическоеЛицо: ФизическиеЛица.Ссылка): Булево

      знч Запрос = Запрос{
        Выбрать Первые 1
            Ссылка как Заявление
        Из
            ЗаявлениеНаВыплату
        Где
            Ид != ""
            и ФизическоеЛицо == %ФизическоеЛицо}
    
    исп Результат = Запрос.Выполнить() 
     
    возврат Результат.ЕдинственныйИлиУмолчание() != Неопределено
;

@ВПодсистеме
метод ДанныеДокументаДляПодготовкиОписаний(СсылкаНаДокумент: Сущность.Ключ): Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>
    
    пер ДанныеДокумента = новый Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>()
    знч ДанныеЗаявления = ДанныеЗаявленияНаВыплату(СсылкаНаДокумент как ЗаявлениеНаВыплату.Ссылка)
    ДанныеДокумента.Вставить("",
        новый Согласования.ДанныеДляПодготовкиОписания(
            ДанныеЗаявления["Организация"] как Организации.Ссылка,
            ДанныеЗаявления["Дата"] как Дата,
            "Заявление на выплату"
        )
    )
    возврат ДанныеДокумента
;

//КонецОбласти