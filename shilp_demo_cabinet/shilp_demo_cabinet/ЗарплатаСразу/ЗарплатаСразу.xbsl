импорт СтандартноеПриложение
импорт УниверсальныеМеханизмы
импорт ИнтерфейсныеКомпонентыСтандартные
импорт Криптография
импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт ВладельцыКабинетов

@ВПроекте
конст ИД_ПОДСИСТЕМЫ = "ЗарплатаСразу"

@ВПодсистеме конст ПОДСИСТЕМА_ЗАРПЛАТА_СРАЗУ = "ЗарплатаСразу"
@ВПодсистеме конст ШАБЛОН_ЗАЯВЛЕНИЯ_НА_ВЫПЛАТУ = "ШаблонЗавяленияНаВыплату"

@ВПодсистеме
исключение ИсключениеВыполненияЗапросаКЗарплатаСразу
    обз пер АдресРесурса: Строка
    пер КодСостояния: Число?
    пер ТелоОтвета: Строка?
;

@ВПодсистеме
исключение ИсключениеПолученияПараметровДоступа
;

@ВПроекте
@НаКлиенте
конст ИД_РАЗДЕЛА_ЗАРПЛАТА_СРАЗУ = "ЗарплатаСразу"
@ВПодсистеме конст ИМЯ_РАЗДЕЛА_ЗАРПЛАТА_СРАЗУ = "Зарплата сразу"


@ВПроекте
конст ИД_СТРАНИЦА_РАЗДЕЛА= "СтраницаЗарплатаСразу"

@ВПроекте
конст ИД_НАСТРОЙКА_ЗАРПЛАТА_СРАЗУ: Строка = "НастройкаЗарплатаСразу" 

@ВПодсистеме
конст КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: Строка = "ЗарплатаСразуПараметрыСеанса" 


@ВПроекте
структура ПараметрыДоступаКЗарплатаСразу
    пер АдресСервиса: Строка?
    пер ApiКлюч: Строка?
;

@ВПодсистеме
структура РезультатСозданияНовогоЗапроса
    пер Результат: Булево
    пер НовыйЗапросНаВыплату: ИнформацияОЗапросеНаВыплату?
;

@ВПодсистеме
перечисление СтатусыКомпании
    НеПодключена
    Подключена
    Заблокирована
    Отключена
;

@ВПодсистеме
перечисление СтатусыСостоянияСервиса
    Активный
    НеАктивный
;

@ВПодсистеме
структура Компания
    обз пер Ид: Строка
    обз пер ИНН: Строка
    обз пер ОГРН: Строка
    обз пер ПолноеНаименование: Строка
    обз пер Статус: СтатусыКомпании?
;
 
 @ВПодсистеме
 структура Сотрудник
    пер Ид: Строка
    пер Хеш: Строка?
    пер Статус: Строка?
    пер СтатусПодключения: СтатусыПодключенияСотрудника?
;

@ВПодсистеме
структура РеквизитыДляЗаявления
    обз пер ДатаС: Дата
    обз пер ДатаПо: Дата
;

@ВПодсистеме
структура Комиссия
    обз пер ВыплатаОт: Число
    обз пер ВыплатаПо: Число
    обз пер СуммаКомиссии: Число
    обз пер СуммаКомиссииСоСкидкой: Число
    обз пер ДнейДляОплаты: Число
;

@ВПодсистеме
структура Лимит
    обз пер Баланс: Число
    обз пер МожноСоздатьЗапросНаВыплату: Булево
    обз пер ОплачиваетКомиссию: Булево?
    обз пер ЕстьНеоплаченныеКомиссии: Булево
    обз пер ПричинаБлокировкиЗапросаНаВыплату: Строка?
    обз пер МинимальныйРазмерДоступнойВыплаты: Число
    обз пер МаксимальныйРазмерДоступнойВыплаты: Число
    обз пер СписокВозможныхКомиссий: Массив<Комиссия>?
;

@ВПодсистеме
структура ЗапросНаВыплату
    обз пер Ид: Строка
    обз пер ДатаВремяСоздания: Момент
    обз пер Сумма: Число
    обз пер Статус: СтатусыЗапросовНаВыплату?
;

@ВПроекте
структура ИнформацияОСотруднике
    обз пер Сотрудник: Сотрудник
    обз пер РеквизитыДляЗаявления: РеквизитыДляЗаявления
    обз пер Лимит: Лимит
    обз пер ЗапросыНаВыплату: Массив<ЗапросНаВыплату>
    пер РежимРаботыСервиса: РежимыРаботыСервиса
;

@ВПодсистеме
структура ИнформацияОЗапросеНаВыплату
    обз пер ЗапросНаВыплату: ЗапросНаВыплату
    обз пер ИдСотрудника: Строка
    обз пер События: Массив <СобытиеЗапросаНаВыплату>
    обз пер ОплатаКомиссии: ОплатаКомиссии?
;

@ВПодсистеме
структура СсылкаНаОплатуКомиссии
    обз пер СсылкаНаОплату:  Строка
    обз пер СрокДействия: Момент?
    обз пер ФактическаяСумма: Число
;    

@ВПодсистеме
структура Ошибка
    обз пер Момент:  Момент
    обз пер Статус: Число
    обз пер Ошибка: Строка?
    обз пер Сообщение: Строка?
    обз пер СообщениеПользователю: Строка?
    обз пер Путь: Строка?
;    

@ВПодсистеме
структура СтатусЗапроса
    обз пер Статус: СтатусыЗапросовНаВыплату?
    обз пер Сообщение: Строка?
    обз пер СообщениеПользователю: Строка?
;

@ВПодсистеме
структура ИнформацияОКомпанииИСотруднике
    пер ИнформацияОКомпании: Компания?
    пер ИнформацияОСотруднике: ИнформацияОСотруднике?
;


@ВПроекте
@НаКлиенте
метод ПараметрыСеанса(): ПараметрыСеанса
    возврат ПараметрыСеансаСервис.ПолучитьСервис().ПараметрПоКлючу(КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА) как ПараметрыСеанса
;

@ВПроекте
структура ПараметрыСеанса
    пер ФункциональныеОпции: ФункциональныеОпции
    пер СтатусКомпании: СтатусыКомпании?
    пер ИдКомпании: Строка?
    пер ИнформацияОСотруднике: ИнформацияОСотруднике?
;   

@ВПроекте
структура ФункциональныеОпции
    пер ИспользоватьСервис: Булево = Ложь
;

@НаСервере 
структура ДанныеЗаявления
    обз пер ДатаДокумента: Дата
    обз пер Представление: Строка
;

@ВПроекте
@НаСервере
метод ПолучитьФункциональныеОпции(): ФункциональныеОпции?
    возврат ИспользуемаяФункциональность.ФункциональныеОпции()
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЗаписатьФункциональныеОпции(ФункциональныеОпции: ФункциональныеОпции)
    ИспользуемаяФункциональность.ЗаписатьФункциональныеОпции(ФункциональныеОпции)
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ПредставленияЗаявленийФизлица(ФизическоеЛицо: ФизическиеЛица.Ссылка?): ЧитаемаяКоллекция<СостояниеДокументаКомпонентДанных>
    пер ПредставленияЗаявленийФизлица: Массив<СостояниеДокументаКомпонентДанных>
    если ФизическоеЛицо == Неопределено
        возврат ПредставленияЗаявленийФизлица
    ;
    знч ЗаявленияФизлица: Массив<ДокументИмеющийСостояние.Ссылка>
    знч ДанныеЗаявлений: Соответствие<ДокументИмеющийСостояние.Ссылка, ДанныеЗаявления>
    исп РезультатЗапроса = Запрос{Выбрать
            Ссылка Как Документ,
            Дата Как ДатаДокумента,
            ПредставлениеДокумента Как Представление
            Из ЗаявлениеНаВыплату
            Где ФизическоеЛицо == %ФизическоеЛицо
            Упорядочить по МоментСоздания Убыв}.Выполнить()
    для СтрокаРезультата из РезультатЗапроса
        ЗаявленияФизлица.Добавить(СтрокаРезультата.Документ)
        ДанныеЗаявлений.Вставить(СтрокаРезультата.Документ, новый ДанныеЗаявления(СтрокаРезультата.ДатаДокумента, СтрокаРезультата.Представление))
    ;
    ПредставленияЗаявленийФизлица = СостДокументов.СостоянияДокументов(ЗаявленияФизлица)
    для Компонент из ПредставленияЗаявленийФизлица
        Компонент.ДатаДокумента = ДанныеЗаявлений[Компонент.Документ].ДатаДокумента
        Компонент.Представление = ДанныеЗаявлений[Компонент.Документ].Представление
        Компонент.ДополнительноеПредставление = МенеджерДат.ФорматДаты(ДанныеЗаявлений[Компонент.Документ].ДатаДокумента)
        Компонент.Картинка = Ресурс{ЛоготипМаленький.svg}.Ссылка
        Компонент.ЦветКартинки = БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Оранжевый)
    ;
    возврат ПредставленияЗаявленийФизлица
;

@ВПроекте
@НаКлиенте
метод ОбновитьИнформациюОСотруднике(ИдСотрудника: Строка): ИнформацияОСотруднике?
    
    пер ПараметрыСеанса = ПараметрыСеанса()
    пер ИнформацияОТекущемСотруднике = ИнформацияОСотруднике(ИдСотрудника)
    ПараметрыСеанса.ИнформацияОСотруднике = ИнформацияОТекущемСотруднике
    ИзменениеИнформацииОСотруднике.Оповестить(ИнформацияОТекущемСотруднике)

    возврат ИнформацияОТекущемСотруднике
   
;

@НаКлиенте
метод ИнформацияОСотруднике(ИдСотрудника:Строка): ИнформацияОСотруднике?

    пер ИнформацияОСотруднике: ИнформацияОСотруднике? = Неопределено
    
    попытка 
        ИнформацияОСотруднике = ЗапроситьИнформациюОСотруднике(ИдСотрудника)
    
    поймать Исключение: ИсключениеВыполненияЗапросаКЗарплатаСразу
        СтандартныеФормы.ПоказатьУведомление("Ошибка при выполнении запроса", Исключение.Описание, ОценкаИнформации.Отрицательная)
    ;
    
    возврат ИнформацияОСотруднике

;

@ВПроекте
@НаКлиенте
метод ОбновитьИнформациюОТекущемСотруднике(): ИнформацияОСотруднике?
    
    пер ПараметрыСеанса = ПараметрыСеанса()
    
    пер ИнформацияОТекущемСотруднике: ИнформацияОСотруднике? = Неопределено
    
    если ПараметрыСеанса.ИдКомпании == Неопределено
        
        пер ИнформацияОКомпанииИСотруднике = ИнформацияОКомпанииИТекущемСотруднике()

        ПараметрыСеанса.ИдКомпании = ИнформацияОКомпанииИСотруднике.ИнформацияОКомпании.Ид
        ПараметрыСеанса.СтатусКомпании = ИнформацияОКомпанииИСотруднике.ИнформацияОКомпании.Статус
        ИнформацияОТекущемСотруднике = ИнформацияОКомпанииИСотруднике.ИнформацияОСотруднике
        ПараметрыСеанса.ИнформацияОСотруднике = ИнформацияОТекущемСотруднике
    иначе
        ИнформацияОТекущемСотруднике = ЗапроситьИнформациюОТекущемСотруднике()
        ПараметрыСеанса.ИнформацияОСотруднике = ИнформацияОТекущемСотруднике
    ;     
    
    ИзменениеИнформацииОСотруднике.Оповестить(ИнформацияОТекущемСотруднике)

    возврат ИнформацияОТекущемСотруднике
   
;

@ВПодсистеме
@НаКлиенте
метод ИнформацияОТекущемСотруднике(): ИнформацияОСотруднике?
    
    пер ИнформацияОСотруднике: ИнформацияОСотруднике? = Неопределено
    
    попытка
        ИнформацияОСотруднике = ЗапроситьИнформациюОТекущемСотруднике()
    поймать Исключение: ИсключениеВыполненияЗапросаКЗарплатаСразу
        СтандартныеФормы.ПоказатьУведомление("Ошибка при выполнении запроса", Исключение.Описание, ОценкаИнформации.Отрицательная)
    ; 
        
    возврат ИнформацияОСотруднике
    
;

@ВПодсистеме
@НаКлиенте
метод ТекстПС():Строка?
    
    пер ТекстПС: Строка? = Неопределено
    
    попытка 
        ТекстПС = ЗапроситьТекстПС()
    поймать Исключение: ИсключениеВыполненияЗапросаКЗарплатаСразу
        СтандартныеФормы.ПоказатьУведомление("Ошибка при выполнении запроса", Исключение.Описание, ОценкаИнформации.Отрицательная)
    ; 
  
    возврат ТекстПС

;

@ВПодсистеме
@НаКлиенте
метод ИнформацияОЗапросеНаВыплату(ИдЗапроса:Строка) :ИнформацияОЗапросеНаВыплату?
    
    пер ИнформацияОЗапросеНаВыплату: ИнформацияОЗапросеНаВыплату? = Неопределено
    
    попытка 
        ИнформацияОЗапросеНаВыплату = ЗапроситьИнформациюОЗапросеНаВыплату(ИдЗапроса)
    поймать Исключение: ИсключениеВыполненияЗапросаКЗарплатаСразу
        СтандартныеФормы.ПоказатьУведомление("Ошибка при выполнении запроса", Исключение.Описание, ОценкаИнформации.Отрицательная)
    ; 
   
    возврат ИнформацияОЗапросеНаВыплату 
    
;

@ВПодсистеме
@НаКлиенте
метод СсылкаНаПроведениеКомиссионногоПлатежа(ИдЗапросаНаВыплату: Строка, СсылкаДляВозврата: Строка): СсылкаНаОплатуКомиссии?
    
    пер СсылкаНаОплатуКомиссии: СсылкаНаОплатуКомиссии? = Неопределено
    
    попытка
        СсылкаНаОплатуКомиссии = ЗапроситьСсылкуНаПроведениеКомиссионногоПлатежа(ИдЗапросаНаВыплату, СсылкаДляВозврата)
    
    поймать Исключение: ИсключениеВыполненияЗапросаКЗарплатаСразу
        СтандартныеФормы.ПоказатьУведомление("Ошибка при выполнении запроса", Исключение.Описание, ОценкаИнформации.Отрицательная)
    ; 
     
    возврат СсылкаНаОплатуКомиссии
    
;

@ВПодсистеме
@НаКлиенте
метод ЖдатьИзменениеСтатусаЗапроса(
    ИдЗапроса: Строка, 
    СтатусЗапроса: СтатусыЗапросовНаВыплату, 
    ФизическоеЛицо: ФизическиеЛица.Ссылка, 
    ИнтервалЗапроса = 30)
    
    попытка 
        ЗапуститьЗапросСтатусаЗапросаНаВыплатуФоново(ИдЗапроса, СтатусЗапроса, ФизическоеЛицо, ИнтервалЗапроса)
    поймать Исключение: ИсключениеВыполненияЗапросаКЗарплатаСразу
        СтандартныеФормы.ПоказатьУведомление("Ошибка при получении статуса запроса", Исключение.Описание, ОценкаИнформации.Отрицательная)
    ;
    
;

@ВПодсистеме
@НаКлиенте
метод ЗапросНаВыплату(Сотрудник: Сотрудник, Сумма: Число): Строка?
    
    пер ЗапросНаВыплату: Строка? = Неопределено
    
    попытка
        ЗапросНаВыплату = ОтправитьЗапросНаВыплату(Сотрудник, Сумма)
    поймать Исключение: ИсключениеВыполненияЗапросаКЗарплатаСразу
        СтандартныеФормы.ПоказатьУведомление("Ошибка при выполнении запроса", Исключение.Описание, ОценкаИнформации.Отрицательная)
    ; 
  
    
    возврат ЗапросНаВыплату

;

@ВПроекте
@НаКлиенте
метод ЗарплатаСразуДоступна(): Булево
    
    если не ЗарплатаСразу.ПараметрыСеанса().ФункциональныеОпции.ИспользоватьСервис
        возврат Ложь
    ;
    
    знч СтатусПодключения = ФизическиеЛицаЗарплатаСразу.СтатусПодключенияТекущегоФизическогоЛица()
    
    возврат СтатусПодключения != Неопределено 
        и (СтатусПодключения == СтатусыПодключенияСотрудника.ДоступноПодключение  
        или СтатусПодключения == СтатусыПодключенияСотрудника.Подключен) 
        и Криптография.ПараметрыСеанса().ИспользованиеКЭДО
        
;

@ВПодсистеме
@НаКлиенте
метод СервисАктивен(ИдКомпании: Строка?): Булево?
    
    пер Состояние = Неопределено
    
    попытка 
        Состояние = СостояниеСервиса(ИдКомпании)
    поймать Исключение: ИсключениеВыполненияЗапросаКЗарплатаСразу
        СтандартныеФормы.ПоказатьУведомление("Ошибка при выполнении запроса", Исключение.Описание, ОценкаИнформации.Отрицательная)
        
        возврат Неопределено
    ;           
    
    возврат Состояние == СтатусыСостоянияСервиса.Активный
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод СостояниеСервиса(ИдКомпании: Строка?): СтатусыСостоянияСервиса
   
    возврат КлиентЗарплатаСразу.Состояние(ИдКомпании) 
;

@ВПодсистеме
@НаКлиенте
метод НавигационнаяСсылкаОсновногоРаздела(): Строка
    
    возврат НавигационнаяСсылка.Абсолютная(НавигацияЗарплатаСразу)

;

@ВПроекте
@НаКлиенте
метод ПоследнийЗапросНаВыплату(ЗапросыНаВыплату: Массив<ЗапросНаВыплату>):ЗапросНаВыплату
    
    пер ПоследнийЗапрос = ЗапросыНаВыплату[0]
    пер ИсполненныйЗапрос: ЗапросНаВыплату? = Неопределено
    для ЗапросНаВыплату из ЗапросыНаВыплату
        если ЗапросНаВыплату.Статус == СтатусыЗапросовНаВыплату.Исполнен
            ИсполненныйЗапрос = ЗапросНаВыплату
        ; 
        если ЗапросНаВыплату.ДатаВремяСоздания > ПоследнийЗапрос.ДатаВремяСоздания
            ПоследнийЗапрос = ЗапросНаВыплату
        ;
    ;
    
    если ИсполненныйЗапрос!= Неопределено и ИсполненныйЗапрос!= ПоследнийЗапрос
        возврат ИсполненныйЗапрос
    ;
    
    возврат ПоследнийЗапрос

;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ЗапроситьИнформациюОСотруднике(ИдСотрудника:Строка): ИнформацияОСотруднике
    
    возврат КлиентЗарплатаСразу.ИнформацияОСотруднике(ИдСотрудника)
    
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ЗапроситьИнформациюОТекущемСотруднике(): ИнформацияОСотруднике?
    
    возврат КлиентЗарплатаСразу.ИнформацияОТекущемСотруднике()
    
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ИнформацияОКомпанииИТекущемСотруднике(): ИнформацияОКомпанииИСотруднике?
    
    пер ИнформацияОКомпанииИСотруднике = новый ИнформацияОКомпанииИСотруднике()
    ИнформацияОКомпанииИСотруднике.ИнформацияОКомпании = КлиентЗарплатаСразу.ИнформацияОКомпанииТекущегоСотрудника()
    ИнформацияОКомпанииИСотруднике.ИнформацияОСотруднике = КлиентЗарплатаСразу.ИнформацияОТекущемСотруднике()
    
    возврат ИнформацияОКомпанииИСотруднике
    
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ЗапроситьИнформациюОЗапросеНаВыплату(ИдЗапроса:Строка): ИнформацияОЗапросеНаВыплату
    
    возврат КлиентЗарплатаСразу.ИнформацияОЗапросеНаВыплату(ИдЗапроса)
    
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ЗапроситьТекстПС(): Строка
   
   возврат КлиентЗарплатаСразу.ТекстПС()

;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ЗапроситьСсылкуНаПроведениеКомиссионногоПлатежа(ИдЗапросаНаВыплату: Строка, СсылкаДляВозврата: Строка): ЗарплатаСразу.СсылкаНаОплатуКомиссии
    
    возврат КлиентЗарплатаСразу.СсылкаНаПроведениеКомиссионногоПлатежа(ИдЗапросаНаВыплату, СсылкаДляВозврата)
 
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ПодключениеСотрудника(Сотрудник: Сотрудник)
    
    КлиентЗарплатаСразу.ПодключениеСотрудника(Сотрудник)
    
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ОтправитьЗапросНаВыплату(Сотрудник: Сотрудник, Сумма: Число): Строка
    
    возврат  КлиентЗарплатаСразу.ЗапросНаВыплату(Сотрудник, Сумма)
    
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод СообщитьОПроблеме(ИдСотрудника: Строка, ИдЗапросаНаВыплату: Строка, ТекстПроблемы: Строка): Булево
    
    попытка
        КлиентЗарплатаСразу.СообщитьОПроблеме(ИдСотрудника, ИдЗапросаНаВыплату, ТекстПроблемы)
        возврат Истина
    поймать Ошибка: ИсключениеВыполненияЗапросаКЗарплатаСразу
        возврат Ложь
    ;
    
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ЗапуститьЗапросСтатусаЗапросаНаВыплатуФоново(
    ИдЗапроса: Строка, 
    СтатусЗапроса: СтатусыЗапросовНаВыплату, 
    ФизическоеЛицо: ФизическиеЛица.Ссылка, 
    ИнтервалЗапроса = 30)

    ФоновыеЗадания.Выполнить(&ИзменениеСтатусаЗапроса, ИдЗапроса, СтатусЗапроса, ФизическоеЛицо, ИнтервалЗапроса)

;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ИзмененныйСтатусЗапросаНаВыплату(
    ИдЗапроса: Строка, 
    СтатусЗапроса: СтатусыЗапросовНаВыплату, 
    ФизическоеЛицо: ФизическиеЛица.Ссылка, 
    ИнтервалЗапроса = 30): СтатусЗапроса

    возврат ИзмененныйСтатусЗапроса(ИдЗапроса, СтатусЗапроса, ФизическоеЛицо, ИнтервалЗапроса)

;

@НаСервере 
метод ИзменениеСтатусаЗапроса(ИдЗапроса: Строка, 
    СтатусЗапроса: СтатусыЗапросовНаВыплату, 
    ФизическоеЛицо: ФизическиеЛица.Ссылка, 
    ИнтервалЗапроса: Число)
 
    пер СтатусЗапросаНаВыплату: СтатусыЗапросовНаВыплату? = Неопределено
    
    попытка 
        СтатусЗапросаНаВыплату = КлиентЗарплатаСразу.СтатусЗапросаНаВыплату(ИдЗапроса).Статус
    поймать Исключение: ИсключениеВыполненияЗапросаКЗарплатаСразу
        ИнтервалЗапроса = УвеличитьИнтервал(ИнтервалЗапроса)
        Пауза(Длительность.ИзСекунд(ИнтервалЗапроса))
    ;

    пока не (СтатусЗапросаНаВыплату == СтатусЗапроса
        или СтатусЗапросаНаВыплату == СтатусыЗапросовНаВыплату.Отклонен
        или СтатусЗапросаНаВыплату == СтатусыЗапросовНаВыплату.Завершен)
        
        попытка
            СтатусЗапросаНаВыплату = КлиентЗарплатаСразу.СтатусЗапросаНаВыплату(ИдЗапроса).Статус
        поймать Исключение: ИсключениеВыполненияЗапросаКЗарплатаСразу
            ИнтервалЗапроса = УвеличитьИнтервал(ИнтервалЗапроса)
        ;

        Пауза(Длительность.ИзСекунд(ИнтервалЗапроса))
    ;
    
    ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(ФизическоеЛицо, Истина)
    
;

метод УвеличитьИнтервал(Интервал: Число, УвеличитьВ: Число = 2, МаксимальныйИнтервал = 3600): Число

    возврат Мин(Интервал * УвеличитьВ, МаксимальныйИнтервал)
    
;

@ВПодсистеме
@НаСервере 
метод СинхронизироватьСтатусыЗапросов(Запросы: Массив<ЗарплатаСразу.ЗапросНаВыплату>)
    
    пер ИдЗапросов: Массив<Строка>
    
    для ТекущийЗапрос из Запросы 
        ИдЗапросов.Добавить(ТекущийЗапрос.Ид)
    ;
    пер Заявления: Соответствие<Строка, ЗаявлениеНаВыплату.Ссылка>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Ид
        Из
            ЗаявлениеНаВыплату
        Где
            Ид В (%ИдЗапросов)}
    
    исп Результат = Запрос.Выполнить() 
 
    для РезультатСтрока из Результат
        Заявления.Вставить(РезультатСтрока.Ид, РезультатСтрока.Ссылка)
    ;    
    
    для ТекущийЗапрос из Запросы
        пер ТекущееЗаявление = Заявления.ПолучитьИлиУмолчание(ТекущийЗапрос.Ид)
        если ТекущееЗаявление != Неопределено
            ЗаявлениеНаВыплату.УстановитьСтатус(ТекущееЗаявление, ТекущийЗапрос.Статус) 
        ; 
    ;
    
;

@НаСервере 
метод ИзмененныйСтатусЗапроса(ИдЗапроса: Строка, 
    СтатусЗапроса: СтатусыЗапросовНаВыплату, 
    ФизическоеЛицо: ФизическиеЛица.Ссылка, 
    ИнтервалЗапроса: Число): СтатусЗапроса
 
    пер Статус = КлиентЗарплатаСразу.СтатусЗапросаНаВыплату(ИдЗапроса)
    пер СтатусЗапросаНаВыплату = Статус.Статус
    пока не (СтатусЗапросаНаВыплату == СтатусЗапроса
        или СтатусЗапросаНаВыплату == СтатусыЗапросовНаВыплату.Отклонен
        или СтатусЗапросаНаВыплату == СтатусыЗапросовНаВыплату.Завершен)
        
        Статус = КлиентЗарплатаСразу.СтатусЗапросаНаВыплату(ИдЗапроса)
        
        СтатусЗапросаНаВыплату = Статус.Статус
        Пауза(Длительность.ИзСекунд(ИнтервалЗапроса))
    ;
    
    возврат Статус
    
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ФайлЗаявления(Ссылка: ЗаявлениеНаВыплату.Ссылка): ПрисоединенныйФайл?
    знч Файл = Файл(Ссылка)
    если Файл == Неопределено 
        возврат Неопределено
    ;
    возврат ПрисоединенныеФайлыМенеджер.ПрисоединенныйФайл(Файл)
;

@НаСервере
метод Файл(Ссылка: ЗаявлениеНаВыплату.Ссылка): Файлы.Ссылка?

    знч Запрос = Запрос{ВЫБРАТЬ 
                        Файлы.Ссылка КАК Ссылка,
                        Файлы.Расширение КАК Расширение,
                        Файлы.ВидФайла Как ВидФайла
                       
                     ИЗ
                        Файлы КАК Файлы 
                        ГДЕ Файлы.Владелец == %Ссылка}    
    исп РезультатЗапроса = Запрос.Выполнить() 
    для СтрокаРезультата из РезультатЗапроса
        если СтрокаРезультата.Расширение == "pdf" и
            СтрокаРезультата.ВидФайла == ВидыФайла.ЭлектронныйДокумент 
            возврат СтрокаРезультата.Ссылка
        ;
    ;
    
    возврат Неопределено
    
;
