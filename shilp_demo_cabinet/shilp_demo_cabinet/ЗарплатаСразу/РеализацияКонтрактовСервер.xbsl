импорт ВебApi
импорт ВладельцыКабинетов
импорт Зарплата
импорт Компания
импорт Компания::Согласования
импорт КонтрольДоступа
импорт Криптография
импорт ЛичныеКабинетыПользователей
импорт ОбменДанными
импорт СтандартноеПриложение
импорт УниверсальныеМеханизмы
импорт УниверсальныеМеханизмы::ШаблоныДокументов
импорт ФизическиеЛица

// Контракт СтатистикаПоставщик

@ВПроекте
@Реализация
метод СтатистикаСправочников(): Массив<СтатистикаДанных.Справочник>
    знч СправочникиСтатистика: Массив<СтатистикаДанных.Справочник>
    возврат СправочникиСтатистика
;

@ВПроекте
@Реализация
метод СтатистикаДокументов(): Массив<СтатистикаДанных.Документ>
    знч ДокументыСтатистика: Массив<СтатистикаДанных.Документ>
    ДокументыСтатистика.ДобавитьВсе(СтатистикаДанных.СтатистикаПоДокументу(ЗаявлениеНаВыплату))
    возврат ДокументыСтатистика
;

// Конец СтатистикаПоставщик

// Контракт ОбновляемаяПодсистема

@ВПроекте
@Реализация
метод ОбработчикиЗаполнения(): Массив<СтандартноеПриложение.ОписаниеОбработчикаЗаполнения>
    возврат []
;

@ВПроекте
@Реализация
метод ОбработчикиОбновления(): Массив<СтандартноеПриложение.ОписаниеОбработчикаОбновления>
  пер Обработчики: Массив<СтандартноеПриложение.ОписаниеОбработчикаОбновления>
	Обработчики.Добавить(новый СтандартноеПриложение.ОписаниеОбработчикаОбновления(
        ЗарплатаСразу.ИД_ПОДСИСТЕМЫ, 
        "ДобавитьПредопределенныйТипЗарплатаСразу", 
        &ДобавитьПредопределенныйТипЗарплатаСразу(), 
        Версия{7.1.1.33}))
    возврат Обработчики
;
// Конец ОбновляемаяПодсистема

// Контракт ПоставщикШаблонов

@ВПроекте
@Реализация
метод ДанныеШаблонаДокумента(ДокументСсылка: Справочник.Ссылка, ДополнительныеПараметры: Соответствие<Строка, Объект>? = Неопределено): ШаблоныДокументовМенеджер.ДанныеДляШаблонаПечатнойФормы?
    выбор ДокументСсылка
    когда это ЗаявлениеНаВыплату.Ссылка
        знч Ид = УниверсальныеМеханизмы.Ид(ЗарплатаСразу.ПОДСИСТЕМА_ЗАРПЛАТА_СРАЗУ, ЗарплатаСразу.ШАБЛОН_ЗАЯВЛЕНИЯ_НА_ВЫПЛАТУ) 
        пер ДанныеДляШаблона = новый ШаблоныДокументовМенеджер.ДанныеДляШаблонаПечатнойФормы(
            УниверсальныеМеханизмы.ДвоичныеДанные(Ид),
            УсловияВыводаОбластейШаблонов.УсловияВыводаОбластей(Ид),
            ЗаявлениеНаВыплату.ДанныеДокументаДляПечатнойФормы(ДокументСсылка))
        ШаблоныДокументовМенеджер.ДополнитьДанныеДополнительнымиРеквизитами(ДанныеДляШаблона, ДокументСсылка, Ид)
        возврат ДанныеДляШаблона
    ;
    возврат Неопределено
;

@ВПроекте
@Реализация
метод ДополнитьДанныеШаблонаДокумента(ДокументСсылка: Справочник.Ссылка, ДанныеДокумента: Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>): Булево
    выбор ДокументСсылка
    когда это ЗаявлениеНаВыплату.Ссылка
        ЗаявлениеНаВыплату.ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента)
        возврат Истина
    ;
    возврат Ложь
;

// Конец ПоставщикШаблонов

// Контракт ПодсистемаПриложения

@ВПроекте
@Реализация
метод ОписаниеПодсистемы(): СтандартноеПриложение.ОписаниеПодсистемы
    возврат новый СтандартноеПриложение.ОписаниеПодсистемы(
        ЗарплатаСразу.ИД_ПОДСИСТЕМЫ,
        {
            ВладельцыКабинетов.ИД_ПОДСИСТЕМЫ,
            КонтрольДоступа.ИД_ПОДСИСТЕМЫ, 
            ФизЛица.ИД_ПОДСИСТЕМЫ,
            Компания.ИД_ПОДСИСТЕМЫ,
            ОбменДанными.ИД_ПОДСИСТЕМЫ,
            Криптография.ИД_ПОДСИСТЕМЫ,
            ЛичныеКабинетыПользователей.ИД_ПОДСИСТЕМЫ,
            УниверсальныеМеханизмы.ИД_ПОДСИСТЕМЫ,
            Зарплата.ИД_ПОДСИСТЕМЫ
        }
    )
;

// Конец ПодсистемаПриложения


// Контракт ПараметрыСеансаПоставщик
@ВПроекте
@Реализация
метод КоллекцияПараметровСеанса(МобильныйИнтерфейс: Булево): Соответствие<Строка, Объект>
    пер ПараметрыСеанса = новый ЗарплатаСразу.ПараметрыСеанса()
    
    ПараметрыСеанса.ФункциональныеОпции = ИспользуемаяФункциональность.ФункциональныеОпции()

    пер ФизическоеЛицо: ФизическиеЛица.Ссылка? = ПользователиСистемы.ТекущееФизическоеЛицо()
    если ФизическоеЛицо != Неопределено
    
        ЗаполнитьПараметрыСеанса(ПараметрыСеанса)
    
    ;
    возврат {ЗарплатаСразу.КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: ПараметрыСеанса}
;
// Конец ПараметрыСеансаПоставщик

@ВПроекте
метод ЗаполнитьПараметрыСеанса(ПараметрыСеанса: ЗарплатаСразу.ПараметрыСеанса)
    
    если не ПараметрыСеанса.ФункциональныеОпции.ИспользоватьСервис
        возврат
    ;
    
    пер ИнформацияОКомпанииТекущегоСотрудника: ЗарплатаСразу.Компания? = Неопределено
    
    попытка 
        ИнформацияОКомпанииТекущегоСотрудника = КлиентЗарплатаСразу.ИнформацияОКомпанииТекущегоСотрудника()
    поймать Исключение: ЗарплатаСразу.ИсключениеВыполненияЗапросаКЗарплатаСразу
        Журналирование.ЗарегистрироватьОшибку(Исключение, ВажностьСобытияЖурналаСобытий.Высокая)
    поймать Исключение:ЗарплатаСразу.ИсключениеПолученияПараметровДоступа
        Журналирование.ЗарегистрироватьОшибку(Исключение, ВажностьСобытияЖурналаСобытий.Высокая)
    ;
                      
    если ИнформацияОКомпанииТекущегоСотрудника != Неопределено 
        попытка 
            ПараметрыСеанса.ИдКомпании = ИнформацияОКомпанииТекущегоСотрудника.Ид
            ПараметрыСеанса.СтатусКомпании = ИнформацияОКомпанииТекущегоСотрудника.Статус
            ПараметрыСеанса.ИнформацияОСотруднике = КлиентЗарплатаСразу.ИнформацияОТекущемСотруднике()
            
            если ПараметрыСеанса.ИнформацияОСотруднике != Неопределено 
                ФоновыеЗадания.Выполнить(&ЗарплатаСразу.СинхронизироватьСтатусыЗапросов, ПараметрыСеанса.ИнформацияОСотруднике.ЗапросыНаВыплату)
            ;
            
        поймать Исключение: ЗарплатаСразу.ИсключениеВыполненияЗапросаКЗарплатаСразу
    
        ;
    ;
;

//Контракт ДанныеApi
@ВПроекте
@Реализация
метод МассивТипов(Получатель: ВидПриложения?, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>
 
    Типы.Добавить(Тип<ЗаявлениеНаВыплату.Ссылка>)
 
    возврат Типы
;

@ВПроекте
@Реализация
метод ТипДанныхJson(ТипОбъекта: Тип, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>

    возврат Типы
;

@ВПроекте
@Реализация
метод ТипКоллекцииДанныхJson(ТипОбъекта: Тип, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>

    возврат Типы
;

@ВПроекте
@Реализация
метод ПолучитьДанныеJson(ТипОбъекта: Тип, Ссылка: ВходящиеДанные.Ссылка|ИсходящиеДанные.Ссылка, 
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<Объект?>
    
    пер ДанныеJson: Массив<Объект?>
    выбор ТипОбъекта
    когда Тип<ЗаявлениеНаВыплату.Ссылка>
        ДанныеJson.Добавить(ЗаявлениеНаВыплату.ПолучитьДанныеJson(Ссылка как ЗаявлениеНаВыплату.Ссылка, Сервисы, ВерсияФорматаОбмена))
    ;
    возврат ДанныеJson
;

@ВПроекте
@Реализация
метод МассивСсылокПоФильтру(ТипОбъекта: Тип, Фильтр: () -> ЧитаемыйМассив<Справочник.Ссылка>): Массив<ЧитаемыйМассив<Справочник.Ссылка>>
    пер МассивСсылок: Массив<ЧитаемыйМассив<Справочник.Ссылка>>
    выбор ТипОбъекта
    ;
    возврат МассивСсылок
;

@ВПроекте
@Реализация
метод УдалитьОбъекты(ТипОбъекта: Тип, ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>, Сервисы: ВебApiСервер.СервисыУдаленияОбъектов)
;

@ВПроекте
@Реализация
метод ТипОбъектаJson(ТипОбъекта: Тип): Массив<Строка>
    пер ТипОбъектаJson: Массив<Строка>

    возврат ТипОбъектаJson
;

@ВПроекте
@Реализация
метод ЗагрузитьОбъектИзJson(ТипОбъекта: Тип, ТипДанных: Тип, ДанныеJson: Объект?, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
;

@ВПроекте
@Реализация
метод ПослеЗаписиГруппыОбъектов(ТипОбъекта: Тип, МассивОбъектовОтложенногоОбновления: Массив<ВебApiСервер.ОбъектОтложенногоОбновления>)

;

@ВПроекте
@Реализация
метод ИзменитьОбъектИзJson(ТипОбъекта: Тип, ДанныеJson: Объект, Сервисы: ВебApiСервер.СервисыЗагрузкиJson, ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации)
    выбор ТипОбъекта
    ;
;

@ВПроекте
@Реализация
метод ЗавершитьИзменениеОбъектИзJson(ТипОбъекта: Тип, МассивСсылок: ЧитаемыйМассив<ВходящиеДанные.Ссылка>, ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации)
    выбор ТипОбъекта
    ;
;

@ВПроекте
@Реализация
метод ГруппаИзмененийВJson(ТипОбъекта: Тип, Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<ЧитаемоеСоответствие<Строка, Массив<Объект?>>>
    
    пер ДанныеJson: Массив<ЧитаемоеСоответствие<Строка, Массив<Объект?>>>
    выбор ТипОбъекта
    когда Тип<ЗаявлениеНаВыплату.Ссылка>
        ДанныеJson.Добавить(ЗаявлениеНаВыплату.ГруппаИзмененийВJson(Ссылки, Сервисы, ВерсияФорматаОбмена))
    ;
    возврат ДанныеJson
;

@ВПроекте
@Реализация
метод ИнструментыМенеджераОбъекта(ТипОбъекта: Тип): Массив<ВебApiСервер.ИнструментыМенеджераОбъекта>
    пер НаборИнструментыМенеджераОбъекта: Массив<ВебApiСервер.ИнструментыМенеджераОбъекта>
    пер ИнструментыМенеджераОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта
    выбор ТипОбъекта
    когда Тип<ДоступныеФункцииФизическихЛиц.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как СостояниеДокументов.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    когда Тип<ЗаявлениеНаВыплату.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как ЗаявлениеНаВыплату.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    ;
    возврат НаборИнструментыМенеджераОбъекта
;
// Конец ДанныеApi

// Контракт СогласованияПользователь
@ВПроекте
@Реализация
метод СформироватьПредставленияДокумента(Документ: ПодписываемыйДокумент.Ссылка)
    выбор Документ
    когда это ЗаявлениеНаВыплату.Ссылка
        ПредставленияДокументов.СформироватьПредставленияДокумента(Документ как Справочник.Ссылка, Ложь)
    ;
;

@ВПроекте
@Реализация
метод ДокументСогласованияJson(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson): СогласованияДокументов.ДокументСогласованияJson?
    
    знч Документ = ДанныеОбъекта["Документ"] как Справочник.Ссылка
    выбор Документ
    когда это ЗаявлениеНаВыплату.Ссылка
        
        возврат новый СогласованияДокументов.ДокументСогласованияJson(
            Документ.Ид.ВСтроку()
        )
    ;
    
    возврат Неопределено
;

@ВПроекте
@Реализация
метод ПослеПодписанияДокумента(Документ: ПодписываемыйДокумент.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего, ОбновитьПредставление: Булево)
    пер ЭтоДокументПодсистемы = Ложь
    выбор Документ
    когда это ЗаявлениеНаВыплату.Ссылка
        ЭтоДокументПодсистемы = Истина
        ЗаявлениеНаВыплату.ПослеПодписания(Документ как ЗаявлениеНаВыплату.Ссылка, ДанныеСогласующего)
    ;
    если ЭтоДокументПодсистемы и ОбновитьПредставление
        СформироватьПредставленияДокумента(Документ)
    ;
;

@ВПроекте
@Реализация
метод ОтправлятьСогласование(Документ: ПодписываемыйДокумент.Ссылка): Булево
    выбор Документ
    когда это ЗаявлениеНаВыплату.Ссылка
        
        возврат ОбменДанными.ЭтоОтправляемыйДокумент(Документ как ИсходящиеДанные.Ссылка)
    ;
    
    возврат Ложь
;

@ВПроекте
@Реализация
метод ДокументыНаСогласовании(Согласующий: ФизическиеЛица.Ссылка): ЧитаемыйМассив<ПодписываемыйДокумент.Ссылка>
    возврат []
;

@ВПроекте
@Реализация
метод ДокументыСогласованные(Согласующий: ФизическиеЛица.Ссылка): ЧитаемыйМассив<ПодписываемыйДокумент.Ссылка>
    возврат []
;

@ВПроекте
@Реализация
метод ДокументДляОзнакомления(Документ: ПодписываемыйДокумент.Ссылка): Булево
    возврат Ложь
;

@ВПроекте
@Реализация
метод ПравилаСогласованияПоУмолчанию(): ЧитаемыйМассив<Согласования.ПравилоСогласования>
    возврат []
;

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеВидыСогласуемыхЗаявлений()
;

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеРолиПодписантов()
;

конст ЗАЯВЛЕНИЕ_НА_ВЫПЛАТУ = "ЗаявлениеНаВыплату"

@ВПроекте
@Реализация
метод ЗаполнитьПредопределенныеТипыСогласуемыхДокументов()
    Согласования.ДобавитьПредопределенныйТипСогласуемогоДокумента(ЗАЯВЛЕНИЕ_НА_ВЫПЛАТУ)
;

@ВПроекте
@Реализация
метод ТипСогласуемогоДокумента(ОбъектСогласования: ПодписываемыйДокумент.Ссылка|ВидыСогласуемыхЗаявлений.Ссылка): ТипыСогласуемыхДокументов.Ссылка?
    выбор ОбъектСогласования
    когда это ЗаявлениеНаВыплату.Ссылка
        возврат Согласования.НайтиТипСогласуемогоДокумента(ЗАЯВЛЕНИЕ_НА_ВЫПЛАТУ)
    ;
    
    возврат Неопределено
;

@ВПроекте
@Реализация
метод ТипыСогласуемыхДокументовПолучателя(Получатель: ВидПриложения?): Массив<ТипыСогласуемыхДокументов.Ссылка>
    пер Типы: Массив<ТипыСогласуемыхДокументов.Ссылка>
    если Получатель == ВидПриложения.Hrm
        Типы.Добавить(Согласования.НайтиТипСогласуемогоДокумента(ЗАЯВЛЕНИЕ_НА_ВЫПЛАТУ))
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод РольСогласующегоЗаявления(ВидЗаявления: ВидыСогласуемыхЗаявлений.Ссылка): Роли.Ссылка?
    возврат Неопределено
;

@ВПроекте
@Реализация
метод ВидСогласуемогоЗаявления(Документ: ПодписываемыйДокумент.Ссылка): ВидыСогласуемыхЗаявлений.Ссылка?
    возврат Неопределено
;

@ВПроекте
@Реализация
метод Согласуемый(Документ: ПодписываемыйДокумент.Ссылка): ФизическиеЛица.Ссылка?
    возврат Неопределено
;

@ВПроекте
@Реализация
метод ИдентификаторыЭлектронныхДокументов(Документ: ПодписываемыйДокумент.Ссылка): ЧитаемыйМассив<Строка>
    возврат []
;

// Конец СогласованияПользователь

// Контракт ПодписываемыйДокументПоставщикОграничений

@ВПроекте
@Реализация
метод РазрешенияДоступаПодписываемыхДокументов(Документы: ЧитаемыйМассив<ПодписываемыйДокумент.Ссылка>): ЧитаемоеСоответствие<ПодписываемыйДокумент.Ссылка, ЧитаемыйМассив<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ПодписываемыйДокумент.Ссылка, ЧитаемыйМассив<РазрешениеДоступа>>
    знч ВладельцыСогласуемыхДокументов: Соответствие<ПодписываемыйДокумент.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч ДокументыЗаявлениеНаВыплату: Массив<ЗаявлениеНаВыплату.Ссылка>
    знч ДокументыПодсистемы: Массив<ПодписываемыйДокумент.Ссылка>
    для Документ из Документы
        выбор Документ
        когда это ЗаявлениеНаВыплату.Ссылка
            ДокументыЗаявлениеНаВыплату.Добавить(Документ как ЗаявлениеНаВыплату.Ссылка)
            ДокументыПодсистемы.Добавить(Документ)
        ;
    ;   
        
    ВладельцыСогласуемыхДокументов.ВставитьВсе(ЗаявлениеНаВыплату.ФизическиеЛицаДокументов(ДокументыЗаявлениеНаВыплату))
    
    для Документ из ДокументыПодсистемы
        Разрешения.Вставить(Документ, КонтрольДоступа.ЧтениеДанныхСправочниковПерсонально(ВладельцыСогласуемыхДокументов.ПолучитьИлиУмолчание(Документ)))
    ;
    
    возврат Разрешения
;

// Конец ПодписываемыйДокументПоставщикОграничений

// Контракт ИсходящиеДокументыСОписанием

@ВПроекте
@Реализация
метод ДокументСнабжаетсяФайломОписания(СсылкаНаДокумент: Сущность.Ключ): Булево
    если СсылкаНаДокумент это ЗаявлениеНаВыплату.Ссылка
        возврат Истина
    ;
    возврат Ложь
;

@ВПроекте
@Реализация
метод ДанныеДляПодготовкиОписаний(СсылкаНаДокумент: Сущность.Ключ): Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>?
    
    если СсылкаНаДокумент это ЗаявлениеНаВыплату.Ссылка
        возврат ЗаявлениеНаВыплату.ДанныеДокументаДляПодготовкиОписаний(СсылкаНаДокумент)
    ;
    
    возврат Неопределено
;

// Конец ИсходящиеДокументыСОписанием

@ВПроекте
метод ДобавитьПредопределенныйТипЗарплатаСразу()
    Согласования.ДобавитьПредопределенныйТипСогласуемогоДокумента(ЗАЯВЛЕНИЕ_НА_ВЫПЛАТУ)
;
