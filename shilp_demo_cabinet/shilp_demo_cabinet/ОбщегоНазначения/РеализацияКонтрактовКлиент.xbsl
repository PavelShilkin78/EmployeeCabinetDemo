импорт СтандартноеПриложение
импорт ФизическиеЛица
импорт ВладельцыКабинетов
импорт ЛичныеКабинетыПользователей
импорт Уведомления
импорт ОбщиеСтандартные

// Контракт ОсновнойИнтерфейсПоставщик
@ВПроекте
@Реализация
метод РазделыПриложения(): ЧитаемаяКоллекция<ОсновнойИнтерфейс.ОписаниеРаздела>
    возврат []
;

@ВПроекте
@Реализация
метод Виджеты(): ЧитаемаяКоллекция<ОсновнойИнтерфейс.ОписаниеВиджета>
    возврат []
;

@ВПроекте
@Реализация
метод КомандыВсеФункции(): ЧитаемаяКоллекция<ОсновнойИнтерфейс.ОписательКомандыВсеФункции>
    возврат [
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Представление = "Отложенная отправка уведомлений",
            СоздательФормыСписка = метод()-> возврат новый ОтложеннаяОтправкаУведомлений.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ОтложеннаяОтправкаУведомлений.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Представление = "Используемая функциональность (Общего назначения)",
            СоздательФормыСписка = метод()-> возврат новый ИспользуемаяФункциональность.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ИспользуемаяФункциональность.АвтоматическаяФормаОбъекта();
            )
    ]
;

@ВПроекте
@Реализация
метод ДополнительныеКоманды(): ЧитаемыйМассив<Команда>
    возврат []
;

@ВПроекте
@Реализация
метод КомандыПанелиДействий(): ЧитаемыйМассив<Команда>
    возврат []
;

@ВПроекте
@Реализация
метод ДополнительныеКомандыПанелиГлавное(): ЧитаемыйМассив<Команда>
    возврат []
;
// Конец ОсновнойИнтерфейсПоставщик

// Контракт ПослеСозданияОбработчик
@ВПроекте
@Реализация
метод ПослеСоздания()
    если не ОсновнойИнтерфейс.ЭтоМобильныйИнтерфейс()
        возврат
    ;
    если ВладельцыКабинетов.ПараметрыСеанса().СпособУведомления != СпособыУведомления.Push
        возврат
    ;
    пер ФизическоеЛицо: ФизическиеЛица.Ссылка? = ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
    попытка
        если ДоставляемыеУведомления.ПроверитьДоступность()
            пер ИдентификаторПодписчика: ИдПодписчикаДоставляемыхУведомлений = ДоставляемыеУведомления.ПолучитьИдПодписчикаУведомлений()
            PushУведомления.ЗарегистрироватьУстройство(ФизическоеЛицо, ИдентификаторПодписчика)
            ДоставляемыеУведомления.УстановитьКатегорииУведомлений(КатегорииУведомлений())
            ДоставляемыеУведомления.УстановитьКаналыУведомлений(КаналыУведомлений())
            ДоставляемыеУведомления.ПодключитьОбработчикиУведомлений((ДоставляемоеУведомление) -> ОбработчикПередОтображением(ДоставляемоеУведомление), (ДоставляемоеУведомление, СтандартноеДействие, Текст) -> ОбработчикДействия(ДоставляемоеУведомление, СтандартноеДействие, Текст))
        ;
    поймать Ошибка: Исключение
        PushУведомления.ЗарегистрироватьОшибку(ФизическоеЛицо, Ошибка.Описание)
    ;
;
// Конец ПослеСозданияОбработчик

метод КатегорииУведомлений(): ЧитаемыйМассив<КатегорияДоставляемогоУведомления>
    пер ДействиеОзнакомился = новый ДействиеДоставляемогоУведомления(
        ИдентификаторПоДействию(PushУведомления.ДействияУведомлений.Ознакомился), 
        "Ознакомился", Ложь)
    пер ДействиеОзнакомилась = новый ДействиеДоставляемогоУведомления(
        ИдентификаторПоДействию(PushУведомления.ДействияУведомлений.Ознакомилась), 
        "Ознакомилась", Ложь)
    пер ДействиеСогласовать = новый ДействиеДоставляемогоУведомления(
        ИдентификаторПоДействию(PushУведомления.ДействияУведомлений.Согласовать), 
        "Согласовать", Ложь)
    пер ДействиеОтказать = новый ДействиеДоставляемогоУведомленияВводТекста(
        ИдентификаторПоДействию(PushУведомления.ДействияУведомлений.Отказать), 
        "Отказать", "Отправить", "Необходимо ввести причину отказа")
    
    пер КатегорияОзнакомился = новый КатегорияДоставляемогоУведомления(PushУведомления.ИД_КАТЕГОРИИ_ОЗНАКОМИЛСЯ, [ДействиеОзнакомился])
    пер КатегорияОзнакомилась = новый КатегорияДоставляемогоУведомления(PushУведомления.ИД_КАТЕГОРИИ_ОЗНАКОМИЛАСЬ, [ДействиеОзнакомилась])
    пер ДействияПриСогласовании: Массив<ДействиеДоставляемогоУведомления|ДействиеДоставляемогоУведомленияВводТекста>
    если УстройствоПоддерживаетВводТекстаВУведомлениях()
        ДействияПриСогласовании = [ДействиеСогласовать, ДействиеОтказать]
    иначе
        ДействияПриСогласовании = [ДействиеСогласовать]
    ;
    пер КатегорияСогласование = новый КатегорияДоставляемогоУведомления(PushУведомления.ИД_КАТЕГОРИИ_СОГЛАСОВАНИЕ, ДействияПриСогласовании)
    
    возврат <КатегорияДоставляемогоУведомления>[КатегорияОзнакомился, КатегорияОзнакомилась, КатегорияСогласование]
;

метод КаналыУведомлений(): ЧитаемыйМассив<КаналДоставляемыхУведомлений>
    пер КаналИнформация = новый КаналДоставляемыхУведомлений(PushУведомления.ИД_КАНАЛА_ИНФОРМАЦИЯ, "Общая информация")
    КаналИнформация.Видимость = ВидимостьДоставляемогоУведомления.Публичное
    пер КаналНапоминание = новый КаналДоставляемыхУведомлений(PushУведомления.ИД_КАНАЛА_НАПОМИНАНИЕ, "Персональные уведомления")
    КаналНапоминание.Видимость = ВидимостьДоставляемогоУведомления.Публичное
    пер КаналОзнакомление = новый КаналДоставляемыхУведомлений(PushУведомления.ИД_КАНАЛА_ОЗНАКОМЛЕНИЕ, "Ознакомление с документами")
    КаналОзнакомление.Видимость = ВидимостьДоставляемогоУведомления.Личное
    пер КаналСогласование = новый КаналДоставляемыхУведомлений(PushУведомления.ИД_КАНАЛА_СОГЛАСОВАНИЕ, "Согласование документов")
    КаналСогласование.Видимость = ВидимостьДоставляемогоУведомления.Личное
    
    возврат [КаналИнформация, КаналНапоминание, КаналОзнакомление, КаналСогласование]
;

метод ИдентификаторПоДействию(Действие: PushУведомления.ДействияУведомлений): Строка
    пер ИдентификаторПоДействию: Строка
    если PushУведомления.ИДЕНТИФИКАТОРЫ_ДЕЙСТВИЙ.СодержитКлюч(Действие)
        ИдентификаторПоДействию = PushУведомления.ИДЕНТИФИКАТОРЫ_ДЕЙСТВИЙ[Действие]
    ;
    возврат ИдентификаторПоДействию
;

метод ОбработчикПередОтображением(Уведомление: ДоставляемоеУведомление): Булево
    пер ОтображаемоеУведомление = новый Уведомление(Уведомление.Заголовок, Уведомление.Текст)
    ОтображаемоеУведомление.Данные = Уведомление.Данные
    если ЭтоКоманда(Уведомление.Данные)
        пер Команда = новый КомандаСПараметром<Уведомление>(Обработчик = &ОбработчикКомандыУведомления, Представление = "Перейти")
        пер ФрагментИнтерфейса: ФрагментКомандногоИнтерфейса<КомандаСПараметром<Уведомление>>
        ФрагментИнтерфейса.Элементы.Добавить(Команда)
        ОтображаемоеУведомление.Команды = ФрагментИнтерфейса
    ; 
    ОтображаемоеУведомление.Показать()
    возврат Истина
;

метод ОбработчикКомандыУведомления(Команда: КомандаСПараметром<Уведомление>, Уведомление: Уведомление)
    ВыполнитьДействие(Уведомление.Данные, "", Неопределено)
;

метод ОбработчикДействия(Уведомление: ДоставляемоеУведомление, Действие: СтандартноеДействиеДоставляемыхУведомлений|Строка, Текст: Строка?)
    ВыполнитьДействие(Уведомление.Данные, Действие, Текст)
;

метод ВыполнитьДействие(ДанныеУведомления: Строка, Действие: СтандартноеДействиеДоставляемыхУведомлений|Строка, Текст: Строка?)
    пер ДанныеPush: PushУведомления.ДанныеPush?
    если ЭтоКоманда(ДанныеУведомления)
        ДанныеPush = новый PushУведомления.ДанныеPush(ИдКоманды = ИдКоманды(ДанныеУведомления))
    иначе
        пер ТекстДействия: Строка = (Текст это Строка) ? Текст : ""
        пер ДействиеУведомления: PushУведомления.ДействияУведомлений = PushУведомления.ДействиеПоИдентификатору(Действие)
        ДанныеPush = новый PushУведомления.ДанныеPush(МенеджерСущности.JsonВСсылка(ДанныеУведомления), ДействиеУведомления, ТекстДействия)
    ;
    знч Сервисы = PushУведомленияОбработчик.ПолучитьСервисы()
    для Сервис из Сервисы
        Сервис.ВыполнитьДействие(ДанныеPush)
    ;
;

метод УстройствоПоддерживаетВводТекстаВУведомлениях(): Булево
    пер УстройствоПоддерживаетВводТекстаВУведомлениях = Истина
    если КлиентскоеУстройство.ВидПлатформы == ВидПлатформыКлиента.Android
        // Версия ОС имеет формат "version (API level)", например, 6.0 (23) или 9 (28)
        пер Версия: Строка = КлиентскоеУстройство.ВерсияОс
        пер УровеньApi: Число
        пер Начало: Число = Версия.НайтиСКонца("(")
        пер Окончание: Число = Версия.НайтиСКонца(")")
        пер Подстрока: Строка
        если Начало  != -1 и Окончание != -1
            Подстрока = Версия.Подстрока(Начало + 1, Окончание)
            если Подстрока.ТолькоЦифры()
                УровеньApi = новый Число(Подстрока)
            ;
        ;
        // Ввод строк работает начиная с API уровня 24
        УстройствоПоддерживаетВводТекстаВУведомлениях = УровеньApi >= 24
    ; 
    возврат УстройствоПоддерживаетВводТекстаВУведомлениях
;

метод ЭтоКоманда(СериализованаяКоманда: Строка): Булево
    пер Подстроки: Массив<Строка> = СериализованаяКоманда.Разделить(Уведомления.РАЗДЕЛИТЕЛЬ_СТРОКИ)
    возврат (Подстроки[0] == Уведомления.ПРЕФИКС_КОМАНДЫ)
;

метод ИдКоманды(СериализованаяКоманда: Строка): Строка
    пер ИдКоманды: Строка
    пер Подстроки: Массив<Строка> = СериализованаяКоманда.Разделить(Уведомления.РАЗДЕЛИТЕЛЬ_СТРОКИ)
    если Подстроки[0] == Уведомления.ПРЕФИКС_КОМАНДЫ
        ИдКоманды = Подстроки[1]
    ; 
    возврат ИдКоманды
;