импорт Обсуждения
импорт Криптография
импорт ОбменДанными
импорт ФизическиеЛица
импорт Компания
импорт Компания::Согласования
импорт Документы
импорт Справки
импорт ИнтерфейсныеКомпонентыСтандартные
импорт УниверсальныеМеханизмы
импорт СтандартноеПриложение
импорт ВебApi
импорт ВладельцыКабинетов
импорт ЛичныеКабинетыПользователей
импорт Отпуск
импорт Отсутствия

@ВПроекте
@НаКлиенте
конст УДАЛЕН_ДОКУМЕНТ = "УдаленДокумент"

@ВПроекте
@НаКлиенте
конст ОБНОВИТЬ_СПИСОК_ОБСУЖДЕНИЙ = "ОбновитьСписокОбсуждений"

@ВПроекте
@НаКлиенте
конст СОГЛАСИЕ_КЭДО_ПОДПИСАНО = "СогласиеКэдоПодписано"

@ВПодсистеме
конст КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: Строка = "ОбщегоНазначенияПараметрыСеанса"

@ВПроекте
@НаКлиенте
исключение ОшибкаПроверкиЗаполненияФормы
;

@ВПроекте
структура ФункциональныеОпции
  
    пер ФайлДляВыводаНаПринтер: Булево = Истина
    пер СканДокумента: Булево
    пер ФайлСЭлектроннойПодписью: Булево
    пер ВБумажномВиде: Булево
    пер КопияНаПочту: Булево
;

@ВПроекте
структура ПараметрыСеанса
    пер ФункциональныеОпции: ФункциональныеОпции
;

@ВПроекте
@НаКлиенте
метод ПараметрыСеанса(): ПараметрыСеанса
    возврат ПараметрыСеансаСервис.ПолучитьСервис().ПараметрПоКлючу(КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА) как ПараметрыСеанса
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ПолучитьФункциональныеОпции(): ФункциональныеОпции? 
    возврат ИспользуемаяФункциональность.ФункциональныеОпции()
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЗаписатьФункциональныеОпции(ФункциональныеОпции: ФункциональныеОпции)
    ИспользуемаяФункциональность.ЗаписатьФункциональныеОпции(ФункциональныеОпции)
;

@ВПроекте
@НаКлиенте
метод СостояниеДокумента(Объект: Справочник.Объект): СостоянияДокумента
    если Объект.ЭтоНовый()
        возврат СостоянияДокумента.Черновик
    ;
    возврат УниверсальныеМеханизмы.СостояниеДокумента(Объект.Ссылка)
;

@ВПроекте
@НаКлиенте
метод ОчиститьКлиентскиеДанные(ПрисоединенныеФайлы: ПрисоединенныеФайлы)
    для Элемент из ПрисоединенныеФайлы.Файлы
        пер ПрисоединенныйФайл: ПрисоединенныйФайл = Элемент
        ПрисоединенныйФайл.ЗагрузкаФайла = Неопределено
    ;
;

@ВПроекте
@НаКлиенте @НаСервере
метод ЭтоЧерновик(Состояние: СостоянияДокумента?): Булево
    возврат Состояние == Неопределено или Состояние == СостоянияДокумента.Черновик
;

@ВПроекте
@НаКлиенте
метод РедактированиеЗапрещено(Состояние: СостоянияДокумента?, ФизическоеЛицо: ФизическиеЛица.Ссылка?, ТекущееФизическоеЛицо: ФизическиеЛица.Ссылка?): Булево
    пер РедактированиеЗапрещено: Булево
    если ФизическоеЛицо == ТекущееФизическоеЛицо
        РедактированиеЗапрещено = Состояние != СостоянияДокумента.Черновик 
    иначе
        РедактированиеЗапрещено = Истина
    ;
    возврат РедактированиеЗапрещено
;

@ВПроекте
@НаКлиенте
метод ЗаголовокКнопкиЗаписатьИЗакрыть(Черновик: Булево, РедактированиеЗапрещено: Булево, ТребуетСогласования: Булево, ЗаголовокКнопкиБезСогласования: Строка = "Отметить отсутствие"): Строка
    пер ЗаголовокКнопки: Строка
    если не РедактированиеЗапрещено
        если ТребуетСогласования
            если Черновик
                ЗаголовокКнопки = "Отправить на согласование"
            иначе
                ЗаголовокКнопки = "Закрыть"
            ;
        иначе
            ЗаголовокКнопки = ЗаголовокКнопкиБезСогласования
        ;
    иначе
        ЗаголовокКнопки = "Закрыть"
    ;
    возврат ЗаголовокКнопки
;

@ВПроекте
@НаКлиенте
метод ВидКнопкиЗаписатьИЗакрыть(Черновик: Булево, РедактированиеЗапрещено: Булево, ТребуетСогласования: Булево): ВидКнопки
    пер ВидКнопкиЗаписатьИЗакрыть: ВидКнопки?
    если не РедактированиеЗапрещено
        если ТребуетСогласования
            если Черновик
                ВидКнопкиЗаписатьИЗакрыть = ВидКнопки.Основная
            иначе
                ВидКнопкиЗаписатьИЗакрыть = ВидКнопки.Обычная
            ;
        иначе
            ВидКнопкиЗаписатьИЗакрыть = ВидКнопки.Основная
        ;
    иначе
        ВидКнопкиЗаписатьИЗакрыть = ВидКнопки.Обычная
    ;
    возврат ВидКнопкиЗаписатьИЗакрыть
;

@ВПроекте
@НаКлиенте
метод ИспользованиеКнопкиСохранитьЧерновик(Автор: ФизическиеЛица.Ссылка?, ПодписанПослеАвтора: Булево, Отправлен:Булево): Булево
    если Автор != ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
        возврат Ложь
    ;
    возврат не ПодписанПослеАвтора и не Отправлен
;

@ВПроекте
@НаКлиенте
метод ЗаголовокКнопкиСохранитьЧерновик(Черновик: Булево): Строка
    возврат Черновик ? "Заполню позже" : "Отменить отправку"
;

@ВПроекте
@НаКлиенте
метод ИспользованиеКнопкиУдалить(
        Состояние: СостоянияДокумента?, 
        ФизическоеЛицо: ФизическиеЛица.Ссылка?, 
        ТекущееФизическоеЛицо: ФизическиеЛица.Ссылка?, 
        ЭтоНовый: Булево, 
        Отправлен: Булево, 
        ПодписанТекущимФизическимЛицом: Булево,
        ПодписанПослеАвтора: Булево = Ложь): Булево

    пер ИспользованиеКнопкиУдалить: Булево
    если ФизическоеЛицо == ТекущееФизическоеЛицо
        ИспользованиеКнопкиУдалить = не ЭтоНовый и Состояние == СостоянияДокумента.Черновик 
    иначе
        ИспользованиеКнопкиУдалить = 
            не Отправлен
            и ПодписанТекущимФизическимЛицом
            и не ПодписанПослеАвтора
            и Состояние == СостоянияДокумента.Подготовлен
    ;
    возврат ИспользованиеКнопкиУдалить
;

@ВПроекте
@НаКлиенте
метод ЗаголовокКнопкиУдалить(Подписан: Булево): Строка
    если Подписан
        возврат "Отменить согласование"
    ;
    возврат "Удалить"
;

@ВПроекте
@НаКлиенте
метод ОписаниеОшибкиПриДействииСДокументом(Ошибка: Исключение, ФизическоеЛицо: ФизическиеЛица.Ссылка? = Неопределено, ПодписанТекущимФизическимЛицом: Булево = Ложь): Строка
    пер ОписаниеОшибки: Строка
    пер ТипОшибки: Тип = Ошибка.ПолучитьТип()
    пер ТипПричиныОшибки: Тип = Ошибка.Причина.ПолучитьТип()
    пер ТекущееФизическоеЛицо: ФизическиеЛица.Ссылка? = ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
    выбор 
    когда ТипОшибки == Тип<ОбщегоНазначения.ИсключениеНедопустимоеСостояниеЗапроса> или
            ТипПричиныОшибки == Тип<ОбщегоНазначения.ИсключениеНедопустимоеСостояниеЗапроса> 
        ОписаниеОшибки = "Заявление не согласовано, потому что сотрудник его уже отозвал. Возможно это заявление будет направлено еще раз после исправления."
    когда ТипОшибки == Тип<ОбменДанными.ИсключениеДокументУжеОтправлен> или
            ТипПричиныОшибки == Тип<ОбменДанными.ИсключениеДокументУжеОтправлен>
        если ФизическоеЛицо != ТекущееФизическоеЛицо и не ПодписанТекущимФизическимЛицом
            ОписаниеОшибки = "Ваше согласование не требуется - заявление уже отправлено в кадровую службу. Возможно оно было согласовано Вами ранее или согласовано другим ответственным лицом."
        иначе если ФизическоеЛицо != ТекущееФизическоеЛицо и ПодписанТекущимФизическимЛицом
            ОписаниеОшибки = "Отмена согласования невозможна - заявление уже отправлено в кадровую службу."
        иначе если ФизическоеЛицо != ТекущееФизическоеЛицо
            ОписаниеОшибки = "Ваше согласование не требуется - заявление уже отправлено в кадровую службу. Возможно оно было согласовано Вами ранее или согласовано другим ответственным лицом."
        иначе если ФизическоеЛицо != ТекущееФизическоеЛицо
            ОписаниеОшибки = "Отмена согласования невозможна - заявление уже отправлено в кадровую службу."
        иначе 
            ОписаниеОшибки = "Отзыв невозможен - заявление уже отправлено в кадровую службу."
        ;
    когда ТипОшибки == Тип<Согласования.ИсключениеДокументУжеПодписан> или
            ТипПричиныОшибки == Тип<Согласования.ИсключениеДокументУжеПодписан>
        ОписаниеОшибки = "Отзыв невозможен - заявление уже подписано ответственным лицом."
    когда ТипОшибки == Тип<Криптография.ИсключениеПодписанныйДокументОтсутствует> или
            ТипПричиныОшибки == Тип<Криптография.ИсключениеПодписанныйДокументОтсутствует>
        ОписаниеОшибки = "Заявление не согласовано, потому что сотрудник уже удалил свое заявление."
    когда ТипОшибки == Тип<Криптография.ИсключениеЭлектроннаяПодписьОтсутствует> или
            ТипПричиныОшибки == Тип<Криптография.ИсключениеЭлектроннаяПодписьОтсутствует>
        ОписаниеОшибки = "Отсутствует электронная подпись. Создайте электронную подпись в разделе Профиль."
    когда ТипОшибки == Тип<Криптография.ИсключениеНеверныйПарольЭлектроннойПодписи> или
            ТипПричиныОшибки == Тип<Криптография.ИсключениеНеверныйПарольЭлектроннойПодписи>
        ОписаниеОшибки = "Неверный пароль электронной подписи."
    когда ТипОшибки == Тип<ОшибкаПроверкиЗаполненияФормы>
        ОписаниеОшибки = Ошибка.Описание
    когда ТипПричиныОшибки == Тип<ОшибкаПроверкиЗаполненияФормы>
        ОписаниеОшибки = Ошибка.Причина.Описание
    когда ТипОшибки == Тип<Криптография.КорневойСертификатОтозван>
        или ТипПричиныОшибки == Тип<Криптография.КорневойСертификатОтозван>
        
        ОписаниеОшибки = "Корневой сертификат подписи отозван. Обновите электронную подпись в разделе Профиль."
    иначе
        выбросить Ошибка
    ;
    возврат ОписаниеОшибки
;



@ВПроекте
@НаКлиенте
метод ПиктограммаУправленияОтображениемСпискаПодчиненныхИерархическогоСписка(СписокПодчиненныхОткрыт: Булево): ДвоичныйОбъект.Ссылка
    если СписокПодчиненныхОткрыт
        возврат Ресурс{ШевронВверх.svg}.Ссылка
    ;
    возврат Ресурс{ШевронВниз.svg}.Ссылка
;

@ВПроекте
исключение ИсключениеНедопустимоеСостояниеЗапроса
    обз пер СостояниеЗапроса: СостоянияДокумента
;

@ВПроекте
структура ДанныеJsonОбъектаИдентификатораФайла
    обз пер ИдентификаторФайла: Организации.Ссылка|Сотрудники.Ссылка
    обз пер ДанныеJsonОбъекта: Объект?
;

@ВПроекте
структура JsonОбъектаИдентификатораФайла
    обз пер ИдентификаторФайла: Организации.Ссылка|Сотрудники.Ссылка
    обз пер JsonОбъекта: Строка
;

//Область Электронные документы

@НаСервере
метод ДобавитьЭлектронныйДокумент(Объект: неизвестно, Данные: ДвоичныйОбъект, ИдентификаторФайла: Организации.Ссылка|Сотрудники.Ссылка? = Неопределено)
    
    пер ПредставлениеОбъекта: Строка = Объект.Представление()
    пер ИдентификаторЭлектронногоДокумента = ""
    если ИдентификаторФайла != Неопределено
        пер СсылкаИдентификатора: неизвестно = ИдентификаторФайла
        ИдентификаторЭлектронногоДокумента = Файлы.ИдентификаторЭлектронногоДокумента(Объект, СсылкаИдентификатора)
        пер ПредставлениеИдентификатора = СсылкаИдентификатора.Представление()
        если не ПредставлениеИдентификатора.Пусто()
            ПредставлениеОбъекта = "%ПредставлениеОбъекта (%ПредставлениеИдентификатора)"
        ;
    ;
    
    пер ОбъектЭлектронныйДокумент = Файлы.НовыйФайл(Данные, Данные.Размер.ВБайтах(), ВидыФайла.ЭлектронныйДокумент, ИдентификаторЭлектронногоДокумента)
    ОбъектЭлектронныйДокумент.Владелец = Объект
    ОбъектЭлектронныйДокумент.Наименование = Файлы.НаименованиеФайлаИзПредставления(ПредставлениеОбъекта)
    ОбъектЭлектронныйДокумент.Расширение = "json"
    ОбъектЭлектронныйДокумент.Записать()
;

@ВПроекте 
@НаСервере
метод ПослеЗаписиОбъектаСЭлектоннымиДокументамиПредставлений(Объект: неизвестно, ОбъектИзменен: Булево)
    если не ОбъектИзменен
        возврат
    ;
    пер ЭлектронныеДокументы = Файлы.ЭлектронныеДокументыОбъекта(Объект)
    для ЭлектронныйДокумент из ЭлектронныеДокументы
        если ЭлектронныйДокумент.Значение.Оригинал != Неопределено
            Файлы.УдалитьФайл(ЭлектронныйДокумент.Значение.Оригинал.Ссылка)
        ;
        если ЭлектронныйДокумент.Значение.Представления != Неопределено
            для ПредставлениеДокумента из ЭлектронныйДокумент.Значение.Представления
                Файлы.УдалитьФайл(ПредставлениеДокумента.Ссылка)
            ;
        ;
        если ЭлектронныйДокумент.Значение.ТабличныйДокументОригинала != Неопределено
            Файлы.УдалитьФайл(ЭлектронныйДокумент.Значение.ТабличныйДокументОригинала.Ссылка)
        ;
    ;
;

//КонецОбласти Электронные документы

@ВПроекте
@НаСервере
метод ЭтоОбъектСЭлектроннымДокументом(Объект: Объект): Булево
    возврат ТипыОбъектовСЭлектроннымиДокументами().Содержит(Объект.ПолучитьТип())
;

@НаСервере
метод ТипыОбъектовСЭлектроннымиДокументами(): Массив<Тип>
    возврат [
        Тип<ДокументыНаПодпись.Ссылка>,
        Тип<Справка2Ндфл.Ссылка>,
        Тип<СправкаПоОстаткамОтпуска.Ссылка>,
        Тип<СправкаСМестаРаботы.Ссылка>
    ]
;

@ВПроекте
@НаСервере
метод ПослеИзмененияСотоянияЗаявки(Документ: ИсходящиеДанные.Ссылка, Состояние: СостоянияДокумента, ФизическоеЛицо: ФизическиеЛица.Ссылка)
    если Состояние == СостоянияДокумента.Выполнен
        ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(ФизическоеЛицо, Истина)
    иначе если Состояние == СостоянияДокумента.ПолученОтказ
        ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(ФизическоеЛицо, Истина)
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Документ, Ложь)
        СогласованияДокументов.ЗарегистрироватьПодписиОтправляемогоДокумента(Документ, Ложь)
    иначе если Состояние == СостоянияДокумента.Черновик
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Документ, Ложь)
        СогласованияДокументов.ЗарегистрироватьПодписиОтправляемогоДокумента(Документ, Ложь)
    ;
;

@ВПроекте
@НаСервере
метод УниверсальныеПараметрыСтроковыхРесурсов(
        ЗначенияРесурсов: Соответствие<Строка, Строка>, 
        СсылкиФизическихЛиц: ЧитаемоеМножество<ФизическиеЛица.Ссылка>): Соответствие<ФизическиеЛица.Ссылка, Соответствие<Строка, Строка>>
        
    пер ПараметрыСтроковыхРесурсов: Соответствие<ФизическиеЛица.Ссылка, Соответствие<Строка, Строка>>
    
    пер ПараметрыФИО = ["\%Имя\%", "\%ИмяОтчество\%", "\%Фамилия\%"]
    пер ПараметрыАдресСервиса = ["\%СсылкаСЛогином\%", "\%ЛогинПользователя\%"]
    пер ИспользоватьПараметрыФИО = Ложь
    пер ИспользоватьПараметрыАдресСервиса = Ложь
    
    для ЗначениеРесурса из ЗначенияРесурсов
        для ИмяПараметра из ПараметрыФИО
            если ЗначениеРесурса.Значение.Содержит(ИмяПараметра)
                ИспользоватьПараметрыФИО = Истина
                прервать
            ;
            если ИспользоватьПараметрыФИО
                прервать
            ;
        ;
        для ИмяПараметра из ПараметрыАдресСервиса
            если ЗначениеРесурса.Значение.Содержит(ИмяПараметра)
                ИспользоватьПараметрыАдресСервиса = Истина
                прервать
            ;
            если ИспользоватьПараметрыАдресСервиса
                прервать
            ;
        ;
    ;
    
    если не ИспользоватьПараметрыФИО и не ИспользоватьПараметрыАдресСервиса
        для ФизическоеЛицо из СсылкиФизическихЛиц
            пер ЗначенияПараметров: Соответствие<Строка, Строка>
            ПараметрыСтроковыхРесурсов.Вставить(ФизическоеЛицо, ЗначенияПараметров)
        ;
    ;
    
    если ИспользоватьПараметрыФИО
        знч ЗапрашиваемыеДанные: ВладельцыКабинетов.ЗапрашиваемыеДанныеВладельцевКабинетов
        ЗапрашиваемыеДанные.ЗапрашиваемыеДанныеФизическихЛиц.ЛичныеДанные = Истина
        знч ДанныеФизическихЛиц = ВладельцыКабинетов.ДанныеВладельцевКабинетов(СсылкиФизическихЛиц, ЗапрашиваемыеДанные)
        для ФизическоеЛицо из СсылкиФизическихЛиц
            если ДанныеФизическихЛиц.СодержитКлюч(ФизическоеЛицо)
                знч ДанныеФизическогоЛица = ДанныеФизическихЛиц[ФизическоеЛицо]
                знч ЗначенияПараметров: Соответствие<Строка, Строка> = {
                    "\%Имя\%": ДанныеФизическогоЛица.ДанныеФизлица.ЛичныеДанные.ФИО.Имя, 
                    "\%ИмяОтчество\%": "%{ДанныеФизическогоЛица.ДанныеФизлица.ЛичныеДанные.ФИО.Имя} %{ДанныеФизическогоЛица.ДанныеФизлица.ЛичныеДанные.ФИО.Отчество}", 
                    "\%Фамилия\%": ДанныеФизическогоЛица.ДанныеФизлица.ЛичныеДанные.ФИО.Фамилия}
                ПараметрыСтроковыхРесурсов.Вставить(ФизическоеЛицо, ЗначенияПараметров)
            ;
        ;
    ;
        
    если ИспользоватьПараметрыАдресСервиса
        пер Настройки = ЛичныеКабинетыПользователей.ТекущиеНастройкиСозданияУчетныхЗаписей()
        пер СведенияОЛичныхКабинетах = ЛичныеКабинетыПользователей.СведенияОЛичныхКабинетах(СсылкиФизическихЛиц)
        для ФизическоеЛицо из СсылкиФизическихЛиц
            если СведенияОЛичныхКабинетах.СодержитКлюч(ФизическоеЛицо)
                пер СведенияОЛичномКабинете = СведенияОЛичныхКабинетах[ФизическоеЛицо]
                пер СсылкаСЛогином = ЛичныеКабинетыПользователей.СсылкаСЛогином(
                    Настройки.АдресСервиса, СведенияОЛичномКабинете.ЛогинПользователя)
                пер ЗначенияПараметров: Соответствие<Строка, Строка>
                если ПараметрыСтроковыхРесурсов.СодержитКлюч(ФизическоеЛицо)
                    ЗначенияПараметров = ПараметрыСтроковыхРесурсов[ФизическоеЛицо]
                ;
                ЗначенияПараметров.Вставить("\%СсылкаСЛогином\%", СсылкаСЛогином)
                ЗначенияПараметров.Вставить("\%ЛогинПользователя\%", СведенияОЛичномКабинете.ЛогинПользователя)
                ПараметрыСтроковыхРесурсов.Вставить(ФизическоеЛицо, ЗначенияПараметров)
            ;
        ;
    ;
    возврат ПараметрыСтроковыхРесурсов
;



@ВПроекте
@НаСервере
метод ЗаполнитьУниверсальныеПараметрыВСообщении(ТекстСообщения: Строка, ЗначенияПараметров: Соответствие<Строка, Строка>): Строка
    возврат УниверсальныеМеханизмы.ЗаполнитьУниверсальныеПараметрыВСообщении(ТекстСообщения, ЗначенияПараметров)
;

@ВПроекте
@НаСервере
структура НастройкиОтложеннойОтправки
    пер ИспользоватьОтложеннуюОтправку: Булево
    пер Задержка: Число
;


@ВПроекте
@НаСервере
метод УстановитьНастройкиОтложеннойОтправкиУведомлений(ИспользоватьОтложеннуюОтправку: Булево, Задержка: Число)
    ОтложеннаяОтправкаУведомлений.УстановитьНастройкиОтложеннойОтправкиУведомлений(ИспользоватьОтложеннуюОтправку, Задержка)
;

@ВПроекте
@НаСервере
метод НастройкиОтложеннойОтправкиУведомлений(): НастройкиОтложеннойОтправки
    возврат ОтложеннаяОтправкаУведомлений.Настройки()
;

//КонецОбласти

@ВПроекте
@НаКлиенте @НаСервере
структура СклоненияПредставленияОбъекта
    пер Именительный: Строка
    пер Родительный: Строка
    пер Дательный: Строка
    пер Винительный: Строка
    пер Творительный: Строка
    пер Предложный: Строка
;

@ВПроекте
@НаКлиенте
метод УведомлениеОшибкиЗагрузкиФайлов()
    СтандартныеФормы.ПоказатьУведомление("Внимание", 
                    "Некоторотые файлы не были загружены.", 
                    ОценкаИнформации.Предупреждающая)
;

@ВПроекте
@НаСервере
метод ПолучитьДанныеУведомляемыеОбОтсутствии(): РезультатЗапроса<ДанныеУведомляемыхОбОтсутствии>
    знч Запрос = Запрос{
        ВЫБРАТЬ РАЗЛИЧНЫЕ
            Владелец КАК Документ,
            Уведомляемый КАК Уведомляемый
        ПОРОДИТЬ
            ДанныеУведомляемыхОбОтсутствии    
        ИЗ
            ЗаявлениеНаОтпускУведомляемыеУстарело
        ГДЕ
            Владелец != Неопределено
            И Уведомляемый != Неопределено
        ОБЪЕДИНИТЬ ВСЕ
        ВЫБРАТЬ РАЗЛИЧНЫЕ
            Владелец КАК Документ,
            Уведомляемый КАК Уведомляемый   
        ИЗ
            ОтсутствиеУведомляемыеУстарело
        ГДЕ
            Владелец != Неопределено
            И Уведомляемый != Неопределено
    }
    возврат Запрос.Выполнить()          
;