импорт ОбщиеСтандартные
импорт СтандартноеПриложение
импорт ФизическиеЛица
импорт Почта
импорт ВебApi
импорт КонтрольДоступа

@ВПроекте конст ВРЕМЯ_НАЧАЛА_УВЕДОМЛЕНИЙ = Время{8:00}
@ВПроекте конст ВРЕМЯ_ОКОНЧАНИЯ_УВЕДОМЛЕНИЙ = Время{21:00}

@ВПроекте конст ПРЕФИКС_КОМАНДЫ = "Command"   
@ВПроекте конст РАЗДЕЛИТЕЛЬ_СТРОКИ = ":"

@ВПроекте
конст ИД_ПОДСИСТЕМЫ = "Уведомления"

@ВПроекте
@НаСервере
перечисление ВидыТекстов
    ТемаПисьма,
    ТекстПисьма,
    ТекстSms,
    ТекстPush
;

структура РезультатОтправкиSms
    обз пер Description: Строка?
;

@ВПроекте
@НаСервере
структура ИдентификаторыПриложения
    пер ИдентификаторSmsGate: Строка
    пер ИдентификаторPushNotifications: Строка
    пер КлючFcm: Строка
    пер СертификатApns: ДвоичныйОбъект.Ссылка?
    пер КлючCервисаFirebase: ДвоичныйОбъект.Ссылка?
    пер КлючCервисаHms: ДвоичныйОбъект.Ссылка?
;

@ВПроекте
@НаСервере @НаКлиенте
структура НастройкиУчетнойЗаписиОтправкиSms
    пер Сервер: Строка
    пер URLСервиса: Строка
;

@ВПроекте
@НаСервере @НаКлиенте
структура НастройкиОтправкиSms
    пер ИдентификаторSmsGate: Строка
    пер НастройкиУчетнойЗаписи: НастройкиУчетнойЗаписиОтправкиSms
;

@ВПроекте
@НаСервере
структура НастройкиУведомленийПриложения
    пер ВремяПолученияУведомлений: ЗакрытыйДиапазон<Время>?
;

@ВПроекте
@НаСервере
структура НастройкиУведомленийФизическихЛиц
    знч ПредпочтительныйСпособУведомления: СпособыУведомления
    знч ВремяНачалаПолученияУведомлений: Время?
    знч ВремяОкончанияПолученияУведомлений: Время?
    знч ТекущееСмещениеКлиента: Число
;

@ВПроекте
@НаСервере
метод Идентификаторы(): Уведомления.ИдентификаторыПриложения
    возврат ИдентификаторыПриложения.Идентификаторы()
;

@ВПроекте
@НаСервере
метод УстановитьИдентификаторыПриложения(Идентификаторы: ИдентификаторыПриложения, Ключи: ЧитаемаяКоллекция<Строка>? = Неопределено)
    ИдентификаторыПриложения.УстановитьИдентификаторыПриложения(Идентификаторы, Ключи)
;

@ВПроекте
@НаСервере
метод НастройкиУведомлений(Способ: СпособыУведомления): Уведомления.НастройкиУведомленийПриложения?
    возврат НастройкиУведомлений.Настройки().ПолучитьИлиУмолчание(Способ)
;

@ВПроекте
@НаСервере
метод НастройкиУведомлений(): Соответствие<СпособыУведомления, Уведомления.НастройкиУведомленийПриложения>
    возврат НастройкиУведомлений.Настройки()
;

@ВПроекте
@НаСервере
метод ПрименитьВремяПолученияУведомлений(Способ: СпособыУведомления, НастрокиПоСпособу: НастройкиУведомленийПриложения)
    НастройкиУведомлений.ЗаписатьВремяПолученияУведомлений(Способ, НастрокиПоСпособу.ВремяПолученияУведомлений, Ложь)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ПрименитьВремяПолученияУведомлений(НастройкиПолучения: ЗакрытыйДиапазон<Время>)
    НастройкиУведомлений.ПрименитьВремяПолученияУведомлений(НастройкиПолучения)
;


@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЗаписатьВремяПолученияУведомленийПоУмолчанию()
    пер СпособыУведомлений = СпособыУведомления.Элементы()
    СпособыУведомлений.Удалить(СпособыУведомления.НеУведомлять)
    ЗаписатьСпособыУведомлений(СпособыУведомлений)
;

@ВПроекте
@НаСервере
метод ЗаписатьСпособыУведомлений(СпособыУведомлений: Массив<СпособыУведомления>)
    для Способ из СпособыУведомлений
        пер Период = новый ЗакрытыйДиапазон<Время>(ВРЕМЯ_НАЧАЛА_УВЕДОМЛЕНИЙ, ВРЕМЯ_ОКОНЧАНИЯ_УВЕДОМЛЕНИЙ)
        НастройкиУведомлений.ЗаписатьВремяПолученияУведомлений(Способ, Период, Ложь)
    ;
;

@ВПроекте
@НаСервере
структура РезультатОтправкиСообщения
    обз пер Статус: СтатусыОтправкиСообщений
    пер ДатаОтправки: Момент?
    пер ПредставлениеРезультата: Строка
;

@ВПроекте
@НаСервере
перечисление СтатусыОтправкиСообщений
    Отправлено
    ОтправкаЗапланирована
    ОшибкаОтправки
;

@ВПроекте
перечисление ВидыУведомлений
    ОбщаяИнформация умолчание,
    ПерсональнаяИнформация,
    ОзнакомлениеПодПодпись,
    Согласование
;

@ВПроекте 
@НаСервере
исключение ИсключениеНеЗаданИдентификаторПриложения
;

@ВПроекте
@НаСервере
метод ОтправитьEMail(АдресатИмя: Строка, АдресатПочта: Строка, Тема: Строка, ТекстСообщения: Строка): РезультатОтправкиСообщения
    знч Сообщение = новый ПочтовоеСообщение(
        Тема = Тема,
        ПолучателиПисьма = [АдресатПочта],
        ТекстПисьма = ТекстСообщения
    )
    если ТекстСообщения.Сократить().ВВерхнийРегистр().ЗаканчиваетсяНа("</HTML>")
        Сообщение.ВидТекста = ФорматыПочтовогоСообщения.Html
    иначе
        Сообщение.ВидТекста = ФорматыПочтовогоСообщения.ПростойТекст
    ;
    пер РезультатОтправки = Почта.ОтправитьСообщение(Сообщение)
    если РезультатОтправки.Статус == СтатусыОтправки.Отправлено
        возврат РезультатОтправкиСообщенияОтправлено(РезультатОтправки.ДатаОтправки)
    ;
    Журналирование.ЗарегистрироватьОшибку("ОшибкаОтправкиУведомления", РезультатОтправки.ПодробноеОписание, Неопределено, ВажностьСобытияЖурналаСобытий.Высокая)
    возврат РезультатОтправкиСообщенияОшибка(
        Почта.ТекстОшибки(РезультатОтправки.Ошибка)
    )
;

@ВПроекте
@НаСервере
метод ОтправитьSMS(ТелефонПолучателя: Строка, ТекстСообщения: Строка): РезультатОтправкиСообщения
    пер ИдПриложения: Строка = ИдентификаторыПриложения.ИдентификаторSmsGate()
    если ИдПриложения.Пусто()
        выбросить новый Уведомления.ИсключениеНеЗаданИдентификаторПриложения("Не задан идентификатор приложения для отправки смс")
    ;
    пер УчетнаяЗапись: Уведомления.НастройкиУчетнойЗаписиОтправкиSms = НастройкиУчетнойЗаписи()
    если УчетнаяЗапись.Сервер.Пусто()
        возврат РезультатОтправкиСообщенияОшибка("Не указан сервер отправки sms.")
    ;
    если УчетнаяЗапись.URLСервиса.Пусто()
        возврат РезультатОтправкиСообщенияОшибка("Не указан URL сервиса отправки sms.")
    ;
    если ТелефонПолучателя.Сократить().Пусто()
        возврат РезультатОтправкиСообщенияОшибка("Не указан телефон получателя sms.")  
    ;
    пер НормализованныйНомерТелефона: Строка
    попытка 
        НормализованныйНомерТелефона = МенеджерСтрок.КанонизированныйНомерТелефона(ТелефонПолучателя)
    поймать Ошибка: МенеджерСтрок.ИсключениеНедопустимыеСимволыНомераТелефона
        возврат РезультатОтправкиСообщенияОшибка(Ошибка.Описание)
    ;
    попытка 
        пер Запрос: ЗапросHttp = СоединениеHttp.Клиент()
            .СБазовымUrl(УчетнаяЗапись.Сервер + УчетнаяЗапись.URLСервиса + "/")
            .ЗапросPost("send")
            .УстановитьТело(
                СервисыHttp.ДанныеJsonВСтроку(
                    ДанныеSMSСообщения(
                        ИдПриложения, 
                        НормализованныйНомерТелефона, 
                        ТекстСообщения
                    )
                )
            )
        исп Ответ: ОтветHttp = Запрос.Выполнить() 
        знч Настройки = СервисыHttp.НастройкиЧтенияОбъектовJson()
        знч ДанныеОтвета = СервисыHttp.ИзвлечьДанныеJson(Ответ, Тип<РезультатОтправкиSms>, Настройки) как РезультатОтправкиSms
        если [200, 202].Содержит(Ответ.КодСостояния)
            возврат РезультатОтправкиСообщенияОтправлено(Момент.Сейчас(), ДанныеОтвета.Description)
        иначе
            возврат РезультатОтправкиСообщенияОшибка((Ответ.КодСостояния).ВСтроку() + " "  + Ответ.Причина)
        ;
    поймать Ошибка: Исключение        
        Журналирование.ЗарегистрироватьОшибку(Ошибка)
        возврат РезультатОтправкиСообщенияОшибка(Ошибка.Описание)
    ;
;

@ВПроекте
@НаСервере
метод ОтправитьSMS(ТелефонПолучателя: Строка, ТекстСообщения: Строка, ВремяОтправки: Момент): РезультатОтправкиСообщения                 
    если ВремяОтправки < Момент.Сейчас()
        возврат РезультатОтправкиСообщенияОшибка("Планируемое время отправки сообщения уже прошло.")
    иначе
        возврат ОтправитьSMS(
                    ТелефонПолучателя, 
                    ТекстСообщения, 
                    ВремяОтправки - Момент.Сейчас()
                )    
    ;           
;

@ВПроекте
@НаСервере
метод ОтправитьSMS(ТелефонПолучателя: Строка, ТекстСообщения: Строка, Задержка: Длительность): РезультатОтправкиСообщения 
    если Задержка < 1с
        возврат ОтправитьSMS(ТелефонПолучателя, ТекстСообщения)        
    иначе
         МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
         ЗапланированныеЗадания.Создать(&Уведомления.ОтправитьSMSСообщениеВФоне,
            ТелефонПолучателя, ТекстСообщения)
            .Настроить(Задержка = Задержка)
            .Запланировать()
        возврат РезультатОтправкиСообщенияЗапланировано(Момент.Сейчас() + Задержка)
    ;                            
;


@НаСервере
метод ОтправитьSMSСообщениеВФоне(ТелефонПолучателя: Строка, ТекстСообщения: Строка)
    ОтправитьSMS(
        ТелефонПолучателя,
        ТекстСообщения    
    )
;

@ВПроекте
@НаСервере
метод НастройкиУчетнойЗаписи(): НастройкиУчетнойЗаписиОтправкиSms
    возврат УчетныеЗаписиОтправкиSMS.НастройкиУчетнойЗаписи()
;

@ВПроекте
@НаСервере
метод УстановитьНастройкиУчетнойЗаписиОтправкиSms(СохраняемыеНастройки: НастройкиУчетнойЗаписиОтправкиSms, ИспользоватьПоУмолчанию: Булево = Истина)
    УчетныеЗаписиОтправкиSMS.УстановитьНастройкиУчетнойЗаписиОтправкиSms(СохраняемыеНастройки, ИспользоватьПоУмолчанию)
;

@НаСервере
метод ДанныеSMSСообщения(ИдПриложения: Строка, НомерТелефона: Строка, ТекстСообщения: Строка): ЧитаемоеСоответствие<Строка, Строка>
    возврат 
        {"AppID": ИдПриложения,
        "PhoneNumber": НомерТелефона,
        "Message": ТекстСообщения}
;

@НаСервере
метод РезультатОтправкиСообщенияОшибка(СообщениеОбОшибке: Строка): РезультатОтправкиСообщения
    возврат новый РезультатОтправкиСообщения(
        СтатусыОтправкиСообщений.ОшибкаОтправки,
        ПредставлениеРезультата = "Ошибка отправки сообщения. %СообщениеОбОшибке")   
;

@НаСервере
метод РезультатОтправкиСообщенияОтправлено(ВремяОтправки: Момент, ПредставлениеРезультата: Строка? = Неопределено): РезультатОтправкиСообщения
    возврат новый РезультатОтправкиСообщения(
        СтатусыОтправкиСообщений.Отправлено,
        ВремяОтправки,
        ПредставлениеРезультата == Неопределено? "Сообщение отправлено" : ПредставлениеРезультата!)   
;

@НаСервере
метод РезультатОтправкиСообщенияЗапланировано(ВремяОтправки: Момент): РезультатОтправкиСообщения
    возврат новый РезультатОтправкиСообщения(
        СтатусыОтправкиСообщений.ОшибкаОтправки,
        ВремяОтправки,
        "Отправка сообщения запланировано")   
;

конст СТРОКА_ПО_ВИД_УВЕДОМЛЕНИЯ: ЧитаемоеСоответствие<ВидыУведомлений, Строка> = {   
    ВидыУведомлений.ОбщаяИнформация: "ОбщаяИнформация", 
    ВидыУведомлений.ПерсональнаяИнформация: "ПерсональнаяИнформация", 
    ВидыУведомлений.ОзнакомлениеПодПодпись: "ОзнакомлениеПодПодпись", 
    ВидыУведомлений.Согласование: "Согласование"}


@ВПроекте
метод ВидУведомленияВСтроку(ВидУведомления: ВидыУведомлений): Строка
    возврат СТРОКА_ПО_ВИД_УВЕДОМЛЕНИЯ[ВидУведомления]  
;

@ВПроекте
метод ВидУведомленияИзСтроки(ВидУведомленияСтрокой: Строка): ВидыУведомлений
    пер ВидУведомленияПоСтроке: Соответствие<Строка, ВидыУведомлений>
    для КлючИЗначение из СТРОКА_ПО_ВИД_УВЕДОМЛЕНИЯ
        ВидУведомленияПоСтроке.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ)
    ;
    возврат ВидУведомленияПоСтроке[ВидУведомленияСтрокой]  
;

@ВПроекте
метод СериализованнаяКоманда(КомандаНавигации: Строка): Строка
    возврат ПРЕФИКС_КОМАНДЫ + РАЗДЕЛИТЕЛЬ_СТРОКИ + КомандаНавигации
;

@ВПроекте
@НаСервере
метод УстановитьНастройкиУведомленийФизическогоЛица(ФизическоеЛицо: ФизическиеЛица.Ссылка, Настройки: НастройкиУведомленийФизическихЛиц)
    НастройкиУведомленийФизическихЛиц.УстановитьНастройки(ФизическоеЛицо, Настройки)
;

@ВПроекте
@НаСервере
метод УстановитьПредпочтительныйСпособУведомления(ФизическоеЛицо: ФизическиеЛица.Ссылка, ПредпочтительныйСпособУведомления: СпособыУведомления)
    НастройкиУведомленийФизическихЛиц.УстановитьПредпочтительныйСпособУведомления(ФизическоеЛицо, ПредпочтительныйСпособУведомления)
;

@ВПроекте
@НаСервере
метод УстановитьВремяПолученияУведомлений(ФизическоеЛицо: ФизическиеЛица.Ссылка, ВремяНачалаПолученияУведомлений: Время?, ВремяОкончанияПолученияУведомлений: Время?)
    НастройкиУведомленийФизическихЛиц.УстановитьВремяПолученияУведомлений(ФизическоеЛицо, ВремяНачалаПолученияУведомлений, ВремяОкончанияПолученияУведомлений)
;

@ВПроекте
@НаСервере
метод УстановитьТекущееСмещениеКлиента(ФизическоеЛицо: ФизическиеЛица.Ссылка, ТекущееСмещениеКлиента: Число)
    НастройкиУведомленийФизическихЛиц.УстановитьТекущееСмещениеКлиента(ФизическоеЛицо, ТекущееСмещениеКлиента)
;

@ВПроекте
@НаСервере
метод НастройкиУведомленийФизическогоЛица(ФизическоеЛицо: ФизическиеЛица.Ссылка): НастройкиУведомленийФизическихЛиц?
    возврат НастройкиУведомленийФизическихЛиц.Настройки([ФизическоеЛицо]).ПолучитьИлиУмолчание(ФизическоеЛицо)
;

@ВПроекте
@НаСервере
метод НастройкиУведомленийФизическихЛиц(ФизическиеЛица: ЧитаемаяКоллекция<ФизическиеЛица.Ссылка>): ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, НастройкиУведомленийФизическихЛиц>
    возврат НастройкиУведомленийФизическихЛиц.Настройки(ФизическиеЛица)
;

@ВПроекте
@НаСервере
метод ВключитьОтправкуSms(Настройки: Уведомления.НастройкиОтправкиSms? = Неопределено)
    пер НастройкиШлюза: ШлюзSms?
    если Настройки != Неопределено
        НастройкиШлюза = НастройкиШлюза(Настройки)
    иначе
        НастройкиШлюза = НастройкиШлюза()
    ;
    Уведомления.ЗаписатьСпособыУведомлений([СпособыУведомления.Sms])
    ПользователиСистемы.УстановитьШлюзSms(НастройкиШлюза)
;

@ВПроекте
@НаСервере
метод ОтключитьОтправкуSms()
    НастройкиУведомлений.Удалить(СпособыУведомления.Sms)
    НастройкиУведомленийФизическихЛиц.ЗаменитьПредпочтительныйСпособУведомления(СпособыУведомления.Sms, СпособыУведомления.Push)
    ПользователиСистемы.ОчиститьШлюзSms()
;

@ВПодсистеме
@НаСервере
метод НастройкиШлюза(): ШлюзSms
    пер Настройки = новый НастройкиОтправкиSms(
        ИдентификаторSmsGate = ИдентификаторыПриложения.ИдентификаторSmsGate(),
        НастройкиУчетнойЗаписи = УчетныеЗаписиОтправкиSMS.НастройкиУчетнойЗаписи()
    )
    возврат НастройкиШлюза(Настройки)
;

@ВПодсистеме
@НаСервере
метод НастройкиШлюза(ДанныеНастроек: Уведомления.НастройкиОтправкиSms): ШлюзSms
    знч Шлюз = новый ШлюзSms(
        ДанныеНастроек.НастройкиУчетнойЗаписи.Сервер + ДанныеНастроек.НастройкиУчетнойЗаписи.URLСервиса,
        ДанныеНастроек.ИдентификаторSmsGate
    )
    возврат Шлюз
;