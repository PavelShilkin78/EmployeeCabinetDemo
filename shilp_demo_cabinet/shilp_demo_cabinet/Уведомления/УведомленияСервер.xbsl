импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт СтандартноеПриложение

@ВПроекте
структура РезультатОтправкиУведомления
    обз пер Отправлено: Булево
    пер Описание: Строка
    пер ДатаОтправления: Момент
;

@ВПроекте
структура НастройкиПолученияУведомлений
    пер Начало: Время?
    пер Окончание: Время?
    пер СмещениеКлиента: Число
;

@ВПроекте
структура ДанныеУведомления
    пер ВидУведомления: Уведомления.ВидыУведомлений
    пер Документ: Сущность.Ключ?
    пер КомандаНавигации: Строка?
    пер ДанныеPush: Строка
;

@ВПроекте
структура ТекстыСообщений
    пер Тема: Строка
    пер ТекстSms: Строка
    пер ТекстPush: Строка
    пер ТекстEmail: Строка
;

//Область PUSHУведомления

@ВПроекте
метод СервисPushУведомленийДоступен(Идентификатор: Строка): Булево
    пер ИдентификаторПодписчика = новый ИдПодписчикаДоставляемыхУведомлений()
    ИдентификаторПодписчика.ИдПриложения = (новый Ууид()).ВСтроку()
    ИдентификаторПодписчика.ИдУстройства = (новый Ууид()).ВСтроку()    
    ИдентификаторПодписчика.ИспользоватьПесочницу = Истина
    пер Уведомление = новый ДоставляемоеУведомление()
    Уведомление.Триггер = новый ТриггерДоставляемыхУведомленийПоСпискуПолучателей([ИдентификаторПодписчика])
    Уведомление.Ид = (новый Ууид()).ВСтроку()
    Уведомление.Текст = ""
    пер РезультатОтправки = ОтправкаДоставляемыхУведомлений.Отправить(Уведомление, Идентификатор, Ложь)
    для Результат из РезультатОтправки.ПолучитьИнформациюОПроблемахОтправки()
        если Результат.ВидОшибки == ВидОшибкиОтправкиДоставляемогоУведомления.ОшибкаТелаУведомления
            возврат Истина
        ;
    ;
    возврат Ложь
;

@ВПроекте
метод ОтправитьPushУведомление(ФизическоеЛицо: ФизическиеЛица.Ссылка, ТекстСообщения: Строка, ВремяПолученияУведомлений: НастройкиПолученияУведомлений?, ДанныеУведомления: ДанныеУведомления): РезультатОтправкиУведомления
    пер РезультатОтправки: РезультатОтправкиУведомления?
    пер ВремяОтправления: Момент =  МенеджерДат.ТекущаяДатаВремя()
    знч ЗадержкаОтправкиСообщения = ЗадержкаОтправкиСообщения(ВремяПолученияУведомлений)
    пер ВидУведомленияСтрокой = Уведомления.ВидУведомленияВСтроку(ДанныеУведомления.ВидУведомления)
    если ЗадержкаОтправкиСообщения > 0
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        ЗапланированныеЗадания.Создать(&ОтправитьЗапланированноеPUSH, ФизическоеЛицо,
            ТекстСообщения, ДанныеУведомления.ДанныеPush, ВидУведомленияСтрокой)
            .Настроить(Задержка = Длительность.ИзСекунд(ЗадержкаОтправкиСообщения))
            .Запланировать()
        РезультатОтправки = новый РезультатОтправкиУведомления(Ложь, "Уведомление добавлено в очередь для отправки в заданное время", ВремяОтправления)
    иначе
        РезультатОтправки = ОтправитьPush(ФизическоеЛицо, ТекстСообщения, ДанныеУведомления.ДанныеPush, ВидУведомленияСтрокой)
    ;
    возврат РезультатОтправки        
;

@ВПроекте
метод ЗапланироватьPushУведомление(ФизическоеЛицо: ФизическиеЛица.Ссылка, ТекстСообщения: Строка, ВремяПолученияУведомлений: НастройкиПолученияУведомлений, ДанныеУведомления: ДанныеУведомления)
    знч ВремяНачалаПолученияУведомлений = ВремяПолученияУведомлений.Начало
    знч ВремяОкончанияПолученияУведомлений = ВремяПолученияУведомлений.Окончание
    пер ЗадержкаОтправкиСообщения: Число
    если ВремяНачалаПолученияУведомлений != Неопределено и ВремяОкончанияПолученияУведомлений != Неопределено
        ЗадержкаОтправкиСообщения = ЗадержкаОтправкиСообщения(ВремяПолученияУведомлений)
    ;
    пер ВидУведомленияСтрокой = Уведомления.ВидУведомленияВСтроку(ДанныеУведомления.ВидУведомления)
    если ЗадержкаОтправкиСообщения > 0
        ЗапланированныеЗадания
            .Создать(&ОтправитьЗапланированноеPUSH, ФизическоеЛицо, ТекстСообщения, ДанныеУведомления.ДанныеPush, ВидУведомленияСтрокой)
            .Настроить(Задержка = Длительность.ИзСекунд(ЗадержкаОтправкиСообщения))
            .Запланировать()
    иначе
        ЗапланированныеЗадания
            .Создать(&ОтправитьЗапланированноеPUSH, ФизическоеЛицо, ТекстСообщения, ДанныеУведомления.ДанныеPush, ВидУведомленияСтрокой)
            .Запланировать()
    ;
;

метод ОтправитьЗапланированноеPUSH(ФизическоеЛицо: ФизическиеЛица.Ссылка, 
                    ТекстСообщения: Строка, 
                    ДанныеPush: Строка, 
                    ВидУведомленияСтрокой: Строка)
    ОтправитьPush(ФизическоеЛицо, ТекстСообщения, ДанныеPush, ВидУведомленияСтрокой)
;

@ВПроекте
метод ОтправитьPush(ФизическоеЛицо: ФизическиеЛица.Ссылка, 
                    ТекстСообщения: Строка, 
                    ДанныеPush: Строка, 
                    ВидУведомленияСтрокой: Строка): РезультатОтправкиУведомления
    пер ИдентификаторыПодписчика: Массив<ИдПодписчикаДоставляемыхУведомлений> = УстройстваФизическихЛиц.ИдентификаторыПодписчика(ФизическоеЛицо)
    если ИдентификаторыПодписчика.Пусто()
        возврат новый РезультатОтправкиУведомления(Ложь, "Не зарегистрированы устройства получателя уведомления", МенеджерДат.ТекущаяДатаВремя())
    ;
    пер ЗапрашиваемыеДанные: ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц
    ЗапрашиваемыеДанные.ЛичныеДанные = Истина
    пер ДанныеФизлица = ФизЛица.ДанныеФизическогоЛица(ФизическоеЛицо, ЗапрашиваемыеДанные)
    пер ВидУведомления: Уведомления.ВидыУведомлений = Уведомления.ВидУведомленияИзСтроки(ВидУведомленияСтрокой)
    пер Триггер: ТриггерДоставляемыхУведомленийПоСпискуПолучателей = новый ТриггерДоставляемыхУведомленийПоСпискуПолучателей(ИдентификаторыПодписчика)
    пер Уведомление: ДоставляемоеУведомление = новый ДоставляемоеУведомление()
    пер ДанныеАутентификации: Соответствие<ВидПодписчикаДоставляемыхУведомлений, Строка | ПотокЧтения> | Строка = ""
    пер СертификатApns: ПотокЧтения?
    пер КлючCервисаFirebase: ПотокЧтения?
    пер КлючCервисаHms: ПотокЧтения?
    пер ИспользоватьПромежуточныйСервис: Булево
    пер Идентификаторы = Уведомления.Идентификаторы()
    если не Идентификаторы.ИдентификаторPushNotifications.Пусто()
        ДанныеАутентификации = Идентификаторы.ИдентификаторPushNotifications
        ИспользоватьПромежуточныйСервис = Истина
    иначе 
        ДанныеАутентификации = новый Соответствие<ВидПодписчикаДоставляемыхУведомлений, ПотокЧтения|Строка>()
        если Идентификаторы.СертификатApns != Неопределено и Идентификаторы.КлючCервисаFirebase != Неопределено
            СертификатApns = Идентификаторы.СертификатApns.Загрузить().ОткрытьПотокЧтения()
            КлючCервисаFirebase = Идентификаторы.КлючCервисаFirebase.Загрузить().ОткрытьПотокЧтения()
            (ДанныеАутентификации как Соответствие<ВидПодписчикаДоставляемыхУведомлений, ПотокЧтения|Строка>)
                .ВставитьВсе(
                    {
                        ВидПодписчикаДоставляемыхУведомлений.Apns: СертификатApns,
                        ВидПодписчикаДоставляемыхУведомлений.Fcm: КлючCервисаFirebase
                    })
        иначе
            Журналирование.ЗарегистрироватьОшибку("ИсключениеОтправкиPushУведомлений",
                Описание = "Отсутствует сертификат APNS или Fcm",
                Важность = ВажностьСобытияЖурналаСобытий.Высокая)
        ;
    
        если Идентификаторы.КлючCервисаHms != Неопределено
            КлючCервисаHms = Идентификаторы.КлючCервисаHms.Загрузить().ОткрытьПотокЧтения()
            (ДанныеАутентификации как Соответствие<ВидПодписчикаДоставляемыхУведомлений, ПотокЧтения|Строка>).Вставить(ВидПодписчикаДоставляемыхУведомлений.Hms, КлючCервисаHms)
        иначе
            Журналирование.ЗарегистрироватьОшибку("ИсключениеОтправкиPushУведомлений",
                Описание = "Отсутствует ключ сервиса HMS",
                Важность = ВажностьСобытияЖурналаСобытий.Высокая)
        ;
        если (ДанныеАутентификации как Соответствие<ВидПодписчикаДоставляемыхУведомлений, ПотокЧтения|Строка>).Пусто()
            выбросить новый ИсключениеВыполнения("Не заданы данные аутентификации для push-уведомлений")
        ;
    ;
    Уведомление.Текст = ТекстСообщения
    Уведомление.Триггер = Триггер
    Уведомление.Категория = КатегорияУведомления(ВидУведомления, ДанныеФизлица.ЛичныеДанные.Пол)
    Уведомление.Канал = КаналУведомления(ВидУведомления)
    Уведомление.Ид = (новый Ууид()).ВСтроку()
    Уведомление.Данные = ДанныеPush
    Уведомление.Видимость = ВидимостьДоставляемогоУведомления.Личное
    
    пер Результат: РезультатОтправкиДоставляемыхУведомлений = ОтправкаДоставляемыхУведомлений.Отправить(Уведомление, ДанныеАутентификации, ИспользоватьПромежуточныйСервис)
    если СертификатApns != Неопределено
        СертификатApns.Закрыть()
    ;
    если КлючCервисаFirebase != Неопределено
        КлючCервисаFirebase.Закрыть()
    ;
    если КлючCервисаHms != Неопределено
        КлючCервисаHms.Закрыть()
    ;
    пер ИсключенныеПолучатели: ЧитаемыйМассив<Строка> = Результат.ПолучитьИсключенныхПолучателей()
    УстройстваФизическихЛиц.УстановитьИспользованиеУстройств(ИсключенныеПолучатели, Ложь)
    пер ОшибкиОтправки: ЧитаемыйМассив<ИнформацияОПроблемеОтправкиДоставляемогоУведомления> = Результат.ПолучитьИнформациюОПроблемахОтправки()
    если ОшибкиОтправки.Пусто()
        возврат новый РезультатОтправкиУведомления(Истина, ДатаОтправления = МенеджерДат.ТекущаяДатаВремя())
    ;
    // Метод для отправки одного уведомления одному получателю, обрабатываем только одну ошибку отправки
    знч Ошибка: ИнформацияОПроблемеОтправкиДоставляемогоУведомления = ОшибкиОтправки.Первый()
    ЗарегистрироватьОшибку(Ошибка, ДанныеФизлица.ЛичныеДанные.ФИО, ИдентификаторыПодписчика, ТекстСообщения)
    возврат новый РезультатОтправкиУведомления(Ложь, ДатаОтправления = МенеджерДат.ТекущаяДатаВремя())
;

метод ЗарегистрироватьОшибку(Ошибка: ИнформацияОПроблемеОтправкиДоставляемогоУведомления, ФизлицоФИО: ФизЛица.ФИО,
        ИдентификаторыПодписчика: ЧитаемыйМассив<ИдПодписчикаДоставляемыхУведомлений>, ТекстУведомления: Строка)
        
    новый ОшибкаОтправкиPush(
        ТипОшибки = "${Ошибка.ВидОшибки}",
        Описание = Ошибка.Описание,
        ФизическоеЛицо = ФизлицоФИО.ПредставлениеИмени(),
        Получатели = ПредставлениеИдПодписчиков(Ошибка.Получатели),
        ИдентификаторыПодписчика = ПредставлениеИдПодписчиков(ИдентификаторыПодписчика),
        ТекстУведомления = ТекстУведомления   
    ).Записать()    
;

метод ПредставлениеИдПодписчика(ИдПодписчика: ИдПодписчикаДоставляемыхУведомлений): Строка
    возврат "{${ИдПодписчика.ВидПодписчика},%{ИдПодписчика.ИдПриложения},%{ИдПодписчика.ИдПриложения},${ИдПодписчика.ИспользоватьПесочницу}}"    
;

метод ПредставлениеИдПодписчиков(ИдПодписчиков: ЧитаемаяКоллекция<ИдПодписчикаДоставляемыхУведомлений>): Строка
    возврат ИдПодписчиков.Преобразовать(П->ПредставлениеИдПодписчика(П)).Соединить(",")    
;

метод КатегорияУведомления(ВидУведомления: Уведомления.ВидыУведомлений, ПолПолучателя: ПолФизическогоЛица): Строка
    пер КатегорияУведомления: Строка
    выбор ВидУведомления
    когда ОбщаяИнформация
    когда ПерсональнаяИнформация
    когда ОзнакомлениеПодПодпись
        выбор ПолПолучателя
        когда Мужской
            КатегорияУведомления = PushУведомления.ИД_КАТЕГОРИИ_ОЗНАКОМИЛСЯ
        когда Женский
            КатегорияУведомления = PushУведомления.ИД_КАТЕГОРИИ_ОЗНАКОМИЛАСЬ
        ; 
    когда Согласование
        КатегорияУведомления = PushУведомления.ИД_КАТЕГОРИИ_СОГЛАСОВАНИЕ
    ;
    возврат КатегорияУведомления
;

метод КаналУведомления(ВидУведомления: Уведомления.ВидыУведомлений): Строка
    пер КаналУведомления: Строка
    выбор ВидУведомления
    когда Уведомления.ВидыУведомлений.ОбщаяИнформация
        КаналУведомления = PushУведомления.ИД_КАНАЛА_ИНФОРМАЦИЯ
    когда Уведомления.ВидыУведомлений.Согласование
        КаналУведомления = PushУведомления.ИД_КАНАЛА_СОГЛАСОВАНИЕ
    когда Уведомления.ВидыУведомлений.ПерсональнаяИнформация
        КаналУведомления = PushУведомления.ИД_КАНАЛА_НАПОМИНАНИЕ
    когда Уведомления.ВидыУведомлений.ОзнакомлениеПодПодпись
        КаналУведомления = PushУведомления.ИД_КАНАЛА_ОЗНАКОМЛЕНИЕ
    ;
    возврат КаналУведомления
;

//КонецОбласти

//Область ЭлектроннаяПочта

@ВПроекте
метод ОтправитьEMailУведомление(ФизическоеЛицо: ФизическиеЛица.Ссылка, Тема: Строка, ТекстСообщения: Строка, ДанныеФизическогоЛица: ФизЛица.ДанныеФизлица? = Неопределено): РезультатОтправкиУведомления
    если ДанныеФизическогоЛица == Неопределено
        пер ЗапрашиваемыеДанные: ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц
        ЗапрашиваемыеДанные.ЛичныеДанные = Истина
        ЗапрашиваемыеДанные.РабочаяКонтактнаяИнформация = Истина
        ДанныеФизическогоЛица = ФизЛица.ДанныеФизическогоЛица(ФизическоеЛицо, ЗапрашиваемыеДанные)
    ;
    знч Имя: Строка = ДанныеФизическогоЛица.ЛичныеДанные.ФИО.ПредставлениеИмени(ФизЛица.ВариантПредставленияИмени.ФамилияИОРаздельно)
    пер Результат = Уведомления.ОтправитьEMail(
        Имя,
        ДанныеФизическогоЛица.РабочаяКонтактнаяИнформация.ЭлектроннаяПочта,
        Тема,
        ТекстСообщения
    )
    возврат РезультатОтправкиУведомления(Результат)        
;

метод ОтправитьEMail(АдресатИмя: Строка, АдресатПочта: Строка, ТемаПисьма: Строка, Сообщение: Строка)
    Уведомления.ОтправитьEMail(АдресатИмя, АдресатПочта, ТемаПисьма, Сообщение)
;

@ВПроекте
метод ЗапланироватьEMailУведомление(ФизическоеЛицо: ФизическиеЛица.Ссылка, Тема: Строка, ТекстСообщения: Строка, ДанныеФизическогоЛица: ФизЛица.ДанныеФизлица? = Неопределено)
    если ДанныеФизическогоЛица == Неопределено
        пер ЗапрашиваемыеДанные: ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц
        ЗапрашиваемыеДанные.ЛичныеДанные = Истина
        ЗапрашиваемыеДанные.РабочаяКонтактнаяИнформация = Истина
        ДанныеФизическогоЛица = ФизЛица.ДанныеФизическогоЛица(ФизическоеЛицо, ЗапрашиваемыеДанные)
    ;
    знч Имя: Строка = ДанныеФизическогоЛица.ЛичныеДанные.ФИО.ПредставлениеИмени(ФизЛица.ВариантПредставленияИмени.ФамилияИОРаздельно)
    ЗапланированныеЗадания
        .Создать<Строка, Строка, Строка, Строка>( 
            &ОтправитьEMail,
            Имя, 
            ДанныеФизическогоЛица.РабочаяКонтактнаяИнформация.ЭлектроннаяПочта, 
            Тема, 
            ТекстСообщения)
        .Запланировать()
;

//КонецОбласти

//Область СМС

@ВПроекте
@НаСервере
метод СервисОтправкиSmsДоступен(УчетнаяЗаписьSms: Уведомления.НастройкиУчетнойЗаписиОтправкиSms): Булево
    знч UrlСервиса = УчетнаяЗаписьSms.Сервер + УчетнаяЗаписьSms.URLСервиса + "/"
    пер Запрос = СоединениеHttp.Клиент().СБазовымUrl(UrlСервиса).ЗапросGet("providers")
    исп Ответ = Запрос.Выполнить()
    знч КодСостояния = Ответ.КодСостояния
    если КодСостояния != 200 и КодСостояния != 201 и КодСостояния != 204
        пер ТекстОшибки = 
        "Ошибка обращения к сервису отправки sms по адресу \"%{UrlСервиса}\" получен код состояния %{КодСостояния}\н
        Ответ от сервиса: ${Ответ.Тело.ПрочитатьКакСтроку()}"
        Журналирование.ЗарегистрироватьОшибку("ДоступКВнешнимСервисам", Описание = ТекстОшибки, Важность = ВажностьСобытияЖурналаСобытий.Высокая)
        возврат Ложь
    ;
    возврат Истина
;

@ВПроекте
метод ОтправитьSmsУведомление(ФизическоеЛицо: ФизическиеЛица.Ссылка, ТекстСообщения: Строка, ВремяПолученияУведомлений: НастройкиПолученияУведомлений?, ДанныеФизическогоЛица: ФизЛица.ДанныеФизлица? = Неопределено): РезультатОтправкиУведомления
    если ДанныеФизическогоЛица == Неопределено
        пер ЗапрашиваемыеДанные: ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц
        ЗапрашиваемыеДанные.РабочаяКонтактнаяИнформация = Истина
        ДанныеФизическогоЛица = ФизЛица.ДанныеФизическогоЛица(ФизическоеЛицо, ЗапрашиваемыеДанные)
    ;
    знч ЗадержкаОтправкиСообщения = ЗадержкаОтправкиСообщения(ВремяПолученияУведомлений)
    пер Результат: Уведомления.РезультатОтправкиСообщения = Уведомления.ОтправитьSMS(
        ДанныеФизическогоЛица.РабочаяКонтактнаяИнформация.МобильныйТелефон,
        ТекстСообщения,
        Длительность.ИзСекунд(ЗадержкаОтправкиСообщения))    
    возврат РезультатОтправкиУведомления(Результат)
;

метод ОтправитьSMS(ТелефонПолучателя: Строка, Текст: Строка, Задержка: Длительность)
    Уведомления.ОтправитьSMS(ТелефонПолучателя, Текст, Задержка)
;

@ВПроекте
метод ЗапланироватьSmsУведомление(ФизическоеЛицо: ФизическиеЛица.Ссылка, ТекстСообщения: Строка, ВремяПолученияУведомлений: НастройкиПолученияУведомлений, ДанныеФизическогоЛица: ФизЛица.ДанныеФизлица? = Неопределено)
    если ДанныеФизическогоЛица == Неопределено
        пер ЗапрашиваемыеДанные: ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц
        ЗапрашиваемыеДанные.РабочаяКонтактнаяИнформация = Истина
        ДанныеФизическогоЛица = ФизЛица.ДанныеФизическогоЛица(ФизическоеЛицо, ЗапрашиваемыеДанные)
    ;
    пер ЗадержкаОтправкиСообщения = ЗадержкаОтправкиСообщения(ВремяПолученияУведомлений)
    
    ЗапланированныеЗадания
        .Создать<Строка, Строка, Длительность>(
            &ОтправитьSMS,
            ДанныеФизическогоЛица.РабочаяКонтактнаяИнформация.МобильныйТелефон, 
            ТекстСообщения, 
            Длительность.ИзСекунд(ЗадержкаОтправкиСообщения))
        .Запланировать()
;

//КонецОбласти

метод РезультатОтправкиУведомления(РезультатОтправкиСообщения: Уведомления.РезультатОтправкиСообщения): РезультатОтправкиУведомления
    выбор РезультатОтправкиСообщения.Статус
    когда Уведомления.СтатусыОтправкиСообщений.Отправлено
        возврат новый РезультатОтправкиУведомления(Истина, "Уведомление отправлено", РезультатОтправкиСообщения.ДатаОтправки)    
    когда Уведомления.СтатусыОтправкиСообщений.ОшибкаОтправки
        возврат новый РезультатОтправкиУведомления(Ложь, РезультатОтправкиСообщения.ПредставлениеРезультата, Момент.Сейчас())   
    когда Уведомления.СтатусыОтправкиСообщений.ОтправкаЗапланирована
        возврат новый РезультатОтправкиУведомления(Ложь, РезультатОтправкиСообщения.ПредставлениеРезультата, Момент.Сейчас())  
    иначе
        возврат новый РезультатОтправкиУведомления(Ложь, "Получен неизвестный статус отправки сообщения", Момент.Сейчас())     
    ;
;

метод ЗадержкаОтправкиСообщения(ВремяПолученияУведомлений: НастройкиПолученияУведомлений?): Число
    если ВремяПолученияУведомлений == Неопределено
        возврат 0
    ;
    
    пер ЗадержкаОтправкиСообщения: Число
    пер ЧасовойПоясКлиента: ЧасовойПояс = МенеджерДат.ЧасовойПоясПоСмещению(ВремяПолученияУведомлений.СмещениеКлиента) 
    пер Сейчас: Время = Время.Сейчас(ЧасовойПоясКлиента)
    если ВремяПолученияУведомлений.Начало < ВремяПолученияУведомлений.Окончание
        если Сейчас < ВремяПолученияУведомлений.Начало
            ЗадержкаОтправкиСообщения = (ВремяПолученияУведомлений.Начало - Сейчас).ВСекундах()
        иначе если Сейчас > ВремяПолученияУведомлений.Окончание
            ЗадержкаОтправкиСообщения = (1д + (ВремяПолученияУведомлений.Начало - Сейчас)).ВСекундах()
        ;
    иначе
        если Сейчас < ВремяПолученияУведомлений.Начало и Сейчас > ВремяПолученияУведомлений.Окончание
            ЗадержкаОтправкиСообщения = (ВремяПолученияУведомлений.Начало - Сейчас).ВСекундах()
        ;
    ;    
    возврат ЗадержкаОтправкиСообщения
;

@ВПроекте
метод ОтправитьУведомление(ФизическоеЛицо: ФизическиеЛица.Ссылка?, ТекстыУведомлений: ТекстыСообщений, ДанныеУведомления: ДанныеУведомления): РезультатОтправкиУведомления
    если ФизическоеЛицо == Неопределено
        возврат новый РезультатОтправкиУведомления(Ложь, "Не задан получатель", МенеджерДат.ТекущаяДатаВремя())
    ;
    пер РезультатОтправки: РезультатОтправкиУведомления?
    если ДанныеУведомления.Документ != Неопределено
        ДанныеУведомления.ДанныеPush = МенеджерСущности.СсылкаВJson(ДанныеУведомления.Документ)
    иначе
        ДанныеУведомления.ДанныеPush = Уведомления.СериализованнаяКоманда(ДанныеУведомления.КомандаНавигации)
    ;
        
    пер ЗапрашиваемыеДанные: ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц
    ЗапрашиваемыеДанные.ЛичныеДанные = Истина
    ЗапрашиваемыеДанные.РабочаяКонтактнаяИнформация = Истина
    пер ДанныеФизлица = ФизЛица.ДанныеФизическогоЛица(ФизическоеЛицо, ЗапрашиваемыеДанные)
    
    пер ПараметрыПолученияУведомлений = Уведомления.НастройкиУведомленийФизическогоЛица(ФизическоеЛицо)
    пер ПредпочтительныйСпособУведмоления: СпособыУведомления
    если ПараметрыПолученияУведомлений != Неопределено
        ПредпочтительныйСпособУведмоления = ПараметрыПолученияУведомлений.ПредпочтительныйСпособУведомления
    ;
    выбор ПредпочтительныйСпособУведмоления
    когда Push
        РезультатОтправки = ОтправитьPushУведомление(ФизическоеЛицо!, ТекстыУведомлений.ТекстPush, ВремяПолученияУведомлений(ПараметрыПолученияУведомлений), ДанныеУведомления)
    когда EMail
        РезультатОтправки = ОтправитьEMailУведомление(ФизическоеЛицо!, ТекстыУведомлений.Тема, ТекстыУведомлений.ТекстEmail, ДанныеФизлица)
    когда Sms
        РезультатОтправки = ОтправитьSmsУведомление(ФизическоеЛицо!, ТекстыУведомлений.ТекстSms, ВремяПолученияУведомлений(ПараметрыПолученияУведомлений), ДанныеФизлица)
    иначе
        РезультатОтправки = новый РезультатОтправкиУведомления(Ложь, "Уведомления отключены", МенеджерДат.ТекущаяДатаВремя())
    ;
    возврат РезультатОтправки        
;

@ВПроекте
метод ЗапланироватьУведомление(ФизическоеЛицо: ФизическиеЛица.Ссылка?, ТекстыУведомлений: ТекстыСообщений, ДанныеУведомления: ДанныеУведомления)
    если ФизическоеЛицо == Неопределено
        возврат
    ;
    если ДанныеУведомления.Документ != Неопределено
        ДанныеУведомления.ДанныеPush = МенеджерСущности.СсылкаВJson(ДанныеУведомления.Документ)
    иначе
        ДанныеУведомления.ДанныеPush = Уведомления.СериализованнаяКоманда(ДанныеУведомления.КомандаНавигации)
    ;
        
    пер ЗапрашиваемыеДанные: ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц
    ЗапрашиваемыеДанные.ЛичныеДанные = Истина
    ЗапрашиваемыеДанные.РабочаяКонтактнаяИнформация = Истина
    пер ДанныеФизлица = ФизЛица.ДанныеФизическогоЛица(ФизическоеЛицо, ЗапрашиваемыеДанные)
    
    пер ПараметрыПолученияУведомлений = Уведомления.НастройкиУведомленийФизическогоЛица(ФизическоеЛицо)
    пер ПредпочтительныйСпособУведмоления: СпособыУведомления
    если ПараметрыПолученияУведомлений != Неопределено
        ПредпочтительныйСпособУведмоления = ПараметрыПолученияУведомлений.ПредпочтительныйСпособУведомления
    ;
    выбор ПредпочтительныйСпособУведмоления
    когда Push
        ЗапланироватьPushУведомление(ФизическоеЛицо!, ТекстыУведомлений.ТекстPush, ВремяПолученияУведомлений(ПараметрыПолученияУведомлений), ДанныеУведомления)
    когда EMail
        ЗапланироватьEMailУведомление(ФизическоеЛицо!, ТекстыУведомлений.Тема, ТекстыУведомлений.ТекстEmail, ДанныеФизлица)
    когда Sms
        ЗапланироватьSmsУведомление(ФизическоеЛицо!, ТекстыУведомлений.ТекстSms, ВремяПолученияУведомлений(ПараметрыПолученияУведомлений), ДанныеФизлица)
    ;      
;

метод ВремяПолученияУведомлений(ПараметрыПолученияУведомлений: Уведомления.НастройкиУведомленийФизическихЛиц?): НастройкиПолученияУведомлений?
    если ПараметрыПолученияУведомлений == Неопределено
        возврат Неопределено
    ;
    
    знч НастройкиУведомлений = Уведомления.НастройкиУведомлений(ПараметрыПолученияУведомлений.ПредпочтительныйСпособУведомления)
    если НастройкиУведомлений == Неопределено
        возврат Неопределено
    ;
    
    знч ВремяПолученияУведомленийПриложения = НастройкиУведомлений!.ВремяПолученияУведомлений
    пер ВремяПолученияУведомлений = новый НастройкиПолученияУведомлений(
        ВремяПолученияУведомленийПриложения.От, ВремяПолученияУведомленийПриложения.До, МенеджерДат.ТекущееСмещениеВМинутах())
        
    ВремяПолученияУведомлений.СмещениеКлиента = ПараметрыПолученияУведомлений.ТекущееСмещениеКлиента
    если ПараметрыПолученияУведомлений.ВремяНачалаПолученияУведомлений != Неопределено
        и ПараметрыПолученияУведомлений.ВремяОкончанияПолученияУведомлений != Неопределено
        
        ВремяПолученияУведомлений.Начало = ПараметрыПолученияУведомлений.ВремяНачалаПолученияУведомлений
        ВремяПолученияУведомлений.Окончание = ПараметрыПолученияУведомлений.ВремяОкончанияПолученияУведомлений
    ;
    возврат ВремяПолученияУведомлений
;

@ВПроекте
метод ОтправитьУведомления(ФизическиеЛица: Массив<ФизическиеЛица.Ссылка>, ТекстыУведомлений: УведомленияСервер.ТекстыСообщений, ДанныеУведомления: УведомленияСервер.ДанныеУведомления)
    для ФизическоеЛицо из ФизическиеЛица
        ОтправитьУведомление(ФизическоеЛицо, ТекстыУведомлений, ДанныеУведомления)
    ;
;
