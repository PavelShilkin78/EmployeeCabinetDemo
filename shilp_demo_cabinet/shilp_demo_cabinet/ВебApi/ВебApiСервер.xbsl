импорт ОбщиеСтандартные
импорт СтандартноеПриложение

@ВПроекте
исключение ИсключениеИсполненияКонтракта
;

@ВПроекте
структура ВерсияApi
    обз знч apiVersion: Строка
    обз знч formatVersion: Строка
;

@ВПроекте
структура ИнструментыМенеджераОбъекта
    пер ЗаписьОбъекта: ((Сущность.Объект) -> ничто)?
    пер ИдЗагруженногоФайла: ((Строка) -> Строка)?
;

@ВПроекте
структура СервисыУпаковкиJson
    обз знч ПолучитьИдентификатор: (ВходящиеДанные.Ссылка)->Строка
    обз знч ПолучитьИдентификаторы: (ЧитаемаяКоллекция<ВходящиеДанные.Ссылка>)->ЧитаемоеСоответствие<ВходящиеДанные.Ссылка, Строка>
    пер ПолучитьВерсию: ((ИсходящиеДанные.Ссылка) -> Число)?
    пер ПолучитьХарактерИзменения: ((ИсходящиеДанные.Ссылка) -> Объект)?
    пер ПолучитьИдФайла: ((Объект) -> Строка)?
;

@ВПроекте
структура ПараметрыЗаписиВходящихДанных
    обз знч Объект: ВходящиеДанные.Объект
    обз знч Идентификатор: Строка
    знч ЗависимыйОбъект: ВходящиеДанные.Ссылка?
;

@ВПроекте
структура ЗаданиеМодификации
    обз знч Обработка: (Объект, СервисыЗагрузкиJson) -> ничто
    знч ПриОкончанииОбработки: ((ЧитаемыйМассив<ВходящиеДанные.Ссылка>) -> ничто)?
;

@ВПроекте
структура ВнешняяСсылка
    обз знч Идентификатор: Строка
    обз знч НоваяСсылкаОбъекта: (Ууид) -> ВходящиеДанные.Ссылка
;

@ВПроекте
структура ПроверкаФорматаОбмена
    обз пер ФорматОбмена: Версия?
    обз пер НеПоддерживаемыйТипДанных: Булево
;

@ВПроекте
структура ОбъектОтложенногоОбновления
    обз знч МоментЗагрузки: Момент
    обз знч ОбновляемыйОбъект: ВходящиеДанные.Ссылка?
    обз знч ТипОбновляемогоОбъекта: Тип?
    обз знч Отправитель: Отправитель.Ссылка?
    обз знч ЗависимыйОбъект: ВходящиеДанные.Ссылка?
    обз знч КлючОперации: Строка
;

@ВПроекте
метод СервисыЗагрузкиJson(): СервисыЗагрузкиJson
    знч КешСсылок: Соответствие<Строка, ВходящиеДанные.Ссылка>
    знч ПолучитьСсылку = метод(ВнешняяСсылка: ВебApiСервер.ВнешняяСсылка)
        -> возврат СоответствиеИдентификаторов.ПолучитьСсылки([ВнешняяСсылка], КешСсылок)[ВнешняяСсылка.Идентификатор]
    ;
    знч ПолучитьСсылки = метод(ВнешниеСсылки: ЧитаемаяКоллекция<ВебApiСервер.ВнешняяСсылка>)
        -> возврат СоответствиеИдентификаторов.ПолучитьСсылки(ВнешниеСсылки, КешСсылок)
    ;
    возврат новый СервисыЗагрузкиJson(ПолучитьСсылку = ПолучитьСсылку, ПолучитьСсылки = ПолучитьСсылки)
;

метод ПоддерживаемыеВерсииОбмена(): Множество<Версия>
    возврат ПриложениеОбменСервис.ПолучитьСервис().ПоддерживаемыеВерсииОбмена()
;

@ВПроекте
метод ЗагрузитьГруппыОбъектов(ЗапросHttp: HttpСервисЗапрос, ВерсияФорматаОбмена: Версия? = Неопределено)
    
    попытка
        // проверяем инфосистему
        пер Отправитель: Отправитель.Ссылка?
        Отправитель = ОбменДаннымиСервис.ПолучитьСервис().Отправитель()
        пер РезультатыЗагрузкиДанных = ЗагрузитьГруппыОбъектовОбщая(ЗапросHttp, Отправитель, Ложь, ВерсияФорматаОбмена)
        если РезультатыЗагрузкиДанных.returnObjectID
            СервисыHttp.УпаковатьДанныеJson(ЗапросHttp, РезультатыЗагрузкиДанных)
        иначе если не РезультатыЗагрузкиДанных.errors.Пусто()
            СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, СервисыHttp.КодыСостояний.ОшибкаЗапроса_400)
            СервисыHttp.УпаковатьДанныеJson(ЗапросHttp, РезультатыЗагрузкиДанных)
        ;
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
    ;
;

@ВПроекте
метод ЗагрузитьГруппыОбъектов(ОтветHttp: ОтветHttp, Отправитель: Отправитель.Ссылка, ВерсияФорматаОбмена: Версия? = Неопределено): Булево
    пер Результат: Булево
    попытка
        пер РезультатыЗагрузкиДанных = ЗагрузитьГруппыОбъектовОбщая(ОтветHttp, Отправитель, Истина, ВерсияФорматаОбмена)
        Результат = РезультатыЗагрузкиДанных.errors.Пусто()
    поймать Ошибка: Исключение
        Журналирование.ЗарегистрироватьОшибку(Ошибка)
    ;
    возврат Результат
;

@ВПроекте
метод ЗагрузитьГруппыОбъектовОбщая(ЗапросHttp: HttpСервисЗапрос| ОтветHttp, Отправитель: Отправитель.Ссылка, ЗапрашиватьВложенныеФайлы: Булево, ВерсияФорматаОбмена: Версия? = Неопределено): ЗагрузкаОбъектов.РезультатЗагрузкиДанныхJson

    // преобразуем Json
    знч ТипГруппыКоллекцийДанныхJson = ПриложениеОбменСервис.ПолучитьСервис().ТипГруппыКоллекцийДанныхJson(ВерсияФорматаОбмена)
    пер ГруппыКоллекцийДанныхJson: неизвестно
    если ЗапросHttp это HttpСервисЗапрос
        ГруппыКоллекцийДанныхJson = СервисыHttp.ИзвлечьДанныеJson(ЗапросHttp как HttpСервисЗапрос, ТипГруппыКоллекцийДанныхJson)
    иначе
        ГруппыКоллекцийДанныхJson = СервисыHttp.ИзвлечьДанныеJson(ЗапросHttp как ОтветHttp, ТипГруппыКоллекцийДанныхJson)
        (ЗапросHttp как ОтветHttp).Закрыть()
    ;
    ЗарегистрироватьПолучениеДанных(Отправитель, ВерсияФорматаОбмена, ГруппыКоллекцийДанныхJson)
    знч ТипыОбъектовИКоллекцийДанныхJson = ПриложениеОбменСервис.ПолучитьСервис().ТипыОбъектовИКоллекцийДанныхJson(ГруппыКоллекцийДанныхJson)
    пер Версия: Число = ГруппыКоллекцийДанныхJson.version
    МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
    исп ГрупповаяОперация.Начать(РежимЗагрузкиДанных = Истина)
    пер РезультатыЗагрузкиДанных = новый ЗагрузкаОбъектов.РезультатЗагрузкиДанныхJson()
    для КоллекцияДанныхJson из ТипыОбъектовИКоллекцийДанныхJson
        если КоллекцияДанныхJson.Значение != Неопределено
            пер ИнструментыМенеджераОбъекта = ИнструментыМенеджераОбъекта(КоллекцияДанныхJson.Ключ)
            если ЗапрашиватьВложенныеФайлы
                ИнструментыМенеджераОбъекта.ИдЗагруженногоФайла = &ИдВложенногоФайла
            ;
            знч ТипДанныхJson = ТипДанныхJson(КоллекцияДанныхJson.Ключ, ВерсияФорматаОбмена)
            РезультатыЗагрузкиДанных = ЗагрузкаОбъектов.ЗагрузитьДанные(КоллекцияДанныхJson.Значение как ЧитаемаяКоллекция<Объект>, Неопределено, КоллекцияДанныхJson.Ключ, 
                Отправитель, ТипДанныхJson, ИнструментыМенеджераОбъекта)
        ;
    ;
    если РезультатыЗагрузкиДанных.errors.Пусто()
        ПриложениеОбменСервис.ПолучитьСервис().ОбновитьНомерУспешнойЗагруженнойВерсии(Версия, Отправитель)
    ;
    возврат РезультатыЗагрузкиДанных
;

@ВПроекте
метод ЗарегистрироватьОтправкуДанных(Получатель: Отправитель.Ссылка, ВерсияФормата: Версия, Данные: Объект)
    новый ОбменДанными(
        Получатель = "$Получатель",
        ВерсияФормата = "$ВерсияФормата",
        Данные = "%Данные"
    ).Записать()       
;

@ВПроекте
метод ЗарегистрироватьПолучениеДанных(Отправитель: Отправитель.Ссылка, ВерсияФормата: Версия, Данные: Объект)
    новый ОбменДанными(
        Отправитель = "$Отправитель",
        ВерсияФормата = "$ВерсияФормата",
        Данные = "%Данные"
    ).Записать()           
;

@ВПроекте
метод ЗагрузитьОбъекты(ЗапросHttp: HttpСервисЗапрос, ТипОбъекта: Тип, 
    ИнструментыМенеджераОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта, ВерсияФорматаОбмена: Версия? = Неопределено)
    
    // проверяем инфосистему
    пер Отправитель: Отправитель.Ссылка?
    попытка
        Отправитель = ОбменДаннымиСервис.ПолучитьСервис().Отправитель()
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
        возврат
    ;

    // преобразуем Json
    попытка
        знч ТипКоллекцииДанныхJson = ТипКоллекцииДанныхJson(ТипОбъекта, ВерсияФорматаОбмена)
        знч ТипДанныхJson = ТипДанныхJson(ТипОбъекта, ВерсияФорматаОбмена)
        знч КоллекцияДанныхJson = СервисыHttp.ИзвлечьДанныеJson(ЗапросHttp, ТипКоллекцииДанныхJson)
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        исп ГрупповаяОперация.Начать(РежимЗагрузкиДанных = Истина)
        знч РезультатЗагрузкиДанныхJson = ЗагрузкаОбъектов.ЗагрузитьДанные(КоллекцияДанныхJson как ЧитаемаяКоллекция<Объект>, Неопределено, ТипОбъекта, 
            Отправитель, ТипДанныхJson, ИнструментыМенеджераОбъекта)

        если РезультатЗагрузкиДанныхJson.returnObjectID
            СервисыHttp.УпаковатьДанныеJson(ЗапросHttp, РезультатЗагрузкиДанныхJson)
        иначе если не РезультатЗагрузкиДанныхJson.errors.Пусто()
            СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, СервисыHttp.КодыСостояний.ОшибкаЗапроса_400)
            СервисыHttp.УпаковатьДанныеJson(ЗапросHttp, РезультатЗагрузкиДанныхJson)
        ;
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
    ;
;

@ВПроекте
метод ЗагрузитьОбъект(ЗапросHttp: HttpСервисЗапрос, ТипОбъекта: Тип, ОжидаемыеПараметры: ЧитаемаяКоллекция<СервисыHttp.ОжидаемыйПараметр>, 
    ИнструментыМенеджераОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта, ВерсияФорматаОбмена: Версия? = Неопределено)

    // проверяем инфосистему
    пер Отправитель: Отправитель.Ссылка?
    попытка
        Отправитель = ОбменДаннымиСервис.ПолучитьСервис().Отправитель()
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
        возврат
    ;

    попытка 
        знч ПараметрыЗапроса = СервисыHttp.ПараметрыЗапроса(ЗапросHttp, ОжидаемыеПараметры)
        знч ТипДанныхJson = ТипДанныхJson(ТипОбъекта, ВерсияФорматаОбмена)
        знч ДанныеJson = СервисыHttp.ИзвлечьДанныеJson(ЗапросHttp, ТипДанныхJson)
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        исп ГрупповаяОперация.Начать(РежимЗагрузкиДанных = Истина)
        ЗагрузкаОбъектов.ЗагрузитьДанные([ДанныеJson], ПараметрыЗапроса, ТипОбъекта, Отправитель, ТипДанныхJson, ИнструментыМенеджераОбъекта)
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
    ;
;

@ВПроекте
метод ЗагрузитьОбъект(ЗапросHttp: HttpСервисЗапрос, ТипОбъекта: Тип, 
    ИнструментыМенеджераОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта, ВерсияФорматаОбмена: Версия?)
    
    // проверяем инфосистему
    пер Отправитель: Отправитель.Ссылка?
    попытка
        Отправитель = ОбменДаннымиСервис.ПолучитьСервис().Отправитель()
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
        возврат
    ;

    // преобразуем Json
    попытка
        знч ТипДанныхJson = ТипДанныхJson(ТипОбъекта, ВерсияФорматаОбмена)
        знч ДанныеJson = СервисыHttp.ИзвлечьДанныеJson(ЗапросHttp, ТипДанныхJson)
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        исп ГрупповаяОперация.Начать(РежимЗагрузкиДанных = Истина)
        ЗагрузкаОбъектов.ЗагрузитьДанные([ДанныеJson], Неопределено, ТипОбъекта, Отправитель, ТипДанныхJson, ИнструментыМенеджераОбъекта)
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
    ;
;

@ВПроекте
метод ИзменитьОбъект(ЗапросHttp: HttpСервисЗапрос, ТипОбъекта: Тип, ТипПараметра: Тип, ЗаданиеМодификации: ЗаданиеМодификации, 
    ИнструментыМенеджераОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта)

    // проверяем инфосистему
    пер Отправитель: Отправитель.Ссылка?
    попытка
        Отправитель = ОбменДаннымиСервис.ПолучитьСервис().Отправитель()
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
        возврат
    ;

    // преобразуем Json
    попытка
        знч КоллекцияДанныхJson = СервисыHttp.ИзвлечьДанныеJson(ЗапросHttp, ТипПараметра)
        исп ГрупповаяОперация.Начать(РежимЗагрузкиДанных = Истина)
        ЗагрузкаОбъектов.ИзменитьДанные(КоллекцияДанныхJson, ТипОбъекта, Отправитель, ЗаданиеМодификации, ИнструментыМенеджераОбъекта)
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
    ;
;

@ВПроекте
метод ПолучитьОбъектыПоФильтру(ЗапросHttp: HttpСервисЗапрос, ТипОбъекта: Тип, Фильтр: () -> ЧитаемыйМассив<Справочник.Ссылка>)
    
    // проверяем инфосистему
    пер Отправитель: Объект?
    попытка
        Отправитель = ОбменДаннымиСервис.ПолучитьСервис().Отправитель()
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
        возврат
    ;

    знч ВходящиеДанные = ВходящиеДанныеПоСсылкам(МассивСсылокПоФильтру(ТипОбъекта, Фильтр))
    знч КешСсылок: Соответствие<ВходящиеДанные.Ссылка, Строка>
    знч Идентификаторы = СоответствиеИдентификаторов.ПолучитьИдентификаторы(ВходящиеДанные, КешСсылок)
    знч МассивИдентификаторов: Массив<Строка>
    для КлючЗначение из Идентификаторы
        МассивИдентификаторов.Добавить(КлючЗначение.Значение)
    ;
    попытка
        СервисыHttp.УпаковатьДанныеJson(ЗапросHttp, МассивИдентификаторов)
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
    ;
;

метод ВходящиеДанныеПоСсылкам(Ссылки: ЧитаемыйМассив<Справочник.Ссылка>): ЧитаемыйМассив<ВходящиеДанные.Ссылка>
    знч ВходящиеДанные: Массив<ВходящиеДанные.Ссылка>
    для Ссылка из Ссылки
        ВходящиеДанные.Добавить(Ссылка как ВходящиеДанные.Ссылка)
    ;
    возврат ВходящиеДанные
;

@ВПроекте
метод СоздатьОбъект(ЗапросHttp: HttpСервисЗапрос, ТипОбъекта: Тип, ВерсияФорматаОбмена: Версия?)
    
    // преобразуем Json
    попытка
        знч ДанныеJson = СервисыHttp.ИзвлечьДанныеJson(ЗапросHttp, ТипДанныхJson(ТипОбъекта, ВерсияФорматаОбмена))
        исп ГрупповаяОперация.Начать(РежимЗагрузкиДанных = Истина)
        знч ОписаниеJson = ОбменДаннымиСервис.ПолучитьСервис().ЗагрузитьОбъектИзJson(ДанныеJson)
        СервисыHttp.УпаковатьДанныеJson(ЗапросHttp, ОписаниеJson)
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
    ;
    
;

@ВПроекте
структура СервисыЗагрузкиJson
    знч Отправитель: Отправитель.Ссылка?
    знч ПрочитатьОбъект: ((Строка, (Ууид) -> ВходящиеДанные.Объект, Тип) -> ВходящиеДанные.Объект)?
    знч ЗаписатьОбъект: (ПараметрыЗаписиВходящихДанных, ИнструментыМенеджераОбъекта) -> ничто?
    знч ЗаписатьКоллекцию: (ЧитаемаяКоллекция<Справочник.Объект>, ЧитаемоеСоответствие<Строка, Объект>, Тип, ИнструментыМенеджераОбъекта) -> ничто?
    обз знч ПолучитьСсылку: (ВебApiСервер.ВнешняяСсылка) -> ВходящиеДанные.Ссылка
    обз знч ПолучитьСсылки:(ЧитаемаяКоллекция<ВебApiСервер.ВнешняяСсылка>) -> ЧитаемоеСоответствие<Строка, ВходящиеДанные.Ссылка>
    знч НайтиСсылку: ((Строка)->ВходящиеДанные.Ссылка?)?
    знч ПолучитьПараметр: ((Строка)->Число|Булево|Ууид|Строка|?)?
    знч ИнструментыМенеджераОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта?
    пер ИдПоследнегоОбъекта: Строка?
;

@ВПроекте
метод СервисыУпаковкиJson(): СервисыУпаковкиJson
    знч КешСсылок: Соответствие<ВходящиеДанные.Ссылка, Строка>
    знч ПолучитьИдентификатор = метод(Ссылка: ВходящиеДанные.Ссылка) ->
        возврат СоответствиеИдентификаторов.ПолучитьИдентификаторы([Ссылка], КешСсылок)[Ссылка]
    ;
    знч ПолучитьИдентификаторы = метод(Ссылки: ЧитаемаяКоллекция<ВходящиеДанные.Ссылка>) ->
        возврат СоответствиеИдентификаторов.ПолучитьИдентификаторы(Ссылки, КешСсылок)
    ;
    возврат новый СервисыУпаковкиJson(ПолучитьИдентификатор, ПолучитьИдентификаторы)
;

@ВПроекте
метод ИдФайла(ДанныеФайла: Объект): Строка
    пер МассивИд: Массив<Строка>
    знч Сервисы = ДанныеФайлаПоставщик.ПолучитьСервисы()
    для Сервис из Сервисы
        МассивИд.ДобавитьВсе(Сервис.ИдФайла(ДанныеФайла))
    ;
    если МассивИд.Размер() != 1
        выбросить новый ВебApiСервер.ИсключениеИсполненияКонтракта(ВебApiСервер.ТекстОшибкиИсполненияКонтракта("ИдФайла", ДанныеФайла))
    ;
    возврат МассивИд[0]
;

@ВПроекте
метод ИдВложенногоФайла(Ид: Строка): Строка
    пер МассивИд: Массив<Строка>
    знч Сервисы = ДанныеФайлаПоставщик.ПолучитьСервисы()
    для Сервис из Сервисы
        МассивИд.ДобавитьВсе(Сервис.ИдЗагруженногоФайла(Ид))
    ;
    если МассивИд.Размер() != 1
        выбросить новый ВебApiСервер.ИсключениеИсполненияКонтракта(ВебApiСервер.ТекстОшибкиИсполненияКонтракта("ИдВложенногоФайла", Ид))
    ;
    возврат МассивИд[0]
;

@ВПроекте
метод ОтправитьОбъектПоИдентификатору(ЗапросHttp: HttpСервисЗапрос, ТипОбъекта: Тип, Идентификатор: СервисыHttp.ОжидаемыйПараметр,
    ВерсияФорматаОбмена: Версия? = Неопределено)
    
    // проверяем инфосистему
    пер Отправитель: Объект?
    попытка
        Отправитель = ОбменДаннымиСервис.ПолучитьСервис().Отправитель()
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
        возврат
    ;

    знч СервисыУпаковкиJson = ВебApiСервер.СервисыУпаковкиJson()
    СервисыУпаковкиJson.ПолучитьИдФайла = &ВебApiСервер.ИдФайла

    попытка
        знч ПараметрыЗапроса = СервисыHttp.ПараметрыЗапроса(ЗапросHttp, [Идентификатор])
        знч Ссылка = СоответствиеИдентификаторов.НайтиСсылку(ПараметрыЗапроса.Получить(Идентификатор.Имя) как Строка)
        если Ссылка == Неопределено или не МенеджерСущности.СсылкаСуществует(Ссылка!)
            СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, СервисыHttp.КодыСостояний.НеНайдено_404)
            СервисыHttp.УпаковатьДанныеJson(ЗапросHttp, 
                СоответствиеИдентификаторов.ОбъектПоИдентификаторуНеНайденJson(
                    Идентификатор.Имя, 
                    ПараметрыЗапроса.Получить(Идентификатор.Имя) как Строка,
                    ТипОбъекта.ПолучитьТип()
                )
            )
            возврат
        ;
        знч ДанныеJson = ПолучитьДанныеJson(ТипОбъекта, Ссылка, СервисыУпаковкиJson, ВерсияФорматаОбмена)
        СервисыHttp.УпаковатьДанныеJson(ЗапросHttp, ДанныеJson)
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
    ;
;

@ВПроекте
метод ОтправитьОбъектПоСсылке(
        ЗапросHttp: HttpСервисЗапрос, 
        ТипОбъекта: Тип, 
        УуидСтрокой: СервисыHttp.ОжидаемыйПараметр,
        КонструкторСсылки: (Ууид) -> ИсходящиеДанные.Ссылка, 
        ВерсияФорматаОбмена: Версия? = Неопределено)
    
    знч СервисыУпаковкиJson = ВебApiСервер.СервисыУпаковкиJson()
    СервисыУпаковкиJson.ПолучитьИдФайла = &ВебApiСервер.ИдФайла

    попытка
        знч ПараметрыЗапроса = СервисыHttp.ПараметрыЗапроса(ЗапросHttp, [УуидСтрокой])
        знч Ссылка = КонструкторСсылки(новый Ууид(ПараметрыЗапроса.Получить(УуидСтрокой.Имя) как Строка))
        знч ДанныеJson = ПолучитьДанныеJson(ТипОбъекта, Ссылка, СервисыУпаковкиJson, ВерсияФорматаОбмена)
        если ДанныеJson == Неопределено 
            СервисыHttp.ЗаполнитьОтвет(
                ЗапросHttp,
                СервисыHttp.КодыСостояний.НеНайдено_404,
                {"reason" : "Не удалось найти объект по ссылке"})
        иначе
            СервисыHttp.УпаковатьДанныеJson(ЗапросHttp, ДанныеJson)
        ;
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
    ;
;    

@ВПроекте
метод  ОтправитьJson(ЗапросHttp: HttpСервисЗапрос, ДанныеJson: Объект)
    
    // проверяем инфосистему
    пер Отправитель: Объект?
    попытка
        Отправитель = ОбменДаннымиСервис.ПолучитьСервис().Отправитель()
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
        возврат
    ;
    
    попытка
        СервисыHttp.УпаковатьДанныеJson(ЗапросHttp, ДанныеJson)
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
    ;    
    
;

@ВПроекте
исключение ИсключениеОбъектНеУдален
    обз знч Идентификатор: Строка
    обз знч ИсходнаяОшибка: Исключение
;

//Область СлужебныйПрограммныйИнтерфейс

@ВПроекте
метод УдалитьОбъектПоИдентификатору(ЗапросHttp: HttpСервисЗапрос, Идентификатор: СервисыHttp.ОжидаемыйПараметр, УдалениеОбъекта: (Справочник.Объект) -> ничто)

    // проверяем инфосистему
    пер Отправитель: Объект?
    попытка
        Отправитель = ОбменДаннымиСервис.ПолучитьСервис().Отправитель()
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
        возврат
    ;
    
    попытка 
        знч ПараметрыЗапроса = СервисыHttp.ПараметрыЗапроса(ЗапросHttp, [Идентификатор])
        УдалитьОбъектПоВнешнемуИдентификатору(ПараметрыЗапроса.Получить(Идентификатор.Имя) как Строка, УдалениеОбъекта)
    поймать Ошибка: Исключение
        если Ошибка это СоответствиеИдентификаторов.ИсключениеСсылкаПоИдентификаторуНеНайдена
            СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, СервисыHttp.КодыСостояний.НеНайдено_404)
        иначе  
            СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
        ;
    ;
;

@ВПроекте
метод УдалитьОбъекты(ЗапросHttp: HttpСервисЗапрос, ТипОбъекта: Тип, ОжидаемыеПараметры: ЧитаемаяКоллекция<СервисыHttp.ОжидаемыйПараметр>)

    // проверяем инфосистему
    пер Отправитель: Объект?
    попытка
        Отправитель = ОбменДаннымиСервис.ПолучитьСервис().Отправитель()
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
        возврат
    ;
    
    знч КешСсылок: Соответствие<Строка, ВходящиеДанные.Ссылка>
    знч ПолучитьСсылку = метод(ВнешняяСсылка: ВебApiСервер.ВнешняяСсылка) ->
        возврат СоответствиеИдентификаторов.ПолучитьСсылки([ВнешняяСсылка], КешСсылок)[ВнешняяСсылка.Идентификатор]
    ;

    попытка 
        знч ПараметрыЗапроса = СервисыHttp.ПараметрыЗапроса(ЗапросHttp, ОжидаемыеПараметры)
        УдалитьОбъекты(ТипОбъекта, ПараметрыЗапроса, новый СервисыУдаленияОбъектов(ПолучитьСсылку, &УдалитьКоллекцию))
    поймать Ошибка: Исключение
        СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, Ошибка)
    ;
;

@ВПроекте
структура СервисыУдаленияОбъектов
    обз знч ПолучитьСсылку: (ВебApiСервер.ВнешняяСсылка)->ВходящиеДанные.Ссылка
    обз знч УдалитьКоллекцию: (ЧитаемоеСоответствие<Строка, Объект>, Тип) -> ничто
;

@ВПроекте
метод УдалитьЭлементыСправочникаПоКлючу(ИмяТаблицы: Строка, ЗначенияКлюча: ЧитаемоеСоответствие<Строка, Объект?>, Заблокировать: Булево = Ложь)
    если ЗначенияКлюча.Пусто()
        возврат
    ;
    пер Условие: Строка
    знч Запрос = новый ПроизвольныйЗапрос() // текст запроса динамический
    для Описание из ЗначенияКлюча
        если не Условие.Пусто()
            Условие = Строки.Соединить(<Строка>[Условие, " И "])
        ;
        Условие = Строки.Соединить(<Строка>[Условие, Описание.Ключ, " == &", Описание.Ключ])
        Запрос.УстановитьПараметр(Описание.Ключ, Описание.Значение)
    ;
    Запрос.Текст =  
        "Выбрать
            Ссылка 
        Из 
            %ИмяТаблицы 
        Где 
            %Условие"
    для Описание из ЗначенияКлюча
        Запрос.УстановитьПараметр(Описание.Ключ, Описание.Значение)
    ;
    
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        пер Элемент = РезультатСтрока.Ссылка.ЗагрузитьОбъект(Заблокировать)
        если Элемент != Неопределено
            Элемент.Удалить()
        ;
    ;
;

@ВПроекте
метод ИсходящиеДанныеКакСсылки(ИсходящиеДанные: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемаяКоллекция<Справочник.Ссылка>
    знч Ссылки: Массив<Справочник.Ссылка>
    для Ссылка из ИсходящиеДанные
        Ссылки.Добавить(Ссылка как Справочник.Ссылка)
    ;
    возврат Ссылки
;

метод ТипКоллекцииДанныхJson(ТипОбъекта: Тип, ВерсияФорматаОбмена: Версия?): Тип
    пер Типы: Массив<Тип>
    знч Сервисы = ДанныеApi.ПолучитьСервисы()
    для Сервис из Сервисы
        Типы.ДобавитьВсе(Сервис.ТипКоллекцииДанныхJson(ТипОбъекта, ВерсияФорматаОбмена))
    ;
    если Типы.Размер() != 1
        выбросить новый ИсключениеИсполненияКонтракта(ТекстОшибкиИсполненияКонтракта("ТипКоллекцииДанныхJson", ТипОбъекта))
    ;
    возврат Типы[0]
;

метод ИнструментыМенеджераОбъекта(ТипОбъекта: Тип): ИнструментыМенеджераОбъекта
    пер Инструменты: Массив<ИнструментыМенеджераОбъекта>
    знч Сервисы = ДанныеApi.ПолучитьСервисы()
    для Сервис из Сервисы
        Инструменты.ДобавитьВсе(Сервис.ИнструментыМенеджераОбъекта(ТипОбъекта))
    ;
    если Инструменты.Размер() != 1
        выбросить новый ИсключениеИсполненияКонтракта(ТекстОшибкиИсполненияКонтракта("ИнструментыМенеджераОбъекта", ТипОбъекта))
    ;
    возврат Инструменты[0]
;

метод ТипДанныхJson(ТипОбъекта: Тип, ВерсияФорматаОбмена: Версия?): Тип
    пер Типы: Массив<Тип>
    знч Сервисы = ДанныеApi.ПолучитьСервисы()
    для Сервис из Сервисы
        Типы.ДобавитьВсе(Сервис.ТипДанныхJson(ТипОбъекта, ВерсияФорматаОбмена))
    ;
    если Типы.Размер() != 1
        выбросить новый ИсключениеИсполненияКонтракта(ТекстОшибкиИсполненияКонтракта("ТипДанныхJson", ТипОбъекта))
    ;
    возврат Типы[0]
;

метод ПолучитьДанныеJson(
        ТипОбъекта: Тип, 
        Ссылка: ВходящиеДанные.Ссылка|ИсходящиеДанные.Ссылка, 
        СервисыУпаковкиJson: ВебApiСервер.СервисыУпаковкиJson, 
        ВерсияФорматаОбмена: Версия?): Объект?
    
    пер ДанныеJson: Массив<Объект?>
    знч Сервисы = ДанныеApi.ПолучитьСервисы()
    для Сервис из Сервисы
        ДанныеJson.ДобавитьВсе(Сервис.ПолучитьДанныеJson(ТипОбъекта, Ссылка, СервисыУпаковкиJson, ВерсияФорматаОбмена))
    ;
    если ДанныеJson.Размер() != 1
        выбросить новый ИсключениеИсполненияКонтракта(ТекстОшибкиИсполненияКонтракта("ПолучитьДанныеJson", ТипОбъекта))
    ;
    возврат ДанныеJson[0]
;

@ВПодсистеме
метод ТипОбъектаJson(ТипОбъекта: Тип): Строка
    пер ТипОбъектаJson: Массив<Строка>
    знч Сервисы = ДанныеApi.ПолучитьСервисы()
    для Сервис из Сервисы
        ТипОбъектаJson.ДобавитьВсе(Сервис.ТипОбъектаJson(ТипОбъекта))
    ;
    если ТипОбъектаJson.Размер() != 1
        выбросить новый ИсключениеИсполненияКонтракта(ТекстОшибкиИсполненияКонтракта("ТипОбъектаJson", ТипОбъекта))
    ;
    возврат ТипОбъектаJson[0]
;

метод МассивСсылокПоФильтру(ТипОбъекта: Тип, Фильтр: () -> ЧитаемыйМассив<Справочник.Ссылка>): ЧитаемыйМассив<Справочник.Ссылка>
    пер МассивСсылок: Массив<ЧитаемыйМассив<Справочник.Ссылка>>
    знч Сервисы = ДанныеApi.ПолучитьСервисы()
    для Сервис из Сервисы
        МассивСсылок.ДобавитьВсе(Сервис.МассивСсылокПоФильтру(ТипОбъекта, Фильтр))
    ;
    если МассивСсылок.Размер() != 1
        выбросить новый ИсключениеИсполненияКонтракта(ТекстОшибкиИсполненияКонтракта("МассивСсылокПоФильтру", ТипОбъекта))
    ;
    возврат МассивСсылок[0]
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(ТипОбъекта: Тип, ТипДанных: Тип, ДанныеJson: Объект?, СервисыЗагрузкиJson: ВебApiСервер.СервисыЗагрузкиJson)
    знч Сервисы = ДанныеApi.ПолучитьСервисы()
    для Сервис из Сервисы
        Сервис.ЗагрузитьОбъектИзJson(ТипОбъекта, ТипДанных, ДанныеJson, СервисыЗагрузкиJson)
    ;
;

метод УдалитьОбъекты(ТипОбъекта: Тип, ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>, СервисыУдаленияОбъектов: ВебApiСервер.СервисыУдаленияОбъектов)
    знч Сервисы = ДанныеApi.ПолучитьСервисы()
    для Сервис из Сервисы
        Сервис.УдалитьОбъекты(ТипОбъекта, ПараметрыЗапроса, СервисыУдаленияОбъектов)
    ;
;

@ВПроекте
метод ПослеЗаписиГруппыОбъектов(ТипОбъекта: Тип, МассивОбъектовОтложенногоОбновления: Массив<ВебApiСервер.ОбъектОтложенногоОбновления>)
    знч Сервисы = ДанныеApi.ПолучитьСервисы()
    для Сервис из Сервисы
        Сервис.ПослеЗаписиГруппыОбъектов(ТипОбъекта, МассивОбъектовОтложенногоОбновления)
    ;
;

@ВПодсистеме
метод ИзменитьОбъектИзJson(ТипОбъекта: Тип, ДанныеJson: Объект, СервисыЗагрузкиJson: ВебApiСервер.СервисыЗагрузкиJson, ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации)
    знч Сервисы = ДанныеApi.ПолучитьСервисы()
    для Сервис из Сервисы
        Сервис.ИзменитьОбъектИзJson(ТипОбъекта, ДанныеJson, СервисыЗагрузкиJson, ЗаданиеМодификации)
    ;
;

@ВПодсистеме
метод ЗавершитьИзменениеОбъектИзJson(ТипОбъекта: Тип, МассивСсылок: ЧитаемыйМассив<ВходящиеДанные.Ссылка>, ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации)
    знч Сервисы = ДанныеApi.ПолучитьСервисы()
    для Сервис из Сервисы
        Сервис.ЗавершитьИзменениеОбъектИзJson(ТипОбъекта, МассивСсылок, ЗаданиеМодификации)
    ;
;

@ВПроекте
метод ГруппаИзмененийВJson(ТипОбъекта: Тип, Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>,
    СервисыУпаковкиJson: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    
    пер ГруппаИзмененийJson: Массив<ЧитаемоеСоответствие<Строка, Массив<Объект?>>>
    знч Сервисы = ДанныеApi.ПолучитьСервисы()
    для Сервис из Сервисы
        ГруппаИзмененийJson.ДобавитьВсе(Сервис.ГруппаИзмененийВJson(ТипОбъекта, Ссылки, СервисыУпаковкиJson, ВерсияФорматаОбмена))
    ;
    если ГруппаИзмененийJson.Размер() != 1
        выбросить новый ИсключениеИсполненияКонтракта(ТекстОшибкиИсполненияКонтракта("ГруппаИзмененийВJson", ТипОбъекта))
    ;
    возврат ГруппаИзмененийJson[0]
;

@ВПроекте
метод ТекстОшибкиИсполненияКонтракта(ИмяМетода: Строка, ОбрабатываемыйОбъект: Объект): Строка
    возврат "Для объекта %{ОбрабатываемыйОбъект.ВСтроку()}, метод контракта %ИмяМетода вернул некорректный результат."
;

метод УдалитьКоллекцию(Ключ: ЧитаемоеСоответствие<Строка, Объект>, ТипОбъекта: Тип)
    УдалитьЭлементыСправочникаПоКлючу(МенеджерСущности.ИмяТаблицыПоТипу(ТипОбъекта), Ключ, Истина)
;

метод УдалитьОбъектПоВнешнемуИдентификатору(Идентификатор: Строка, УдалениеОбъекта: (Справочник.Объект) -> ничто)
    знч Ссылка = СоответствиеИдентификаторов.НайтиСсылку(Идентификатор)
    если Ссылка == Неопределено
        выбросить новый СоответствиеИдентификаторов.ИсключениеСсылкаПоИдентификаторуНеНайдена(
            "Не удалось найти объект по идентификатору", Идентификатор)
    ;
    исп ГрупповаяОперация.Начать(РежимЗагрузкиДанных = Истина, Транзакция = Истина) 
    знч Объект = (Ссылка как Справочник.Ссылка).ЗагрузитьОбъект(Истина)
    если Объект == Неопределено
        выбросить новый СоответствиеИдентификаторов.ИсключениеСсылкаПоИдентификаторуНеНайдена(
            "Не удалось найти объект по идентификатору", Идентификатор)
    ;
    попытка
        УдалениеОбъекта(Объект)
    поймать Ошибка: Исключение
        выбросить новый ВебApiСервер.ИсключениеОбъектНеУдален("Не удалось удалить объект ID = %Идентификатор", Идентификатор, Ошибка)
    ;
;

@ВПроекте
метод ПолучитьСсылку(ВнешняяСсылка: ВебApiСервер.ВнешняяСсылка): ВходящиеДанные.Ссылка
    возврат СоответствиеИдентификаторов.ПолучитьСсылки([ВнешняяСсылка])[ВнешняяСсылка.Идентификатор]
;

@ВПроекте
метод ПроверитьФорматОбмена(ЗапросHttp: HttpСервисЗапрос): ПроверкаФорматаОбмена
    знч ФорматОбмена = ВерсияФорматаОбмена(ЗапросHttp)
    знч НеПоддерживаемыйТипДанных = ФорматОбмена == Неопределено
    если НеПоддерживаемыйТипДанных
        ЗаполнитьОтветНеПоддерживаемыйТипДанных(ЗапросHttp)
    ;
    возврат новый ПроверкаФорматаОбмена(ФорматОбмена, НеПоддерживаемыйТипДанных)
;

@ВПодсистеме
метод ПолучитьВерсиюApi(ЗапросHttp: HttpСервисЗапрос)
    СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, СервисыHttp.КодыСостояний.ОК_200)
    СервисыHttp.УпаковатьДанныеJson(ЗапросHttp, ПриложениеОбменСервис.ПолучитьСервис().ВерсияApi())
;

@ВПроекте
метод НайтиСсылку(Идентификатор: Строка): ВходящиеДанные.Ссылка?
    возврат СоответствиеИдентификаторов.НайтиСсылку(Идентификатор)
;

@ВПроекте
метод НайтиСсылку(Идентификатор: Строка, Тип: Тип): ВходящиеДанные.Ссылка?
    возврат СоответствиеИдентификаторов.НайтиСсылку(Идентификатор, Тип)
;

метод ВерсияФорматаОбмена(ЗапросHttp: HttpСервисЗапрос): Версия?
    знч ВерсияФорматаОбменаСтрокой = ЗапросHttp.Заголовки.ПолучитьПервый("formatVersion")
    если ВерсияФорматаОбменаСтрокой == Неопределено
        возврат Неопределено
    ;
    знч ВерсияФорматаОбмена = новый Версия(ВерсияФорматаОбменаСтрокой)
    если ПоддерживаемыеВерсииОбмена().Содержит(ВерсияФорматаОбмена)
        возврат ВерсияФорматаОбмена
    иначе
        возврат Неопределено
    ;
;

метод ЗаполнитьОтветНеПоддерживаемыйТипДанных(ЗапросHttp: HttpСервисЗапрос)
    СервисыHttp.ЗаполнитьОтвет(ЗапросHttp, СервисыHttp.КодыСостояний.НеПоддерживаемыйТипДанных_406)
;