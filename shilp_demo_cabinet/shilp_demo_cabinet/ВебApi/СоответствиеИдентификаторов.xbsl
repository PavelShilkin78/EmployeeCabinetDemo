
@ВПодсистеме
метод НайтиСсылку(Идентификатор: Строка, Тип: Тип? = Неопределено): ВходящиеДанные.Ссылка?
    возврат ОбменДаннымиСервис.ПолучитьСервис().ИдентификаторыЛокальныхОбъектов([Идентификатор], Тип).ПолучитьИлиУмолчание(Идентификатор)
;

@ВПодсистеме
метод ПолучитьСсылки(ВнешниеСсылки: ЧитаемаяКоллекция<ВебApiСервер.ВнешняяСсылка>, Кеш: Соответствие<Строка, ВходящиеДанные.Ссылка>): ЧитаемоеСоответствие<Строка, ВходящиеДанные.Ссылка>
    // Получить ссылки - потому что не только ищет ссылки, но и создает новые
    знч ДляВозврата: Соответствие<Строка, ВходящиеДанные.Ссылка>
    знч ДляПолучения: Массив<ВебApiСервер.ВнешняяСсылка>
    для ВнешняяСсылка из ВнешниеСсылки
        если Кеш.СодержитКлюч(ВнешняяСсылка.Идентификатор)
            ДляВозврата.Вставить(ВнешняяСсылка.Идентификатор, Кеш[ВнешняяСсылка.Идентификатор])
        иначе
            ДляПолучения.Добавить(ВнешняяСсылка)
        ;
    ;
    если не ДляПолучения.Пусто()
        знч ПолученныеСсылки = ПолучитьСсылки(ДляПолучения)
        ДляВозврата.ВставитьВсе(ПолученныеСсылки)
        Кеш.ВставитьВсе(ПолученныеСсылки)
    ;
    возврат ДляВозврата
;

@ВПодсистеме
метод ПолучитьСсылки(ВнешниеСсылки: ЧитаемаяКоллекция<ВебApiСервер.ВнешняяСсылка>): ЧитаемоеСоответствие<Строка, ВходящиеДанные.Ссылка>
    знч Ссылки: Соответствие<Строка, ВходящиеДанные.Ссылка>
    знч Идентификаторы: Массив<Строка>
    для ВнешняяСсылка из ВнешниеСсылки
        Идентификаторы.Добавить(ВнешняяСсылка.Идентификатор)
    ;
    исп Транзакция = Транзакции.Начать()
    ОбменДаннымиСервис.ПолучитьСервис().УстановитьБлокировкуНаВнешниеИдентификаторы(Идентификаторы)
    знч НайденныеСсылки = ОбменДаннымиСервис.ПолучитьСервис().ИдентификаторыЛокальныхОбъектов(Идентификаторы)
    для ВнешняяСсылка из ВнешниеСсылки
        если не НайденныеСсылки.СодержитКлюч(ВнешняяСсылка.Идентификатор)
            и не Ссылки.СодержитКлюч(ВнешняяСсылка.Идентификатор)
            
            Ссылки.Вставить(ВнешняяСсылка.Идентификатор,
                НоваяВнутренняяСсылка(ВнешняяСсылка.Идентификатор, ВнешняяСсылка.НоваяСсылкаОбъекта))
        ;
    ;
    Транзакция.Фиксировать()
    Ссылки.ВставитьВсе(НайденныеСсылки)
    возврат Ссылки
;

@ВПодсистеме
исключение ИсключениеСсылкаПоИдентификаторуНеНайдена
    обз знч Идентификатор: Строка
;

@ВПодсистеме
структура ОбъектПоИдентификаторуНеНайденJson
    обз знч idName: Строка
    обз знч idValue: Строка
;

@ВПодсистеме
структура ИсключениеJson
    обз знч _type: Строка
    обз знч code: КодыОшибок
    обз пер value: ОбъектПоИдентификаторуНеНайденJson
    обз пер description: Строка
;

@ВПодсистеме
метод ОбъектПоИдентификаторуНеНайденJson(ИмяИдентификатора: Строка, ЗначениеИдентификатора: Строка, ТипОбъекта: Тип): ИсключениеJson
    возврат новый ИсключениеJson(
        ТипОбъекта.ВСтроку(), 
        КодыОшибок.objectNotFound, 
        новый ОбъектПоИдентификаторуНеНайденJson(ИмяИдентификатора, ЗначениеИдентификатора),
        "Объект по идентификатору %ИмяИдентификатора = %ЗначениеИдентификатора не найден"
    )
;

перечисление КодыОшибок
    objectNotFound
;

@ВПодсистеме
исключение ИсключениеИдентификаторПоСсылкеНеНайден
    обз знч Ссылка: ВходящиеДанные.Ссылка
;

@ВПодсистеме
метод ПолучитьИдентификаторы(Ссылки: ЧитаемаяКоллекция<ВходящиеДанные.Ссылка>, Кеш: Соответствие<ВходящиеДанные.Ссылка, Строка>): ЧитаемоеСоответствие<ВходящиеДанные.Ссылка, Строка>
    знч ДляВозврата: Соответствие<ВходящиеДанные.Ссылка, Строка>
    знч ДляПолучения: Массив<ВходящиеДанные.Ссылка>
    для Ссылка из Ссылки
        если Кеш.СодержитКлюч(Ссылка)
            ДляВозврата.Вставить(Ссылка, Кеш[Ссылка])
        иначе
            ДляПолучения.Добавить(Ссылка)
        ;
    ;
    если не ДляПолучения.Пусто()
        знч ПолученныеИдентификаторы = ПолучитьИдентификаторы(Ссылки)
        ДляВозврата.ВставитьВсе(ПолученныеИдентификаторы)
        Кеш.ВставитьВсе(ПолученныеИдентификаторы)
    ;
    возврат ДляВозврата
;

@ВПодсистеме
метод ПолучитьИдентификаторы(Ссылки: ЧитаемаяКоллекция<ВходящиеДанные.Ссылка>): ЧитаемоеСоответствие<ВходящиеДанные.Ссылка, Строка>
    знч Идентификаторы = ОбменДаннымиСервис.ПолучитьСервис().ВнешниеИдентификаторыПоВнутреннимСсылкам(Ссылки)
    для Ссылка из Ссылки
        если не Идентификаторы.СодержитКлюч(Ссылка)
            выбросить новый ИсключениеИдентификаторПоСсылкеНеНайден(
                    "Не удалось найти внешний идентификатор по внутренней ссылке %{Ссылка.ВСтроку()}", Ссылка)
        ;
    ;
    возврат Идентификаторы
;

метод НоваяВнутренняяСсылка(ВнешнийИдентификатор: Строка, НоваяСсылкаОбъекта: (Ууид) -> ВходящиеДанные.Ссылка): ВходящиеДанные.Ссылка
    знч НоваяСсылка = НоваяСсылкаОбъекта(новый Ууид())
    ОбменДаннымиСервис.ПолучитьСервис().ЗаписатьСоответствиеИдентификаторов(НоваяСсылка, ВнешнийИдентификатор, Ложь)
    возврат НоваяСсылка
;