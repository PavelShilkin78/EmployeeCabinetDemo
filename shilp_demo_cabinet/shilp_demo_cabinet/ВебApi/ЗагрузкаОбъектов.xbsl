импорт ОбщиеСтандартные
импорт СтандартноеПриложение

@ВПодсистеме
структура РезультатЗагрузкиДанныхJson
    знч result: Массив<РезультатЗагрузкиJson>
    знч errors: Массив<ОшибкаЗагрузкиJson>
    пер returnObjectID: Булево = Ложь
;

@ВПодсистеме
структура РезультатЗагрузкиJson
    @JsonСвойство(Имя = "type")
    обз знч _type: Строка
    обз знч position: Число
    пер objectID: Строка?
;

@ВПодсистеме
структура ОшибкаJson
    @JsonСвойство(Имя = "type")
    обз знч _type: Строка
    пер code: Строка
    пер description: Строка
    пер value: Соответствие<Строка, Объект?>?
;

структура ОшибкаЗагрузкиJson
    обз знч position: Число
    обз знч error: ОшибкаJson
;

@ВПодсистеме
метод ЗагрузитьДанные(
        КоллекцияДанныхJson: ЧитаемаяКоллекция<Объект?>, 
        ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>?, 
        ТипОбъекта: Тип, 
        Отправитель: Отправитель.Ссылка?, 
        ТипДанных: Тип, 
        ИнструментыМенеджераОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта,
        РезультатыЗагрузкиДанных: РезультатЗагрузкиДанныхJson? = Неопределено): РезультатЗагрузкиДанныхJson
    
    если РезультатыЗагрузкиДанных == Неопределено
        РезультатыЗагрузкиДанных = новый РезультатЗагрузкиДанныхJson()
    ;

    // загружаем объект
    пер Индекс: Число
    знч ТипОбъектаJson: Строка = ВебApiСервер.ТипОбъектаJson(ТипОбъекта)
    знч МоментЗагрузки = Момент.Сейчас()
    знч ЗаписанныеОбъекты: Массив<ВходящиеДанные.Ссылка>
    знч СервисыЗагрузкиJson = СервисыЗагрузкиJson(
        Отправитель,
        ПараметрыЗапроса,
        ЗаписанныеОбъекты,
        МоментЗагрузки,
        ИнструментыМенеджераОбъекта)
    
    для ДанныеJson из КоллекцияДанныхJson
        Индекс += 1
        попытка
            ВебApiСервер.ЗагрузитьОбъектИзJson(
                ТипОбъекта,
                ТипДанных,
                ДанныеJson, 
                СервисыЗагрузкиJson)
            пер РезультатЗагрузкиJson = новый РезультатЗагрузкиJson(ТипОбъектаJson, Индекс)
            если СервисыЗагрузкиJson.ИдПоследнегоОбъекта != Неопределено
                РезультатыЗагрузкиДанных.returnObjectID = Истина
                РезультатЗагрузкиJson.objectID = СервисыЗагрузкиJson.ИдПоследнегоОбъекта
                СервисыЗагрузкиJson.ИдПоследнегоОбъекта = Неопределено
            ;
            РезультатыЗагрузкиДанных.result.Добавить(РезультатЗагрузкиJson)
        поймать Ошибка: Исключение
            знч ОшибкаJson  = новый ОшибкаJson(ТипОбъектаJson)
            ОшибкаJson.code = СервисыHttp.ИсключениеВJson(Ошибка)
            ОшибкаJson.description = Ошибка.Описание
            ОшибкаJson.value = СервисыHttp.ЗначениеОшибкиJson(Ошибка)
            РезультатыЗагрузкиДанных.errors.Добавить(новый ОшибкаЗагрузкиJson(Индекс, ОшибкаJson))
            Журналирование.ЗарегистрироватьОшибку(Ошибка)
        ;
    ;

    ОбменДаннымиСервис.ПолучитьСервис().СоздатьЗапускОбработкиОбъектовОтложенногоОбновленияПоРасписанию()
    возврат РезультатыЗагрузкиДанных
;

@ВПодсистеме
метод ИзменитьДанные(
        КоллекцияДанныхJson: ЧитаемаяКоллекция<Строка>, 
        ТипОбъекта: Тип, 
        Отправитель: Отправитель.Ссылка?, 
        ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации,
        ИнструментыМенеджераОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта)
    
    знч ЗаписанныеОбъекты: Массив<ВходящиеДанные.Ссылка>
    знч МоментЗагрузки = Момент.Сейчас()
    // изменяем объект
    исп Транзакции.Начать()
    для ДанныеJson из КоллекцияДанныхJson
        ВебApiСервер.ИзменитьОбъектИзJson(ТипОбъекта, ДанныеJson, 
                СервисыЗагрузкиJson(Отправитель, Неопределено, ЗаписанныеОбъекты, МоментЗагрузки, ИнструментыМенеджераОбъекта),
                ЗаданиеМодификации)
    ;
    ВебApiСервер.ЗавершитьИзменениеОбъектИзJson(ТипОбъекта, ЗаписанныеОбъекты, ЗаданиеМодификации)
;

метод СервисыЗагрузкиJson(
        Отправитель: Отправитель.Ссылка?, 
        ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>?,
        ЗаписанныеОбъекты: Массив<ВходящиеДанные.Ссылка>,
        МоментЗагрузки: Момент, 
        ИнструментыМенеджераОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта): ВебApiСервер.СервисыЗагрузкиJson
    
    знч КешСсылок: Соответствие<Строка, ВходящиеДанные.Ссылка>
    знч ПолучитьСсылку = метод(ВнешняяСсылка: ВебApiСервер.ВнешняяСсылка)
        -> возврат СоответствиеИдентификаторов.ПолучитьСсылки([ВнешняяСсылка], КешСсылок)[ВнешняяСсылка.Идентификатор]
    ;
    знч ПолучитьСсылки = метод(ВнешниеСсылки: ЧитаемаяКоллекция<ВебApiСервер.ВнешняяСсылка>)
        -> возврат СоответствиеИдентификаторов.ПолучитьСсылки(ВнешниеСсылки, КешСсылок)
    ;

    знч ЗаписатьОбъект = метод(ПараметрыЗаписи: ВебApiСервер.ПараметрыЗаписиВходящихДанных, ИнструментыОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта) -> 
        ЗаписатьОбъект(ПараметрыЗаписи.Объект, ПараметрыЗаписи.Идентификатор, МоментЗагрузки, ПараметрыЗаписи.ЗависимыйОбъект, ИнструментыМенеджераОбъекта, Отправитель)
        ЗаписанныеОбъекты.Добавить(ПараметрыЗаписи.Объект.Ссылка)
    ;

    знч ПолучитьПараметр = метод(Имя: Строка) ->
        если ПараметрыЗапроса == Неопределено или не ПараметрыЗапроса.СодержитКлюч(Имя)
            возврат Неопределено
        ;
        возврат ПараметрыЗапроса.Получить(Имя)
    ;
    знч СервисыЗагрузкиJson = новый ВебApiСервер.СервисыЗагрузкиJson(
                        Отправитель,
                        &ПрочитатьОбъект,
                        ЗаписатьОбъект,
                        &ЗаписатьКоллекцию,
                        ПолучитьСсылку,
                        ПолучитьСсылки,
                        &ВебApiСервер.НайтиСсылку,
                        ПолучитьПараметр,
                        ИнструментыМенеджераОбъекта)
    возврат СервисыЗагрузкиJson
;

метод ПрочитатьОбъект(Идентификатор: Строка, КонструкторОбъекта: (Ууид)->ВходящиеДанные.Объект, Тип: Тип): ВходящиеДанные.Объект
    знч Ссылка = ВебApiСервер.НайтиСсылку(Идентификатор, Тип)
    если Ссылка != Неопределено
        знч Объект = Ссылка.ЗагрузитьОбъект(Истина)
        если Объект != Неопределено
            возврат Объект
        ;
        возврат КонструкторОбъекта(Ссылка.Ид)
    ;
    возврат КонструкторОбъекта(новый Ууид(Идентификатор))
;

метод ЗаписатьОбъект(
        Объект: ВходящиеДанные.Объект, 
        Идентификатор: Строка,
        МоментЗагрузки: Момент,
        ЗависимыйОбъект: ВходящиеДанные.Ссылка?,
        ИнструментыМенеджераОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта,
        Отправитель: Отправитель.Ссылка?)
    
    ЗаписатьОбъект(Объект, Идентификатор, ИнструментыМенеджераОбъекта)
    исп КонтекстДоступа.Привилегированный()
    ОбменДаннымиСервис.ПолучитьСервис().СоздатьЗаписьОбъектыОтложенногоОбновления(Объект.Ссылка, ЗависимыйОбъект, МоментЗагрузки, Отправитель, "")
;

метод ЗаписатьОбъект(Объект: ВходящиеДанные.Объект, Идентификатор: Строка, ИнструментыМенеджераОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта)
    исп Транзакции.Начать()
    ИнструментыМенеджераОбъекта.ЗаписьОбъекта(Объект)
    если не Идентификатор.Пусто()
        ОбновитьСсылку(Объект.Ссылка, Идентификатор)
    ;
;

метод ЗаписатьКоллекцию(Коллекция: ЧитаемаяКоллекция<Справочник.Объект>, Ключ: ЧитаемоеСоответствие<Строка, Объект>, ТипОбъекта: Тип,
        ИнструментыМенеджераОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта)
    исп Транзакции.Начать() 
    ВебApiСервер.УдалитьЭлементыСправочникаПоКлючу(МенеджерСущности.ИмяТаблицыПоТипу(ТипОбъекта), Ключ, Истина)
    для Объект из Коллекция
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта(Объект)
    ;
;

метод ОбновитьСсылку(Ссылка: ВходящиеДанные.Ссылка, Идентификатор: Строка)
    ОбменДаннымиСервис.ПолучитьСервис().ОбновитьСоответствиеИдентификаторов(Ссылка, Идентификатор, Истина)
;