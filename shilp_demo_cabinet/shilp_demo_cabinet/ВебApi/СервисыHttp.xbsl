импорт СтандартноеПриложение

@ВПроекте
метод ИзвлечьДанныеJson(Ответ: ОтветHttp, ТипДанныхJson: Тип, Настройки: НастройкиЧтенияОбъектовJson): неизвестно
    если ТипДанныхJson == Тип<Неопределено>
        возврат Неопределено
    ;
    возврат СериализацияJson.ПрочитатьОбъект(Ответ.Тело, ТипДанныхJson, Настройки)
;

@ВПроекте
метод ИзвлечьДанныеJson(Ответ: ОтветHttp, ТипДанныхJson: Тип): неизвестно
    если ТипДанныхJson == Тип<Неопределено>
        возврат Неопределено
    ;
    возврат СериализацияJson.ПрочитатьОбъект(Ответ.Тело, ТипДанныхJson)
;

@ВПроекте
метод ИзвлечьДанныеJson(ЗапросHttp: HttpСервисЗапрос, ТипДанныхJson: Тип): неизвестно
    если ТипДанныхJson == Тип<Неопределено>
        возврат Неопределено
    ;
    возврат СериализацияJson.ПрочитатьОбъект(ЗапросHttp.Тело, ТипДанныхJson)
;

@ВПроекте
метод УпаковатьДанныеJson(ЗапросHttp: HttpСервисЗапрос, ДанныеJson: Объект?, СоответствиеЗначений: ЧитаемоеСоответствие<Строка, Строка> = {:})
    если СоответствиеЗначений.Пусто()
        СериализацияJson.ЗаписатьОбъект(ЗапросHttp.Ответ.ОткрытьПотокЗаписиТела(), ДанныеJson, НастройкиЗаписиОбъектовJson(ДанныеJson))
    иначе
        пер ТелоОтвета: Строка = СериализацияJson.ЗаписатьОбъект(ДанныеJson, НастройкиЗаписиОбъектовJson(ДанныеJson))
        для Замена из СоответствиеЗначений
            ТелоОтвета = ТелоОтвета.Заменить(Замена.Ключ, Замена.Значение)
        ;
        ЗапросHttp.Ответ.УстановитьТело(ТелоОтвета)
    ;
;

@ВПроекте
метод УпаковатьДанныеJson(ЗапросHttp: ЗапросHttp, ДанныеJson: Объект?, СоответствиеЗначений: ЧитаемоеСоответствие<Строка, Строка> = {:})
    пер Тело: Строка = СериализацияJson.ЗаписатьОбъект(ДанныеJson, НастройкиЗаписиОбъектовJson(ДанныеJson))
    для Замена из СоответствиеЗначений
        Тело = Тело.Заменить(Замена.Ключ, Замена.Значение)
    ;
    ЗапросHttp.УстановитьТело(Тело)
;

@ВПроекте
метод ДанныеJsonВСтроку(ДанныеJson: Объект?): Строка
    возврат СериализацияJson.ЗаписатьОбъект(ДанныеJson, НастройкиЗаписиОбъектовJson(ДанныеJson))
;

метод НастройкиЗаписиОбъектовJson(ДанныеJson: неизвестно): НастройкиЗаписиОбъектовJson
    знч Настройки = новый НастройкиЗаписиОбъектовJson()
    Настройки.ПропускатьНеопределено = Истина
    Настройки.РежимЗаписиТипа = РежимЗаписиТипаJson.НеЗаписывать
    возврат Настройки
;

@ВПроекте
метод НастройкиЧтенияОбъектовJson(): НастройкиЧтенияОбъектовJson
    знч Настройки = новый НастройкиЧтенияОбъектовJson()
    Настройки.ИгнорироватьНеизвестныеСвойства = Истина
    возврат Настройки
;

@ВПроекте
перечисление ТипыПараметраUrl
    Строка умолчание,
    Число,
    Булево,
    Месяц,
    Ид
;

@ВПроекте
структура ОжидаемыйПараметр
    пер Имя: Строка
    пер Обязательный: Булево
    пер ОжидаемыйТип: ТипыПараметраUrl
    пер ЗначениеДиапазон: ДиапазонЗначений?
    пер ЗначениеТочно: Строка|Число|Булево?
;

@ВПроекте
структура ДиапазонЗначений
    обз пер Мин: Число?
    обз пер Макс: Число?
;

@ВПроекте
исключение ИсключениеОбязательныйПараметрОтсутствует
    обз пер ИмяПараметра: Строка
;

@ВПроекте
исключение ИсключениеНедопустимыйТипПараметра
    обз пер ИмяПараметра: Строка
    обз пер ЗначениеПараметра: Строка
    обз пер ОжидаемыйТип: ТипыПараметраUrl
;

@ВПроекте
исключение ИсключениеЗначениеПараметраВнеДиапазона
    обз пер ИмяПараметра: Строка
    обз пер ЗначениеПараметра: Строка
    обз пер Диапазон: ДиапазонЗначений
;

@ВПроекте
исключение ИсключениеНедопустимоеЗначениеПараметра
    обз пер ИмяПараметра: Строка
    обз пер ЗначениеПараметра: Строка|Число|Булево
    пер ОжидаемоеЗначение: Строка|Число|Булево?
;

@ВПроекте
исключение ИсключениеОбъектНеНайден
    обз пер ИмяПоля: Строка
    обз пер Идентификатор: Строка
;

@ВПроекте
метод ПараметрыЗапроса(HTTPЗапрос: HttpСервисЗапрос, ОжидаемыеПараметры: ЧитаемаяКоллекция<ОжидаемыйПараметр>): ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>
    
    пер ПараметрыСтрока: Соответствие<Строка, Строка?>
    пер Параметры: Соответствие<Строка, Число|Булево|Ууид|Строка>
    
    для Имя из HTTPЗапрос.Параметры.Имена()
        ПараметрыСтрока.Вставить(Имя, HTTPЗапрос.Параметры.ПолучитьПервый(Имя))
    ;
    
    для ОжидаемыйПараметр из ОжидаемыеПараметры
        если не ПараметрыСтрока.СодержитКлюч(ОжидаемыйПараметр.Имя)
            если ОжидаемыйПараметр.Обязательный
                выбросить новый ИсключениеОбязательныйПараметрОтсутствует("Обязательный параметр %{ОжидаемыйПараметр.Имя} отсутствует", ОжидаемыйПараметр.Имя)
            ;
            продолжить
        ;
        выбор ОжидаемыйПараметр.ОжидаемыйТип
        когда Строка
            Параметры.Вставить(ОжидаемыйПараметр.Имя, ПараметрыСтрока[ОжидаемыйПараметр.Имя])
        когда Число
            попытка 
                Параметры.Вставить(ОжидаемыйПараметр.Имя, новый Число(ПараметрыСтрока[ОжидаемыйПараметр.Имя]!))
            поймать Ошибка: ИсключениеНедопустимыйАргумент
                выбросить новый ИсключениеНедопустимыйТипПараметра("Недопустимый тип параметра %{ОжидаемыйПараметр.Имя}", 
                    ОжидаемыйПараметр.Имя, ПараметрыСтрока[ОжидаемыйПараметр.Имя]!, ОжидаемыйПараметр.ОжидаемыйТип)
            ;
        когда Булево
            выбор ПараметрыСтрока[ОжидаемыйПараметр.Имя]!.ВНижнийРегистр()
            когда "true"
                Параметры.Вставить(ОжидаемыйПараметр.Имя, Истина)
            когда "false"
                Параметры.Вставить(ОжидаемыйПараметр.Имя, Ложь)
            иначе
                выбросить новый ИсключениеНедопустимыйТипПараметра("Недопустимый тип параметра %{ОжидаемыйПараметр.Имя}", 
                    ОжидаемыйПараметр.Имя, ПараметрыСтрока[ОжидаемыйПараметр.Имя]!, ОжидаемыйПараметр.ОжидаемыйТип)
            ;
        когда Ид
            попытка 
                Параметры.Вставить(ОжидаемыйПараметр.Имя, новый Ууид(ПараметрыСтрока[ОжидаемыйПараметр.Имя]!))
            поймать Ошибка: ИсключениеНедопустимыйФормат
                выбросить новый ИсключениеНедопустимыйТипПараметра("Недопустимый тип параметра %{ОжидаемыйПараметр.Имя}", 
                    ОжидаемыйПараметр.Имя, ПараметрыСтрока[ОжидаемыйПараметр.Имя]!, ОжидаемыйПараметр.ОжидаемыйТип)
            ;
        ;
        если ОжидаемыйПараметр.ЗначениеТочно != Неопределено
            если Параметры[ОжидаемыйПараметр.Имя] != ОжидаемыйПараметр.ЗначениеТочно
                выбросить новый ИсключениеНедопустимоеЗначениеПараметра("Недопустимое значение %{ПараметрыСтрока[ОжидаемыйПараметр.Имя]} параметра %{ОжидаемыйПараметр.Имя}, ожидается %{ОжидаемыйПараметр.ЗначениеТочно}",
                    ОжидаемыйПараметр.Имя, ПараметрыСтрока[ОжидаемыйПараметр.Имя]!, ОжидаемыйПараметр.ЗначениеТочно!)
            ;
        
        ; 
        если ОжидаемыйПараметр.ЗначениеДиапазон != Неопределено
            если (ОжидаемыйПараметр.ЗначениеДиапазон!.Мин != Неопределено и (Параметры[ОжидаемыйПараметр.Имя] как Число) < ОжидаемыйПараметр.ЗначениеДиапазон!.Мин!)
                или (ОжидаемыйПараметр.ЗначениеДиапазон!.Макс != Неопределено и (Параметры[ОжидаемыйПараметр.Имя] как Число)  > ОжидаемыйПараметр.ЗначениеДиапазон!.Макс!)
                выбросить новый ИсключениеЗначениеПараметраВнеДиапазона("Недопустимое значение %{ПараметрыСтрока[ОжидаемыйПараметр.Имя]} параметра %{ОжидаемыйПараметр.Имя}, ожидается %{ОжидаемыйПараметр.ЗначениеТочно}",
                    ОжидаемыйПараметр.Имя, ПараметрыСтрока[ОжидаемыйПараметр.Имя]!, ОжидаемыйПараметр.ЗначениеДиапазон!)
            ;
        ;
    ;
    
    возврат Параметры
;

@ВПроекте
перечисление ТипыПоляСхемы
    Строка умолчание,
    Число,
    Ууид,
    Булево,
    Дата,
    Момент,
    Соответствие
;

@ВПроекте
структура ПолеСхемы
    пер Обязательное: Булево|Соответствие<Строка, неизвестно> = Ложь
    пер ТипПоляСхемы: ТипыПоляСхемы|ЧитаемаяКоллекция<Строка> = ТипыПоляСхемы.Строка
;

@ВПроекте
структура ПоляСхемы
    обз пер Обязательное: Булево|Соответствие<Строка, неизвестно>
    обз пер Поля: ЧитаемыйМассив<ЧитаемыйМассив<неизвестно>|ЧитаемоеСоответствие<Строка, ПолеСхемы>>|ЧитаемоеСоответствие<Строка, ПолеСхемы>
;



@ВПроекте
метод ЗагрузитьФайл(ЗапросHttp: HttpСервисЗапрос|ОтветHttp, Размер: Число): ДвоичныйОбъект
    возврат ДанныеФайла(ЗапросHttp, Размер)
;

@ВПроекте
исключение ИсключениеТипУзлаНеСоответствуетСхеме
    обз пер ИмяУзла: Строка?
    обз пер ОжидаемыйТип: Тип
;

@ВПроекте
исключение ИсключениеТипЭлементаСпискаНеСоответствуетСхеме
    обз пер ИмяУзла: Строка?
    обз пер ОжидаемыйТип: Тип
    обз пер НомерЭлемента: Число
;

@ВПроекте
исключение ИсключениеОбязательноеПолеОтсутствует
    обз пер ИмяУзла: Строка?
    обз пер ИмяПоля: Строка
;

@ВПроекте
исключение ИсключениеНедопустимыйТипЗначенияПоля
    обз пер ИмяУзла: Строка?
    обз пер ИмяПоля: Строка
    обз пер ЗначениеПоля: Строка
    обз пер ОжидаемыйТип: ТипыПоляСхемы|ЧитаемаяКоллекция<Строка>
;

метод ПредставлениеУзла(ИмяУзла: Строка?): Строка
    возврат ИмяУзла == Неопределено ? "корневой" : ИмяУзла!
;

@ВПроекте
метод ПроверитьПоСхеме(Данные: ЧитаемоеСоответствие<Строка, неизвестно>|ЧитаемыйМассив<неизвестно>, Схема: ЧитаемыйМассив<ЧитаемыйМассив<неизвестно>|ЧитаемоеСоответствие<Строка, ПолеСхемы|ПоляСхемы>>|ЧитаемоеСоответствие<Строка, ПолеСхемы|ПоляСхемы>, ИмяУзла: Строка? = Неопределено)
    
    выбор Схема
    когда это ЧитаемоеСоответствие<Строка, ПолеСхемы|ПоляСхемы>
        если Данные это не ЧитаемоеСоответствие<Строка, неизвестно>
            выбросить новый ИсключениеТипУзлаНеСоответствуетСхеме(
                "Тип узла %{ПредставлениеУзла(ИмяУзла)} не соответствует схеме, ожидается Объект", ИмяУзла, Тип<ЧитаемоеСоответствие<Строка, неизвестно>>)
        ;
        ПроверитьОбъектПоСхеме(Данные как ЧитаемоеСоответствие<Строка, неизвестно>, Схема как ЧитаемоеСоответствие<Строка, ПолеСхемы|ПоляСхемы>, ИмяУзла)
    когда это ЧитаемыйМассив<ЧитаемоеСоответствие<Строка, ПолеСхемы|ПоляСхемы>>
        если Данные это не ЧитаемыйМассив<неизвестно>
            выбросить новый ИсключениеТипУзлаНеСоответствуетСхеме(
                "Тип узла %{ПредставлениеУзла(ИмяУзла)} не соответствует схеме, ожидается Список", ИмяУзла, Тип<ЧитаемыйМассив<неизвестно>>)
        ;
        ПроверитьСписокПоСхеме(Данные как ЧитаемыйМассив<неизвестно>, Схема как ЧитаемыйМассив<ЧитаемоеСоответствие<Строка, ПолеСхемы|ПоляСхемы>>, ИмяУзла)
    ;
;

метод ПроверитьОбъектПоСхеме(Объект: ЧитаемоеСоответствие<Строка, неизвестно>, Схема: ЧитаемоеСоответствие<Строка, ПолеСхемы|ПоляСхемы>, ИмяУзла: Строка? = Неопределено)

    для КлючЗначение из Схема
        пер ИмяПоля: Строка = КлючЗначение.Ключ
        пер ЭлементСхемы: ПолеСхемы|ПоляСхемы = КлючЗначение.Значение
        выбор КлючЗначение.Значение
        когда это ПолеСхемы
            ПроверитьПолеСхемы(ИмяПоля, ЭлементСхемы как ПолеСхемы, ИмяУзла, Объект)
        когда это ПоляСхемы
            ПроверитьПоляСхемы(ИмяПоля, ЭлементСхемы как ПоляСхемы, ИмяУзла, Объект)
        иначе
            // ошибка описания схемы
        ;
    ;
;

метод ПроверитьСписокПоСхеме(Список: ЧитаемыйМассив<неизвестно>, Схема: ЧитаемыйМассив<ЧитаемыйМассив<неизвестно>|ЧитаемоеСоответствие<Строка, ПолеСхемы|ПоляСхемы>>, ИмяУзла: Строка? = Неопределено)

    если Схема.Пусто()
        // ошибка описания схемы
    ;
    пер ЭлементСхемы: ЧитаемыйМассив<ЧитаемыйМассив<неизвестно>|ЧитаемоеСоответствие<Строка, ПолеСхемы|ПоляСхемы>>|ЧитаемоеСоответствие<Строка, ПолеСхемы|ПоляСхемы> = Схема[0]
    
    выбор ЭлементСхемы
    когда это ЧитаемоеСоответствие<Строка, ПолеСхемы|ПоляСхемы>
        для СтрокаСписка из Список
            если СтрокаСписка это не ЧитаемоеСоответствие<Строка, неизвестно>
                выбросить новый ИсключениеТипЭлементаСпискаНеСоответствуетСхеме(
                    "Элемент списка %{Список.Найти(СтрокаСписка)} узла %{ПредставлениеУзла(ИмяУзла)} не соответствует схеме, ожидается Объект", 
                    ИмяУзла, Тип<ЧитаемоеСоответствие<Строка, неизвестно>>, Список.Найти(СтрокаСписка)!)
            ;
            ПроверитьПоСхеме(СтрокаСписка, ЭлементСхемы как ЧитаемоеСоответствие<Строка, неизвестно>)
        ;
    когда это ЧитаемыйМассив<ЧитаемыйМассив<неизвестно>|ЧитаемоеСоответствие<Строка, ПолеСхемы|ПоляСхемы>>
        для СтрокаСписка из Список
            если СтрокаСписка это не ЧитаемыйМассив<неизвестно>
                выбросить новый ИсключениеТипЭлементаСпискаНеСоответствуетСхеме(
                    "Элемент списка %{Список.Найти(СтрокаСписка)} узла %{ПредставлениеУзла(ИмяУзла)} не соответствует схеме, ожидается Список", 
                    ИмяУзла, Тип<ЧитаемыйМассив<неизвестно>>, Список.Найти(СтрокаСписка)!)
            ;
            ПроверитьПоСхеме(СтрокаСписка, ЭлементСхемы как ЧитаемыйМассив<ЧитаемыйМассив<неизвестно>|ЧитаемоеСоответствие<Строка, ПолеСхемы|ПоляСхемы>>)
        ;
    иначе
        // ошибка описания схемы
    ;
;

метод ПроверитьПолеСхемы(ИмяПоля: Строка, Поле: ПолеСхемы, ИмяОбъекта: Строка?, Объект: ЧитаемоеСоответствие<Строка, неизвестно>)

    если не Объект.СодержитКлюч(ИмяПоля)
        если ПолеОбязательное(Поле.Обязательное, Объект) 
            // отсутствует обязательное поле
            выбросить новый ИсключениеОбязательноеПолеОтсутствует(
                    "Отсутствует обязательное поле %ИмяПоля объекта %{ПредставлениеУзла(ИмяОбъекта)}", ИмяОбъекта, ИмяПоля)
        иначе
            возврат
        ;
    ;

    пер НедопустимыйТип: Булево
    пер ИдентификаторЗначение: Ууид
    выбор Поле.ТипПоляСхемы 
    когда это ТипыПоляСхемы
        пер ТипПоля = Поле.ТипПоляСхемы как ТипыПоляСхемы
        выбор ТипПоля
        когда Строка
            НедопустимыйТип = Объект[ИмяПоля] это не Строка
        когда Число
            НедопустимыйТип = Объект[ИмяПоля] это не Число
        когда Булево
            НедопустимыйТип = Объект[ИмяПоля] это не Булево
        когда Дата
            НедопустимыйТип = Объект[ИмяПоля] это не ДатаВремя
                и Объект[ИмяПоля] это не Дата
        когда Момент
            НедопустимыйТип = Объект[ИмяПоля] это не Момент
        когда Соответствие
            НедопустимыйТип = Объект[ИмяПоля] это не Соответствие<Строка, неизвестно>
        когда Ууид
            если Объект[ИмяПоля] это Строка
                попытка 
                    ИдентификаторЗначение = новый Ууид(Объект[ИмяПоля])
                поймать Ошибка: ИсключениеНедопустимыйФормат
                    НедопустимыйТип = Истина
                ;
            иначе
                НедопустимыйТип = Истина
            ;
        ;
        если НедопустимыйТип
            выбросить новый ИсключениеНедопустимыйТипЗначенияПоля(
                "Неверное значение %ИмяПоля = %{Объект[ИмяПоля]} объекта %{ПредставлениеУзла(ИмяОбъекта)}, ожидается %{ТипПоля.ВСтроку()}", 
                ИмяОбъекта, ИмяПоля, Объект[ИмяПоля].ВСтроку(), ТипПоля)
        ;
    когда это ЧитаемаяКоллекция<Строка>
        пер ДопустимыеЗначения: ЧитаемаяКоллекция<Строка> = Поле.ТипПоляСхемы как ЧитаемаяКоллекция<Строка>
        если не ДопустимыеЗначения.Содержит(Объект[ИмяПоля])
            выбросить новый ИсключениеНедопустимыйТипЗначенияПоля(
                "Неверное значение %ИмяПоля = %{Объект[ИмяПоля]} объекта %{ПредставлениеУзла(ИмяОбъекта)}, 
                ожидается одно из %{новый Массив<Строка>(ДопустимыеЗначения).ВСтроку()}", 
                ИмяОбъекта, ИмяПоля, Объект[ИмяПоля].ВСтроку(), ДопустимыеЗначения)
        ;
    ;
;

метод ПроверитьПоляСхемы(ИмяПоля: Строка, Поля: ПоляСхемы, ИмяОбъекта: Строка?, Объект: ЧитаемоеСоответствие<Строка, неизвестно>)

    если не Объект.СодержитКлюч(ИмяПоля)
        если ПолеОбязательное(Поля.Обязательное, Объект) 
            выбросить новый ИсключениеОбязательноеПолеОтсутствует(
                    "Отсутствует обязательное поле %ИмяПоля объекта %{ПредставлениеУзла(ИмяОбъекта)}", ИмяОбъекта, ИмяПоля)
        иначе
            возврат
        ;
    ;
    ПроверитьПоСхеме(Объект[ИмяПоля], Поля.Поля, ИмяПоля)
;

метод ПолеОбязательное(Обязательное: Булево|Соответствие<Строка, неизвестно>, Данные: ЧитаемоеСоответствие<Строка, неизвестно>): Булево

    выбор Обязательное
    когда это Булево
        возврат Обязательное как Булево
    когда это Соответствие<Строка, неизвестно>
        пер УсловияОбязательности: Соответствие<Строка, неизвестно> = Обязательное как Соответствие<Строка, неизвестно>
        если УсловияОбязательности.Пусто()
            // ошибка описания схемы
        ;
        для Условие из УсловияОбязательности
            если не Данные.СодержитКлюч(Условие.Ключ) или Данные[Условие.Ключ] != Условие.Значение
                возврат Ложь
            ;
        ;
        возврат Истина
    ;
;

@ВПроекте
перечисление КодыСостояний
    ОК_200,
    Создано_201,
    Удалено_204,
    Редирект_303,
    ОшибкаЗапроса_400,
    Недоступно_403,
    НеНайдено_404,
    НеПоддерживаемыйТипДанных_406,
    ОшибкаСервера_500
;

@ВПроекте
метод ЗаполнитьОтвет(HTTPЗапрос: HttpСервисЗапрос, КодСостояния: КодыСостояний, ДанныеОтвета: ЧитаемыйМассив<ЧитаемоеСоответствие<Строка, неизвестно>>)
    ЗаполнитьОтвет(HTTPЗапрос, КодСостояния, СервисыHttp.ДанныеJsonВСтроку(ДанныеОтвета))
;

@ВПроекте
метод ЗаполнитьОтвет(HTTPЗапрос: HttpСервисЗапрос, КодСостояния: КодыСостояний, ДанныеОтвета: ЧитаемоеСоответствие<Строка, неизвестно>)
    ЗаполнитьОтвет(HTTPЗапрос, КодСостояния, СервисыHttp.ДанныеJsonВСтроку(ДанныеОтвета))
;

@ВПроекте
метод ЗаполнитьОтвет(HTTPЗапрос: HttpСервисЗапрос, Ошибка: Исключение, Свойства: Соответствие<Строка, Строка> = {:})
    
    пер Значение: Соответствие<Строка, Объект?> = ЗначениеОшибкиJson(Ошибка)
    пер КодСостояния: КодыСостояний?
    выбор Ошибка
    когда это ИсключениеОбязательныйПараметрОтсутствует
        КодСостояния = КодыСостояний.ОшибкаЗапроса_400
    когда это ИсключениеНедопустимыйТипПараметра
        КодСостояния = КодыСостояний.ОшибкаЗапроса_400
    когда это ИсключениеЗначениеПараметраВнеДиапазона
        КодСостояния = КодыСостояний.ОшибкаЗапроса_400
    когда это ИсключениеНедопустимоеЗначениеПараметра
        КодСостояния = КодыСостояний.ОшибкаЗапроса_400
    когда это ИсключениеТипУзлаНеСоответствуетСхеме
        КодСостояния = КодыСостояний.ОшибкаЗапроса_400
    когда это ИсключениеТипЭлементаСпискаНеСоответствуетСхеме
        КодСостояния = КодыСостояний.ОшибкаЗапроса_400
    когда это ИсключениеОбязательноеПолеОтсутствует
        КодСостояния = КодыСостояний.ОшибкаЗапроса_400
    когда это ИсключениеНедопустимыйТипЗначенияПоля
        КодСостояния = КодыСостояний.ОшибкаЗапроса_400
    когда это ИсключениеЧтенияJson
        КодСостояния = КодыСостояний.ОшибкаЗапроса_400   
    иначе
        КодСостояния = КодыСостояний.ОшибкаСервера_500
        Журналирование.ЗарегистрироватьОшибку(Ошибка)
    ;
    
    ЗаполнитьОтвет(HTTPЗапрос, КодСостояния!, ДанныеОтветаПоОшибке(Ошибка, Значение, Свойства))

;

@ВПроекте
метод ЗаполнитьОтвет(HTTPЗапрос: HttpСервисЗапрос, КодСостояния: КодыСостояний, ТелоОтвета: Строка)
    ЗаполнитьОтвет(HTTPЗапрос, КодСостояния)
    HTTPЗапрос.Ответ.Заголовки.Установить("Content-Type", "application/json")
    HTTPЗапрос.Ответ.УстановитьТело(ТелоОтвета)
;

@ВПроекте
метод ЗаполнитьОтвет(HTTPЗапрос: HttpСервисЗапрос, КодСостояния: КодыСостояний, ТелоОтвета: ДвоичныйОбъект)
    ЗаполнитьОтвет(HTTPЗапрос, КодСостояния)
    HTTPЗапрос.Ответ.Заголовки.Установить("Content-Type", "application/octet-stream")
    HTTPЗапрос.Ответ.Заголовки.Установить("Content-Length", ТелоОтвета.Размер.ВСтроку())
    HTTPЗапрос.Ответ.УстановитьТело(ТелоОтвета.Ссылка)
;

@ВПроекте
метод ЗаполнитьОтвет(HTTPЗапрос: HttpСервисЗапрос, КодСостояния: КодыСостояний)
    HTTPЗапрос.Ответ.УстановитьКодСтатуса(КодСостоянияЧислом(КодСостояния))
;

@ВПроекте
метод ЗначениеОшибкиJson(Ошибка: Исключение): Соответствие<Строка, Объект?>
    пер Значение: Соответствие<Строка, Объект?>

    выбор Ошибка
    когда это ИсключениеОбязательныйПараметрОтсутствует
        Значение = {"name": (Ошибка как ИсключениеОбязательныйПараметрОтсутствует).ИмяПараметра}
    когда это ИсключениеНедопустимыйТипПараметра
        Значение = {
            "name": (Ошибка как ИсключениеНедопустимыйТипПараметра).ИмяПараметра,
            "value": (Ошибка как ИсключениеНедопустимыйТипПараметра).ЗначениеПараметра,
            "expected": ТипПараметраВJson((Ошибка как ИсключениеНедопустимыйТипПараметра).ОжидаемыйТип)
        }
    когда это ИсключениеЗначениеПараметраВнеДиапазона
        Значение = {
            "name": (Ошибка как ИсключениеЗначениеПараметраВнеДиапазона).ИмяПараметра,
            "value": (Ошибка как ИсключениеЗначениеПараметраВнеДиапазона).ЗначениеПараметра,
            "expected": {
                "min": (Ошибка как ИсключениеЗначениеПараметраВнеДиапазона).Диапазон.Мин,
                "max": (Ошибка как ИсключениеЗначениеПараметраВнеДиапазона).Диапазон.Макс
            }
        }
    когда это ИсключениеНедопустимоеЗначениеПараметра
        Значение = {
            "name": (Ошибка как ИсключениеНедопустимоеЗначениеПараметра).ИмяПараметра,
            "value": (Ошибка как ИсключениеНедопустимоеЗначениеПараметра).ЗначениеПараметра,
            "expected": (Ошибка как ИсключениеНедопустимоеЗначениеПараметра).ОжидаемоеЗначение
        }
    когда это ИсключениеТипУзлаНеСоответствуетСхеме
        если (Ошибка как ИсключениеТипУзлаНеСоответствуетСхеме).ИмяУзла != Неопределено
            Значение.Вставить("node", (Ошибка как ИсключениеТипУзлаНеСоответствуетСхеме).ИмяУзла)
        ;
        Значение.Вставить("expected", ТипУзлаВJson((Ошибка как ИсключениеТипУзлаНеСоответствуетСхеме).ОжидаемыйТип))
    когда это ИсключениеТипЭлементаСпискаНеСоответствуетСхеме
        если (Ошибка как ИсключениеТипЭлементаСпискаНеСоответствуетСхеме).ИмяУзла != Неопределено
            Значение.Вставить("node", (Ошибка как ИсключениеТипЭлементаСпискаНеСоответствуетСхеме).ИмяУзла)
        ;
        Значение.Вставить("expected", ТипУзлаВJson((Ошибка как ИсключениеТипЭлементаСпискаНеСоответствуетСхеме).ОжидаемыйТип))
        Значение.Вставить("index", (Ошибка как ИсключениеТипЭлементаСпискаНеСоответствуетСхеме).НомерЭлемента)
    когда это ИсключениеОбязательноеПолеОтсутствует
        если (Ошибка как ИсключениеОбязательноеПолеОтсутствует).ИмяУзла != Неопределено
            Значение.Вставить("node", (Ошибка как ИсключениеОбязательноеПолеОтсутствует).ИмяУзла)
        ;
        Значение.Вставить("fieldName", (Ошибка как ИсключениеОбязательноеПолеОтсутствует).ИмяПоля)
    когда это ИсключениеНедопустимыйТипЗначенияПоля
        пер ОшибкаТипа: ИсключениеНедопустимыйТипЗначенияПоля = Ошибка как ИсключениеНедопустимыйТипЗначенияПоля
        если ОшибкаТипа.ИмяУзла != Неопределено
            Значение.Вставить("node", ОшибкаТипа.ИмяУзла)
        ;
        Значение.Вставить("fieldName", ОшибкаТипа.ИмяПоля)
        Значение.Вставить("fieldValue", ОшибкаТипа.ЗначениеПоля)
        выбор ОшибкаТипа.ОжидаемыйТип
        когда это ТипыПоляСхемы
            Значение.Вставить("expected", ТипПоляСхемыВJson(ОшибкаТипа.ОжидаемыйТип как ТипыПоляСхемы))
        когда это ЧитаемаяКоллекция<Строка>
            Значение.Вставить("expected", новый Массив<Строка>(ОшибкаТипа.ОжидаемыйТип как ЧитаемаяКоллекция<Строка>))
        ;
    когда это ИсключениеОбъектНеНайден
        Значение = {
            "idName": (Ошибка как ИсключениеОбъектНеНайден).ИмяПоля,
            "idValue": (Ошибка как ИсключениеОбъектНеНайден).Идентификатор                
        }    
    ;

    возврат Значение
;

метод КодСостоянияЧислом(КодСостояния: КодыСостояний): Число
    возврат {
        КодыСостояний.ОК_200: 200,
        КодыСостояний.Создано_201: 201,
        КодыСостояний.Удалено_204: 204,
        КодыСостояний.Редирект_303: 303,
        КодыСостояний.ОшибкаЗапроса_400: 400,
        КодыСостояний.Недоступно_403: 403,
        КодыСостояний.НеНайдено_404: 404,
        КодыСостояний.НеПоддерживаемыйТипДанных_406: 406,
        КодыСостояний.ОшибкаСервера_500: 500
        }[КодСостояния]
;

@ВПроекте
метод ИсключениеВJson(Исключение: Исключение): Строка
    пер ИзвестныеИсключения = <Тип, Строка>{
        Тип<ИсключениеОбязательныйПараметрОтсутствует>: "missingParameter",
        Тип<ИсключениеНедопустимыйТипПараметра>: "illegalParameterType",
        Тип<ИсключениеНедопустимоеЗначениеПараметра>: "illegalParameter",
        Тип<ИсключениеЗначениеПараметраВнеДиапазона>: "outOfRangeParameter",
        Тип<ИсключениеТипУзлаНеСоответствуетСхеме>: "nodeTypeDoesNotMatchSchema",
        Тип<ИсключениеОбязательноеПолеОтсутствует>: "missingRequired",
        Тип<ИсключениеНедопустимыйТипЗначенияПоля>: "incorrectValue",
        Тип<ИсключениеОбъектНеНайден>: "objectNotFound"
    }
    возврат ИзвестныеИсключения.СодержитКлюч(Исключение.ПолучитьТип()) ?
        ИзвестныеИсключения[Исключение.ПолучитьТип()]
    :
        Исключение.ПолучитьТип().ВСтроку()
;


метод ДанныеОтветаПоОшибке(Ошибка: Исключение, Значение: Соответствие<Строка, Объект?>, Свойства: Соответствие<Строка, Строка>): ЧитаемоеСоответствие<Строка, Соответствие<Строка, Объект?>|Строка>
    пер ДанныеОтвета: Соответствие<Строка, Соответствие<Строка, Объект?>|Строка> =
    {
        "code": ИсключениеВJson(Ошибка),
        "description": Ошибка.Описание,
        "value": Значение
    }
    ДанныеОтвета.ВставитьВсе(Свойства)
    возврат ДанныеОтвета
;

метод ТипПараметраВJson(ТипПараметра: ТипыПараметраUrl): Строка
    возврат {
        ТипыПараметраUrl.Строка: "string",
        ТипыПараметраUrl.Число: "number",
        ТипыПараметраUrl.Булево: "boolean",
        ТипыПараметраUrl.Ид: "ID",
        ТипыПараметраUrl.Месяц: "month-YYYY-MM"
    }[ТипПараметра]
;

метод ТипУзлаВJson(Тип: Тип): Строка
    возврат <Тип, Строка>{
        Тип<ЧитаемоеСоответствие<Строка, неизвестно>>: "object",
        Тип<ЧитаемыйМассив<неизвестно>>: "array"
    }[Тип]
;

метод ТипПоляСхемыВJson(ТипПоля: ТипыПоляСхемы): Строка
    возврат {
        ТипыПоляСхемы.Строка: "string",
        ТипыПоляСхемы.Число: "number",
        ТипыПоляСхемы.Булево: "boolean",
        ТипыПоляСхемы.Дата: "date",
        ТипыПоляСхемы.Ууид: "ID"
    }[ТипПоля]
;

@ВПроекте
метод РазмерСодержимого(ЗапросHttp: HttpСервисЗапрос|ОтветHttp): Число
    
    пер РазмерСтрокой: неизвестно
    если ЗапросHttp.ПолучитьТип() == Тип<HttpСервисЗапрос>
        РазмерСтрокой = (ЗапросHttp как HttpСервисЗапрос).Заголовки.ПолучитьПервый("Content-Length")
    иначе
        РазмерСтрокой = (ЗапросHttp как ОтветHttp).Заголовки.ПолучитьПервый("Content-Length")
    ;
    
    если РазмерСтрокой == Неопределено
        выбросить новый ИсключениеОбязательныйПараметрОтсутствует("Заголовок Content-Length не обнаружен", "Content-Length")
    ;

    пер Размер: Число?
    попытка
        Размер = новый Число(РазмерСтрокой!)
    поймать Ошибка: ИсключениеПроверкиТипа
        выбросить новый ИсключениеНедопустимыйТипПараметра("Не удалось преобразовать Content-Length к числу", 
            "Content-Length", РазмерСтрокой, ТипыПараметраUrl.Число)
    ;
    
    если Размер == Неопределено
        выбросить новый ИсключениеНедопустимоеЗначениеПараметра("Не обнаружено содержимое файла",
            "Content-Length", РазмерСтрокой, 0)
    ;
    
    возврат Размер
    
;

метод ДанныеФайла(ЗапросHttp: HttpСервисЗапрос|ОтветHttp, Размер: Число): ДвоичныйОбъект
    пер ТипСодержимого: Строка?
    пер Тело: ПотокЧтения? 
    выбор ЗапросHttp
    когда это HttpСервисЗапрос
        ТипСодержимого = (ЗапросHttp как HttpСервисЗапрос).Заголовки.ПолучитьПервый("Content-type")
        Тело = (ЗапросHttp как HttpСервисЗапрос).Тело
    когда это ОтветHttp
        ТипСодержимого = (ЗапросHttp как ОтветHttp).Заголовки.ПолучитьПервый("Content-type")
        Тело = (ЗапросHttp как ОтветHttp).Тело
    ;
    возврат ОбъектноеХранилище.Загрузить(Тело!, Размер, ТипСодержимого)
;

@ВПроекте
метод ЭтоИзображение(ЗапросHttp: HttpСервисЗапрос|ОтветHttp): Булево
    пер ТипСодержимого: неизвестно
    если ЗапросHttp.ПолучитьТип() == Тип<HttpСервисЗапрос>
        ТипСодержимого = (ЗапросHttp как HttpСервисЗапрос).Заголовки.ПолучитьПервый("Content-type")
    иначе
        ТипСодержимого = (ЗапросHttp как ОтветHttp).Заголовки.ПолучитьПервый("Content-type")
    ;
    выбор ТипСодержимого
        когда "image/jpeg"
            возврат Истина
        когда "image/png"
            возврат Истина
        когда "image/gif"
            возврат Истина
        когда "image/tiff"
            возврат Истина
        когда "image/webp"
            возврат Истина
        когда "image/vnd.wap.wbmp"
            возврат Истина
    ;
    возврат Ложь
;