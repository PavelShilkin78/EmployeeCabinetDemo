
конст ESSM: Строка = "ESSM"

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат КонтрольДоступа.РазрешенияДоступаТаблицыСервисныхДанныхПриложения()
;

//КонецОбласти

//Область СлужебныйПрограммныйИнтерфейс

@ВПроекте
метод СведенияТекущегоПользователя(): СведенияПользователей.Ссылка?
    знч ТекущийПользователь = Пользователи.ТекущийПользователь 
    знч Запрос = Запрос{
        Выбрать
            Ссылка
        Из
            СведенияПользователей
        Где
            Пользователь == %ТекущийПользователь
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    для РезультатЗапросаСтрока из РезультатЗапроса
        возврат РезультатЗапросаСтрока.Ссылка    
    ;  
    возврат Неопределено  
;

@ВПодсистеме
структура СведенияОПользователе
    обз пер Пользователь: Пользователи.Ссылка
    пер Ссылка: СведенияПользователей.Ссылка?
    пер Ид: Ууид
    пер ИдСписка: Ууид
    пер РолиДоступа: Массив<РолиДоступа>
;

@ВПодсистеме
метод ОбновитьСведенияПользователя(Сведения: СведенияОПользователе)

    знч ТекущиеСведения: СведенияОПользователе = СведенияПользователя(Сведения.Пользователь)
    знч СведенияОбъект = ТекущиеСведения.Ссылка?.ЗагрузитьОбъект()
        ?? новый СведенияПользователей.Объект()

    если СведенияОПользователеРавно(ТекущиеСведения, Сведения)
        возврат
    ;
    СведенияОбъект.Пользователь = Сведения.Пользователь
    СведенияОбъект.Ид = Сведения.Ид
    СведенияОбъект.ИдСписка = Сведения.ИдСписка
    СведенияОбъект.РолиДоступа.Очистить()
    СведенияОбъект.РолиДоступа.ДобавитьВсе(Сведения.РолиДоступа)
    СведенияОбъект.Записать()
;

метод СведенияПользователя(Пользователь: Пользователи.Ссылка): СведенияОПользователе
    знч Запрос = Запрос{
        Выбрать 
            СведенияПользователей.Ссылка,
            Роли.Элемент Как РольДоступа
        Из 
            СведенияПользователей Как СведенияПользователей
                Левое Соединение СведенияПользователей.РолиДоступа Как Роли
                По Роли.Владелец == СведенияПользователей.Ссылка
        Где 
            СведенияПользователей.Пользователь == %Пользователь
        Упорядочить По
            СведенияПользователей.Ссылка}
    исп РезультатЗапроса = Запрос.Выполнить()
    знч Сведения = новый СведенияОПользователе(Пользователь)
    для РезультатЗапросаСтрока из РезультатЗапроса
        Сведения.Ссылка = РезультатЗапросаСтрока.Ссылка
        пер РольДоступа: РолиДоступа|Null = РезультатЗапросаСтрока.РольДоступа
        если не (РольДоступа это Null)
            Сведения.РолиДоступа.Добавить(РольДоступа как РолиДоступа)
        ;
    ;
    возврат Сведения 
;

@ВПодсистеме
метод УдалитьСведенияПользователя(Пользователь: Пользователи.Ссылка)
    знч Сведения = СведенияПользователя(Пользователь)
    если Сведения.Ссылка == Неопределено
        возврат
    ;
    знч ЗаписьОбъект = Сведения.Ссылка!.ЗагрузитьОбъект()
    если ЗаписьОбъект == Неопределено
        возврат
    ;
    ЗаписьОбъект!.Удалить()
;

@ВПодсистеме
метод ЕстьАдминистраторАбонента(): Булево
    знч Запрос = Запрос{
        Выбрать Первые 1
            Ссылка
        Из 
            Пользователи Как Пользователи
            Внутреннее соединение СведенияПользователей.РолиДоступа Как РолиДоступа
            По РолиДоступа.Владелец.Пользователь == Пользователи.Ссылка
                И РолиДоступа.Элемент == %{РолиДоступа.АдминистраторАбонента}}
    исп РезультатЗапроса = Запрос.Выполнить() 
    знч РезультатЗапросаСтроки = новый ЧитаемыйМассив(РезультатЗапроса)
    возврат (не РезультатЗапросаСтроки.Пусто()) 
;

метод СведенияОПользователеРавно(Сведения1: СведенияОПользователе, Сведения2: СведенияОПользователе): Булево
    возврат 
        Сведения1.РолиДоступа.СодержитВсе(Сведения2.РолиДоступа) 
        и Сведения2.РолиДоступа.СодержитВсе(Сведения1.РолиДоступа) 
        и Сведения1.Ид == Сведения2.Ид 
        и Сведения1.ИдСписка == Сведения2.ИдСписка 
        и Сведения1.Пользователь == Сведения2.Пользователь 
;

//КонецОбласти