импорт ОбщиеСтандартные
импорт КонтрольДоступаСтандартные
импорт ФизическиеЛица
импорт УниверсальныеМеханизмы
импорт СтандартноеПриложение

конст ЗНАЧЕНИЕ_ИСТИНА_УТВЕРЖДЕНИЯ: Строка = "Истина"

конст УТВЕРЖДЕНИЕ_АДМИНИСТРАТОР_СЕРВИСА: Строка = "АдминистраторСервиса"
конст УТВЕРЖДЕНИЕ_АДМИНИСТРАТОР_АБОНЕНТА: Строка = "АдминистраторАбонента"
конст УТВЕРЖДЕНИЕ_ИНФОРМАЦИОННАЯ_СИСТЕМА: Строка = "ИнформационнаяСистема"
конст УТВЕРЖДЕНИЕ_МЕНЕДЖЕР_СЕРВИСА: Строка = "МенеджерСервиса"
конст АДМИНИСТРАТОРЫ_БЕЗ_ПОДТВЕРЖДЕНИЯ_УЧЕТНОЙ_ЗАПИСИ: Строка = "АдминистраторыБезПодтвержденияУчетнойЗаписи"

@ВПроекте
структура РезультатИзмененияОписанияПользователя
    пер ЕстьИзменения: Булево
    пер ОписаниеПользователя: ОписаниеПользователя?
;

@ВПроекте
метод СодержитУтверждениеЭтоАдминистраторАбонента(Утверждения: ЧитаемоеСоответствие<Строка, Строка>): Булево
    возврат Утверждения.СодержитКлюч(УТВЕРЖДЕНИЕ_АДМИНИСТРАТОР_АБОНЕНТА)
;

@ВПроекте
метод СписокБезПодтвержденияУчетнойЗаписи(): СписокПользователей
    возврат ПользователиСистемы.НайтиСписокБезПодтвержденияУчетнойЗаписи() 
        ?? ПользователиСистемы.СоздатьСписокБезПодтвержденияУчетнойЗаписи()
    
;

метод СоздатьСписокБезПодтвержденияУчетнойЗаписи(): СписокПользователей
	ПроверитьПраваАдминистратора()
    исп КонтекстДоступа.Привилегированный()
    пер СписокБезПодтвержденияУчетнойЗаписи = новый СписокПользователей(АДМИНИСТРАТОРЫ_БЕЗ_ПОДТВЕРЖДЕНИЯ_УЧЕТНОЙ_ЗАПИСИ)
    пер НастройкиСервисаУчетныхЗаписей: Множество<НастройкиСервисаУчетныхЗаписей>
    пер НастройкаСервисаУчетныхЗаписей = новый НастройкиСервисаУчетныхЗаписей(новый СервисУчетныхЗаписей(ВидСервисаУчетныхЗаписей.Локальный))
    НастройкаСервисаУчетныхЗаписей.Включено = Ложь
    НастройкаСервисаУчетныхЗаписей.СоздаватьПользователяПриВходе = Ложь
    НастройкиСервисаУчетныхЗаписей.Добавить(НастройкаСервисаУчетныхЗаписей)
    СписокБезПодтвержденияУчетнойЗаписи = СписокБезПодтвержденияУчетнойЗаписи.СНастройкамиСервисовУчетныхЗаписей(НастройкиСервисаУчетныхЗаписей)
    СпискиПользователей.Создать(СписокБезПодтвержденияУчетнойЗаписи)
    СпискиПользователей.Подключить(СписокБезПодтвержденияУчетнойЗаписи.Ид, Истина)
    возврат СписокБезПодтвержденияУчетнойЗаписи
;

метод НайтиСписокБезПодтвержденияУчетнойЗаписи(): СписокПользователей?
    исп КонтекстДоступа.Привилегированный()
    знч ПодключеныеСписки = СпискиПользователей.ПолучитьПодключенные()
    для Список из ПодключеныеСписки
        если Список.Название == АДМИНИСТРАТОРЫ_БЕЗ_ПОДТВЕРЖДЕНИЯ_УЧЕТНОЙ_ЗАПИСИ
            возврат Список
        ;
    ;
    возврат Неопределено
;

@ВПроекте
метод СоздатьПользователя(СвойстваПользователя: КонтрольДоступа.СвойстваПользователя, СписокПользователей: СписокПользователей? = Неопределено): Пользователи.Объект
    ПроверитьПраваАдминистратора()
    возврат СоздатьПользователяБезПроверкиПравАдминистратора(СвойстваПользователя, СписокПользователей)    
;

@ВПроекте
метод СоздатьПользователяБезПроверкиПравАдминистратора(СвойстваПользователя: КонтрольДоступа.СвойстваПользователя, СписокПользователей: СписокПользователей? = Неопределено): Пользователи.Объект
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()

    пер Описание = новый ОписаниеПользователя(
        (СписокПользователей ?? СпискиПользователей.ПолучитьСписокПоУмолчанию()).Ид,
        СвойстваПользователя.Представление, СвойстваПользователя.ЛогинПользователя)
    если СвойстваПользователя.ЭлектроннаяПочта != Неопределено
        Описание = Описание.СЭлектроннойПочтой(СвойстваПользователя.ЭлектроннаяПочта!)
    ;
    если СвойстваПользователя.Телефон != Неопределено
        Описание = Описание.СТелефоном(СвойстваПользователя.Телефон!)
    ;
    для Сервис из ОписаниеПользователяПоставщик.ПолучитьСервисы()
        пер РезультатИзмененияОписанияПользователя = Сервис.ОбновитьОписаниеПользователя(СвойстваПользователя.ФизическоеЛицо, Описание)
        если РезультатИзмененияОписанияПользователя.ЕстьИзменения
            Описание = РезультатИзмененияОписанияПользователя.ОписаниеПользователя
        ;
    ;
    ПользователиСервиса.Создать(Описание)
    знч Утверждения: Соответствие<Строка, Строка>
    если СвойстваПользователя.ФизическоеЛицо != Неопределено
        Утверждения.Вставить(Сервер.УТВЕРЖДЕНИЕ_ФИЗИЧЕСКОЕ_ЛИЦО, СвойстваПользователя.ФизическоеЛицо!.Ид.ВСтроку())
    ;
    для КлючИЗначение из РолиПоУтверждениям()
        если СвойстваПользователя.РолиДоступа.Содержит(КлючИЗначение.Значение)
            Утверждения.Вставить(КлючИЗначение.Ключ, ЗНАЧЕНИЕ_ИСТИНА_УТВЕРЖДЕНИЯ)
        ;
    ;

    пер Пользователь: Пользователи.Объект = Пользователи.Подключить(Описание.Ид)
    пер СервисЕсиа = ПодключенныйСервисЕсиа()
    если СервисЕсиа != Неопределено
        ВключитьЕсиаДляПользователей([Описание], СервисЕсиа)
    ;
   
    если СвойстваПользователя.ФизическоеЛицо != Неопределено
        знч ПользовательФизлица = новый ПользователиВладельцевКабинетов.НаборЗаписей()
        ПользовательФизлица.Фильтр.ФизическоеЛицо.Установить(СвойстваПользователя.ФизическоеЛицо)
        ПользовательФизлица.ДобавитьЗапись(ФизическоеЛицо = СвойстваПользователя.ФизическоеЛицо, Пользователь = Пользователь.Ссылка)
        ПользовательФизлица.Записать()
    ;
    
    Пользователи.УстановитьУтверждения(Пользователь.Ссылка, Утверждения)
    
    ПривилегированныйРежим.Закрыть()
    возврат Пользователь
;

@ВПроекте 
метод ПользовательСервисаСуществует(ПользовательПриложения: Пользователи.Ссылка): Булево
    ПроверитьПраваАдминистратора()
    исп КонтекстДоступа.Привилегированный()
    возврат ПользователиСервиса.Найти(ПользовательПриложения.ЗагрузитьОбъект()!.Ид) != Неопределено
;

@ВПроекте
метод ИзменитьПользователя(СвойстваПользователя: КонтрольДоступа.СвойстваПользователя)
    ПроверитьПраваАдминистратора()
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    пер Изменить: Булево
    пер Описание: ОписаниеПользователя = ПользователиСервиса.Найти(СвойстваПользователя.Ссылка.ЗагрузитьОбъект().Ид)
    если Описание.Логин != СвойстваПользователя.ЛогинПользователя
        Описание = Описание.СЛогином(СвойстваПользователя.ЛогинПользователя)
        Изменить = Истина
    ;
    если Описание.ЭлектроннаяПочта != СвойстваПользователя.ЭлектроннаяПочта и СвойстваПользователя.ЭлектроннаяПочта != Неопределено
        Описание = Описание.СЭлектроннойПочтой(СвойстваПользователя.ЭлектроннаяПочта)
        Изменить = Истина
    ;
    если Описание.Телефон != СвойстваПользователя.Телефон и СвойстваПользователя.Телефон != Неопределено
        Описание = Описание.СТелефоном(СвойстваПользователя.Телефон)
        Изменить = Истина
    ;
    для Сервис из ОписаниеПользователяПоставщик.ПолучитьСервисы()
        пер РезультатИзмененияОписанияПользователя = Сервис.ОбновитьОписаниеПользователя(СвойстваПользователя.ФизическоеЛицо, Описание)
        если РезультатИзмененияОписанияПользователя.ЕстьИзменения
            Описание = РезультатИзмененияОписанияПользователя.ОписаниеПользователя
            Изменить = Истина
        ;
    ;
    если Изменить
        ПользователиСервиса.Изменить(Описание)
    ;
    если СвойстваПользователя.ФизическоеЛицо != Неопределено
            если Изменить 
                знч ПользовательФизлица = новый ПользователиВладельцевКабинетов.НаборЗаписей()
                ПользовательФизлица.Фильтр.ФизическоеЛицо.Установить(СвойстваПользователя.ФизическоеЛицо)
                ПользовательФизлица.Прочитать()
                если ПользовательФизлица.Пусто()
                    ПользовательФизлица.ДобавитьЗапись(ФизическоеЛицо = СвойстваПользователя.ФизическоеЛицо, Пользователь = СвойстваПользователя.Ссылка)
                    ПользовательФизлица.Записать()
                ;
            ;
            
            Пользователи.УстановитьУтверждение(
                СвойстваПользователя.Ссылка, 
                Сервер.УТВЕРЖДЕНИЕ_ФИЗИЧЕСКОЕ_ЛИЦО, 
                СвойстваПользователя.ФизическоеЛицо!.Ид.ВСтроку())
    иначе
        Пользователи.УдалитьУтверждение(СвойстваПользователя.Ссылка, Сервер.УТВЕРЖДЕНИЕ_ФИЗИЧЕСКОЕ_ЛИЦО)
    ;
    ЗаполнитьУтвержденияПоРолямДоступа(СвойстваПользователя.Ссылка, СвойстваПользователя.РолиДоступа)
    ПривилегированныйРежим.Закрыть()
;

@ВПроекте
метод ИзменитьКонтактныеДанныеПользователя(Физлицо: ФизическиеЛица.Ссылка, Телефон: Строка, ЭлектроннаяПочта: Строка)
    пер Пользователь: Пользователи.Ссылка? = ПользователиВладельцевКабинетов.ПользовательПоФизлицу(Физлицо)
    если Пользователь == Неопределено
        возврат
    ;
    знч ПользовательОбъект = Пользователь.ЗагрузитьОбъект()
    если ПользовательОбъект == Неопределено
        возврат
    ;
    
    попытка
        Телефон = МенеджерСтрок.КанонизированныйНомерТелефона(Телефон)
        ПроверитьНаличиеРоли([РолиДоступа.АдминистраторАбонента, РолиДоступа.ИнформационнаяСистема, РолиДоступа.МенеджерСервиса])
        исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
        пер Изменить: Булево
        пер Описание: ОписаниеПользователя = ПользователиСервиса.Найти(ПользовательОбъект.Ид)
        если Описание.ЭлектроннаяПочта != ЭлектроннаяПочта
            Описание = Описание.СЭлектроннойПочтой(ЭлектроннаяПочта)
            Изменить = Истина
        ;
        если Описание.Телефон != Телефон
            Описание = Описание.СТелефоном(Телефон)
            Изменить = Истина
        ;
        пер ОписаниеСодержитЕсиа = Описание.УчетнаяЗаписьЕсиа != Неопределено и не Описание.УчетнаяЗаписьЕсиа.ИдЕсиа.Пусто()
        если ОписаниеСодержитЕсиа и Изменить
            Описание = СУчетнойЗаписьюЕсиа(Описание, Неопределено, Неопределено, ЭлектроннаяПочта, Телефон)
        ;  
        если Изменить
            ПроверитьУникальностьКонтактовОписанияПользователя(Пользователь, Телефон, ЭлектроннаяПочта)
            ПользователиСервиса.Изменить(Описание)
        ;
        ПривилегированныйРежим.Закрыть()
    поймать Ошибка: МенеджерСтрок.ИсключениеНедопустимыеСимволыНомераТелефона|МенеджерСтрок.ИсключениеНеверныйФорматНомераТелефона
        Журналирование.ЗарегистрироватьОшибку(Ошибка)
    поймать Ошибка: ИсключениеPaas   
        выбросить новый ИсключениеВыполнения("Невозможно изменить контактные данные пользователя $Пользователь", Ошибка)
    ;
;

@ВПроекте 
метод ОбновитьУчетнуюЗаписьЕсиа(
        ФизическоеЛицо: ФизическиеЛица.Ссылка, 
        Снилс: Строка? = Неопределено, 
        Инн: Строка? = Неопределено, 
        ЭлектроннаяПочта: Строка? = Неопределено, 
        Телефон: Строка? = Неопределено)
    
    пер Пользователь: Пользователи.Ссылка? = ПользователиВладельцевКабинетов.ПользовательПоФизлицу(ФизическоеЛицо)
    если Пользователь != Неопределено
        исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
        пер Описание: ОписаниеПользователя = ПользователиСервиса.Найти(Пользователь.ЗагрузитьОбъект().Ид)
        пер ОписаниеСЕсиа = СУчетнойЗаписьюЕсиа(Описание, Снилс, Инн, ЭлектроннаяПочта, Телефон)
        ПользователиСервиса.Изменить(ОписаниеСЕсиа)
        ПривилегированныйРежим.Закрыть()
    ;
;

@ВПроекте
метод УдалитьПользователя(ПользовательСсылка: Пользователи.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка? = Неопределено)
    ПроверитьПраваАдминистратора()
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч ПользовательОбъект: Пользователи.Объект? = ПользовательСсылка.ЗагрузитьОбъект()
    Пользователи.Отключить(ПользовательСсылка)
    ПользователиСервиса.Удалить(ПользовательОбъект!.Ид)
    если ФизическоеЛицо != Неопределено
        знч ПользовательФизлица = новый ПользователиВладельцевКабинетов.НаборЗаписей()
        ПользовательФизлица.Фильтр.ФизическоеЛицо.Установить(ФизическоеЛицо)
        ПользовательФизлица.Записать()
    ;
    ПривилегированныйРежим.Закрыть()
;

@ВПроекте
метод СвойстваПользователя(Пользователь: Пользователи.Ссылка?): КонтрольДоступа.СвойстваПользователя
    ПроверитьПраваАдминистратора()
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    
    знч СвойстваПользователя: КонтрольДоступа.СвойстваПользователя
    если Пользователь == Неопределено
        возврат СвойстваПользователя
    ;
    знч ПользовательОбъект: Пользователи.Объект? = Пользователь!.ЗагрузитьОбъект()
    если ПользовательОбъект == Неопределено
        возврат СвойстваПользователя
    ;
    СвойстваПользователя.Ссылка = Пользователь
    СвойстваПользователя.Представление = ПользовательОбъект!.Представление
    СвойстваПользователя.РолиДоступа = РолиДоступаПоУтверждениям(ПользовательОбъект!.Утверждения)
    СвойстваПользователя.ИдПользователя = ПользовательОбъект!.Ид
    СвойстваПользователя.Утверждения = ПользовательОбъект!.Утверждения
    СвойстваПользователя.ФизическоеЛицо = ФизическоеЛицоПользователя(ПользовательОбъект!.Утверждения)
    СвойстваПользователя.Администратор = ПользовательОбъект!.Администратор
    знч Описание: ОписаниеПользователя? = ПользователиСервиса.Найти(ПользовательОбъект!.Ид)
    если Описание != Неопределено
        СвойстваПользователя.ЛогинПользователя = Описание!.Логин
        СвойстваПользователя.ЭлектроннаяПочта = Описание!.ЭлектроннаяПочта.Пусто() ? Неопределено : Описание!.ЭлектроннаяПочта
        СвойстваПользователя.Телефон = Описание!.Телефон.Пусто() ? Неопределено : Описание!.Телефон
        знч Токены: ЧитаемоеМножество<ОписаниеЗапросаТокенаДоступа> = 
            ПользователиСервиса.ПолучитьОписанияЗапросовТокеновДоступа(ПользовательОбъект!.Ид)
        для ТокенДоступа из Токены
            СвойстваПользователя.ТокеныДоступа.Добавить(
                новый МенеджерПравДоступа.ТокенДоступаПользователя(Ид = ТокенДоступа.Ид, Описание = ТокенДоступа.Описание))
        ;
    ;
    ПривилегированныйРежим.Закрыть()
    возврат СвойстваПользователя
;

@ВПодсистеме
метод ФизическоеЛицоПользователя(Утверждения: ЧитаемоеСоответствие<Строка, Строка>): ФизическиеЛица.Ссылка?
    если Утверждения.СодержитКлюч(Сервер.УТВЕРЖДЕНИЕ_ФИЗИЧЕСКОЕ_ЛИЦО)
        возврат ФизическиеЛица.ПолучитьСсылку(новый Ууид(Утверждения.Получить(Сервер.УТВЕРЖДЕНИЕ_ФИЗИЧЕСКОЕ_ЛИЦО)))
    ;
    возврат Неопределено
;

@ВПроекте
метод УстановитьУтверждениеТипаБулево(Пользователь: Пользователи.Ссылка, Утверждение: Строка, Значение: Булево)
    если Значение == Истина
        Пользователи.УстановитьУтверждение(Пользователь, Утверждение, ЗНАЧЕНИЕ_ИСТИНА_УТВЕРЖДЕНИЯ)
    иначе
        Пользователи.УдалитьУтверждение(Пользователь, Утверждение)
    ;
;

@ВПодсистеме
метод СодержитУтверждениеТипаБулево(Утверждения: ЧитаемоеСоответствие<Строка, Строка>, Утверждение: Строка): Булево
    возврат Утверждения.ПолучитьИлиУмолчание(Утверждение) == ЗНАЧЕНИЕ_ИСТИНА_УТВЕРЖДЕНИЯ
;

@ВПроекте
метод ПроверитьПраваИнформационнойСистемы()
    если Пользователи.ТекущийИдАутентификации == Безопасность.ВстроенныеИдАутентификации.Система
        // это запуск из запланированного задания, проверка должна была быть выполнена перед планированием.
        возврат
    ;
    если не ЭтоИнформационнаяСистема()
        выбросить новый ИсключениеВыполнения("Операция выполняется только клиентской информационной системой")
    ;
;

/*
Проверяет наличие у текущего пользователя хоть одной из переданных ролей
Если ни одной из ролей нет - выбрасывает исключение

Применяется при необходимости повысить контекст доступа текущего пользователя  
*/

метод ПроверитьНаличиеРоли(РолиДоступа: ЧитаемаяКоллекция<РолиДоступа>)
    если Пользователи.ТекущийИдАутентификации == Безопасность.ВстроенныеИдАутентификации.Система
        // это запуск из запланированного задания, проверка должна была быть выполнена перед планированием.
        возврат
    ;
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    пер ПереченьРолей: Строка
    пер Утверждения: ЧитаемоеСоответствие<Строка, Строка> = {:}
    если Пользователи.ТекущийПользователь != Неопределено
        знч ПользовательОбъект: Пользователи.Объект? = Пользователи.ТекущийПользователь!.ЗагрузитьОбъект()
        если ПользовательОбъект != Неопределено
            если ПользовательОбъект!.Администратор
                возврат
            ;
            Утверждения = ПользовательОбъект!.Утверждения
        ;
    ;
    ПривилегированныйРежим.Закрыть()
    пер НужнаЗапятая: Булево
    для Роль из РолиДоступа
        если СодержитРольПоУтверждениям(Утверждения, Роль)
            возврат
        ;            
        ПереченьРолей += (НужнаЗапятая ? ", " : "" + УтвержденияПоРолям()[Роль])
        НужнаЗапятая = Истина
    ; 
    выбросить новый ИсключениеВыполнения("Операция доступна только пользователю у которого есть хоть одна из ролей: %ПереченьРолей")
;

@ВПроекте 
метод ПользователиПоИдентификаторам(): Соответствие<ИдПользователя, ОписаниеПользователя>
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч Пользователи: Массив<ОписаниеПользователя> = 
        СпискиПользователей.ПолучитьПользователей(СпискиПользователей.ПолучитьСписокПоУмолчанию().Ид)
    знч ПользователиПоИдентификаторам: Соответствие<ИдПользователя, ОписаниеПользователя>
    для ОписаниеПользователя из Пользователи
        ПользователиПоИдентификаторам[ОписаниеПользователя.Ид] = ОписаниеПользователя
    ;
    ПривилегированныйРежим.Закрыть()
    возврат ПользователиПоИдентификаторам
;

@ВПроекте
метод ИспользованныеЛогины(ПользователиПоИдентификаторам: ЧитаемоеСоответствие<ИдПользователя, ОписаниеПользователя>): Соответствие<Строка, Строка>
    знч ИспользованныеЛогины: Соответствие<Строка, Строка>
    для КлючЗначение из ПользователиПоИдентификаторам
        знч ОписаниеПользователя: ОписаниеПользователя = КлючЗначение.Значение
        ИспользованныеЛогины.Вставить(ОписаниеПользователя.Логин, ОписаниеПользователя.Представление)
    ;
    возврат ИспользованныеЛогины
; 

@ВПроекте
метод ИспользованныеТелефоны(ПользователиПоИдентификаторам: ЧитаемоеСоответствие<ИдПользователя, ОписаниеПользователя>): Соответствие<Строка, Строка>
    знч ИспользованныеТелефоны: Соответствие<Строка, Строка>
    для КлючЗначение из ПользователиПоИдентификаторам
        знч ОписаниеПользователя: ОписаниеПользователя = КлючЗначение.Значение
        если не ОписаниеПользователя.Телефон.Пусто()
            ИспользованныеТелефоны.Вставить(ОписаниеПользователя.Телефон, ОписаниеПользователя.Представление)
        ;
    ;
    возврат ИспользованныеТелефоны
; 

@ВПроекте
метод ИспользованныеАдресаЭлектроннойПочты(ПользователиПоИдентификаторам: ЧитаемоеСоответствие<ИдПользователя, ОписаниеПользователя>): Соответствие<Строка, Строка>
    знч ИспользованныеАдресаЭлектроннойПочты: Соответствие<Строка, Строка>
    для КлючЗначение из ПользователиПоИдентификаторам
        знч ОписаниеПользователя: ОписаниеПользователя = КлючЗначение.Значение
        если не ОписаниеПользователя.ЭлектроннаяПочта.Пусто()
            ИспользованныеАдресаЭлектроннойПочты.Вставить(ОписаниеПользователя.ЭлектроннаяПочта, ОписаниеПользователя.Представление)
        ;
    ;
    возврат ИспользованныеАдресаЭлектроннойПочты
; 

@ВПроекте
структура КонтактнаяИнформацияПользователя
    знч Телефон: Строка
    знч ЭлектроннаяПочта: Строка
;

@ВПроекте
метод КонтактнаяИнформацияПользователя(Пользователь: Пользователи.Ссылка?): КонтактнаяИнформацияПользователя
    
    если Пользователь == Неопределено
        возврат новый КонтактнаяИнформацияПользователя()
    ;
    
    знч ПользовательОбъект = Пользователь.ЗагрузитьОбъект()
    если ПользовательОбъект == Неопределено
        возврат новый КонтактнаяИнформацияПользователя()
    ;
    
    исп КонтекстДоступа.Привилегированный()
    пер Телефон: Строка
    пер ЭлектроннаяПочта: Строка
    для Список из СпискиПользователей.ПолучитьПодключенные()
        для ОписаниеПользователя из СпискиПользователей.ПолучитьПользователей(Список.Ид)
            если ОписаниеПользователя.Ид == ПользовательОбъект.Ид
                Телефон = ОписаниеПользователя.Телефон
                ЭлектроннаяПочта = ОписаниеПользователя.ЭлектроннаяПочта 
                прервать
            ;
        ;
    ;
    возврат новый КонтактнаяИнформацияПользователя(Телефон, ЭлектроннаяПочта)
;

@ВПроекте
метод СинхронизироватьПользователей()
    ПроверитьПраваАдминистратора()
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч ПользователиСписка: Массив<ОписаниеПользователя> = 
        СпискиПользователей.ПолучитьПользователей(СпискиПользователей.ПолучитьСписокПоУмолчанию().Ид)
    знч ИдентификаторыКУдалению: Массив<ИдПользователя>
    для Описание из ПользователиСписка
        если Пользователи.Найти(Описание.Ид) == Неопределено
            ИдентификаторыКУдалению.Добавить(Описание.Ид)
        ;
    ;
    ПользователиСервиса.Удалить(ИдентификаторыКУдалению)
    ПривилегированныйРежим.Закрыть()
;

@ВПроекте
метод ЭтоИнформационнаяСистема(): Булево
    возврат Пользователи.ТекущийПользователь?.ЗагрузитьОбъект()?.Утверждения.СодержитКлюч(УТВЕРЖДЕНИЕ_ИНФОРМАЦИОННАЯ_СИСТЕМА) ?? Ложь
;

@ВПроекте
метод ИдПользователяСистемы(Пользователь: Пользователи.Ссылка): Ууид

    знч ПользовательОбъект: Пользователи.Объект? = Пользователь.ЗагрузитьОбъект() 
    знч Описание: ОписаниеПользователя? = ПользователиСервиса.Найти(ПользовательОбъект!.Ид)
    
    возврат Описание.Ид.Ид

;

@ВПроекте
метод РолиДоступаПоУтверждениям(Утверждения: ЧитаемоеСоответствие<Строка, Строка>): Массив<РолиДоступа>
    знч Роли: Массив<РолиДоступа>
    для КлючИЗначение из РолиПоУтверждениям()
        если СодержитУтверждениеТипаБулево(Утверждения, КлючИЗначение.Ключ)
            Роли.Добавить(КлючИЗначение.Значение)
        ;
    ;
    возврат Роли
;

метод ЗаполнитьУтвержденияПоРолямДоступа(Пользователь: Пользователи.Ссылка, РолиДоступа: ЧитаемаяКоллекция<РолиДоступа>)
    для КлючИЗначение из РолиПоУтверждениям()
        УстановитьУтверждениеТипаБулево(Пользователь, КлючИЗначение.Ключ, РолиДоступа.Содержит(КлючИЗначение.Значение))
    ;
;

@ВПодсистеме
метод СодержитРольПоУтверждениям(Утверждения: ЧитаемоеСоответствие<Строка, Строка>, Роль: РолиДоступа): Булево
    возврат СодержитУтверждениеТипаБулево(Утверждения, УтвержденияПоРолям()[Роль])
;

@ВПроекте
метод ТекущееФизическоеЛицо(): ФизическиеЛица.Ссылка?
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    если Пользователи.ТекущийПользователь == Неопределено
        возврат Неопределено
    ;
    знч ПользовательОбъект = Пользователи.ТекущийПользователь!.ЗагрузитьОбъект()
    если ПользовательОбъект == Неопределено
        возврат Неопределено
    ; 
    если не ПользовательОбъект!.Утверждения.СодержитКлюч(Сервер.УТВЕРЖДЕНИЕ_ФИЗИЧЕСКОЕ_ЛИЦО)
        возврат Неопределено
    ;
    знч UUIDФизическогоЛицаСтрокой = ПользовательОбъект!.Утверждения.Получить(Сервер.УТВЕРЖДЕНИЕ_ФИЗИЧЕСКОЕ_ЛИЦО)
    ПривилегированныйРежим.Закрыть()
    возврат ФизическиеЛица.ПолучитьСсылку(новый Ууид(UUIDФизическогоЛицаСтрокой))
;

@ВПроекте
метод ЕсиаПодключен(): Булево
    ПроверитьПраваАдминистратора()
    возврат ПодключенныйСервисЕсиа() != Неопределено
;

@ВПроекте 
метод ПараметрыПодключенияЕсиа(): ПараметрыПодключенияЕсиа
    ПроверитьПраваАдминистратора()
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    пер Настройки: Соответствие<Строка, Строка>
    знч ПараметрыПодключенияЕсиа: ПараметрыПодключенияЕсиа
    пер СписокПользователей: СписокПользователей = СпискиПользователей.ПолучитьСписокПоУмолчанию()
    ПривилегированныйРежим.Закрыть()
    для НастройкиСервиса из СписокПользователей.НастройкиСервисовУчетныхЗаписей
        если НастройкиСервиса.Сервис.Вид == ВидСервисаУчетныхЗаписей.Есиа 
            Настройки = НастройкиСервиса.ДополнительныеНастройки
            ПараметрыПодключенияЕсиа.АдресАвторизации = Настройки["authorization-endpoint"]
            ПараметрыПодключенияЕсиа.АдресПользовательскойИнформации = Настройки["userinfo-endpoint"]
            ПараметрыПодключенияЕсиа.АдресТокена = Настройки["token-endpoint"]
            ПараметрыПодключенияЕсиа.ВидХранилищаКлючей = Настройки["key-store-name"]
            ПараметрыПодключенияЕсиа.ИдентификаторИС = Настройки["client-id"]
            ПараметрыПодключенияЕсиа.ПсевдонимЗаписиЗакрытогоКлюча = Настройки["alias"]
            ПараметрыПодключенияЕсиа.ИдентифицироватьПоСНИЛС = Настройки["identify-by"].Содержит("snils")
            ПараметрыПодключенияЕсиа.ИдентифицироватьПоАдресуПочты = Настройки["identify-by"].Содержит("email")
            ПараметрыПодключенияЕсиа.ИдентифицироватьПоИНН = Настройки["identify-by"].Содержит("inn")
            ПараметрыПодключенияЕсиа.ИдентифицироватьПоНомеруТелефона = Настройки["identify-by"].Содержит("phone")
            
        ;
    ;
    возврат ПараметрыПодключенияЕсиа
;

@ВПроекте
метод ПодключитьЕсиа(НастройкиПодключения: ПараметрыПодключенияЕсиа)
    ПроверитьПраваАдминистратора()
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    пер СписокПользователей: СписокПользователей = СпискиПользователей.ПолучитьСписокПоУмолчанию()
    пер НовыеНастройки = новый Множество<НастройкиСервисаУчетныхЗаписей>()
    для НастройкиСервиса из СписокПользователей.НастройкиСервисовУчетныхЗаписей
        если НастройкиСервиса.Сервис.Вид != ВидСервисаУчетныхЗаписей.Есиа
            НовыеНастройки.Добавить(НастройкиСервиса)
        ;
    ;       
    пер Есиа = новый СервисУчетныхЗаписей(ВидСервисаУчетныхЗаписей.Есиа, "esia")
    пер НастройкиЕсиа = новый НастройкиСервисаУчетныхЗаписейЕсиа(Есиа)
  
    НастройкиЕсиа.АдресАвторизации = НастройкиПодключения.АдресАвторизации
    НастройкиЕсиа.АдресТокена = НастройкиПодключения.АдресТокена
    НастройкиЕсиа.АдресПользовательскойИнформации = НастройкиПодключения.АдресПользовательскойИнформации
    НастройкиЕсиа.ИдКлиента = НастройкиПодключения.ИдентификаторИС
    
    НастройкиЕсиа.ВидХранилищаКлючей = НастройкиПодключения.ВидХранилищаКлючей
    НастройкиЕсиа.ПарольХранилищаКлючей = НастройкиПодключения.ПарольХранилищаКлючей
    
    НастройкиЕсиа.ПсевдонимЗаписиЗакрытогоКлюча = НастройкиПодключения.ПсевдонимЗаписиЗакрытогоКлюча

    если не НастройкиПодключения.ПарольЗакрытогоКлюча.Пусто()
        НастройкиЕсиа.ПарольЗакрытогоКлюча = НастройкиПодключения.ПарольЗакрытогоКлюча
    ;
    пер ПоляИдентификации = новый Массив<МетодИдентификацииЕсиа>()
    если НастройкиПодключения.ИдентифицироватьПоСНИЛС
        ПоляИдентификации.Добавить(МетодИдентификацииЕсиа.Снилс) 
    ;
    если НастройкиПодключения.ИдентифицироватьПоАдресуПочты
        ПоляИдентификации.Добавить(МетодИдентификацииЕсиа.АдресПочты) 
    ;
    если НастройкиПодключения.ИдентифицироватьПоНомеруТелефона
        ПоляИдентификации.Добавить(МетодИдентификацииЕсиа.Телефон) 
    ;
    если НастройкиПодключения.ИдентифицироватьПоИНН
        ПоляИдентификации.Добавить(МетодИдентификацииЕсиа.Инн) 
    ;
    НастройкиЕсиа.ИдентифицироватьПо = ПоляИдентификации
    если не НастройкиПодключения.СертификатДляОтветовЕсиа.Пусто()
        НастройкиЕсиа.СертификатДляОтветовЕсиа = НастройкиПодключения.СертификатДляОтветовЕсиа.ВБайты()
    ;
    
    НовыеНастройки.Добавить(НастройкиЕсиа)
    пер СписокСЕсиа = СписокПользователей.СНастройкамиСервисовУчетныхЗаписей(НовыеНастройки)
    СпискиПользователей.Изменить(СписокСЕсиа)
    знч ПользователиПриложения: Массив<ОписаниеПользователя> = 
        СпискиПользователей.ПолучитьПользователей(СписокСЕсиа.Ид)   
        
    ВключитьЕсиаДляПользователей(ПользователиПриложения, Есиа)   
    ПривилегированныйРежим.Закрыть()
;


метод ВключитьЕсиаДляПользователей(ПодключаемыеПользователи: Массив<ОписаниеПользователя>, СервисЕсиа: СервисУчетныхЗаписей)
    пер ПользователиФизЛиц = новый Соответствие<ФизическиеЛица.Ссылка, ОписаниеПользователя>()
    для ОписаниеПользователя из ПодключаемыеПользователи
        пер ПользовательСсылка = Пользователи.Найти(ОписаниеПользователя.Ид)
        пер ФизическоеЛицо = ФизическоеЛицоПользователя(СвойстваПользователя(ПользовательСсылка).Утверждения)
        если ФизическоеЛицо != Неопределено
            ПользователиФизЛиц.Вставить(ФизическоеЛицо, ОписаниеПользователя)  
        ;
    ;
    пер ЗапрашиваемыеДанные = новый ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц()
    ЗапрашиваемыеДанные.ПерсональныеДанные = Истина 
    пер ДанныеФизЛиц = ФизЛица.ДанныеФизическихЛиц(ПользователиФизЛиц.Ключи(), ЗапрашиваемыеДанные)  
    для ДанныеФизЛица из ДанныеФизЛиц
        пер Пользователь = ПользователиФизЛиц[ДанныеФизЛица.Ключ]
        ВключитьЕсиаДляПользователя(
            Пользователь,
            ДанныеФизЛица.Значение.ПерсональныеДанные.СНИЛС,
            Пользователь.ЭлектроннаяПочта,
            Пользователь.Телефон,
            ДанныеФизЛица.Значение.ПерсональныеДанные.ИНН,
            СервисЕсиа
        )
    ;    
;

метод ВключитьЕсиаДляПользователя(ОписаниеПользователя: ОписаниеПользователя, Снилс: Строка,
    ЭлектроннаяПочта: Строка, Телефон: Строка, ИНН: Строка, СервисЕсиа: СервисУчетныхЗаписей)
    
    пер УчетныеЗаписи = новый Множество<УчетнаяЗапись>()
    для ТекущаяУчетнаяЗапись из ОписаниеПользователя.УчетныеЗаписи
        если ТекущаяУчетнаяЗапись.Сервис.Вид != ВидСервисаУчетныхЗаписей.Есиа
            УчетныеЗаписи.Добавить(ТекущаяУчетнаяЗапись)
        ;
    ;
    ОписаниеПользователя = ОписаниеПользователя.СУчетнымиЗаписями(УчетныеЗаписи)
    пер УчетнаяЗапись = новый УчетнаяЗаписьЕсиа(СервисЕсиа)
    УчетнаяЗапись.АдресПочты = ЭлектроннаяПочта
    УчетнаяЗапись.Снилс = Снилс
    УчетнаяЗапись.Инн = ИНН
    УчетнаяЗапись.Телефон = Телефон
    пер ОписаниеСЕсиа = СУчетнойЗаписьюЕсиа(ОписаниеПользователя, Снилс, ИНН, ЭлектроннаяПочта, Телефон)
    ПользователиСервиса.Изменить(ОписаниеСЕсиа)       
;

метод СУчетнойЗаписьюЕсиа(ОписаниеПользователя: ОписаниеПользователя, 
    Снилс: Строка?, Инн: Строка?, ЭлектроннаяПочта: Строка?, Телефон: Строка?): ОписаниеПользователя
    
    пер УчетнаяЗаписьЕсиа = ОписаниеПользователя.УчетнаяЗаписьЕсиа
    если УчетнаяЗаписьЕсиа == Неопределено
        возврат ОписаниеПользователя
    ;
    если Снилс != Неопределено
        УчетнаяЗаписьЕсиа.Снилс = Снилс
    ;
    если Инн != Неопределено
        УчетнаяЗаписьЕсиа.Инн = Инн
    ;
    если ЭлектроннаяПочта != Неопределено
        УчетнаяЗаписьЕсиа.АдресПочты = ЭлектроннаяПочта
    ;
    если Телефон != Неопределено
        УчетнаяЗаписьЕсиа.Телефон = Телефон
    ;
    
    возврат ОписаниеПользователя.СУчетнойЗаписьюЕсиа(УчетнаяЗаписьЕсиа)
;

метод УтвержденияПоРолям(): ЧитаемоеСоответствие<РолиДоступа, Строка>
    пер ПеревернутоеСоответствие: Соответствие<РолиДоступа, Строка>
    для КлючИЗначение из РолиПоУтверждениям()
        ПеревернутоеСоответствие.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ)
    ;
    возврат ПеревернутоеСоответствие
;

метод РолиПоУтверждениям(): ЧитаемоеСоответствие<Строка, РолиДоступа>
    возврат {
        УТВЕРЖДЕНИЕ_АДМИНИСТРАТОР_СЕРВИСА: РолиДоступа.АдминистраторСервиса,
        УТВЕРЖДЕНИЕ_АДМИНИСТРАТОР_АБОНЕНТА: РолиДоступа.АдминистраторАбонента,
        УТВЕРЖДЕНИЕ_ИНФОРМАЦИОННАЯ_СИСТЕМА: РолиДоступа.ИнформационнаяСистема,
        УТВЕРЖДЕНИЕ_МЕНЕДЖЕР_СЕРВИСА: РолиДоступа.МенеджерСервиса
    }
;

метод ПодключенныйСервисЕсиа(): СервисУчетныхЗаписей?
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    пер СписокПользователей: СписокПользователей = СпискиПользователей.ПолучитьСписокПоУмолчанию()
    для НастройкиСервиса из СписокПользователей.НастройкиСервисовУчетныхЗаписей
        если НастройкиСервиса.Сервис.Вид == ВидСервисаУчетныхЗаписей.Есиа 
            возврат НастройкиСервиса.Сервис
        ;
    ;
    ПривилегированныйРежим.Закрыть()
;

@ВПроекте
исключение ИсключениеЗначениеСвойстваОписанияПользователяУжеЗанято
    обз пер Свойство: Строка
    обз пер КемЗанят: Строка
;

метод ДанныеОписанийПользователейПоРабочимКонтактам(Телефон: Строка, ЭлектроннаяПочта: Строка): Соответствие<Пользователи.Ссылка, ОписаниеПользователя>
    пер ДанныеОписанийПользователейПоРабочимКонтактам: Соответствие<Пользователи.Ссылка, ОписаниеПользователя> 
    знч Запрос = Запрос{
        Выбрать 
            ПользователиВладельцевКабинетов.Пользователь.ЗаменитьNull(Неопределено) как Пользователь   
        Из 
            РабочиеКонтактыФизическихЛиц как РабочиеКонтактыФизическихЛиц
            Левое соединение ПользователиВладельцевКабинетов как ПользователиВладельцевКабинетов
                По РабочиеКонтактыФизическихЛиц.Владелец == ПользователиВладельцевКабинетов.ФизическоеЛицо
        Где
            (РабочиеКонтактыФизическихЛиц.МобильныйТелефон == %Телефон И РабочиеКонтактыФизическихЛиц.МобильныйТелефон != "") 
            или (РабочиеКонтактыФизическихЛиц.ЭлектроннаяПочта == %ЭлектроннаяПочта И РабочиеКонтактыФизическихЛиц.ЭлектроннаяПочта != "")
        }
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        если РезультатСтрока.Пользователь != Неопределено 
            ДанныеОписанийПользователейПоРабочимКонтактам.Вставить(
                РезультатСтрока.Пользователь,
                ПользователиСервиса.Найти(РезультатСтрока.Пользователь.ЗагрузитьОбъект().Ид)
            )
        ;
    ;
    возврат ДанныеОписанийПользователейПоРабочимКонтактам
;

метод ПроверитьУникальностьКонтактовОписанияПользователя(Пользователь: Пользователи.Ссылка, Телефон: Строка, ЭлектроннаяПочта: Строка)
    знч СписокПоУмолчанию = СпискиПользователей.ПолучитьСписокПоУмолчанию()
    если не Телефон.Пусто()
        знч Описание = ПользователиСервиса.НайтиПоТелефону(Телефон, СписокПоУмолчанию.Ид)
        если Описание != Неопределено и Описание.Ид != Пользователь.ЗагрузитьОбъект().Ид
            знч ОписаниеОшибки =
            "Невозможно изменить номер мобильного телефона пользователя %{Пользователь.Представление()}. 
            Указанный номер уже занят пользователем  %{Описание.Представление}"
            выбросить новый ИсключениеЗначениеСвойстваОписанияПользователяУжеЗанято(ОписаниеОшибки, "Телефон", Описание
                    .Представление)
        ;
    ;

    если не ЭлектроннаяПочта.Пусто()
        знч Описание = ПользователиСервиса.НайтиПоЭлектроннойПочте(ЭлектроннаяПочта, СписокПоУмолчанию.Ид)
        если Описание != Неопределено и Описание.Ид != Пользователь.ЗагрузитьОбъект().Ид
            знч ОписаниеОшибки =
            "Невозможно изменить адрес электронной почты пользователя %{Пользователь.Представление()}. 
            Указанный адрес уже занят пользователем  %{Описание.Представление}"
            выбросить новый ИсключениеЗначениеСвойстваОписанияПользователяУжеЗанято(ОписаниеОшибки, "ЭлектроннаяПочта",
                Описание.Представление)
        ;
    ;
;

метод ИспользованноеСвойствоОписанияПользователя(ДанныеОписанийПользователей: Соответствие<Пользователи.Ссылка, ОписаниеПользователя>, ПолеРабочегоКонтакта: Строка): Соответствие<Строка, Строка>
    пер ИспользованноеСвойствоОписанияПользователя: Соответствие<Строка, Строка>
    для КлючЗначение из ДанныеОписанийПользователей
        знч Описание: ОписаниеПользователя = КлючЗначение.Значение
        ИспользованноеСвойствоОписанияПользователя.Вставить((Описание как неизвестно)[ПолеРабочегоКонтакта].ВНижнийРегистр(), КлючЗначение.Ключ.Представление())
    ;
    возврат ИспользованноеСвойствоОписанияПользователя
;

@ВПроекте
метод АвторСообщенияПредставление(Автор: Пользователи.Ссылка): Строка
    пер АвторСообщенияПредставление: Строка
    пер АвторПользовательОбъект: Пользователи.Объект? = Автор.ЗагрузитьОбъект()
    если АвторПользовательОбъект != Неопределено
        пер АвторФизическоеЛицо: ФизическиеЛица.Ссылка? = ФизическоеЛицоПользователя(АвторПользовательОбъект.Утверждения)
        АвторСообщенияПредставление = АвторФизическоеЛицо.Представление()
    ;
    возврат АвторСообщенияПредставление
;

@ВПроекте
метод ПользователиФизическихЛиц(ФизическиеЛица: ЧитаемоеМножество<ФизическиеЛица.Ссылка>): ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, Пользователи.Ссылка?>
    знч ФизическиеЛицаПользователей: Соответствие<ФизическиеЛица.Ссылка, Пользователи.Ссылка?>
    ФизическиеЛицаПользователей.ВставитьВсе(ПользователиВладельцевКабинетов.ПользователиФизическихЛиц(ФизическиеЛица))
    
    знч ПользователиФизическихЛицСервис = ПользователиФизическихЛиц.ПолучитьСервис()
    если ПользователиФизическихЛицСервис != Неопределено
        знч ФизическиеЛицаБезПользователя = ФизическиеЛица.Фильтровать(Элемент -> не ФизическиеЛицаПользователей.СодержитКлюч(Элемент)).ВоМножество()
        ФизическиеЛицаПользователей.ВставитьВсе(ПользователиФизическихЛицСервис.НайтиПользователейФизическихЛиц(ФизическиеЛицаБезПользователя))
    ;
    
    возврат ФизическиеЛицаПользователей
;

@ВПроекте 
метод ВнешниеУчетныеЗаписи(Пользователь: Пользователи.Ссылка?): ЧитаемоеМножество<УчетнаяЗапись>
    знч ИдПользователя = Пользователь?.ЗагрузитьОбъект()?.Ид
    если ИдПользователя == Неопределено
        возврат {}
    ;

    знч ОписаниеПользователяСервиса = ПользователиСервиса.Найти(ИдПользователя)
    если ОписаниеПользователяСервиса == Неопределено
        возврат {}
    ;
    
    знч ВнешниеУчетныеЗаписи = ОписаниеПользователяСервиса.УчетныеЗаписи
        .Фильтровать(УчетнаяЗапись -> УчетнаяЗапись.Сервис.Вид != ВидСервисаУчетныхЗаписей.Локальный)
        .ВоМножество()
    возврат новый ЧитаемоеМножество<УчетнаяЗапись>(ВнешниеУчетныеЗаписи)
;

@ВПроекте
метод ПредставлениеВнешнейУчетнойЗаписи(УчетнаяЗапись: УчетнаяЗапись): Строка
    возврат "%{УчетнаяЗапись.Сервис.Ид}\\%{УчетнаяЗапись.Ид}"
;

@ВПроекте
метод ФизическоеЛицоПользователя(Пользователь: Пользователи.Ссылка): ФизическиеЛица.Ссылка?
    возврат ПользователиВладельцевКабинетов.ФизическоеЛицоПользователя(Пользователь)
;

@ВПроекте
@НаСервере
метод УстановитьШлюзSms(НастройкиШлюза: ШлюзSms)
    пер СписокПользователей = СпискиПользователей.ПолучитьСписокПоУмолчанию()
    знч ТекущиеНастройкиАктивации = СписокПользователей.НастройкиАктивации
    СписокПользователей = СписокПользователей.СНастройкамиАктивации(новый НастройкиАктивацииПользователей(
        АктивацияПоЭлектроннойПочте = ТекущиеНастройкиАктивации.АктивацияПоЭлектроннойПочте,
        АктивацияПоТелефону = Истина    
    ))
    СписокПользователей.ШлюзыSms.Очистить()
    СписокПользователей.ШлюзыSms.Добавить(НастройкиШлюза)
    СпискиПользователей.Изменить(СписокПользователей)
;

@ВПроекте
@НаСервере
метод УстановитьШлюзSmtp(НастройкиШлюза: ШлюзSmtp)
    пер СписокПользователей = СпискиПользователей.ПолучитьСписокПоУмолчанию()
    знч ТекущиеНастройкиАктивации = СписокПользователей.НастройкиАктивации
    СписокПользователей = СписокПользователей.СНастройкамиАктивации(новый НастройкиАктивацииПользователей(
        АктивацияПоЭлектроннойПочте = Истина,
        АктивацияПоТелефону = ТекущиеНастройкиАктивации.АктивацияПоТелефону    
    ))
    СписокПользователей.ШлюзыSmtp.Очистить()
    СписокПользователей.ШлюзыSmtp.Добавить(НастройкиШлюза)
    СпискиПользователей.Изменить(СписокПользователей)
;

@ВПроекте
@НаСервере 
метод ОчиститьШлюзSms()
    пер СписокПользователей = СпискиПользователей.ПолучитьСписокПоУмолчанию()
    если СписокПользователей.ШлюзыSmtp.Пусто()
        выбросить новый ИсключениеВыполнения("Нельзя очистить ШлюзSms если не задан ШлюзыSmtp")
    ;
    знч ТекущиеНастройкиАктивации = СписокПользователей.НастройкиАктивации
    СписокПользователей = СписокПользователей.СНастройкамиАктивации(новый НастройкиАктивацииПользователей(
        АктивацияПоЭлектроннойПочте = ТекущиеНастройкиАктивации.АктивацияПоЭлектроннойПочте,
        АктивацияПоТелефону = Ложь    
    ))
    СписокПользователей.ШлюзыSms.Очистить()
    СпискиПользователей.Изменить(СписокПользователей)
;

@ВПроекте
@НаСервере 
метод ОчиститьШлюзSmtp()
    пер СписокПользователей = СпискиПользователей.ПолучитьСписокПоУмолчанию()
    если СписокПользователей.ШлюзыSms.Пусто()
        выбросить новый ИсключениеВыполнения("Нельзя очистить ШлюзыSmtp если не задан ШлюзSms")
    ;
    знч ТекущиеНастройкиАктивации = СписокПользователей.НастройкиАктивации
    СписокПользователей = СписокПользователей.СНастройкамиАктивации(новый НастройкиАктивацииПользователей(
        АктивацияПоЭлектроннойПочте = Ложь,
        АктивацияПоТелефону = ТекущиеНастройкиАктивации.АктивацияПоТелефону    
    ))
    СписокПользователей.ШлюзыSmtp.Очистить()
    СпискиПользователей.Изменить(СписокПользователей)
;

@ВПроекте
@НаСервере
метод ПроверитьПраваАдминистратора()
    если не ЭтоИнформационнаяСистема()
        МенеджерПравДоступа.ПроверитьПраваАдминистратора()
    ;
;

// Область СтроковыеРесурсы
@ВПроекте конст ПРИГЛАШЕНИЕ_ПОЛЬЗОВАТЕЛЯ_ТЕКСТ_ПИСЬМА = "ПриглашениеПользователяТекстПисьма"
@ВПроекте конст ПРИГЛАШЕНИЕ_ПОЛЬЗОВАТЕЛЯ_ТЕМА_ПИСЬМА = "ПриглашениеПользователяТемаПисьма"

@ВПроекте
@НаСервере
метод ОбновитьСтроковыеРесурсы()
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(
        КонтрольДоступа.ГРУППА_РЕСУРСОВ_КОНТРОЛЬ_ДОСТУПА,
        ПРИГЛАШЕНИЕ_ПОЛЬЗОВАТЕЛЯ_ТЕКСТ_ПИСЬМА,
        "Приглашение пользователя в 1С:Персонал (Текст письма)",
        СодержимоеПисьмаПриглашения()
    )
    
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(
        КонтрольДоступа.ГРУППА_РЕСУРСОВ_КОНТРОЛЬ_ДОСТУПА,
        ПРИГЛАШЕНИЕ_ПОЛЬЗОВАТЕЛЯ_ТЕМА_ПИСЬМА,
        "Приглашение пользователя в 1С:Персонал (Тема письма)",
        "Создан пользователь системы 1С:Персонал"
    )
;

@НаСервере
метод СодержимоеПисьмаПриглашения(): Строка
    знч ПисьмоПриглашение =
    "<html lang='ru-RU'>
        <head><meta charset='utf-8'></head>
        <body style='font-family:Arial;background:lightgrey: text-align: center'>
            <div style='min-width: 280px;max-width: 680px; margin: 0 auto'>
            <div style='height: 48px; background: whitesmoke;'>
                <p style='text-align: center;color:darkgray; padding: 16px;'><b>1С:Персонал</b></p>
            </div>
            <div style='background:white; padding: 8px 24px;'>
                <h2>\%ИмяОтчество\%!</h2>
                Вам предоставлен доступ к системе подбора персонала.
                <div style='background:white; padding: 24px 24px;'>
                    Ваше имя для входа (логин): <b>\%ЛогинПользователя\%</b>
                    <p style='font-size: small; color: Gray'>
                        Используйте указанный логин для входа через браузер, <br> свой пароль вы можете задать при первом входе.
                    </p>
                    Вам назначены роли: <b>\%РолиПользователя\%</b>
                    <p style='font-size: small; color: Gray'>Роли определяют доступые разделы и функционал в приложении.</p>
                </div>
                <p style='text-align: center'><a style='text-decoration: none' href='\%СсылкаСЛогином\%'><img style='width: 80px' src='\%ЛоготипПриложения\%'></a></p>
                <p style='text-align: center;'><a style='text-decoration: none' href='\%СсылкаСЛогином\%'><b>ОТКРЫТЬ В БРАУЗЕРЕ</b></a></p><br>
                <p style='text-align: center;font-size: small;'>Если вы не смогли открыть, скопируйте ссылку и поместите в адресную строку браузера<br><b>\%СсылкаСЛогином\%</p>
            </div>
        </body>
    </html>"
    возврат ПисьмоПриглашение
;

// Конец СтроковыеРесурсы