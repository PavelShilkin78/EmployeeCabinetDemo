импорт ФизическиеЛица

@Обработчик
метод ПроверитьНаличиеКлючейДоступа(Ключи: ЧитаемыйМассив<КлючКПолномочию.Объект>, Пользователи: ЧитаемыйМассив<Пользователи.Объект>): ЧитаемоеСоответствие<КлючКПолномочию.Объект, ЧитаемаяКоллекция<Пользователи.Объект|Пользователи.Ссылка>>
    знч КлючиПользователей: Соответствие<КлючКПолномочию.Объект, Множество<Пользователи.Объект|Пользователи.Ссылка>>
    
    знч ПроверяемыеПолномочия = ПолномочияПоКлючам(Ключи)
    знч ПользователиСсылка: Массив<Пользователи.Ссылка>
    для Пользователь из Пользователи
        ПользователиСсылка.Добавить(Пользователь.Ссылка)
    ;
    
    знч ГруппыДоступаПолномочий = ГруппыДоступаПользователейПоПолномочиям(ПользователиСсылка, ПроверяемыеПолномочия.Ключи())
    если ГруппыДоступаПолномочий.Пусто()
        возврат КлючиПользователей
    ;
    
    знч ПроверяемыеГруппыДоступа: Множество<ГруппыДоступа.Ссылка>
    для ГруппыДоступаПолномочия из ГруппыДоступаПолномочий
        ПроверяемыеГруппыДоступа.ДобавитьВсе(ГруппыДоступаПолномочия.Значение)
    ;
    
    знч ОграниченияГруппДоступа = ОграниченияГруппДоступа(ПроверяемыеГруппыДоступа)
    знч ПользователиГруппДоступа = ПользователиГруппДоступа(ПроверяемыеГруппыДоступа)
    знч ТипыАтрибутовПолномочий = КонтрольДоступа.ТипыАтрибутовПолномочий(ПроверяемыеПолномочия.Ключи())
    
    для ПроверяемоеПолномочие из ПроверяемыеПолномочия
        знч ПроверяемыеКлючи = ПроверяемоеПолномочие.Значение
        знч ГруппыДоступа = ГруппыДоступаПолномочий.ПолучитьИлиУмолчание(ПроверяемоеПолномочие.Ключ)
        знч ТипАтрибута = ТипыАтрибутовПолномочий.ПолучитьИлиУмолчание(ПроверяемоеПолномочие.Ключ)
        пер ОграниченияПоТипу: ЧитаемоеСоответствие<ГруппыДоступа.Ссылка, ЧитаемыйМассив<ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено>>?
        
        если ГруппыДоступа == Неопределено
            продолжить
        ;
        
        если ТипАтрибута != Неопределено
            ОграниченияПоТипу = ОграниченияГруппДоступа.ПолучитьИлиУмолчание(ТипАтрибута)
        ;
        
        для Ключ из ПроверяемыеКлючи
            для ГруппаДоступа из ГруппыДоступа
                если ТипАтрибута == Неопределено
                    или ЗначениеОграниченияДоступно(Ключ.ЗначениеОграничения, ОграниченияПоТипу?.ПолучитьИлиУмолчание(ГруппаДоступа)) 
                    
                    знч ПользователиГруппы = ПользователиГруппДоступа.ПолучитьИлиУмолчание(ГруппаДоступа)
                    если ПользователиГруппы == Неопределено
                        продолжить
                    ;
                    
                    знч ПользователиКлюча = КлючиПользователей.ВставитьЕслиОтсутствует(Ключ, {})
                    ПользователиКлюча.ДобавитьВсе(ПользователиГруппы)
                ;
            ;
        ;
    ;
    
    возврат КлючиПользователей
;

метод ПолномочияПоКлючам(Ключи: ЧитаемыйМассив<КлючКПолномочию.Объект>): ЧитаемоеСоответствие<Полномочия.Ссылка, ЧитаемыйМассив<КлючКПолномочию.Объект>>
    знч Полномочия: Соответствие<Полномочия.Ссылка, Массив<КлючКПолномочию.Объект>>
    
    для Ключ из Ключи
        знч КлючиПолномочия = Полномочия.ВставитьЕслиОтсутствует(Ключ.Полномочие, [])
        КлючиПолномочия.Добавить(Ключ)
    ;
    
    возврат Полномочия
;

метод ГруппыДоступаПользователейПоПолномочиям(Пользователи: ЧитаемаяКоллекция<Пользователи.Ссылка>,
    Полномочия: ЧитаемаяКоллекция<Полномочия.Ссылка>): ЧитаемоеСоответствие<Полномочия.Ссылка, ЧитаемоеМножество<ГруппыДоступа.Ссылка>>
    
    знч ГруппыДоступа: Соответствие<Полномочия.Ссылка, Множество<ГруппыДоступа.Ссылка>>
    
    знч Запрос = Запрос{
        Выбрать различные
            ГруппыДоступаПользователи.Владелец как Ссылка,
            РолиПолномочия.Элемент как Полномочие
        Из
            ГруппыДоступа.Пользователи как ГруппыДоступаПользователи
            Внутреннее соединение Роли.Полномочия как РолиПолномочия
            по ГруппыДоступаПользователи.Владелец.Роль == РолиПолномочия.Владелец
            и РолиПолномочия.Элемент в (%Полномочия)
        Где
            ГруппыДоступаПользователи.Элемент в (%Пользователи)
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        знч ГруппыДоступаПолномочия = ГруппыДоступа.ВставитьЕслиОтсутствует(СтрокаРезультата.Полномочие, {})
        ГруппыДоступаПолномочия.Добавить(СтрокаРезультата.Ссылка)
    ;
    возврат ГруппыДоступа
;

метод ОграниченияГруппДоступа(ГруппыДоступа: ЧитаемоеМножество<ГруппыДоступа.Ссылка>):
    ЧитаемоеСоответствие<ТипыАтрибутов.Ссылка, ЧитаемоеСоответствие<ГруппыДоступа.Ссылка, ЧитаемыйМассив<ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено>>>
    
    знч ОграниченияГруппДоступа: Соответствие<ТипыАтрибутов.Ссылка, Соответствие<ГруппыДоступа.Ссылка, Массив<ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено>>>
    
    знч Запрос = Запрос{
        Выбрать
            ОграниченияГрупп.Владелец как ГруппаДоступа,
            ОграниченияГрупп.Элемент.ТипАтрибута как ТипАтрибута,
            ОграниченияНаборов.Элемент.ЗаменитьNull(ОграниченияГрупп.Элемент.Значение) как Значение,
            ОграниченияГрупп.Элемент.РазрешеныВсе как РазрешеныВсе
        Из
            ГруппыДоступа.ЗначенияОграничений как ОграниченияГрупп
            левое соединение НаборыОграниченийДоступа.ЗначенияОграничений как ОграниченияНаборов
            по ОграниченияГрупп.Элемент.Значение == ОграниченияНаборов.Владелец
        Где
            ОграниченияГрупп.Владелец в (%{ГруппыДоступа})
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        если СтрокаРезультата.Значение это НаборыОграниченийДоступа.Ссылка
            продолжить
        ;
        знч ОграниченияПоТипу = ОграниченияГруппДоступа.ВставитьЕслиОтсутствует(СтрокаРезультата.ТипАтрибута, {:})
        знч ОграниченияГруппыДоступа = ОграниченияПоТипу.ВставитьЕслиОтсутствует(СтрокаРезультата.ГруппаДоступа, [])
        если СтрокаРезультата.РазрешеныВсе
            продолжить
        ;
        ОграниченияГруппыДоступа.Добавить(СтрокаРезультата.Значение как ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено)
    ;
    
    возврат ОграниченияГруппДоступа
;

метод ПользователиГруппДоступа(ГруппыДоступа: ЧитаемоеМножество<ГруппыДоступа.Ссылка>):
    ЧитаемоеСоответствие<ГруппыДоступа.Ссылка, Массив<Пользователи.Ссылка>>

    знч ПользователиГруппДоступа: Соответствие<ГруппыДоступа.Ссылка, Массив<Пользователи.Ссылка>>
    
    знч Запрос = Запрос{
        Выбрать
            Владелец как ГруппаДоступа,
            Элемент как Пользователь
        Из
            ГруппыДоступа.Пользователи
        Где
            Владелец в (%{ГруппыДоступа})
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        знч ПользователиГруппы = ПользователиГруппДоступа.ВставитьЕслиОтсутствует(СтрокаРезультата.ГруппаДоступа, [])
        ПользователиГруппы.Добавить(СтрокаРезультата.Пользователь)
    ;
    возврат ПользователиГруппДоступа
;

метод ЗначениеОграниченияДоступно(Значение: ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено, ЗначенияОграниченийГруппы: ЧитаемыйМассив<ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено>?): Булево
    //У группы не заданы ограничения по типу
    если ЗначенияОграниченийГруппы == Неопределено
        возврат Ложь
    ;
    
    //Все значения доступны
    если ЗначенияОграниченийГруппы.Пусто() и Значение == Неопределено
        возврат Истина
    ;
    
    //Значение есть в списке
    возврат ЗначенияОграниченийГруппы.Содержит(Значение)
;

@ВПроекте
метод КлючиПользователейФизическогихЛиц(КлючиДоступа: ЧитаемаяКоллекция<КлючКПолномочию.Объект>, ПользователиФизическихЛиц: ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, Пользователи.Ссылка>): ЧитаемоеСоответствие<КлючКПолномочию.Объект, Коллекция<Пользователи.Объект|Пользователи.Ссылка>>
    
    знч КлючиПользователей: Соответствие<КлючКПолномочию.Объект, Коллекция<Пользователи.Объект|Пользователи.Ссылка>>
    для КлючДоступа из КлючиДоступа
        если не (КлючДоступа.ЗначениеОграничения это ФизическиеЛица.Ссылка)
            продолжить
        ;
        знч Пользователь = ПользователиФизическихЛиц.ПолучитьИлиУмолчание(КлючДоступа.ЗначениеОграничения как ФизическиеЛица.Ссылка)
        если Пользователь == Неопределено
            продолжить
        ;
        
        КлючиПользователей.Вставить(КлючДоступа, [Пользователь])    
    ;
    
    возврат КлючиПользователей
;
