импорт ОбщиеСтандартные
импорт ФизическиеЛица

структура СочетанияКлючей
    обз знч Полномочие: Полномочия.Ссылка
    обз знч ЗначениеОграничения: ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено
    обз знч Пользователь: Пользователи.Ссылка
;

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    знч Разрешения: Массив<РазрешениеДоступа>
    Разрешения.ДобавитьВсе(КонтрольДоступа.РазрешенияДоступаТаблицыКонтентДанныхАбонентаСДоступомАдминистратору())
    Разрешения.ДобавитьВсе(КонтрольДоступа.ЧтениеРедактированиеУдалениеДанныхСправочниковПоПолномочиям(
        [КонтрольДоступа.ПолномочиеЧтениеИРедактированиеНастроекПользователей()],
        [КонтрольДоступа.ПолномочиеЧтениеИРедактированиеНастроекПользователей()]
    ))
    возврат Разрешения
;

@ВПодсистеме
метод ГруппаДоступаПоКлючу(Ключ: Строка): ГруппыДоступа.Ссылка?
    знч Запрос = Запрос{
        Выбрать
            Ссылка
        Из
            ГруппыДоступа
        Где
            Ключ == %{ХешКлюча(Ключ)}
    }
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        возврат СтрокаРезультата.Ссылка
    ;
    возврат Неопределено
;

@ВПодсистеме
метод ГруппыДоступаПоРоли(Роль: Роли.Ссылка): ЧитаемыйМассив<ГруппыДоступа.Ссылка>
    знч Запрос = Запрос{
        Выбрать
            Ссылка
        Из
            ГруппыДоступа
        Где
            Роль == %Роль}
    исп Результат = Запрос.Выполнить()
    возврат Результат.Преобразовать(СтрокаРезультата -> СтрокаРезультата.Ссылка)
;


@ВПодсистеме
метод УдалитьГруппуДоступаПоКлючу(Ключ: Строка)
    знч ГруппаДоступа = ГруппаДоступаПоКлючу(Ключ)
    если ГруппаДоступа == Неопределено
        возврат
    ;
    
    ГруппаДоступа.ЗагрузитьОбъект().Удалить()
;

@ВПодсистеме
метод ОбновитьГруппуДоступа(Ключ: Строка, Наименование: Строка, Роль: Роли.Ссылка,
    ЗначенияОграничений: ЧитаемаяКоллекция<ЗначенияОграниченийГруппДоступа>, Пользователи: ЧитаемаяКоллекция<Пользователи.Ссылка>,
    ВидГруппыДоступа: ВидыГруппыДоступа): ГруппыДоступа.Ссылка
    
    знч ГруппаДоступа = ГруппаДоступаПоКлючу(Ключ)?.ЗагрузитьОбъект() ?? новый ГруппыДоступа.Объект()
    
    ГруппаДоступа.Ключ = ХешКлюча(Ключ)
    ГруппаДоступа.Наименование = Наименование
    ГруппаДоступа.Роль = Роль
    ГруппаДоступа.Пользователи.Очистить()
    ГруппаДоступа.ЗначенияОграничений.Очистить()
    для Пользователь из Пользователи
        ГруппаДоступа.Пользователи.Добавить(Пользователь)
    ;
    
    для ЗначениеОграничения из ЗначенияОграничений
        ГруппаДоступа.ЗначенияОграничений.Добавить(ЗначениеОграничения)
    ;
        
    ГруппаДоступа.Вид = ВидГруппыДоступа
    
    ГруппаДоступа.Записать()
    
    возврат ГруппаДоступа.Ссылка
;

@ВПодсистеме
метод ВключитьПользователяВГруппу(ГруппаДоступа: ГруппыДоступа.Ссылка, Пользователь: Пользователи.Ссылка)
    знч ГруппаДоступаОбъект = ГруппаДоступа.ЗагрузитьОбъект()
    если ГруппаДоступаОбъект.Пользователи.Содержит(Пользователь)
        возврат
    ;
    ГруппаДоступаОбъект.Пользователи.Добавить(Пользователь)
    ГруппаДоступаОбъект.Записать()
;

@ВПроекте
метод ОбновитьГруппыДоступаПоРолям(Роли: ЧитаемыйМассив<Роли.Ссылка>)
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка как ГруппаДоступа,
            Роль как Роль
        из
            ГруппыДоступа как ГруппыДоступа
        где ГруппыДоступа.Роль В (%Роли)
    }
    
    исп Результат = Запрос.Выполнить()
    знч ТипыАтрибутовРолей = КонтрольДоступа.ТипыАтрибутовРолей()
    для СтрокаРезультата из Результат
        знч ГруппаДоступа = СтрокаРезультата.ГруппаДоступа.ЗагрузитьОбъект()
        ГруппаДоступа.ЗначенияОграничений.Очистить()
        знч ТипыАтрибутовГруппы = ТипыАтрибутовРолей.ПолучитьИлиУмолчание(СтрокаРезультата.Роль)
        если ТипыАтрибутовГруппы != Неопределено
            для ТипАтрибута из ТипыАтрибутовГруппы
                ГруппаДоступа.ЗначенияОграничений.Добавить(новый ЗначенияОграниченийГруппДоступа(
                    ТипАтрибута, Неопределено, Истина
                ))
            ;
        ;
        
        ГруппаДоступа.Вид = ВидыГруппыДоступа.Пользовательская
        
        ГруппаДоступа.Записать()
    ;
;

@ВПодсистеме
метод СоздатьГруппыДоступаПоРолям(Роли: ЧитаемаяКоллекция<Роли.Ссылка>? = Неопределено)
    знч Запрос = Запрос{
        Выбрать
            Роли.Ссылка Как Роль,
            Роли.Наименование Как Наименование,
            ГруппыДоступа.Ссылка.ЗаменитьNull(Неопределено) Как ГруппаДоступа
        Из
            Роли Как Роли
            Левое Соединение ГруппыДоступа Как ГруппыДоступа
            По Роли.Ссылка == ГруппыДоступа.Роль
        Где
            %{Роли == Неопределено} Или Роли.Ссылка В (%Роли)
    }
    
    исп Результат = Запрос.Выполнить()
    знч ТипыАтрибутовРолей = КонтрольДоступа.ТипыАтрибутовРолей()
    для СтрокаРезультата из Результат
        знч ГруппаДоступа = СтрокаРезультата.ГруппаДоступа?.ЗагрузитьОбъект() ?? новый ГруппыДоступа.Объект()
        ГруппаДоступа.Наименование = СтрокаРезультата.Наименование
        ГруппаДоступа.Роль = СтрокаРезультата.Роль
        ГруппаДоступа.ЗначенияОграничений.Очистить()
        знч ТипыАтрибутовГруппы = ТипыАтрибутовРолей.ПолучитьИлиУмолчание(СтрокаРезультата.Роль)
        если ТипыАтрибутовГруппы != Неопределено
            для ТипАтрибута из ТипыАтрибутовГруппы
                ГруппаДоступа.ЗначенияОграничений.Добавить(новый ЗначенияОграниченийГруппДоступа(
                    ТипАтрибута, Неопределено, Истина
                ))
            ;
        ;
        
        ГруппаДоступа.Вид = ВидыГруппыДоступа.Пользовательская
        
        ГруппаДоступа.Записать()
    ;
;

@ВПодсистеме
метод ПрисвоитьВидГруппамДоступа()
    
    // Сервисные группы доступа создают хэши ключей - исключаем их из выборки
    знч Запрос = Запрос{
        ВЫБРАТЬ
            ГруппыДоступа.Ссылка КАК ГруппаДоступа
        ИЗ
            ГруппыДоступа КАК ГруппыДоступа
        ГДЕ 
            ГруппыДоступа.Вид == Неопределено            
    }
    
    исп РезультатЗапроса = Запрос.Выполнить()
    для СтрокаРезультата из РезультатЗапроса
        знч ГруппаДоступа = СтрокаРезультата.ГруппаДоступа.ЗагрузитьОбъект()
                
        если ГруппаДоступа.Ключ == ""
            ГруппаДоступа.Вид = ВидыГруппыДоступа.Пользовательская
        иначе 
            ГруппаДоступа.Вид = ВидыГруппыДоступа.Служебная
        ;    
        
        ГруппаДоступа.Записать()
    ;
    
;

@ВПодсистеме
метод ПересчитатьКлючиГруппыДоступаПоИзменениямНабора(НаборОграничений: НаборыОграниченийДоступа.Ссылка, ТипАтрибута: ТипыАтрибутов.Ссылка,
        ЗначенияОграничений: ЧитаемаяКоллекция<ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено>)
        
    знч Запрос = Запрос{
        Выбрать
            Владелец как ГруппаДоступа,
            Владелец.Роль как Роль
        Из
            ГруппыДоступа.ЗначенияОграничений
        Где
            Элемент.Значение == %НаборОграничений
            и Элемент.ТипАтрибута == %ТипАтрибута
    }
    
    исп Результат = Запрос.Выполнить()
    знч ГруппыДоступаКПересчету: Множество<ГруппыДоступа.Ссылка>
    знч РолиКПересчету: Множество<Роли.Ссылка>
    для СтрокаРезультата из Результат
        ГруппыДоступаКПересчету.Добавить(СтрокаРезультата.ГруппаДоступа)
        РолиКПересчету.Добавить(СтрокаРезультата.Роль как Роли.Ссылка)
    ;
    
    знч ПользователиКПересчету = ПользователиГруппДоступа(ГруппыДоступаКПересчету)
    если ПользователиКПересчету.Пусто()
        возврат
    ;
    
    знч ПолномочияКПересчету = ПолномочияКПересчету(РолиКПересчету, ТипАтрибута)
    если ПолномочияКПересчету.Пусто()
        возврат
    ;
    
    для ЗначениеОграничения из ЗначенияОграничений
        для Полномочие из ПолномочияКПересчету
            попытка
                новый КлючКПолномочию.Объект(
                    Полномочие, ЗначениеОграничения)
                    .Пересчитать(ПользователиКПересчету)
            поймать Ошибка: ИсключениеВыполнения
                продолжить
            ;
        ;
    ;
;

метод ПолномочияКПересчету(Роли: ЧитаемоеМножество<Роли.Ссылка>, ТипАтрибута: ТипыАтрибутов.Ссылка): ЧитаемоеМножество<Полномочия.Ссылка>
    знч ПолномочияКПересчету: Множество<Полномочия.Ссылка>
    
    знч Запрос = Запрос{
        Выбрать
            Элемент как Полномочие
        Из
            Роли.Полномочия
        Где
            Элемент.ТипАтрибута == %ТипАтрибута
            И Владелец В (%Роли)
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ПолномочияКПересчету.Добавить(СтрокаРезультата.Полномочие)
    ;
    
    возврат ПолномочияКПересчету
;

метод ПользователиГруппДоступа(ГруппыДоступа: ЧитаемоеМножество<ГруппыДоступа.Ссылка>): ЧитаемыйМассив<Пользователи.Объект>
    знч ПользователиГруппДоступа: Массив<Пользователи.Объект>
    
    знч Запрос = Запрос{
        Выбрать Различные
            Элемент как Пользователь
        Из
            ГруппыДоступа.Пользователи
        Где
            Владелец В (%ГруппыДоступа)
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        знч Пользователь = СтрокаРезультата.Пользователь.ЗагрузитьОбъект()
        если Пользователь == Неопределено
            продолжить
        ;
        ПользователиГруппДоступа.Добавить(Пользователь)
    ;
    
    возврат ПользователиГруппДоступа
;

метод ХешКлюча(Ключ: Строка): Строка
    пер Хеширование = новый ХешированиеДанных(АлгоритмХеширования.Sha1)
    Хеширование.ДобавитьДанные(Ключ.ВБайты())
    возврат Хеширование.Результат.ВСтроку()
;

@ВПодсистеме
метод ПересчетКлючейДоступа(ГруппаДоступа: ГруппыДоступа.Ссылка, ЭтоНовый: Булево,
    ПользователиСтарые: ЧитаемоеМножество<Пользователи.Ссылка>, РольСтарая: Роли.Ссылка?, ЗначенияОграниченийСтарые: ЧитаемоеМножество<ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено>)
    
    знч СочетанияПересчета: Множество<СочетанияКлючей>
    знч ОбъектыПользователей: Соответствие<Пользователи.Ссылка, Пользователи.Объект>
    знч ТипыАтрибутовПоТипамЗначений = ТипыАтрибутов.ТипыАтрибутовПоТипамЗначений()
    знч Роль = РольГруппыДоступа(ГруппаДоступа)
    знч ЗначенияОграничений = ЗначенияОграниченийГруппыДоступа(ГруппаДоступа)
    знч Пользователи = ПользователиГруппыДоступа(ГруппаДоступа)
    
    знч ПолномочияНовые = Роли.ПолномочияРоли(Роль)
    знч ЗначенияОграниченийНовые = ПолныеЗначенияОграничений(ЗначенияОграничений)
    знч ПользователиНовые = новый ЧитаемоеМножество<Пользователи.Ссылка>(Пользователи)
    
    пер ПолномочияСтарые: ЧитаемоеМножество<Полномочия.Ссылка>?
    
    знч ВсеПолномочия: Множество<Полномочия.Ссылка>
    ВсеПолномочия.ДобавитьВсе(ПолномочияНовые)
    
    если ЭтоНовый
        ПересчитатьКлючиПоИзменениям(
            ПолномочияНовые,
            СочетанияПересчета,
            ПолномочияНовые,
            ЗначенияОграниченийНовые,
            ПользователиНовые,
            ОбъектыПользователей,
            КонтрольДоступа.ТипыАтрибутовПолномочий(ВсеПолномочия),
            ТипыАтрибутовПоТипамЗначений
        )
        
        возврат
    ;
    
    если Роль == РольСтарая
        ПолномочияСтарые = ПолномочияНовые
    иначе
        ПолномочияСтарые = Роли.ПолномочияРоли(РольСтарая)
    ;
    
    ВсеПолномочия.ДобавитьВсе(ПолномочияСтарые)
    знч ТипыАтрибутовПолномочий = КонтрольДоступа.ТипыАтрибутовПолномочий(ВсеПолномочия)
    
    если Роль != РольСтарая
        знч СравнениеПолномочий = МенеджерКоллекций.СравнитьКоллекции(ПолномочияСтарые, ПолномочияНовые)
        знч УдаленныеПолномочия: Множество<Полномочия.Ссылка>
        знч ДобавленныеПолномочия: Множество<Полномочия.Ссылка>
        для Полномочие из СравнениеПолномочий.Удаленные
            УдаленныеПолномочия.Добавить(Полномочие как Полномочия.Ссылка)
        ;
        для Полномочие из СравнениеПолномочий.Добавленные
            ДобавленныеПолномочия.Добавить(Полномочие как Полномочия.Ссылка)
        ;
        
        ПересчитатьКлючиПоИзменениям(
            УдаленныеПолномочия,
            СочетанияПересчета,
            УдаленныеПолномочия,
            ЗначенияОграниченийСтарые,
            ПользователиСтарые,
            ОбъектыПользователей,
            ТипыАтрибутовПолномочий,
            ТипыАтрибутовПоТипамЗначений
        )
        
        ПересчитатьКлючиПоИзменениям(
            ДобавленныеПолномочия,
            СочетанияПересчета,
            ДобавленныеПолномочия,
            ЗначенияОграниченийНовые,
            ПользователиНовые,
            ОбъектыПользователей,
            ТипыАтрибутовПолномочий,
            ТипыАтрибутовПоТипамЗначений
        )       
    ;
    
    если ЗначенияОграниченийСтарые != ЗначенияОграниченийНовые
        знч СравнениеЗначений = МенеджерКоллекций.СравнитьКоллекции(ЗначенияОграниченийСтарые, ЗначенияОграниченийНовые)
        знч УдаленныеЗначения: Множество<ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено>
        знч ДобавленныеЗначения: Множество<ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено>
        для Значение из СравнениеЗначений.Удаленные
            УдаленныеЗначения.Добавить(Значение как ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено)
        ;
        для Значение из СравнениеЗначений.Добавленные
            ДобавленныеЗначения.Добавить(Значение как ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено)
        ;
        
        ПересчитатьКлючиПоИзменениям(
            УдаленныеЗначения,
            СочетанияПересчета,
            ПолномочияСтарые,
            УдаленныеЗначения,
            ПользователиСтарые,
            ОбъектыПользователей,
            ТипыАтрибутовПолномочий,
            ТипыАтрибутовПоТипамЗначений
        )
        
        ПересчитатьКлючиПоИзменениям(
            ДобавленныеЗначения,
            СочетанияПересчета,
            ПолномочияНовые,
            ДобавленныеЗначения,
            ПользователиНовые,
            ОбъектыПользователей,
            ТипыАтрибутовПолномочий,
            ТипыАтрибутовПоТипамЗначений
        )
    ;
    
    если ПользователиСтарые != ПользователиНовые
        знч СравнениеЗначений = МенеджерКоллекций.СравнитьКоллекции(ПользователиСтарые, ПользователиНовые)
        знч УдаленныеПользователи: Множество<Пользователи.Ссылка>
        знч ДобавленныеПользователи: Множество<Пользователи.Ссылка>
        для Пользователь из СравнениеЗначений.Удаленные
            УдаленныеПользователи.Добавить(Пользователь как Пользователи.Ссылка)
        ;
        для Пользователь из СравнениеЗначений.Добавленные
            ДобавленныеПользователи.Добавить(Пользователь как Пользователи.Ссылка)
        ;
        
        ПересчитатьКлючиПоИзменениям(
            УдаленныеПользователи,
            СочетанияПересчета,
            ПолномочияСтарые,
            ЗначенияОграниченийСтарые,
            УдаленныеПользователи,
            ОбъектыПользователей,
            ТипыАтрибутовПолномочий,
            ТипыАтрибутовПоТипамЗначений
        )
        
        ПересчитатьКлючиПоИзменениям(
            ДобавленныеПользователи,
            СочетанияПересчета,
            ПолномочияНовые,
            ЗначенияОграниченийНовые,
            ДобавленныеПользователи,
            ОбъектыПользователей,
            ТипыАтрибутовПолномочий,
            ТипыАтрибутовПоТипамЗначений
        )
    ;
    
;

@ВПодсистеме
метод ПолныеЗначенияОграничений(ЗначенияОграничений: ЧитаемыйМассив<ЗначенияОграниченийГруппДоступа>|ЧитаемыйМассив<ЗначенияОграниченийГруппДоступа.Данные>): Множество<ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено>
    знч ПолныеЗначенияОграничений: Множество<ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено>
    знч НаборыОграничений: Множество<НаборыОграниченийДоступа.Ссылка>
    
    для ОграничениеГруппы из ЗначенияОграничений
        пер Значение: ЗначенияОграничений.Ссылка|НаборыОграниченийДоступа.Ссылка|ФизическиеЛица.Ссылка|Неопределено
        если ОграничениеГруппы это ЗначенияОграниченийГруппДоступа
            Значение = (ОграничениеГруппы как ЗначенияОграниченийГруппДоступа).Значение
        иначе
            Значение = (ОграничениеГруппы как ЗначенияОграниченийГруппДоступа.Данные).Значение
        ;
        если Значение это НаборыОграниченийДоступа.Ссылка
            НаборыОграничений.Добавить(Значение как НаборыОграниченийДоступа.Ссылка)
        иначе
            ПолныеЗначенияОграничений.Добавить(Значение как ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено)
        ;
    ;
    
    ПолныеЗначенияОграничений.ДобавитьВсе(НаборыОграниченийДоступа.ЗначенияОграниченийНаборов(НаборыОграничений))
    
    возврат ПолныеЗначенияОграничений
;

метод ПересчитатьКлючиПоИзменениям(
    Изменения: ЧитаемаяКоллекция<Объект?>, 
    Сочетания: Множество<СочетанияКлючей>, 
    Полномочия: ЧитаемоеМножество<Полномочия.Ссылка>, 
    ЗначенияОграничений: ЧитаемоеМножество<ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено>, 
    Пользователи: ЧитаемоеМножество<Пользователи.Ссылка?>, 
    ОбъектыПользователей: Соответствие<Пользователи.Ссылка, Пользователи.Объект>,
    ТипыАтрибутовПолномочий: ЧитаемоеСоответствие<Полномочия.Ссылка, ТипыАтрибутов.Ссылка?>,
    ТипыАтрибутовПоТипамЗначений: ЧитаемоеСоответствие<Тип, ТипыАтрибутов.Ссылка>)
    
    если Изменения.Пусто()
        возврат
    ;
    
    для Полномочие из Полномочия
        знч ТипАтрибута = ТипыАтрибутовПолномочий.ПолучитьИлиУмолчание(Полномочие)
        если ТипАтрибута == Неопределено
            ПересчитатьКлючиПоЗначениюОграничения(Полномочие, Неопределено, Пользователи, Сочетания, ОбъектыПользователей)
        иначе
            для ЗначениеОграничения из ЗначенияОграничений
                если ЗначениеОграничения != Неопределено
                    знч ТипЗначения = (ЗначениеОграничения как неизвестно).ПолучитьТип()
                    если ТипАтрибута != ТипыАтрибутовПоТипамЗначений.ПолучитьИлиУмолчание(ТипЗначения)
                        продолжить
                    ;
                ;
                ПересчитатьКлючиПоЗначениюОграничения(Полномочие, ЗначениеОграничения, Пользователи, Сочетания, ОбъектыПользователей)
            ;
        ;
    ;
;

метод ПересчитатьКлючиПоЗначениюОграничения(Полномочие: Полномочия.Ссылка, ЗначениеОграничения: ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено,
    Пользователи: ЧитаемоеМножество<Пользователи.Ссылка?>, Сочетания: Множество<СочетанияКлючей>, ОбъектыПользователей: Соответствие<Пользователи.Ссылка, Пользователи.Объект>)
    
    знч ПользователиПересчет = <Пользователи.Объект>[]
    для Пользователь из Пользователи
        если Пользователь == Неопределено
            продолжить
        ;
        если ЕстьТакоеСочетание(Сочетания, Полномочие, ЗначениеОграничения, Пользователь!)
            продолжить
        ;
        знч ПользовательОбъект = ОбъектПользователя(Пользователь, ОбъектыПользователей)
        если ПользовательОбъект == Неопределено
            продолжить
        ;
        ПользователиПересчет.Добавить(ПользовательОбъект!)
    ;
    если не ПользователиПересчет.Пусто()
        попытка
            новый КлючКПолномочию.Объект(Полномочие, ЗначениеОграничения)
                .Пересчитать(ПользователиПересчет)
        поймать Ошибка: ИсключениеВыполнения
            возврат
        ;
    ;
;

метод ЕстьТакоеСочетание(
    Сочетания: Множество<СочетанияКлючей>, 
    Полномочие: Полномочия.Ссылка, 
    ЗначениеОграничения: ЗначенияОграничений.Ссылка|ФизическиеЛица.Ссылка|Неопределено, 
    Пользователь: Пользователи.Ссылка): Булево
    
    знч Сочетание = новый СочетанияКлючей(Полномочие, ЗначениеОграничения, Пользователь)
    знч ЕстьТакоеСочетание: Булево = Сочетания.Содержит(Сочетание)
    если не ЕстьТакоеСочетание
        Сочетания.Добавить(Сочетание)
    ;
    возврат ЕстьТакоеСочетание
;

метод ОбъектПользователя(Пользователь: Пользователи.Ссылка?, ОбъектыПользователей: Соответствие<Пользователи.Ссылка, Пользователи.Объект>): Пользователи.Объект?

    если Пользователь == Неопределено
        возврат Неопределено
    ;

    если ОбъектыПользователей.СодержитКлюч(Пользователь!)
        возврат ОбъектыПользователей.Получить(Пользователь!)
    ;
    
    знч ПользовательОбъект = Пользователь!.ЗагрузитьОбъект()
    если ПользовательОбъект == Неопределено
        возврат Неопределено
    ;
    
    ОбъектыПользователей.Вставить(Пользователь!, ПользовательОбъект!)
    возврат ПользовательОбъект
;

метод РольГруппыДоступа(ГруппаДоступа: ГруппыДоступа.Ссылка): Роли.Ссылка
    знч Запрос = Запрос{
        Выбрать
            Роль
        Из
            ГруппыДоступа
        Где
            Ссылка == %ГруппаДоступа
    }
    
    возврат Запрос.Выполнить().ЕдинственныйИлиУмолчание()?.Роль
;

метод ЗначенияОграниченийГруппыДоступа(ГруппаДоступа: ГруппыДоступа.Ссылка): ЧитаемыйМассив<ЗначенияОграниченийГруппДоступа>
    знч Запрос = Запрос{
        Выбрать
            Элемент
        Из
            ГруппыДоступа.ЗначенияОграничений
        Где
            Владелец == %ГруппаДоступа
    }
    
    возврат Запрос.Выполнить().Преобразовать(С -> С.Элемент)
;

метод ПользователиГруппыДоступа(ГруппаДоступа: ГруппыДоступа.Ссылка): ЧитаемыйМассив<Пользователи.Ссылка>
    знч Запрос = Запрос{
        Выбрать
            Элемент
        Из
            ГруппыДоступа.Пользователи
        Где
            Владелец == %ГруппаДоступа
    }
    
    возврат Запрос.Выполнить().Преобразовать(С -> С.Элемент)
;