@ВПроекте
структура ДанныеТокена
    обз пер Ссылка: КэшТокенов.Ссылка
    обз пер Токен: Строка
    обз пер ВремяОкончания: Момент  
;

@ВПроекте
исключение ИсключениеСохраненияТокена
;

@ВПроекте
метод СохранитьТокен(АдресСервера:Строка, ИдКлиента: Строка, Токен:Строка, ВремяОкончания:Момент)
    пер ДанныеТокена: ДанныеТокена? = НайтиТокен(АдресСервера, ИдКлиента)
    пер Запись: КэшТокенов.Объект?
      
    попытка 
        исп Транзакции.Начать()
    
        если ДанныеТокена == Неопределено
            Запись = новый КэшТокенов.Объект()
            Запись.АдресСервера = АдресСервера
            Запись.ИдКлиента = ИдКлиента
        иначе
            Запись = ДанныеТокена.Ссылка.ЗагрузитьОбъект(Истина)  
        ; 
        Запись.Токен = Токен
        Запись.ВремяОкончания = ВремяОкончания
        
        Запись.Записать()

    поймать Ошибка: Исключение
        выбросить новый ИсключениеСохраненияТокена("Не удалось сохранить токен", Ошибка)
    ;   
;

@ВПроекте
метод НайтиТокен(АдресСервера:Строка, ИдКлиента:Строка): ДанныеТокена?
    пер Результат: ДанныеТокена? = Неопределено
    знч Запрос = Запрос{
        Выбрать
            Ссылка Как Ссылка,
            Токен Как Токен,
            ВремяОкончания Как ВремяОкончания
        Из
            КэшТокенов 
        Где
            АдресСервера == %АдресСервера
            И ИдКлиента == %ИдКлиента}
    исп РезультатЗапроса = Запрос.Выполнить()
    знч РезультатЗапросаСтроки = новый ЧитаемыйМассив(РезультатЗапроса)
    если (не РезультатЗапросаСтроки.Пусто()) 
        Результат = новый ДанныеТокена(РезультатЗапросаСтроки[0].Ссылка, РезультатЗапросаСтроки[0].Токен, РезультатЗапросаСтроки[0].ВремяОкончания)
    ;
    возврат Результат
;