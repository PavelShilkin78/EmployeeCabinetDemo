@ВПроекте
структура ПараметрыДоступаКСерверу
    пер АдресСервера: Строка
    пер ИдКлиента: Строка
    пер СекретКлиента: Строка
    пер ВремяЖизниТокена: Длительность = 60м
;

@ВПроекте
метод ВыполнитьЗапрос(Запрос: ЗапросHttp, ПараметрыДоступа: ПараметрыДоступаКСерверу): ОтветHttp
    исп ПривилегированныйРежимПолученияТокена: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    пер Токен: Аутентификация.Токен = Аутентификация.ПолучитьТокен(
        ПараметрыДоступа.АдресСервера,
        ПараметрыДоступа.ИдКлиента,
        ПараметрыДоступа.СекретКлиента,
        ПараметрыДоступа.ВремяЖизниТокена
    )
    ПривилегированныйРежимПолученияТокена.Закрыть()
    пер Ответ: ОтветHttp = Запрос.УстановитьЗаголовок("Authorization", "Bearer " + Токен.Значение)
        .Выполнить()
    
    // Проверять на 500 код необходимо в случаях когда токен из кэша просрочен, но новый не был получен в результате ошибки 
    если (Ответ.КодСостояния == 401 или Ответ.КодСостояния == 500)
        и Токен.ПолученИзКэша
        
        исп ПривилегированныйРежимОбновленияТокена: КонтекстДоступа = КонтекстДоступа.Привилегированный()
        Токен = Аутентификация.ОбновитьТокен(
            ПараметрыДоступа.АдресСервера,
            ПараметрыДоступа.ИдКлиента,
            ПараметрыДоступа.СекретКлиента,
            ПараметрыДоступа.ВремяЖизниТокена
        )
        ПривилегированныйРежимОбновленияТокена.Закрыть()
        Запрос.УстановитьЗаголовок("Authorization", "Bearer " + Токен.Значение)
        
        Ответ = Запрос.Выполнить()
    ;
    
    если Ответ.КодСостояния == 401
        знч ТелоОтвета = Ответ.Тело.ПрочитатьКакСтроку()
        знч КодСостояния = Ответ.КодСостояния
        Ответ.Закрыть()
        выбросить новый Аутентификация.ИсключениеАутентификации(
            "Ошибка аутентификации", 
            КодСостояния, 
            ТелоОтвета
        )
    ;
    возврат Ответ
;