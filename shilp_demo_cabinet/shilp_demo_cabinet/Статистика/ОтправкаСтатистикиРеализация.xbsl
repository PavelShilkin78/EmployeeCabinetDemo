импорт ВзаимодействиеССервисомСтатистики
импорт ОбщиеСтандартные
импорт ПоказателиСтатистики
импорт ВзаимодействиеСEssm
импорт ПриложениеНастройки
импорт СтандартноеПриложение

конст ИДЕНТИФИКАТОР_ЗАДАНИЯ_ОТПРАВКИ_ОСНОВНОЙ_СТАТИСТИКИ = "ОсновнаяСтатистика"
конст ИДЕНТИФИКАТОР_ЗАДАНИЯ_ОТПРАВКИ_ДОПОЛНИТЕЛЬНОЙ_СТАТИСТИКИ = "ДополнительнаяСтатистика"
конст ИДЕНТИФИКАТОР_ЗАДАНИЯ_ОТПРАВКИ_ОТЧЕТОВ_ОБ_ОШИБКАХ = "ОтчетыОбОшибках"

@ВПодсистеме
метод ИнициализироватьОтправку()
    пер НастройкиОтправки = новый Статистика.НастройкиОтправки()
    НастройкиОтправки.ОтправлятьКоличествоЛичныхКабинетов = Истина
    НастройкиОтправки.ОтправлятьОтчетыОбОшибках = Истина
    НастройкиОтправки.ОтправлятьСтатистикуВложений = Истина
    НастройкиОтправки.ОтправлятьСтатистикуДокументов = Истина
    НастройкиОтправки.ОтправлятьСтатистикуРасчетныхЛистков = Истина
    НастройкиОтправки.ОтправлятьСтатистикуСправочников = Истина
    
    Статистика.УстановитьНастройкиОтправки(НастройкиОтправки)
;

@ВПодсистеме
метод ЗапланироватьОтправку()
    знч НастройкиОтправки: Статистика.НастройкиОтправки? = Статистика.НастройкиОтправки()
    если НастройкиОтправки == Неопределено
        возврат
    ;
    
    если ОтправлятьОсновнуюСтатистику(НастройкиОтправки)
        ВключитьОтправкуОсновнойСтатистики()    
    иначе
        ЗапланированныеЗадания.Приостановить(ИДЕНТИФИКАТОР_ЗАДАНИЯ_ОТПРАВКИ_ОСНОВНОЙ_СТАТИСТИКИ)
    ; 
    
    если ОтправлятьДополнительнуюСтатистику(НастройкиОтправки)
        ВключитьОтправкуДополнительнойСтатистики()   
    иначе
        ЗапланированныеЗадания.Приостановить(ИДЕНТИФИКАТОР_ЗАДАНИЯ_ОТПРАВКИ_ДОПОЛНИТЕЛЬНОЙ_СТАТИСТИКИ)
    ;   
    
    если ОтправлятьОтчетыОбОшибках(НастройкиОтправки)
        ВключитьОтправкуОтчетовОбОшибках()
    иначе
        ЗапланированныеЗадания.Приостановить(ИДЕНТИФИКАТОР_ЗАДАНИЯ_ОТПРАВКИ_ОТЧЕТОВ_ОБ_ОШИБКАХ)
    ;                 
;

@ВПодсистеме
метод ОтправитьОбязательнуюСтатистику()
    попытка 
        пер РезультатОтправки = новый РезультатОтправкиСтатистики.РезультатОтправкиОбязательнойСтатистики()
        пер ПараметрыДоступа: КлиентСервисаСтатистики.ПараметрыДоступаКСервису = ПараметрыДоступаКСервисуСтатистики()
        пер ИдентфикаторПриложения: Строка = ИдентфикаторПриложения()
        
        КлиентСервисаСтатистики.ЗарегистрироватьСтатистикуПоЛичнымКабинетам(
            ИдентфикаторПриложения,
            Статистика.ЛичныеКабинеты(),
            ПараметрыДоступа
        )
        РезультатОтправки.ОтправленаСтатистикаЛичныхКабинетов = Истина
        РезультатОтправки.ДатаОтправкиОбязательнойСтатистики = Момент.Сейчас()
        РезультатОтправкиСтатистики.УстановитьРезультатОтправки(РезультатОтправки)
    поймать Ошибка: Исключение
        Журналирование.ЗарегистрироватьОшибку(Ошибка)
        выбросить Ошибка       
    ;             
;

@ВПодсистеме
метод ОтправитьДополнительнуюСтатистику()
    попытка 
        пер РезультатОтправки = новый РезультатОтправкиСтатистики.РезультатОтправкиДополнительнойСтатистики()
        пер ПараметрыДоступа: КлиентСервисаСтатистики.ПараметрыДоступаКСервису = ПараметрыДоступаКСервисуСтатистики()
        пер ИдентфикаторПриложения: Строка = ИдентфикаторПриложения()
        пер НастройкиОтправки: Статистика.НастройкиОтправки = Статистика.НастройкиОтправки()
        
        если НастройкиОтправки.ОтправлятьСтатистикуСправочников
            КлиентСервисаСтатистики.ЗарегистрироватьСтатистикуПоСправочникам(
                ИдентфикаторПриложения,
                Статистика.Справочники(),
                ПараметрыДоступа
            )
            РезультатОтправки.ОтправленаСтатистикаСправочников = Истина
        ;
        если НастройкиОтправки.ОтправлятьСтатистикуДокументов
            КлиентСервисаСтатистики.ЗарегистрироватьСтатистикуПоДокументам(
                ИдентфикаторПриложения,
                Статистика.Документы(),
                ПараметрыДоступа
            )
            РезультатОтправки.ОтправленаСтатистикаДокументов = Истина
        ;
        если НастройкиОтправки.ОтправлятьСтатистикуРасчетныхЛистков
            КлиентСервисаСтатистики.ЗарегистрироватьСтатистикуПоРасчетнымЛисткам(
                ИдентфикаторПриложения,
                Статистика.РасчетныеЛисты(),
                ПараметрыДоступа
            )
            РезультатОтправки.ОтправленаСтатистикаРасчетныхЛистков = Истина
        ;
        если НастройкиОтправки.ОтправлятьСтатистикуВложений
            КлиентСервисаСтатистики.ЗарегистрироватьСтатистикуПоВложениям(
                ИдентфикаторПриложения,
                Статистика.Вложения(),
                ПараметрыДоступа
            )
            РезультатОтправки.ОтправленаСтатистикаВложений = Истина
        ;
            
        РезультатОтправки.ДатаОтправкиДополнительнойСтатистики = Момент.Сейчас()
        РезультатОтправкиСтатистики.УстановитьРезультатОтправки(РезультатОтправки)
    поймать Ошибка: Исключение
        Журналирование.ЗарегистрироватьОшибку(Ошибка)
        выбросить Ошибка       
    ;                   
;

@ВПодсистеме
метод ОтправитьОтчетыОбОщибках()
     попытка 
        пер РезультатОтправки = новый РезультатОтправкиСтатистики.РезультатОтправкиОтчетовОбОшибках()
        пер ПараметрыДоступа: КлиентСервисаСтатистики.ПараметрыДоступаКСервису = ПараметрыДоступаКСервисуСтатистики()
        пер ИдентфикаторПриложения: Строка = ИдентфикаторПриложения()
        пер РезультатПредыдущейОтправки: Статистика.РезультатОтправки = Статистика.РезультатОтправки()    
        пер НачалоПолученияСтатистики: Момент?
        
        если РезультатПредыдущейОтправки.ДатаОтправкиОтчетовОбОшибках != Неопределено
            НачалоПолученияСтатистики = РезультатПредыдущейОтправки.ДатаОтправкиОтчетовОбОшибках + 1мс 
        ;    
        
        пер Ошибки: ЧитаемыйМассив<ПоказателиСтатистики.ОшибкаПриложения> = Статистика.ОшибкиПриложения(НачалоПолученияСтатистики)
        РезультатОтправки.ОтправленоОтчетовОбОшибках = Ошибки.Размер()
        РезультатОтправки.ДатаОтправкиОтчетовОбОшибках = Момент.Сейчас()
        
        КлиентСервисаСтатистики.ЗарегистрироватьОшибкиПриложения(
            ИдентфикаторПриложения,
            Ошибки,
            ПараметрыДоступа
        )
        РезультатОтправкиСтатистики.УстановитьРезультатОтправки(РезультатОтправки)
    поймать Ошибка: Исключение
        Журналирование.ЗарегистрироватьОшибку(Ошибка)
        выбросить Ошибка       
    ;                       
;

метод ОтправлятьОсновнуюСтатистику(НастройкиОтправки: Статистика.НастройкиОтправки): Булево
    возврат НастройкиОтправки.ОтправлятьКоличествоЛичныхКабинетов
;

метод ОтправлятьДополнительнуюСтатистику(НастройкиОтправки: Статистика.НастройкиОтправки): Булево
    возврат НастройкиОтправки.ОтправлятьСтатистикуВложений
        или НастройкиОтправки.ОтправлятьСтатистикуСправочников
        или НастройкиОтправки.ОтправлятьСтатистикуРасчетныхЛистков
        или НастройкиОтправки.ОтправлятьСтатистикуДокументов
        
;

метод ОтправлятьОтчетыОбОшибках(НастройкиОтправки: Статистика.НастройкиОтправки): Булево
    возврат НастройкиОтправки.ОтправлятьОтчетыОбОшибках
;
 
метод ВключитьОтправкуОсновнойСтатистики()
    пер Расписание = [Расписание.Ежедневно(Время{1:0:0})]
    
    МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
    если ЗапланированныеЗадания.ПолучитьПоКлючу(ИДЕНТИФИКАТОР_ЗАДАНИЯ_ОТПРАВКИ_ОСНОВНОЙ_СТАТИСТИКИ) == Неопределено
        ЗапланированныеЗадания.Создать(&Статистика.ОтправитьОбязательную)
            .Настроить(
                Ключ = ИДЕНТИФИКАТОР_ЗАДАНИЯ_ОТПРАВКИ_ОСНОВНОЙ_СТАТИСТИКИ,
                Расписание = Расписание)
            .ЗапланироватьВТранзакции()
    иначе
        ЗапланированныеЗадания.Изменить(ИДЕНТИФИКАТОР_ЗАДАНИЯ_ОТПРАВКИ_ОСНОВНОЙ_СТАТИСТИКИ)
            ?.Настроить(Расписание = Расписание)
            .ЗапланироватьВТранзакции()
    ;         
;  

метод ВключитьОтправкуДополнительнойСтатистики()
    пер Расписание = [Расписание.Еженедельно(Время{2:0:0}, {ДеньНедели.Суббота})]
    МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
    если ЗапланированныеЗадания.ПолучитьПоКлючу(ИДЕНТИФИКАТОР_ЗАДАНИЯ_ОТПРАВКИ_ДОПОЛНИТЕЛЬНОЙ_СТАТИСТИКИ) == Неопределено
        ЗапланированныеЗадания.Создать(&Статистика.ОтправитьДополнительную)
            .Настроить(
                Ключ = ИДЕНТИФИКАТОР_ЗАДАНИЯ_ОТПРАВКИ_ДОПОЛНИТЕЛЬНОЙ_СТАТИСТИКИ,
                Расписание = Расписание)
            .ЗапланироватьВТранзакции()
    иначе
         ЗапланированныеЗадания.Изменить(ИДЕНТИФИКАТОР_ЗАДАНИЯ_ОТПРАВКИ_ДОПОЛНИТЕЛЬНОЙ_СТАТИСТИКИ)
            ?.Настроить(Расписание = Расписание)
            .ЗапланироватьВТранзакции()
    ;         
; 

метод ВключитьОтправкуОтчетовОбОшибках()
    пер Расписание = [Расписание.Ежедневно(Время{3:0:0})]
    МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
    если ЗапланированныеЗадания.ПолучитьПоКлючу(ИДЕНТИФИКАТОР_ЗАДАНИЯ_ОТПРАВКИ_ОТЧЕТОВ_ОБ_ОШИБКАХ) == Неопределено
        ЗапланированныеЗадания.Создать(&Статистика.ОтправитьОтчетыОбОшибках)
            .Настроить(
                Ключ = ИДЕНТИФИКАТОР_ЗАДАНИЯ_ОТПРАВКИ_ОТЧЕТОВ_ОБ_ОШИБКАХ,
                Расписание = Расписание)
            .ЗапланироватьВТранзакции()
    иначе
        ЗапланированныеЗадания.Изменить(ИДЕНТИФИКАТОР_ЗАДАНИЯ_ОТПРАВКИ_ОТЧЕТОВ_ОБ_ОШИБКАХ)
            ?.Настроить(Расписание = Расписание)
            .ЗапланироватьВТранзакции()
    ;         
; 

метод ПараметрыДоступаКСервисуСтатистики():КлиентСервисаСтатистики.ПараметрыДоступаКСервису
    пер ПараметрыДоступаКEssm = ВзаимодействиеСEssm.ПараметрыДоступаКEssm()
    возврат новый КлиентСервисаСтатистики.ПараметрыДоступаКСервису(
        ПараметрыДоступаКEssm.АдресСервераEssm,
        ПараметрыДоступаКEssm.ИдКлиентаEssm,
        ПараметрыДоступаКEssm.СекретКлиентаEssm,
        ПараметрыДоступаКEssm.ИмяПриложенияEssm
    )
;

метод ИдентфикаторПриложения(): Строка
    возврат МенеджерНастроекПриложения.НастройкиПриложения().УуидПриложения.ВСтроку()
;