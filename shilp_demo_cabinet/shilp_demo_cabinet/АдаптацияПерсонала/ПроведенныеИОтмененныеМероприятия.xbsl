импорт ИнтерфейсныеКомпонентыСтандартные
импорт Компания
импорт ОбщиеСтандартные

@ВПроекте
@Реализация
метод Обновить()
    ОбновитьДанные()
;

@Обработчик
метод ПослеСоздания()
    УстановитьПериодПоУмолчанию()
    ОбновитьДанные()
    НастроитьДиаграмму()
    ЗагрузкаЗавершена()
;

метод ЗагрузкаЗавершена()
    ЗагрузкаЗавершена = Истина
;

метод ОткрытьНастройкиОбработчик(Команда: ОбычнаяКоманда)
    ОткрытьНастройки()
;

метод ФильтрПредставлениеПриНажатии(Источник: Компонент, Событие: СобытиеКомпонента)
    ОткрытьНастройки()
;

метод ФильтрПредставление(): Строка
    если Период == Неопределено
        возврат ""
    ;
    знч ЭлементыФильтра: Массив<Строка>
    ЭлементыФильтра.Добавить(МенеджерДат.ПредставлениеПериода(Период!))
    если не Подразделения.Пусто()
        ЭлементыФильтра.Добавить("${Подразделения.Первый()}")
        если Подразделения.Размер() > 1
            ЭлементыФильтра[ЭлементыФильтра.Граница()] += " и еще %{Подразделения.Размер() - 1}"
        ;
    ;
    возврат ЭлементыФильтра.Соединить(", ")
;

метод ОткрытьНастройки()
    УстановитьДоступныеПодразделения()
    Настройки.ОткрытьВоВсплывающемОкне(Компоненты.ОткрытьНастройки)    
;

метод УстановитьДоступныеПодразделения()
    знч НастройкиПоТипу = Компоненты.Подразделения.НастройкиВводаСсылок.НастройкиПоТипу
    если НастройкиПоТипу.СодержитКлюч(Тип<СтруктураПредприятия.Ссылка>)
        возврат
    ;
    СтруктураПредприятия.ДобавитьНастройкуВводаОграниченныйСписок(
        Настройки = Компоненты.Подразделения.НастройкиВводаСсылок, 
        Список = ДоступныеПодразделения()
    )
;

@НаСервере @ДоступноСКлиента
статический метод ДоступныеПодразделения(): ЧитаемоеМножество<СтруктураПредприятия.Ссылка>  
    возврат АдаптацияПерсонала.ДоступныеПодразделения()
;

метод СтандартныйПериодПриНажатии(Источник: КомпонентВыбора, Событие: СобытиеПриНажатии)
    Период = (Источник.ДополнительныеДанные как СтандартныйПериод).Период
    ОбновитьДанные()
;

метод ПериодПриИзменении(Источник: ПолеВвода<ЗакрытыйДиапазон<Дата>?>, Событие: СобытиеПриИзменении<ЗакрытыйДиапазон<Дата>?>)
    если Период == Неопределено
        УстановитьПериодПоУмолчанию()
    иначе
        Период = новый ЗакрытыйДиапазон(Период!.От.НачалоМесяца(), Период!.До.КонецМесяца())
    ;
    ОбновитьДанные()
;

метод ПодразделенияВидОтображенияКнопкиОчистить(): ВидОтображения
    возврат Подразделения.Пусто() ? ВидОтображения.НеОтображать : ВидОтображения.Всегда
;

метод ПодразделенияПриИзменении(Источник: Компонент, Событие: СобытиеКомпонента)
    ОбновитьДанные()
;

метод ЗаглушкаВидимость(): Булево
    возврат не ДиаграммаВидимость()   
;

метод ДиаграммаВидимость(): Булево
    возврат ЕстьДанные()    
;

метод ЗаглушкаТекст(): Строка
    возврат ЗагрузкаЗавершена ? "Нет данных для отображения" : ""    
;

метод УстановитьПериодПоУмолчанию()
    знч НачалоМесяцаНачала = Дата.Сейчас().ДобавитьМесяцы(-(КоличествоМесяцев-1)).НачалоМесяца()
    знч КонецМесяцаОкончания = Дата.Сейчас().КонецМесяца()
    Период = новый ЗакрытыйДиапазон(НачалоМесяцаНачала, КонецМесяцаОкончания)
;

метод НастроитьДиаграмму()
    знч Диаграмма = Компоненты.Диаграмма

    знч ОсьY = новый ЧисловаяОсьДиаграммы()
    ОсьY.Минимум = 0
    ОсьY.Целочисленная = Истина
    Диаграмма.ОсиY.Добавить(ОсьY)

    знч ОсьX = новый КатегориальнаяОсьДиаграммы()
    ОсьX.ПолеДанных.ПолеЗначения = "Месяц"
    ОсьX.ПолеДанных.ОтображаемоеЗначение = "МесяцПредставление"
    Диаграмма.ОсиX.Добавить(ОсьX)

    знч Проведено = новый СтолбчатаяСерияДиаграммы()
    Проведено.Имя = "Проведено"
    Проведено.Ось = ОсьY
    Проведено.ПоляДанных.Ключ.ПолеЗначения = "Месяц"
    Проведено.ПоляДанных.Ключ.ОтображаемоеЗначение = "МесяцПредставление"
    Проведено.ПоляДанных.Значение.ПолеЗначения = "ПроведеноМероприятий"
    Проведено.ПоляДанных.Значение.ОтображаемоеЗначение = "ПроведеноМероприятийПредставление"
    Проведено.ПоляДанных.Маркер = "ПроведеноМероприятийПредставление"
    Проведено.ПоляДанных.Цвет = "ПроведеноМероприятийЦвет"
    Проведено.Стековая = Истина
    Диаграмма.Серии.Добавить(Проведено)

    знч Отменено = новый СтолбчатаяСерияДиаграммы()
    Отменено.Имя = "Отменено"
    Отменено.Ось = ОсьY
    Отменено.ПоляДанных.Ключ.ПолеЗначения = "Месяц"
    Отменено.ПоляДанных.Ключ.ОтображаемоеЗначение = "МесяцПредставление"
    Отменено.ПоляДанных.Значение.ПолеЗначения = "ОтмененоМероприятий"
    Отменено.ПоляДанных.Значение.ОтображаемоеЗначение = "ОтмененоМероприятийПредставление"
    Отменено.ПоляДанных.Маркер = "ОтмененоМероприятийПредставление"
    Отменено.ПоляДанных.Цвет = "ОтмененоМероприятийЦвет"
    Отменено.Стековая = Истина
    Диаграмма.Серии.Добавить(Отменено)

    Диаграмма.Легенда = новый ЛегендаДиаграммы()
    Диаграмма.Легенда.Расположение = КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон ? РасположениеЛегендыДиаграммы.Снизу : РасположениеЛегендыДиаграммы.Конец
;

метод ОбновитьДанные()
    Компоненты.Диаграмма.Источник.Данные = ПолучитьДанные(Период!, Подразделения)
;

метод ЕстьДанные(): Булево
    возврат не Компоненты.Диаграмма.Источник.Данные.Пусто()    
;

@ВПодсистеме
@НаСервере @НаКлиенте
структура ДанныеДиаграммы
    обз пер Месяц: Число
    обз пер МесяцПредставление: Строка
    обз пер ПроведеноМероприятий: Число
    обз пер ПроведеноМероприятийПредставление: Строка
    обз пер ПроведеноМероприятийЦвет: Цвет | Авто
    обз пер ОтмененоМероприятий: Число
    обз пер ОтмененоМероприятийПредставление: Строка
    обз пер ОтмененоМероприятийЦвет: Цвет | Авто
;

@НаСервере @ДоступноСКлиента
статический метод ПолучитьДанные(Период: ЗакрытыйДиапазон<Дата>, Подразделения: Обходимое<СтруктураПредприятия.Ссылка>): Массив<ДанныеДиаграммы>
    знч ДатаВремяНачала = Период.От.НачалоМесяца().НачалоДня()
    знч ДатаВремяОкончания = Период.До.КонецМесяца().КонецДня()
    знч ОтбиратьПоПодразделениям = не Подразделения.Пусто()
    знч Запрос = Запрос{
        Выбрать
            Месяц Как Месяц,
            Сумма(Проведено) Как ПроведеноМероприятий,
            Сумма(Отменено) Как ОтмененоМероприятий
        Из 
            (Выбрать
                СтатусыМероприятий.Период.Дата.НачалоМесяца() Как Месяц,
                Выбор
                    Когда СтатусыМероприятий.Статус == СтатусыМероприятия.Проведено Тогда 1
                    Иначе 0
                Конец Как Проведено,
                Выбор
                    Когда СтатусыМероприятий.Статус == СтатусыМероприятия.Отменено Тогда 1
                    Иначе 0
                Конец Как Отменено
            Из
                ПроцессыАдаптации Как ПроцессыАдаптации
                Соединение Мероприятия Как Мероприятия
                    По ПроцессыАдаптации.Ссылка == Мероприятия.ПроцессАдаптации
                Соединение СтатусыМероприятий.СрезПоследних Как СтатусыМероприятий
                    По Мероприятия.Ссылка == СтатусыМероприятий.Мероприятие
            Где
                (НЕ %ОтбиратьПоПодразделениям ИЛИ ПроцессыАдаптации.Подразделение В(%Подразделения))
                И СтатусыМероприятий.Статус В (СтатусыМероприятия.Проведено, СтатусыМероприятия.Отменено)
                И СтатусыМероприятий.Период Между %ДатаВремяНачала И %ДатаВремяОкончания
            ) Как ВложенныйЗапрос
        Сгруппировать По
            Месяц
    }
    
    знч ДанныеПоМесяцам = ИнициализиироватьДанные(ДатаВремяНачала.Дата, ДатаВремяОкончания.Дата)
    исп РезультатЗапроса = Запрос.Выполнить()
    для СтрокаРезультата из РезультатЗапроса
        ДобавитьДанные(ДанныеПоМесяцам, СтрокаРезультата.Месяц, СтрокаРезультата.ПроведеноМероприятий, СтрокаРезультата.ОтмененоМероприятий)
    ;
    если не ПустыеДанные(ДанныеПоМесяцам)
        возврат новый Массив<ДанныеДиаграммы>(ДанныеПоМесяцам.Значения())
    иначе
        возврат []
    ;
;

@НаСервере @НаКлиенте
статический метод ИнициализиироватьДанные(МесяцНачала: Дата, МесяцОкончания: Дата): Соответствие<Дата, ДанныеДиаграммы>
    знч Данные: Соответствие<Дата, ДанныеДиаграммы>
    пер ТекущийМесяц = МесяцНачала.НачалоМесяца()
    пока ТекущийМесяц <= МесяцОкончания.НачалоМесяца()
        ДобавитьДанные(Данные, ТекущийМесяц, 0, 0)
        ТекущийМесяц = ТекущийМесяц.ДобавитьМесяцы(1)
    ;
    возврат Данные
;

@НаСервере @НаКлиенте
статический метод ПустыеДанные(ДанныеПоМесяцам: Соответствие<Дата, ДанныеДиаграммы>): Булево
    пер Пусто = Истина
    для КлючЗначение из ДанныеПоМесяцам
        знч ДанныеДиаграммы = КлючЗначение.Значение
        если не ПустыеДанные(ДанныеДиаграммы)
            Пусто = Ложь
            прервать
        ;
    ;
    возврат Пусто
;

@НаСервере @НаКлиенте
статический метод ПустыеДанные(ДанныеДиаграммы: ДанныеДиаграммы): Булево
    возврат ДанныеДиаграммы.ОтмененоМероприятий == 0 и ДанныеДиаграммы.ПроведеноМероприятий == 0
;

@НаСервере @НаКлиенте
статический метод ДобавитьДанные(Данные: Соответствие<Дата, ДанныеДиаграммы>, Месяц: Дата, ПроведеноМероприятий: Число, ОтмененоМероприятий: Число)
    Данные.Вставить(Месяц, новый ДанныеДиаграммы(
        Месяц = Месяц.Год * 100 + Месяц.Месяц,
        МесяцПредставление = "${Месяц|МММ гг}",
        ПроведеноМероприятий = ПроведеноМероприятий,
        ПроведеноМероприятийПредставление = "$ПроведеноМероприятий",
        ПроведеноМероприятийЦвет = БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Зеленый),
        ОтмененоМероприятий = ОтмененоМероприятий,
        ОтмененоМероприятийПредставление = "$ОтмененоМероприятий",
        ОтмененоМероприятийЦвет = БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Оранжевый)
    ))
;