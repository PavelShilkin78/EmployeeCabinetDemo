импорт ВебApi
импорт ОбменДанными

//Контракт ДанныеApi
@ВПроекте
@Реализация
метод ТипДанныхJson(ТипОбъекта: Тип, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>
    выбор ТипОбъекта
    когда Тип<ПроцессыАдаптации.Ссылка>
        Типы.Добавить(ПроцессыАдаптацииDto.ТипДанныхJson(ВерсияФорматаОбмена))
    когда Тип<Мероприятия.Ссылка>
        Типы.Добавить(МероприятияDto.ТипДанныхJson(ВерсияФорматаОбмена))
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод ТипКоллекцииДанныхJson(ТипОбъекта: Тип, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    пер Типы: Массив<Тип>
    выбор ТипОбъекта
    когда Тип<ПроцессыАдаптации.Ссылка>
        Типы.Добавить(ПроцессыАдаптацииDto.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    когда Тип<Мероприятия.Ссылка>
        Типы.Добавить(МероприятияDto.ТипКоллекцииДанныхJson(ВерсияФорматаОбмена))
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод ПолучитьДанныеJson(ТипОбъекта: Тип, Ссылка: ВходящиеДанные.Ссылка|ИсходящиеДанные.Ссылка,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<Объект?>

    пер ДанныеJson: Массив<Объект?>
    выбор ТипОбъекта
    когда Тип<ПроцессыАдаптации.Ссылка>
        ДанныеJson.Добавить(ПроцессыАдаптацииDto.ПолучитьДанныеJson(Ссылка как ПроцессыАдаптации.Ссылка, Сервисы, ВерсияФорматаОбмена))
    когда Тип<Мероприятия.Ссылка>
        ДанныеJson.Добавить(МероприятияDto.ПолучитьДанныеJson(Ссылка как Мероприятия.Ссылка, Сервисы, ВерсияФорматаОбмена))
    ;
    возврат ДанныеJson
;

@ВПроекте
@Реализация
метод МассивСсылокПоФильтру(ТипОбъекта: Тип, Фильтр: () -> ЧитаемыйМассив<Справочник.Ссылка>): Массив<ЧитаемыйМассив<Справочник.Ссылка>>
    возврат []
;

@ВПроекте
@Реализация
метод УдалитьОбъекты(ТипОбъекта: Тип, ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>,
    Сервисы: ВебApiСервер.СервисыУдаленияОбъектов)
;

@ВПроекте
@Реализация
метод ТипОбъектаJson(ТипОбъекта: Тип): Массив<Строка>
    пер ТипОбъектаJson: Массив<Строка>
    выбор ТипОбъекта
    когда Тип<ПроцессыАдаптации.Ссылка>
        ТипОбъектаJson.Добавить(ПроцессыАдаптацииDto.ТипОбъектаJson())
    когда Тип<Мероприятия.Ссылка>
        ТипОбъектаJson.Добавить(МероприятияDto.ТипОбъектаJson())
    ;
    возврат ТипОбъектаJson
;

@ВПроекте
@Реализация
метод ЗагрузитьОбъектИзJson(ТипОбъекта: Тип, ТипДанных: Тип, ДанныеJson: Объект?, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    выбор ТипОбъекта
    когда Тип<ПроцессыАдаптации.Ссылка>
        ПроцессыАдаптацииDto.ЗагрузитьОбъектИзJson(ТипДанных, ДанныеJson, Сервисы)
    когда Тип<Мероприятия.Ссылка>
        МероприятияDto.ЗагрузитьОбъектИзJson(ТипДанных, ДанныеJson, Сервисы)
    ;
;

@ВПроекте
@Реализация
метод ПослеЗаписиГруппыОбъектов(ТипОбъекта: Тип, МассивОбъектовОтложенногоОбновления: Массив<ВебApiСервер.ОбъектОтложенногоОбновления>)
;

@ВПроекте
@Реализация
метод ИзменитьОбъектИзJson(ТипОбъекта: Тип, ДанныеJson: Объект, Сервисы: ВебApiСервер.СервисыЗагрузкиJson, ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации)
;

@ВПроекте
@Реализация
метод ЗавершитьИзменениеОбъектИзJson(ТипОбъекта: Тип, МассивСсылок: ЧитаемыйМассив<ВходящиеДанные.Ссылка>, ЗаданиеМодификации: ВебApiСервер.ЗаданиеМодификации)
;

@ВПроекте
@Реализация
метод ГруппаИзмененийВJson(ТипОбъекта: Тип, Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<ЧитаемоеСоответствие<Строка, Массив<Объект?>>>

    знч ДанныеJson: Массив<ЧитаемоеСоответствие<Строка, Массив<Объект?>>>
    выбор ТипОбъекта
    когда Тип<ПроцессыАдаптации.Ссылка>
        знч ПроцессыАдаптации: Массив<ПроцессыАдаптации.Ссылка>
        для Ссылка из Ссылки
            ПроцессыАдаптации.Добавить(Ссылка как ПроцессыАдаптации.Ссылка)
        ;
        ДанныеJson.Добавить(ПроцессыАдаптацииDto.ГруппаИзмененийВJson(ПроцессыАдаптации, Сервисы, ВерсияФорматаОбмена))
    когда Тип<Мероприятия.Ссылка>
        знч Мероприятия: Массив<Мероприятия.Ссылка>
        для Ссылка из Ссылки
            Мероприятия.Добавить(Ссылка как Мероприятия.Ссылка)
        ;
        ДанныеJson.Добавить(МероприятияDto.ГруппаИзмененийВJson(Мероприятия, Сервисы, ВерсияФорматаОбмена))
    ;
    возврат ДанныеJson
;

@ВПроекте
@Реализация
метод МассивТипов(Получатель: ВидПриложения?, ВерсияФорматаОбмена: Версия?): Массив<Тип>
    знч Типы: Массив<Тип>
    выбор Получатель
    когда Ess
        Типы.Добавить(Тип<ПроцессыАдаптации.Ссылка>)
        Типы.Добавить(Тип<Мероприятия.Ссылка>)
    когда Hr
        Типы.Добавить(Тип<ПроцессыАдаптации.Ссылка>)
        Типы.Добавить(Тип<Мероприятия.Ссылка>)
    ;
    возврат Типы
;

@ВПроекте
@Реализация
метод ИнструментыМенеджераОбъекта(ТипОбъекта: Тип): Массив<ВебApiСервер.ИнструментыМенеджераОбъекта>
    пер НаборИнструментыМенеджераОбъекта: Массив<ВебApiСервер.ИнструментыМенеджераОбъекта>
    пер ИнструментыМенеджераОбъекта: ВебApiСервер.ИнструментыМенеджераОбъекта
    выбор ТипОбъекта
    когда Тип<ПроцессыАдаптации.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как ПроцессыАдаптации.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    когда Тип<Мероприятия.Ссылка>
        ИнструментыМенеджераОбъекта.ЗаписьОбъекта = (Объект: Сущность.Объект) -> (Объект как Мероприятия.Объект).Записать()
        НаборИнструментыМенеджераОбъекта.Добавить(ИнструментыМенеджераОбъекта)
    ;
    возврат НаборИнструментыМенеджераОбъекта
;
//Конец ДанныеApi

@Подписка(Событие{Мероприятия.Объект.ПослеЗаписи})
метод ПослеЗаписиМероприятия(Мероприятие: Мероприятия.Данные, До: Мероприятия.Данные, ПараметрыЗаписи: Мероприятия.ПараметрыЗаписи)
    исп КонтекстДоступа.Привилегированный()
    РегистрацияИзменений.ЗарегистрироватьИзменение(Мероприятие.Ссылка, Неопределено)
;

@Подписка(Событие{Мероприятия.Объект.ПослеУдаления})
метод ПослеУдаленияМероприятия(Мероприятие: Мероприятия.Данные, ПараметрыУдаления: Мероприятия.ПараметрыУдаления)
    исп КонтекстДоступа.Привилегированный()
    РегистрацияИзменений.ЗарегистрироватьИзменение(Мероприятие.Ссылка, Неопределено, ХарактерыИзменений.Удаление)
;

@Подписка(Событие{ПроцессыАдаптации.Объект.ПослеЗаписи})
метод ПослеЗаписиПроцессаАдаптации(ПроцессАдаптации: ПроцессыАдаптации.Данные, До: ПроцессыАдаптации.Данные, ПараметрыЗаписи: ПроцессыАдаптации.ПараметрыЗаписи)
    исп КонтекстДоступа.Привилегированный()
    РегистрацияИзменений.ЗарегистрироватьИзменение(ПроцессАдаптации.Ссылка, Неопределено)
;

@Подписка(Событие{ПроцессыАдаптации.Объект.ПослеУдаления})
метод ПослеУдаленияПроцессаАдаптации(ПроцессАдаптации: ПроцессыАдаптации.Данные, ПараметрыУдаления: ПроцессыАдаптации.ПараметрыУдаления)
    исп КонтекстДоступа.Привилегированный()
    РегистрацияИзменений.ЗарегистрироватьИзменение(ПроцессАдаптации.Ссылка, Неопределено, ХарактерыИзменений.Удаление)
;

@ВыполнятьПриЗагрузкеДанных
@Подписка(Событие{СтатусыМероприятий.НаборЗаписей.ПослеЗаписи})
метод ПослеЗаписиСтатусовМероприятий(НаборЗаписей: СтатусыМероприятий.НаборЗаписей.Данные, Замещать: Булево, ПараметрыЗаписи: СтатусыМероприятий.ПараметрыЗаписи)
    исп КонтекстДоступа.Привилегированный()
    если не НаборЗаписей.Фильтр.Мероприятие.Использование
        возврат
    ;
    знч Мероприятие = НаборЗаписей.Фильтр.Мероприятие.Значение
    если Мероприятие == Неопределено
        возврат
    ;
    если НаборЗаписей.Размер() != 1
        возврат
    ;
    знч ЗаписываемыйСтатус = НаборЗаписей.Единственный().Статус
    если ЗаписываемыйСтатус != СтатусыМероприятия.Черновик
        ОбменДанными::ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Мероприятие!, Истина)
    ;
    если не ПараметрыЗаписи.РежимЗагрузкиДанных
        РегистрацияИзменений.ЗарегистрироватьИзменение(Мероприятие!, Неопределено)
    ;
;

@ВыполнятьПриЗагрузкеДанных
@Подписка(Событие{СтатусыПроцессовАдаптации.НаборЗаписей.ПослеЗаписи})
метод ПослеЗаписиСтатусовПроцессовАдаптации(НаборЗаписей: СтатусыПроцессовАдаптации.НаборЗаписей.Данные, Замещать: Булево, ПараметрыЗаписи: СтатусыПроцессовАдаптации.ПараметрыЗаписи)
    исп КонтекстДоступа.Привилегированный()
    если не НаборЗаписей.Фильтр.ПроцессАдаптации.Использование
        возврат
    ;
    знч ПроцессАдаптации = НаборЗаписей.Фильтр.ПроцессАдаптации.Значение
    если ПроцессАдаптации == Неопределено
        возврат
    ;
    если НаборЗаписей.Размер() != 1
        возврат
    ;
    знч ЗаписываемыйСтатус = НаборЗаписей.Единственный().Статус
    если ЗаписываемыйСтатус != СтатусыПроцессаАдаптации.Черновик
        ОбменДанными::ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(ПроцессАдаптации!, Истина)
    ;
    если не ПараметрыЗаписи.РежимЗагрузкиДанных
        РегистрацияИзменений.ЗарегистрироватьИзменение(ПроцессАдаптации!, Неопределено)
    ;
;