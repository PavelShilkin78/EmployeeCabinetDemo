импорт ФизическиеЛица
импорт Компания
импорт СтандартноеПриложение

//КонтрольДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат АдаптацияПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаДляПроцессовАдаптации()
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Объекты: ЧитаемыйМассив<ПроцессыАдаптации.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ПроцессыАдаптации.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    возврат АдаптацияПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаДляПроцессовАдаптации(Объекты)
;

//КонтрольДоступа

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЕстьЗаписи(): Булево
    знч Запрос = Запрос{
        Выбрать Первые 1
            Ссылка
        Из
            ПроцессыАдаптации
    }
    возврат Запрос.Выполнить().ЕдинственныйИлиУмолчание() != Неопределено
;

@ВПроекте
@НаКлиенте @НаСервере
структура ОсновныеДанные
    обз знч Сотрудник: ФизическиеЛица.Ссылка
    обз знч Руководитель: ФизическиеЛица.Ссылка
    обз знч HrМенеджер: ФизическиеЛица.Ссылка?
    обз знч Подразделение: СтруктураПредприятия.Ссылка
    обз знч Должность: Должности.Ссылка
    обз знч ДатаСобытия: Дата
    обз знч ПлановаяДатаЗавершения: Дата?
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод Прочитать(ПроцессАдаптации: ПроцессыАдаптации.Ссылка): ОсновныеДанные
    возврат Прочитать([ПроцессАдаптации])[ПроцессАдаптации]
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод Прочитать(ПроцессыАдаптации: ЧитаемаяКоллекция<ПроцессыАдаптации.Ссылка>): Соответствие<ПроцессыАдаптации.Ссылка, ОсновныеДанные>
    если ПроцессыАдаптации.Пусто()
        возврат {:}
    ;
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Сотрудник,
            Руководитель,
            HrМенеджер,
            Подразделение,
            Должность,
            ДатаСобытия,
            ПлановаяДатаЗавершения
        Из
            ПроцессыАдаптации
        Где
            Ссылка В (%ПроцессыАдаптации)
    }
    знч Результат: Соответствие<ПроцессыАдаптации.Ссылка, ОсновныеДанные>
    знч РезультатЗапроса = Запрос.Выполнить()
    для СтрокаРезультата из РезультатЗапроса
        знч Данные = новый ОсновныеДанные(
            СтрокаРезультата.Сотрудник,
            СтрокаРезультата.Руководитель,
            СтрокаРезультата.HrМенеджер,
            СтрокаРезультата.Подразделение,
            СтрокаРезультата.Должность,
            СтрокаРезультата.ДатаСобытия,
            СтрокаРезультата.ПлановаяДатаЗавершения
        )
        Результат.Вставить(СтрокаРезультата.Ссылка, Данные)
    ;
    возврат Результат
;

@ВПроекте
@НаСервере
метод УстановитьПлановуюДатуЗавершения(ПроцессАдаптации: ПроцессыАдаптации.Ссылка, РассчитатьПлановуюДатаЗавершения: (Дата)->Дата)
    знч ПроцессАдаптацииОбъект = ПроцессАдаптации.ЗагрузитьОбъект(Истина)!
    ПроцессАдаптацииОбъект.ПлановаяДатаЗавершения = РассчитатьПлановуюДатаЗавершения(ПроцессАдаптацииОбъект.ДатаСобытия)
    ПроцессАдаптацииОбъект.Записать()    
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод УчастникПоРоли(ПроцессАдаптации: ПроцессыАдаптации.Ссылка, Роль: РолиУчастниковАдаптации): ФизическиеЛица.Ссылка?
    знч ДанныеПроцесса = Прочитать(ПроцессАдаптации)
    выбор Роль
    когда HrМенеджер
        возврат ДанныеПроцесса.HrМенеджер
    когда Руководитель
        возврат ДанныеПроцесса.Руководитель
    когда Сотрудник
        возврат ДанныеПроцесса.Сотрудник
    ;
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод РолиУчастников(ПроцессАдаптации: ПроцессыАдаптации.Ссылка): Соответствие<ФизическиеЛица.Ссылка, Множество<РолиУчастниковАдаптации>>
    знч РолиУчастников: Соответствие<ФизическиеЛица.Ссылка, Множество<РолиУчастниковАдаптации>>
    знч ДанныеПроцесса = Прочитать(ПроцессАдаптации)
    для Участник из Участники(ДанныеПроцесса)
        РолиУчастников.Вставить(Участник, РолиУчастника(ДанныеПроцесса, Участник))
    ;
    возврат РолиУчастников
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод РолиУчастника(ПроцессАдаптации: ПроцессыАдаптации.Ссылка, Участник: ФизическиеЛица.Ссылка): Множество<РолиУчастниковАдаптации>
    знч ДанныеПроцесса = Прочитать(ПроцессАдаптации)
    возврат РолиУчастника(ДанныеПроцесса, Участник)
;

@ВПроекте
@НаСервере
метод ПодразделенияПроцессовАдаптации(ПроцессыАдаптации: ЧитаемаяКоллекция<ПроцессыАдаптации.Ссылка>): ЧитаемоеСоответствие<ПроцессыАдаптации.Ссылка, СтруктураПредприятия.Ссылка>
    знч ПодразделенияПроцессовАдаптации: Соответствие<ПроцессыАдаптации.Ссылка, СтруктураПредприятия.Ссылка>
    если ПроцессыАдаптации.Пусто()
        возврат ПодразделенияПроцессовАдаптации
    ;

    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Подразделение
        Из
            ПроцессыАдаптации
        Где
            Ссылка в (%ПроцессыАдаптации)
    }
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ПодразделенияПроцессовАдаптации.Вставить(СтрокаРезультата.Ссылка, СтрокаРезультата.Подразделение)
    ;
    возврат ПодразделенияПроцессовАдаптации
;

@ВПроекте
@НаСервере
метод ВсеУчастникиПроцессовАдаптации(ПроцессыАдаптации: ЧитаемаяКоллекция<ПроцессыАдаптации.Ссылка>): ЧитаемоеСоответствие<ПроцессыАдаптации.Ссылка, ЧитаемоеМножество<ФизическиеЛица.Ссылка>>
    знч УчастникиПроцессовАдаптации: Соответствие<ПроцессыАдаптации.Ссылка, Множество<ФизическиеЛица.Ссылка>> 
    если ПроцессыАдаптации.Пусто()
        возврат УчастникиПроцессовАдаптации
    ;
    для ПроцессАдаптации из ПроцессыАдаптации
        УчастникиПроцессовАдаптации.Вставить(ПроцессАдаптации, {})
    ;
    знч Запрос = Запрос{
        Выбрать Различные
            Участники.Владелец.ПроцессАдаптации как ПроцессАдаптации,
            Участники.Элемент.Участник Как Участник
        Из
            Мероприятия.Участники Как Участники
        Где
            Участники.Владелец.ПроцессАдаптации В (%ПроцессыАдаптации)
        Объединить
        Выбрать
            Мероприятия.ПроцессАдаптации,
            Мероприятия.Ответственный
        Из
            Мероприятия Как Мероприятия
        Где
            Мероприятия.ПроцессАдаптации В (%ПроцессыАдаптации)
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    для СтрокаРезультата из РезультатЗапроса
        УчастникиПроцессовАдаптации[СтрокаРезультата.ПроцессАдаптации как ПроцессыАдаптации.Ссылка].Добавить(СтрокаРезультата.Участник)
    ;
    возврат УчастникиПроцессовАдаптации    
;

@ВПроекте
@НаСервере
метод РуководителиПроцессовАдаптации(ПроцессыАдаптации: ЧитаемаяКоллекция<ПроцессыАдаптации.Ссылка>): ЧитаемоеСоответствие<ПроцессыАдаптации.Ссылка, ФизическиеЛица.Ссылка>
    знч РуководителиПроцессовАдаптации: Соответствие<ПроцессыАдаптации.Ссылка, ФизическиеЛица.Ссылка>

    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Руководитель
        Из
            ПроцессыАдаптации
        Где
            Ссылка в (%ПроцессыАдаптации)
    }

    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        РуководителиПроцессовАдаптации.Вставить(СтрокаРезультата.Ссылка, СтрокаРезультата.Руководитель)
    ;
    возврат РуководителиПроцессовАдаптации
;

@ВПроекте
@НаКлиенте
метод ОткрытьМодальноФормуНового()
    ПроцессАдаптацииКарточка.ОткрытьВМодальномОкне()
;

@ВПроекте
@НаКлиенте
метод СоздатьКарточкуНового(): ПроцессАдаптацииКарточка
    знч Форма = новый ПроцессАдаптацииКарточка()
    возврат Форма
;

@ВПроекте
@НаКлиенте
метод СоздатьКарточку(ПроцессАдаптации: ПроцессыАдаптации.Ссылка): ПроцессАдаптацииКарточка
    возврат новый ПроцессАдаптацииКарточка(КлючОбъекта = ПроцессАдаптации)
;

@ВПроекте
@НаКлиенте
метод ОткрытьМодальноФорму(ПроцессАдаптации: ПроцессыАдаптации.Ссылка)
    знч Форма = СоздатьКарточку(ПроцессАдаптации)
    Форма.ОткрытьВМодальномОкне()
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ВыполняющийсяПроцессАдаптацииПоСотруднику(Сотрудник: ФизическиеЛица.Ссылка): ПроцессыАдаптации.Ссылка?
    знч Запрос = Запрос{
        Выбрать Первые 1
            ПроцессыАдаптации.Ссылка Как ПроцессАдаптации
        Из
            ПроцессыАдаптации Как ПроцессыАдаптации
            Соединение СтатусыПроцессовАдаптации Как СтатусыПроцессовАдаптации
                По ПроцессыАдаптации.Ссылка == СтатусыПроцессовАдаптации.ПроцессАдаптации
        Где
            ПроцессыАдаптации.Сотрудник == %Сотрудник
            И СтатусыПроцессовАдаптации.Статус == %{СтатусыПроцессаАдаптации.Выполняется}
        Упорядочить По
            ПроцессыАдаптации.ДатаСобытия Убыв
    }
    возврат Запрос.Выполнить().ПервыйИлиУмолчание()?.ПроцессАдаптации
;

@ВПодсистеме
@НаСервере
метод ЕстьПроцессыАдаптацииПоРуководителю(Руководитель: ФизическиеЛица.Ссылка): Булево
    знч Запрос = Запрос{
        Выбрать Первые 1
            ПроцессыАдаптации.Ссылка Как ПроцессАдаптации
        Из
            ПроцессыАдаптации Как ПроцессыАдаптации
            Соединение СтатусыПроцессовАдаптации Как СтатусыПроцессовАдаптации
                По ПроцессыАдаптации.Ссылка == СтатусыПроцессовАдаптации.ПроцессАдаптации
        Где
            ПроцессыАдаптации.Руководитель == %Руководитель
            И СтатусыПроцессовАдаптации.Статус != %{СтатусыПроцессаАдаптации.Черновик}
    }
    возврат Запрос.Выполнить().ПервыйИлиУмолчание() != Неопределено
;

@ВПодсистеме
@НаКлиенте
метод УдалитьСКонтролем(ПроцессАдаптации: ПроцессыАдаптации.Ссылка): Булево
    пер Удалено = Ложь
    знч Ответ = Диалог.Вопрос(
                    "Вы действительно хотите безвозвратно удалить процесс адаптации?", 
                    [КнопкаДиалога.Да, КнопкаДиалога.Нет, КнопкаДиалога.Отмена], 
                    "Удаление", Ресурс{МусорнаяКорзинаКонтур.svg}.Ссылка)     
    знч УдалениеПодтверждено = (Ответ == КнопкаДиалога.Да)
    если УдалениеПодтверждено
        знч Предупреждение = Удалить(ПроцессАдаптации)
        Удалено = (Предупреждение == Неопределено)
        если не Удалено
            Предупреждение!.Показать()    
        ;
    ;    
    возврат Удалено 
;

@НаСервере @ДоступноСКлиента
метод Удалить(ПроцессАдаптации: ПроцессыАдаптации.Ссылка): ПредупреждениеПользователя?
    если не АдаптацияПерсонала.ЕстьПравоУдалитьПроцессАдаптации(ПроцессАдаптации)
        возврат ПредупреждениеПользователя.ОтсутствиеПрав("Отсутствуют права для удаления процесса адаптации. Процесс адаптации не удален")
    ;
    исп ГрупповаяОперация.Начать(Транзакция = Истина, ПривилегированныйРежим = Истина)
    знч ПроцессАдаптацииОбъект = ПроцессАдаптации.ЗагрузитьОбъект(Истина)
    знч Статус = СтатусыПроцессовАдаптации.Прочитать(ПроцессАдаптации)
    если не АдаптацияПерсонала.МожноУдалитьПроцессАдаптации(Статус)
        возврат ПредупреждениеПользователя.НедопустимоеСостояние("Невозможно удалить процесс адаптации в статусе \"$Статус\". Процесс адаптации не удален") 
    ;
    ПроцессАдаптацииОбъект.Удалить()
    Мероприятия.УдалитьВсе(ПроцессАдаптации)
    возврат Неопределено
;

@НаСервере
метод Участники(ДанныеПроцесса: ОсновныеДанные): Множество<ФизическиеЛица.Ссылка>
    знч Участники: Множество<ФизическиеЛица.Ссылка>
    Участники.Добавить(ДанныеПроцесса.Сотрудник)
    Участники.Добавить(ДанныеПроцесса.Руководитель)
    если ДанныеПроцесса.HrМенеджер != Неопределено
        Участники.Добавить(ДанныеПроцесса.HrМенеджер!)
    ;
    возврат Участники
;

@НаСервере
метод РолиУчастника(ДанныеПроцесса: ОсновныеДанные, Участник: ФизическиеЛица.Ссылка): Множество<РолиУчастниковАдаптации>
    знч Роли: Множество<РолиУчастниковАдаптации>
    если ДанныеПроцесса.Сотрудник == Участник
        Роли.Добавить(РолиУчастниковАдаптации.Сотрудник)
    ;
    если ДанныеПроцесса.Руководитель == Участник
        Роли.Добавить(РолиУчастниковАдаптации.Руководитель)
    ;
    если ДанныеПроцесса.HrМенеджер == Участник
        Роли.Добавить(РолиУчастниковАдаптации.HrМенеджер)
    ;
    возврат Роли
;

@ВПроекте
метод ЗаполнитьПараметрыПроцессаАдаптацииВСообщении(ТекстыСообщений: Соответствие<Строка, Строка>, ПроцессАдаптации: ПроцессыАдаптации.Ссылка): Соответствие<Строка, Строка>
    знч Статус = СтатусыПроцессовАдаптации.Прочитать(ПроцессАдаптации)!
    пер Тексты: Соответствие<Строка, Строка>
    для КлючИЗначение из ТекстыСообщений
        пер Текст = КлючИЗначение.Значение.Заменить("\%КМСтатусАдаптации\%", Статус.Представление())
        Текст = Текст.Заменить("\%КМПроцессАдаптации\%", СтандартноеПриложение.СсылкаПереходаКОбъекту(ПроцессАдаптации))
        Тексты.Вставить(КлючИЗначение.Ключ, Текст)
    ;
    возврат Тексты
;