импорт СтандартноеПриложение
импорт ИнтерфейсныеКомпонентыСтандартные
импорт ОбщиеСтандартные
импорт Компания

@ВПроекте
@Реализация
метод Обновить()
    ОбновитьДанные()
;

@Обработчик
метод ПослеСоздания()
    УстановитьПериодПоУмолчанию()
    НастроитьДиаграмму()
    ОбновитьДанные()
    ЗагрузкаЗавершена()
;

метод ЗагрузкаЗавершена()
    ЗагрузкаЗавершена = Истина
;

метод ОткрытьНастройкиОбработчик(Команда: ОбычнаяКоманда)
    ОткрытьНастройки()
;

метод ФильтрПредставлениеПриНажатии(Источник: Компонент, Событие: СобытиеКомпонента)
    ОткрытьНастройки()
;

метод ФильтрПредставление(): Строка
    если Период == Неопределено
        возврат ""
    ;
    знч ЭлементыФильтра: Массив<Строка>
    ЭлементыФильтра.Добавить(МенеджерДат.ПредставлениеПериода(Период))
    если не Подразделения.Пусто()
        ЭлементыФильтра.Добавить("${Подразделения.Первый()}")
        если Подразделения.Размер() > 1
            ЭлементыФильтра[ЭлементыФильтра.Граница()] += " и еще %{Подразделения.Размер() - 1}"
        ;
    ;
    возврат ЭлементыФильтра.Соединить(", ")
;

метод ОткрытьНастройки()
    УстановитьДоступныеПодразделения()
    Настройки.ОткрытьВоВсплывающемОкне(Компоненты.ОткрытьНастройки)       
;

метод УстановитьДоступныеПодразделения()
    знч НастройкиПоТипу = Компоненты.Подразделения.НастройкиВводаСсылок.НастройкиПоТипу
    если НастройкиПоТипу.СодержитКлюч(Тип<СтруктураПредприятия.Ссылка>)
        возврат
    ;
    СтруктураПредприятия.ДобавитьНастройкуВводаОграниченныйСписок(
        Настройки = Компоненты.Подразделения.НастройкиВводаСсылок, 
        Список = ДоступныеПодразделения()
    )
;

@НаСервере @ДоступноСКлиента
статический метод ДоступныеПодразделения(): ЧитаемоеМножество<СтруктураПредприятия.Ссылка>  
    возврат АдаптацияПерсонала.ДоступныеПодразделения()
;

метод СтандартныйПериодПриНажатии(Источник: КомпонентВыбора, Событие: СобытиеПриНажатии)
    Период = (Источник.ДополнительныеДанные как СтандартныйПериод).Период
    ОбновитьДанные()
;

метод ПериодПриИзменении(Источник: ПолеВвода<ЗакрытыйДиапазон<Дата>?>, Событие: СобытиеПриИзменении<ЗакрытыйДиапазон<Дата>?>)
    если Период == Неопределено
        УстановитьПериодПоУмолчанию()
    иначе
        Период = новый ЗакрытыйДиапазон(Период!.От.НачалоМесяца(), Период!.До.КонецМесяца())
    ;
    ОбновитьДанные()
;

метод ПодразделенияВидОтображенияКнопкиОчистить(): ВидОтображения
    возврат Подразделения.Пусто() ? ВидОтображения.НеОтображать : ВидОтображения.Всегда
;

метод ПодразделенияПриИзменении(Источник: Компонент, Событие: СобытиеКомпонента)
    ОбновитьДанные()
;

метод ЗаглушкаВидимость(): Булево
    возврат не ДиаграммаВидимость()
;

метод ЗаглушкаТекст(): Строка
    возврат ЗагрузкаЗавершена ? "Нет данных для отображения" : ""
;

метод ДиаграммаВидимость(): Булево
    возврат ЕстьДанные()    
;

метод УстановитьПериодПоУмолчанию()
    знч НачалоМесяцаНачала = Дата.Сейчас().ДобавитьМесяцы(-(КоличествоМесяцев-1)).НачалоМесяца()
    знч КонецМесяцаОкончания = Дата.Сейчас().КонецМесяца()
    Период = новый ЗакрытыйДиапазон(НачалоМесяцаНачала, КонецМесяцаОкончания)
;

метод ОбновитьДанные()
    знч Данные = ПолучитьДанные(Период!, Подразделения)
    ОбновитьДанныеДиаграммы(Данные)
    ОбновитьИндикаторПрироста(Данные)
;

метод ОбновитьДанныеДиаграммы(Данные: Данные)
    Компоненты.Диаграмма.Источник.Данные = ПолучитьДанныеДиаграммы(Данные.УказанныйПериод)
;

метод ОбновитьИндикаторПрироста(Данные: Данные)
    если Данные.ПриростПроведенныхЗаПрошлыйСтандартныйПериод != Неопределено
        Компоненты.ПриростПроведенных.Видимость = Истина
        знч ПрошлыйПериод = Данные.ПрошлыйСтандартныйПериод!.Период!
        знч ПрошлыйПериодПредставление = МенеджерДат.ПредставлениеПериода(ПрошлыйПериод)
        если Данные.ПриростПроведенныхЗаПрошлыйСтандартныйПериод! > 0
            Компоненты.ПриростПроведенных.Пояснение = "Прирост проведенных в сравнении с прошлым периодом (%ПрошлыйПериодПредставление)"
            Компоненты.ПриростПроведенных.Количество = Данные.ПриростПроведенныхЗаПрошлыйСтандартныйПериод!
            Компоненты.ПриростПроведенных.Коннотация = ОценкаИнформации.Положительная
        иначе если Данные.ПриростПроведенныхЗаПрошлыйСтандартныйПериод! < 0
            Компоненты.ПриростПроведенных.Пояснение = "Спад проведенных в сравнении с прошлым периодом (%ПрошлыйПериодПредставление)"
            Компоненты.ПриростПроведенных.Количество = -Данные.ПриростПроведенныхЗаПрошлыйСтандартныйПериод!
            Компоненты.ПриростПроведенных.Коннотация = ОценкаИнформации.Отрицательная
        иначе
            Компоненты.ПриростПроведенных.Пояснение = "Без изменения проведенных в сравнении с прошлым периодом (%ПрошлыйПериодПредставление)"
            Компоненты.ПриростПроведенных.Количество = Данные.ПриростПроведенныхЗаПрошлыйСтандартныйПериод!
            Компоненты.ПриростПроведенных.Коннотация = ОценкаИнформации.Обычная
        ;
    иначе
        Компоненты.ПриростПроведенных.Видимость = Ложь
    ;
;

метод ЕстьДанные(): Булево
    возврат не Компоненты.Диаграмма.Источник.Данные.Пусто()
;

метод НастроитьДиаграмму()
    знч Диаграмма = Компоненты.Диаграмма

    знч ОсьY = новый ЧисловаяОсьДиаграммы()
    ОсьY.Минимум = 0
    ОсьY.Целочисленная = Истина
    Диаграмма.ОсиY.Добавить(ОсьY)

    знч ОсьX = новый КатегориальнаяОсьДиаграммы()
    ОсьX.ПолеДанных.ПолеЗначения = "Месяц"
    ОсьX.ПолеДанных.ОтображаемоеЗначение = "МесяцПредставление"
    Диаграмма.ОсиX.Добавить(ОсьX)

    знч СерияПроведено = новый СтолбчатаяСерияДиаграммы()
    СерияПроведено.Имя = "Проведено в срок"
    СерияПроведено.Ось = ОсьY
    СерияПроведено.ПоляДанных.Ключ.ПолеЗначения = "Месяц"
    СерияПроведено.ПоляДанных.Ключ.ОтображаемоеЗначение = "МесяцПредставление"
    СерияПроведено.ПоляДанных.Значение.ПолеЗначения = "Проведено"
    СерияПроведено.ПоляДанных.Значение.ОтображаемоеЗначение = "ПроведеноПредставление"
    СерияПроведено.ПоляДанных.Маркер = "ПроведеноПредставление"
    СерияПроведено.ПоляДанных.Цвет = "ПроведеноЦвет"
    СерияПроведено.Стековая = Истина
    Диаграмма.Серии.Добавить(СерияПроведено)

    знч СерияПросрочено = новый СтолбчатаяСерияДиаграммы()
    СерияПросрочено.Имя = "Просрочено"
    СерияПросрочено.Ось = ОсьY
    СерияПросрочено.ПоляДанных.Ключ.ПолеЗначения = "Месяц"
    СерияПросрочено.ПоляДанных.Ключ.ОтображаемоеЗначение = "МесяцПредставление"
    СерияПросрочено.ПоляДанных.Значение.ПолеЗначения = "Просрочено"
    СерияПросрочено.ПоляДанных.Значение.ОтображаемоеЗначение = "ПросроченоПредставление"
    СерияПросрочено.ПоляДанных.Маркер = "ПросроченоПредставление"
    СерияПросрочено.ПоляДанных.Цвет = "ПросроченоЦвет"
    СерияПросрочено.Стековая = Истина
    Диаграмма.Серии.Добавить(СерияПросрочено)

    Диаграмма.Легенда = новый ЛегендаДиаграммы()
    Диаграмма.Легенда.Расположение = КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон ? РасположениеЛегендыДиаграммы.Снизу : РасположениеЛегендыДиаграммы.Конец
;

@НаСервере @НаКлиенте
структура Данные
    обз знч УказанныйПериод: ДанныеЗаПериод
    обз знч ПрошлыйСтандартныйПериод: СтандартныйПериод?
    обз знч ПриростПроведенныхЗаПрошлыйСтандартныйПериод: Число?
;

@НаСервере @НаКлиенте
структура ДанныеЗаПериод
    обз знч ИтогоПроведено: Число
    обз знч ИтогоПросрочено: Число
    обз знч ПоМесяцам: Соответствие<Дата, ДанныеМесяца>
;

@ВПодсистеме
@НаСервере @НаКлиенте
структура ДанныеДиаграммы
    обз знч Месяц: Дата
    обз знч МесяцПредставление: Строка
    обз знч Проведено: Число
    обз знч ПроведеноПредставление: Строка
    обз знч ПроведеноЦвет: Цвет
    обз знч Просрочено: Число
    обз знч ПросроченоПредставление: Строка
    обз знч ПросроченоЦвет: Цвет
;

@НаСервере @НаКлиенте
структура ДанныеМесяца
    обз знч Проведено: Число
    обз знч Просрочено: Число
;

@НаСервере @ДоступноСКлиента
статический метод ПолучитьДанные(Период: ЗакрытыйДиапазон<Дата>, Подразделения: Обходимое<СтруктураПредприятия.Ссылка>): Данные
    знч ДанныеЗаУказанныйПериод = ПолучитьДанныеЗаПериод(Период, Подразделения)
    пер ПрошлыйСтандартныйПериод: СтандартныйПериод?
    пер ПриростПроведенных: Число?
    если СтандартныйПериод.ЭтоСтандартныйПериод(Период) и ЕстьДанные(ДанныеЗаУказанныйПериод.ПоМесяцам)
        ПрошлыйСтандартныйПериод = СтандартныйПериод.Создать(Период).Прошлый()
        знч ПрошлыйПериод = ПрошлыйСтандартныйПериод.Период
        знч ДанныеЗаПрошлыйПериод = ПолучитьДанныеЗаПериод(ПрошлыйПериод, Подразделения)
        ПриростПроведенных = ДанныеЗаУказанныйПериод.ИтогоПроведено - ДанныеЗаПрошлыйПериод.ИтогоПроведено
    ;
    возврат новый Данные(
        УказанныйПериод = ДанныеЗаУказанныйПериод,
        ПрошлыйСтандартныйПериод = ПрошлыйСтандартныйПериод,
        ПриростПроведенныхЗаПрошлыйСтандартныйПериод = ПриростПроведенных
    )
;

@НаСервере
статический метод ПолучитьДанныеЗаПериод(Период: ЗакрытыйДиапазон<Дата>, Подразделения: Обходимое<СтруктураПредприятия.Ссылка>): ДанныеЗаПериод
    знч ОтбиратьПоПодразделениям = не Подразделения.Пусто()
    знч Запрос = Запрос{
        ВЫБРАТЬ
            ВЫБОР
                КОГДА Проведено > 0
                    ТОГДА МесяцПроведено.ЗаменитьNull(Дата{})
                КОГДА Просрочено > 0
                    ТОГДА МесяцПросрочено.ЗаменитьNull(Дата{})
                ИНАЧЕ
                    Дата{}
            КОНЕЦ Месяц,      
            Проведено КАК Проведено,
            Просрочено КАК Просрочено
        ПОМЕСТИТЬ
            ДанныеМероприятий
        ИЗ
            (ВЫБРАТЬ
                СтатусыМероприятий.Период.Дата.НачалоМесяца() КАК МесяцПроведено,
                ВЫБОР
                    КОГДА СтатусыМероприятий.Статус == СтатусыМероприятия.Проведено
                        И СтатусыМероприятий.Период.Дата <= Мероприятия.ПровестиНеПозднее
                        И СтатусыМероприятий.Период.Дата МЕЖДУ %{Период.От} И %{Период.До}
                    ТОГДА 1
                    ИНАЧЕ 0
                КОНЕЦ КАК Проведено,
                Мероприятия.ПровестиНеПозднее.НачалоМесяца() Как МесяцПросрочено,
                ВЫБОР
                    КОГДА СтатусыМероприятий.Статус В (СтатусыМероприятия.Проведено, СтатусыМероприятия.Отменено)
                        И СтатусыМероприятий.Период.Дата > Мероприятия.ПровестиНеПозднее
                        И Мероприятия.ПровестиНеПозднее МЕЖДУ %{Период.От} И %{Период.До}
                        ИЛИ СтатусыМероприятий.Статус == СтатусыМероприятия.Запланировано
                        И Мероприятия.ПровестиНеПозднее < %{Мин(Период.До, Дата.Сейчас())}
                        И Мероприятия.ПровестиНеПозднее >= %{Период.От}
                    ТОГДА 1
                    ИНАЧЕ 0
                КОНЕЦ КАК Просрочено
            ИЗ
                ПроцессыАдаптации Как ПроцессыАдаптации
                ЛЕВОЕ СОЕДИНЕНИЕ Мероприятия Как Мероприятия
                    ПО ПроцессыАдаптации.Ссылка == Мероприятия.ПроцессАдаптации
                ЛЕВОЕ СОЕДИНЕНИЕ СтатусыМероприятий.СрезПоследних(%{Период.До.КонецДня()}) КАК СтатусыМероприятий
                    По Мероприятия.Ссылка == СтатусыМероприятий.Мероприятие
            ГДЕ
                (НЕ %ОтбиратьПоПодразделениям ИЛИ ПроцессыАдаптации.Подразделение В (%Подразделения))
                И СтатусыМероприятий.Статус В(СтатусыМероприятия.Запланировано, СтатусыМероприятия.Проведено, СтатусыМероприятия.Отменено)
                И Мероприятия.ПровестиНеПозднее >= %{Период.От}
            ) ДанныеМероприятий
        ;
        ВЫБРАТЬ
            Месяц КАК Месяц,
            Сумма(Проведено) КАК Проведено,
            Сумма(Просрочено) КАК Просрочено
        ИЗ
            ДанныеМероприятий
        ГДЕ
            Месяц МЕЖДУ %{Период.От} И %{Период.До}
        СГРУППИРОВАТЬ ПО
            Месяц
    }
    исп РезультатЗапроса = Запрос.Выполнить()
    знч ДанныеПоМесяцам = ИнициализироватьДанныеПоМесяцам(Период)
    для СтрокаРезультата из РезультатЗапроса
        ДанныеПоМесяцам[СтрокаРезультата.Месяц] = новый ДанныеМесяца(
            Проведено = СтрокаРезультата.Проведено,
            Просрочено = СтрокаРезультата.Просрочено
        )    
    ;
    возврат новый ДанныеЗаПериод(
        ИтогоПроведено = ДанныеПоМесяцам.Преобразовать(Д -> Д.Значение.Проведено).Свернуть(0, (З1, З2) -> З1 + З2),
        ИтогоПросрочено = ДанныеПоМесяцам.Преобразовать(Д -> Д.Значение.Просрочено).Свернуть(0, (З1, З2) -> З1 + З2),
        ПоМесяцам = ДанныеПоМесяцам
    )
;

@НаСервере
статический метод ИнициализироватьДанныеПоМесяцам(Период: ЗакрытыйДиапазон<Дата>): Соответствие<Дата, ДанныеМесяца>
    знч МесяцНачала = Период.От.НачалоМесяца()
    знч МесяцОкончания = Период.До.НачалоМесяца()
    знч ДанныеПоМесяцам: Соответствие<Дата, ДанныеМесяца>
    пер ТекущийМесяц = МесяцНачала
    пока ТекущийМесяц <= МесяцОкончания
        ДанныеПоМесяцам.Вставить(ТекущийМесяц, новый ДанныеМесяца(0, 0))
        ТекущийМесяц = ТекущийМесяц.ДобавитьМесяцы(1)
    ;
    возврат ДанныеПоМесяцам
;

@НаСервере @НаКлиенте
статический метод ЕстьДанные(ДанныеПоМесяцам: Соответствие<Дата, ДанныеМесяца>): Булево
    возврат ДанныеПоМесяцам.ЕстьСоответствия((КЗ) -> ЕстьДанные(КЗ.Значение))
;

@НаСервере @НаКлиенте
статический метод ЕстьДанные(ДанныеМесяца: ДанныеМесяца): Булево
    возврат ДанныеМесяца.Проведено != 0 или ДанныеМесяца.Просрочено != 0
;

статический метод ПолучитьДанныеДиаграммы(ДанныеЗаПериод: ДанныеЗаПериод): Массив<ДанныеДиаграммы>
    знч Данные: Массив<ДанныеДиаграммы>
    если ЕстьДанные(ДанныеЗаПериод.ПоМесяцам)
        для КлючЗначение из ДанныеЗаПериод.ПоМесяцам
            знч Месяц = КлючЗначение.Ключ
            знч ДанныеМесяца = КлючЗначение.Значение
            Данные.Добавить(новый ДанныеДиаграммы(
                Месяц = Месяц,
                МесяцПредставление = "${Месяц|МММ гг}",
                Проведено = ДанныеМесяца.Проведено,
                ПроведеноПредставление = "${ДанныеМесяца.Проведено}",
                ПроведеноЦвет = БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Зеленый),
                Просрочено = ДанныеМесяца.Просрочено,
                ПросроченоПредставление = "${ДанныеМесяца.Просрочено}",
                ПросроченоЦвет = БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Оранжевый)
            ))
        ;
    ;
    возврат Данные
;