импорт ИнтерфейсныеКомпонентыСтандартные
импорт УниверсальныеМеханизмы
импорт ОбщиеСтандартные

@ВПодсистеме
метод ЗаписатьСПроверкойЗаполнения()
    если ПроверитьЗаполнение()
        Записать()
    ;
;

@Обработчик
метод ПослеСоздания()
    СтатусМероприятияПослеЗаписи.ПодключитьОбработчик(&СтатусМероприятияПослеЗаписи)
;

@Обработчик
метод ПослеЧтения()
    СрокиПроведенияИзДанныхФормы()
    ЗаполнитьПриКопировании()
    УстановитьПроцессАдаптацииНового()
    ЗагрузитьУчастниковВКомпонент()
    ПрочитатьСвязанныеДанные(Статус = Истина, СтатусПроцессаАдаптации = Истина, ПрисоединенныеФайлы = Истина)
    УстановитьСрокиПроведенияНового()
    ИнтерфейсныеКомпоненты.ИнициализироватьПодчиненныеКомпоненты(Компоненты)
    ЗагрузкаЗавершена()
;

метод ЗагрузкаЗавершена()
    ЗагрузкаЗавершена = Истина
;

@Обработчик
метод ПередЗаписьюОбъекта()
    СрокиПроведенияВОбъект()
    ВыгрузитьУчастниковИзКомпонента()
    УстановитьПараметрыЗаписи(ПараметрыЗаписи)
;

@Обработчик
метод ПослеЗаписиОбъекта()
    СобственнаяМодифицированность = Ложь
    Компоненты.ПрисоединенныеФайлы.СобственнаяМодифицированность = Ложь
    МероприятиеПослеЗаписи.Оповестить(КлючОбъекта!)
;

метод СтатусМероприятияПослеЗаписи(Мероприятие: Мероприятия.Ссылка)
    если КлючОбъекта == Мероприятие
        ПрочитатьСвязанныеДанные(Статус = Истина)
    ;
;

метод ЗаполнитьПриКопировании()
    если ЭтоНовый() и КопируемоеМероприятие != Неопределено
        знч ОсновныеДанные = Мероприятия.Прочитать(КопируемоеМероприятие)
        Объект.Наименование = "Копия $КопируемоеМероприятие"
        Объект.ПроцессАдаптации = ОсновныеДанные.ПроцессАдаптации
        Объект.ПровестиНеРанее = ОсновныеДанные.ПровестиНеРанее
        Объект.ПровестиНеПозднее = ОсновныеДанные.ПровестиНеПозднее
        СрокиПроведенияИзДанныхФормы()
        Объект.Ответственный = ОсновныеДанные.Ответственный
        Объект.Участники.ДобавитьВсе(ОсновныеДанные.Участники)
        СобственнаяМодифицированность = Истина
        СкопироватьПрисоединенныеФайлы(КопируемоеМероприятие!)
    ;
;

метод СкопироватьПрисоединенныеФайлы(КопируемоеМероприятие: Мероприятия.Ссылка)
    ПрисоединенныеФайлы = ПолучитьПрисоединенныеФайлы(КопируемоеМероприятие)
    ПрисоединенныеФайлы.Владелец = Неопределено
    для ПрисоединенныйФайл из ПрисоединенныеФайлы.Файлы
        ПрисоединенныйФайл.Ссылка = Неопределено
        ПрисоединенныйФайл.ДатаСоздания = МенеджерДат.ТекущаяДатаВремя()
    ;
;

метод ЗакрытьССохранением(Команда: ОбычнаяКоманда)
    если ПроверитьЗаполнение()
        Записать()
        Закрыть()
    ;
;

метод ЗакрытьБезСохранения(Команда: ОбычнаяКоманда)
    Закрыть()
;

метод УдалитьМероприятиеВидимость(): Булево
    возврат не ЭтоНовый()
            и не ТолькоЧтение
            и АдаптацияПерсонала.МожноУдалитьМероприятие(Статус)
            и АдаптацияПерсонала.ЕстьПравоУдалитьМероприятие(Мероприятие()!)
;

метод УдалитьМероприятиеОбработчик(Команда: ОбычнаяКоманда)
    если Мероприятия.УдалитьСКонтролем(Мероприятие()!)
        Закрыть()
    ;
;

метод Мероприятие(): Мероприятия.Ссылка?
    возврат КлючОбъекта
;

метод ПроцессАдаптации(): ПроцессыАдаптации.Ссылка?
    возврат Объект.ПроцессАдаптации
;

метод Участники(): Массив<УчастникМероприятия>
    возврат Объект.Участники
;

метод ЗагрузитьУчастниковВКомпонент()
    Компоненты.Участники.Загрузить(Участники())
;

метод ВыгрузитьУчастниковИзКомпонента()
    знч Участники = Участники()
    Участники.Очистить()
    Участники.ДобавитьВсе(Компоненты.Участники.Выгрузить())
;

метод Заголовок(): Строка
    если не ЗагрузкаЗавершена
        возврат ""
    ;
    возврат (Объект.Внеплановое) ? "Внеплановое мероприятие" : "Мероприятие"
;

метод МожноРедактировать(): Булево
    если ЭтоНовый()
        возврат Истина
    ;
    если ТолькоЧтение
        возврат Ложь
    ;
    возврат АдаптацияПерсонала.МожноРедактироватьМероприятие(Статус, СтатусПроцессаАдаптации)
            и АдаптацияПерсонала.ЕстьПравоРедактироватьМероприятие(Мероприятие()!)
;

метод МожноРедактироватьСтатус(): Булево
    если ЭтоНовый()
        возврат Ложь
    ;
    если ТолькоЧтение
        возврат Ложь
    ;
    возврат АдаптацияПерсонала.МожноРедактироватьСтатусМероприятия(СтатусПроцессаАдаптации, Статус)
            и АдаптацияПерсонала.ЕстьПравоРедактироватьСтатусМероприятия(Мероприятие()!)
;

метод СтатусПриИзменении(Источник: ВыборСтатусМероприятия, Событие: СобытиеПриИзменении<СтатусыМероприятия>)
    СтатусыМероприятий.Установить(Мероприятие()!, Событие.НовоеЗначение)
;

метод ПроверитьЗаполнение(): Булево
    возврат ПроверитьЗаполнениеНаименование()
            и Компоненты.Ответственный.ПроверитьЗаполнение()
;

метод ПроверитьЗаполнениеНаименование(Значение: Строка? = Неопределено): Булево
    знч Наименование = Значение == Неопределено ? Объект.Наименование : Значение!
    если Наименование.Пусто()
        Компоненты.Наименование.РезультатПроверкиДанных = РезультатПроверкиДанных.Ошибка
        возврат Ложь
    иначе
        Компоненты.Наименование.РезультатПроверкиДанных = РезультатПроверкиДанных.Отсутствует
        возврат Истина
    ;
;

метод НаименованиеПриИзмененииТекстаРедактирования(Источник: ПолеВвода<Строка>, Событие: СобытиеСДанными<Строка>)
    ПроверитьЗаполнениеНаименование(Событие.Данные)
;

метод УстановитьПроцессАдаптацииНового()
    если ЭтоНовый() и ПроцессАдаптацииНового != Неопределено
        Объект.ПроцессАдаптации = ПроцессАдаптацииНового
    ;
;

метод УстановитьСрокиПроведенияНового()
    если ЭтоНовый()
        Объект.ПровестиНеРанее = Дата.Сейчас()
        Объект.ПровестиНеПозднее = Дата.Сейчас()
        СрокиПроведенияИзДанныхФормы()
    ;
;

метод СрокиПроведенияИзДанныхФормы()
    СрокиПроведения = новый ЗакрытыйДиапазон<Дата>(
        Объект.ПровестиНеРанее,
        Объект.ПровестиНеПозднее)
;

метод СрокиПроведенияВОбъект()
    Объект.ПровестиНеРанее = СрокиПроведения.От
    Объект.ПровестиНеПозднее = СрокиПроведения.До
;

метод СрокиПроведенияПриИзменении(Источник: ПолеВвода<ЗакрытыйДиапазон<Дата>?>, Событие: СобытиеПриИзменении<ЗакрытыйДиапазон<Дата>?>)
    СрокиПроведенияВОбъект()
;

метод УчастникиПриИзменении(Источник: УчастникиМероприятияКомпонент, Событие: СобытиеКомпонента)
    СобственнаяМодифицированность = Истина
;

метод ПрисоединенныеФайлыЗавершенаЗагрузкаФайлов(Источник: ПрисоединенныеФайлыКомпонент, Событие: СобытиеКомпонента)
    СобственнаяМодифицированность = Истина
;

@НаСервере @ДоступноСКлиента
статический метод ПолучитьПрисоединенныеФайлы(Владелец: Мероприятия.Ссылка): ПрисоединенныеФайлы
    возврат ПрисоединенныеФайлыМенеджер.ПрисоединенныеФайлы(Владелец)
;

метод УстановитьПараметрыЗаписи(ПараметрыЗаписи: Мероприятия.ПараметрыЗаписи)
    ПараметрыЗаписи.ПрисоединенныеФайлы = ПрисоединенныеФайлы
    если ЭтоНовый()
        ПараметрыЗаписи.Статус = Статус
    ;
;

@НаСервере @НаКлиенте
структура СвязанныеДанные
    пер Статус: СтатусыМероприятия?
    пер СтатусПроцессаАдаптации: СтатусыПроцессаАдаптации?
    пер ПрисоединенныеФайлы: ПрисоединенныеФайлы?
;

@ИменованныеПараметры
метод ПрочитатьСвязанныеДанные(Статус: Булево = Ложь, СтатусПроцессаАдаптации: Булево = Ложь, ПрисоединенныеФайлы: Булево = Ложь)
    знч СвязанныеДанные = ПолучитьСвязанныеДанные(
        Мероприятие = Мероприятие(),
        ПроцессАдаптации = ПроцессАдаптации()!,
        Статус = Статус,
        СтатусПроцессаАдаптации = СтатусПроцессаАдаптации,
        ПрисоединенныеФайлы = ПрисоединенныеФайлы
    )
    если СвязанныеДанные.Статус != Неопределено
        этот.Статус = СвязанныеДанные.Статус!
    ;
    если СвязанныеДанные.СтатусПроцессаАдаптации != Неопределено
        этот.СтатусПроцессаАдаптации = СвязанныеДанные.СтатусПроцессаАдаптации!
    ;
    если СвязанныеДанные.ПрисоединенныеФайлы != Неопределено
        этот.ПрисоединенныеФайлы = СвязанныеДанные.ПрисоединенныеФайлы!
    ;
;

@ИменованныеПараметры
@НаСервере @ДоступноСКлиента
статический метод ПолучитьСвязанныеДанные(Мероприятие: Мероприятия.Ссылка?, ПроцессАдаптации: ПроцессыАдаптации.Ссылка,
                                            Статус: Булево, СтатусПроцессаАдаптации: Булево, ПрисоединенныеФайлы: Булево): СвязанныеДанные
    знч СвязанныеДанные: СвязанныеДанные
    если Мероприятие != Неопределено и Статус
        СвязанныеДанные.Статус = СтатусыМероприятий.Прочитать(Мероприятие!)
    ;
    если СтатусПроцессаАдаптации
        СвязанныеДанные.СтатусПроцессаАдаптации = СтатусыПроцессовАдаптации.Прочитать(ПроцессАдаптации)
    ;
    если Мероприятие != Неопределено и ПрисоединенныеФайлы
        СвязанныеДанные.ПрисоединенныеФайлы = ПолучитьПрисоединенныеФайлы(Мероприятие!)
    ;
    возврат СвязанныеДанные
;