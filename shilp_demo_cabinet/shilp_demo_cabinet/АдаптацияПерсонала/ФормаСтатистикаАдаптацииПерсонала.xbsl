импорт Отчеты
импорт ФизическиеЛица
импорт Компания

@НаКлиенте @НаСервере
структура ФильтрЗапроса
    обз знч Сотрудник: ФизическиеЛица.Ссылка?
    обз знч Должность: Должности.Ссылка?
    обз знч Руководитель:  ФизическиеЛица.Ссылка?
    обз знч Статус: СтатусыПроцессаАдаптации?
    обз знч НачалоАдаптацииОт: Дата?
    обз знч НачалоАдаптацииДо: Дата?
    обз знч ОкончаниеАдаптацииОт: Дата?
    обз знч ОкончаниеАдаптацииДо: Дата?
;

@НаКлиенте @НаСервере
структура СтатистикаПроцессаАдаптации
    обз знч Сотрудник: Строка
    обз знч Подразделение: Строка
    обз знч Должность: Строка
    обз знч Руководитель:  Строка
    обз знч СтатусПроцесса: СтатусыПроцессаАдаптации
    обз знч ДатаПриема: Дата
    обз знч ПлановаяДатаЗавершения: Дата?
    пер КоличествоМероприятий: Число
    пер МероприятийПроведено: Число
    пер МероприятийОтменено: Число

    метод ВыполненоМероприятий(): Число
        знч КоличествоНеотмененных = КоличествоМероприятий - МероприятийОтменено
        возврат КоличествоНеотмененных != 0 ? (МероприятийПроведено / КоличествоНеотмененных * 100).Округлить() : 0
    ;
;

@Обработчик
метод ПослеСоздания()
    ПанельОтчетов = новый Множество<ПросмотрОтчета>()
    ПанельОтчетов.Добавить(Компоненты.ОтчетСтатистикаАдаптацииПерсонала)
    ПанельОтчетов.Добавить(Компоненты.ОтчетДиаграммаАдаптацииПоРуководителям)
;

метод ВидимостьФильтровПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ВидимостьФильтров = не ВидимостьФильтров
    ОчиститьПараметрыОтчетов()
    УстановитьПараметрыОтчетов()
;

метод ИзображениеФильтра(): ДвоичныйОбъект.Ссылка
    возврат ВидимостьФильтров ? Ресурс{Фильтр.svg}.Ссылка : Ресурс{ФильтрКонтур.svg}.Ссылка
;

метод ФиоПриИзменении(Источник: ПолеВвода<ФизическиеЛица.Ссылка?>, Событие: СобытиеПриИзменении<ФизическиеЛица.Ссылка?>)
    УстановитьПараметрыОтчетов()
;

метод РуководительПриИзменении(Источник: ПолеВвода<ФизическиеЛица.Ссылка?>, Событие: СобытиеПриИзменении<ФизическиеЛица.Ссылка?>)
    УстановитьПараметрыОтчетов()
;

метод ДолжностьПриИзменении(Источник: ПолеВвода<Должности.Ссылка?>, Событие: СобытиеПриИзменении<Должности.Ссылка?>)
    УстановитьПараметрыОтчетов()
;

метод СтатусПроцессаПриИзменении(Источник: ПолеВвода<СтатусыПроцессаАдаптации?>, Событие: СобытиеПриИзменении<СтатусыПроцессаАдаптации?>)
    УстановитьПараметрыОтчетов()
;

метод НачалоАдаптацииПриИзменении(Источник: ПолеВвода<ЗакрытыйДиапазон<Дата>?>, Событие: СобытиеПриИзменении<ЗакрытыйДиапазон<Дата>?>)
    УстановитьПараметрыОтчетов()
;

метод ОкончаниеАдаптацииПриИзменении(Источник: ПолеВвода<ЗакрытыйДиапазон<Дата>?>, Событие: СобытиеПриИзменении<ЗакрытыйДиапазон<Дата>?>)
    УстановитьПараметрыОтчетов()
;

метод ЗаголовокПереключателяФильтров(): Строка
    возврат ВидимостьФильтров ? "" : "Фильры отчета"
;

метод ВидимостьФильтровПриИзменении(Источник: Флажок, Событие: СобытиеПриИзменении<Булево?>)
    ОчиститьПараметрыОтчетов()
    УстановитьПараметрыОтчетов()
;

метод УстановитьПараметрыОтчетов()
    знч НачалоАдаптацииОт = (ДатаНачалаАдаптации == Неопределено) ? Неопределено : ДатаНачалаАдаптации.От
    знч НачалоАдаптацииДо = (ДатаНачалаАдаптации == Неопределено) ? Неопределено : ДатаНачалаАдаптации.До
    знч ОкончаниеАдаптацииОт = (ДатаОкончанияАдаптации == Неопределено) ? Неопределено : ДатаОкончанияАдаптации.От
    знч ОкончаниеАдаптацииДо = (ДатаОкончанияАдаптации == Неопределено) ? Неопределено : ДатаОкончанияАдаптации.До

    для КомпонентОтчет из ПанельОтчетов
        Отчеты.УстановитьПараметр(КомпонентОтчет, "Сотрудник", Сотрудник)
        Отчеты.УстановитьПараметр(КомпонентОтчет, "Должность", Должность)
        Отчеты.УстановитьПараметр(КомпонентОтчет, "Руководитель", Руководитель)
        Отчеты.УстановитьПараметр(КомпонентОтчет, "Статус", Статус)
        Отчеты.УстановитьПараметр(КомпонентОтчет, "НачалоАдаптацииОт", НачалоАдаптацииОт)
        Отчеты.УстановитьПараметр(КомпонентОтчет, "НачалоАдаптацииДо", НачалоАдаптацииДо)
        Отчеты.УстановитьПараметр(КомпонентОтчет, "ОкончаниеАдаптацииОт", ОкончаниеАдаптацииОт)
        Отчеты.УстановитьПараметр(КомпонентОтчет, "ОкончаниеАдаптацииДо", ОкончаниеАдаптацииДо)
    ;
;

метод ОчиститьПараметрыОтчетов()
    Сотрудник = Неопределено
    Должность = Неопределено
    Руководитель = Неопределено
    Статус = Неопределено
    ДатаНачалаАдаптации = Неопределено
    ДатаОкончанияАдаптации = Неопределено
;

метод ВсеСтатусыПроцессаАдаптации(): Массив<ЭлементСпискаЗначений<СтатусыПроцессаАдаптации?>>
    знч ВсеСтатусы = новый Массив<ЭлементСпискаЗначений<СтатусыПроцессаАдаптации?>>()
    для Статус из СтатусыПроцессаАдаптации.Элементы()
        ВсеСтатусы.Добавить(
            новый ЭлементСпискаЗначений<СтатусыПроцессаАдаптации?>(
                Значение = Статус,
                Представление = Статус.Представление()
            )
        )
    ;
    возврат ВсеСтатусы
;

метод КомандаВыгрузитьОтчет(Команда: ОбычнаяКоманда)
    знч ФайлВыгрузки = ВыгрузитьВФормате(
        новый ФильтрЗапроса(
            Сотрудник = Сотрудник,
            Должность = Должность,
            Руководитель = Руководитель,
            Статус = Статус,
            НачалоАдаптацииОт = (ДатаНачалаАдаптации == Неопределено) ? Неопределено : ДатаНачалаАдаптации.От,
            НачалоАдаптацииДо = (ДатаНачалаАдаптации == Неопределено) ? Неопределено : ДатаНачалаАдаптации.До,
            ОкончаниеАдаптацииОт = (ДатаНачалаАдаптации == Неопределено) ? Неопределено : ДатаНачалаАдаптации.От,
            ОкончаниеАдаптацииДо = (ДатаНачалаАдаптации == Неопределено) ? Неопределено : ДатаНачалаАдаптации.До
        )
    )
    ВыгрузкаФайлов.НачатьВыгрузку(ФайлВыгрузки, "АдаптацияПерсонала${Дата.Сейчас()}.xls")
;

@НаСервере @ДоступноСКлиента
статический метод ВыгрузитьВФормате(Фильтр: ФильтрЗапроса): ДвоичныйОбъект.Ссылка
    пер БайтыТаблицы = СформироватьОтчет(Фильтр).ЭкспортироватьВБайты(ФорматЭкспортаТабличногоДокумента.Xls)

    пер СвойстваДвоичногоОбъекта = новый ДвоичныйОбъект.Свойства("ПричиныОтказа").Временные()
    знч Результат = ОбъектноеХранилище.ЗагрузитьИзБайт(Байты = БайтыТаблицы, Свойства = СвойстваДвоичногоОбъекта)
    возврат Результат.Ссылка
;

@НаСервере
статический метод СформироватьОтчет(Фильтр: ФильтрЗапроса): ТабличныйДокумент
    знч СтатистикаПоПроцессамАдаптации = СтатистикаАдаптацииПерсонала(Фильтр)
    исп МакетДанные = Ресурс{МакетАдаптацияПерсонала.mxl}.ОткрытьПотокЧтения()
    знч Макет = ТабличныйДокумент.Прочитать(МакетДанные)

    знч ШапакаТаблицы = Макет.ПолучитьОбласть("ШапакаТаблицы")
    знч Шапка = Макет.ПолучитьОбласть("Шапка")
    знч СтрокаРекрутер = Макет.ПолучитьОбласть("СтрокаПроцессАдаптации")

    пер ТабличныйДокумент = новый ТабличныйДокумент()
    знч Писатель = ТабличныйДокумент.Запись
    Писатель.ВывестиВертикально(
        Шапка.ВВыводимуюОбласть().ЗаполнитьПараметры({"ДатаВремя": ДатаВремя.Сейчас().Представление()})
    )
    Писатель.ВывестиВертикально(
        ШапакаТаблицы.ВВыводимуюОбласть()
    )

    для СтатистикаПроцесса из СтатистикаПоПроцессамАдаптации
        знч ДатаОкончания = (СтатистикаПроцесса.ПлановаяДатаЗавершения == Неопределено) ? "-" : СтатистикаПроцесса.ПлановаяДатаЗавершения.ВСтроку()
        Писатель.ВывестиВертикально(
            СтрокаРекрутер.ВВыводимуюОбласть()
            .ЗаполнитьПараметры({"ФИО": СтатистикаПроцесса.Сотрудник})
            .ЗаполнитьПараметры({"Подразделение": СтатистикаПроцесса.Подразделение})
            .ЗаполнитьПараметры({"ДатаПриема": СтатистикаПроцесса.ДатаПриема.ВСтроку()})
            .ЗаполнитьПараметры({"ДатаОкончанияАдаптации": ДатаОкончания})
            .ЗаполнитьПараметры({"Руководитель": СтатистикаПроцесса.Руководитель})
            .ЗаполнитьПараметры({"Статус": СтатистикаПроцесса.СтатусПроцесса.Представление()})
            .ЗаполнитьПараметры({"ВыполненоМероприятий": СтатистикаПроцесса.ВыполненоМероприятий()})
        )
    ;
    возврат ТабличныйДокумент
;

@НаСервере
статический метод СтатистикаАдаптацииПерсонала(Фильтр: ФильтрЗапроса): ЧитаемаяКоллекция<СтатистикаПроцессаАдаптации>
    знч Запрос = Запрос{
        Выбрать
            ПроцессыАдаптации.Сотрудник.ЗаменитьNull("") как Сотрудник,
            ПроцессыАдаптации.Сотрудник.Представление.ЗаменитьNull("") как СотрудникПредставление,
            ПроцессыАдаптации.Подразделение.Представление.ЗаменитьNull("")  как ПодразделениеПредставление,
            ПроцессыАдаптации.Должность.Представление.ЗаменитьNull("") как ДолжностьПредставление,
            ПроцессыАдаптации.ДатаПриема как ДатаПриема,
            ПроцессыАдаптации.ПлановаяДатаЗавершения.ЗаменитьNull(Неопределено) как ПлановаяДатаЗавершения,
            ПроцессыАдаптации.Руководитель.Представление.ЗаменитьNull("") как РуководительПредставление,
            ПроцессыАдаптации.СтатусПроцесса как СтатусПроцесса,
            ПроцессыАдаптации.СтатусМероприятия как СтатусМероприятия,
            ПроцессыАдаптации.Мероприятие.ЗаменитьNull(Неопределено) как Мероприятие
        Из
            ДанныеАдаптацииПерсонала(%{Фильтр.Сотрудник}, %{Фильтр.Должность}, %{Фильтр.Руководитель}, %{Фильтр.Статус},
                %{Фильтр.НачалоАдаптацииОт}, %{Фильтр.НачалоАдаптацииДо},%{Фильтр.ОкончаниеАдаптацииОт}, %{Фильтр.ОкончаниеАдаптацииДо}) как ПроцессыАдаптации
    }
    исп Результат = Запрос.Выполнить()
    знч СтатистикаПроцессаАдаптации = новый Соответствие<ФизическиеЛица.Ссылка, СтатистикаПроцессаАдаптации>()
    для СтрокаРезультата из Результат
        знч ПроведенноеМероприятие = (СтрокаРезультата.СтатусМероприятия == СтатусыМероприятия.Проведено)
        знч ОтмененноеМероприятие = (СтрокаРезультата.СтатусМероприятия == СтатусыМероприятия.Отменено)
        если не СтатистикаПроцессаАдаптации.СодержитКлюч(СтрокаРезультата.Сотрудник)
            СтатистикаПроцессаАдаптации.Вставить(СтрокаРезультата.Сотрудник,
                новый СтатистикаПроцессаАдаптации(
                    Сотрудник = СтрокаРезультата.СотрудникПредставление,
                    Подразделение = СтрокаРезультата.ПодразделениеПредставление,
                    Должность = СтрокаРезультата.ДолжностьПредставление,
                    ДатаПриема = СтрокаРезультата.ДатаПриема,
                    Руководитель = СтрокаРезультата.РуководительПредставление,
                    ПлановаяДатаЗавершения = СтрокаРезультата.ПлановаяДатаЗавершения,
                    СтатусПроцесса = СтрокаРезультата.СтатусПроцесса,
                    КоличествоМероприятий = 1,
                    МероприятийПроведено = ПроведенноеМероприятие ? 1 : 0,
                    МероприятийОтменено = ОтмененноеМероприятие ? 1 : 0
                )
            )
        иначе
            СтатистикаПроцессаАдаптации[СтрокаРезультата.Сотрудник].КоличествоМероприятий += 1
            СтатистикаПроцессаАдаптации[СтрокаРезультата.Сотрудник].МероприятийОтменено += ОтмененноеМероприятие ? 1 : 0
            СтатистикаПроцессаАдаптации[СтрокаРезультата.Сотрудник].МероприятийПроведено += ПроведенноеМероприятие ? 1 : 0
        ;
    ;
    возврат СтатистикаПроцессаАдаптации.Значения()
;