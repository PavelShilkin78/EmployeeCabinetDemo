импорт ФизическиеЛица

@ВПодсистеме
структура Участник
    обз знч Физлицо: ФизическиеЛица.Ссылка
    обз пер РолиАдаптации: Множество<РолиУчастниковАдаптации>
;

@ВПодсистеме
метод Загрузить(УчастникиМероприятия: ЧитаемаяКоллекция<УчастникМероприятия>, ПроцессАдаптации: ПроцессыАдаптации.Ссылка)
    Строки.Очистить()
    Строки.ДобавитьВсе(Участники(УчастникиМероприятия, ПроцессАдаптации))
;

@ВПодсистеме
метод Выгрузить(): Массив<УчастникМероприятия>
    знч Участники: Массив<УчастникМероприятия>
    для ТекущаяСтрока из Строки
        Участники.Добавить(новый УчастникМероприятия(
            Участник = ТекущаяСтрока.Физлицо
        ))
    ;
    возврат Участники
;

@ВПодсистеме
метод Пусто(): Булево
    возврат Строки.Пусто()
;

@ВПодсистеме
метод ДобавитьУчастника(Роль: РолиУчастниковАдаптации, ПроцессАдаптации: ПроцессыАдаптации.Ссылка)
    знч Участник = УчастникПоРоли(Роль, ПроцессАдаптации)
    если Участник != Неопределено и не ЕстьУчастник(Участник!.Физлицо)
        Строки.Добавить(Участник)
    ;
;

@ВПодсистеме
метод ДобавитьУчастника(Физлицо: ФизическиеЛица.Ссылка, ПроцессАдаптации: ПроцессыАдаптации.Ссылка)
    если не ЕстьУчастник(Физлицо)
        Строки.Добавить(Участник(Физлицо, ПроцессАдаптации))
    ;
;

@ВПодсистеме
метод Удалить(Участник: Участник)
    Строки.Удалить(Участник)
;

@ВПодсистеме
метод ОтсутствующиеРоли(): ЧитаемоеМножество<РолиУчастниковАдаптации>
    знч ПрисутствующиеРоли: Множество<РолиУчастниковАдаптации>
    для Участник из Строки
        ПрисутствующиеРоли.ДобавитьВсе(Участник.РолиАдаптации)
    ;
    знч ВсеРоли = новый Множество<РолиУчастниковАдаптации>(РолиУчастниковАдаптации.Элементы())
    возврат ВсеРоли.Разность(ПрисутствующиеРоли)
;

метод ЕстьУчастник(Физлицо: ФизическиеЛица.Ссылка): Булево
    для ТекущаяСтрока из Строки
        если ТекущаяСтрока.Физлицо == Физлицо
            возврат Истина
        ;
    ;
    возврат Ложь
;

@НаСервере @ДоступноСКлиента
статический метод Участники(УчастникиМероприятия: ЧитаемаяКоллекция<УчастникМероприятия>, ПроцессАдаптации: ПроцессыАдаптации.Ссылка): Массив<Участник>
    знч Участники: Массив<Участник>
    знч РолиУчастников = РолиУчастников(ПроцессАдаптации)
    для УчастникМероприятия из УчастникиМероприятия
        Участники.Добавить(новый Участник(
            Физлицо = УчастникМероприятия.Участник,
            РолиАдаптации = РолиУчастников.ПолучитьИлиУмолчание(УчастникМероприятия.Участник) ?? {}
        ))
    ;
    возврат Участники
;

@НаСервере @ДоступноСКлиента
статический метод Участник(Физлицо: ФизическиеЛица.Ссылка, ПроцессАдаптации: ПроцессыАдаптации.Ссылка): Участник
    возврат новый Участник(
        Физлицо = Физлицо,
        РолиАдаптации = РолиУчастника(ПроцессАдаптации, Физлицо)
    )
;

@НаСервере @ДоступноСКлиента
статический метод УчастникПоРоли(Роль: РолиУчастниковАдаптации, ПроцессАдаптации: ПроцессыАдаптации.Ссылка): Участник?
    знч Физлицо = УчастникПоРоли(ПроцессАдаптации, Роль)
    если Физлицо == Неопределено
        возврат Неопределено
    иначе
        возврат новый Участник(
            Физлицо = Физлицо,
            РолиАдаптации = РолиУчастника(ПроцессАдаптации, Физлицо!)
        )
    ;
;

@НаСервере
статический метод УчастникПоРоли(ПроцессАдаптации: ПроцессыАдаптации.Ссылка, Роль: РолиУчастниковАдаптации): ФизическиеЛица.Ссылка?
    исп КонтекстДоступа.Привилегированный()
    возврат ПроцессыАдаптации.УчастникПоРоли(ПроцессАдаптации, Роль)
;

@НаСервере
статический метод РолиУчастника(ПроцессАдаптации: ПроцессыАдаптации.Ссылка, Участник: ФизическиеЛица.Ссылка): Множество<РолиУчастниковАдаптации>
    исп КонтекстДоступа.Привилегированный()
    возврат ПроцессыАдаптации.РолиУчастника(ПроцессАдаптации, Участник)
;

@НаСервере
статический метод РолиУчастников(ПроцессАдаптации: ПроцессыАдаптации.Ссылка): Соответствие<ФизическиеЛица.Ссылка, Множество<РолиУчастниковАдаптации>>
    исп КонтекстДоступа.Привилегированный()
    возврат ПроцессыАдаптации.РолиУчастников(ПроцессАдаптации)
;