импорт ИнтерфейсныеКомпонентыСтандартные
импорт СтандартноеПриложение
импорт ФизическиеЛица
импорт Компания

@Обработчик
метод ПослеСоздания()
    ДобавитьПоляДляПредставленияИмениОтветственного()
    ПроцессАдаптацииПослеЗаписи.ПодключитьОбработчик(&ПроцессАдаптацииПослеЗаписи)
    СтатусПроцессаАдаптацииПослеЗаписи.ПодключитьОбработчик(&СтатусПроцессаАдаптацииПослеЗаписи)
    МероприятиеПослеЗаписи.ПодключитьОбработчик(&МероприятиеПослеЗаписи)
    МероприятиеПослеУдаления.ПодключитьОбработчик(&МероприятиеПослеЗаписи)
    СтатусМероприятияПослеЗаписи.ПодключитьОбработчик(&СтатусМероприятияПослеЗаписи)
    ВстроитьКомпонентПланирования()
;

@Обработчик
метод ПослеЧтения()
    ОбновитьСтатус()
    ОбновитьЕстьМероприятия()
    ОбновитьФотографию()
    ЗагрузкаЗавершена()
;

метод ДобавитьПоляДляПредставленияИмениОтветственного()
    ФизЛица.ДобавитьПоляДляПредставленияИмени(
        Компоненты.Мероприятия.Источник,
        "Мероприятия.Ответственный",
        "Ответственный")
;

метод ЗагрузкаЗавершена()
    ЗагрузкаЗавершена = Истина
;

@Обработчик
метод ПослеЗаписиОбъекта()
    ПроцессАдаптацииПослеЗаписи.Оповестить(КлючОбъекта!)
;

метод ВстроитьКомпонентПланирования()
    если РасширениеПерсонал.Доступно()
        знч КомпонентПланирования = РасширениеПерсонал.ПолучитьВстраиваемыйКомпонентПланирования(
                                        ПолучитьПроцессАдаптации = () -> КлючОбъекта,
                                        ПослеПланирования = &ОбновитьМероприятияОтложенно)
        Компоненты.МестоДляКомпонентаПланирования.Содержимое.Добавить(КомпонентПланирования)
    ;
;

метод МероприятиеПослеЗаписи(Мероприятие: Мероприятия.Ссылка)
    ОбновитьМероприятияОтложенно()
;

метод СтатусМероприятияПослеЗаписи(Мероприятие: Мероприятия.Ссылка)
    ОбновитьМероприятияОтложенно()
;

метод ПроцессАдаптацииПослеЗаписи(ПроцессАдаптации: ПроцессыАдаптации.Ссылка)
    если ПроцессАдаптации == ПроцессАдаптации()
        Прочитать()
    ;
;

метод СтатусПроцессаАдаптацииПослеЗаписи(ПроцессАдаптации: ПроцессыАдаптации.Ссылка)
    если ПроцессАдаптации == ПроцессАдаптации()
        ОбновитьСтатус()
    ;
;

метод ОсновнаяКоманда(): ОбычнаяКоманда?
    если не ЭтоТелефон()
        возврат Неопределено
    ;
    если ЭтоНовый()
        возврат СоздатьПроцессАдаптации
    иначе если СтатусПроцессаАдаптации == СтатусыПроцессаАдаптации.Черновик
        возврат ЗапуститьПроцессАдаптации
    иначе если СтатусПроцессаАдаптации == СтатусыПроцессаАдаптации.Выполняется
        возврат ЗавершитьПроцессАдаптации
    ;
;

метод ОбычныеКоманды(): ФрагментКомандногоИнтерфейса<Команда>?
    если не ЭтоТелефон()
        возврат Неопределено
    ;
    если СтатусПроцессаАдаптации == СтатусыПроцессаАдаптации.Выполняется
        возврат новый ФрагментКомандногоИнтерфейса<Команда>(Элементы = [ОтменитьПроцессАдаптации])
    иначе
        возврат Неопределено   
    ;
;

метод СоздатьПроцессАдаптацииВидимость(): Булево
    возврат ЭтоНовый() и АдаптацияПерсонала.МожноСоздатьПроцессАдаптации()
        и АдаптацияПерсонала.ЕстьПравоСоздатьПроцессАдаптации()
;

метод СоздатьПроцессАдаптацииОбработчик(Команда: ОбычнаяКоманда)
    Сохранить()
;

метод ЗапуститьПроцессАдаптацииДоступность(): Булево
    возврат АдаптацияПерсонала.МожноЗапуститьПроцессАдаптации(СтатусПроцессаАдаптации, HrМенеджерУказан())
;

метод ЗапуститьПроцессАдаптацииВидимость(): Булево
    возврат не ЭтоНовый() и АдаптацияПерсонала.МожноЗапуститьПроцессАдаптации(СтатусПроцессаАдаптации)
        и АдаптацияПерсонала.ЕстьПравоЗапуститьПроцессАдаптации(Объект.Ссылка)
;

метод ЗапуститьПроцессАдаптацииОбработчик(Команда: ОбычнаяКоманда)
    РасширениеПерсонал.УстановитьСтатусПроцессаАдаптации(ПроцессАдаптации()!, СтатусыПроцессаАдаптации.Выполняется)
;

метод ЗавершитьПроцессАдаптацииВидимость(): Булево
    возврат не ЭтоНовый() и АдаптацияПерсонала.МожноЗавершитьПроцессАдаптации(СтатусПроцессаАдаптации)
        и АдаптацияПерсонала.ЕстьПравоЗавершитьПроцессАдаптации(Объект.Ссылка)
;

метод ЗавершитьПроцессАдаптацииОбработчик(Команда: ОбычнаяКоманда)
    РасширениеПерсонал.УстановитьСтатусПроцессаАдаптации(ПроцессАдаптации()!, СтатусыПроцессаАдаптации.Завершен)
;

метод ОтменитьПроцессАдаптацииВидимость(): Булево
    возврат не ЭтоНовый() и АдаптацияПерсонала.МожноОтменитьПроцессАдаптации(СтатусПроцессаАдаптации)
        и АдаптацияПерсонала.ЕстьПравоОтменитьПроцессАдаптации(Объект.Ссылка)
;

метод ОтменитьПроцессАдаптацииОбработчик(Команда: ОбычнаяКоманда)
    РасширениеПерсонал.УстановитьСтатусПроцессаАдаптации(ПроцессАдаптации()!, СтатусыПроцессаАдаптации.Отменен)
;

метод УдалитьПроцессАдаптацииВидимость(): Булево
    возврат не ЭтоНовый()
            и не ТолькоЧтение
            и АдаптацияПерсонала.МожноУдалитьПроцессАдаптации(СтатусПроцессаАдаптации)
            и АдаптацияПерсонала.ЕстьПравоУдалитьПроцессАдаптации(ПроцессАдаптации()!)
;

метод УдалитьПроцессАдаптацииОбработчик(Команда: ОбычнаяКоманда)
    если ПроцессыАдаптации.УдалитьСКонтролем(ПроцессАдаптации()!)
        ИнтерфейсныеКомпоненты.ЗакрытьЗамещающуюФорму(этот)
    ;
;

метод МожноРедактироватьСтатус(): Булево
    если ЭтоНовый()
        возврат Ложь
    ;
    если ТолькоЧтение
        возврат Ложь
    ;
    возврат АдаптацияПерсонала.МожноРедактироватьСтатусПроцессаАдаптации(HrМенеджерУказан())
            и АдаптацияПерсонала.ЕстьПравоРедактироватьСтатусПроцессаАдаптации(ПроцессАдаптации())
;

метод СтатусПроцессаАдаптацииПриИзменении(Источник: ВыборСтатусПроцессаАдаптации, Событие: СобытиеПриИзменении<СтатусыПроцессаАдаптации>)
    РасширениеПерсонал.УстановитьСтатусПроцессаАдаптации(ПроцессАдаптации()!, Событие.НовоеЗначение)
;

метод ОбновитьСтатус()
    знч ПроцессАдаптации = ПроцессАдаптации()
    если ПроцессАдаптации != Неопределено
        СтатусПроцессаАдаптации = СтатусыПроцессовАдаптации.Прочитать(ПроцессАдаптации!)!
    ;
;

метод ЗаглушкаВидимость(): Булево
    возврат не МероприятияВидимость()    
;

метод ЗаглушкаТекст(): Строка
    возврат ЭтоНовый() ? "Новый процесс адаптации" : "Нет запланированных мероприятий"
;

метод ЗаглушкаПояснение(): Строка
    если ЭтоНовый()
        возврат "Перед планированием мероприятий завершите создание"
    иначе если СтатусПроцессаАдаптации.Конечный()
        возврат ""
    иначе если HrМенеджерУказан()
        возврат "Для планирования мероприятий укажите план адаптации или добавьте отдельные мероприятия"
    иначе
        возврат "Перед планированием мероприятий необходимо указать HR-менеджера"
    ;
;

метод МероприятияВидимость(): Булево
    возврат ЕстьМероприятия    
;

метод ОбновитьЕстьМероприятия()
    ЕстьМероприятия = ЭтоНовый() ? Ложь : ЕстьМероприятия(ПроцессАдаптации()!)
;

@НаСервере @ДоступноСКлиента
статический метод ЕстьМероприятия(ПроцессАдаптации: ПроцессыАдаптации.Ссылка): Булево
    возврат Мероприятия.ЕстьЗаписи(ПроцессАдаптации)
;

метод ОбновитьМероприятияОтложенно()
    ПодключитьОбработчикТаймера(&ОбновитьМероприятия, 1мс, Истина)
;

метод ОбновитьМероприятия()
    ОбновитьЕстьМероприятия()
    Компоненты.Мероприятия.Обновить()
;

метод Сохранить()
    если ПроверитьЗаполнение() и ПроверитьСуществованиеВыполняющихсяПроцессовАдаптации()
        Записать()
    ;
;

метод ЗакрытьССохранением(Команда: ОбычнаяКоманда)
    если ПроверитьЗаполнение()
        Записать()
        Закрыть()
    ;
;

метод ЗакрытьБезСохранения(Команда: ОбычнаяКоманда)
    Закрыть()
;

метод ПроверитьЗаполнение(): Булево
    возврат ПроверитьЗаполнение([
            &ПроверитьЗаполнениеСотрудник,
            &ПроверитьЗаполнениеДатаСобытия,
            &ПроверитьЗаполнениеДолжность,
            &ПроверитьЗаполнениеПодразделение,
            &ПроверитьЗаполнениеРуководитель,
            &ПроверитьЗаполнениеHrМенеджер
    ])
;

метод ПроверитьЗаполнение(Проверки: Обходимое<()->Булево>): Булево
    возврат Проверки
        .Преобразовать(Проверка -> Проверка())
        .ВсеСоответствуют(Результат -> Результат == Истина)
;

метод ПроверитьЗаполнениеДатаСобытия(): Булево
    возврат ПроверитьЗаполнение(Компоненты.ДатаСобытия, Дата{})
;

метод ПроверитьЗаполнениеСотрудник(): Булево
    возврат ПроверитьЗаполнение(Компоненты.Сотрудник)
;

метод ПроверитьЗаполнениеДолжность(): Булево
    возврат ПроверитьЗаполнение(Компоненты.Должность)
;

метод ПроверитьЗаполнениеПодразделение(): Булево
    возврат ПроверитьЗаполнение(Компоненты.Подразделение)
;

метод ПроверитьЗаполнениеРуководитель(): Булево
    возврат ПроверитьЗаполнение(Компоненты.Руководитель)
;

метод ПроверитьЗаполнениеHrМенеджер(): Булево
    возврат ПроверитьЗаполнение(Компоненты.HrМенеджер)    
;

метод ПроверитьЗаполнение(ПолеВвода: ПолеВвода<неизвестно>, НеуказанноеЗначение: Объект? = Неопределено): Булево
    если ПолеВвода.Значение == НеуказанноеЗначение
        ПолеВвода.РезультатПроверкиДанных = РезультатПроверкиДанных.Ошибка
        ПолеВвода.СообщениеОшибка = "Обязательно для заполнения"
        возврат Ложь
    иначе
        ПолеВвода.РезультатПроверкиДанных = РезультатПроверкиДанных.Отсутствует
        ПолеВвода.СообщениеОшибка = ""
        возврат Истина
    ;
;

метод ПроверитьСуществованиеВыполняющихсяПроцессовАдаптации(): Булево
    если не ЭтоНовый()
        возврат Истина
    ;
    знч ВыполняющийсяПроцессАдаптации = ПроцессыАдаптации.ВыполняющийсяПроцессАдаптацииПоСотруднику(Объект.Сотрудник!)
    если ВыполняющийсяПроцессАдаптации == Неопределено
        возврат Истина
    ;
    знч Ответ = Диалог.Вопрос("Для ${Объект.Сотрудник!} уже есть выполняющийся процесс адаптации. Продолжить создание?",
                                [КнопкаДиалога.Да, КнопкаДиалога.Нет, КнопкаДиалога.Отмена],
                                "Создание процесса адаптации")
    возврат Ответ == КнопкаДиалога.Да
;

метод МожноРедактировать(): Булево
    если ЭтоНовый()
        возврат Истина
    ;
    если ТолькоЧтение
        возврат Ложь
    ;
    возврат АдаптацияПерсонала.МожноРедактироватьПроцессАдаптации(СтатусПроцессаАдаптации)
            и АдаптацияПерсонала.ЕстьПравоРедактироватьПроцессАдаптации(КлючОбъекта!)
;

метод ЭтоТелефон(): Булево
    возврат КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон
;

метод ОсновноеЗаголовокРаздела(): Строка
    возврат ЭтоТелефон() ? "Основное" : ""
;

метод МероприятияЗаголовокРаздела(): Строка
    возврат ЭтоТелефон() ? "Мероприятия" : ""
;

метод ПроцессАдаптации(): ПроцессыАдаптации.Ссылка?
    возврат КлючОбъекта
;

метод HrМенеджерУказан(): Булево
    возврат Объект.HrМенеджер != Неопределено
;

метод ФильтрМероприятийПоПроцессуАдаптации(): ЭлементФильтра
    возврат новый ЭлементФильтра(
        Поле = "ПроцессАдаптации",
        ВидСравнения = ВидСравнения.Равно,
        Значение = ПроцессАдаптации(),
        Использовать = Истина
    )
;

метод КомандаСоздатьВнеплановоеМероприятиеВидимость(): Булево
    если ЭтоНовый()
        возврат Ложь
    ;
    возврат АдаптацияПерсонала.МожноДобавлятьВнеплановыеМероприятия(СтатусПроцессаАдаптации, HrМенеджерУказан())
            и АдаптацияПерсонала.ЕстьПравоДобавлятьВнеплановыеМероприятия(ПроцессАдаптации()!)
;

метод КомандаСоздатьВнеплановоеМероприятие(Команда: ОбычнаяКоманда)
    Мероприятия.ОткрытьМодальноФормуНового(ПроцессАдаптации()!)
;

метод МожноКопироватьМероприятие(): Булево
    если ЭтоНовый()
        возврат Ложь
    ;
    если ТолькоЧтение
        возврат Ложь
    ;
    возврат АдаптацияПерсонала.МожноДобавлятьВнеплановыеМероприятия(СтатусПроцессаАдаптации, HrМенеджерУказан())
            и АдаптацияПерсонала.ЕстьПравоДобавлятьВнеплановыеМероприятия(ПроцессАдаптации()!)
;

метод КопироватьМероприятие(Команда: КомандаСПараметром<Объект>, Параметр: Объект)
    знч КопируемоеМероприятие = Параметр как Мероприятия.Ссылка
    Мероприятия.ОткрытьМодальноФормуКопии(КопируемоеМероприятие)
;

метод МероприятияПриНажатииСтроки(Источник: Список<ДинамическийСписок>, Событие: СобытиеСДанными<СтрокаСписка<СтрокаДинамическогоСписка>>)
    знч Мероприятие = Событие.Данные.ДанныеСтроки.Ключ как Мероприятия.Ссылка
    Мероприятия.ОткрытьМодальноФорму(Мероприятие)
;

метод УстановитьСтатусВыделеннымСтрокам(ВыделенныеСтроки: Массив<Сущность.Ключ>, НовыйСтатус: СтатусыМероприятия)
    знч Мероприятия = МероприятияИзВыделенныхСтрок(ВыделенныеСтроки)
    СтатусыМероприятий.Установить(Мероприятия, НовыйСтатус)
    Компоненты.Мероприятия.ОчиститьОтмеченныеСтроки()
;

метод УстановитьСтатусПроведено(Команда: КомандаСПараметром<Массив<Сущность.Ключ>>, Параметр: Массив<Сущность.Ключ>)
        УстановитьСтатусВыделеннымСтрокам(Параметр, СтатусыМероприятия.Проведено)
;

метод УстановитьСтатусОтменено(Команда: КомандаСПараметром<Массив<Сущность.Ключ>>, Параметр: Массив<Сущность.Ключ>)
    УстановитьСтатусВыделеннымСтрокам(Параметр, СтатусыМероприятия.Отменено)
;

метод МероприятияИзВыделенныхСтрок(ВыделенныеСтроки: Массив<Сущность.Ключ>): Массив<Мероприятия.Ссылка>
    знч Мероприятия: Массив<Мероприятия.Ссылка>
    для Мероприятие из ВыделенныеСтроки
        если Мероприятие это Мероприятия.Ссылка
            Мероприятия.Добавить(Мероприятие как Мероприятия.Ссылка)
        ;
    ;
    возврат Мероприятия
;

метод ФильтрМероприятийПоСрокамПроведенияШиринаВКолонках(): ШиринаВКолонках | Авто
    возврат КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Компьютер ? ШиринаВКолонках.Одинарная : ШиринаВКолонках.Половинная
;

метод ФильтрМероприятийПоСтатусуШиринаВКолонках(): ШиринаВКолонках | Авто
    возврат КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Компьютер ? ШиринаВКолонках.Одинарная : ШиринаВКолонках.Половинная
;

метод МероприятияИспользоватьОтметкиСтрок(): Булево
    если ЭтоНовый()
        возврат Ложь
    ;
    если ТолькоЧтение
        возврат Ложь
    ;
    возврат АдаптацияПерсонала.МожноРедактироватьСтатусыМероприятий(СтатусПроцессаАдаптации)
            и АдаптацияПерсонала.ЕстьПравоРедактироватьСтатусЛюбогоМероприятия(ПроцессАдаптации()!)
;

метод СтатусМероприятийТолькоЧтение(): Булево
    возврат не АдаптацияПерсонала.МожноРедактироватьСтатусыМероприятий(СтатусПроцессаАдаптации)
;

метод ЗначениеКолонкиМероприятие(СтрокаСписка: СтрокаДинамическогоСписка): МероприятиеКолонка.Значение
    возврат новый МероприятиеКолонка.Значение(
        Мероприятие = СтрокаСписка.Ключ как Мероприятия.Ссылка,
        Наименование = СтрокаСписка.Данные["Наименование"] как Строка,
        АдаптируемыйСотрудник = Неопределено,
        Ответственный = ФизЛица.ФИОПоПолям(СтрокаСписка, "Ответственный"),
        КоличествоУчастников = СтрокаСписка.Данные["КоличествоУчастников"] как Число,
        ПровестиНеРанее = СтрокаСписка.Данные["ПровестиНеРанее"] как Дата,
        ПровестиНеПозднее = СтрокаСписка.Данные["ПровестиНеПозднее"] как Дата,
        Статус = СтрокаСписка.Данные["Статус"] как СтатусыМероприятия
    )
;

метод ПризнакиДоступаКСтатусамМероприятий(ДанныеСтроки: Объект): АдаптацияПерсонала.ПризнакиДоступаКСтатусамМероприятий
    знч Данные = (ДанныеСтроки как СтрокаДинамическогоСписка).Данные
    возврат новый АдаптацияПерсонала.ПризнакиДоступаКСтатусамМероприятий(
        ОтветственныйЗаМероприятие = Данные["Ответственный"] как ФизическиеЛица.Ссылка?,
        РуководительПроцессаАдаптации = Данные["Руководитель"] как ФизическиеЛица.Ссылка?,
        ПодразделениеПроцессаАдаптации = Данные["Подразделение"] как СтруктураПредприятия.Ссылка?,
        СтатусМероприятия = Данные["Статус"] как СтатусыМероприятия,
        СтатусПроцессаАдаптации = СтатусПроцессаАдаптации
    )
;


метод НадписьСотрудникВидимость(): Булево
    возврат не СотрудникВидимость()    
;

метод СотрудникВидимость(): Булево
    возврат ЭтоНовый()
;

метод СотрудникПриИзменении(Источник: Компонент, Событие: СобытиеКомпонента)
    ОбновитьФотографию()
    ПроверитьЗаполнениеСотрудник()
;

метод НадписьДатаСобытияВидимость(): Булево
    возврат не ДатаСобытияВидимость()    
;

метод ДатаСобытияВидимость(): Булево
    возврат ЭтоНовый()
;

метод ДатаСобытияПриИзменении(Источник: Компонент, Событие: СобытиеКомпонента)
    ПроверитьЗаполнениеДатаСобытия()
;

метод НадписьПодразделениеВидимость(): Булево
    возврат не ПодразделениеВидимость()    
;

метод ПодразделениеВидимость(): Булево
    возврат ЭтоНовый()
;

метод ПодразделениеПриИзменении(Источник: Компонент, Событие: СобытиеКомпонента)
    ЗаполнитьРуководителяПоПодразделению()
    ПроверитьЗаполнениеПодразделение()
;

метод НадписьДолжностьВидимость(): Булево
    возврат не ДолжностьВидимость()    
;

метод ДолжностьВидимость(): Булево
    возврат ЭтоНовый()
;

метод ДолжностьСписокВыбора():  Массив<ЭлементСпискаЗначений<Должности.Ссылка?>>
    если Объект.Подразделение == Неопределено
        возврат []
    ;
    возврат ШтатноеРасписание.ДолжностиПодразделения(Объект.Подразделение!)
        .Преобразовать(Д -> новый ЭлементСпискаЗначений<Должности.Ссылка?>(Д))
;

метод ДолжностьПриИзменении(Источник: Компонент, Событие: СобытиеКомпонента)
    ПроверитьЗаполнениеДолжность()
;

метод НадписьРуководительВидимость(): Булево
    возврат не РуководительВидимость()
;

метод РуководительВидимость(): Булево
    возврат ЭтоНовый()
;

метод РуководительПриИзменении(Источник: Компонент, Событие: СобытиеКомпонента)
    ПроверитьЗаполнениеРуководитель()
;

метод НадписьПлановаяДатаЗавершенияЗначение(): Строка
    знч ПлановаяДатаЗавершения = Объект.ПлановаяДатаЗавершения
    если ПлановаяДатаЗавершения == Неопределено
        возврат "<Не определена>"
    иначе
        возврат ПлановаяДатаЗавершения.Представление()
    ;
;

метод НадписьПлановаяДатаЗавершенияВидимость(): Булево
    возврат не ПлановаяДатаЗавершенияВидимость()    
;

метод ПлановаяДатаЗавершенияВидимость(): Булево
    возврат АдаптацияПерсонала.МожноРедактироватьПроцессАдаптации()
;
метод ПлановаяДатаЗавершенияТолькоЧтение(): Булево
    возврат не МожноРедактировать
;

метод ПлановаяДатаЗавершенияРезультатПроверкиДанных(): РезультатПроверкиДанных
    возврат Объект.ДопустимаПлановаяДатаЗавершения() ? РезультатПроверкиДанных.Отсутствует : РезультатПроверкиДанных.Ошибка
;

метод ПлановаяДатаЗавершенияПриИзменении(Источник: ПолеВвода<Дата?>, Событие: СобытиеПриИзменении<Дата?>)
    если ЭтоНовый()
        возврат
    иначе если Событие.СтароеЗначение != Событие.НовоеЗначение и Объект.ДопустимаПлановаяДатаЗавершения()
        Записать()
    ;
;

метод НадписьHrМенеджерЗначение(): Строка
    знч HrМенеджер = Объект.HrМенеджер
    если HrМенеджер == Неопределено
        возврат "<Не определен>"
    иначе
        возврат "$HrМенеджер"
    ;
;

метод НадписьHrМенеджерВидимость(): Булево
    возврат не HrМенеджерВидимость()
;

метод HrМенеджерВидимость(): Булево
    возврат МожноРедактировать и АдаптацияПерсонала.МожноРедактироватьHrМенеджераПроцессаАдаптации(СтатусПроцессаАдаптации, ЕстьМероприятия)
;

метод HrМенеджерПриИзменении(Источник: ПолеВвода<ФизическиеЛица.Ссылка?>, Событие: СобытиеПриИзменении<ФизическиеЛица.Ссылка?>)
    если ПроверитьЗаполнениеHrМенеджер() и не ЭтоНовый()
        Записать()
    ;
;

метод ФотографияРазмер(): Число
    возврат 15 * Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА
;

метод ФотографияВидимость(): Булево
    возврат Объект.Сотрудник != Неопределено
;

метод ОбновитьФотографию()
    Фотография = ПолучитьФотографию(Объект.Сотрудник)
    если Фотография == Неопределено
        Фотография = СтандартноеПриложение.ПараметрыСеанса().АватарПоУмолчанию
    ;
;

@НаСервере @ДоступноСКлиента
статический метод ПолучитьФотографию(ФизическоеЛицо: ФизическиеЛица.Ссылка?): ДвоичныйОбъект.Ссылка?
    возврат ФизическиеЛица.Фотография(ФизическоеЛицо)
;

метод ЗаполнитьРуководителяПоПодразделению()
    если Объект.Подразделение == Неопределено
        возврат
    ;
    Объект.Руководитель = РуководительПодразделения(Объект.Подразделение!)
    ПроверитьЗаполнениеРуководитель()
;

@НаСервере @ДоступноСКлиента
статический метод РуководительПодразделения(Подразделение: СтруктураПредприятия.Ссылка): ФизическиеЛица.Ссылка?
    возврат ОрганизационнаяСтруктура.ДанныеРуководителяПодразделения(Подразделение)?.Руководитель
;