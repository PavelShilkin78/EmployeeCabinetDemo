импорт ОбщиеСтандартные
импорт ВебApi

@ВПроекте
конст ИД_ПОДСИСТЕМЫ = "ОбменДанными"

@ВПодсистеме
конст ИМЯ_ПОДСИСТЕМЫ = "Обмен данными"

@ВПроекте
исключение ИсключениеДокументУжеОтправлен
    обз пер Документ: неизвестно
;

@ВПроекте
структура СостояниеОбмена
    пер ОповеститьОбОтсутствииОбмена: Булево
    пер ОповеститьСотрудникаОВозобновленииОбмена: Булево
    пер ДлительностьОтсутствияОбмена: Число
;

@ВПроекте
структура НастройкиИнформационнойСистемы
    пер ОповещатьПриОтсутствииОбмена: Булево
    пер ДопустимоеВремяОтсутствияОбмена: Число
;

@ВПодсистеме
@НаСервере
структура ПараметрыПолученияВерсийДанныхОбъектов
    обз пер НачинаяСВерсии: Число
    пер РазмерПорции: Число = 100
;

@ВПроекте
структура ПараметрыИзменения
    обз знч ВерсияИзменения: Число
    обз знч ХарактерИзменения: ХарактерыИзменений
;

@ВПроекте
структура ЭлементКонтрактаСущностиJson
    обз знч typeName: Строка
    обз знч ID: Строка
;

@ВПроекте
исключение ИсключениеИнформационнаяСистемаНеОпределена
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ВидТекущегоПриложения(): ВидПриложения
    возврат ОбменДаннымиПриложение.ПолучитьСервис().ВидПриложения()    
;

@ВПроекте
@НаСервере
метод ЗарегистрироватьОтправляемыйДокумент(Документ: ИсходящиеДанные.Ссылка, Отправляемый: Булево)
    ОтправляемыеДокументы.ЗарегистрироватьОтправляемыйДокумент(Документ, Отправляемый)
;

@ВПроекте
@НаСервере
метод ЗарегистрироватьВсеЭлементыСущности(ТипСсылки: Тип)
    знч ИмяТаблицы = МенеджерСущности.ИмяТаблицыПоТипу(ТипСсылки)
    знч Запрос = новый ПроизвольныйЗапрос(
        "выбрать
            Ссылка
        из
            %ИмяТаблицы"
    )
    для Элемент из Запрос.Выполнить()
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Элемент.Ссылка, Истина)
        РегистрацияИзменений.ЗарегистрироватьИзменение(Элемент.Ссылка, Неопределено)
    ; 
;

@ВПроекте
@НаСервере
метод СнятьРегистрациюОтправляемогоДокумента(Документ: Справочник.Ссылка)
    ОтправляемыеДокументы.СнятьРегистрациюОтправляемогоДокумента(Документ)
;

@ВПроекте
@НаСервере
метод ЭтоОтправляемыйДокумент(Документ: ИсходящиеДанные.Ссылка): Булево
    возврат ОтправляемыеДокументы.ЭтоОтправляемыйДокумент(Документ)
;

@ВПроекте
@НаСервере
метод УстановитьБлокировкуНаВнешниеИдентификаторы(ВнешниеИдентификаторы: ЧитаемаяКоллекция<Строка>)
    СоответствиеИдентификаторовОбъектов.УстановитьБлокировкуНаВнешниеИдентификаторы(ВнешниеИдентификаторы)
;

@ВПроекте
@НаСервере
метод ИдентификаторыЛокальныхОбъектов(ВнешниеИдентификаторы: ЧитаемаяКоллекция<Строка>, Тип: Тип? = Неопределено): ЧитаемоеСоответствие<Строка, ВходящиеДанные.Ссылка>
    возврат СоответствиеИдентификаторовОбъектов.ИдентификаторыЛокальныхОбъектов(ВнешниеИдентификаторы, Тип)
;

@ВПроекте
@НаСервере
метод ВнешниеИдентификаторыПоВнутреннимСсылкам(ВнутренниеСсылки: ЧитаемаяКоллекция<ВходящиеДанные.Ссылка>): ЧитаемоеСоответствие<ВходящиеДанные.Ссылка, Строка>
    возврат СоответствиеИдентификаторовОбъектов.ВнешниеИдентификаторыПоВнутреннимСсылкам(ВнутренниеСсылки)
;

@ВПроекте
@НаСервере
метод ЗаписатьСоответствиеИдентификаторов(ВнутренняяСсылка: неизвестно, ВнешнийИдентификатор: Строка, ОбъектСуществует: Булево)
    СоответствиеИдентификаторовОбъектов.ЗаписатьСоответствиеИдентификаторов(ВнутренняяСсылка, ВнешнийИдентификатор, ОбъектСуществует)
;

@ВПроекте
@НаСервере
метод ОбновитьСоответствиеИдентификаторов(ВнутренняяСсылка: неизвестно, ВнешнийИдентификатор: Строка, ОбъектСуществует: Булево)
    СоответствиеИдентификаторовОбъектов.ОбновитьСоответствиеИдентификаторов(ВнутренняяСсылка, ВнешнийИдентификатор, ОбъектСуществует)
;

@ВПроекте
@НаСервере
метод СсылкаВнешнегоОбъекта(Ссылка: ВходящиеДанные.Ссылка): Булево
    возврат не СоответствиеИдентификаторовОбъектов.ВнешниеИдентификаторыПоВнутреннимСсылкам([Ссылка]).Пусто()    
;

@ВПроекте
@НаСервере
метод ИзмененияОбъектовИнформационнойСистемы(
        ИнформационнаяСистема: ИнформационныеСистемы.Ссылка, 
        ПараметрыПолучения: ОбменДанными.ПараметрыПолученияВерсийДанныхОбъектов,
        ОтправляемыеТипыДокументов: ВсеДанные.ОтоборПоОтправляемымТипамДокументов): ВерсииДанныхОбъектов.ДанныеИзмененияОбъектовИнформационнойСистемы
        
    возврат ВерсииДанныхОбъектов.ИзмененияОбъектовИнформационнойСистемы(ИнформационнаяСистема, ПараметрыПолучения, ОтправляемыеТипыДокументов)
;

@ВПроекте
@НаСервере
метод ОбновитьВремяПоследнегоОбменаДанными(ИнформационнаяСистема: ОбменДанными::ИнформационныеСистемы.Ссылка?)
    ВремяПоследнегоОбменаДанными.ОбновитьВремяПоследнегоОбменаДанными(ИнформационнаяСистема, Момент.Сейчас())
    знч Сервисы = ОбменДаннымиОбработчик.ПолучитьСервисы()
    для Сервис из Сервисы
        Сервис.ПослеВыполненияОбмена(ИнформационнаяСистема)
    ;
;

@ВПроекте
@НаСервере
исключение ИсключениеЗагруженныйФайлНеНайден
    обз знч Идентификатор: Строка
;

@ВПроекте
@НаСервере
метод ЗагруженныйФайл(ДанныеВложения: МенеджерФайлов.ДанныеФайлаJson): ДвоичныйОбъект.Ссылка
    знч ЗагруженныйФайл: ЗагруженныеФайлы.Объект? = ЗагруженныеФайлы.ПолучитьСсылку(новый Ууид(ДанныеВложения.fileID ?? ДанныеВложения.ID)).ЗагрузитьОбъект()
    если ЗагруженныйФайл == Неопределено
        выбросить новый ИсключениеЗагруженныйФайлНеНайден(
            "Не найден загруженный файл ${ДанныеВложения.name} по fileID = ${ДанныеВложения.fileID}", 
            ДанныеВложения.fileID)
    ;
    возврат ЗагруженныйФайл!.Хранилище!
;

@ВПроекте
@НаСервере
метод ВидПриложенияОтправителя(): ВидПриложения?
    возврат ИнформационныеСистемы.ВидПриложения(Отправитель())
;

@ВПроекте
@НаСервере
метод ВидПриложения(ИнформационнаяСистема: ИнформационныеСистемы.Ссылка?): ВидПриложения?
    если ИнформационнаяСистема == Неопределено
        возврат Неопределено
    ;
    
    возврат ИнформационныеСистемы.ВидПриложения(ИнформационнаяСистема!)
;

@ВПроекте
@НаСервере
метод ВерсииДанныхПоТипуОбъекта(ТипОбъекта: Тип): ЧитаемыйМассив<ВерсииДанныхОбъектов.Ссылка>
    возврат ВерсииДанныхОбъектов.ВерсииДанныхПоТипуОбъекта(ТипОбъекта)
;

@ВПроекте
@НаСервере
метод РазделителиВерсийДанных(ВерсииДанных: ЧитаемыйМассив<ВерсииДанныхОбъектов.Ссылка>): ЧитаемоеСоответствие<ВерсииДанныхОбъектов.Ссылка,РазделительВыгружаемыхДанных.Ссылка?>
    возврат ВерсииДанныхОбъектов.РазделителиВерсийДанных(ВерсииДанных)
;

@ВПроекте
@НаСервере
метод ОбъектыВерсийДанных(ВерсииДанных: ЧитаемыйМассив<ВерсииДанныхОбъектов.Ссылка>): ЧитаемоеСоответствие<ВерсииДанныхОбъектов.Ссылка,ИсходящиеДанные.Ссылка?>
    возврат ВерсииДанныхОбъектов.ОбъектыВерсийДанных(ВерсииДанных)
;

//Область СлужебныеПроцедурыИФункции

@ВПодсистеме
@НаСервере
метод Отправитель(): ИнформационныеСистемы.Ссылка?
    если Пользователи.ТекущийПользователь == Неопределено
        выбросить новый ИсключениеИнформационнаяСистемаНеОпределена("Пользователь не найден")
    ;

    пер Отправитель: ИнформационныеСистемы.Ссылка?
    попытка
        Отправитель = ИнформационныеСистемы.ИнформационнаяСистемаПользователя(Пользователи.ТекущийПользователь)
    поймать ОшибкаДоступа: ИсключениеДоступЗапрещен
        выбросить новый ИсключениеИнформационнаяСистемаНеОпределена("Недостаточно прав доступа для получения сведений об информационной системе")
    ;
    если Отправитель == Неопределено
        выбросить новый ИсключениеИнформационнаяСистемаНеОпределена("Информационная система не зарегистрирована")
    ;
    если не ИнформационныеСистемы.ДоступРазрешен(Отправитель)
        выбросить новый ИсключениеИнформационнаяСистемаНеОпределена("Доступ информационной системе запрещен")
    ;
    возврат Отправитель!
;

@ВПроекте
@НаСервере
метод ВремяПоследнегоОбменаДанными(Инфосистемы: Массив<ИнформационныеСистемы.Ссылка>): ЧитаемоеСоответствие<ИнформационныеСистемы.Ссылка, Момент>
    знч ВремяОбменаПодсистем: Соответствие<ИнформационныеСистемы.Ссылка, Момент>
    знч Запрос = Запрос{
        Выбрать
            Время Как Время,
            ИнформационнаяСистема Как ИнформационнаяСистема
        Из
            ВремяПоследнегоОбменаДанными
        Где
            ИнформационнаяСистема В(%Инфосистемы)}
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        ВремяОбменаПодсистем.Вставить(РезультатСтрока.ИнформационнаяСистема, РезультатСтрока.Время)
    ;
    возврат ВремяОбменаПодсистем
;
