импорт ВебApi
импорт ОбщиеСтандартные
импорт СтандартноеПриложение

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат ОбменДаннымиПоставщикОграничений.ПолучитьСервис().ОбъектыОтложенногоОбновленияРазрешенияДоступа()
;

//КонецОбласти

@ВПроекте
метод ОбработкаОбъектовОтложенногоОбновленияЗапланированноеЗадание()
    пока ОбработкаОбъектовОтложенногоОбновления()
        Пауза(60с)
    ;
;

метод ОбработкаОбъектовОтложенногоОбновления(): Булево
    пер МассивОбъектовОтложенногоОбновления: Массив<ВебApiСервер.ОбъектОтложенногоОбновления>
    знч МоментыЗагрузки: Множество<Момент>
    знч Запрос = Запрос{
        Выбрать
            МоментЗагрузки,
            ОбновляемыйОбъект,
            ТипОбновляемогоОбъекта,
            Отправитель,
            ЗависимыйОбъект,
            КлючОперации
        Из
            ОбъектыОтложенногоОбновления
        Упорядочить По
            ТипОбновляемогоОбъекта,
            МоментЗагрузки}
    знч Результат = новый ЧитаемыйМассив(Запрос.Выполнить())
    для РезультатСтрока из Результат
        если не МассивОбъектовОтложенногоОбновления.Пусто()
            и (МассивОбъектовОтложенногоОбновления[0].ТипОбновляемогоОбъекта != РезультатСтрока.ТипОбновляемогоОбъекта)
            
            ОбработатьПорциюОбъектов(МассивОбъектовОтложенногоОбновления, МоментыЗагрузки)
            МассивОбъектовОтложенногоОбновления.Очистить() 
            МоментыЗагрузки.Очистить()   
        ;
        МассивОбъектовОтложенногоОбновления.Добавить(новый ВебApiСервер.ОбъектОтложенногоОбновления(
            РезультатСтрока.МоментЗагрузки,
            РезультатСтрока.ОбновляемыйОбъект,
            РезультатСтрока.ТипОбновляемогоОбъекта,
            РезультатСтрока.Отправитель,
            РезультатСтрока.ЗависимыйОбъект,
            РезультатСтрока.КлючОперации))
        МоментыЗагрузки.Добавить(РезультатСтрока.МоментЗагрузки)
    ;
    
    если не МассивОбъектовОтложенногоОбновления.Пусто()
        попытка
            ОбработатьПорциюОбъектов(МассивОбъектовОтложенногоОбновления, МоментыЗагрузки)
        поймать Ошибка: Исключение
            Журналирование.ЗарегистрироватьОшибку(Ошибка)
        ;
    ;
    
    возврат не Результат.Пусто()
;

метод ОбработатьПорциюОбъектов(МассивОбъектовОтложенногоОбновления: Массив<ВебApiСервер.ОбъектОтложенногоОбновления>, МоментыЗагрузки: Множество<Момент>)
    попытка
        ВебApiСервер.ПослеЗаписиГруппыОбъектов(МассивОбъектовОтложенногоОбновления[0].ТипОбновляемогоОбъекта, МассивОбъектовОтложенногоОбновления)
        знч НаборЗаписей = новый ОбъектыОтложенногоОбновления.НаборЗаписей()
        НаборЗаписей.Фильтр.ТипОбновляемогоОбъекта.Установить(МассивОбъектовОтложенногоОбновления[0].ТипОбновляемогоОбъекта)
        для МоментЗагрузки из МоментыЗагрузки
            НаборЗаписей.Фильтр.МоментЗагрузки.Установить(МоментЗагрузки)
            НаборЗаписей.Записать()
        ;
    поймать Ошибка: Исключение
        Журналирование.ЗарегистрироватьОшибку(Ошибка)
    ;
;

@ВПроекте
метод СоздатьЗапускОбработкиОбъектовОтложенногоОбновленияПоРасписанию()
    МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
    ЗапланированныеЗадания.Создать(&ОбработкаОбъектовОтложенногоОбновленияЗапланированноеЗадание)
        .Настроить(
            Ключ = "ОбработкаОбъектовОтложенногоОбновленияЗапланированноеЗадание",
            СтратегияПубликации = СтратегияПубликацииЗадания.Отбросить)
        .Запланировать()

;