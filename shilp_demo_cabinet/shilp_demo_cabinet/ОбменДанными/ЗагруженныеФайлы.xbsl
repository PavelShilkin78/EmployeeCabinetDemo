импорт ОбщиеСтандартные
импорт ВебApi

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат ОбменДаннымиПоставщикОграничений.ПолучитьСервис().ЗагруженныеФайлыРазрешенияДоступа()
;

//КонецОбласти

метод НовыйФайл(ДанныеФайла: ДвоичныйОбъект, Размер: Число): ЗагруженныеФайлы.Объект
    пер ФайлОбъект = новый ЗагруженныеФайлы.Объект()
    ФайлОбъект.Хранилище = ДанныеФайла.Ссылка
    ФайлОбъект.Размер = Размер
    ФайлОбъект.ДатаЗагрузки = МенеджерДат.ТекущаяДатаВремя() 
    возврат ФайлОбъект
;

@Локально
исключение ИсключениеПревышенДопустимыйРазмерФайла    
;

@ВПроекте
метод ЗагрузитьФайл(ЗапросHttp: HttpСервисЗапрос|ОтветHttp): Строка
    знч РазмерСодержимого = СервисыHttp.РазмерСодержимого(ЗапросHttp)
    пер ДанныеФайла = СервисыHttp.ЗагрузитьФайл(ЗапросHttp, РазмерСодержимого)
    знч МаксимальныйРазмерФайла = МенеджерФайлов.МаксимальноДопустимыйРазмерФайлаВМегабайтах() * МенеджерФайловКлиентСервер.МЕГАБАЙТ
    
    попытка 
        если РазмерСодержимого > МаксимальныйРазмерФайла и РазмерСодержимого <= МаксимальныйРазмерФайла * 10 
            и СервисыHttp.ЭтоИзображение(ЗапросHttp)
            // Пытаемся сжать и затем проверяем размер файла
            ДанныеФайла = МенеджерФайлов.ОтмасштабированноеИзображение(
                ДанныеФайла.Ссылка,
                МаксимальныйРазмерФайла / РазмерСодержимого)
            если ДанныеФайла.Размер.ВБайтах() > МаксимальныйРазмерФайла
                выбросить новый ИсключениеПревышенДопустимыйРазмерФайла("Превышен максимально допустимый размер файла")
                ;                
        иначе если РазмерСодержимого > МаксимальныйРазмерФайла
            выбросить новый ИсключениеПревышенДопустимыйРазмерФайла("Превышен максимально допустимый размер файла")
        ;
                
    поймать ОшибкаПревышенДопустимыйРазмерФайла: ЗагруженныеФайлы.ИсключениеПревышенДопустимыйРазмерФайла 
        выбросить новый СервисыHttp.ИсключениеЗначениеПараметраВнеДиапазона("Размер файла превышает максимально допустимый - %{МенеджерФайловКлиентСервер.ПредставлениеРазмера(МаксимальныйРазмерФайла)}",
            "Content-Length", РазмерСодержимого.ВСтроку(), новый СервисыHttp.ДиапазонЗначений(0, МаксимальныйРазмерФайла))        
    ;
            
    знч ЗагруженныйФайл = НовыйЗагруженныйФайл(ДанныеФайла)
    возврат ЗагруженныйФайл.Ид.ВСтроку()
;

@ВПроекте
метод НовыйЗагруженныйФайл(ДанныеФайла: ДвоичныйОбъект): ЗагруженныеФайлы.Ссылка
    
    пер ФайлОбъект = ЗагруженныеФайлы.НовыйФайл(ДанныеФайла, ДанныеФайла.Размер.ВБайтах())
    
    исп Транзакции.Начать() 
    ФайлОбъект.Записать()
    ЗапланироватьУдаление(ФайлОбъект.Ссылка)

    возврат ФайлОбъект.Ссылка

;

метод ЗапланироватьУдаление(Файл: ЗагруженныеФайлы.Ссылка)
    ЗапланированныеЗадания.Создать(&УдалитьФайл, Файл)
        .Настроить( Ключ = МенеджерЗаданий.КлючЗаданияПоСсылке(Файл, "УдалениеФайла"), 
                    Задержка = Длительность.ИзЧасов(1),
                    ПовторыПриОшибке = СтратегияПовтораЗадания.Интервал(60, Длительность.ИзСекунд(60)) )
        .ЗапланироватьВТранзакции()
;

метод УдалитьФайл(Файл: ЗагруженныеФайлы.Ссылка)

    исп Транзакции.Начать()
    знч ФайлОбъект = Файл.ЗагрузитьОбъект(Истина)
    если ФайлОбъект == Неопределено
        возврат
    ;
    ФайлОбъект!.Удалить()

;