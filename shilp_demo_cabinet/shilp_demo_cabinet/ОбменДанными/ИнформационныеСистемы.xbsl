импорт ВебApi

@ВПроекте
конст УТВЕРЖДЕНИЕ_ОПОВЕЩАТЬ_ПРИ_ОТСУТСТВИИ_ОБМЕНА: Строка = "ОповещатьПриОтсутствииОбмена"

конст ОПОВЕЩАТЬ_ПРИ_ОТСУТСТВИИ_ОБМЕНА: Строка = "dataExchangeAbsenceNotify"
конст ДОПУСТИМОЕ_ВРЕМЯ_ОТСУТСТВИЯ_ОБМЕНА: Строка = "dataExchangeAbsenceAllowableTime"

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат ОбменДаннымиПоставщикОграничений.ПолучитьСервис().ИнформационныеСистемыРазрешенияДоступа()
;

//КонецОбласти РазрешенияДоступа

//Область СлужебныйПрограммныйИнтерфейс

@ВПроекте
структура ДанныеJson
    пер ID: Строка?
    пер name: Строка
    пер dataExchangeAbsenceNotify: Булево?
    пер dataExchangeAbsenceAllowableTime: Число?
    пер state: СостояниеJson?
    пер userID: ПользовательИд?
;

@ВПодсистеме
перечисление СостояниеJson
    active,
    inactive
;

@ВПодсистеме
структура ПользовательИд
    обз знч ID: Строка
    обз знч listID: Строка
;

@ВПодсистеме
метод ДоступРазрешен(Инфосистема: ИнформационныеСистемы.Ссылка): Булево
    пер ДоступРазрешен: Булево
    знч Запрос = Запрос{
        Выбрать 
            ДоступЗапрещен 
        Из ИнформационныеСистемы
        Где Ссылка == %Инфосистема}
    исп РезультатЗапроса = Запрос.Выполнить()
    для РезультатЗапросаСтрока из РезультатЗапроса
        ДоступРазрешен = не РезультатЗапросаСтрока.ДоступЗапрещен
    ;
    возврат ДоступРазрешен
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<ДанныеJson>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<ДанныеJson>
    ;
;

@ВПроекте
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Массив<ДанныеJson>>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Массив<ДанныеJson>>
    ;
;

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "infoSystemInfo"
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson): ДанныеJson

    исп Транзакции.Начать()
    
    пер ИнформационнаяСистема: ИнформационныеСистемы.Объект?
    если ДанныеJson.ID != Неопределено и не ДанныеJson.ID.Пусто()
        знч Идентификатор = новый Ууид(ДанныеJson.ID)
        знч ИнформационнаяСистемаСсылка = ИнформационныеСистемы.ПолучитьСсылку(Идентификатор)
        ИнформационнаяСистема = ИнформационнаяСистемаСсылка.ЗагрузитьОбъект(Истина)
    ;
    
    если ИнформационнаяСистема == Неопределено
        ИнформационнаяСистема = новый ИнформационныеСистемы.Объект()
    ;

    ИнформационнаяСистема.Наименование = ДанныеJson.name

    пер ИдПользователя = новый ИдПользователя(новый Ууид(ДанныеJson.userID.ID), новый Ууид(ДанныеJson.userID.listID))
    ИнформационнаяСистема.Пользователь = Пользователи.Найти(ИдПользователя)
    если ДанныеJson.state == СостояниеJson.active и ИнформационнаяСистема.Пользователь == Неопределено
        ИнформационнаяСистема.Пользователь = Пользователи.Подключить(ИдПользователя).Ссылка
    ;

    если ДанныеJson.dataExchangeAbsenceNotify != Неопределено
        ИнформационнаяСистема.ОповещатьПриОтсутствииОбмена = ДанныеJson.dataExchangeAbsenceNotify
    ;

    если ДанныеJson.dataExchangeAbsenceAllowableTime != Неопределено
        ИнформационнаяСистема.ДопустимоеВремяОтсутствияОбмена = ДанныеJson.dataExchangeAbsenceAllowableTime
    ;
    ИнформационнаяСистема.ВидПриложения = ВидПриложения.Hrm
    ИнформационнаяСистема.Записать()
    
    возврат ПолучитьДанныеJson(ИнформационнаяСистема.Ссылка)
;

@ВПроекте
метод УдалитьОбъекты(ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>, Сервисы: ВебApiСервер.СервисыУдаленияОбъектов)
    
    знч Идентификатор = новый Ууид(ПараметрыЗапроса["ID"] как Строка)
    знч ИнформационнаяСистемаСсылка = ИнформационныеСистемы.ПолучитьСсылку(Идентификатор)
    знч Ключ = {"Ссылка": ИнформационнаяСистемаСсылка}
    Сервисы.УдалитьКоллекцию(Ключ, Тип<ИнформационныеСистемы.Ссылка>)

;

@ВПодсистеме
метод ПолучитьДанныеJson(Ссылка: ИнформационныеСистемы.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Объект?
    если ВерсияФорматаОбмена == Неопределено
        возврат ПолучитьДанныеJson(Ссылка)
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат ПолучитьДанныеJson(Ссылка)
    ;
;

метод ПолучитьДанныеJson(Ссылка: ИнформационныеСистемы.Ссылка): ДанныеJson
    пер ДанныеJson: ДанныеJson

    знч Запрос = Запрос{
        Выбрать
             Ссылка,
             Наименование,
             Пользователь,
             ОповещатьПриОтсутствииОбмена,
             ДопустимоеВремяОтсутствияОбмена
        Из 
             ИнформационныеСистемы
        Где 
            Ссылка == %Ссылка}
    исп Результат = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        ДанныеJson = новый ДанныеJson(Ссылка.Ид.ВСтроку(), 
            РезультатСтроки[0].Наименование, 
            РезультатСтроки[0].ОповещатьПриОтсутствииОбмена, 
            РезультатСтроки[0].ДопустимоеВремяОтсутствияОбмена)
        если РезультатСтроки[0].Пользователь != Неопределено
            знч ИдПользователя = РезультатСтроки[0].Пользователь.ЗагрузитьОбъект().Ид
            ДанныеJson.userID = новый ПользовательИд(ИдПользователя.Ид.ВСтроку(), ИдПользователя.ИдСписка.ВСтроку())
        ;
        ДанныеJson.state = СостояниеJson.active
    иначе
        выбросить новый ИсключениеОбъектНеНайден("Объект по ссылке %{Ссылка.Ид.ВСтроку()} не найден", Ссылка)
    ;
    возврат ДанныеJson
;

//КонецОбласти

//Область СлужебныйПрограммныйИнтерфейс

@ВПроекте
перечисление СостоянияАктивности
    Активна умолчание
    Неактивна
;

@ВПроекте
структура ДанныеИнформационнойСистемы
    пер Наименование: Строка
    пер ИдПользователя: ИдПользователя?
    пер ОповещатьПриОтсутствииОбмена: Булево
    пер ДопустимоеВремяОтсутствияОбмена: Число
    пер Активность: СостоянияАктивности
    пер ВидПриложения: ВидПриложения?
;

@ВПроекте
исключение ИсключениеОбъектНеНайден
    обз пер Ссылка: ИнформационныеСистемы.Ссылка 
;

@ВПроекте
исключение ИсключениеПользовательИнформационнойСистемыНеНайден
    обз пер ИдПользователя: ИдПользователя
;

@ВПроекте
метод СоздатьИнформационнуюСистему(ДанныеИнформационнойСистемы: ДанныеИнформационнойСистемы): ИнформационныеСистемы.Объект

    исп Транзакции.Начать() 
    знч Элемент: ИнформационныеСистемы.Объект = новый ИнформационныеСистемы.Объект()
    Элемент.Наименование = ДанныеИнформационнойСистемы.Наименование
    
    попытка
        исп КонтекстДоступа.Привилегированный()
        Элемент.Пользователь = ДанныеИнформационнойСистемы.ИдПользователя == Неопределено 
            ? Неопределено : Пользователи.Найти(ДанныеИнформационнойСистемы.ИдПользователя)! 
    поймать Ошибка: ИсключениеПроверкиТипа
        выбросить новый ИсключениеПользовательИнформационнойСистемыНеНайден(
                "Ошибка при поиске пользователя информационной системы по идентификатору", 
                ДанныеИнформационнойСистемы.ИдПользователя!)        
    ;
    
    Элемент.ОповещатьПриОтсутствииОбмена = ДанныеИнформационнойСистемы.ОповещатьПриОтсутствииОбмена
    Элемент.ДопустимоеВремяОтсутствияОбмена = ДанныеИнформационнойСистемы.ДопустимоеВремяОтсутствияОбмена
    Элемент.ВидПриложения = ДанныеИнформационнойСистемы.ВидПриложения 
    Элемент.Записать()

    возврат Элемент
;

метод ДанныеИнформационнойСистемы(ИнформационнаяСистема: ИнформационныеСистемы.Ссылка): ДанныеИнформационнойСистемы
    знч Элемент = ИнформационнаяСистема.ЗагрузитьОбъект()
    если Элемент == Неопределено
        выбросить новый ИсключениеОбъектНеНайден(
            "Объект по ссылке %{ИнформационнаяСистема.Ид.ВСтроку()} не найден", ИнформационнаяСистема)
    ;
    возврат ДанныеИнформационнойСистемы(Элемент!)
;

@ВПроекте
метод ДанныеИнформационныхСистем(СостояниеФильтр: СостоянияАктивности? = Неопределено): ЧитаемоеСоответствие<ИнформационныеСистемы.Ссылка, ДанныеИнформационнойСистемы>
    
    знч ИнформационныеСистемы: Соответствие<ИнформационныеСистемы.Ссылка, ДанныеИнформационнойСистемы>
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Наименование,
            Пользователь,
            ОповещатьПриОтсутствииОбмена,
            ДопустимоеВремяОтсутствияОбмена,
            ВидПриложения
        Из 
            ИнформационныеСистемы}
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        пер Заполнение = ДанныеИнформационнойСистемы(
            РезультатСтрока.Наименование,
            РезультатСтрока.Пользователь,
            РезультатСтрока.ОповещатьПриОтсутствииОбмена,
            РезультатСтрока.ДопустимоеВремяОтсутствияОбмена,
            РезультатСтрока.ВидПриложения)
            
        если СостояниеФильтр == Неопределено или СостояниеФильтр == Заполнение.Активность
            ИнформационныеСистемы.Вставить(РезультатСтрока.Ссылка, Заполнение)
        ;
    ;
    возврат ИнформационныеСистемы
;

метод ДанныеИнформационнойСистемы(Элемент: ИнформационныеСистемы.Объект): ДанныеИнформационнойСистемы
    возврат ДанныеИнформационнойСистемы(
        Элемент.Наименование,
        Элемент.Пользователь,
        Элемент.ОповещатьПриОтсутствииОбмена,
        Элемент.ДопустимоеВремяОтсутствияОбмена,
        Элемент.ВидПриложения)
;

метод ДанныеИнформационнойСистемы(Наименование: Строка, Пользователь: Пользователи.Ссылка?, ОповещатьПриОтсутствииОбмена: Булево, ДопустимоеВремяОтсутствияОбмена: Число, ВидПриложения: ВидПриложения?): ДанныеИнформационнойСистемы
    знч ДанныеИнформационнойСистемы: ДанныеИнформационнойСистемы
    ДанныеИнформационнойСистемы.Наименование = Наименование
    /*если Пользователь != Неопределено
        ДанныеИнформационнойСистемы.ИдПользователя = Пользователь!.ЗагрузитьОбъект()!.Ид
    ;*/
    ДанныеИнформационнойСистемы.ОповещатьПриОтсутствииОбмена = ОповещатьПриОтсутствииОбмена
    ДанныеИнформационнойСистемы.ДопустимоеВремяОтсутствияОбмена = ДопустимоеВремяОтсутствияОбмена
    ДанныеИнформационнойСистемы.ВидПриложения = ВидПриложения
    возврат ДанныеИнформационнойСистемы
;

@ВПроекте
метод ИнформационнаяСистемаПользователя(Пользователь: Пользователи.Ссылка): ИнформационныеСистемы.Ссылка?
    возврат Найти("Пользователь", Пользователь)
;

метод Найти(ПолеПоиска: Строка, Значение: неизвестно): ИнформационныеСистемы.Ссылка?
    знч Запрос = новый ПроизвольныйЗапрос() // текст запроса динамический
    Запрос.УстановитьПараметр("ПолеПоиска", Значение)
    Запрос.Текст =
        "Выбрать Первые 1
            Ссылка
         Из
            ИнформационныеСистемы
         Где
            %ПолеПоиска == &ПолеПоиска"
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        возврат РезультатСтрока.Ссылка
    ;    
             
    возврат Неопределено
;

@ВПроекте
метод НастройкиСистем(ИнформационныеСистемыФильтр: Массив<ИнформационныеСистемы.Ссылка>): Соответствие<ИнформационныеСистемы.Ссылка, ОбменДанными.НастройкиИнформационнойСистемы>
    пер НастройкиСистем = новый Соответствие<ИнформационныеСистемы.Ссылка, ОбменДанными.НастройкиИнформационнойСистемы>()
    пер ДанныеИнформационныхСистем = ДанныеИнформационныхСистем()
    для ИнформационнаяСистема из ИнформационныеСистемыФильтр
        пер ДанныеИнформационнойСистемы = ДанныеИнформационныхСистем.Получить(ИнформационнаяСистема)
        пер Настройки = новый ОбменДанными.НастройкиИнформационнойСистемы()
        НастройкиСистем.Вставить(ИнформационнаяСистема, Настройки)
        Настройки.ОповещатьПриОтсутствииОбмена = ДанныеИнформационнойСистемы.ОповещатьПриОтсутствииОбмена
        Настройки.ДопустимоеВремяОтсутствияОбмена = ДанныеИнформационнойСистемы.ДопустимоеВремяОтсутствияОбмена
    ;
    возврат НастройкиСистем
;

@ВПроекте
метод ВсеИнформационныеСистемы(): ЧитаемыйМассив<ИнформационныеСистемы.Ссылка>
    
    пер ВсеИнформационныеСистемы: Массив<ИнформационныеСистемы.Ссылка>
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка
        Из
            ИнформационныеСистемы
    }    
    исп РезультатЗапроса = Запрос.Выполнить()
    для СтрокаРезультата из РезультатЗапроса
        ВсеИнформационныеСистемы.Добавить(СтрокаРезультата.Ссылка)    
    ;
    
    возврат ВсеИнформационныеСистемы
;

@ВПроекте
@ИменованныеПараметры
метод Все(Кроме: Обходимое<ВидПриложения>): Множество<ИнформационныеСистемы.Ссылка>
    знч ИнформационныеСистемы: Множество<ИнформационныеСистемы.Ссылка>
    знч Запрос = Запрос{
        Выбрать
            Ссылка
        Из
            ИнформационныеСистемы
        Где
            ВидПриложения Не В (%Кроме)
    } 
    для СтрокаРезультата из Запрос.Выполнить()
        ИнформационныеСистемы.Добавить(СтрокаРезультата.Ссылка)     
    ; 
    возврат ИнформационныеСистемы   
;

@ВПроекте
@ИменованныеПараметры
метод Все(Кроме: ВидПриложения): Множество<ИнформационныеСистемы.Ссылка>
    возврат Все(Кроме = [Кроме]) 
;

@ВПодсистеме
метод ВидПриложения(ИнформационнаяСистема: ИнформационныеСистемы.Ссылка): ВидПриложения?
    знч Запрос = Запрос{
        Выбрать
            ВидПриложения
        Из
            ИнформационныеСистемы
        Где
            Ссылка == %ИнформационнаяСистема
    }
    
    исп Результат = Запрос.Выполнить()
    возврат Результат.ПервыйИлиУмолчание()?.ВидПриложения
;

//КонецОбласти

//Область СлужебныеПроцедурыИФункции

метод ИдентификаторКлиентаДляПользователя(Состояние: СостоянияАктивности, ИдКлиента: Строка): Строка
    возврат Состояние == СостоянияАктивности.Активна ? ИдКлиента : ""
;

@ВПодсистеме
метод ЗаполнениеПолучаемыхРесурсов()
    знч Запрос = Запрос{
                Выбрать 
                    ИнформационныеСистемы.Ссылка
                Из 
                    ИнформационныеСистемы как ИнформационныеСистемы
                }
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        пер ИнформационнаяСистема = РезультатСтрока.Ссылка.ЗагрузитьОбъект()
        ИнформационнаяСистема.ВидПриложения = ВидПриложения.Hrm
        ИнформационнаяСистема.Записать()
    ;
;

//КонецОбласти
