импорт ВебApi

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат ОбменДаннымиПоставщикОграничений.ПолучитьСервис().СоответствиеИдентификаторовОбъектовРазрешенияДоступа()
;

//КонецОбласти

//Область СлужебныйПрограммныйИнтерфейс

@ВПодсистеме
метод УстановитьБлокировкуНаВнешниеИдентификаторы(ВнешниеИдентификаторы: ЧитаемаяКоллекция<Строка>)
    знч БлокировкиИдентификаторов: Массив<СоответствиеИдентификаторовОбъектов.Блокировки.ИдентификаторВнешнегоОбъекта>
    для Идентификатор из ВнешниеИдентификаторы
        БлокировкиИдентификаторов.Добавить(
            новый СоответствиеИдентификаторовОбъектов.Блокировки.ИдентификаторВнешнегоОбъекта(
                РежимБлокировки = РежимБлокировки.Исключительный,
                ИдентификаторВнешнегоОбъекта = Идентификатор
            ))
    ;
    Блокировки.Заблокировать(БлокировкиИдентификаторов)
;

@ВПодсистеме
метод ИдентификаторыЛокальныхОбъектов(ВнешниеИдентификаторы: ЧитаемаяКоллекция<Строка>, ТипОбъекта: Тип?): ЧитаемоеСоответствие<Строка, ВходящиеДанные.Ссылка>
    знч Запрос = Запрос{
        Выбрать
            ИдентификаторЛокальногоОбъекта,
            ИдентификаторВнешнегоОбъекта
         Из
            СоответствиеИдентификаторовОбъектов
         Где
            ИдентификаторВнешнегоОбъекта В (%ВнешниеИдентификаторы)}
    исп Результат = Запрос.Выполнить() 
    знч ЛокальныеИдентификаторы: Соответствие<Строка, ВходящиеДанные.Ссылка>
    для РезультатСтрока из Результат
        если ТипОбъекта!= Неопределено и РезультатСтрока.ИдентификаторЛокальногоОбъекта.ПолучитьТип() != ТипОбъекта
            продолжить
        ;
        ЛокальныеИдентификаторы.Вставить(РезультатСтрока.ИдентификаторВнешнегоОбъекта, РезультатСтрока.ИдентификаторЛокальногоОбъекта)
    ;
    возврат ЛокальныеИдентификаторы
;

@ВПодсистеме
метод ЗаписатьСоответствиеИдентификаторов(ВнутренняяСсылка: неизвестно, ВнешнийИдентификатор: Строка, ОбъектСуществует: Булево)
    пер ЭлементСправочника = новый СоответствиеИдентификаторовОбъектов.Объект()
    ЭлементСправочника.ИдентификаторЛокальногоОбъекта = ВнутренняяСсылка 
    ЭлементСправочника.ИдентификаторВнешнегоОбъекта = ВнешнийИдентификатор
    ЭлементСправочника.ЛокальныйОбъектСуществует = ОбъектСуществует
    ЭлементСправочника.Записать()
;

@ВПодсистеме
метод ОбновитьИдентификаторыЛокальныхОбъектов(Документ: ИсходящиеДанные.Ссылка)
    знч ДокументЛюбогоТипа: неизвестно = Документ
    знч Запрос = Запрос{
        Выбрать Первые 1
            Ссылка
        Из
            СоответствиеИдентификаторовОбъектов
        Где
            ИдентификаторЛокальногоОбъекта == %ДокументЛюбогоТипа}
    исп Результат = Запрос.Выполнить() 
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        возврат
    ;
    ЗаписатьСоответствиеИдентификаторов(ДокументЛюбогоТипа, ДокументЛюбогоТипа.Ид.ВСтроку(), Истина)
;

@ВПодсистеме
метод ОбновитьСоответствиеИдентификаторов(ВнутренняяСсылка: неизвестно, ВнешнийИдентификатор: Строка, ОбъектСуществует: Булево)
    знч Запрос = Запрос{
        Выбрать Первые 1
            Ссылка,
            ЛокальныйОбъектСуществует
         Из
            СоответствиеИдентификаторовОбъектов
         Где
            ИдентификаторВнешнегоОбъекта == %ВнешнийИдентификатор}
    исп Результат = Запрос.Выполнить() 
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если РезультатСтроки.Пусто()
        ЗаписатьСоответствиеИдентификаторов(ВнутренняяСсылка, ВнешнийИдентификатор, ОбъектСуществует)
        возврат
    ;
    если РезультатСтроки[0].ЛокальныйОбъектСуществует != ОбъектСуществует
        знч ЭлементСправочника = РезультатСтроки[0].Ссылка.ЗагрузитьОбъект()
        ЭлементСправочника.ИдентификаторЛокальногоОбъекта = ВнутренняяСсылка
        ЭлементСправочника.ЛокальныйОбъектСуществует = ОбъектСуществует
        ЭлементСправочника.Записать()
    ;
;

@ВПодсистеме
метод ВнешниеИдентификаторыПоВнутреннимСсылкам(ВнутренниеСсылки: ЧитаемаяКоллекция<ВходящиеДанные.Ссылка>): ЧитаемоеСоответствие<ВходящиеДанные.Ссылка, Строка>
    знч Запрос = Запрос{
        Выбрать
            ИдентификаторЛокальногоОбъекта,
            ИдентификаторВнешнегоОбъекта
         Из
            СоответствиеИдентификаторовОбъектов
         Где
            ИдентификаторЛокальногоОбъекта В (%ВнутренниеСсылки)}
    исп Результат = Запрос.Выполнить() 
    знч ЛокальныеИдентификаторы: Соответствие<ВходящиеДанные.Ссылка, Строка>
    для РезультатСтрока из Результат
        ЛокальныеИдентификаторы.Вставить(РезультатСтрока.ИдентификаторЛокальногоОбъекта, РезультатСтрока.ИдентификаторВнешнегоОбъекта)
    ;
    возврат ЛокальныеИдентификаторы
;

@ВПодсистеме
метод ОбработчикЗаполненияЛокальныхИдентификаторов()
    знч Запрос = Запрос{
        Выбрать 
            ИдентификаторыЛокальныхОбъектов.Документ,
            ИдентификаторыЛокальныхОбъектов.Ид
        Из
            ИдентификаторыЛокальныхОбъектов Как ИдентификаторыЛокальныхОбъектов
            Левое Соединение СоответствиеИдентификаторовОбъектов Как СоответствиеИдентификаторовОбъектов
                По ИдентификаторыЛокальныхОбъектов.Документ == СоответствиеИдентификаторовОбъектов.ИдентификаторЛокальногоОбъекта
        Где
            СоответствиеИдентификаторовОбъектов.ИдентификаторЛокальногоОбъекта Есть Null
        }
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        ЗаписатьСоответствиеИдентификаторов(РезультатСтрока.Документ, РезультатСтрока.Ид, Истина)
    ;
;

//КонецОбласти