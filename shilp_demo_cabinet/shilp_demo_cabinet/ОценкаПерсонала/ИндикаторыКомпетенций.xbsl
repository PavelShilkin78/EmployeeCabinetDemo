импорт ВебApi
импорт ОбменДанными
импорт ОбщиеСтандартные

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат ОценкаПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаКомпетенций()
;

//КонецОбласти

// JSON

@ВПодсистеме
метод ТипОбъектаJson(): Строка
    возврат "competenceIndicators"
;

@ВПроекте
структура ИндикаторКомпетенции_2_0
    @JsonСвойство("ID")
    обз знч Ид: Строка
    @JsonСвойство("name")
    обз знч Наименование: Строка
    @JsonСвойство("competence")
    обз знч Компетенция: Строка?
    @JsonСвойство("expectedWeight")
    обз знч ОжидаемыйВес: Число?
    @JsonСвойство("expectedAssessment")
    обз знч ОжидаемаяОценка: Число?
    @JsonСвойство("assessmentSkillsQualityType")
    обз знч КачествоКомпетенции: ОценкаПерсонала.КачествоКомпетенцииJson?
    @JsonСвойство("indicatorDescription")
    обз знч ОписаниеИндикатора: Строка?
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{2.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<ИндикаторКомпетенции_2_0>
    ;
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ИндикаторКомпетенции_2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать()
    пер ИндикаторКомпетенции: ИндикаторыКомпетенций.Объект?
        = Сервисы.ПрочитатьОбъект(ДанныеJson.Ид, &ИндикаторыКомпетенций.Объект.новый(Ууид), Тип<ИндикаторыКомпетенций.Ссылка>) как ИндикаторыКомпетенций.Объект     
    ИндикаторКомпетенции.Наименование = ДанныеJson.Наименование
    ИндикаторКомпетенции.ОжидаемыйВес = ДанныеJson.ОжидаемыйВес ?? 0
    ИндикаторКомпетенции.ОжидаемаяОценка = ДанныеJson.ОжидаемаяОценка ?? 0
    ИндикаторКомпетенции.ОписаниеИндикатора = ДанныеJson.ОписаниеИндикатора ?? ""
    если ДанныеJson.КачествоКомпетенции != Неопределено
        ИндикаторКомпетенции.КачествоКомпетенции = ОценкаПерсонала.КачествоКомпетенцииИзJson(ДанныеJson.КачествоКомпетенции)
    ;
    ИндикаторКомпетенции.Компетенция = 
        Сервисы.ПолучитьСсылку(Компетенции.ВнешняяСсылка(ДанныеJson.Компетенция)) как Компетенции.Ссылка
    Сервисы.ЗаписатьОбъект(
        новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ИндикаторКомпетенции, ДанныеJson.Ид), 
        Сервисы.ИнструментыМенеджераОбъекта
    )    
;

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> ИндикаторыКомпетенций.ПолучитьСсылку(Ууид))
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"competenceIndicators": ИндикаторыКомпетенцийВJson(Ссылки, Сервисы)}
;

метод ИндикаторыКомпетенцийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ИндикаторыКомпетенций(Ссылки)
        Данные.Добавить(ИндикаторыКомпетенцийВJson_V2_0(КлючИЗначение.Значение, Сервисы))
    ;
    возврат Данные
;

метод ИндикаторыКомпетенций(ИндикаторыКомпетенцийСсылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<ИндикаторыКомпетенций.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Данные: Соответствие<ИндикаторыКомпетенций.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>> 
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Наименование,
            Компетенция,
            ОжидаемыйВес,
            ОжидаемаяОценка,
            КачествоКомпетенции,
            ОписаниеИндикатора
        Из
            ИндикаторыКомпетенций
        Где
            Ссылка В (%ИндикаторыКомпетенцийСсылки)        
    }
    исп Результат = Запрос.Выполнить() 
    для СтрокаРезультата из Результат
        Данные.Вставить(
            СтрокаРезультата.Ссылка,
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(СтрокаРезультата, Результат)
        )
    ;
    возврат Данные    
;

метод ИндикаторыКомпетенцийВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ИндикаторКомпетенции_2_0
    пер КачествоКомпетенции: ОценкаПерсонала.КачествоКомпетенцииJson? = 
        ОценкаПерсонала.КачествоКомпетенцииВJson(
            ДанныеОбъекта["КачествоКомпетенции"] как КачествоКомпетенции?
        )
    пер ДанныеJson = новый ИндикаторКомпетенции_2_0(
        (ДанныеОбъекта["Ссылка"] как ИндикаторыКомпетенций.Ссылка).Ид.ВСтроку(),
        ДанныеОбъекта["Наименование"] как Строка,
        (ДанныеОбъекта["Компетенция"] как Компетенции.Ссылка?)?.Ид.ВСтроку() ?? "",
        ДанныеОбъекта["ОжидаемыйВес"] как Число,
        ДанныеОбъекта["ОжидаемаяОценка"] как Число,
        КачествоКомпетенции,
        ДанныеОбъекта["ОписаниеИндикатора"] как Строка
    )
    возврат ДанныеJson        
;

@ВПодсистеме
метод УдалитьОбъекты(ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>, Сервисы: ВебApiСервер.СервисыУдаленияОбъектов)
    исп Транзакции.Начать()
    знч Идентификатор = новый Ууид(ПараметрыЗапроса["ID"] как Строка)
    знч ИндикаторыКомпетенцийСсылка = ИндикаторыКомпетенций.ПолучитьСсылку(Идентификатор)
    знч Ключ = {"Ссылка": ИндикаторыКомпетенцийСсылка}
    Сервисы.УдалитьКоллекцию(Ключ, Тип<ИндикаторыКомпетенций.Ссылка>)
;

// Конец JSON

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: ИндикаторыКомпетенций.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Ссылка, Истина)
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, Неопределено, ХарактерыИзменений.Изменение)
    ;
;

@ВПодсистеме
метод ПослеУдаленияДополнение(Ссылка: ИндикаторыКомпетенций.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьУдаление(Ссылка)
    ;
;

@ВПроекте
метод ВесаИндикаторовКомпетенций(Компетенции: Массив<Компетенции.Ссылка>): Соответствие<Компетенции.Ссылка, Соответствие<ИндикаторыКомпетенций.Ссылка, Число>>
    знч ВесаИндикаторов: Соответствие<Компетенции.Ссылка, Соответствие<ИндикаторыКомпетенций.Ссылка, Число>>
    пер Запрос = Запрос{
        ВЫБРАТЬ
            Компетенция,
            Ссылка Как Индикатор,
            ОжидаемыйВес Как Вес
        ИЗ
            ИндикаторыКомпетенций
        Где Компетенция В(%Компетенции)
    }
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        пер СведенияОКомпетенции = ВесаИндикаторов.ПолучитьИлиУмолчание(СтрокаРезультата.Компетенция)
        если СведенияОКомпетенции == Неопределено
            СведенияОКомпетенции = новый Соответствие<ИндикаторыКомпетенций.Ссылка, Число>()
            ВесаИндикаторов.Вставить(СтрокаРезультата.Компетенция, СведенияОКомпетенции)
        ;
        СведенияОКомпетенции.Вставить(СтрокаРезультата.Индикатор, СтрокаРезультата.Вес)
    ;
    возврат ВесаИндикаторов
;
