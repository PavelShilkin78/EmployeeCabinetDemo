импорт ИнтерфейсныеКомпонентыСтандартные
импорт ФизическиеЛица
импорт Компания
импорт ОбщиеСтандартные
импорт СтандартноеПриложение

@ВПроекте
@НаКлиенте @НаСервере
структура КадроваяИнформация
    пер МестоВСтруктуреПредприятия: СтруктураПредприятия.Ссылка?
    пер Должность: Должности.Ссылка?
;

@Обработчик
метод ПослеСоздания()
    ИнтерфейсныеКомпоненты.ИнициализироватьПодчиненныеКомпоненты(Компоненты)
;

@Обработчик
метод ПослеЧтения()
    если ЭтоНовый() и ДанныеЭкземпляраОценки != Неопределено
        Объект.Оцениваемый = ДанныеЭкземпляраОценки.Оцениваемый
        Объект.Оценивающий = ДанныеЭкземпляраОценки.Оценивающий
        Объект.Статус = ДанныеЭкземпляраОценки.Статус
        Объект.ШкалаОценки = ДанныеЭкземпляраОценки.ШкалаОценки
        Объект.Компетенции.ДобавитьВсе(ДанныеЭкземпляраОценки.Компетенции)
        Объект.Комментарий = ДанныеЭкземпляраОценки.Комментарий
    ;
    ЗаполнитьКадровуюИнформацию()
    ШкалаОценкиТипОтображения = Объект.ШкалаОценки == Неопределено ?
        ТипОтображенияШкалыОценок.Звезды :
        МенеджерСущности.ЗначениеРеквизитаОбъекта(
            Объект.ШкалаОценки, 
            "ТипОтображения"
        )
    ОценкаПоИндикаторам = Объект.Компетенции.Размер() > Объект.Компетенции.Фильтровать((Элемент)->Элемент.Индикатор==Неопределено).Размер()
;

метод КомпетенцияШрифт(ДанныеСтроки: КомпетенцииЭкземпляраОценкиПоМетоду360): СтилевойШрифт
    возврат ДанныеСтроки.Индикатор == Неопределено ? СтилевыеШрифты.ЗаголовокМелкий : СтилевыеШрифты.Обычный
;

метод ОценкаВыборомИзСпискаВидимость(): Булево
    возврат 
        не ОсновнойИнтерфейс.РаботаНаУзкомУстройстве()
        и ШкалаОценкиТипОтображения == ТипОтображенияШкалыОценок.ВыпадающийСписок
;

метод ОценкаЗвездамиВидимость(): Булево
    возврат 
        не ОсновнойИнтерфейс.РаботаНаУзкомУстройстве() 
        и ШкалаОценкиТипОтображения == ТипОтображенияШкалыОценок.Звезды
;

метод ОцениваемаяСтрока(ДанныеСтроки: КомпетенцииЭкземпляраОценкиПоМетоду360): Булево
    возврат ДанныеСтроки.Индикатор != Неопределено или не ОценкаПоИндикаторам
;

метод ТолькоЧтение(): Булево
    возврат РежимПросмотра или Объект.Статус != СостояниеОценкиПерсонала.Запущена
;

метод Заголовок(): Строка
    возврат РежимПросмотра ? "Оценивает ": "Оценивается "
;

метод ЗаголовокаФизическоеЛицо(): Строка
    возврат РежимПросмотра ? Объект.Оценивающий.Представление() : Объект.Оцениваемый.Представление()
;

метод НадписьДолжность(): Строка
    возврат РежимПросмотра ? КадроваяИнформацияОценивающего.Должность.Представление() : КадроваяИнформацияОцениваемого.Должность.Представление()
;

метод НадписьМестоВСтруктуреПредприятия(): Строка
    возврат РежимПросмотра ? КадроваяИнформацияОценивающего.МестоВСтруктуреПредприятия.Представление() : КадроваяИнформацияОцениваемого.МестоВСтруктуреПредприятия.Представление()
;

метод ЗаполнитьКадровуюИнформацию()
    знч КадроваяИнформация: КадроваяИнформация = 
        КадроваяИнформацияФизическогоЛица(
            РежимПросмотра ? Объект.Оценивающий : Объект.Оцениваемый
        )
    если РежимПросмотра
        КадроваяИнформацияОценивающего = КадроваяИнформация
    иначе
        КадроваяИнформацияОцениваемого = КадроваяИнформация
    ;
    
;

метод ДобавитьПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    Объект.Компетенции.Добавить(новый КомпетенцииЭкземпляраОценкиПоМетоду360())
;

метод УдалитьСтроку(Команда: КомандаСПараметром<Массив<Объект?>>, Параметр: Массив<Объект?>)
    для ТекущаяСтрока из Параметр
        Объект.Компетенции.Удалить(ТекущаяСтрока! как КомпетенцииЭкземпляраОценкиПоМетоду360)            
    ;
;

метод КомпетенцияОтступПоГоризонтали(ДанныеСтроки: КомпетенцииЭкземпляраОценкиПоМетоду360): РазмерОтступа | Авто
    пер Компетенция = ДанныеСтроки.Индикатор == Неопределено
                        ? ДанныеСтроки.Компетенция : ДанныеСтроки.Индикатор 
    возврат ОценкаПерсонала.ОтступПоУровнюБиблиотекиКомпетенций(Компетенция)
;

метод КомпетенцияПредставление(ДанныеСтроки: КомпетенцииЭкземпляраОценкиПоМетоду360): Строка
    возврат ДанныеСтроки.Индикатор == Неопределено
                    ? ДанныеСтроки.Компетенция.Представление() : ДанныеСтроки.Индикатор.Представление()
;

метод ПанельОсновнаяЗаписатьИЗакрыть(Источник: КоманднаяПанельФорм, Событие: СобытиеКомпонента)
    если не ПроверкаЗаполнения()
        возврат
    ;
    знч Ответ = Диалог.Вопрос("Завершить оценку?", {КнопкаДиалога.Да, КнопкаДиалога.Нет}, "Предупреждение")
    выбор Ответ
    когда КнопкаДиалога.Да
        Объект.Статус = СостояниеОценкиПерсонала.Завершена
        Записать()
    когда КнопкаДиалога.Нет
        Прочитать()
    иначе
        возврат
    ;    
;

метод ПанельОсновнаяСохранитьЧерновик(Источник: КоманднаяПанельФорм, Событие: СобытиеКомпонента)
    Записать()
;

метод ПанельОсновнаяОтменить(Источник: КоманднаяПанельФорм, Событие: СобытиеКомпонента)
    Закрыть()
;
 
метод ПроверкаЗаполнения(): Булево
    пер Результат = Истина
    если ЕстьНепроставленныеОценки()
        Результат = Ложь
        СообщениеОбОшибке = "При указании оценок не по всем пунктам необходимо заполнить комментарий"
    ;    
    возврат Результат
;

метод ПолеКомментарийКоннотация(): РезультатПроверкиДанных
    возврат (СообщениеОбОшибке.Пусто() ? РезультатПроверкиДанных.Отсутствует : РезультатПроверкиДанных.Ошибка)
;

метод ЕстьНепроставленныеОценки(): Булево
    если Объект.Комментарий.Пусто() 
        для Строка из Объект.Компетенции
            если Строка.Оценка == 0 и ОцениваемаяСтрока(Строка)
                возврат Истина
            ;
        ;
    ;
    возврат Ложь
;

@НаСервере @ДоступноСКлиента
статический метод КадроваяИнформацияФизическогоЛица(ФизическоеЛицо: ФизическиеЛица.Ссылка): КадроваяИнформация
    пер КадроваяИнформация: КадроваяИнформация
    знч Сотрудники: ЧитаемыйМассив<Сотрудники.СотрудникСПриоритетом> = 
        Сотрудники.СотрудникиФизическогоЛицаОрганизации(ФизическоеЛицо)
    если не Сотрудники.Пусто()
        КадроваяИнформация = новый КадроваяИнформация(
            Сотрудники[0].МестоВСтруктуреПредприятия,
            Сотрудники[0].Должность
        )
    ;     
    возврат КадроваяИнформация
;

@ВПроекте
@Реализация
метод Инициализировать()
    ИнтерфейсныеКомпоненты.ИнициализироватьПодчиненныеКомпоненты(Компоненты)
;