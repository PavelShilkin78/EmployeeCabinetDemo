импорт ВебApi
импорт ОбменДанными
импорт ОбщиеСтандартные

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат ОценкаПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаКомпетенций()
;

//КонецОбласти

// JSON

@ВПодсистеме
метод ТипОбъектаJson(): Строка
    возврат "competencies"
;

@ВПроекте
структура Компетенция_2_0
    @JsonСвойство("ID")
    обз знч Ид: Строка
    @JsonСвойство("name")
    обз знч Наименование: Строка
    @JsonСвойство("competenceLibrary")
    обз знч БиблиотекаКомпетенций: Строка?
    @JsonСвойство("expectedWeight")
    обз знч ОжидаемыйВес: Число?
    @JsonСвойство("expectedAssessment")
    обз знч ОжидаемаяОценка: Число?
    @JsonСвойство("assessmentSkillsQualityType")
    обз знч КачествоКомпетенции: ОценкаПерсонала.КачествоКомпетенцииJson?
    @JsonСвойство("competenceDescription")
    обз знч ОписаниеКомпетенции: Строка?
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{2.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<Компетенция_2_0>
    ;
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: Компетенция_2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать()
    пер Компетенция: Компетенции.Объект?
        = Сервисы.ПрочитатьОбъект(ДанныеJson.Ид, &Компетенции.Объект.новый(Ууид), Тип<Компетенции.Ссылка>) как Компетенции.Объект  
    Компетенция.Наименование = ДанныеJson.Наименование
    Компетенция.ОжидаемыйВес = ДанныеJson.ОжидаемыйВес ?? 0
    Компетенция.ОжидаемаяОценка = ДанныеJson.ОжидаемаяОценка ?? 0
    Компетенция.ОписаниеКомпетенции = ДанныеJson.ОписаниеКомпетенции ?? ""
    если ДанныеJson.КачествоКомпетенции != Неопределено
        Компетенция.КачествоКомпетенции = ОценкаПерсонала.КачествоКомпетенцииИзJson(ДанныеJson.КачествоКомпетенции)
    ;
    Компетенция.БиблиотекаКомпетенций = 
        Сервисы.ПолучитьСсылку(БиблиотекиКомпетенций.ВнешняяСсылка(ДанныеJson.БиблиотекаКомпетенций)) как БиблиотекиКомпетенций.Ссылка
    Сервисы.ЗаписатьОбъект(
        новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(Компетенция, ДанныеJson.Ид), 
        Сервисы.ИнструментыМенеджераОбъекта
    ) 
;

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> Компетенции.ПолучитьСсылку(Ууид))
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"competencies": КомпетенцииВJson(Ссылки, Сервисы)}
;

метод КомпетенцииВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из Компетенции(Ссылки)
        Данные.Добавить(КомпетенцииВJson_V2_0(КлючИЗначение.Значение, Сервисы))
    ;
    возврат Данные
;

метод Компетенции(КомпетенцииСсылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<Компетенции.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Данные: Соответствие<Компетенции.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>> 
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Наименование,
            БиблиотекаКомпетенций,
            ОжидаемыйВес,
            ОжидаемаяОценка,
            КачествоКомпетенции,
            ОписаниеКомпетенции
        Из
            Компетенции
        Где
            Ссылка В (%КомпетенцииСсылки)        
    }
    исп Результат = Запрос.Выполнить() 
    для СтрокаРезультата из Результат
        Данные.Вставить(
            СтрокаРезультата.Ссылка,
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(СтрокаРезультата, Результат)
        )
    ;
    
    возврат Данные    
;

метод КомпетенцииВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Компетенция_2_0
    пер КачествоКомпетенции: ОценкаПерсонала.КачествоКомпетенцииJson? = 
        ОценкаПерсонала.КачествоКомпетенцииВJson(
            ДанныеОбъекта["КачествоКомпетенции"] как КачествоКомпетенции?
        )
    пер ДанныеJson = новый Компетенция_2_0(
        (ДанныеОбъекта["Ссылка"] как Компетенции.Ссылка).Ид.ВСтроку(),
        ДанныеОбъекта["Наименование"] как Строка,
        (ДанныеОбъекта["БиблиотекаКомпетенций"] как БиблиотекиКомпетенций.Ссылка?)?.Ид.ВСтроку() ?? "",
        ДанныеОбъекта["ОжидаемыйВес"] как Число,
        ДанныеОбъекта["ОжидаемаяОценка"] как Число,
        КачествоКомпетенции,
        ДанныеОбъекта["ОписаниеКомпетенции"] как Строка
    )
    возврат ДанныеJson        
;

@ВПодсистеме
метод УдалитьОбъекты(ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>, Сервисы: ВебApiСервер.СервисыУдаленияОбъектов)
    исп Транзакции.Начать()
    знч Идентификатор = новый Ууид(ПараметрыЗапроса["ID"] как Строка)
    знч КомпетенцииСсылка = Компетенции.ПолучитьСсылку(Идентификатор)
    знч Ключ = {"Ссылка": КомпетенцииСсылка}
    Сервисы.УдалитьКоллекцию(Ключ, Тип<Компетенции.Ссылка>)
;

// Конец JSON

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: Компетенции.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Ссылка, Истина)
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, Неопределено, ХарактерыИзменений.Изменение)
    ;
;

@ВПодсистеме
метод ПослеУдаленияДополнение(Ссылка: Компетенции.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьУдаление(Ссылка)
    ;
;