импорт ВебApi
импорт КонтрольДоступа
импорт ОбменДанными
импорт ОбщиеСтандартные
импорт ФизическиеЛица

//КонтрольДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат КонтрольДоступа.РазрешенияДоступаТаблицыБезПраваУдаления()
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Объекты: ЧитаемыйМассив<ЭкземплярыОценкиПерсоналаПоМетоду360.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ЭкземплярыОценкиПерсоналаПоМетоду360.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    возврат ОценкаПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаЭкземпляровОценки(Объекты)
;

//КонтрольДоступа

// JSON

@ВПодсистеме
метод ТипОбъектаJson(): Строка
    возврат "instancesOfAssessmentUsingThe360Method"
;

@ВПроекте
структура ЭкземплярОценкиПерсонала_2_0
    @JsonСвойство("ID")
    обз знч Ид: Строка
    @JsonСвойство("date")
    обз знч Дата: ДатаВремя?
    @JsonСвойство("documentNumber")
    обз знч Номер: Строка?
    @JsonСвойство("documentPresentation")
    обз знч ПредставлениеДокумента: Строка?
    @JsonСвойство("comment")
    обз знч Комментарий: Строка?
    @JsonСвойство("assessed")
    обз знч Оцениваемый: Строка?
    @JsonСвойство("assessing")
    обз знч Оценивающий: Строка?
    @JsonСвойство("assessmentStatus")
    обз знч Статус: ОценкаПерсонала.СостояниеОценкиПерсоналаJson?
    @JsonСвойство("assessmentRatingScale")
    обз знч ШкалаОценки: Строка?
    @JsonСвойство("instanceCompetencies")
    обз знч Компетенции: Массив<КомпетенцияЭкземпляраОценки_2_0>?
;

@ВПроекте
структура КомпетенцияЭкземпляраОценки_2_0
    @JsonСвойство("competence")
    обз знч Компетенция: Строка?
    @JsonСвойство("competenceIndicator")
    обз знч Индикатор: Строка?
    @JsonСвойство("rating")
    обз знч Оценка: Число?
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{2.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<ЭкземплярОценкиПерсонала_2_0>
    ;
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ЭкземплярОценкиПерсонала_2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать()
    знч ЭкземплярОценкиПерсоналаПоМетоду360 = Сервисы.ПрочитатьОбъект(ДанныеJson.Ид,
        &ЭкземплярыОценкиПерсоналаПоМетоду360.Объект.новый(Ууид), Тип<ЭкземплярыОценкиПерсоналаПоМетоду360.Ссылка>) как ЭкземплярыОценкиПерсоналаПоМетоду360.Объект
    ЭкземплярОценкиПерсоналаПоМетоду360.Дата = ДанныеJson.Дата
    ЭкземплярОценкиПерсоналаПоМетоду360.ПредставлениеДокумента = ДанныеJson.ПредставлениеДокумента ?? ""
    ЭкземплярОценкиПерсоналаПоМетоду360.Комментарий = ДанныеJson.Комментарий ?? ""
    ЭкземплярОценкиПерсоналаПоМетоду360.Оцениваемый = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.Оцениваемый)) как ФизическиеЛица.Ссылка
    ЭкземплярОценкиПерсоналаПоМетоду360.Оценивающий = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.Оценивающий)) как ФизическиеЛица.Ссылка
    если ДанныеJson.Статус != Неопределено
        ЭкземплярОценкиПерсоналаПоМетоду360.Статус = ОценкаПерсонала.СостояниеОценкиПерсоналаИзJson(ДанныеJson.Статус)
    ;
    пер ШкалаОценкиСсылка: ШкалыОценок.Ссылка? 
    если не ДанныеJson.ШкалаОценки.Пусто()
        ШкалаОценкиСсылка =
            ОбменДанными.ИдентификаторыЛокальныхОбъектов([ДанныеJson.ШкалаОценки])
                            .ПолучитьИлиУмолчание(ДанныеJson.ШкалаОценки) как ШкалыОценок.Ссылка?
    ;
    ЭкземплярОценкиПерсоналаПоМетоду360.ШкалаОценки = ШкалаОценкиСсылка
    если ДанныеJson.Компетенции != Неопределено
        ЭкземплярОценкиПерсоналаПоМетоду360.Компетенции.Очистить()
        для КомпетенцияЭкземпляраОценки из ДанныеJson.Компетенции
            пер КомпетенцияСсылка: Компетенции.Ссылка?
            если не КомпетенцияЭкземпляраОценки.Компетенция.Пусто()
                КомпетенцияСсылка =
                    Сервисы.ПолучитьСсылку(Компетенции.ВнешняяСсылка(КомпетенцияЭкземпляраОценки.Компетенция)) как Компетенции.Ссылка
            ;
            пер ИндикаторКомпетенцииСсылка: ИндикаторыКомпетенций.Ссылка?
            если не КомпетенцияЭкземпляраОценки.Индикатор.Пусто()
                ИндикаторКомпетенцииСсылка =
                    Сервисы.ПолучитьСсылку(ИндикаторыКомпетенций.ВнешняяСсылка(КомпетенцияЭкземпляраОценки.Индикатор)) как ИндикаторыКомпетенций.Ссылка
            ;
            если КомпетенцияСсылка != Неопределено
                ЭкземплярОценкиПерсоналаПоМетоду360.Компетенции.Добавить(
                    новый КомпетенцииЭкземпляраОценкиПоМетоду360(
                        КомпетенцияСсылка,
                        ИндикаторКомпетенцииСсылка,
                        КомпетенцияЭкземпляраОценки.Оценка   
                    )
                )
            ; 
        ;  
    ;
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ЭкземплярОценкиПерсоналаПоМетоду360, ДанныеJson.Ид), Сервисы.ИнструментыМенеджераОбъекта)
;

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> ЭкземплярыОценкиПерсоналаПоМетоду360.ПолучитьСсылку(Ууид))
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"instancesOfAssessmentUsingThe360Method": ЭкземплярыОценкиПерсоналаПоМетоду360ВJson(Ссылки, Сервисы)}
;

метод ЭкземплярыОценкиПерсоналаПоМетоду360ВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ЭкземплярыОценкиПерсоналаПоМетоду360(Ссылки)
        Данные.Добавить(ЭкземплярыОценкиПерсоналаПоМетоду360ВJson_V2_0(КлючИЗначение.Ключ, КлючИЗначение.Значение, Сервисы))
    ;
    ПослеОтправкиДанных(Ссылки)
    возврат Данные
;

метод ЭкземплярыОценкиПерсоналаПоМетоду360(ЭкземплярыОценки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<ЭкземплярыОценкиПерсоналаПоМетоду360.Ссылка, ЧитаемаяКоллекция<КомпетенцииЭкземпляраОценкиПоМетоду360>>
    знч Данные: Соответствие<ЭкземплярыОценкиПерсоналаПоМетоду360.Ссылка, ЧитаемаяКоллекция<КомпетенцииЭкземпляраОценкиПоМетоду360>> 
    для ЭкземплярОценки из ЭкземплярыОценки
        пер ЭкземплярОценкиПерсоналаПоМетоду360Объект = (ЭкземплярОценки как ЭкземплярыОценкиПерсоналаПоМетоду360.Ссылка).ЗагрузитьОбъект(Ложь)
        если ЭкземплярОценкиПерсоналаПоМетоду360Объект != Неопределено 
            Данные.Вставить(
                ЭкземплярОценки как ЭкземплярыОценкиПерсоналаПоМетоду360.Ссылка,
                ЭкземплярОценкиПерсоналаПоМетоду360Объект.Компетенции
            )
        ;
    ;
    возврат Данные    
;

метод ЭкземплярыОценкиПерсоналаПоМетоду360ВJson_V2_0(Ссылка: ЭкземплярыОценкиПерсоналаПоМетоду360.Ссылка, Компетенции: ЧитаемаяКоллекция<КомпетенцииЭкземпляраОценкиПоМетоду360>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЭкземплярОценкиПерсонала_2_0
    знч РеквизитыДокумента = 
    МенеджерСущности.ЗначенияРеквизитовОбъекта(
        Ссылка, 
        ["Ссылка", "Дата", "ПредставлениеДокумента", "Комментарий", "Оцениваемый", "Оценивающий", "ШкалаОценки", "Статус"]
    )
    пер Статус: ОценкаПерсонала.СостояниеОценкиПерсоналаJson? = 
        ОценкаПерсонала.СостояниеОценкиПерсоналаВJson(
            РеквизитыДокумента["Статус"] как СостояниеОценкиПерсонала?
        )
    пер ШкалаОценки = РеквизитыДокумента["ШкалаОценки"] как ШкалыОценок.Ссылка?
    пер ДанныеJson = новый ЭкземплярОценкиПерсонала_2_0(
        Ссылка.Ид.ВСтроку(),
        РеквизитыДокумента["Дата"] как ДатаВремя?, 
        "", 
        РеквизитыДокумента["ПредставлениеДокумента"] как Строка?, 
        РеквизитыДокумента["Комментарий"] как Строка?,
        Сервисы.ПолучитьИдентификатор(РеквизитыДокумента["Оцениваемый"] как ФизическиеЛица.Ссылка), 
        Сервисы.ПолучитьИдентификатор(РеквизитыДокумента["Оценивающий"] как ФизическиеЛица.Ссылка),
        Статус,
        ШкалаОценки != Неопределено ? ШкалаОценки.Ид.ВСтроку() : "",
        ДанныеКомпетенцийЭкземпляраОценкиВJson(Компетенции)
    )
    возврат ДанныеJson        
;

@ВПроекте
метод ДанныеКомпетенцийЭкземпляраОценкиВJson(КомпетенцииЭкземпляраОценки: ЧитаемаяКоллекция<КомпетенцииЭкземпляраОценкиПоМетоду360>): Массив<КомпетенцияЭкземпляраОценки_2_0>
    знч Данные: Массив<КомпетенцияЭкземпляраОценки_2_0>
    для Строка из КомпетенцииЭкземпляраОценки
        Данные.Добавить(ДанныеКомпетенцииЭкземпляраОценкиВJson(Строка))        
    ;
    возврат Данные
;
    
метод ДанныеКомпетенцииЭкземпляраОценкиВJson(КомпетенцияЭкземпляраОценки: КомпетенцииЭкземпляраОценкиПоМетоду360): КомпетенцияЭкземпляраОценки_2_0
    знч ДанныеВJson = новый КомпетенцияЭкземпляраОценки_2_0(
        КомпетенцияЭкземпляраОценки.Компетенция?.Ид.ВСтроку() ?? "",
        КомпетенцияЭкземпляраОценки.Индикатор?.Ид.ВСтроку() ?? "",
        КомпетенцияЭкземпляраОценки.Оценка
    )     
    возврат ДанныеВJson    
;

// Конец JSON

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: ЭкземплярыОценкиПерсоналаПоМетоду360.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Ссылка, Истина)
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, Неопределено, ХарактерыИзменений.Изменение)
    ;
;

@ВПодсистеме
метод ПослеУдаленияДополнение(Ссылка: ЭкземплярыОценкиПерсоналаПоМетоду360.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьУдаление(Ссылка)
    ;
;

@ВПодсистеме
метод ТребуетсяРегистрацияИзмененийПослеЗаписи(Статус: СостояниеОценкиПерсонала?, СтатусИзменился: Булево, ПараметрыЗаписи: ЭкземплярыОценкиПерсоналаПоМетоду360.ПараметрыЗаписи): Булево
    пер ТребуетсяРегистрацияИзменений: Булево 
    знч ВидТекущегоПриложения = ОбменДанными.ВидТекущегоПриложения()
    знч РежимЗагрузкиДанных = ПараметрыЗаписи.РежимЗагрузкиДанных
    если Статус != СостояниеОценкиПерсонала.Черновик
        и РежимЗагрузкиДанных == Ложь
        и ((ВидТекущегоПриложения == ВидПриложения.Ess и Статус == СостояниеОценкиПерсонала.Запущена)
       или (ВидТекущегоПриложения == ВидПриложения.Ess и СтатусИзменился и Статус == СостояниеОценкиПерсонала.Завершена)
       или (ВидТекущегоПриложения == ВидПриложения.Hr и СтатусИзменился))
        ТребуетсяРегистрацияИзменений = Истина
    ;
    возврат ТребуетсяРегистрацияИзменений
;

@ВПодсистеме
метод ПослеОтправкиДанных(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>)
    знч ВидТекущегоПриложения = ОбменДанными.ВидТекущегоПриложения()
    для Ссылка из Ссылки
        знч Состояние = МенеджерСущности.ЗначениеРеквизитаОбъекта(Ссылка как ЭкземплярыОценкиПерсоналаПоМетоду360.Ссылка, "Статус")
        если (ВидТекущегоПриложения == ВидПриложения.Ess и Состояние == СостояниеОценкиПерсонала.Завершена)
            или (ВидТекущегоПриложения == ВидПриложения.Hr и Состояние != СостояниеОценкиПерсонала.Черновик)
            ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Ссылка, Ложь)
        ;
    ;
;