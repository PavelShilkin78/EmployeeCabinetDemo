импорт КонтрольДоступа
импорт УниверсальныеМеханизмы
импорт ФизическиеЛица
импорт СтандартноеПриложение
импорт ЛичныеКабинетыПользователей
импорт Компания

@ВПроекте
конст ИД_ПОДСИСТЕМЫ = "ОценкаПерсонала"

@ВПодсистеме конст ГРУППА_РЕСУРСОВ_ОЦЕНКА_ПЕРСОНАЛА = "ОценкаПерсонала"

@ВПроекте
конст ИД_РАЗДЕЛА_ОЦЕНКА_ПЕРСОНАЛА = "ОценкаПерсонала"

@ВПодсистеме конст ИМЯ_РАЗДЕЛА_ОЦЕНКА_ПЕРСОНАЛА = "Оценка персонала"

@ВПодсистеме
конст КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: Строка = "ОценкаПерсонала"

@ВПодсистеме
структура ПараметрыСеанса
    пер ФункциональныеОпции: ФункциональныеОпции
;

// Область ФункциональныеОпции

@ВПроекте
структура ФункциональныеОпции
    пер ИспользованиеПодсистемы: Булево
;

@ВПроекте
@НаКлиенте
метод ПараметрыСеанса(): ПараметрыСеанса
    возврат ПараметрыСеансаСервис.ПолучитьСервис().ПараметрПоКлючу(КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА) как ПараметрыСеанса
;

@ВПроекте
@НаСервере
метод ПолучитьФункциональныеОпции(): ФункциональныеОпции?
    возврат ИспользуемаяФункциональность.ФункциональныеОпции()
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЗаписатьФункциональныеОпции(ФункциональныеОпции: ФункциональныеОпции)
    ИспользуемаяФункциональность.ЗаписатьФункциональныеОпции(ФункциональныеОпции)
;

// Конец ФункциональныеОпции

@ВПроекте
@НаКлиенте @НаСервере
структура ДанныеЭкземпляраОценки
    пер ЭкземплярОценки: ЭкземплярыОценкиПерсоналаПоМетоду360.Ссылка?
    пер Оцениваемый: ФизическиеЛица.Ссылка?
    пер КадровыеДанныеОцениваемого: Компания.КадровыеДанныеФизическогоЛица?
    пер Оценивающий: ФизическиеЛица.Ссылка?
    пер КадровыеДанныеОценивающего: Компания.КадровыеДанныеФизическогоЛица?
    пер Статус: СостояниеОценкиПерсонала?
    пер ШкалаОценки: ШкалыОценок.Ссылка?
    пер Комментарий: Строка
    пер Компетенции: Массив<КомпетенцииЭкземпляраОценкиПоМетоду360>
    пер ПоказатьОценки: Булево
    пер ОбщаяСредняяОценка: Число
;

@ВПроекте
@НаКлиенте
метод ОтступПоУровнюБиблиотекиКомпетенций(Компетенция: БиблиотекиКомпетенций.Ссылка|Компетенции.Ссылка|ИндикаторыКомпетенций.Ссылка): РазмерОтступа
    пер Отступ: РазмерОтступа = РазмерОтступа.Отсутствует
    выбор Компетенция
    когда это БиблиотекиКомпетенций.Ссылка
        Отступ = РазмерОтступа.Отсутствует
    когда это Компетенции.Ссылка
        Отступ = РазмерОтступа.Одинарный
    когда это ИндикаторыКомпетенций.Ссылка
        Отступ = РазмерОтступа.Двойной
    ;
    возврат Отступ
;

@ВПодсистеме
@НаКлиенте
метод КоличествоОцениваемыхЭкземпляровТекущегоПользователя(ТекущийПользователь: ФизическиеЛица.Ссылка? = Неопределено): Число
    пер КоличествоОцениваемых: Число
    если ТекущийПользователь == Неопределено
        ТекущийПользователь = ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо
    ;
    если ТекущийПользователь != Неопределено
        КоличествоОцениваемых = КоличествоОцениваемыхЭкземпляровПользователя(ТекущийПользователь)
    ;
    возврат КоличествоОцениваемых   
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
статический метод КоличествоОцениваемыхЭкземпляровПользователя(Пользователь: ФизическиеЛица.Ссылка? = Неопределено): Число
    пер КоличествоОцениваемых: Число
    если Пользователь != Неопределено
        исп КонтекстДоступа.Привилегированный()
        знч Запрос = Запрос{
            Выбрать
                Количество(Различные ЭкземплярыОценкиПерсоналаПоМетоду360.Оцениваемый) Как КоличествоОцениваемых            
            Из
                ЭкземплярыОценкиПерсоналаПоМетоду360 Как ЭкземплярыОценкиПерсоналаПоМетоду360
            Где
                ЭкземплярыОценкиПерсоналаПоМетоду360.Статус == СостояниеОценкиПерсонала.Запущена
                и ЭкземплярыОценкиПерсоналаПоМетоду360.Оценивающий == %Пользователь
        }
        исп РезультатЗапроса = Запрос.Выполнить()   
        для РезультатЗапросаСтрока из РезультатЗапроса
            КоличествоОцениваемых = РезультатЗапросаСтрока.КоличествоОцениваемых
        ;
    ;
    возврат КоличествоОцениваемых
;

@ВПроекте
@НаСервере @ДоступноСКлиента
статический метод СписокВыбораОценок(ШкалаОценки: ШкалыОценок.Ссылка?): Массив<ЭлементСпискаЗначений<Число>>
    знч СписокВыбора = новый Массив<ЭлементСпискаЗначений<Число>>()
    для Элемент из ШкалаОценки.ЗагрузитьОбъект(Ложь).Оценки
       знч НовыйЭлемент = новый ЭлементСпискаЗначений<Число>(
            Представление = Элемент.Маркировка,
            Значение = Элемент.Уровень
        )
       СписокВыбора.Добавить(НовыйЭлемент) 
    ;
    возврат СписокВыбора   
;

// JSON

@ВПодсистеме
перечисление КачествоКомпетенцииJson
    hardSkill,
    softSkill
;

@ВПодсистеме
перечисление ТипОтображенияШкалыОценокJson
    dropDownList,
    stars
;

@ВПодсистеме
перечисление СостояниеОценкиПерсоналаJson
    draft,
    launched,
    completed
;

конст СООТВЕТСТВИЕ_КАЧЕСТВО_КОМПЕТЕНЦИИ_JSON = {
    КачествоКомпетенцииJson.hardSkill: КачествоКомпетенции.HardSkill,
    КачествоКомпетенцииJson.softSkill: КачествоКомпетенции.SoftSkill
}

конст СООТВЕТСТВИЕ_ТИП_ОТОБРАЖЕНИЯ_ШКАЛЫ_ОЦЕНОК_JSON = {
    ТипОтображенияШкалыОценокJson.dropDownList: ТипОтображенияШкалыОценок.ВыпадающийСписок,
    ТипОтображенияШкалыОценокJson.stars: ТипОтображенияШкалыОценок.Звезды
}

конст СООТВЕТСТВИЕ_СОСТОЯНИЕ_ОЦЕНКИ_ПЕРСОНАЛА_JSON = {
    СостояниеОценкиПерсоналаJson.draft: СостояниеОценкиПерсонала.Черновик,
    СостояниеОценкиПерсоналаJson.launched: СостояниеОценкиПерсонала.Запущена,
    СостояниеОценкиПерсоналаJson.completed: СостояниеОценкиПерсонала.Завершена
}

@ВПодсистеме
метод КачествоКомпетенцииИзJson(КачествоКомпетенцииJson: КачествоКомпетенцииJson): КачествоКомпетенции
    возврат СООТВЕТСТВИЕ_КАЧЕСТВО_КОМПЕТЕНЦИИ_JSON[КачествоКомпетенцииJson] 
;

@ВПодсистеме
метод КачествоКомпетенцииВJson(КачествоКомпетенции: КачествоКомпетенции?): КачествоКомпетенцииJson?
     для КлючИЗначение из СООТВЕТСТВИЕ_КАЧЕСТВО_КОМПЕТЕНЦИИ_JSON
        если КлючИЗначение.Значение == КачествоКомпетенции
            возврат КлючИЗначение.Ключ
        ;    
    ;  
;

@ВПодсистеме
метод ТипОтображенияШкалыОценокИзJson(ТипОтображенияШкалыОценокJson: ТипОтображенияШкалыОценокJson): ТипОтображенияШкалыОценок
    возврат СООТВЕТСТВИЕ_ТИП_ОТОБРАЖЕНИЯ_ШКАЛЫ_ОЦЕНОК_JSON[ТипОтображенияШкалыОценокJson] 
;

@ВПодсистеме
метод ТипОтображенияШкалыОценокВJson(ТипОтображенияШкалыОценок: ТипОтображенияШкалыОценок?): ТипОтображенияШкалыОценокJson?
     для КлючИЗначение из СООТВЕТСТВИЕ_ТИП_ОТОБРАЖЕНИЯ_ШКАЛЫ_ОЦЕНОК_JSON
        если КлючИЗначение.Значение == ТипОтображенияШкалыОценок
            возврат КлючИЗначение.Ключ
        ;    
    ;  
;

@ВПодсистеме
метод СостояниеОценкиПерсоналаИзJson(СостояниеОценкиПерсоналаJson: СостояниеОценкиПерсоналаJson): СостояниеОценкиПерсонала
    возврат СООТВЕТСТВИЕ_СОСТОЯНИЕ_ОЦЕНКИ_ПЕРСОНАЛА_JSON[СостояниеОценкиПерсоналаJson] 
;

@ВПодсистеме
метод СостояниеОценкиПерсоналаВJson(СостояниеОценкиПерсонала: СостояниеОценкиПерсонала?): СостояниеОценкиПерсоналаJson?
     для КлючИЗначение из СООТВЕТСТВИЕ_СОСТОЯНИЕ_ОЦЕНКИ_ПЕРСОНАЛА_JSON
        если КлючИЗначение.Значение == СостояниеОценкиПерсонала
            возврат КлючИЗначение.Ключ
        ;    
    ;  
;

// Конец JSON

// КонтрольДоступа

конст ПОЛНОМОЧИЕ_ИЗМЕНЕНИЕ_КОМПЕТЕНЦИЙ = "ИзменениеКомпетенций"
конст ПОЛНОМОЧИЕ_ЧТЕНИЕ_КОМПЕТЕНЦИЙ = "ЧтениеКомпетенций"
конст ПОЛНОМОЧИЕ_ИЗМЕНЕНИЕ_ЭКЗЕМПЛЯРОВ_ОЦЕНКИ = "ИзменениеЭкземпляровОценки"
конст ПОЛНОМОЧИЕ_ЧТЕНИЕ_ЭКЗЕМПЛЯРОВ_ОЦЕНКИ = "ЧтениеЭкземпляровОценки"
конст ПОЛНОМОЧИЕ_ЧТЕНИЕ_РЕЗУЛЬТАТОВ_ОЦЕНКИ = "ЧтениеРезультатовОценки"
@ВПроекте
конст РОЛЬ_АСЕССОР = "Асессор"
@ВПроекте
конст РОЛЬ_ГЛАВНЫЙ_АСЕССОР = "ГлавныйАсессор"

@ВПроекте
@НаСервере
метод ДобавитьРоли()
    ДобавитьРольАсессор()
    ДобавитьРольГлавныйАсессор()
;

@НаСервере
метод ДобавитьРольАсессор()
    КонтрольДоступа.ДобавитьРоль(
        "Асессор",
        РОЛЬ_АСЕССОР,
        [
            ПолномочиеЧтениеКомпетенций(),
            ПолномочиеИзменениеЭкземпляровОценки(),
            ПолномочиеЧтениеЭкземпляровОценки(),
            ПолномочиеЧтениеРезультатовОценки()
        ],
        "Отвечает за проведение оценки эффективности работы сотрудников компании."
    )
;

@НаСервере
метод ДобавитьРольГлавныйАсессор()
    КонтрольДоступа.ДобавитьРоль(
        "Главный асессор",
        РОЛЬ_ГЛАВНЫЙ_АСЕССОР,
        [
            ПолномочиеИзменениеКомпетенций(),
            ПолномочиеЧтениеКомпетенций(),
            ПолномочиеИзменениеЭкземпляровОценки(),
            ПолномочиеЧтениеЭкземпляровОценки(),
            ПолномочиеЧтениеРезультатовОценки()
        ],
        "Отвечает за администрирование, проведение и анализ оценки эффективности работы сотрудников компании."
    )
;

@ВПодсистеме
@НаСервере
метод ДобавитьПолномочия()
    ДобавитьПолномочиеИзменениеКомпетенций()
    ДобавитьПолномочиеЧтениеКомпетенций()
    ДобавитьПолномочиеИзменениеЭкземпляровОценки()
    ДобавитьПолномочиеЧтениеЭкземпляровОценки()
    ДобавитьПолномочиеЧтениеРезультатовОценки() 
;

@ВПроекте
@НаСервере
метод ПолномочиеИзменениеКомпетенций(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_ИЗМЕНЕНИЕ_КОМПЕТЕНЦИЙ)
;

@ВПроекте
@НаСервере
метод ПолномочиеЧтениеКомпетенций(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_ЧТЕНИЕ_КОМПЕТЕНЦИЙ)
;

@ВПроекте
@НаСервере
метод ПолномочиеИзменениеЭкземпляровОценки(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_ИЗМЕНЕНИЕ_ЭКЗЕМПЛЯРОВ_ОЦЕНКИ)
;

@ВПроекте
@НаСервере
метод ПолномочиеЧтениеЭкземпляровОценки(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_ЧТЕНИЕ_ЭКЗЕМПЛЯРОВ_ОЦЕНКИ)
;

@ВПроекте
@НаСервере
метод ПолномочиеЧтениеРезультатовОценки(): Полномочия.Ссылка
    возврат КонтрольДоступа.Полномочие(ПОЛНОМОЧИЕ_ЧТЕНИЕ_РЕЗУЛЬТАТОВ_ОЦЕНКИ)
;

@НаСервере
метод ДобавитьПолномочиеИзменениеКомпетенций()
    КонтрольДоступа.ДобавитьПолномочие(
        "Создание и изменение библиотек компетенций, компетенций и индикаторов",
        ПОЛНОМОЧИЕ_ИЗМЕНЕНИЕ_КОМПЕТЕНЦИЙ,
        "")
;

@НаСервере
метод ДобавитьПолномочиеЧтениеКомпетенций()
    КонтрольДоступа.ДобавитьПолномочие(
        "Просмотр библиотек компетенций, компетенций и индикаторов",
        ПОЛНОМОЧИЕ_ЧТЕНИЕ_КОМПЕТЕНЦИЙ,
        "")
;

@НаСервере
метод ДобавитьПолномочиеИзменениеЭкземпляровОценки()
    КонтрольДоступа.ДобавитьПолномочие(
        "Создание и изменение оценочных листов",
        ПОЛНОМОЧИЕ_ИЗМЕНЕНИЕ_ЭКЗЕМПЛЯРОВ_ОЦЕНКИ,
        "",
        КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица())
;

@НаСервере
метод ДобавитьПолномочиеЧтениеЭкземпляровОценки()
    КонтрольДоступа.ДобавитьПолномочие(
        "Просмотр оценочных листов",
        ПОЛНОМОЧИЕ_ЧТЕНИЕ_ЭКЗЕМПЛЯРОВ_ОЦЕНКИ,
        "",
        КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица())
;

@НаСервере
метод ДобавитьПолномочиеЧтениеРезультатовОценки()
    КонтрольДоступа.ДобавитьПолномочие(
        "Просмотр отчета о результатах оценки 360",
        ПОЛНОМОЧИЕ_ЧТЕНИЕ_РЕЗУЛЬТАТОВ_ОЦЕНКИ,
        "",
        КонтрольДоступа.ТипАтрибутаДоступаФизическиеЛица())
;

// Конец КонтрольДоступа

@ВПроекте конст НАЧАЛО_ОЦЕНКИ_СОТРУДНИКА_SMS = "НачалоОценкиСотрудникаSMS"
@ВПроекте конст НАЧАЛО_ОЦЕНКИ_СОТРУДНИКА_PUSH = "НачалоОценкиСотрудникаPush"
@ВПроекте конст НАЧАЛО_ОЦЕНКИ_СОТРУДНИКА_EMAIL = "НачалоОценкиСотрудникаEmail"
@ВПроекте конст НАЧАЛО_ОЦЕНКИ_СОТРУДНИКА_ТЕМА = "НачалоОценкиСотрудникаТема"
@ВПроекте конст РЕЗУЛЬТАТЫ_ОЦЕНКИ_СОТРУДНИКА_SMS = "РезультатыОценкиСотрудникаSMS"
@ВПроекте конст РЕЗУЛЬТАТЫ_ОЦЕНКИ_СОТРУДНИКА_PUSH = "РезультатыОценкиСотрудникаPush"
@ВПроекте конст РЕЗУЛЬТАТЫ_ОЦЕНКИ_СОТРУДНИКА_EMAIL = "РезультатыОценкиСотрудникаEmail"
@ВПроекте конст РЕЗУЛЬТАТЫ_ОЦЕНКИ_СОТРУДНИКА_ТЕМА = "РезультатыОценкиСотрудникаТема"

@ВПроекте
@НаСервере
метод ОбновитьСтроковыеРесурсы()
    
    пер НачалоОценкиСотрудникаSMS = "Вам необходимо оценить сотрудника."
    пер Комментарий = "Начало процесса оценки сотрудника (sms)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ОЦЕНКА_ПЕРСОНАЛА, НАЧАЛО_ОЦЕНКИ_СОТРУДНИКА_SMS, Комментарий, НачалоОценкиСотрудникаSMS, 70)
        
    пер НачалоОценкиСотрудникаPush = "Вам необходимо оценить сотрудника \%КМПолноеИмяСотрудника\%."
    Комментарий = "Начало процесса оценки сотрудника (push)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ОЦЕНКА_ПЕРСОНАЛА, НАЧАЛО_ОЦЕНКИ_СОТРУДНИКА_PUSH, Комментарий, НачалоОценкиСотрудникаPush)
    
    пер НачалоОценкиСотрудникаEmail = 
        "Добрый день, \%КМПолноеИмяПолучателя\%
        
        Вам необходимо оценить сотрудника \%КМПолноеИмяСотрудника\%.
        Вы можете это сделать в личном кабинете.
        
        \%КМПодпись\%"
    Комментарий = "Начало процесса оценки сотрудника (email)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ОЦЕНКА_ПЕРСОНАЛА, НАЧАЛО_ОЦЕНКИ_СОТРУДНИКА_EMAIL, Комментарий, НачалоОценкиСотрудникаEmail)
    
    пер НачалоОценкиСотрудникаТема = "Вам необходимо оценить сотрудника \%КМПолноеИмяСотрудника\%"
    Комментарий = "Начало процесса оценки сотрудника (тема письма)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ОЦЕНКА_ПЕРСОНАЛА, НАЧАЛО_ОЦЕНКИ_СОТРУДНИКА_ТЕМА, Комментарий, НачалоОценкиСотрудникаТема)
    
    пер РезультатыОценкиСотрудникаSMS = "Получены результаты оценки сотрудника."
    Комментарий = "Получены результаты оценки сотрудника (sms)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ОЦЕНКА_ПЕРСОНАЛА, РЕЗУЛЬТАТЫ_ОЦЕНКИ_СОТРУДНИКА_SMS, Комментарий, РезультатыОценкиСотрудникаSMS, 70)
        
    пер РезультатыОценкиСотрудникаPush = "Получены результаты оценки сотрудника \%КМПолноеИмяСотрудника\%."
    Комментарий = "Получены результаты оценки сотрудника (push)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ОЦЕНКА_ПЕРСОНАЛА, РЕЗУЛЬТАТЫ_ОЦЕНКИ_СОТРУДНИКА_PUSH, Комментарий, РезультатыОценкиСотрудникаPush)
    
    пер РезультатыОценкиСотрудникаEmail = 
        "Добрый день, \%КМПолноеИмяПолучателя\%
        
        Вы можете ознакомиться с результатами оценки сотрудника \%КМПолноеИмяСотрудника\% в личном кабинете.
        
        \%КМПодпись\%"
    Комментарий = "Получены результаты оценки сотрудника (email)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ОЦЕНКА_ПЕРСОНАЛА, РЕЗУЛЬТАТЫ_ОЦЕНКИ_СОТРУДНИКА_EMAIL, Комментарий, РезультатыОценкиСотрудникаEmail)
    
    пер РезультатыОценкиСотрудникаТема = "Получены результаты оценки сотрудника \%КМПолноеИмяСотрудника\%"
    Комментарий = "Получены результаты оценки сотрудника (тема письма)"
    УниверсальныеМеханизмы.ЗаписатьЗначениеРесурса(ГРУППА_РЕСУРСОВ_ОЦЕНКА_ПЕРСОНАЛА, РЕЗУЛЬТАТЫ_ОЦЕНКИ_СОТРУДНИКА_ТЕМА, Комментарий, РезультатыОценкиСотрудникаТема)
    
;

@ВПодсистеме
@НаКлиенте
метод СформироватьКомандыВиджета(): Команда|ГруппаКомандногоИнтерфейса<Команда>|?
    пер ДействияКомандыВиджета = <Команда>[]
    знч ОткрытиеСпискаЭкземпляровОценки = 
        новый ОбычнаяКоманда(
            (Команда)->ФормаЭкземпляровОценкиПерсонала.Открыть(), 
            "Оценить", 
            Неопределено, 
            ВажностьКоманды.Высокая
        )
    ДействияКомандыВиджета.Добавить(ОткрытиеСпискаЭкземпляровОценки)
    если ДействияКомандыВиджета.Размер() == 1
        возврат ДействияКомандыВиджета[0]     
    иначе
        возврат новый ГруппаКомандногоИнтерфейса<Команда>("Действия", Неопределено, ДействияКомандыВиджета)
    ;
;