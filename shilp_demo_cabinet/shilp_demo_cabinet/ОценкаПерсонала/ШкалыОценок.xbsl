импорт ВебApi
импорт ОбменДанными
импорт ОбщиеСтандартные

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат ОценкаПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаШкалОценок()
;

//КонецОбласти

// JSON

@ВПодсистеме
метод ТипОбъектаJson(): Строка
    возврат "assessmentRatingScale"
;

@ВПроекте
структура ШкалаОценки_2_0
    @JsonСвойство("ID")
    обз знч Ид: Строка
    @JsonСвойство("name")
    обз знч Наименование: Строка
    @JsonСвойство("assessmentRatingScaleDisplayType")
    обз знч ТипОтображения: ОценкаПерсонала.ТипОтображенияШкалыОценокJson?
    @JsonСвойство("assessmentScaleRatings")
    обз знч Оценки: Массив<ОценкаШкалы_2_0>?
;

@ВПроекте
структура ОценкаШкалы_2_0
    @JsonСвойство("rate")
    обз знч Уровень: Число
    @JsonСвойство("description")
    обз знч Маркировка: Строка
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{2.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<ШкалаОценки_2_0>
    ;
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ШкалаОценки_2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать()
    знч ШкалаОценки = Сервисы.ПрочитатьОбъект(ДанныеJson.Ид, &ШкалыОценок.Объект.новый(Ууид), Тип<ШкалыОценок.Ссылка>) как ШкалыОценок.Объект
    ШкалаОценки.Наименование = ДанныеJson.Наименование
    если ДанныеJson.ТипОтображения != Неопределено
        ШкалаОценки.ТипОтображения = ОценкаПерсонала.ТипОтображенияШкалыОценокИзJson(ДанныеJson.ТипОтображения)
    ;
    если ДанныеJson.Оценки != Неопределено
        ШкалаОценки.Оценки.Очистить()
        для ОценкаШкалы из ДанныеJson.Оценки
            ШкалаОценки.Оценки.Добавить(
                новый ОценкиШкалы(
                    ОценкаШкалы.Уровень,
                    ОценкаШкалы.Маркировка   
                )
            )    
        ;  
    ;
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ШкалаОценки, ДанныеJson.Ид), Сервисы.ИнструментыМенеджераОбъекта)     
;

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> ШкалыОценок.ПолучитьСсылку(Ууид))
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"assessmentRatingScale": ШкалыОценокВJson(Ссылки, Сервисы)}
;

метод ШкалыОценокВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ШкалыОценок(Ссылки)
        Данные.Добавить(ШкалыОценокВJson_V2_0(КлючИЗначение.Ключ, КлючИЗначение.Значение, Сервисы))
    ;
    возврат Данные
;

метод ШкалыОценок(ШкалыОценокСсылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<ШкалыОценок.Ссылка, ЧитаемаяКоллекция<ОценкиШкалы>>
    знч Данные: Соответствие<ШкалыОценок.Ссылка, ЧитаемаяКоллекция<ОценкиШкалы>> 
    для Шкала из ШкалыОценокСсылки
        пер ШкалыОценокОбъект = (Шкала как ШкалыОценок.Ссылка).ЗагрузитьОбъект(Ложь)
        если ШкалыОценокОбъект != Неопределено 
            Данные.Вставить(
                Шкала как ШкалыОценок.Ссылка,
                ШкалыОценокОбъект.Оценки    
            )
        ;
    ;
    возврат Данные    
;

метод ШкалыОценокВJson_V2_0(Ссылка: ШкалыОценок.Ссылка, ОценкиШкалыОценок: ЧитаемаяКоллекция<ОценкиШкалы>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ШкалаОценки_2_0
    пер ТипОтображенияШкалыОценок: ОценкаПерсонала.ТипОтображенияШкалыОценокJson? = 
        ОценкаПерсонала.ТипОтображенияШкалыОценокВJson(
            МенеджерСущности.ЗначениеРеквизитаОбъекта(Ссылка, "ТипОтображения") как ТипОтображенияШкалыОценок?
        )
    пер ДанныеJson = новый ШкалаОценки_2_0(
        Ссылка.Ид.ВСтроку(),
        МенеджерСущности.ЗначениеРеквизитаОбъекта(Ссылка, "Наименование") как Строка,
        ТипОтображенияШкалыОценок,
        ДанныеОценокШкалыВJson(ОценкиШкалыОценок)
    )
    возврат ДанныеJson        
;

метод ДанныеОценокШкалыВJson(ОценкиШкалы: ЧитаемаяКоллекция<ОценкиШкалы>): Массив<ОценкаШкалы_2_0>
    знч Данные: Массив<ОценкаШкалы_2_0>
    для Шкала из ОценкиШкалы
        Данные.Добавить(ДанныеОценкиШкалыВJson(Шкала))        
    ;
    возврат Данные
;
    
метод ДанныеОценкиШкалыВJson(Шкала: ОценкиШкалы): ОценкаШкалы_2_0
    знч ДанныеВJson = новый ОценкаШкалы_2_0(
        Шкала.Уровень,
        Шкала.Маркировка
    )     
    возврат ДанныеВJson    
;

@ВПодсистеме
метод УдалитьОбъекты(ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>, Сервисы: ВебApiСервер.СервисыУдаленияОбъектов)
    исп Транзакции.Начать()
    знч Идентификатор = новый Ууид(ПараметрыЗапроса["ID"] как Строка)
    знч ШкалыОценокСсылка = ШкалыОценок.ПолучитьСсылку(Идентификатор)
    знч Ключ = {"Ссылка": ШкалыОценокСсылка}
    Сервисы.УдалитьКоллекцию(Ключ, Тип<ШкалыОценок.Ссылка>)
;

// Конец JSON

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: ШкалыОценок.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Ссылка, Истина)
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, Неопределено, ХарактерыИзменений.Изменение)
    ;
;

@ВПодсистеме
метод ПослеУдаленияДополнение(Ссылка: ШкалыОценок.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьУдаление(Ссылка)
    ;
;

@ВПодсистеме
метод ПровестиПервоначальноеЗаполнение()
    знч ВидТекущегоПриложения = ОбменДанными.ВидТекущегоПриложения()
    если ВидТекущегоПриложения == ВидПриложения.Hr
        знч Запрос = Запрос{
            Выбрать Первые 1
                Ссылка
            Из
                ШкалыОценок
            }
        исп РезультатЗапроса = Запрос.Выполнить()
        знч РезультатЗапросаСтрок = новый ЧитаемыйМассив(РезультатЗапроса)
        если РезультатЗапросаСтрок.Пусто()
            ЗаполнитьПервоначальныеШкалыОценок()    
        ;
    ;
;

метод ЗаполнитьПервоначальныеШкалыОценок()
    знч ДесятибалльнаяШкала = 
        новый ШкалыОценок.Объект(
            Наименование = "Десятибалльная",
            ТипОтображения = ТипОтображенияШкалыОценок.ВыпадающийСписок,
            Оценки = ОценкиДесятибалльнойШкалы()
        )
    ДесятибалльнаяШкала.Записать()
    ПослеЗаписиДополнение(ДесятибалльнаяШкала.Ссылка, Истина)
    знч ПятибалльнаяШкала =
        новый ШкалыОценок.Объект(
            Наименование = "Пятибалльная",
            ТипОтображения = ТипОтображенияШкалыОценок.Звезды,
            Оценки = ОценкиПятибалльнойШкалы()
        )
    ПятибалльнаяШкала.Записать()
    ПослеЗаписиДополнение(ПятибалльнаяШкала.Ссылка, Истина)
;

метод ОценкиДесятибалльнойШкалы(): Массив<ОценкиШкалы>
    возврат новый Массив<ОценкиШкалы>(
        [
            новый ОценкиШкалы(1, "Неудовлетворительно"),
            новый ОценкиШкалы(2, "Почти удовлетворительно"),
            новый ОценкиШкалы(3, "Удовлетворительно"),
            новый ОценкиШкалы(4, "Весьма удовлетворительно"),
            новый ОценкиШкалы(5, "Хорошо"),
            новый ОценкиШкалы(6, "Весьма хорошо"),
            новый ОценкиШкалы(7, "Очень хорошо"),
            новый ОценкиШкалы(8, "Почти отлично"),
            новый ОценкиШкалы(9, "Отлично"),
            новый ОценкиШкалы(10, "Превосходно")
        ]
    )
;

метод ОценкиПятибалльнойШкалы(): Массив<ОценкиШкалы>
    возврат новый Массив<ОценкиШкалы>(
        [
            новый ОценкиШкалы(1, "Неудовлетворительно"),
            новый ОценкиШкалы(2, "Плохо"),
            новый ОценкиШкалы(3, "Удовлетворительно"),
            новый ОценкиШкалы(4, "Хорошо"),
            новый ОценкиШкалы(5, "Отлично")
        ]
    )
;