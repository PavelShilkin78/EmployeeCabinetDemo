импорт ВебApi
импорт ОбменДанными
импорт ОбщиеСтандартные

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): ЧитаемаяКоллекция<РазрешениеДоступа>
    возврат ОценкаПерсоналаКонтрольДоступаПоставщик.ПолучитьСервис().ВычислитьРазрешенияДоступаКомпетенций()
;

//КонецОбласти

// JSON

@ВПодсистеме
метод ТипОбъектаJson(): Строка
    возврат "competenceLibraries"
;

@ВПроекте
структура БиблиотекаКомпетенций_2_0
    @JsonСвойство("ID")
    обз знч Ид: Строка
    @JsonСвойство("name")
    обз знч Наименование: Строка
;

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено или ВерсияФорматаОбмена < Версия{2.0}
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<БиблиотекаКомпетенций_2_0>
    ;
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: БиблиотекаКомпетенций_2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    исп Транзакции.Начать()
    знч БиблиотекаКомпетенций = Сервисы.ПрочитатьОбъект(ДанныеJson.Ид, &БиблиотекиКомпетенций.Объект.новый(Ууид), Тип<БиблиотекиКомпетенций.Ссылка>) как БиблиотекиКомпетенций.Объект
    БиблиотекаКомпетенций.Наименование = ДанныеJson.Наименование
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(БиблиотекаКомпетенций, ДанныеJson.Ид), Сервисы.ИнструментыМенеджераОбъекта)     
;

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> БиблиотекиКомпетенций.ПолучитьСсылку(Ууид))
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"competenceLibraries": БиблиотекиКомпетенцийВJson(Ссылки, Сервисы)}
;

метод БиблиотекиКомпетенцийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из БиблиотекиКомпетенций(Ссылки)
        Данные.Добавить(БиблиотекиКомпетенцийВJson_V2_0(КлючИЗначение.Значение, Сервисы))
    ;
    возврат Данные
;

метод БиблиотекиКомпетенций(БиблиотекиКомпетенцийСсылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<БиблиотекиКомпетенций.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Данные: Соответствие<БиблиотекиКомпетенций.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>> 
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Наименование
        Из
            БиблиотекиКомпетенций
        Где
            Ссылка В (%БиблиотекиКомпетенцийСсылки)        
    }
    исп Результат = Запрос.Выполнить() 
    для СтрокаРезультата из Результат
        Данные.Вставить(
            СтрокаРезультата.Ссылка,
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(СтрокаРезультата, Результат)
        )
    ;
    
    возврат Данные    
;

метод БиблиотекиКомпетенцийВJson_V2_0(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): БиблиотекаКомпетенций_2_0
    пер ДанныеJson = новый БиблиотекаКомпетенций_2_0(
        (ДанныеОбъекта["Ссылка"] как БиблиотекиКомпетенций.Ссылка).Ид.ВСтроку(),
        ДанныеОбъекта["Наименование"] как Строка
    )
    возврат ДанныеJson        
;


@ВПодсистеме
метод УдалитьОбъекты(ПараметрыЗапроса: ЧитаемоеСоответствие<Строка, Число|Булево|Ууид|Строка>, Сервисы: ВебApiСервер.СервисыУдаленияОбъектов)
    исп Транзакции.Начать()
    знч Идентификатор = новый Ууид(ПараметрыЗапроса["ID"] как Строка)
    знч БиблиотекиКомпетенцийСсылка = БиблиотекиКомпетенций.ПолучитьСсылку(Идентификатор)
    знч Ключ = {"Ссылка": БиблиотекиКомпетенцийСсылка}
    Сервисы.УдалитьКоллекцию(Ключ, Тип<БиблиотекиКомпетенций.Ссылка>)
;

// Конец JSON

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: БиблиотекиКомпетенций.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Ссылка, Истина)
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, Неопределено, ХарактерыИзменений.Изменение)
    ;
;

@ВПодсистеме
метод ПослеУдаленияДополнение(Ссылка: БиблиотекиКомпетенций.Ссылка, ТребуетсяРегистрацияИзменений: Булево)
    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьУдаление(Ссылка)
    ;
;

@ВПроекте
метод ПерваяБиблиотека(): БиблиотекиКомпетенций.Ссылка?
    знч Запрос = Запрос{
        Выбрать Первые 1
        Ссылка 
        Из БиблиотекиКомпетенций
        Упорядочить По Наименование
    }
    исп Результат = Запрос.Выполнить()
    возврат Результат.ПервыйИлиУмолчание()?.Ссылка
;

@ВПроекте
метод ЕстьБиблиотеки(): Булево
    пер Запрос = Запрос{
        Выбрать Первые 1
            Истина Как ЕстьБиблиотеки
        Из
            БиблиотекиКомпетенций Как БиблиотекиКомпетенций
        }
    исп Результат = Запрос.Выполнить()
    возврат Результат.ЕдинственныйИлиУмолчание()?.ЕстьБиблиотеки ?? Ложь
;