@ВПодсистеме
@НаКлиенте @НаСервере
структура МетрикиИзображения
    обз пер ШиринаЭлемента: Число
    обз пер ИнтервалГоризонтальный: Число
    обз пер ШиринаКартинки: Число
    обз пер ЦветПоУмолчанию: Строка
    обз пер КомпактныйРежим: Булево
;

@НаКлиенте @НаСервере конст ВЫСОТА_ЭЛЕМЕНТА = 40
@НаКлиенте @НаСервере конст ПОЛЯ_ТЕКСТА = 54
@НаКлиенте @НаСервере конст ШИРИНА_ОСН_СИМВОЛА = 9
@НаКлиенте @НаСервере конст ШИРИНА_ВСП_СИМВОЛА = 6
@НаКлиенте @НаСервере конст ШИРИНА_ЛИНИИ = 4

метод ПроцессВысота(): Число
    возврат ВЫСОТА_ЭЛЕМЕНТА
;

метод ПроцессСодержимое(): Строка
    пер ПроцессСодержимое: Строка
    если ЭлементыПроцесса.Размер() != 0
        ПроцессСодержимое = ПроцессКартинка(ЭлементыПроцесса, НомерТекущегоЭлемента, МетрикиИзображения())
    ;
    возврат ПроцессСодержимое
;

метод МетрикиИзображения(): МетрикиИзображения
    пер ШиринаТекста: Число 
    знч ЦветПоУмолчанию = БиблиотекаЦветов.ЦветСтрокой(БиблиотекаЦветов.ВидыЦвета.Оранжевый)
    для Элемент из ЭлементыПроцесса
        ШиринаТекста = Макс<Число>(ШиринаТекста, Элемент.ОсновнойТекст.Длина()*ШИРИНА_ОСН_СИМВОЛА, Элемент.ВспомогательныйТекст.Длина()*ШИРИНА_ВСП_СИМВОЛА)
    ;
    пер ШиринаЭлемента: Число
    пер КомпактныйРежим = КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон
    знч КоличествоЭлементов = ЭлементыПроцесса.Размер()
    пер ШиринаКартинки: Число
    знч ИнтервалГоризонтальный = КомпактныйРежим ? 8 : 36
    если КомпактныйРежим
        ШиринаКартинки = КлиентскоеУстройство.ШиринаОкнаПриложения - 4 * Метрики.РАЗМЕР_ПОЛУИНТЕРВАЛА
        ШиринаЭлемента = ШиринаКартинки - (КоличествоЭлементов - 1) * (ВЫСОТА_ЭЛЕМЕНТА + ИнтервалГоризонтальный)
    иначе
        ШиринаЭлемента = Макс<Число>(ШиринаТекста + ПОЛЯ_ТЕКСТА, 120)
        ШиринаКартинки = КоличествоЭлементов * ШиринаЭлемента + (КоличествоЭлементов - 1) * ИнтервалГоризонтальный
    ;
    возврат новый МетрикиИзображения(
            ШиринаЭлемента, 
            ИнтервалГоризонтальный, 
            ШиринаКартинки, 
            ЦветПоУмолчанию,
            КомпактныйРежим)
;

@НаСервере @ДоступноСКлиента
статический метод ПроцессКартинка(Процесс: Массив<ИнтерфейсныеКомпоненты.ЭлементПроцесса>, ТекущийЭлемент: Число, Метрики: МетрикиИзображения): Строка
    пер Индекс: Число
    знч ЦветСветлогоШрифта = БиблиотекаЦветов.ЦветСтрокой(БиблиотекаЦветов.ВидыЦвета.СветлоСерый)
    знч ЦветТемногоШрифта = БиблиотекаЦветов.ЦветСтрокой(БиблиотекаЦветов.ВидыЦвета.ТемноСерый)
    знч СтильИмпортаRoboto = ИнтерфейсныеКомпоненты.СтильИмпортаRoboto()
    пер КартинкаSvg = 
        "<svg viewBox='0 0 %{Метрики.ШиринаКартинки} %ВЫСОТА_ЭЛЕМЕНТА' width='%{Метрики.ШиринаКартинки}' height='%ВЫСОТА_ЭЛЕМЕНТА' xmlns='http://www.w3.org/2000/svg'>
        %СтильИмпортаRoboto
        <style>   
            .number {font:bold 20px Roboto, sans-serif;fill:%ЦветТемногоШрифта;}
            .main-b {font:bold 16px Roboto, sans-serif;fill:%ЦветТемногоШрифта;}
            .slav-b {font: 10px Roboto, sans-serif;fill:%ЦветТемногоШрифта;}
            .main-w {font:bold 16px Roboto, sans-serif;fill:%ЦветСветлогоШрифта;}
            .slav-w {font: 10px Roboto, sans-serif;fill:%ЦветСветлогоШрифта;}
        </style>"
    для Элемент из Процесс
        если Индекс > 0 и не Метрики.КомпактныйРежим
            КартинкаSvg += ИнтервалSvg(Индекс, Метрики)
        ;
        КартинкаSvg += ЭлементSvg(Элемент, Индекс, ТекущийЭлемент, Метрики)
        Индекс += 1
    ;
    КартинкаSvg += 
        "
        </svg>"
    возврат КартинкаSvg
;

@НаСервере
статический метод ЭлементSvg(Элемент: ИнтерфейсныеКомпоненты.ЭлементПроцесса, Индекс: Число, ТекущийЭлемент: Число, Метрики: МетрикиИзображения): Строка
    знч ДиаметрИзображения = (ВЫСОТА_ЭЛЕМЕНТА - 2 * ШИРИНА_ЛИНИИ)
    знч РадиусИзображения = ДиаметрИзображения/2
    знч РадиусЭлемента = ВЫСОТА_ЭЛЕМЕНТА/2
    пер НачалоГоризонталь: Число
    пер НачалоВертикаль: Число
    знч Номер = Индекс + 1
    если Элемент.Цвет.Пусто()
        Элемент.Цвет = Метрики.ЦветПоУмолчанию
    ;
    если не Метрики.КомпактныйРежим
        НачалоГоризонталь = Индекс * (Метрики.ШиринаЭлемента + Метрики.ИнтервалГоризонтальный) + ВЫСОТА_ЭЛЕМЕНТА/2
    иначе
        НачалоГоризонталь = Индекс * (ВЫСОТА_ЭЛЕМЕНТА + Метрики.ИнтервалГоризонтальный)  + ВЫСОТА_ЭЛЕМЕНТА/2 + (Индекс >= ТекущийЭлемент ? Метрики.ШиринаЭлемента - ВЫСОТА_ЭЛЕМЕНТА : 0)
    ;
    знч КонецГоризонталь = НачалоГоризонталь + Метрики.ШиринаЭлемента - ВЫСОТА_ЭЛЕМЕНТА
    знч КонецВертикаль = НачалоВертикаль + ВЫСОТА_ЭЛЕМЕНТА
    знч ТекстНачало = НачалоГоризонталь + РадиусИзображения + 8
    знч РадиусКольца = РадиусЭлемента - ШИРИНА_ЛИНИИ/2 
    пер Прозрачность: Строка
    пер ПостфиксКлассаШрифта: Строка
    если Номер == ТекущийЭлемент
        ПостфиксКлассаШрифта =  "w"
    иначе
        Прозрачность =  "fill-opacity='0.5'"
        ПостфиксКлассаШрифта =  "b"
    ;
    пер ЭлементSvg: Строка
    если (не Метрики.КомпактныйРежим) или Номер == ТекущийЭлемент
        ЭлементSvg += 
            "
            <path d='M %НачалоГоризонталь %НачалоВертикаль L %КонецГоризонталь %НачалоВертикаль A %РадиусЭлемента %РадиусЭлемента 0 0 1 %КонецГоризонталь %КонецВертикаль L %НачалоГоризонталь %КонецВертикаль' fill='%{Элемент.Цвет}' %Прозрачность/>"
    ;
    если Элемент.UrlИзображения.Пусто()
        ЭлементSvg += 
            "
            <ellipse cx='%НачалоГоризонталь' cy='%{НачалоВертикаль + РадиусЭлемента}' rx='%РадиусИзображения' ry='%РадиусИзображения' fill='white'/>
            <text x='%{НачалоГоризонталь - 6}' y='%{НачалоВертикаль + 27}' class='number'>%Номер</text>"
    иначе
        ЭлементSvg += 
            "
            <image  x='%{НачалоГоризонталь - РадиусИзображения}' y='%{НачалоВертикаль + ШИРИНА_ЛИНИИ}' height='%ДиаметрИзображения' width='%ДиаметрИзображения' href='%{Элемент.UrlИзображения}'/>"
    ;
    ЭлементSvg += 
        "
        <ellipse cx='%НачалоГоризонталь' cy='%{НачалоВертикаль + РадиусЭлемента}' rx='%РадиусКольца' ry='%РадиусКольца' stroke='%{Элемент.Цвет}' stroke-width='%ШИРИНА_ЛИНИИ' fill='none'/>"
    если не Метрики.КомпактныйРежим или Номер == ТекущийЭлемент
        знч ШиринаТекста = Метрики.ШиринаЭлемента - ПОЛЯ_ТЕКСТА

        знч ОсновныхСимволов = (ШиринаТекста/ШИРИНА_ОСН_СИМВОЛА).Округлить()
        пер ОсновнойТекст = Элемент.ОсновнойТекст
        если ОсновнойТекст.Длина() > ОсновныхСимволов
            ОсновнойТекст = ОсновнойТекст.ПодстрокаСНачала(ОсновныхСимволов-1) + "..."
        ;
        знч ВспомогательныхСимволов = (ШиринаТекста/ШИРИНА_ВСП_СИМВОЛА).Округлить()
        пер ВспомогательныйТекст = Элемент.ВспомогательныйТекст
        если ВспомогательныйТекст.Длина() > ВспомогательныхСимволов
            ВспомогательныйТекст = ВспомогательныйТекст.ПодстрокаСНачала(ВспомогательныхСимволов-1) + "..."
        ;

        ЭлементSvg += 
            "
            <text x='%ТекстНачало' y='%{НачалоВертикаль + РадиусЭлемента - 2}' class='main-%ПостфиксКлассаШрифта'>%{ОсновнойТекст}</text>
            <text x='%ТекстНачало' y='%{НачалоВертикаль + ВЫСОТА_ЭЛЕМЕНТА - 6}' class='slav-%ПостфиксКлассаШрифта'>%{ВспомогательныйТекст}</text>"
    ;    
    возврат ЭлементSvg
;

@НаСервере
статический метод ИнтервалSvg(Индекс: Число, Метрики: МетрикиИзображения): Строка
    пер РадиусТочки = 3
    знч ЦветТочки = БиблиотекаЦветов.ЦветСтрокой(БиблиотекаЦветов.ВидыЦвета.ТемноСерый)
    знч Полувысота = ВЫСОТА_ЭЛЕМЕНТА/2
    пер ПерваяТочка = Индекс * Метрики.ШиринаЭлемента + (Индекс - 1) * Метрики.ИнтервалГоризонтальный + 8
    возврат
    "
    <ellipse cx='%ПерваяТочка' cy='%Полувысота' rx='%РадиусТочки' ry='%РадиусТочки' fill='%ЦветТочки'/>
    <ellipse cx='%{ПерваяТочка + 10}' cy='%Полувысота' rx='%РадиусТочки' ry='%РадиусТочки' fill='%ЦветТочки'/>
    <ellipse cx='%{ПерваяТочка + 20}' cy='%Полувысота' rx='%РадиусТочки' ry='%РадиусТочки' fill='%ЦветТочки'/>"
;