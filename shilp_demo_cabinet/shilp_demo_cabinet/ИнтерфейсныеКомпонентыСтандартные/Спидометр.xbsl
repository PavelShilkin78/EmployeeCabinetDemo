импорт ОбщиеСтандартные

@ВПроекте
@НаСервере @НаКлиенте
структура ПределШкалы
    обз пер Значение: Число
    обз пер Цвет: Строка
;

метод СпидометрИзображение(): ДвоичныйОбъект.Ссылка?
    если ПределыШкалы.Размер() == 0
        ПределыШкалы.Добавить(новый ПределШкалы( 30, "#FF928C"))
        ПределыШкалы.Добавить(новый ПределШкалы( 70, "#FFCA80"))
        ПределыШкалы.Добавить(новый ПределШкалы(100, "#83DA99"))
    ;
    возврат СпидометрИзображение(Значение, Изменение, ПределыШкалы, ПредставлениеПроцентом)
;

метод КартинкаПриНажатии(Источник: Картинка, Событие: СобытиеПриНажатии)
    если ПриНажатии != Неопределено
        ПриНажатии()
    ;
;

@НаСервере
перечисление ПоложениеРиски
    ВНачале,
    ВНачалеИВКонце,
    ВКонце,
    Нигде умолчание
;

@НаСервере @ДоступноСКлиента
статический метод СпидометрИзображение(Значение: Число, Изменение: Число, ПределыШкалы: Массив<Спидометр.ПределШкалы>, ПредставлятьПроцентом: Булево): ДвоичныйОбъект.Ссылка?
    пер ПределШкалы = ПределыШкалы.Последний().Значение
    если ПределШкалы == 0 или Значение > ПределШкалы
        возврат Неопределено
    ;
    пер ШиринаКартинки = 240
    пер ТолщинаЗначения = 20
    пер ОтступШкалы = 4
    пер ТолщинаШкалы = 4
    пер ВысотаКартинки = ШиринаКартинки/2
    пер РазмерШрифта = 40
    пер РазмерШрифтаДопЗначения = (0.4*РазмерШрифта).ЦелаяЧасть()
    пер РазмерШрифтаЛегенды = (0.25*РазмерШрифта).ЦелаяЧасть()
    пер ШиринаЧисла = 0.575
    пер ШиринаПроцента = 0.74
    пер ТекстX: Число
    пер ТекстY: Число
    пер ПоложительноеИзменение: Булево
    
    если Изменение > 0
        ПоложительноеИзменение = Истина
    иначе
        Изменение = -Изменение
    ;
    пер ЦветЗначения: Строка
    для Предел из ПределыШкалы
        если Значение <= Предел.Значение
            ЦветЗначения = Предел.Цвет
            прервать
        ;
    ;
    знч СтильИмпортаRoboto = ИнтерфейсныеКомпоненты.СтильИмпортаRoboto()
    пер КартинкаSvg = 
        "<svg viewBox='0 0 %ШиринаКартинки %ВысотаКартинки' width='%ШиринаКартинки' height='%ВысотаКартинки' xmlns='http://www.w3.org/2000/svg'>
        %СтильИмпортаRoboto
        <style>   
            .pri_value {font:bold %{РазмерШрифта}px Roboto, sans-serif;}   
            .sec_value {font:bold %{РазмерШрифтаДопЗначения}px Roboto, sans-serif;fill:#707070;}   
            .marker {font: %{РазмерШрифтаЛегенды}px Roboto, sans-serif;fill:#707070;}
        </style>"

    пер ТекущеЗначениеШкалы: Число
    пер Риска: ПоложениеРиски 
    
    для Предел из ПределыШкалы
        если ПределыШкалы.Размер() == 1 
            Риска = ПоложениеРиски.Нигде
        иначе если Предел == ПределыШкалы[0]
            Риска = ПоложениеРиски.ВКонце
        иначе если Предел == ПределыШкалы.Последний()
            Риска = ПоложениеРиски.ВНачале
        иначе
            Риска = ПоложениеРиски.ВНачалеИВКонце
        ;
        КартинкаSvg += Сегмент(ШиринаКартинки, ШиринаКартинки/2 - ТолщинаЗначения - ОтступШкалы, ТолщинаШкалы, ТекущеЗначениеШкалы/ПределШкалы, Предел.Значение/ПределШкалы, Предел.Цвет, Риска)
        ТекущеЗначениеШкалы = Предел.Значение
    ;
    если Значение > 0
        если Значение == ПределШкалы
            Риска = ПоложениеРиски.Нигде
        иначе
            Риска = ПоложениеРиски.ВКонце
        ;
        КартинкаSvg += Сегмент(ШиринаКартинки, ШиринаКартинки/2, ТолщинаЗначения, 0, Значение/ПределШкалы, "%ЦветЗначения", Риска)
    ;
    если Значение <= ПределШкалы
        если Значение == 0
            Риска = ПоложениеРиски.Нигде
        иначе
            Риска = ПоложениеРиски.ВНачале
        ;
        КартинкаSvg += Сегмент(ШиринаКартинки, ШиринаКартинки/2, ТолщинаЗначения, Значение/ПределШкалы, 1, "#EDEDF2", Риска)
    ;
    ТекстX = ТолщинаЗначения + ОтступШкалы + 2*ТолщинаШкалы
    КартинкаSvg += 
        "
        <text x='%ТекстX' y='%ВысотаКартинки' class='marker'>0</text>"
    
    ТекстX = ШиринаКартинки - (ТолщинаЗначения + ОтступШкалы + 2*ТолщинаШкалы) - РазмерШрифтаЛегенды * ШиринаЧисла * МенеджерЧисел.КоличествоЗнаков(ПределШкалы)
    КартинкаSvg += 
        "
        <text x='%ТекстX' y='%ВысотаКартинки' class='marker'>%{ПределШкалы}</text>"
    
    пер ЗначениеСтрокой: Строка
    если ПредставлятьПроцентом
        пер ЗначениеПроцентом = (100*Значение/ПределШкалы).Округлить(0)
        ТекстX = ШиринаКартинки/2 - (РазмерШрифта * ШиринаЧисла * МенеджерЧисел.КоличествоЗнаков(ЗначениеПроцентом) + РазмерШрифта * ШиринаПроцента)/2
        ЗначениеСтрокой = "%ЗначениеПроцентом%"
    иначе
        ТекстX = ШиринаКартинки/2 - РазмерШрифта * ШиринаЧисла * МенеджерЧисел.КоличествоЗнаков(Значение)/2
        ЗначениеСтрокой = Значение.ВСтроку()
    ;
    ТекстY = ВысотаКартинки * 0.75
    КартинкаSvg += 
        "
        <text x='%ТекстX' y='%ТекстY' class='pri_value'>%ЗначениеСтрокой</text>"
        
    если Изменение != 0
        если ПредставлятьПроцентом
            пер ИзменениеПроцентом = (100*Изменение/ПределШкалы).Округлить(1)
            ТекстX = ШиринаКартинки/2 - (РазмерШрифтаДопЗначения * ШиринаЧисла * (МенеджерЧисел.КоличествоЗнаков(ИзменениеПроцентом) - 1) + РазмерШрифтаДопЗначения * ШиринаПроцента)/2
            ЗначениеСтрокой = "%ИзменениеПроцентом%"
        иначе
            ТекстX = ШиринаКартинки/2 - (РазмерШрифтаДопЗначения * ШиринаЧисла * (МенеджерЧисел.КоличествоЗнаков(Изменение) - 1))/2
            ЗначениеСтрокой = "%Изменение"
        ;
        ТекстY = ВысотаКартинки * 0.95
        КартинкаSvg += 
            "
            <text x='%ТекстX' y='%ТекстY' class='sec_value'>%ЗначениеСтрокой</text>"
        
        знч Т1X = ТекстX - РазмерШрифтаДопЗначения * ШиринаЧисла * 1.5
        знч Т2X = ТекстX - РазмерШрифтаДопЗначения * ШиринаЧисла * 0.5
        знч Т3X = ТекстX - РазмерШрифтаДопЗначения * ШиринаЧисла * 1
        пер Т3Y: Число
        пер Т1Y: Число
        пер Цвет: Строка
        если ПоложительноеИзменение
            Т1Y = ТекстY
            Т3Y = ТекстY - РазмерШрифтаДопЗначения * ШиринаЧисла * 1.1
            Цвет = "#07B533"
        иначе
            Т1Y = ТекстY - РазмерШрифтаДопЗначения * ШиринаЧисла * 1.1
            Т3Y = ТекстY
            Цвет = "#FF3E33"
        ;
        КартинкаSvg += 
            "
            <path d='M %Т1X %Т1Y L %Т2X %Т1Y L %Т3X %Т3Y Z' fill='%Цвет'/>"
    ;
    КартинкаSvg += 
        "
        </svg>"
    возврат ОбъектноеХранилище.ЗагрузитьИзСтроки(КартинкаSvg, "image/svg+xml").Ссылка
;

@НаСервере
статический метод Сегмент(
        ШиринаКартинки: Число, 
        Радиус: Число, 
        Толщина: Число, 
        ДоляШкалыНачало: Число, 
        ДоляШкалыОкончание: Число, 
        Цвет: Строка, 
        ПоложениеРиски: ПоложениеРиски): Строка
        
    знч ВнутреннийРадиус = Радиус - Толщина
    знч ЧислоПи = МенеджерЧисел.ЧислоПи()
    знч ПолуразмерРиски = ЧислоПи * 0.005
    пер УголНачала = ЧислоПи*ДоляШкалыНачало
    пер УголОкончания = ЧислоПи*ДоляШкалыОкончание
    выбор ПоложениеРиски
    когда ВНачале
        УголНачала += ПолуразмерРиски
    когда ВНачалеИВКонце
        УголНачала += ПолуразмерРиски
        УголОкончания -= ПолуразмерРиски
    когда ВКонце
        УголОкончания -= ПолуразмерРиски
    ;
    УголНачала = УголНачала > ЧислоПи ? ЧислоПи : УголНачала
    УголОкончания = УголОкончания < 0 ? 0 : УголОкончания
    
    пер Т1x = ШиринаКартинки/2 - Радиус*Cos(УголНачала)
    пер Т1y = ШиринаКартинки/2 - Радиус*Sin(УголНачала)
    пер Т2x = ШиринаКартинки/2 - Радиус*Cos(УголОкончания)
    пер Т2y = ШиринаКартинки/2 - Радиус*Sin(УголОкончания)
    пер Т3x = ШиринаКартинки/2 - ВнутреннийРадиус*Cos(УголОкончания)
    пер Т3y = ШиринаКартинки/2 - ВнутреннийРадиус*Sin(УголОкончания)
    пер Т4x = ШиринаКартинки/2 - ВнутреннийРадиус*Cos(УголНачала)
    пер Т4y = ШиринаКартинки/2 - ВнутреннийРадиус*Sin(УголНачала)

    возврат  
        "
        <path d='M %Т1x %Т1y A %Радиус %Радиус 0 0 1 %Т2x %Т2y L %Т3x %Т3y A %ВнутреннийРадиус %ВнутреннийРадиус 0 0 0 %Т4x %Т4y Z' fill='%Цвет'/>"
;