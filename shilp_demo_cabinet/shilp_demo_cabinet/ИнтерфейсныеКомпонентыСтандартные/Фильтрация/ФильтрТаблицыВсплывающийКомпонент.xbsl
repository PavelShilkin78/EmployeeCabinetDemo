@ВПроекте
статический метод Показать(РасположениеВсплывающегоОкна: Компонент, ОписаниеПоляФильтра: ФильтрТаблицы.ОписаниеПоляФильтра): ФильтрТаблицы.ОписаниеПоляФильтра?
    знч ВсплывающийКомпонент = новый ФильтрТаблицыВсплывающийКомпонент(ОписаниеПоляФильтра = ОписаниеПоляФильтра)
    ВсплывающийКомпонент.Инициализировать()
    пер Результат = ВсплывающийКомпонент.ОткрытьВоВсплывающемОкне(
                        РасположениеВсплывающегоОкна = РасположениеВсплывающегоОкна, 
                        ОжидатьЗакрытия = Истина
                    ) как ФильтрТаблицы.ОписаниеПоляФильтра?
    возврат Результат
;

@ВПроекте
статический метод Показать(РасположениеВсплывающегоОкна: Компонент, СписокВыбора: Массив<ЭлементСпискаЗначений<Ууид>>, ВыбранныеЗначения: Множество<Ууид>): Множество<Ууид>?
    знч ВсплывающийКомпонент = новый ФильтрТаблицыВсплывающийКомпонент(
        СписокВыбора = СписокВыбора, 
        ВыбранныеЗначения = ВыбранныеЗначения
    )
    ВсплывающийКомпонент.ИнициализироватьСписокВыбора()
    знч Результат = ВсплывающийКомпонент.ОткрытьВоВсплывающемОкне(
                        РасположениеВсплывающегоОкна = РасположениеВсплывающегоОкна, 
                        ОжидатьЗакрытия = Истина
                    ) как Множество<Ууид>?
    возврат Результат
;

@Обработчик
метод ПослеСоздания()
    ИдентификаторСписка = новый Ууид()
;

@ВПодсистеме
@НаСервере @НаКлиенте
конст ПСЕВДОНИМ_ОПИСАНИЯ_СТРОКИ = "СущностьОписаниеСтроки"

метод ИсточникДанныхСпискаСущностей(): ДинамическийСписок
    знч Список = новый ДинамическийСписок()
    если ОписаниеПоляФильтра == Неопределено
        возврат Список
    ;
    Список.ОсновнаяТаблица.Таблица = ОписаниеПоляФильтра.ОсновнаяТаблица
    Список.Поля.Добавить(новый ПолеДинамическогоСписка(Выражение = "Ссылка"))
    Список.Поля.Добавить(новый ПолеДинамическогоСписка(Выражение = "Ссылка.Представление"))
    если ОписаниеПоляФильтра.ПолеОписанияСтроки != Неопределено
        знч ПолеОписанияСтроки = ОписаниеПоляФильтра.ПолеОписанияСтроки
        ПолеОписанияСтроки.Псевдоним = ПСЕВДОНИМ_ОПИСАНИЯ_СТРОКИ
        Список.Поля.Добавить(ОписаниеПоляФильтра.ПолеОписанияСтроки)
    ;
    
    для Сортировка из ОписаниеПоляФильтра.Сортировка
        Список.Поля.Добавить(новый ПолеДинамическогоСписка(Выражение = Сортировка.Поле))
    ;
    
    пер ЭлементФильтра = новый ЭлементФильтра()
    ЭлементФильтра.Поле = "Ссылка.Представление"
    ЭлементФильтра.Значение = Неопределено
    ЭлементФильтра.ВидСравнения = ВидСравнения.Содержит
    ЭлементФильтра.Использовать = Ложь
    Список.Фильтр.Элементы.Добавить(ЭлементФильтра)
    Список.Сортировка.ДобавитьВсе(ОписаниеПоляФильтра.Сортировка)

    возврат Список
;

метод ОписаниеСтрокиСпискаСущностей(ДанныеСтроки: СтрокаДинамическогоСписка): Строка
    знч ПолеДополнительногоЗначения = ОписаниеПоляФильтра?.ПолеОписанияСтроки
    если ПолеДополнительногоЗначения == Неопределено
        возврат ""
    иначе
        возврат ДанныеСтроки.Данные.ПолучитьИлиУмолчание(ПолеДополнительногоЗначения.Псевдоним).ВСтроку()
    ;
;


@НаСервере @ДоступноСКлиента
статический метод ДанныеГруппаВыбораЕдинственногоЗначения(ОписаниеПоляФильтра: ФильтрТаблицы.ОписаниеПоляФильтра): Массив<ЭлементСпискаЗначений<Сущность.Ключ|Перечисление|Неопределено>>
    знч Данные: Массив<ЭлементСпискаЗначений<Сущность.Ключ|Перечисление|Неопределено>>
    
    знч Поля: Множество<Строка> = {"Ссылка", "Представление"}
    пер Сортировка: Множество<Строка>
    
    если ОписаниеПоляФильтра.ПолеОписанияСтроки != Неопределено
        Поля.Добавить("%{ОписаниеПоляФильтра.ПолеОписанияСтроки.Выражение} как %{ПСЕВДОНИМ_ОПИСАНИЯ_СТРОКИ}")
    иначе
        Поля.Добавить("Неопределено как %{ПСЕВДОНИМ_ОПИСАНИЯ_СТРОКИ}")
    ;
    
    для Элемент из ОписаниеПоляФильтра.Сортировка
        Поля.Добавить(Элемент.Поле)
        Сортировка.Добавить("%{Элемент.Поле} %{Элемент.НаправлениеСортировки == НаправлениеСортировки.ПоВозрастанию ? "ВОЗР" : "УБЫВ"}")
    ;
    
    пер ВыражениеСортировки: Строка
    если не Сортировка.Пусто()
        ВыражениеСортировки = "УПОРЯДОЧИТЬ ПО %{Сортировка.Соединить(", ")}"
    ;
        
    пер Запрос = новый ПроизвольныйЗапрос() // текст запроса динамический
    Запрос.Текст = 
        "Выбрать
            %{Поля.Соединить(", ")}
         Из
            %{ОписаниеПоляФильтра.ОсновнаяТаблица}
            %ВыражениеСортировки"
    исп Результат = Запрос.Выполнить()
    для Элемент из Результат
        знч СтрокаРадиоГруппы = новый ЭлементСпискаЗначений<Сущность.Ключ|Перечисление|Неопределено>(
            Значение = Элемент.Ссылка,Представление = Элемент.Представление)
        
        если Элемент[ПСЕВДОНИМ_ОПИСАНИЯ_СТРОКИ] != Неопределено
            СтрокаРадиоГруппы.Описание = Элемент[ПСЕВДОНИМ_ОПИСАНИЯ_СТРОКИ].Представление()
        ;
        Данные.Добавить(СтрокаРадиоГруппы)
    ;
    возврат Данные
;

метод ДанныеСпискаПеречислений(): Массив<ЭлементСпискаЗначений<Сущность.Ключ|Перечисление|Неопределено>>
    знч Данные: Массив<ЭлементСпискаЗначений<Сущность.Ключ|Перечисление|Неопределено>>
    если ОписаниеПоляФильтра.ВидФильтра == ФильтрТаблицы.ВидыФильтров.ФильтрПоСпискуПеречислений
        знч Элементы = (ОписаниеПоляФильтра.ТипЗначения как ТипПеречисление<Сущность.Ключ|Перечисление|Неопределено>).Элементы()
        для Элемент из Элементы
            Данные.Добавить(новый ЭлементСпискаЗначений(
                Представление = Элемент.Представление(),
                Значение = Элемент))
        ;
    ;
    возврат Данные
;

метод ОтметитьСтрокиСущностейИзФильтра()
    знч ЭлементФильтра = ОписаниеПоляФильтра.ЭлементФильтра как ЭлементФильтра
    если ЭлементФильтра.Использовать == Истина
        выбор ОписаниеПоляФильтра.ВидФильтра
        когда ФильтрПоСпискуСущностей
            знч Значения = ЭлементФильтра.Значение как Множество<Сущность.Ключ>?
            если ОписаниеПоляФильтра.ЗапретитьВыборНесколькихЗначений
                Компоненты.ГруппаВыбораЕдинственногоЗначения.Значение = Значения.ПервыйИлиУмолчание()
            иначе
                для Элемент из Значения
                    знч КлючСписка = (ОписаниеПоляФильтра.КлючиВиртуальнойТаблицы.ПолучитьИлиУмолчание(Элемент) ?? Элемент) как Сущность.Ключ
                    Компоненты.СписокСущностей.ОтметитьСтроку(КлючСписка, Истина)
                ;
            ;
        когда ФильтрПоСпискуПеречислений
            пер Значения = ЭлементФильтра.Значение как Множество<Перечисление>?
            если Значения != Неопределено
                если ОписаниеПоляФильтра.ЗапретитьВыборНесколькихЗначений
                    Компоненты.ГруппаВыбораЕдинственногоЗначения.Значение = Значения.ПервыйИлиУмолчание()
                иначе
                    для Строка из Компоненты.СписокПеречислений.Источник.Данные
                        если Значения.Содержит(Строка.Значение как Перечисление)
                            Компоненты.СписокПеречислений.ОтметитьСтроку(Строка, Истина)
                        ;
                    ;
                ;
            ;
        ;
    ;
;

метод УстановитьЗначение(От: Момент|ДатаВремя|Дата?, До: Момент|ДатаВремя|Дата?, ТипДиапазона: Тип)
    выбор От
    когда это Момент
        Значение = новый ЗакрытыйДиапазон<Момент>(От как Момент, До как Момент)
    когда это ДатаВремя
        Значение = новый ЗакрытыйДиапазон<ДатаВремя>(От как ДатаВремя, До как ДатаВремя)
    когда это Дата
        Значение = новый ЗакрытыйДиапазон<Дата>(От как Дата, До как Дата)
    иначе
        Значение = Неопределено
    ;
;

метод УстановитьЗначение(От: Момент|ДатаВремя|Дата?, ТипДиапазона: Тип)
    УстановитьЗначение(От, От, ТипДиапазона)
;

метод ИнициализироватьСписокВыбора()
    Компоненты.ГруппаВыборДоступныхФильтров.Видимость = Истина
;

метод СодержимоеГруппаВыборДоступныхФильтров(): Массив<Компонент>
    знч СодержимоеГруппы: Массив<Компонент>
    если СписокВыбора != Неопределено
        для Элемент из СписокВыбора
            СодержимоеГруппы.Добавить(новый Флажок(
                    Заголовок = Элемент.Представление,
                    Значение = ВыбранныеЗначения.Содержит(Элемент.Значение),
                    ПриИзменении = (Источник, Событие) -> ПриИзмененииФлажкаФильтра(Элемент, Событие.НовоеЗначение)))
        ;
    ;
    возврат СодержимоеГруппы
;

метод ПриИзмененииФлажкаФильтра(Элемент: ЭлементСпискаЗначений<Ууид>, Выбор: Булево)
    если Выбор
        ВыбранныеЗначения.Добавить(Элемент.Значение)
    иначе
        ВыбранныеЗначения.Удалить(Элемент.Значение)
    ;
;

метод ПриИзмененииВыбранногоЗначения(ИдентификаторСписка: Ууид, ВыбранноеЗначение: Сущность.Ключ)
    если этот.ИдентификаторСписка == ИдентификаторСписка
        этот.ВыбранноеЗначение = ВыбранноеЗначение
    ;
;

метод Инициализировать()
    выбор ОписаниеПоляФильтра.ВидФильтра
    когда ФильтрПоЗначению
        выбор ОписаниеПоляФильтра.ТипЗначения
        когда Тип<Число>
            Компоненты.ГруппаПолеВводаЧисел.Видимость = Истина
            ЗначениеЧислоОт = Неопределено
            ЗначениеЧислоДо = Неопределено
            знч ГруппаЭлементовФильтра = ОписаниеПоляФильтра.ЭлементФильтра как ГруппаЭлементовФильтра
            знч ЭлементФильтраОт = ГруппаЭлементовФильтра.Элементы[0] как ЭлементФильтра
            знч ЭлементФильтраДо = ГруппаЭлементовФильтра.Элементы[1] как ЭлементФильтра
            если ЭлементФильтраОт.Использовать
                ЗначениеЧислоОт =  ЭлементФильтраОт.Значение как Число?
            ;
            если ЭлементФильтраДо.Использовать
                ЗначениеЧислоДо =  ЭлементФильтраДо.Значение как Число?
            ;
        когда Тип<Строка>
            Компоненты.ГруппаПолеВводаЗначений.Видимость = Истина
            знч ЭлементФильтра = ОписаниеПоляФильтра.ЭлементФильтра как ЭлементФильтра
            если ЭлементФильтра.Использовать и ЭлементФильтра.Значение != Неопределено
                Значение = ЭлементФильтра.Значение как Строка
            ;
        ;
    когда ФильтрПоПериоду
        Компоненты.ГруппаПолеВводаЗначений.Видимость = Истина
        знч ГруппаЭлементовФильтра = ОписаниеПоляФильтра.ЭлементФильтра как ГруппаЭлементовФильтра
        знч ФильтрПоЗначению = ГруппаЭлементовФильтра.Элементы[0] как ЭлементФильтра
        знч ГруппаФильтраПоПериоду = ГруппаЭлементовФильтра.Элементы[1] как ГруппаЭлементовФильтра
        
        если ФильтрПоЗначению.Использовать
            УстановитьЗначение(ФильтрПоЗначению.Значение как Момент|ДатаВремя|Дата?, ОписаниеПоляФильтра.ТипЗначения)
        иначе если ГруппаФильтраПоПериоду.Использовать 
            УстановитьЗначение(
                От = (ГруппаФильтраПоПериоду.Элементы[0] как ЭлементФильтра).Значение как Момент|ДатаВремя|Дата?,
                До = (ГруппаФильтраПоПериоду.Элементы[1] как ЭлементФильтра).Значение как Момент|ДатаВремя|Дата, 
                ТипДиапазона = ОписаниеПоляФильтра.ТипЗначения)  
        ; 
    когда ФильтрБулево
        Компоненты.ГруппаРадиоКнопок.Видимость = Истина
        знч ЭлементФильтра = ОписаниеПоляФильтра.ЭлементФильтра как ЭлементФильтра
        если ЭлементФильтра.Использовать и ЭлементФильтра.Значение != Неопределено
            Значение = ЭлементФильтра.Значение как Булево
        ;
    когда ФильтрПоСпискуСущностей
        ИсточникДанныхСпискаСущностей = ИсточникДанныхСпискаСущностей()
        если ОписаниеПоляФильтра.ЗапретитьВыборНесколькихЗначений
            знч ЭлементФильтра = ОписаниеПоляФильтра.ЭлементФильтра как ЭлементФильтра
            если ЭлементФильтра.Использовать == Истина
                знч Значения = ЭлементФильтра.Значение как Множество<Сущность.Ключ>
                ВыбранноеЗначение = Значения.Единственный()
            ;
            ОтметкаСтрокиФильтраСущностей.ПодключитьОбработчик(&ПриИзмененииВыбранногоЗначения)
            Компоненты.СписокСущностей.ИспользоватьОтметкиСтрок = Ложь
        ;
        Компоненты.СписокСущностей.Видимость = Истина
        Компоненты.СписокСущностей.Обновить()
        ОтметитьСтрокиСущностейИзФильтра()
    когда ФильтрПоСпискуПеречислений
        если ОписаниеПоляФильтра.ЗапретитьВыборНесколькихЗначений
            Компоненты.ГруппаВыбораЕдинственногоЗначения.Видимость = Истина
            Компоненты.ГруппаВыбораЕдинственногоЗначения.Элементы = ДанныеСпискаПеречислений()
            ОтметитьСтрокиСущностейИзФильтра()
        иначе
            Компоненты.СписокПеречислений.Видимость = Истина
            Компоненты.СписокПеречислений.Источник.Данные = ДанныеСпискаПеречислений()
            ОтметитьСтрокиСущностейИзФильтра()
        ;
    ; 
;

метод КнопкаСброситьВсеВидимость(): Булево
    если ОписаниеПоляФильтра == Неопределено
        возврат Ложь
    ;
    выбор ОписаниеПоляФильтра.ВидФильтра
    когда ФильтрПоСпискуСущностей, ФильтрПоСпискуПеречислений
        возврат не ОписаниеПоляФильтра.ЗапретитьВыборНесколькихЗначений
    иначе
        возврат Ложь
    ;
;

метод КнопкаСброситьВсеПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    если ОписаниеПоляФильтра == Неопределено
        ВыбранныеЗначения.Очистить()
        возврат
    ;
    выбор ОписаниеПоляФильтра.ВидФильтра
    когда ФильтрПоСпискуСущностей
        Компоненты.СписокСущностей.ОчиститьОтмеченныеСтроки()
    когда ФильтрПоСпискуПеречислений
        Компоненты.СписокПеречислений.ОчиститьОтмеченныеСтроки()
    ;
;

метод СтрокаПоискаПриИзмененииТекстаРедактирования(Источник: ПолеВвода<Строка?>, Событие: СобытиеСДанными<Строка>)
    знч ЭлементФильтра = (ИсточникДанныхСпискаСущностей.Фильтр.Элементы[0] как ЭлементФильтра)
    если не Событие.Данные.Пусто()
        ЭлементФильтра.Значение = Событие.Данные
        ЭлементФильтра.Использовать = Истина
    иначе
        ЭлементФильтра.Значение = Неопределено
        ЭлементФильтра.Использовать = Ложь
    ;
    Компоненты.СписокСущностей.Обновить()
;

метод ВидимостьСтрокаПоиска(): Булево
   возврат КоличествоСтрок > 5
;

метод ЗаголовокКнопкиПрименить(): Строка 
    если СписокВыбора != Неопределено
        возврат "Применить"    
    ;
    пер КоличествоОтмеченныхСтрок: Число
    выбор ОписаниеПоляФильтра.ВидФильтра
    когда ФильтрПоСпискуСущностей
        если ОписаниеПоляФильтра.ЗапретитьВыборНесколькихЗначений
            возврат "Применить"
        иначе
            КоличествоОтмеченныхСтрок = Компоненты.СписокСущностей.ПолучитьОтмеченныеСтроки().Размер()
        ;
    когда ФильтрПоСпискуПеречислений
        КоличествоОтмеченныхСтрок = Компоненты.СписокПеречислений.ПолучитьОтмеченныеСтроки().Размер()
    ;
    если КоличествоОтмеченныхСтрок > 0
        возврат "Применить (%КоличествоОтмеченныхСтрок)"
    иначе
        возврат "Применить"
    ;
;

метод ПолеВводаЗначенийДопустимыеТипы(): Множество<Тип>
    знч ДопустимыеТипы: Множество<Тип>
    ДопустимыеТипы.Добавить(Тип<Неопределено>) 
    выбор ОписаниеПоляФильтра?.ТипЗначения
    когда Тип<Строка>, Тип<Число>
        ДопустимыеТипы.Добавить(ОписаниеПоляФильтра?.ТипЗначения)
    когда Тип<Момент>
        ДопустимыеТипы.Добавить(Тип<ЗакрытыйДиапазон<Момент>>) 
    когда Тип<ДатаВремя>
        ДопустимыеТипы.Добавить(Тип<ЗакрытыйДиапазон<ДатаВремя>>) 
    когда Тип<Дата>
        ДопустимыеТипы.Добавить(Тип<ЗакрытыйДиапазон<Дата>>) 
    ;
    возврат ДопустимыеТипы
;

метод ПолеВводаЗначенийНастройкиВводаДатыВремени(): НастройкиВводаДатыВремени
    возврат новый НастройкиВводаДатыВремени(ССекундами = Ложь)
;

метод ПолеВводаЗначенийПодсказкаВвода(): Строка
    пер Подсказка: Строка
    выбор ОписаниеПоляФильтра?.ТипЗначения
    когда Тип<Строка>
        Подсказка = "Поиск по строке"
    когда Тип<Число>
        Подсказка = "Введите число"
    ;
    возврат Подсказка
;

метод ПослеСозданияСтроки(Источник: Список<ДинамическийСписок>, Событие: СобытиеСДанными<СтрокаСписка<СтрокаДинамическогоСписка>>)
    знч СтрокаФильтраСущностей = Событие.Данные как СтрокаФильтраСущностей
    СтрокаФильтраСущностей.ИдентификаторСписка = ИдентификаторСписка
    если ОписаниеПоляФильтра.ЗапретитьВыборНесколькихЗначений 
    и ОписаниеПоляФильтра.ВидФильтра == ФильтрТаблицы.ВидыФильтров.ФильтрПоСпискуСущностей
        СтрокаФильтраСущностей.ВидимостьРадиоКнопки = Истина
        знч ЭлементФильтра = ОписаниеПоляФильтра.ЭлементФильтра как ЭлементФильтра
        если ЭлементФильтра.Использовать == Истина
            СтрокаФильтраСущностей.ВыбранноеЗначение = ВыбранноеЗначение
        ; 
    ;    
    КоличествоСтрок = КоличествоСтрок + 1 
;

метод КнопкаПрименитьПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    если СписокВыбора != Неопределено
        Закрыть(ВыбранныеЗначения)
        возврат
    ;
    
    выбор ОписаниеПоляФильтра.ВидФильтра
    когда ФильтрПоПериоду
        знч ГруппаЭлементовФильтра = ОписаниеПоляФильтра.ЭлементФильтра как ГруппаЭлементовФильтра
        знч ФильтрПоЗначению = ГруппаЭлементовФильтра.Элементы[0] как ЭлементФильтра
        знч ГруппаФильтраПоПериоду = ГруппаЭлементовФильтра.Элементы[1] как ГруппаЭлементовФильтра
        
        ФильтрПоЗначению.Использовать = Ложь
        ФильтрПоЗначению.Значение = Неопределено
        
        ГруппаФильтраПоПериоду.Использовать = Ложь
        (ГруппаФильтраПоПериоду.Элементы[0] как ЭлементФильтра).Значение = Неопределено
        (ГруппаФильтраПоПериоду.Элементы[1] как ЭлементФильтра).Значение = Неопределено 
        
        если Значение != Неопределено
            пер От: Дата|ДатаВремя|Момент?
            пер До: Дата|ДатаВремя|Момент?
            выбор Значение
            когда это ЗакрытыйДиапазон<Дата>
                От = (Значение как ЗакрытыйДиапазон<Дата>).От
                До = (Значение как ЗакрытыйДиапазон<Дата>).До
            когда это ЗакрытыйДиапазон<ДатаВремя>
                От = (Значение как ЗакрытыйДиапазон<ДатаВремя>).От
                До = (Значение как ЗакрытыйДиапазон<ДатаВремя>).До
            когда это ЗакрытыйДиапазон<Момент>
                От = (Значение как ЗакрытыйДиапазон<Момент>).От
                До = (Значение как ЗакрытыйДиапазон<Момент>).До
            ;
            если От == До
                ФильтрПоЗначению.Использовать = Истина
                ФильтрПоЗначению.Значение = От
            иначе
                ГруппаФильтраПоПериоду.Использовать = Истина
                (ГруппаФильтраПоПериоду.Элементы[0] как ЭлементФильтра).Значение = От
                (ГруппаФильтраПоПериоду.Элементы[1] как ЭлементФильтра).Значение = До
            ;
        ;
        
    когда ФильтрБулево, ФильтрПоЗначению
    
        выбор ОписаниеПоляФильтра.ТипЗначения
        когда Тип<Булево>, Тип<Строка>
            знч ЭлементФильтра = (ОписаниеПоляФильтра.ЭлементФильтра как ЭлементФильтра)
            если Значение != Неопределено
                ЭлементФильтра.Использовать = Истина
                ЭлементФильтра.Значение = Значение
            иначе   
                ЭлементФильтра.Использовать = Ложь
                ЭлементФильтра.Значение = Неопределено 
            ;
        когда Тип<Число>
            знч ГруппаЭлементовФильтра = ОписаниеПоляФильтра.ЭлементФильтра как ГруппаЭлементовФильтра
            знч ФильтрОт= ГруппаЭлементовФильтра.Элементы[0] как ЭлементФильтра
            знч ФильтрДо= ГруппаЭлементовФильтра.Элементы[1] как ЭлементФильтра
            ГруппаЭлементовФильтра.Использовать = Ложь
            если ЗначениеЧислоОт != Неопределено
                ФильтрОт.Использовать = Истина
                ФильтрОт.Значение = ЗначениеЧислоОт
                ГруппаЭлементовФильтра.Использовать = Истина
            иначе
                ФильтрОт.Использовать = Ложь
                ФильтрОт.Значение = Неопределено
            ;
            если ЗначениеЧислоДо != Неопределено
                ФильтрДо.Использовать = Истина
                ФильтрДо.Значение = ЗначениеЧислоДо
                ГруппаЭлементовФильтра.Использовать = Истина
            иначе
                ФильтрДо.Использовать = Ложь
                ФильтрДо.Значение = Неопределено
            ;
        ;
    когда ФильтрПоСпискуСущностей
        пер ОтмеченныеСтроки: Множество<Сущность.Ключ>
        если ОписаниеПоляФильтра.ЗапретитьВыборНесколькихЗначений
            если ВыбранноеЗначение != Неопределено
                ОтмеченныеСтроки.Добавить(ВыбранноеЗначение)
            ;
        иначе
            ОтмеченныеСтроки.ДобавитьВсе(Компоненты.СписокСущностей.ПолучитьОтмеченныеСтроки())
        ;
        знч ЭлементФильтра = (ОписаниеПоляФильтра.ЭлементФильтра как ЭлементФильтра)
        если ОтмеченныеСтроки.Пусто()
            ЭлементФильтра.Использовать = Ложь
            ЭлементФильтра.Значение = Неопределено
        иначе
            ЭлементФильтра.Использовать = Истина
            знч Значения: Множество<Сущность.Ключ>
            для Элемент из ОтмеченныеСтроки
                знч ЭтоКлючВиртуальнойТаблицы = Элемент.ПолучитьТип().Представление().ЗаканчиваетсяНа(".RecordKey")
                знч ЗначениеФильтра = ЭтоКлючВиртуальнойТаблицы ? (Элемент как неизвестно).Ссылка как Сущность.Ключ : Элемент
                если ЭтоКлючВиртуальнойТаблицы
                     ОписаниеПоляФильтра.КлючиВиртуальнойТаблицы.Вставить(ЗначениеФильтра, Элемент)
                ;                
                Значения.Добавить(ЗначениеФильтра)
            ;
            ЭлементФильтра.Значение = Значения
        ;
    когда ФильтрПоСпискуПеречислений
        пер ОтмеченныеСтроки: Множество<Перечисление>
        если ОписаниеПоляФильтра.ЗапретитьВыборНесколькихЗначений
           ОтмеченныеСтроки.Добавить(Компоненты.ГруппаВыбораЕдинственногоЗначения.Значение как Перечисление)
        иначе  
            для Элемент из Компоненты.СписокПеречислений.ПолучитьОтмеченныеСтроки()
                ОтмеченныеСтроки.Добавить(Элемент.Значение как Перечисление)
            ;
        ;
       знч ЭлементФильтра = (ОписаниеПоляФильтра.ЭлементФильтра как ЭлементФильтра)
        если ОтмеченныеСтроки.Пусто()
            ЭлементФильтра.Использовать = Ложь
            ЭлементФильтра.Значение = Неопределено
        иначе
            ЭлементФильтра.Использовать = Истина
            ЭлементФильтра.Значение = ОтмеченныеСтроки
        ;
    ; 
    Закрыть(ОписаниеПоляФильтра)
;