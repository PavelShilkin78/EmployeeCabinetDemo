импорт ИнтерфейсныеКомпонентыСтандартные

@ВПроекте
перечисление ДействиеВФорме
    НеИзменен умолчание,
    Изменен,
    Удален
;
    
@ВПодсистеме
метод ШиринаФормыПоШиринеОкна(МаксимальнаяШирина: Число, МинимальнаяШирина: Число, КоэффициентЗаполненияОкна: Число): Число
    пер Ширина: Число
    пер ШиринаОкна: Число = КлиентскоеУстройство.ШиринаОкнаПриложения
    выбор
    когда ШиринаОкна <= МинимальнаяШирина
        Ширина = КлиентскоеУстройство.ШиринаОкнаПриложения
    когда ШиринаОкна > МаксимальнаяШирина / КоэффициентЗаполненияОкна
        Ширина = МаксимальнаяШирина
    иначе      
        Ширина = КлиентскоеУстройство.ШиринаОкнаПриложения * КоэффициентЗаполненияОкна
    ;
    возврат Ширина
;

@ВПроекте 
метод ПоказатьУведомление(Заголовок: Строка, Текст: Строка, Коннотация: ОценкаИнформации = ОценкаИнформации.Обычная,
    Команды: ФрагментКомандногоИнтерфейса<КомандаСПараметром<Уведомление>>? = Неопределено, Данные: неизвестно = Неопределено)
    пер Уведомление = новый Уведомление(Заголовок, Текст)
    Уведомление.Важность = ВажностьКлиентскогоУведомления.Обычная
    Уведомление.Изображение = Ресурс{ИсходДействия/Успешно.svg}.Ссылка
    Уведомление.Таймаут = 15с
    Уведомление.ОценкаИнформации = Коннотация
    Уведомление.Команды = Команды
    Уведомление.Данные = Данные
    Уведомление.Показать()
;

@ВПроекте
метод ЗаголовокФормыСправочника(ФормаОбъекта: ФормаОбъекта<неизвестно>, ИмяСвойства: Строка = "Наименование", ЗаголовокНового: Строка = "Новый", ЗаголовокПустого: Строка = "<Не задано>"): Строка
    знч Представление = ФормаОбъекта.Объект[ИмяСвойства]
    если Представление.Пусто()
        если ФормаОбъекта.ЭтоНовый()
            возврат ЗаголовокНового
        иначе
            возврат ЗаголовокПустого
        ;
    иначе
        возврат Представление
    ;
;

@ВПроекте
метод ПроверкаЗаполенияПоляСтрока(КомпонентФормы: ПолеВвода<Строка>, ИспользоватьПроверку: Булево = Истина): Булево
    знч Ошибка = ИспользоватьПроверку и КомпонентФормы.Значение.Пусто()
    КомпонентФормы.РезультатПроверкиДанных = Ошибка ? РезультатПроверкиДанных.Ошибка : РезультатПроверкиДанных.Отсутствует
    возврат не Ошибка
;

@ВПроекте
метод ПроверкаЗаполенияПоляЧисло(КомпонентФормы: ПолеВвода<Число>, ИспользоватьПроверку: Булево = Истина): Булево
    знч Ошибка = ИспользоватьПроверку и КомпонентФормы.Значение == 0
    КомпонентФормы.РезультатПроверкиДанных = Ошибка ? РезультатПроверкиДанных.Ошибка : РезультатПроверкиДанных.Отсутствует
    возврат не Ошибка
;

@ВПроекте
метод ПроверкаЗаполенияПоляДата(КомпонентФормы: ПолеВвода<Дата?>, ИспользоватьПроверку: Булево = Истина): Булево
    знч Ошибка = ИспользоватьПроверку и (КомпонентФормы.Значение == Неопределено или КомпонентФормы.Значение == Дата{})
    КомпонентФормы.РезультатПроверкиДанных = Ошибка ? РезультатПроверкиДанных.Ошибка : РезультатПроверкиДанных.Отсутствует
    возврат не Ошибка
;

@ВПроекте
метод ПроверкаЗаполенияПолей(КомпонентыФормы: Множество<ПолеВвода<Строка>|ПолеВвода<Число>>): Булево
    пер РезультатПроверки = новый Массив<Булево>()
    для КомпонентФормы из КомпонентыФормы
        если КомпонентФормы это ПолеВвода<Число>
            РезультатПроверки.Добавить(ПроверкаЗаполенияПоляЧисло(КомпонентФормы как ПолеВвода<Число>))
        иначе если КомпонентФормы это ПолеВвода<Строка>
            РезультатПроверки.Добавить(ПроверкаЗаполенияПоляСтрока(КомпонентФормы как ПолеВвода<Строка>))
        ;
    ;
    возврат не РезультатПроверки.Содержит(Ложь)
;
