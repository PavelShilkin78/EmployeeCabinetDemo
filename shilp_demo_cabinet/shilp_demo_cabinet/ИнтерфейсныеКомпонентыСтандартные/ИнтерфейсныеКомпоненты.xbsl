импорт ОбщиеСтандартные

@ВПроекте
перечисление РежимыРаботыПоля
    Обычный умолчание
    ВводСсылки,
    МногострочныйРежим
;

@ВПодсистеме
структура ВложенныйКомпонентСведения
    обз пер Компонент: неизвестно
    обз пер Ширина: Число
    обз пер МаксимальнаяШирина: Число
    обз пер МинимальнаяШирина: Число
    обз пер ШиринаОстатка: Число
    обз пер МинимальнаяШиринаОстатка: Число
;

@ВПроекте
@НаКлиенте
@ИменованныеПараметры
метод ИнициализироватьТаблицу(Таблица: Таблица<неизвестно>,
    ТолькоЧтение: Булево = Истина, ИспользованиеПоиска: Булево = Ложь,
    РастягиватьПоВертикали: Булево = Истина, РастягиватьПоГоризонтали: Булево = Истина,
    РазмерСтраницы: Число = 15, ВидОтображения: ВидОтображенияТаблицы = ВидОтображенияТаблицы.Таблица,
    Навигация: НавигацияВСписке = НавигацияВСписке.ПодгрузкаПриПрокрутке, ПрокруткаПоВертикали: Булево = Истина,
    ОтображатьШапку: Булево = Ложь, АвтоВыделениеСтроки: АвтоВыделениеСтроки|Авто = АвтоВыделениеСтроки.Выключено, 
    ИспользоватьВыделениеСтроки: Булево = Ложь, ИспользоватьОтметкиСтрок: Булево? = Неопределено, ОтображатьНумерациюСтрок: Булево = Ложь)
    
    Таблица.ТолькоЧтение = ТолькоЧтение
    Таблица.ИспользованиеПоиска = ИспользованиеПоиска
    Таблица.РастягиватьПоВертикали = РастягиватьПоВертикали
    Таблица.РастягиватьПоГоризонтали = РастягиватьПоГоризонтали
    Таблица.РазмерСтраницы = РазмерСтраницы
    Таблица.ВидОтображения = ВидОтображения
    Таблица.Навигация = Навигация
    Таблица.ПрокруткаПоВертикали = ПрокруткаПоВертикали
    Таблица.ОтображатьШапку = ОтображатьШапку
    Таблица.АвтоВыделениеСтроки = АвтоВыделениеСтроки
    Таблица.ИспользоватьВыделениеСтроки = ИспользоватьВыделениеСтроки
    Таблица.ОтображатьНумерациюСтрок = ОтображатьНумерациюСтрок
    
    если ИспользоватьОтметкиСтрок != Неопределено
        Таблица.ИспользоватьОтметкиСтрок = ИспользоватьОтметкиСтрок
    ;
;

@ВПроекте
метод ПолучитьИзображениеПоНомеру(Номер: Число): ДвоичныйОбъект.Ссылка? 
    если Номер == 1 
        возврат Ресурс{ПорядковыеНомера/Один.svg}.Ссылка
    иначе если Номер == 2
        возврат Ресурс{ПорядковыеНомера/Два.svg}.Ссылка
    иначе если Номер == 3
        возврат Ресурс{ПорядковыеНомера/Три.svg}.Ссылка
    иначе если Номер == 4
        возврат Ресурс{ПорядковыеНомера/Четыре.svg}.Ссылка
    иначе если Номер == 5
        возврат Ресурс{ПорядковыеНомера/Пять.svg}.Ссылка
    иначе если Номер == 6
        возврат Ресурс{ПорядковыеНомера/Шесть.svg}.Ссылка
    иначе если Номер == 7 
        возврат Ресурс{ПорядковыеНомера/Семь.svg}.Ссылка
    иначе если Номер == 8
        возврат Ресурс{ПорядковыеНомера/Восемь.svg}.Ссылка
    иначе если Номер == 9
        возврат Ресурс{ПорядковыеНомера/Девять.svg}.Ссылка
    иначе
        возврат Неопределено
    ;     
;

@ВПроекте
@НаКлиенте
метод ИнициализироватьПодчиненныеКомпоненты(Параметр: неизвестно)
    знч ИнициализируемыеКомпоненты: Массив<ИнициализируемыйКомпонент>
    если Параметр это Обходимое<Объект?>
        знч Компоненты: Обходимое<Объект?> = Параметр
        для Компонент из Компоненты
            если Компонент это ИнициализируемыйКомпонент
                ИнициализируемыеКомпоненты.Добавить(Компонент как ИнициализируемыйКомпонент)
            ;
        ;
    иначе
        знч Свойства: ЧитаемоеМножество<ОтражениеСвойства> = Параметр.ПолучитьТип().ПолучитьСвойства()
        для Свойство из Свойства
            знч Компонент = Свойство.Получить(Параметр)
            если Компонент это ИнициализируемыйКомпонент
                ИнициализируемыеКомпоненты.Добавить(Компонент как ИнициализируемыйКомпонент)
            ;
        ;
    ;
    для Компонент из ИнициализируемыеКомпоненты
        Компонент.Инициализировать()
    ;
;

@ВПроекте
@НаКлиенте
метод СброситьРезультатПроверкиДанных(Параметр: неизвестно)
    если Параметр это Обходимое<Объект?>
        знч Компоненты: Обходимое<Объект?> = Параметр
        для Компонент из Компоненты
            если Компонент это Компонент
                СброситьРезультатПроверкиДанныхКомпонента(Компонент как Компонент)
            ;
        ;
    иначе
        знч Свойства: ЧитаемоеМножество<ОтражениеСвойства> = Параметр.ПолучитьТип().ПолучитьСвойства()
        для Свойство из Свойства
            знч Компонент = Свойство.Получить(Параметр)
            если Компонент это Компонент
                СброситьРезультатПроверкиДанныхКомпонента(Компонент как Компонент)
            ;
        ;
    ;  
;

@ВПроекте
@НаКлиенте
метод ОбновитьКомпоненты(Параметр: неизвестно)
    знч ОбновляемыеКомпоненты: Массив<ОбновляемыйКомпонент>
    если Параметр это Обходимое<Объект?>
        знч Компоненты: Обходимое<Объект?> = Параметр
        для Компонент из Компоненты
            если Компонент это ОбновляемыйКомпонент
                ОбновляемыеКомпоненты.Добавить(Компонент как ОбновляемыйКомпонент)
            ;
        ;
    иначе
        знч Свойства: ЧитаемоеМножество<ОтражениеСвойства> = Параметр.ПолучитьТип().ПолучитьСвойства()
        для Свойство из Свойства
            знч Компонент = Свойство.Получить(Параметр)
            если Компонент это ОбновляемыйКомпонент
                ОбновляемыеКомпоненты.Добавить(Компонент как ОбновляемыйКомпонент)
            ;
        ;
    ;
    для Компонент из ОбновляемыеКомпоненты
        Компонент.Обновить()
    ;
;

@ВПроекте
@НаКлиенте
метод ПользовательИспользуетТелефон(): Булево
    возврат КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон
;

@ВПроекте
@НаКлиенте
метод ВыделитьВесьТекст(ПолеВвода: ПолеВвода<неизвестно>, Ожидание: Булево = Ложь)
    знч Выделить = метод() ->
        знч ВесьТекст = ПолеВвода.ТекстРедактирования.ПолучитьСтроки()
        ПолеВвода.УстановитьДиапазонВыделения(новый ЗакрытыйДиапазон<ПозицияВТексте>(
            От = новый ПозицияВТексте(0, 0),
            До = новый ПозицияВТексте(ВесьТекст.Граница(), ВесьТекст.Последний().Длина())
        ))
    ;
    если Ожидание
        ПолеВвода.ПодключитьОбработчикТаймера(Выделить, 210мс, Истина)
    иначе
        Выделить()
    ;       
;

@ВПроекте
@НаКлиенте
структура ИнформацияОЗамещающейФорме
    обз пер ЗамещаемаяФорма: ЗамещаемаяФорма
    пер ПредставлениеКнопкиНазад: Строка
;

@НаКлиенте
конст ПРЕДСТАВЛЕНИЕ_КОМАНДЫ_ВОЗВРАТ_ПО_УМОЛЧАНИЮ = "Назад"

@ВПроекте
@НаКлиенте
метод ОткрытьЗамещающуюФорму(ЗамещаемаяФорма: ЗамещаемаяФорма, ЗамещающаяФорма: Форма, ЗаголовокКомандыВозврата: Строка = ПРЕДСТАВЛЕНИЕ_КОМАНДЫ_ВОЗВРАТ_ПО_УМОЛЧАНИЮ)
    если КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон
        ЗамещающаяФорма.ОткрытьВМодальномОкне()
        возврат
    ;
    знч КорневаяФорма = КорневаяФорма(ЗамещаемаяФорма) как Форма
    пер СодержимоеКорневойФормы: СтековаяГруппа?
    знч КорневаяФормаСодержимое = (КорневаяФорма.Содержимое как ПроизвольныйШаблонФормы).Содержимое
    если (КорневаяФормаСодержимое это СтековаяГруппа)
        СодержимоеКорневойФормы = КорневаяФормаСодержимое как СтековаяГруппа
    иначе
        СодержимоеКорневойФормы = СтековаяГруппа(ЗамещаемаяФорма)
    ;
    СодержимоеКорневойФормы.Содержимое.Добавить(ЗамещающаяФорма)
    
    знч ЗамещающаяФормаИнфо = новый ИнформацияОЗамещающейФорме(ЗамещаемаяФорма = ЗамещаемаяФорма, ПредставлениеКнопкиНазад = ЗаголовокКомандыВозврата)
        
    (КлиентскоеПриложение как ДержательЗамещающихФорм).ЗамещающиеФормы.Вставить(ЗамещающаяФорма, ЗамещающаяФормаИнфо)
    (КлиентскоеПриложение как ДержательЗамещающихФорм).ЗамещаемыеФормы.Вставить(ЗамещаемаяФорма, ЗамещающаяФорма)
    (КорневаяФорма.ДополнительныеКоманды.Элементы[0] как ОбычнаяКоманда).Представление = ЗаголовокКомандыВозврата
;

@ВПроекте
@НаКлиенте
метод ЗакрытьЗамещающуюФорму(ФормаПодчиненная: Форма)
    знч СобственнаяМодифицированность = (ФормаПодчиненная как неизвестно).СобственнаяМодифицированность как Булево
    если СобственнаяМодифицированность
        если Диалог.Вопрос<Булево>(
            "У Вас есть несохраненные данные. Вы действительно хотите выйти?", 
            {новый ЭлементСпискаЗначений<Булево>(Значение = Ложь, Представление = "Остаться"), 
            новый ЭлементСпискаЗначений<Булево>(Значение = Истина, Представление = "Выйти")}, 
            "Внимание") != Истина
            возврат
        ;
    ;
    
    знч ЗамещающиеФормы = (КлиентскоеПриложение как ДержательЗамещающихФорм).ЗамещающиеФормы
    пер ИнформацияОФорме = ЗамещающиеФормы.ПолучитьИлиУмолчание(ФормаПодчиненная)
    если ИнформацияОФорме == Неопределено
        ФормаПодчиненная.Закрыть()
        возврат
    ;
    ЗамещающиеФормы.Удалить(ФормаПодчиненная)
    знч КорневаяФорма = КорневаяФорма(ИнформацияОФорме.ЗамещаемаяФорма) как Форма
    если (КорневаяФорма.Содержимое как ПроизвольныйШаблонФормы).Содержимое это СтековаяГруппа
        знч СодержимоеКорневойФормы = (КорневаяФорма.Содержимое как ПроизвольныйШаблонФормы).Содержимое как СтековаяГруппа
        СодержимоеКорневойФормы.Содержимое.УдалитьПоИндексу(СодержимоеКорневойФормы.Содержимое.Граница())
        (КлиентскоеПриложение как ДержательЗамещающихФорм).ЗамещаемыеФормы.Удалить(ИнформацияОФорме.ЗамещаемаяФорма)
    ;
    ИнформацияОФорме = ЗамещающиеФормы.ПолучитьИлиУмолчание(ИнформацияОФорме.ЗамещаемаяФорма как Форма)
    если ИнформацияОФорме != Неопределено
        (КорневаяФорма.ДополнительныеКоманды.Элементы[0] как ОбычнаяКоманда).Представление = ИнформацияОФорме.ПредставлениеКнопкиНазад
    ;
;

@НаКлиенте
метод СброситьРезультатПроверкиДанныхКомпонента(Компонент: Компонент)
    выбор Компонент
    когда это ПолеВвода<неизвестно>
        знч ПолеВвода = Компонент как ПолеВвода<неизвестно>
        ПолеВвода.РезультатПроверкиДанных = РезультатПроверкиДанных.Отсутствует
        ПолеВвода.СообщениеИнформация = ""
        ПолеВвода.СообщениеОшибка = ""
        ПолеВвода.СообщениеПредупреждение = ""
        ПолеВвода.СообщениеУспех = ""        
    когда это КомпонентСПроверкойДанных
        знч КомпонентСПроверкой = Компонент как КомпонентСПроверкойДанных
        КомпонентСПроверкой.Коннотация = РезультатПроверкиДанных.Отсутствует
        КомпонентСПроверкой.СообщениеИнформация = ""
        КомпонентСПроверкой.СообщениеОшибка = ""
        КомпонентСПроверкой.СообщениеПредупреждение = ""
        КомпонентСПроверкой.СообщениеУспех = ""
    ;    
;


@ВПроекте
@НаКлиенте
метод ЗаголовокЗамещаемойФормы(ЗамещаемаяФорма: ЗамещаемаяФорма): Строка
    пер Заголовок: Строка
    знч КонечнаяЗамещающаяФорма = КонечнаяЗамещающаяФорма(ЗамещаемаяФорма)
    если КонечнаяЗамещающаяФорма == ЗамещаемаяФорма
        Заголовок = ЗамещаемаяФорма.Заголовок()
    иначе если КонечнаяЗамещающаяФорма != Неопределено
        Заголовок = КонечнаяЗамещающаяФорма.Заголовок
    ;
    возврат Заголовок
;

@ВПроекте
@НаКлиенте
метод КомандыСозданияЗамещаемойФормы(ЗамещаемаяФорма: ЗамещаемаяФорма): Команда|ГруппаКомандногоИнтерфейса<Команда>|Неопределено
    пер КомандыСоздания: Команда|ГруппаКомандногоИнтерфейса<Команда>|Неопределено
    знч КонечнаяЗамещающаяФорма = КонечнаяЗамещающаяФорма(ЗамещаемаяФорма)
    если КонечнаяЗамещающаяФорма == ЗамещаемаяФорма
        КомандыСоздания = ЗамещаемаяФорма.КомандыСоздания()
    иначе если КонечнаяЗамещающаяФорма != Неопределено
        КомандыСоздания = КонечнаяЗамещающаяФорма.КомандыСоздания
    ;
    возврат КомандыСоздания
;

@ВПроекте
@НаКлиенте
метод ДополнительныеКомандыЗамещаемойФормы(ЗамещаемаяФорма: ЗамещаемаяФорма): ФрагментКомандногоИнтерфейса<Команда>?
    пер ДополнительныеКоманды: ФрагментКомандногоИнтерфейса<Команда>?
    знч КонечнаяЗамещающаяФорма = КонечнаяЗамещающаяФорма(ЗамещаемаяФорма)
    если КонечнаяЗамещающаяФорма == ЗамещаемаяФорма
        ДополнительныеКоманды = ЗамещаемаяФорма.ДополнительныеКоманды()
    иначе если КонечнаяЗамещающаяФорма != Неопределено
        ДополнительныеКоманды = новый ФрагментКомандногоИнтерфейса<Команда>()
        если КонечнаяЗамещающаяФорма.ДополнительныеКоманды != Неопределено
            ДополнительныеКоманды.Элементы.ДобавитьВсе(КонечнаяЗамещающаяФорма.ДополнительныеКоманды.Элементы)
        ;
    ;
    если КонечнаяЗамещающаяФорма != ЗамещаемаяФорма
        // В ДополнительныеКоманды вставляем команду возврата к предыдущей форме
        знч ОбработчикКомандыВозврата = метод(Команда: ОбычнаяКоманда) ->
                ЗакрытьЗамещающуюФорму(КонечнаяЗамещающаяФорма)
            ;
            
        знч ПредставлениеКнопкиНазад = (КлиентскоеПриложение как ДержательЗамещающихФорм)
            .ЗамещающиеФормы.ПолучитьИлиУмолчание(КонечнаяЗамещающаяФорма)?.ПредставлениеКнопкиНазад ?? ПРЕДСТАВЛЕНИЕ_КОМАНДЫ_ВОЗВРАТ_ПО_УМОЛЧАНИЮ
            
        знч КомандаВозврата = новый ОбычнаяКоманда(ОбработчикКомандыВозврата, ПредставлениеКнопкиНазад, Ресурс{СтрелкаВлево.svg}.Ссылка)
        если ДополнительныеКоманды == Неопределено
            ДополнительныеКоманды = новый ФрагментКомандногоИнтерфейса<Команда>()
        ;
        ДополнительныеКоманды.Элементы.Вставить(0, КомандаВозврата)
    ;
    возврат ДополнительныеКоманды
;

@ВПроекте
@НаКлиенте
метод ОбычныеКомандыЗамещаемойФормы(ЗамещаемаяФорма: ЗамещаемаяФорма): ФрагментКомандногоИнтерфейса<Команда>?
    пер ОбычныеКоманды: ФрагментКомандногоИнтерфейса<Команда>?
    знч КонечнаяЗамещающаяФорма = КонечнаяЗамещающаяФорма(ЗамещаемаяФорма)
    если КонечнаяЗамещающаяФорма == ЗамещаемаяФорма
        ОбычныеКоманды = ЗамещаемаяФорма.ОбычныеКоманды()
    иначе если КонечнаяЗамещающаяФорма != Неопределено
        ОбычныеКоманды = КонечнаяЗамещающаяФорма.ОбычныеКоманды
    ;
    возврат ОбычныеКоманды
;

@ВПроекте
@НаКлиенте
метод ОсновнаяКомандаЗамещаемойФормы(ЗамещаемаяФорма: ЗамещаемаяФорма): Команда?
    пер ОсновнаяКоманда: Команда?
    знч КонечнаяЗамещающаяФорма = КонечнаяЗамещающаяФорма(ЗамещаемаяФорма)
    если КонечнаяЗамещающаяФорма == ЗамещаемаяФорма
        ОсновнаяКоманда = ЗамещаемаяФорма.ОсновнаяКоманда()
    иначе если КонечнаяЗамещающаяФорма != Неопределено
        ОсновнаяКоманда = КонечнаяЗамещающаяФорма.ОсновнаяКоманда
    ;
    возврат ОсновнаяКоманда
;

@ВПроекте
@НаКлиенте
метод УстановитьСообщениеОшибка(ПолеВвода: ПолеВвода<неизвестно>, СообщениеОшибка: Строка)
    ПолеВвода.СообщениеОшибка = СообщениеОшибка
    ПолеВвода.РезультатПроверкиДанных = РезультатПроверкиДанных.Ошибка
;

@ВПроекте
@НаКлиенте
метод УстановитьСообщениеОшибка(Компонент: КомпонентСПроверкойДанных, СообщениеОшибка: Строка)
    Компонент.СообщениеОшибка = СообщениеОшибка
    Компонент.Коннотация = РезультатПроверкиДанных.Ошибка
;

@ВПроекте
@НаКлиенте @НаСервере
структура ЭлементПроцесса
    пер ОсновнойТекст: Строка
    пер ВспомогательныйТекст: Строка
    пер UrlИзображения: Строка
    пер Цвет: Строка
;

@ВПроекте
@НаСервере @ДоступноСКлиента
статический метод ЗвездыКартинкой(ЧислоЗвезд: Число, Значение: Число, Цвет: Строка = ""): ДвоичныйОбъект.Ссылка
    знч ШиринаЗвезды = 32
    если Цвет == ""
        Цвет = БиблиотекаЦветов.ЦветСтрокой(БиблиотекаЦветов.ВидыЦвета.Оранжевый)
    ;
    знч ВысотаКартинки = ШиринаЗвезды*Cos(МенеджерЧисел.ЧислоПи()/10) + 4
    пер КартинкаSvg = "<svg viewBox='0 0 %{ЧислоЗвезд*ШиринаЗвезды} %ВысотаКартинки' width='%{ЧислоЗвезд*ШиринаЗвезды}' height='%ВысотаКартинки' xmlns='http://www.w3.org/2000/svg'>"
    пер Индекс = 0
    пока Индекс < ЧислоЗвезд
        пер Разница = Значение - Индекс
        если Разница > 0.75
            КартинкаSvg += Звезда(ШиринаЗвезды, Индекс, Цвет)
        иначе если Разница > 0.25
            КартинкаSvg += ПолуЗвезда(ШиринаЗвезды, Индекс, Цвет)
        иначе
            КартинкаSvg += ПустаяЗвезда(ШиринаЗвезды, Индекс, Цвет)
        ;
        Индекс += 1
    ;
    КартинкаSvg += 
        "
        </svg>"
    возврат ОбъектноеХранилище.ЗагрузитьИзСтроки(КартинкаSvg, "image/svg+xml").Ссылка
;

@НаКлиенте
метод КорневаяФорма(ЗамещаемаяФорма: ЗамещаемаяФорма): ЗамещаемаяФорма
    пер ИнформацияОФорме = (КлиентскоеПриложение как ДержательЗамещающихФорм).ЗамещающиеФормы.ПолучитьИлиУмолчание(ЗамещаемаяФорма как Форма)
    если ИнформацияОФорме == Неопределено
        возврат ЗамещаемаяФорма
    иначе
        возврат КорневаяФорма(ИнформацияОФорме.ЗамещаемаяФорма)
    ;
;

@НаКлиенте
метод КонечнаяЗамещающаяФорма(ЗамещаемаяФорма: ЗамещаемаяФорма): Форма?
    знч ЗамещаемыеФормы = (КлиентскоеПриложение как ДержательЗамещающихФорм).ЗамещаемыеФормы
    знч ЗамещающаяФорма = ЗамещаемыеФормы.ПолучитьИлиУмолчание(ЗамещаемаяФорма)
    если ЗамещающаяФорма == Неопределено
        возврат ЗамещаемаяФорма как Форма
    иначе если не (ЗамещающаяФорма это ЗамещаемаяФорма)
        возврат ЗамещающаяФорма
    иначе
        возврат КонечнаяЗамещающаяФорма(ЗамещающаяФорма как ЗамещаемаяФорма)
    ;
;

@НаКлиенте
метод СтековаяГруппа(ЗамещаемаяФорма: ЗамещаемаяФорма): СтековаяГруппа
    знч Форма = ЗамещаемаяФорма как Форма
    знч СодержимоеФормы = (Форма.Содержимое как ПроизвольныйШаблонФормы).Содержимое
    знч СтековаяГруппа = новый СтековаяГруппа()
    (Форма.Содержимое как ПроизвольныйШаблонФормы).Содержимое = СтековаяГруппа
    СтековаяГруппа.Содержимое.Добавить(СодержимоеФормы)
    возврат СтековаяГруппа
;

@НаСервере
структура Точка
    пер Икс: Число
    пер Игрек: Число
;

@НаСервере
структура КоординатыЗвезды
    пер Т1: Точка
    пер Т2: Точка
    пер Т3: Точка
    пер Т4: Точка
    пер Т5: Точка
    пер Т6: Точка
    пер Т7: Точка
    пер Т8: Точка
    пер Т9: Точка
    пер Т10: Точка
;

@НаСервере
статический метод Звезда(ШиринаЗвезды: Число, НомерЗвезды: Число, Цвет: Строка): Строка
    знч Координаты = КоординатыЗвезды(ШиринаЗвезды, НомерЗвезды)
    возврат 
        "
        <path d='M %{Координаты.Т1.Икс} %{Координаты.Т1.Игрек}
        L %{Координаты.Т2.Икс} %{Координаты.Т2.Игрек} 
        L %{Координаты.Т3.Икс} %{Координаты.Т3.Игрек} 
        L %{Координаты.Т4.Икс} %{Координаты.Т4.Игрек} 
        L %{Координаты.Т5.Икс} %{Координаты.Т5.Игрек} 
        L %{Координаты.Т6.Икс} %{Координаты.Т6.Игрек} 
        L %{Координаты.Т7.Икс} %{Координаты.Т7.Игрек} 
        L %{Координаты.Т8.Икс} %{Координаты.Т8.Игрек} 
        L %{Координаты.Т9.Икс} %{Координаты.Т9.Игрек} 
        L %{Координаты.Т10.Икс} %{Координаты.Т10.Игрек} 
        Z' stroke='%Цвет' fill='%Цвет'/>"
;

@НаСервере
статический метод ПолуЗвезда(ШиринаЗвезды: Число, НомерЗвезды: Число, Цвет: Строка): Строка
    знч Координаты = КоординатыЗвезды(ШиринаЗвезды, НомерЗвезды)
    возврат 
        "
        <path d='M %{Координаты.Т1.Икс} %{Координаты.Т1.Игрек}
        L %{Координаты.Т2.Икс} %{Координаты.Т2.Игрек} 
        L %{Координаты.Т3.Икс} %{Координаты.Т3.Игрек} 
        L %{Координаты.Т4.Икс} %{Координаты.Т4.Игрек} 
        L %{Координаты.Т5.Икс} %{Координаты.Т5.Игрек} 
        L %{Координаты.Т6.Икс} %{Координаты.Т6.Игрек} 
        L %{Координаты.Т7.Икс} %{Координаты.Т7.Игрек} 
        L %{Координаты.Т8.Икс} %{Координаты.Т8.Игрек} 
        L %{Координаты.Т9.Икс} %{Координаты.Т9.Игрек} 
        L %{Координаты.Т10.Икс} %{Координаты.Т10.Игрек} 
        Z' stroke='%Цвет' fill='none'/>
        <path d='M %{Координаты.Т1.Икс} %{Координаты.Т1.Игрек}
        L %{Координаты.Т2.Икс} %{Координаты.Т2.Игрек} 
        L %{Координаты.Т3.Икс} %{Координаты.Т3.Игрек} 
        L %{Координаты.Т8.Икс} %{Координаты.Т8.Игрек} 
        L %{Координаты.Т9.Икс} %{Координаты.Т9.Игрек} 
        L %{Координаты.Т10.Икс} %{Координаты.Т10.Игрек} 
        Z' fill='%Цвет'/>"
;

@НаСервере
статический метод ПустаяЗвезда(ШиринаЗвезды: Число, НомерЗвезды: Число, Цвет: Строка): Строка
    знч Координаты = КоординатыЗвезды(ШиринаЗвезды, НомерЗвезды)
    возврат 
        "
        <path d='M %{Координаты.Т1.Икс} %{Координаты.Т1.Игрек}
        L %{Координаты.Т2.Икс} %{Координаты.Т2.Игрек} 
        L %{Координаты.Т3.Икс} %{Координаты.Т3.Игрек} 
        L %{Координаты.Т4.Икс} %{Координаты.Т4.Игрек} 
        L %{Координаты.Т5.Икс} %{Координаты.Т5.Игрек} 
        L %{Координаты.Т6.Икс} %{Координаты.Т6.Игрек} 
        L %{Координаты.Т7.Икс} %{Координаты.Т7.Игрек} 
        L %{Координаты.Т8.Икс} %{Координаты.Т8.Игрек} 
        L %{Координаты.Т9.Икс} %{Координаты.Т9.Игрек} 
        L %{Координаты.Т10.Икс} %{Координаты.Т10.Игрек} 
        Z' stroke='%Цвет' fill='none'/>"
;

@НаСервере 
статический метод КоординатыЗвезды(ШиринаЗвезды: Число, НомерЗвезды: Число): КоординатыЗвезды
    знч Координаты: КоординатыЗвезды
    знч Полуширина = ШиринаЗвезды/2
    знч Синус = Sin(МенеджерЧисел.ЧислоПи()/10)
    знч Косинус = Cos(МенеджерЧисел.ЧислоПи()/10)
    знч Радиус = (ШиринаЗвезды/(2*Косинус)).Округлить(4)
    знч А0 = (ШиринаЗвезды*Синус).Округлить(4)
    знч Б0 = (ШиринаЗвезды*Косинус).Округлить(4)
    знч А1 = (Радиус*(1-Синус)*Синус/Косинус).Округлить(4)
    знч Б1 = (Радиус*(1-Синус)).Округлить(4)
    знч А2 = (2*А1*Синус).Округлить(4)
    знч Б2 = (2*А1*Косинус).Округлить(4)
    знч В = ((Радиус - Б1)/Cos(МенеджерЧисел.ЧислоПи()/5)).Округлить(4)
    знч Полувысота = Б0/2 + 2
    
    знч НачальныйИкс = НомерЗвезды*ШиринаЗвезды
    
    Координаты.Т1 = новый Точка(НачальныйИкс, Полувысота - Радиус + Б1)
    Координаты.Т2 = новый Точка(НачальныйИкс + Полуширина - А1, Полувысота - Радиус + Б1)
    Координаты.Т3 = новый Точка(НачальныйИкс + Полуширина, Полувысота - Радиус)
    Координаты.Т4 = новый Точка(НачальныйИкс + Полуширина + А1, Полувысота - Радиус + Б1)
    Координаты.Т5 = новый Точка(НачальныйИкс + ШиринаЗвезды, Полувысота - Радиус + Б1)
    Координаты.Т6 = новый Точка(НачальныйИкс + Полуширина + А1 + А2, Полувысота - Радиус + Б1 + Б2)
    Координаты.Т7 = новый Точка(НачальныйИкс + Полуширина + А0, Полувысота + Б0/2)
    Координаты.Т8 = новый Точка(НачальныйИкс + Полуширина, Полувысота + В)
    Координаты.Т9 = новый Точка(НачальныйИкс + Полуширина - А0, Полувысота + Б0/2)
    Координаты.Т10 = новый Точка(НачальныйИкс + Полуширина - А1 - А2, Полувысота - Радиус + Б1 + Б2)
    возврат Координаты
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СтильИмпортаRoboto(): Строка
    пер СтильИмпортаRoboto: Строка
    знч Настройки = НастройкиРаботыСФайлами.ПолучитьСервис()
    если Настройки != Неопределено
    СтильИмпортаRoboto = 
        "
        <style type='text/css'>
            @import url('%{Настройки.АдресОбщихФайлов()}/Roboto.css');
        </style>"
    ;
    возврат СтильИмпортаRoboto
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод КартинкаИндикатора(Количество: Число, ЦветФона: Строка, ЦветТекста: Строка): ДвоичныйОбъект.Ссылка
    если ЦветФона == ""
        ЦветФона = БиблиотекаЦветов.ЦветСтрокой(БиблиотекаЦветов.ВидыЦвета.Оранжевый)
    ;
    если ЦветТекста == ""
        ЦветТекста = БиблиотекаЦветов.ЦветСтрокой(БиблиотекаЦветов.ВидыЦвета.СветлоСерый)
    ;
    пер ШиринаКартинки = 40
    пер РадиусСкругления = 6
    пер ЗначениеЦелоеЧисло: Булево
    пер ЦелаяЧасть = Количество.ЦелаяЧасть()
    пер ДесятичнаяЧасть: Число
    пер ЧислоДесятичныхЗнаков = 1
    если ЦелаяЧасть == Количество
        ЗначениеЦелоеЧисло = Истина
    иначе
        ДесятичнаяЧасть = (Количество.Округлить(ЧислоДесятичныхЗнаков) - ЦелаяЧасть) * (10 ** ЧислоДесятичныхЗнаков)
    ;
    знч ШагШрифта = 16
    пер КоличествоЗнаков = МенеджерЧисел.КоличествоЗнаков(ЦелаяЧасть) + (ЗначениеЦелоеЧисло ? 0 : 1)
    пер ЦелаяЧастьX = 4
    если КоличествоЗнаков == 1 
        ЦелаяЧастьX += ШагШрифта/2
    ;
    пер ДесятичнаяЧастьХ = ЦелаяЧастьX + ШагШрифта*(КоличествоЗнаков - 1)
    если КоличествоЗнаков > 2
        ШиринаКартинки += ШагШрифта * (КоличествоЗнаков - 2)
    ;
    знч Арка = "A %РадиусСкругления %РадиусСкругления 0 0 1"
    знч ВысотаМинусРадиус = 40 - РадиусСкругления
    знч ШиринаМинусРадиус = ШиринаКартинки - РадиусСкругления
    знч СтильИмпортаRoboto = ИнтерфейсныеКомпоненты.СтильИмпортаRoboto()
    пер КартинкаSvg = 
        "<svg viewBox='0 0 %ШиринаКартинки 40' width='%ШиринаКартинки' height='40' xmlns='http://www.w3.org/2000/svg'>
        %СтильИмпортаRoboto
        <style>
        .font {font:bold 28px Roboto, sans-serif;fill:%ЦветТекста;}"
    если не ЗначениеЦелоеЧисло
        КартинкаSvg += 
            "
            .font-decimal {font:bold 20px Roboto, sans-serif;fill:%ЦветТекста;}"
    ;        
    КартинкаSvg += 
        "
        </style>
        <path d='M 0 %РадиусСкругления %Арка %РадиусСкругления 0 L %ШиринаМинусРадиус 0 %Арка %ШиринаКартинки %РадиусСкругления L %ШиринаКартинки %ВысотаМинусРадиус %Арка %ШиринаМинусРадиус 40 L %РадиусСкругления 40 %Арка 0 %ВысотаМинусРадиус Z' fill='%ЦветФона'/>
        <text x='%ЦелаяЧастьX' y='29.5' class='font'>%ЦелаяЧасть</text>"
    если не ЗначениеЦелоеЧисло
        КартинкаSvg += 
            "
            <text x='%ДесятичнаяЧастьХ' y='29.5' class='font-decimal'>,%ДесятичнаяЧасть</text>"
    ;        
    КартинкаSvg += 
        "
        </svg>"
    возврат ОбъектноеХранилище.ЗагрузитьИзСтроки(КартинкаSvg, "image/svg+xml").Ссылка
;