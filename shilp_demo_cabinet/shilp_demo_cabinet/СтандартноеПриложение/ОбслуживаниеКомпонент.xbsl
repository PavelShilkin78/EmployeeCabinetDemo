импорт ИнтерфейсныеКомпонентыСтандартные
импорт КонтрольДоступаСтандартные
импорт УниверсальныеМеханизмы::ИмпортДанных
импорт ОбщиеСтандартные

@Локально @НаКлиенте @НаСервере конст КЛЮЧ_ЗАПУСКА_ЗАДАНИЯ_ОБНОВЛЕНИЯ_ПРАВ_ДОСТУПА: Строка = "ОбновлениеПравДоступа"
@Локально @НаКлиенте конст ПРЕДСТАВЛЕНИЕ_ЗАДАНИЯ_ОБНОВЛЕНИЯ_ПРАВ_ДОСТУПА: Строка = "Обновление прав пользователей"

@Локально @НаКлиенте @НаСервере конст КЛЮЧ_ЗАПУСКА_ЗАДАНИЯ_ОБНОВЛЕНИЕ_ВТОРИЧНЫХ_ДАННЫХ: Строка = "ОбновлениеВторичныхДанных"
@Локально @НаКлиенте конст ПРЕДСТАВЛЕНИЕ_ЗАДАНИЯ_ОБНОВЛЕНИЕ_ВТОРИЧНЫХ_ДАННЫХ: Строка = "Обновление вторичных данных"

@Локально @НаКлиенте @НаСервере конст КЛЮЧ_ЗАПУСКА_ЗАДАНИЯ_ПЕРЕСЧЕТ_ИНДЕКСА_ПОЛНОТЕКСТОВОГО_ПОИСКА: Строка = "ОбновлениеИндексаПолнотекстовогоПоиска"
@Локально @НаКлиенте конст ПРЕДСТАВЛЕНИЕ_ЗАДАНИЯ_ПЕРЕСЧЕТ_ИНДЕКСА_ПОЛНОТЕКСТОВОГО_ПОИСКА: Строка = "Обновление индекса полнотекстового поиска"


@ВПроекте
@НаКлиенте
@НаСервере
перечисление ВариантОбновленияПравДоступа
    ПолноеОбновление,
    ПересчитатьКлючи,
    ПересчитатьРазрешения
    
    @НаСервере
    метод ПолучитьВыполняемыйСерверныйМетод(): ()->ничто
            
        знч СоответствиеВариантовОбновления = новый Соответствие<ВариантОбновленияПравДоступа, ()->ничто>()
            
        СоответствиеВариантовОбновления.Вставить(
            ВариантОбновленияПравДоступа.ПолноеОбновление,
            &МенеджерПравДоступа.ВыполнитьПакетноеОбновлениеПравДоступа    
        )
        СоответствиеВариантовОбновления.Вставить(
            ВариантОбновленияПравДоступа.ПересчитатьКлючи,
            &МенеджерПравДоступа.ПересчитатьКлючиДоступаВсехПользователей    
        )
        СоответствиеВариантовОбновления.Вставить(
            ВариантОбновленияПравДоступа.ПересчитатьРазрешения,
            &МенеджерПравДоступа.ПересчитатьРазрешенияДоступа    
        )
            
        возврат СоответствиеВариантовОбновления.Получить(этот)
            
    ;  
;

@Обработчик
метод ПослеСоздания()
     АвтозапускЗапланированныхЗаданийВключен = МенеджерЗаданий.АвтозапускЗапланированныхЗаданийВключен()
     ОбновитьСостояниеВыполненияЗапланированныхЗаданий()          
;

@Локально
метод ОбновитьСостояниеВыполненияЗапланированныхЗаданий()
    ОбновитьСостояниеВыполненияОбновитьПраваДоступа()
    ОбновитьСостояниеВыполненияОбновитьВторичныеДанные()
    ОбновитьСостояниеВыполненияОбновленияПолнотекстовогоПоиска()        
;

@Локально
метод ОбновитьСостояниеВыполненияОбновитьПраваДоступа()
    знч РезультатВыполнения = МенеджерЗаданий.ПолучитьОписаниеВыполненияЗапланированногоЗаданияПоКлючу(
            КЛЮЧ_ЗАПУСКА_ЗАДАНИЯ_ОБНОВЛЕНИЯ_ПРАВ_ДОСТУПА
        )
        
    Компоненты.РезультатВыполненияОбновленияПравДоступа.Значение = РезультатВыполнения.ПредставлениеРезультатаПоследнегоЗапуска
    Компоненты.РезультатВыполненияОбновленияПравДоступа.ОценкаИнформации = ОценкаИнформацииРезультатаВыполнения(РезультатВыполнения)
    
    Компоненты.ОбновитьПрава.Доступность = не РезультатВыполнения.ВыполняетсяСейчас
    Компоненты.ОбновитьПрава.Заголовок = не РезультатВыполнения.ВыполняетсяСейчас ? "Обновить" : "Идет обновление"
    
    если РезультатВыполнения.ВыполняетсяСейчас
        ПодключитьОбработчикТаймера(&ОбновитьСостояниеВыполненияОбновитьПраваДоступа, 60с, Истина)
    ;     
;

@Локально
метод ОбновитьСостояниеВыполненияОбновитьВторичныеДанные()
    знч РезультатВыполнения = МенеджерЗаданий.ПолучитьОписаниеВыполненияЗапланированногоЗаданияПоКлючу(
            КЛЮЧ_ЗАПУСКА_ЗАДАНИЯ_ОБНОВЛЕНИЕ_ВТОРИЧНЫХ_ДАННЫХ
        )
        
    Компоненты.РезультатВыполненияОбновленияВторичныхДанных.Значение = РезультатВыполнения.ПредставлениеРезультатаПоследнегоЗапуска
    Компоненты.РезультатВыполненияОбновленияВторичныхДанных.ОценкаИнформации = ОценкаИнформацииРезультатаВыполнения(РезультатВыполнения)
    
    Компоненты.ОбновитьВторичныеДанные.Доступность = не РезультатВыполнения.ВыполняетсяСейчас
    Компоненты.ОбновитьВторичныеДанные.Заголовок = не РезультатВыполнения.ВыполняетсяСейчас ? "Обновить" : "Идет обновление"
    
    если РезультатВыполнения.ВыполняетсяСейчас
        ПодключитьОбработчикТаймера(&ОбновитьСостояниеВыполненияОбновитьВторичныеДанные, 30с, Истина)
    ;     
;

@Локально
метод ОбновитьСостояниеВыполненияОбновленияПолнотекстовогоПоиска()
    знч РезультатВыполнения = МенеджерЗаданий.ПолучитьОписаниеВыполненияЗапланированногоЗаданияПоКлючу(
            КЛЮЧ_ЗАПУСКА_ЗАДАНИЯ_ПЕРЕСЧЕТ_ИНДЕКСА_ПОЛНОТЕКСТОВОГО_ПОИСКА
        )
        
    Компоненты.РезультатВыполненияОбновленияПолнотекстовогоПоиска.Значение = РезультатВыполнения.ПредставлениеРезультатаПоследнегоЗапуска
    Компоненты.РезультатВыполненияОбновленияПолнотекстовогоПоиска.ОценкаИнформации = ОценкаИнформацииРезультатаВыполнения(РезультатВыполнения)
    
    Компоненты.ОбновитьПолнотекстовыйПоиск.Доступность = не РезультатВыполнения.ВыполняетсяСейчас
    Компоненты.ОбновитьПолнотекстовыйПоиск.Заголовок = не РезультатВыполнения.ВыполняетсяСейчас ? "Обновить" : "Идет обновление"
    
    если РезультатВыполнения.ВыполняетсяСейчас
        ПодключитьОбработчикТаймера(&ОбновитьСостояниеВыполненияОбновленияПолнотекстовогоПоиска, 10с, Истина)
    ;     
;

@Локально
метод ОценкаИнформацииРезультатаВыполнения(РезультатВыполнения: МенеджерЗаданий.ОписаниеВыполненияЗапланированногоЗадания): ОценкаИнформации
    возврат РезультатВыполнения.ОтклоненияВыполнения ? ОценкаИнформации.Предупреждающая : ОценкаИнформации.Обычная    
;

@Локально
@НаКлиенте
метод ВыполнитьПолноеОбновлениеОбработчик(Команда: ОбычнаяКоманда)
    ОбновитьПраваКлиент(ВариантОбновленияПравДоступа.ПолноеОбновление)
;

@Локально
@НаКлиенте
метод ПересчитатьКлючиДоступаОбработчик(Команда: ОбычнаяКоманда)
    ОбновитьПраваКлиент(ВариантОбновленияПравДоступа.ПересчитатьКлючи)
;

@Локально
@НаКлиенте
метод ПересчитатьРазрешенияДоступаОбработчик(Команда: ОбычнаяКоманда)
    ОбновитьПраваКлиент(ВариантОбновленияПравДоступа.ПересчитатьРазрешения)
;

@Локально
@НаКлиенте
метод ОбновитьПраваКлиент(ВариантОбновления: ВариантОбновленияПравДоступа)
    ОбновитьПрава(ВариантОбновления)
    ОповеститьОНачалеВыполнения(ПРЕДСТАВЛЕНИЕ_ЗАДАНИЯ_ОБНОВЛЕНИЯ_ПРАВ_ДОСТУПА)
    ПодключитьОбработчикТаймера(&ОбновитьСостояниеВыполненияОбновитьПраваДоступа, 1мс, Истина)
;

@Локально
@НаКлиенте
метод ОбновитьВторичныеДанныеПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ОбновитьВторичныеДанные()
    ОповеститьОНачалеВыполнения(ПРЕДСТАВЛЕНИЕ_ЗАДАНИЯ_ОБНОВЛЕНИЕ_ВТОРИЧНЫХ_ДАННЫХ)
    ПодключитьОбработчикТаймера(&ОбновитьСостояниеВыполненияОбновитьВторичныеДанные, 1мс, Истина)
;

@Локально
@НаКлиенте
метод ОбновитьПолнотекстовыйПоискПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ПересчетИндексаПП()
    ОповеститьОНачалеВыполнения(ПРЕДСТАВЛЕНИЕ_ЗАДАНИЯ_ПЕРЕСЧЕТ_ИНДЕКСА_ПОЛНОТЕКСТОВОГО_ПОИСКА)
    ПодключитьОбработчикТаймера(&ОбновитьСостояниеВыполненияОбновленияПолнотекстовогоПоиска, 1мс, Истина)
;

@Локально
@НаКлиенте
метод ОповеститьОНачалеВыполнения(ПредставлениеЗадания: Строка)
    СтандартныеФормы.ПоказатьУведомление(
        "%{ПредставлениеЗадания} выполняется...", 
        "%{ПредставлениеЗадания} выполняется. Вы можете закрыть это сообщение, обновление завершится через некоторое время."
    )    
;

метод ИмпортироватьДанныеИзФайловПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ФормаИмпортаДанных.Открыть()    
;

@НаСервере @ДоступноСКлиента
статический метод ОбновитьПрава(ВариантОбновления: ВариантОбновленияПравДоступа)
    МенеджерПравДоступа.ПроверитьПраваАдминистратора()
    
    знч МетодОбновленияПравДоступа = ВариантОбновления.ПолучитьВыполняемыйСерверныйМетод()
    
    ЗапланированныеЗадания.Создать(МетодОбновленияПравДоступа)
        .Настроить(Ключ = КЛЮЧ_ЗАПУСКА_ЗАДАНИЯ_ОБНОВЛЕНИЯ_ПРАВ_ДОСТУПА,
                    ХранениеРезультатов = СтратегияХраненияРезультатовЗаданий.Последний())
        .Запланировать()
;

@НаСервере @ДоступноСКлиента
статический метод ОбновитьВторичныеДанные()
    МенеджерПравДоступа.ПроверитьПраваАдминистратора()
    ЗапланированныеЗадания.Создать(&СтандартноеПриложение.ВыполнитьОбновлениеВторичныхДанных)
        .Настроить(Ключ = КЛЮЧ_ЗАПУСКА_ЗАДАНИЯ_ОБНОВЛЕНИЕ_ВТОРИЧНЫХ_ДАННЫХ,
                    ХранениеРезультатов = СтратегияХраненияРезультатовЗаданий.Последний())
        .Запланировать()
;

@НаСервере @ДоступноСКлиента
статический метод ПересчетИндексаПП()
    МенеджерПравДоступа.ПроверитьПраваАдминистратора()
    ЗапланированныеЗадания.Создать(&ПолнотекстовыйПоиск.ПерестроитьИндекс)
        .Настроить(Ключ = КЛЮЧ_ЗАПУСКА_ЗАДАНИЯ_ПЕРЕСЧЕТ_ИНДЕКСА_ПОЛНОТЕКСТОВОГО_ПОИСКА,
                    ХранениеРезультатов = СтратегияХраненияРезультатовЗаданий.Последний())
        .Запланировать()
;
