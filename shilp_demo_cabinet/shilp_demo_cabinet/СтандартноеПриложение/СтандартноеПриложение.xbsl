импорт КонтрольДоступаСтандартные
импорт ОбщиеСтандартные

@ВПроекте
структура ПараметрыСеанса
    пер НастройкиИнтерфейса: НастройкиИнтерфейса
    пер Логотип: ДвоичныйОбъект.Ссылка?
    пер НазваниеПриложения: Строка
    пер АватарПоУмолчанию: ДвоичныйОбъект.Ссылка?
    пер ТекущийПользовательИмеетПолныеПрава: Булево
    пер ТекущийПользователь: Пользователи.Ссылка?
    пер АдресПриложения: Строка
;

@ВПроекте
@НаКлиенте
структура ФормыРазделовСтандартногоПриложения
    пер Главное: ФормаРаздела?
    пер Настройки: Настройки?
    пер ВсеФункции: ВсеФункции?
;

@ВПроекте
@НаКлиенте
метод ФормыРазделовСтандартногоПриложения(): ФормыРазделовСтандартногоПриложения
    возврат (КлиентскоеПриложение как ОсновноеПриложение).ФормыРазделовСтандартногоПриложения
;

@ВПроекте
структура НастройкиИнтерфейса
    пер ШиринаПанелиНавигации: Число
;

@ВПроекте
структура ОписаниеОбработчикаОбновления
    обз пер ИдПодсистемы: Строка
    обз пер ИмяОбработчика: Строка
    обз пер Обработчик: ()->ничто
    обз пер Версия: Версия
    пер ПриоритетВПодсистеме: Число
    пер УровеньПодсистемы: Число
;

@ВПроекте
структура ОписаниеОбработчикаЗаполнения
    обз пер ИдПодсистемы: Строка
    обз пер ИмяОбработчика: Строка
    обз пер Обработчик: ()->ничто
    пер ПриоритетВПодсистеме: Число
    пер УровеньПодсистемы: Число
;

@ВПроекте
структура ОписаниеПодсистемы
    обз пер Ид: Строка
    пер Зависимости: Множество<Строка>
;

@ВПодсистеме
конст КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: Строка = "СтандартноеПриложение"
@ВПроекте
конст ТРЕБУЕТСЯ_ОБНОВЛЕНИЕ_ПАРАМЕТРОВ_СЕАНСА = "ТребуетсяОбновлениеПараметровСеанса"


@ВПроекте
@НаКлиенте
метод ПараметрыСеанса(): ПараметрыСеанса
    возврат ПараметрыСеансаСервис.ПолучитьСервис().ПараметрПоКлючу(КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА) как ПараметрыСеанса
;

@ВПроекте
@НаКлиенте
структура ОписаниеДополнительнойСтраницы
    обз пер ИдПодсистемы: Строка
    обз пер ИдСтраницы: Строка
    обз пер Наименование: Строка
    обз пер Компонент: Компонент
    пер Приоритет: Число
;    

@ВПроекте
исключение ИсключениеОписанияИерархииПодсистем
;

@ВПроекте
@НаСервере
метод ПриОбновлении(ПредыдущаяВерсия: Версия?)
    исп Транзакции.Начать()
    ПроверкаАвтозапускаЗапланированныхЗаданий.Отключить()

    исп новый ОперацияОбновлениеПриложения(ПредыдущаяВерсия = "%{ПредыдущаяВерсия ?? "<Создание приложения>"}", Версия = "%{Проект.Версия}").ЗаписатьНачало()
    ВыполнитьОбработчикиОбновления(ПредыдущаяВерсия)
    ПересчитатьРазрешенияДоступа()
    
    ПроверкаАвтозапускаЗапланированныхЗаданий.Включить()
;

@НаСервере
метод ВыполнитьОбработчикиОбновления(ПредыдущаяВерсия: Версия?)
    пер УровниИерархииПодсистем: Соответствие<Строка, Число>
    область
        пер ЗависимостиПодсистем: Массив<ОписаниеПодсистемы>
        пер Сервисы = ПодсистемаПриложения.ПолучитьСервисы()
        для Сервис из Сервисы
            ЗависимостиПодсистем.Добавить(Сервис.ОписаниеПодсистемы())
        ;
        ЗаполнитьУровниИерархииПодсистем(ЗависимостиПодсистем, УровниИерархииПодсистем)
    ;
    пер Сервисы = ОбновляемаяПодсистема.ПолучитьСервисы()
    если ПредыдущаяВерсия == Неопределено
        пер Обработчики: Массив<ОписаниеОбработчикаЗаполнения>
        для Сервис из Сервисы
            Обработчики.ДобавитьВсе(Сервис.ОбработчикиЗаполнения())
        ;
        для ОписаниеОбработчика из Обработчики
            ОписаниеОбработчика.УровеньПодсистемы = УровниИерархииПодсистем[ОписаниеОбработчика.ИдПодсистемы]
        ;
        Обработчики = Обработчики.Сортировать(&КомпараторОбработчиковЗаполнения)
        для ОписаниеОбработчика из Обработчики
            исп новый ОперацияОбработчикОбновления(Подсистема = ОписаниеОбработчика.ИдПодсистемы, Обработчик = ОписаниеОбработчика.ИмяОбработчика).ЗаписатьНачало()
            ОписаниеОбработчика.Обработчик()
        ;
    иначе
        пер Обработчики: Массив<ОписаниеОбработчикаОбновления>
        для Сервис из Сервисы
            Обработчики.ДобавитьВсе(Сервис.ОбработчикиОбновления())
        ;
        для ОписаниеОбработчика из Обработчики
            ОписаниеОбработчика.УровеньПодсистемы = УровниИерархииПодсистем[ОписаниеОбработчика.ИдПодсистемы]
        ;
        Обработчики = Обработчики.Сортировать(&КомпараторОбработчиковОбновления)
        для ОписаниеОбработчика из Обработчики
            если ПредыдущаяВерсия! < ОписаниеОбработчика.Версия
                исп новый ОперацияОбработчикОбновления(Подсистема = ОписаниеОбработчика.ИдПодсистемы, Обработчик = ОписаниеОбработчика.ИмяОбработчика).ЗаписатьНачало()
                ОписаниеОбработчика.Обработчик()
            ;
        ;
    ;    
;

@НаСервере
метод ПересчитатьРазрешенияДоступа()
    исп новый ОперацияОбработчикОбновления(Подсистема = "Приложение", Обработчик = "МенеджерПравДоступа.ПересчитатьРазрешенияДоступа").ЗаписатьНачало()
    МенеджерПравДоступа.ПересчитатьРазрешенияДоступа(Истина, Ложь)    
;

@НаСервере
метод ЗаполнитьУровниИерархииПодсистем(Подсистемы: Массив<ОписаниеПодсистемы>, УровниИерархииПодсистем: Соответствие<Строка, Число>, ПодсистемыПредыдущегоУровня: Множество<Строка> = {}, Уровень = 1)
    пер ОбработанныеПодсистемы: Множество<Строка>
    для Подсистема из Подсистемы
        если УровниИерархииПодсистем.ПолучитьИлиУмолчание(Подсистема.Ид) != Неопределено
            продолжить
        ;
        если Подсистема.Зависимости.Пересечение(ПодсистемыПредыдущегоУровня).Размер() == Подсистема.Зависимости.Размер()
            ОбработанныеПодсистемы.Добавить(Подсистема.Ид)
            УровниИерархииПодсистем.Вставить(Подсистема.Ид, Уровень)
        ;
    ;
    если ОбработанныеПодсистемы.Пусто()
        выбросить новый ИсключениеОписанияИерархииПодсистем("Неправильно описана зависимость подсистем")
    ;
    ПодсистемыПредыдущегоУровня.ДобавитьВсе(ОбработанныеПодсистемы)
    если УровниИерархииПодсистем.Размер() < Подсистемы.Размер()
        ЗаполнитьУровниИерархииПодсистем(Подсистемы, УровниИерархииПодсистем, ПодсистемыПредыдущегоУровня, Уровень + 1)
    ;
;

@НаСервере
метод КомпараторОбработчиковОбновления(Первый: ОписаниеОбработчикаОбновления, Второй: ОписаниеОбработчикаОбновления): Число
    если Первый.Версия > Второй.Версия
        возврат 1
    иначе если Первый.Версия < Второй.Версия
        возврат -1
    иначе если Первый.УровеньПодсистемы != Второй.УровеньПодсистемы
        возврат Первый.УровеньПодсистемы - Второй.УровеньПодсистемы
    иначе
        возврат Первый.ПриоритетВПодсистеме - Второй.ПриоритетВПодсистеме
    ;
;

@НаСервере
метод КомпараторОбработчиковЗаполнения(Первый: ОписаниеОбработчикаЗаполнения, Второй: ОписаниеОбработчикаЗаполнения): Число
    если Первый.УровеньПодсистемы != Второй.УровеньПодсистемы
        возврат Первый.УровеньПодсистемы - Второй.УровеньПодсистемы
    иначе
        возврат Первый.ПриоритетВПодсистеме - Второй.ПриоритетВПодсистеме
    ;
;

@ВПроекте
структура НастройкиПриложения
    пер АдресПриложения: Строка
    пер ПроксиСервер: Строка
    пер ПроксиПорт: Число
    пер ИспользоватьПроксиАутентификацию: Булево
    пер ПроксиАутентификацияПользователь: Строка
    пер ПроксиАутентификацияПароль: Строка
;

@НаСервере
@ВПроекте
метод НастройкиПриложения(): НастройкиПриложения
    пер НастройкиПриложения: НастройкиПриложения
    знч Запрос = Запрос{
        Выбрать Первые 1
            АдресПриложения,
            ПроксиСервер,
            ПроксиПорт,
            ИспользоватьПроксиАутентификацию,
            ПроксиАутентификацияПользователь,
            ПроксиАутентификацияПароль
        Из НастройкиСтандартногоПриложения}
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        НастройкиПриложения.АдресПриложения = РезультатСтрока.АдресПриложения
        НастройкиПриложения.ПроксиСервер = РезультатСтрока.ПроксиСервер
        НастройкиПриложения.ПроксиПорт = РезультатСтрока.ПроксиПорт
        НастройкиПриложения.ИспользоватьПроксиАутентификацию = РезультатСтрока.ИспользоватьПроксиАутентификацию
        НастройкиПриложения.ПроксиАутентификацияПользователь = РезультатСтрока.ПроксиАутентификацияПользователь
        НастройкиПриложения.ПроксиАутентификацияПароль = РезультатСтрока.ПроксиАутентификацияПароль
    ;
    возврат НастройкиПриложения
;

@ВПроекте
@НаСервере
метод ЗаписатьНастройкиПриложения(НастройкиПриложения: НастройкиПриложения)
    исп Транзакции.Начать()
    знч Запрос = Запрос{
        Выбрать Первые 1
            Ссылка
        Из НастройкиСтандартногоПриложения}
    исп Результат = Запрос.Выполнить()
    пер НастройкиСсылка: НастройкиСтандартногоПриложения.Ссылка?
    пер Настройки: НастройкиСтандартногоПриложения.Объект?
    для РезультатСтрока из Результат
        НастройкиСсылка = РезультатСтрока.Ссылка
    ;
    если НастройкиСсылка == Неопределено
        Настройки = новый НастройкиСтандартногоПриложения.Объект()
    иначе
        Настройки = НастройкиСсылка.ЗагрузитьОбъект(Истина)
    ;
    Настройки.АдресПриложения = НастройкиПриложения.АдресПриложения
    Настройки.ПроксиСервер = НастройкиПриложения.ПроксиСервер
    Настройки.ПроксиПорт = НастройкиПриложения.ПроксиПорт
    Настройки.ИспользоватьПроксиАутентификацию = НастройкиПриложения.ИспользоватьПроксиАутентификацию
    Настройки.ПроксиАутентификацияПользователь = НастройкиПриложения.ПроксиАутентификацияПользователь
    Настройки.ПроксиАутентификацияПароль = НастройкиПриложения.ПроксиАутентификацияПароль
    Настройки.Записать()
;

@ВПроекте
@НаСервере
метод СсылкаПереходаКОбъекту(Ссылка: Сущность.Ключ): Строка
    возврат НастройкиПриложения().АдресПриложения + НавигационнаяСсылка.Относительная(Ссылка)
;

@ВПодсистеме
@НаСервере @НаКлиенте
структура ДанныеПользователя
    пер Ссылка: Пользователи.Ссылка?
    пер Представление: Строка
    пер Администратор: Булево
    пер БылУспешныйВход: Булево
    пер ЗапрещенВход: Булево
    пер РазрешенДоступПоТокену: Булево
    пер Утверждения: Соответствие<Строка, Строка>
    пер ТокеныДоступа: Массив<МенеджерПравДоступа.ТокенДоступаПользователя>
;

@ВПроекте
@НаСервере @ДоступноСКлиента
статический метод ДанныеПользователя(Пользователь: Пользователи.Ссылка): ДанныеПользователя
    знч Объект = Пользователь.ЗагрузитьОбъект()
    знч Данные = новый ДанныеПользователя(
        Ссылка = Объект.Ссылка,
        Представление = Объект.Представление,
        Администратор = Объект.Администратор,
        БылУспешныйВход = Объект.БылУспешныйВход,
        ЗапрещенВход = Объект.ЗапрещенВход,
        РазрешенДоступПоТокену = Объект.РазрешенДоступПоТокену)
    Данные.Утверждения.ВставитьВсе(Объект.Утверждения)
    для ТокенДоступа из ПользователиСервиса.ПолучитьОписанияЗапросовТокеновДоступа(Объект.Ид)
        Данные.ТокеныДоступа.Добавить(
            новый МенеджерПравДоступа.ТокенДоступаПользователя(Ид = ТокенДоступа.Ид, Описание = ТокенДоступа.Описание))
    ;
    возврат Данные
;

@ВПодсистеме
@НаСервере
метод ВыполнитьОбновлениеВторичныхДанных()
    исп КонтекстДоступа.Привилегированный()
    знч СервисыВторичныхДанных = ВторичныеДанные.ПолучитьСервисы()
    для Сервис из СервисыВторичныхДанных
        Сервис.Пересчитать()   
    ;
;