импорт ОбщегоНазначения
импорт ОбщиеСтандартные
импорт Уведомления
импорт ФизическиеЛица
импорт Компания
импорт ВладельцыКабинетов
импорт ВебApi
импорт КонтрольДоступа
импорт Зарплата
импорт УниверсальныеМеханизмы
импорт Компания::Согласования
импорт КлиентСервисаПодписания
импорт Криптография

@ВПроекте
структура ДанныеДокументаНаПодпись
    пер Организация: Организации.Ссылка?
    пер Дата: Дата?
    пер Наименование: Строка
    пер Файл: Файлы.Ссылка?
    пер ОсновныеСвойства: Строка
    пер Комментарий: Строка
    пер ФизическиеЛица: Массив<ФизическиеЛица.Ссылка>
    пер Вложения: Массив<Файлы.Объект>
    пер ВозможноОбновлениеПредставлений: Булево 
    пер ВариантПодписания: ВариантыПодписанияДокументов
;

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат КонтрольДоступа.РазрешенияДоступаТаблицыБезПраваУдаления()
;

@Обработчик
@ВПроекте
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ДокументыНаПодпись.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ДокументыНаПодпись.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ДокументыНаПодпись.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Документы: Массив<ДокументыНаПодпись.Ссылка>
    для Элемент из Элементы
        Документы.Добавить(Элемент.Ссылка)
    ;
    знч ФизическиеЛицаДокументов = ДокументыНаПодписьФизическиеЛица.ФизическиеЛицаДокументов(Документы)
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПоПолномочиям(
            [КонтрольДоступа.ПолномочиеПросмотрЛичныхДанных()],
            ФизическиеЛицаДокументов.ПолучитьИлиУмолчание(Элемент.Ссылка, [])
        ))
        РазрешенияЭлемента.ДобавитьВсе(
            КонтрольДоступа.ЧтениеДанныхСправочниковПерсонально(ФизическиеЛицаДокументов.ПолучитьИлиУмолчание(Элемент.Ссылка, [])))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

//КонецОбласти

@ВПроекте
структура ДокументНаПодпись
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка?
    @JsonСвойство(Имя = "employerID")
    обз знч Организация: Строка?
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка?
    @JsonСвойство(Имя = "document")
    обз знч Документ: Файлы.ЭлектронныйДокументJson?
    @JsonСвойство(Имя = "employees", Псевдонимы={"emloyees"})
    обз знч Сотрудники: Массив<Строка>?
    @JsonСвойство(Имя = "date")
    обз знч Дата: ДатаВремя?
    @JsonСвойство(Имя = "basicProperties")
    обз знч ОсновныеСвойства: Строка?
    @JsonСвойство(Имя = "note")
    обз знч Комментарий: Строка?
    @JsonСвойство(Имя = "updatePresentationsPossible")
    обз знч ВозможноОбновлениеПредставлений: Булево?
;

@ВПроекте
структура ДокументНаПодпись_1_0
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка?
    @JsonСвойство(Имя = "employerID")
    обз знч Организация: Строка?
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка?
    @JsonСвойство(Имя = "document")
    обз знч Документ: Файлы.ЭлектронныйДокументJson?
    @JsonСвойство(Имя = "employees", Псевдонимы={"emloyees"})
    обз знч Сотрудники: Массив<Строка>?
    @JsonСвойство(Имя = "date")
    обз знч Дата: ДатаВремя?
    @JsonСвойство(Имя = "basicProperties")
    обз знч ОсновныеСвойства: Строка?
    @JsonСвойство(Имя = "note")
    обз знч Комментарий: Строка?
    @JsonСвойство(Имя = "sendNotification")
    обз знч ОповещатьПользователя: Булево?
    @JsonСвойство(Имя = "updatePresentationsPossible")
    обз знч ВозможноОбновлениеПредставлений: Булево?
;    

@ВПроекте
структура ДокументНаПодпись_2_0
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка?
    @JsonСвойство(Имя = "employerID")
    обз знч Организация: Строка?
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка?
    @JsonСвойство(Имя = "document")
    обз знч Документ: Файлы.ЭлектронныйДокументJson_V2_0?
    @JsonСвойство(Имя = "employees")
    обз знч Сотрудники: Массив<Строка>?
    @JsonСвойство(Имя = "date")
    обз знч Дата: ДатаВремя?
    @JsonСвойство(Имя = "basicProperties")
    обз знч ОсновныеСвойства: Строка?
    @JsonСвойство(Имя = "note")
    обз знч Комментарий: Строка?
    @JsonСвойство(Имя = "sendNotification")
    обз знч ОповещатьПользователя: Булево?
    @JsonСвойство(Имя = "updatePresentationsPossible")
    обз знч ВозможноОбновлениеПредставлений: Булево?
;    

@ВПроекте
структура ДокументНаПодпись_2_1
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка?
    @JsonСвойство(Имя = "employerID")
    обз знч Организация: Строка?
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка?
    @JsonСвойство(Имя = "document")
    обз знч Документ: Файлы.ЭлектронныйДокументJson_V2_1?
    @JsonСвойство(Имя = "employees")
    обз знч Сотрудники: Массив<Строка>?
    @JsonСвойство(Имя = "date")
    обз знч Дата: ДатаВремя?
    @JsonСвойство(Имя = "basicProperties")
    обз знч ОсновныеСвойства: Строка?
    @JsonСвойство(Имя = "note")
    обз знч Комментарий: Строка?
    @JsonСвойство(Имя = "sendNotification")
    обз знч ОповещатьПользователя: Булево?
    @JsonСвойство(Имя = "updatePresentationsPossible")
    обз знч ВозможноОбновлениеПредставлений: Булево?
;    

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<ДокументНаПодпись>
    иначе если ВерсияФорматаОбмена >= Версия{2.1}
        возврат Тип<ДокументНаПодпись_2_1>
    иначе если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<ДокументНаПодпись_2_0>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<ДокументНаПодпись_1_0>
    ;
;

@ВПроекте
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        возврат Тип<Массив<ДокументНаПодпись>>
    иначе если ВерсияФорматаОбмена >= Версия{2.1}
        возврат Тип<Массив<ДокументНаПодпись_2_1>>
    иначе если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<Массив<ДокументНаПодпись_2_0>>
    иначе если ВерсияФорматаОбмена >= Версия{1.0}
        возврат Тип<Массив<ДокументНаПодпись_1_0>>
    ;
;

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "documentToBeSigned"
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДокументНаПодпись, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)

    исп Транзакции.Начать() 
    
    пер ДокументНаПодписьОбъект = Сервисы.ПрочитатьОбъект(ДанныеJson.Ид,
        &ДокументыНаПодпись.Объект.новый(Ууид), Тип<ДокументыНаПодпись.Ссылка>) как ДокументыНаПодпись.Объект
    
    знч ЭтоНовый = ДокументНаПодписьОбъект.ЭтоНовый()
    пер ОчиститьСогласования = не ЭтоНовый
    
    ДокументНаПодписьОбъект.ЗаполнитьПоДаннымJson(ДанныеJson, Сервисы)
    ДокументыНаПодписьФизическиеЛица.ЗагрузитьОбъектИзJson(ДанныеJson, Сервисы, ДокументНаПодписьОбъект.Ссылка)
    пер ФайлыДокумента = Файлы.ВложенияИзJson(ДанныеJson.Документ, Сервисы, ДокументНаПодписьОбъект.Ссылка)
    пер ЭлектронныйДокумент: Файлы.Объект?
    для ФайлДокумента из ФайлыДокумента
        если ФайлДокумента.ВидФайла == ВидыФайла.ЭлектронныйДокумент
            ЭлектронныйДокумент = ФайлДокумента
            ДокументНаПодписьОбъект.Файл = ЭлектронныйДокумент.Ссылка
            прервать
        ;
    ;
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ДокументНаПодписьОбъект, ДанныеJson.Ид), Сервисы.ИнструментыМенеджераОбъекта)
    знч Ключ = {"Владелец": ДокументНаПодписьОбъект.Ссылка}
    если ОчиститьСогласования
        ПолученныеДокументы.ЗарегисрироватьОбновлениеПредставленияДокумента(ДокументНаПодписьОбъект.Ссылка)
        если  ЭлектронныйДокумент != Неопределено
            ОчиститьСогласования = Файлы.ИзмененЭлектронныйДокумент(ДокументНаПодписьОбъект.Ссылка, ЭлектронныйДокумент)
        ;
    ;
    Сервисы.ЗаписатьКоллекцию(ФайлыДокумента, Ключ, Тип<Файлы.Ссылка>, новый ВебApiСервер.ИнструментыМенеджераОбъекта(
        (Объект: Сущность.Объект) -> (Объект как Файлы.Объект).Записать()
    ))
    
    ЗапланированныеЗадания.Создать(&ПослеЗагрузкиДокументаНаПодписьВФоне,
            ДокументНаПодписьОбъект.Ссылка, ДокументНаПодписьОбъект.ОповещатьПользователя, ОчиститьСогласования, ЭтоНовый)
        .Запланировать()
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДокументНаПодпись_1_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)

    исп Транзакции.Начать() 
    
    пер ДокументНаПодпись = Сервисы.ПрочитатьОбъект(ДанныеJson.Ид,
        &ДокументыНаПодпись.Объект.новый(Ууид), Тип<ДокументыНаПодпись.Ссылка>) как ДокументыНаПодпись.Объект
    
    знч ЭтоНовый = ДокументНаПодпись.ЭтоНовый()
    пер ОчиститьСогласования = не ЭтоНовый
    
    ДокументНаПодпись.ЗаполнитьПоДаннымJson(ДанныеJson, Сервисы)
    ДокументыНаПодписьФизическиеЛица.ЗагрузитьОбъектИзJson(ДанныеJson, Сервисы, ДокументНаПодпись.Ссылка)
    пер ФайлыДокумента = Файлы.ВложенияИзJson(ДанныеJson.Документ, Сервисы, ДокументНаПодпись.Ссылка)
    пер ЭлектронныйДокумент: Файлы.Объект?
    для ФайлДокумента из ФайлыДокумента
        если ФайлДокумента.ВидФайла == ВидыФайла.ЭлектронныйДокумент
            ЭлектронныйДокумент = ФайлДокумента
            ДокументНаПодпись.Файл = ЭлектронныйДокумент.Ссылка
            прервать
        ;
    ;
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ДокументНаПодпись, ДанныеJson.Ид), Сервисы.ИнструментыМенеджераОбъекта)
    знч Ключ = {"Владелец": ДокументНаПодпись.Ссылка}
    если ОчиститьСогласования
        ПолученныеДокументы.ЗарегисрироватьОбновлениеПредставленияДокумента(ДокументНаПодпись.Ссылка)
        если  ЭлектронныйДокумент != Неопределено
            ОчиститьСогласования = Файлы.ИзмененЭлектронныйДокумент(ДокументНаПодпись.Ссылка, ЭлектронныйДокумент)
        ;
    ;
    Сервисы.ЗаписатьКоллекцию(ФайлыДокумента, Ключ, Тип<Файлы.Ссылка>, новый ВебApiСервер.ИнструментыМенеджераОбъекта(
        (Объект: Сущность.Объект) -> (Объект как Файлы.Объект).Записать()
    ))
    
    ЗапланированныеЗадания.Создать(&ПослеЗагрузкиДокументаНаПодписьВФоне,
            ДокументНаПодпись.Ссылка, ДокументНаПодпись.ОповещатьПользователя, ОчиститьСогласования, ЭтоНовый)
        .Запланировать()
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДокументНаПодпись_2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)

    исп Транзакции.Начать() 
    
    пер ДокументНаПодписьОбъект = Сервисы.ПрочитатьОбъект(ДанныеJson.Ид,
        &ДокументыНаПодпись.Объект.новый(Ууид), Тип<ДокументыНаПодпись.Ссылка>) как ДокументыНаПодпись.Объект
    
    знч ЭтоНовый = ДокументНаПодписьОбъект.ЭтоНовый()
    пер ОчиститьСогласования = не ЭтоНовый
    
    ДокументНаПодписьОбъект.ЗаполнитьПоДаннымJson(ДанныеJson, Сервисы)
    ДокументыНаПодписьФизическиеЛица.ЗагрузитьОбъектИзJson(ДанныеJson, Сервисы, ДокументНаПодписьОбъект.Ссылка)
    пер ФайлыДокумента = Файлы.ВложенияИзJson_V2_0(ДанныеJson.Документ, Сервисы, ДокументНаПодписьОбъект.Ссылка)
    пер ЭлектронныйДокумент: Файлы.Объект?
    для ФайлДокумента из ФайлыДокумента
        если ФайлДокумента.ВидФайла == ВидыФайла.ЭлектронныйДокумент
            ЭлектронныйДокумент = ФайлДокумента
            ДокументНаПодписьОбъект.Файл = ЭлектронныйДокумент.Ссылка
            прервать
        ;
    ;
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ДокументНаПодписьОбъект, ДанныеJson.Ид), Сервисы.ИнструментыМенеджераОбъекта)
    знч Ключ = {"Владелец": ДокументНаПодписьОбъект.Ссылка}
    если ОчиститьСогласования
        ПолученныеДокументы.ЗарегисрироватьОбновлениеПредставленияДокумента(ДокументНаПодписьОбъект.Ссылка)
        если  ЭлектронныйДокумент != Неопределено
            ОчиститьСогласования = Файлы.ИзмененЭлектронныйДокумент(ДокументНаПодписьОбъект.Ссылка, ЭлектронныйДокумент)
        ;
    ;
    Сервисы.ЗаписатьКоллекцию(ФайлыДокумента, Ключ, Тип<Файлы.Ссылка>, новый ВебApiСервер.ИнструментыМенеджераОбъекта(
        (Объект: Сущность.Объект) -> (Объект как Файлы.Объект).Записать()
    ))
    
    ЗапланированныеЗадания.Создать(&ПослеЗагрузкиДокументаНаПодписьВФоне,
            ДокументНаПодписьОбъект.Ссылка, ДокументНаПодписьОбъект.ОповещатьПользователя, ОчиститьСогласования, ЭтоНовый)
        .Запланировать()
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДокументНаПодпись_2_1, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)

    исп Транзакции.Начать() 
    
    пер ДокументНаПодписьОбъект = Сервисы.ПрочитатьОбъект(ДанныеJson.Ид,
        &ДокументыНаПодпись.Объект.новый(Ууид), Тип<ДокументыНаПодпись.Ссылка>) как ДокументыНаПодпись.Объект
    
    знч ЭтоНовый = ДокументНаПодписьОбъект.ЭтоНовый()
    пер ОчиститьСогласования = не ЭтоНовый
    
    ДокументНаПодписьОбъект.ЗаполнитьПоДаннымJson(ДанныеJson, Сервисы)
    ДокументыНаПодписьФизическиеЛица.ЗагрузитьОбъектИзJson(ДанныеJson, Сервисы, ДокументНаПодписьОбъект.Ссылка)
    пер ФайлыДокумента = Файлы.ВложенияИзJson_V2_1(ДанныеJson.Документ, Сервисы, ДокументНаПодписьОбъект.Ссылка)
    пер ЭлектронныйДокумент: Файлы.Объект?
    для ФайлДокумента из ФайлыДокумента
        если ФайлДокумента.ВидФайла == ВидыФайла.ЭлектронныйДокумент
            ЭлектронныйДокумент = ФайлДокумента
            ДокументНаПодписьОбъект.Файл = ЭлектронныйДокумент.Ссылка
            ДокументНаПодписьОбъект.ВариантПодписания = Файлы.ВариантПодписанияДокументаИзJson(ДанныеJson.Документ)
            прервать
        ;
    ;
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ДокументНаПодписьОбъект, ДанныеJson.Ид), Сервисы.ИнструментыМенеджераОбъекта)
    знч Ключ = {"Владелец": ДокументНаПодписьОбъект.Ссылка}
    если ОчиститьСогласования
        ПолученныеДокументы.ЗарегисрироватьОбновлениеПредставленияДокумента(ДокументНаПодписьОбъект.Ссылка)
        если  ЭлектронныйДокумент != Неопределено
            ОчиститьСогласования = Файлы.ИзмененЭлектронныйДокумент(ДокументНаПодписьОбъект.Ссылка, ЭлектронныйДокумент)
        ;
    ;
    Сервисы.ЗаписатьКоллекцию(ФайлыДокумента, Ключ, Тип<Файлы.Ссылка>, новый ВебApiСервер.ИнструментыМенеджераОбъекта(
        (Объект: Сущность.Объект) -> (Объект как Файлы.Объект).Записать()
    ))
    
    ЗапланированныеЗадания.Создать(&ПослеЗагрузкиДокументаНаПодписьВФоне,
            ДокументНаПодписьОбъект.Ссылка, ДокументНаПодписьОбъект.ОповещатьПользователя, ОчиститьСогласования, ЭтоНовый)
        .Запланировать()
;

метод ПослеЗагрузкиДокументаНаПодписьВФоне(Ссылка: ДокументыНаПодпись.Ссылка, ОповещатьПользователя: Булево, ОчиститьСогласования: Булево, ЭтоНовый: Булево)
    если ОчиститьСогласования
        МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<СогласованияДокументов>, "Документ")
        МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<ПодписиДокументов>, "Документ")
    ;
    ПослеЗаписиВФоне(Ссылка, ОповещатьПользователя, ЭтоНовый)
    ДокументыНаПодпись
        .ПересчитатьРазрешенияДоступаДляОбъектов([новый ДокументыНаПодпись.ДанныеРасчетаРазрешений(Ссылка)])
    
    Файлы
        .ПересчитатьРазрешенияДоступаДляОбъектов([новый Файлы.ДанныеРасчетаРазрешений(Ссылка)])    
;

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> ДокументыНаПодпись.ПолучитьСсылку(Ууид))
;

@ВПроекте
метод ЗаписатьДокумент(ДанныеДокумента: ЧитаемоеСоответствие<Строка, неизвестно>,
    СсылкиФизическихЛиц: Массив<ФизическиеЛица.Ссылка>): ДокументыНаПодпись.Ссылка
    
    пер ДокументНаПодпись = новый ДокументыНаПодпись.Объект()
    пер Заполнение = новый ДанныеДокументаНаПодпись()
    ЗаполнитьЗначенияРеквизитов(Заполнение, ДанныеДокумента)
    Заполнение.ФизическиеЛица = СсылкиФизическихЛиц
    возврат ЗаписатьДокумент(ДокументНаПодпись, Заполнение)
;

@ВПроекте
метод ЗаписатьДокумент(ДокументНаПодпись: ДокументыНаПодпись.Объект, ДанныеДокумента: ДанныеДокументаНаПодпись): ДокументыНаПодпись.Ссылка
    пер ДокументыФизическихЛиц =
        новый Соответствие<ФизическиеЛица.Ссылка, ДокументыНаПодписьФизическиеЛица.Ссылка>() 
    
    если не ДокументНаПодпись.ЭтоНовый()
        ДокументыФизическихЛиц = ФизическиеЛицаДокумента(ДокументНаПодпись.Ссылка)
    ;
    пер СсылкаНаДокумент = ДокументНаПодпись.Ссылка
    исп Транзакции.Начать()
    
    для ФизическоеЛицо из ДанныеДокумента.ФизическиеЛица
        
        если ДокументыФизическихЛиц.СодержитКлюч(ФизическоеЛицо)
            ДокументыФизическихЛиц.Удалить(ФизическоеЛицо)
            продолжить
        ;
        
        пер ДокументНаПодписьФизическогоЛица = новый ДокументыНаПодписьФизическиеЛица.Объект()
        ДокументНаПодписьФизическогоЛица.Документ = СсылкаНаДокумент
        ДокументНаПодписьФизическогоЛица.ФизическоеЛицо = ФизическоеЛицо
        ДокументНаПодписьФизическогоЛица.Записать()
    ;
    
    если не ДокументыФизическихЛиц.Пусто()
        для ДокументФизическогоЛица из ДокументыФизическихЛиц
            пер ДокументНаПодписьФизическогоЛица = ДокументФизическогоЛица.Значение.ЗагрузитьОбъект()
            ДокументНаПодписьФизическогоЛица.Удалить()
        ; 
    ;
    
    ДокументНаПодпись.Организация            = ДанныеДокумента.Организация
    ДокументНаПодпись.Дата                   = ДанныеДокумента.Дата
    ДокументНаПодпись.Наименование           = ДанныеДокумента.Наименование
    ДокументНаПодпись.Файл                   = ДанныеДокумента.Файл
    ДокументНаПодпись.ОсновныеСвойства       = ДанныеДокумента.ОсновныеСвойства
    ДокументНаПодпись.Комментарий            = ДанныеДокумента.Комментарий
    ДокументНаПодпись.Записать()
    
    Файлы.ЗаписатьФайлыПоВладельцу(ДанныеДокумента.Вложения, ДокументНаПодпись.Ссылка)

    возврат ДокументНаПодпись.Ссылка
;

//Область JSON

метод ДанныеДокументовНаПодпись(ДокументыНаПодписьСсылки: ЧитаемыйМассив<ДокументыНаПодпись.Ссылка>):
    Соответствие<ДокументыНаПодпись.Ссылка, ДанныеДокументаНаПодпись>
    
    пер ДанныеДокументов: Соответствие<ДокументыНаПодпись.Ссылка, ДанныеДокументаНаПодпись>
    пер ФизическиеЛицаДокументов = ДокументыНаПодписьФизическиеЛица.ФизическиеЛицаДокументов(ДокументыНаПодписьСсылки)
    знч Запрос = Запрос{
        Выбрать 
            Ссылка,
            Организация,
            Дата,
            Наименование,
            Файл,
            ОсновныеСвойства, 
            Комментарий,
            ВозможноОбновлениеПредставлений,
            ВариантПодписания
        Из 
            ДокументыНаПодпись
        Где
            Ссылка В (%ДокументыНаПодписьСсылки)}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        пер ДанныеДокумента = новый ДанныеДокументаНаПодпись()
        ЗаполнитьЗначенияРеквизитов(ДанныеДокумента,
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат))
        если ФизическиеЛицаДокументов.СодержитКлюч(РезультатСтрока.Ссылка)
            ДанныеДокумента.ФизическиеЛица.ДобавитьВсе(ФизическиеЛицаДокументов.Получить(РезультатСтрока.Ссылка))
        ;
        ДанныеДокументов.Вставить(РезультатСтрока.Ссылка, ДанныеДокумента)
    ;
    возврат ДанныеДокументов
;

@ВПроекте
метод ДанныеДокумента(ДокументНаПодпись: ДокументыНаПодпись.Ссылка): ДанныеДокументаНаПодпись
    пер ДанныеДокументов = ДанныеДокументовНаПодпись([ДокументНаПодпись])
    возврат ДанныеДокументов[ДокументНаПодпись]
;

метод ЗаполнитьЗначенияРеквизитов(ДанныеДокумента: ДанныеДокументаНаПодпись,
    ДанныеЗаполнения: ЧитаемоеСоответствие<Строка, неизвестно>)
    
    ДанныеДокумента.Организация = ДанныеЗаполнения["Организация"]
    ДанныеДокумента.Дата = ДанныеЗаполнения["Дата"]
    ДанныеДокумента.Наименование = ДанныеЗаполнения["Наименование"] как Строка
    ДанныеДокумента.Файл = ДанныеЗаполнения["Файл"]
    если ДанныеЗаполнения.СодержитКлюч("ОсновныеСвойства")
        ДанныеДокумента.ОсновныеСвойства = ДанныеЗаполнения["ОсновныеСвойства"]
    ;
    если ДанныеЗаполнения.СодержитКлюч("Комментарий")
        ДанныеДокумента.Комментарий = ДанныеЗаполнения["Комментарий"]
    ;
    ДанныеДокумента.ВозможноОбновлениеПредставлений = ДанныеЗаполнения["ВозможноОбновлениеПредставлений"]
    ДанныеДокумента.ВариантПодписания = ДанныеЗаполнения["ВариантПодписания"]
;

метод ФизическиеЛицаДокумента(ДокументНаПодпись: ДокументыНаПодпись.Ссылка)
    : Соответствие<ФизическиеЛица.Ссылка, ДокументыНаПодписьФизическиеЛица.Ссылка>
    
    возврат ФизическиеЛицаДокументов([ДокументНаПодпись])[ДокументНаПодпись]
;

метод ФизическиеЛицаДокументов(ДокументыНаПодпись: ЧитаемыйМассив<ДокументыНаПодпись.Ссылка>):
    ЧитаемоеСоответствие<ДокументыНаПодпись.Ссылка,
        Соответствие<ФизическиеЛица.Ссылка, ДокументыНаПодписьФизическиеЛица.Ссылка>>

    пер ДокументыФизическихЛиц = новый Соответствие<ДокументыНаПодпись.Ссылка,
        Соответствие<ФизическиеЛица.Ссылка, ДокументыНаПодписьФизическиеЛица.Ссылка>>()
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ФизическоеЛицо,
            Документ
        Из
            ДокументыНаПодписьФизическиеЛица
        Где
            Документ В (%ДокументыНаПодпись)}
    исп Результат = Запрос.Выполнить()
    
    для РезультатСтрока из Результат
        пер ФизическиеЛицаДокумента
            = новый Соответствие<ФизическиеЛица.Ссылка, ДокументыНаПодписьФизическиеЛица.Ссылка>()
        если ДокументыФизическихЛиц.СодержитКлюч(РезультатСтрока.Документ)
            ФизическиеЛицаДокумента = ДокументыФизическихЛиц.Получить(РезультатСтрока.Документ)
        ;         
        ФизическиеЛицаДокумента.Вставить(РезультатСтрока.ФизическоеЛицо, РезультатСтрока.Ссылка)
        ДокументыФизическихЛиц.Вставить(РезультатСтрока.Документ, ФизическиеЛицаДокумента)
    ;
    
    возврат ДокументыФизическихЛиц
;

@ВПодсистеме
метод ПодписываемыйФайлДокумента(Документ: ДокументыНаПодпись.Ссылка): Файлы.Ссылка?
    возврат Файлы.ЭлектронныйДокументОбъекта(Документ)    
;

@ВПодсистеме
метод ОрганизацияДокумента(Документ: ДокументыНаПодпись.Ссылка): Организации.Ссылка?
    знч Запрос = Запрос{
        Выбрать Первые 1
            Организация
        Из
            ДокументыНаПодпись
        Где
            Ссылка == %Документ
    }
    исп Результат = Запрос.Выполнить()
    возврат Результат.ЕдинственныйИлиУмолчание().Организация
;

//КонецОбласти

@ВПодсистеме
метод КоличествоНеподписанныхДокументов(ФизическоеЛицо: ФизическиеЛица.Ссылка): Число
    знч Запрос = Запрос{
        Выбрать
            Количество(Различные ФизическиеЛица.Документ) Как Количество
        Из
            ДокументыНаПодписьФизическиеЛица Как ФизическиеЛица
        Левое Соединение СогласованияДокументов Как Подписи
        По 
            Подписи.УчастникСогласования == ФизическиеЛица.ФизическоеЛицо И 
            Подписи.Документ == ФизическиеЛица.Документ и
            Подписи.РольПодписанта В (%{Согласования.РолиПодписантовПриложения()})
            Левое Соединение СостоянияЗапросовПодписания Как СостоянияЗапросовПодписания
            По СостоянияЗапросовПодписания.Документ == ФизическиеЛица.Документ
        Левое Соединение НовыеДокументы Как НовыеДокументы
            По ФизическиеЛица.Документ == НовыеДокументы.Объект
            и ФизическиеЛица.ФизическоеЛицо == НовыеДокументы.ФизическоеЛицо
        Где 
            ФизическиеЛица.ФизическоеЛицо == %ФизическоеЛицо 
            И Подписи.УчастникСогласования Есть Null
            И СостоянияЗапросовПодписания.Документ Есть Null
            И (ФизическиеЛица.Документ.ВариантПодписания == ВариантыПодписанияДокументов.Требуется
                или НЕ НовыеДокументы.Объект Есть Null)
            И ФизическиеЛица.Документ.Видимость НЕ В (%{[ВидимостьДокументаНаПодпись.ПослеПодписания]}) }
    исп Результат = Запрос.Выполнить()
    знч РезультатСтрока = новый ЧитаемыйМассив(Результат)[0]
    возврат РезультатСтрока.Количество
;

@ВПодсистеме
метод ОбработатьВводНового(ДокументНаПодпись: ДокументыНаПодпись.Ссылка, ОповещатьПользователя: Булево)
    
    если не ОповещатьПользователя
        возврат
    ;
    
    знч Запрос = Запрос{
        Выбрать 
            ДокументыНаПодпись.ФизическоеЛицо Как ФизическоеЛицо,
            ДокументыНаПодпись.Документ.Наименование.ЗаменитьNull("") Как Наименование
        Из 
            ДокументыНаПодписьФизическиеЛица Как ДокументыНаПодпись
                Левое Соединение РасчетныеЛисты.РасчетныеЛистыНаПодпись Как РасчетныеЛисты
                    По ДокументыНаПодпись.Документ == РасчетныеЛисты.Элемент
        Где 
            ДокументыНаПодпись.Документ == %ДокументНаПодпись
            И (РасчетныеЛисты.Элемент Есть Null)
            И ДокументыНаПодпись.Документ.ОповещатьПользователя.ЗаменитьNull(Ложь)}
    
    исп Результат = Запрос.Выполнить() 
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        пер ИменаРесурсов = [
            ПолученныеДокументы.ПОЛУЧЕННЫЙ_ДОКУМЕНТ_ОПУБЛИКОВАН_ТЕМА,
            ПолученныеДокументы.ПОЛУЧЕННЫЙ_ДОКУМЕНТ_ОПУБЛИКОВАН_SMS,
            ПолученныеДокументы.ПОЛУЧЕННЫЙ_ДОКУМЕНТ_ОПУБЛИКОВАН_PUSH,
            ПолученныеДокументы.ПОЛУЧЕННЫЙ_ДОКУМЕНТ_ОПУБЛИКОВАН_EMAIL]
        пер ЗначенияРесурсов = УниверсальныеМеханизмы.ЗначенияРесурсовПодсистемы(ПолученныеДокументы.ПОДСИСТЕМА_ПОЛУЧЕННЫЕ_ДОКУМЕНТЫ, ИменаРесурсов)
        для РезультатСтрока из РезультатСтроки
            если РезультатСтрока.ФизическоеЛицо != Неопределено
                пер СообщениеТема = ЗначенияРесурсов[ПолученныеДокументы.ПОЛУЧЕННЫЙ_ДОКУМЕНТ_ОПУБЛИКОВАН_ТЕМА].Заменить("\%ПредставлениеДокумента\%", РезультатСтрока.Наименование)
                пер СообщениеSMS = ЗначенияРесурсов[ПолученныеДокументы.ПОЛУЧЕННЫЙ_ДОКУМЕНТ_ОПУБЛИКОВАН_SMS].Заменить("\%ПредставлениеДокумента\%", РезультатСтрока.Наименование)
                пер СообщениеPUSH = ЗначенияРесурсов[ПолученныеДокументы.ПОЛУЧЕННЫЙ_ДОКУМЕНТ_ОПУБЛИКОВАН_PUSH].Заменить("\%ПредставлениеДокумента\%", РезультатСтрока.Наименование)
                пер СообщениеEMAIL = ЗначенияРесурсов[ПолученныеДокументы.ПОЛУЧЕННЫЙ_ДОКУМЕНТ_ОПУБЛИКОВАН_EMAIL].Заменить("\%ПредставлениеДокумента\%", РезультатСтрока.Наименование)
                
                пер УниверсальныеПараметры = ОбщегоНазначения.УниверсальныеПараметрыСтроковыхРесурсов(ЗначенияРесурсов, {РезультатСтрока.ФизическоеЛицо})
                пер ЗначенияПараметров: Соответствие<Строка,Строка>? = УниверсальныеПараметры.ПолучитьИлиУмолчание(РезультатСтрока.ФизическоеЛицо)
                если ЗначенияПараметров != Неопределено
                    СообщениеТема = ОбщегоНазначения.ЗаполнитьУниверсальныеПараметрыВСообщении(СообщениеТема, ЗначенияПараметров!)
                    СообщениеSMS = ОбщегоНазначения.ЗаполнитьУниверсальныеПараметрыВСообщении(СообщениеSMS, ЗначенияПараметров!)
                    СообщениеPUSH = ОбщегоНазначения.ЗаполнитьУниверсальныеПараметрыВСообщении(СообщениеPUSH, ЗначенияПараметров!)
                    СообщениеEMAIL = ОбщегоНазначения.ЗаполнитьУниверсальныеПараметрыВСообщении(СообщениеEMAIL, ЗначенияПараметров!)
                ;
                
                пер ТекстыУведомлений = новый УведомленияСервер.ТекстыСообщений(СообщениеТема, СообщениеSMS, СообщениеPUSH, СообщениеEMAIL)
                пер ДанныеУведомления = новый УведомленияСервер.ДанныеУведомления(Уведомления.ВидыУведомлений.ОзнакомлениеПодПодпись, ДокументНаПодпись) 
                УведомленияСервер.ОтправитьУведомления([РезультатСтрока.ФизическоеЛицо], ТекстыУведомлений, ДанныеУведомления)
            ;
        ;
    ;
;

@ВПодсистеме
метод ПослеЗаписиВФоне(Ссылка: ДокументыНаПодпись.Ссылка, ОповещатьПользователя: Булево, ЭтоНовый: Булево)
    ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(ДокументыНаПодписьФизическиеЛица.ФизическиеЛицаДокумента(Ссылка))
    если ЭтоНовый
        ОбработатьВводНового(Ссылка, ОповещатьПользователя)
    ;
    НовыеДокументы.ПриЗаписиОбъекта(Ссылка)
;