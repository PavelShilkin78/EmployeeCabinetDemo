импорт ВебApi
импорт УниверсальныеМеханизмы
импорт Компания::Согласования
импорт Компания
импорт КонтрольДоступа
импорт ОбменДанными
импорт ОбщегоНазначения
импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт ВладельцыКабинетов
импорт Уведомления
импорт УниверсальныеМеханизмы::ШаблоныДокументов

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ПолныйДоступАутентифицированным(этот)] 
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<АннулированияЗаявлений.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<АннулированияЗаявлений.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<АннулированияЗаявлений.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч РазрешенияДоступаАннулируемыхЗаявлений: Соответствие<АннулированияЗаявлений.Ссылка, ЧитаемыйМассив<РазрешениеДоступа>>
    знч АннулирующиеДокументы = ДокументыДляРасчетаРазерешений(Элементы)
    знч Документы = Аннулирование.АннулируемыеДокументы(АннулирующиеДокументы)
    для Сервис из АннулированияЗаявленийПоставщикОграничений.ПолучитьСервисы()
        РазрешенияДоступаАннулируемыхЗаявлений.ВставитьВсе(Сервис.РазрешенияДоступаАннулируемыхЗаявлений(Документы))
    ;
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеРедактированиеУдалениеДанныхСправочниковПерсонально([Элемент.ФизическоеЛицо]))
        РазрешенияЭлемента.ДобавитьВсе(РазрешенияДоступаАннулируемыхЗаявлений.ПолучитьИлиУмолчание(Элемент.Ссылка, []))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения

;

метод ДокументыДляРасчетаРазерешений(Элементы: ЧитаемыйМассив<АннулированияЗаявлений.ДанныеРасчетаРазрешений>): ЧитаемыйМассив<АннулирующийДокумент.Ссылка>
    возврат Элементы.Преобразовать(Элемент -> Элемент.Ссылка) 
;

//КонецОбласти

// Контракт СостояниеДокументовПоставщик

@ВПроекте
@Реализация
метод ПослеЗаписиСостоянияДокумента(ТекущееЗначение: СостояниеДокументов.Объект, ПредыдущееЗначение: СостояниеДокументов.Данные, ПараметрыЗаписи: СостояниеДокументов.ПараметрыЗаписи)
    если ТекущееЗначение.Документ это АннулированияЗаявлений.Ссылка
        Аннулирование.ПриИзмененииСогласования(ТекущееЗначение.Документ как АннулированияЗаявлений.Ссылка, ТекущееЗначение.Состояние, ПредыдущееЗначение.Состояние)
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        ЗапланированныеЗадания.Создать(&ПослеИзмененияСостоянияДополнение,
            ТекущееЗначение.Документ как АннулированияЗаявлений.Ссылка, ТекущееЗначение.Состояние, ПредыдущееЗначение.Состояние)
            .Настроить(Ключ = МенеджерЗаданий.КлючЗаданияПоСсылке(ТекущееЗначение.Документ, "ИСД"))
            .ЗапланироватьВТранзакции()
    ;
;

@ВПроекте
@Реализация
метод ЗаполнитьКартинкиДокументов(ДанныеЗапросов: ЧитаемыйМассив<СостояниеДокументаКомпонентДанных>)
;

// Конец СостояниеДокументовПоставщик

// Контракт ФайлыОбработчикСобытий

@ВПроекте
@Реализация
метод ПослеЗаписиФайла(Владелец: ВладелецФайлы.Ссылка, Файл: Файлы.Ссылка)
    если Владелец это АннулированияЗаявлений.Ссылка
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        ЗапланированныеЗадания.Создать(&ПослеЗаписиФайлаДополнение, Владелец как АннулированияЗаявлений.Ссылка)
            .Настроить(Ключ = МенеджерЗаданий.КлючЗаданияПоСсылке(Владелец, "ПЗФ"))
            .ЗапланироватьВТранзакции()
    ;
;

// Конец ФайлыОбработчикСобытий

//Область СлужебныйПрограммныйИнтерфейс

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    
    возврат {"cancelRequests": ДанныеЗаявленийВJson(Ссылки, Сервисы, ВерсияФорматаОбмена)}
;

метод ДанныеЗаявленийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ВерсияФорматаОбмена: Версия?, ДляПредставления: Булево = Ложь): Массив<Объект?>
    знч Данные: Массив<Объект?>
    если ВерсияФорматаОбмена != Неопределено и ВерсияФорматаОбмена >= Версия{3.0}
        для КлючИЗначение из ДанныеАннулированийЗаявлений(Ссылки)
                для Сотрудник из КлючИЗначение.Значение["Сотрудники"] как Массив<РабочиеМестаАннулирования>
                    Данные.Добавить(ДанныеАннулированияЗаявленияВJson(КлючИЗначение.Значение, Сервисы, ДляПредставления, Сотрудник))
                ;
        ;
    ;
    возврат Данные
;

@ВПроекте
метод ПолучитьДанныеJson(Ссылка: АннулированияЗаявлений.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Объект?
    если Ссылка == Неопределено 
        возврат Неопределено
    ;
    возврат ГруппаИзмененийВJson([Ссылка], Сервисы, ВерсияФорматаОбмена)["cancelRequests"]
;

структура ДанныеJson
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка
    @JsonСвойство(Имя = "personID")
    обз знч ФизическоеЛицо: Строка
    @JsonСвойство(Имя = "cancelledRequestID")
    обз знч ОменяемоеЗаявление: Строка
    @JsonСвойство(Имя = "employeeID")
    пер Сотрудник: Строка
    @JsonСвойство(Имя = "dateCreated")
    пер ДатаСоздания: Дата?
    @JsonСвойство(Имя = "note")
    пер Комментарий: Строка?
    @JsonСвойство(Имя = "document")
    пер Документ: Файлы.ЭлектронныйДокументJson_V2_1?
    @JsonСвойство(Имя = "electronicDocumentID")
    пер ЭлектронныйДокумент: Строка
    @JsonСвойство(Имя = "cancelledElectronicDocumentID")
    пер ЭлектронныйДокументОтменяемогоЗаявления: Строка
    @JsonСвойство(Имя = "attachments")
    пер Вложения: Массив<МенеджерФайлов.ДанныеФайлаJson>
    @JsonСвойство(Имя = "employerID")
    пер Организация: Строка?
    @JsonСвойство(Имя = "version")
    пер Версия: Число?
;

метод ДанныеАннулированияЗаявленияВJson(ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево, Сотрудник: РабочиеМестаАннулирования? = Неопределено): ДанныеJson
    
    знч ДанныеВJson = новый ДанныеJson(
        (ДанныеОбъекта["Ссылка"] как АннулированияЗаявлений.Ссылка).Ид.ВСтроку(),
        Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка),
        (ДанныеОбъекта["АннулируемыйДокумент"] как АннулируемыйДокумент.Ссылка).Ид.ВСтроку())
    
    ДанныеВJson.ДатаСоздания = ДанныеОбъекта["Дата"] как Дата?
    ДанныеВJson.Комментарий = ДанныеОбъекта["Комментарий"] как Строка
    
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_1(
        ДанныеОбъекта["Ссылка"] как АннулированияЗаявлений.Ссылка, ДляПредставления, Сервисы)
    если ДанныеФайлов.ЭлектронныйДокумент != Неопределено
        ДанныеВJson.Документ = ДанныеФайлов.ЭлектронныйДокумент
    ;
    если ДанныеФайлов.Вложения != Неопределено
        ДанныеВJson.Вложения = ДанныеФайлов.Вложения
    ;
    знч МетодыПолученияРазрезаДляИдентификатораЭлектронногоДокумента: Соответствие<Тип, ()-> Тип>
    
    для Сервис из АннулируемыйПоставщик.ПолучитьСервисы() 
        МетодыПолученияРазрезаДляИдентификатораЭлектронногоДокумента.ВставитьВсе(Сервис.МетодыПолученияРазрезаДляИдентификатораЭлектронногоДокумента())
    ;
    знч АннулируемыйДокумент = Аннулирование.АннулируемыйДокумент(ДанныеОбъекта["Ссылка"] как АннулирующийДокумент.Ссылка)
    знч ТипАннулируемогоДокумента = АннулируемыйДокумент.ПолучитьТип()
    знч МетодРазреза = 
        МетодыПолученияРазрезаДляИдентификатораЭлектронногоДокумента.Получить(ТипАннулируемогоДокумента)
    
    знч Разрез = МетодРазреза()
                
    если Сотрудник != Неопределено
        пер Идентификатор: Организации.Ссылка|Сотрудники.Ссылка|?
        если Разрез == Тип<Сотрудники.Ссылка>
            Идентификатор = Сотрудник.Сотрудник    
        иначе если Разрез == Тип<Организации.Ссылка>
            Идентификатор = Сотрудник.Организация
        ;
        ДанныеВJson.Сотрудник = Сервисы.ПолучитьИдентификатор(Сотрудник.Сотрудник)
        ДанныеВJson.Организация = Сервисы.ПолучитьИдентификатор(Сотрудник.Организация)
        ДанныеВJson.ЭлектронныйДокумент = Файлы.ИдентификаторЭлектронногоДокумента(
            ДанныеОбъекта["Ссылка"] как АннулированияЗаявлений.Ссылка, Идентификатор)
        ДанныеВJson.ЭлектронныйДокументОтменяемогоЗаявления = Файлы.ИдентификаторЭлектронногоДокумента(
            ДанныеОбъекта["АннулируемыйДокумент"] как Сущность.Ключ, Идентификатор)                
    ;
    если Сервисы.ПолучитьВерсию != Неопределено
        ДанныеВJson.Версия = Сервисы.ПолучитьВерсию((ДанныеОбъекта["Ссылка"] как АннулированияЗаявлений.Ссылка))
    ;
    возврат ДанныеВJson 
;

@ВПодсистеме
метод УдалитьДокумент(Документ: АннулированияЗаявлений.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?)
    
    исп Транзакции.Начать()
    пер СписокПодписавших = СогласованияДокументов.СписокПодписавших(Документ)
    если не СписокПодписавших.Пусто()
        выбросить новый Согласования.ИсключениеДокументУжеПодписан("Документ уже подписан", Документ)
    ;
    
    СостДокументов.УдалитьСостояниеДокумента(Документ)
    Документ.ЗагрузитьОбъект().Удалить()

    ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(ФизическоеЛицо, Истина)
    
;

@ВПодсистеме
метод ПослеЗаписиДополнение(Ссылка: АннулированияЗаявлений.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?, ТребуетсяРегистрацияИзменений: Булево)

    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, ФизическоеЛицо)
    ;
    ОбщегоНазначения.ПослеЗаписиОбъектаСЭлектоннымиДокументамиПредставлений(Ссылка, ТребуетсяРегистрацияИзменений)
;

метод ПослеИзмененияСостоянияДополнение(Документ: АннулированияЗаявлений.Ссылка, Состояние: СостоянияДокумента, ПрежнееСостояние: СостоянияДокумента?)
    знч ФизическоеЛицо = ФизическиеЛицаДокументов(новый Массив([Документ]))[Документ].ПервыйИлиУмолчание()
    знч АннулируемыйДокумент = Аннулирование.АннулируемыйДокумент(Документ)

    ОбщегоНазначения.ПослеИзмененияСотоянияЗаявки(Документ, Состояние, ФизическоеЛицо)

    ОтправитьУведомлениеПриИзмененииСостояния(Документ, ФизическоеЛицо, АннулируемыйДокумент, Состояние)
;

@ВПроекте
метод ПослеПодписания(Документ: АннулированияЗаявлений.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего)
    если ДанныеСогласующего.Роль == Согласования.РольПодписантаИсполнитель()
        СостДокументов.УстановитьСостояниеДокумента(Документ, СостоянияДокумента.Выполнен)
        знч АннулируемыйДокумент = Аннулирование.АннулируемыйДокумент(Документ)
        СостДокументов.УстановитьСостояниеДокумента(АннулируемыйДокумент, СостоянияДокумента.Аннулирован)
        возврат
    ;
    
    знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Документ, "ФизическоеЛицо")
    
    исп Транзакции.Начать()
    ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Документ, Истина)
    РегистрацияИзменений.ЗарегистрироватьИзменение(Документ, ФизическоеЛицо)
    СогласованияДокументов.ЗарегистрироватьПодписиОтправляемогоДокумента(Документ, Истина)
;

метод ПослеЗаписиФайлаДополнение(Документ: АннулированияЗаявлений.Ссылка)
    знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Документ, "ФизическоеЛицо")
    РегистрацияИзменений.ЗарегистрироватьИзменение(Документ, ФизическоеЛицо)
;

метод ОтправитьУведомлениеПриИзмененииСостояния(Документ: АннулированияЗаявлений.Ссылка, 
    ФизическоеЛицо: ФизическиеЛица.Ссылка?, АнулируемыйДокумент: АннулируемыйДокумент.Ссылка, Состояние: СостоянияДокумента)
    пер Получатель: ФизическиеЛица.Ссылка? = ФизическоеЛицо
    знч АннулируемыйДокументПредставление = АнулируемыйДокумент.Представление()
    пер Тема: Строка
    пер ТекстСообщения: Строка
    пер ВидУведомления: Уведомления.ВидыУведомлений = Уведомления.ВидыУведомлений.ПерсональнаяИнформация
    
    выбор Состояние
    когда СостоянияДокумента.Выполнен
        Тема = "Согласование отмены заявления"
        ТекстСообщения = "Согласовано заявление на отмену %АннулируемыйДокументПредставление"
    когда СостоянияДокумента.ПолученОтказ
        Тема = "Отмена заявления не согласована"
        ТекстСообщения = "Не согласовано заявление на отмену %АннулируемыйДокументПредставление"
    ;
    
    если не ТекстСообщения.Пусто()
        пер ДанныеУведомления = новый УведомленияСервер.ДанныеУведомления(ВидУведомления, Документ) 
        пер ТекстыУведомлений = новый УведомленияСервер.ТекстыСообщений(Тема, ТекстСообщения, ТекстСообщения, ТекстСообщения)
        УведомленияСервер.ОтправитьУведомление(Получатель, ТекстыУведомлений, ДанныеУведомления)
    ;
    
;

метод ДанныеАннулированийЗаявлений(ЗаявленияСсылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>):  
    ЧитаемоеСоответствие<АннулированияЗаявлений.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    
    знч Заявления: Массив<АннулированияЗаявлений.Ссылка>
    для Заявление из ЗаявленияСсылки
        Заявления.Добавить(Заявление как АннулированияЗаявлений.Ссылка)
    ;
    знч ДанныеЗаявлений: Соответствие<АннулированияЗаявлений.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    
    знч Запрос = Запрос{
        Выбрать 
            АннулированияЗаявлений.Ссылка, 
            АннулированияЗаявлений.Дата,
            АннулированияЗаявлений.МесяцСоздания, 
            АннулированияЗаявлений.ФизическоеЛицо,
            АннулированияЗаявлений.Причина,
            АннулированияЗаявлений.ПредставлениеДокумента,
            АннулированияЗаявлений.Комментарий,
            Аннулирование.АннулируемыйДокумент  
        Из 
            АннулированияЗаявлений как АннулированияЗаявлений
        Левое соединение Аннулирование как Аннулирование
        по АннулированияЗаявлений.Ссылка == Аннулирование.АннулирующийДокумент
        Где 
            АннулированияЗаявлений.Ссылка В (%Заявления) 
            И АннулированияЗаявлений.ФизическоеЛицо != Неопределено}
    исп Результат = Запрос.Выполнить() 
    знч МассивРезультата = Результат.ВМассив()
    знч АннулируемыеЗаявленияСсылки = МассивРезультата.Преобразовать(А -> А.АннулируемыйДокумент как АннулируемыйДокумент.Ссылка)
    
    знч МетодыПолученияРабочихМестАннулируемых: Соответствие<Тип, (Массив<АннулируемыйДокумент.Ссылка>) -> ЧитаемоеСоответствие<АннулируемыйДокумент.Ссылка, Массив<РабочиеМестаАннулирования>>>
    
    знч Сервисы = АннулируемыйПоставщик.ПолучитьСервисы()
     
    для Сервис из Сервисы
        МетодыПолученияРабочихМестАннулируемых.ВставитьВсе(Сервис.МетодыПолученияРабочихМестАннулируемых())
    ;
    
    для РезультатСтрока из МассивРезультата
        знч МетодПолученияРабочихМестАннулируемых = 
            МетодыПолученияРабочихМестАннулируемых.Получить(РезультатСтрока.АннулируемыйДокумент.ПолучитьТип())
    
        знч РабочиеМестаЗаявлений = МетодПолученияРабочихМестАннулируемых(АннулируемыеЗаявленияСсылки)
        пер СотрудникиЗаявления = новый Массив<РабочиеМестаАннулирования>()
        пер ДанныеЗаявления =
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат) как Соответствие<Строка, неизвестно>
        если РабочиеМестаЗаявлений.СодержитКлюч(ДанныеЗаявления["АннулируемыйДокумент"])
            для ДанныеРабочегоМеста из РабочиеМестаЗаявлений[ДанныеЗаявления["АннулируемыйДокумент"]]
                СотрудникиЗаявления.Добавить(новый РабочиеМестаАннулирования(
                    ДанныеРабочегоМеста.Сотрудник, ДанныеРабочегоМеста.Организация))
            ;
        ; 
        ДанныеЗаявления.Вставить("Сотрудники", СотрудникиЗаявления)
        ДанныеЗаявлений.Вставить(ДанныеЗаявления["Ссылка"], ДанныеЗаявления)
    ;
    возврат ДанныеЗаявлений
;
    
//КонецОбласти

@ВПодсистеме
метод ФизическиеЛицаДокументов(Документы: ЧитаемыйМассив<АннулированияЗаявлений.Ссылка>): ЧитаемоеСоответствие<АннулированияЗаявлений.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч ФизическиеЛицаДокументов: Соответствие<АннулированияЗаявлений.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ФизическоеЛицо
        ИЗ
            АннулированияЗаявлений
        ГДЕ
            Ссылка в (%Документы)   
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ФизическиеЛицаДокументов.Вставить(СтрокаРезультата.Ссылка, [СтрокаРезультата.ФизическоеЛицо])    
    ;
    возврат ФизическиеЛицаДокументов
;

@ВПроекте
метод ПредставлениеДокументаДляПодписания(Документ: АннулированияЗаявлений.Ссылка): Соответствие<Строка, ДвоичныйОбъект.Ссылка>
    знч ЭлектронныеДокументыОбъекта = Файлы.ЭлектронныеДокументыОбъекта(Документ)
    если ЭлектронныеДокументыОбъекта.Пусто()
        выбросить новый ИсключениеВыполнения("Документ по ссылке %{Документ.ВСтроку()} не найден")
    ;
    пер ПредставленияИдентификаторов = новый Соответствие<Строка, ДвоичныйОбъект.Ссылка>()
    для ЭлектронныйДокумент из ЭлектронныеДокументыОбъекта
        если ЭлектронныйДокумент.Значение.Оригинал != Неопределено
            ПредставленияИдентификаторов.Вставить(
                ЭлектронныйДокумент.Ключ, ЭлектронныйДокумент.Значение.Оригинал.Хранилище)
        ;
        возврат ПредставленияИдентификаторов
    ;
    возврат ПредставленияИдентификаторов
;    

@ВПроекте
метод ПредставленияИдентификаторовЭлектронныхДокументов(ДокументСсылка: АннулированияЗаявлений.Ссылка): Соответствие<Строка, Строка>
    пер ПредставленияДокументов = новый Соответствие<Строка, Строка>()
    пер Организации = новый Массив<Организации.Ссылка>()
    знч АннулируемыйДокумент = Аннулирование.АннулируемыйДокумент(ДокументСсылка)
    знч Сервисы = АннулируемыйПоставщик.ПолучитьСервисы()
    если АннулируемыйДокумент == Неопределено
        ПредставленияДокументов.Вставить("", "")
    иначе
        знч МетодыПолученияРабочегоМестаАннулируемого: Соответствие<Тип, (АннулируемыйДокумент.Ссылка) -> Массив<РабочиеМестаАннулирования>>
        знч МетодыПолученияРазрезаДляИдентификатораЭлектронногоДокумента: Соответствие<Тип, ()-> Тип>
        для Сервис из Сервисы
            МетодыПолученияРабочегоМестаАннулируемого.ВставитьВсе(Сервис.МетодыПолученияРабочегоМестаАннулируемого())
            МетодыПолученияРазрезаДляИдентификатораЭлектронногоДокумента.ВставитьВсе(Сервис.МетодыПолученияРазрезаДляИдентификатораЭлектронногоДокумента())
        ;
        
        знч МетодПолученияРабочегоМестаАннулируемого = 
            МетодыПолученияРабочегоМестаАннулируемого.Получить(АннулируемыйДокумент.ПолучитьТип())
    
        знч ТаблицаРабочиеМеста = МетодПолученияРабочегоМестаАннулируемого(АннулируемыйДокумент)
        
        знч ТипАннулируемогоДокумента = АннулируемыйДокумент.ПолучитьТип()
        знч МетодРазреза = 
            МетодыПолученияРазрезаДляИдентификатораЭлектронногоДокумента.Получить(ТипАннулируемогоДокумента)
        
        знч Разрез = МетодРазреза()    
        если ТаблицаРабочиеМеста.Пусто()
            ПредставленияДокументов.Вставить("", "")
        иначе
            для СтрокаРабочегоМеста из ТаблицаРабочиеМеста
                если не Организации.Содержит(СтрокаРабочегоМеста.Организация)
                    Организации.Добавить(СтрокаРабочегоМеста.Организация)
                ;
            ;
            знч ПоказыватьОрганизацию = Организации.Размер() > 1
            для СтрокаРабочегоМеста из ТаблицаРабочиеМеста
                  пер Идентификатор: Организации.Ссылка|Сотрудники.Ссылка|?
                если Разрез == Тип<Сотрудники.Ссылка>
                    Идентификатор = СтрокаРабочегоМеста.Сотрудник    
                иначе если Разрез == Тип<Организации.Ссылка>
                    Идентификатор = СтрокаРабочегоМеста.Организация
                ;
                ПредставленияДокументов.Вставить(
                    Файлы.ИдентификаторЭлектронногоДокумента(ДокументСсылка, Идентификатор),
                    Сотрудники.ПредставлениеРабочегоМеста(СтрокаРабочегоМеста.Сотрудник, ПоказыватьОрганизацию))
            ;
        ;
    ;    
    возврат ПредставленияДокументов
;

метод ДанныеАннулированияЗаявления(ДокументСсылка: АннулированияЗаявлений.Ссылка):
    ЧитаемоеСоответствие<Строка, Объект?>
    
    возврат ДанныеАннулированийЗаявлений([ДокументСсылка])[ДокументСсылка]

;

@ВПодсистеме
метод ДанныеДокументаДляПечатнойФормы(ДокументСсылка: Объект): Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>
    
    пер ДанныеДокумента = новый Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>()
    пер ДанныеЗаявления: Соответствие<Строка, Объект?>? =
        ДанныеАннулированияЗаявления(ДокументСсылка как АннулированияЗаявлений.Ссылка) как Соответствие<Строка, Объект?>?
    если ДанныеЗаявления != Неопределено
        пер ПоставляемыеДанные = ПредставленияДокументов.ДанныеПредставленияДокумента(ДанныеЗаявления)
        если (ДанныеЗаявления!["Сотрудники"] как Массив<РабочиеМестаАннулирования>).Пусто()
            ДанныеДокумента.Вставить("", новый ШаблоныДокументовМенеджер.ДанныеПечатныхФорм(Данные = ПоставляемыеДанные))
        иначе
            знч Сервисы = АннулируемыйПоставщик.ПолучитьСервисы()
            знч МетодыПолученияРазрезаДляИдентификатораЭлектронногоДокумента: Соответствие<Тип, ()-> Тип>
            для Сервис из Сервисы
                МетодыПолученияРазрезаДляИдентификатораЭлектронногоДокумента.ВставитьВсе(Сервис.МетодыПолученияРазрезаДляИдентификатораЭлектронногоДокумента())
            ;
            знч АннулируемыйДокумент = ДанныеЗаявления!["АннулируемыйДокумент"] как АннулируемыйДокумент.Ссылка
            знч ТипАннулируемогоДокумента = АннулируемыйДокумент.ПолучитьТип()
            знч МетодРазреза = 
                МетодыПолученияРазрезаДляИдентификатораЭлектронногоДокумента.Получить(ТипАннулируемогоДокумента)
            знч Разрез = МетодРазреза()
            для СотрудникОрганизации из ДанныеЗаявления!["Сотрудники"] как Массив<РабочиеМестаАннулирования>
                
                пер Идентификатор: Организации.Ссылка|Сотрудники.Ссылка|?
                если Разрез == Тип<Сотрудники.Ссылка>
                    Идентификатор = СотрудникОрганизации.Сотрудник    
                иначе если Разрез == Тип<Организации.Ссылка>
                    Идентификатор = СотрудникОрганизации.Организация
                ;
                
                знч ИдентификаторЭлектронногоДокумента = Файлы.ИдентификаторЭлектронногоДокумента(
                    ДокументСсылка как АннулированияЗаявлений.Ссылка, Идентификатор)
                пер ПоставляемыеДанныеИдентификатора = новый Соответствие<Строка, Объект?>()
                ПоставляемыеДанныеИдентификатора.ВставитьВсе(ПоставляемыеДанные)
                ПоставляемыеДанныеИдентификатора.Вставить("Организация", СотрудникОрганизации.Организация)
                ПоставляемыеДанныеИдентификатора.Вставить("Сотрудник", СотрудникОрганизации.Сотрудник)
                ДанныеДокумента.Вставить(ИдентификаторЭлектронногоДокумента,
                    новый ШаблоныДокументовМенеджер.ДанныеПечатныхФорм(
                        ИдентификаторЭлектронногоДокумента,
                        ПоставляемыеДанныеИдентификатора))
            ;
        ;
    ;
    
    знч МетодыДополненияДанныхДокументаДляПечатнойФормыДаннымиАннулируемого: Соответствие<Тип, (Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>, АннулируемыйДокумент.Ссылка) -> ничто>
    
    для Сервис из АннулируемыйПоставщик.ПолучитьСервисы()
        МетодыДополненияДанныхДокументаДляПечатнойФормыДаннымиАннулируемого.ВставитьВсе(Сервис.МетодыДополненияДанныхДокументаДляПечатнойФормыДаннымиАннулируемого())
    ;
    
    знч АннулируемыйДокумент = Аннулирование.АннулируемыйДокумент(ДокументСсылка как АннулирующийДокумент.Ссылка)
    
    знч МетодДополненияДанныхДокументаДляПечатнойФормыДаннымиАннулируемого = 
        МетодыДополненияДанныхДокументаДляПечатнойФормыДаннымиАннулируемого.Получить(АннулируемыйДокумент.ПолучитьТип())
    
    МетодДополненияДанныхДокументаДляПечатнойФормыДаннымиАннулируемого(ДанныеДокумента, АннулируемыйДокумент)   
    
    ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента)
    
    возврат ДанныеДокумента 
;

@ВПодсистеме
метод ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента: Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>)
    для ДанныеИдентификатора из ДанныеДокумента
        пер ПоставляемыеДанные = ДанныеИдентификатора.Значение.Данные
        
        знч ПричинаОтмены = (ПоставляемыеДанные["ДанныеДокументаПричина"] как Строка?)
    
        пер Текст = ПоставляемыеДанные["ДанныеДокументаТекст"] как Строка
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаПричина", ПричинаОтмены)
        если ПричинаОтмены != "" 
            Текст = "%Текст\нПричина отмены: %ПричинаОтмены."
        ;
    
        знч ОписаниеВложений = ПрисоединенныеФайлыМенеджер.ТекстОписанияПриложенныхФайлов(ПоставляемыеДанные["ДанныеДокументаСсылка"] как АннулированияЗаявлений.Ссылка)
        ПоставляемыеДанные.Вставить("ДанныеДокументаВложения", ОписаниеВложений)
        Текст = ПрисоединенныеФайлыМенеджер.ТекстCОписаниемПриложенныхФайлов(Текст, ОписаниеВложений)
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаТекст", Текст)
        
    ;
;

@ВПодсистеме
метод ДанныеДокументаДляПодготовкиОписаний(СсылкаНаДокумент: Сущность.Ключ): Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>
    
    пер ДанныеДокумента = новый Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>()
    знч ДанныеЗаявления = ДанныеАннулированияЗаявления(СсылкаНаДокумент как АннулированияЗаявлений.Ссылка)
    знч МетодыПолученияНаименованияЗаявления: Соответствие<Тип, (АннулируемыйДокумент.Ссылка) -> Строка>
    знч МетодыПолученияРазрезаДляИдентификатораЭлектронногоДокумента: Соответствие<Тип, ()-> Тип>
    для Сервис из АннулируемыйПоставщик.ПолучитьСервисы()
        МетодыПолученияНаименованияЗаявления.ВставитьВсе(Сервис.МетодыПолученияНаименованияЗаявления())
        МетодыПолученияРазрезаДляИдентификатораЭлектронногоДокумента.ВставитьВсе(Сервис.МетодыПолученияРазрезаДляИдентификатораЭлектронногоДокумента())
    ;
    
    знч АннулируемыйДокумент = Аннулирование.АннулируемыйДокумент(СсылкаНаДокумент как АннулирующийДокумент.Ссылка)
    
    знч ТипАннулируемогоДокумента = АннулируемыйДокумент.ПолучитьТип()
    знч МетодРазреза = 
        МетодыПолученияРазрезаДляИдентификатораЭлектронногоДокумента.Получить(ТипАннулируемогоДокумента)
    
    знч Разрез = МетодРазреза()
        
    знч МетодПолученияНаименования = 
        МетодыПолученияНаименованияЗаявления.Получить(АннулируемыйДокумент.ПолучитьТип())
    
    знч НаименованиеЗаявления = МетодПолученияНаименования(АннулируемыйДокумент)         
    
    если (ДанныеЗаявления["Сотрудники"] как Массив<РабочиеМестаАннулирования>).Пусто()
        ДанныеДокумента.Вставить("",
            новый Согласования.ДанныеДляПодготовкиОписания(
                Сотрудники.ОрганизацияФизическогоЛицаПоОсновномуМестуРаботы(ДанныеЗаявления["ФизическоеЛицо"] как ФизическиеЛица.Ссылка),
                ДанныеЗаявления["Дата"] как Дата,
                НаименованиеЗаявления,
                ШаблоныДокументов.КОД_ДОКУМЕНТА_КЭДО_ПРОЧЕЕ
            )
        )
    иначе
        для СотрудникОрганизации из (ДанныеЗаявления["Сотрудники"] как Массив<РабочиеМестаАннулирования>)
            пер Идентификатор: Организации.Ссылка|Сотрудники.Ссылка|?
            если Разрез == Тип<Сотрудники.Ссылка>
               Идентификатор = СотрудникОрганизации.Сотрудник    
            иначе если Разрез == Тип<Организации.Ссылка>
                Идентификатор = СотрудникОрганизации.Организация
            ;
            знч ИдентификаторЭлектронногоДокумента = Файлы.ИдентификаторЭлектронногоДокумента(СсылкаНаДокумент как АннулированияЗаявлений.Ссылка, Идентификатор)
            ДанныеДокумента.Вставить(ИдентификаторЭлектронногоДокумента,
                новый Согласования.ДанныеДляПодготовкиОписания(
                    СотрудникОрганизации.Организация,
                    ДанныеЗаявления["Дата"] как Дата,
                    НаименованиеЗаявления,
                    ШаблоныДокументов.КОД_ДОКУМЕНТА_КЭДО_ПРОЧЕЕ
                )
            )
        ;
    ;
    
    возврат ДанныеДокумента
;