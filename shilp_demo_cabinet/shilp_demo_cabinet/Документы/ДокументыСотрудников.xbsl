импорт ВебApi
импорт ВладельцыКабинетов
импорт Компания
импорт Компания::Согласования
импорт КонтрольДоступа
импорт ОбменДанными
импорт ОбщегоНазначения
импорт ОбщиеСтандартные
импорт УниверсальныеМеханизмы
импорт УниверсальныеМеханизмы::ШаблоныДокументов
импорт ФизическиеЛица
импорт Уведомления

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ПолныйДоступАутентифицированным(этот)]    
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ДокументыСотрудников.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ДокументыСотрудников.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ДокументыСотрудников.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ЧтениеИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеДанныхСправочниковПоПолномочиям(
            [КонтрольДоступа.ПолномочиеПросмотрЛичныхДанных()],
            Элемент.ФизическоеЛицо
        ))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеРедактированиеУдалениеДанныхСправочниковПерсонально([Элемент.ФизическоеЛицо]))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

//КонецОбласти

//Область СлужебныйПрограммныйИнтерфейс

// Контракт СостояниеДокументовПоставщик

@ВПроекте
@Реализация
метод ПослеЗаписиСостоянияДокумента(ТекущееЗначение: СостояниеДокументов.Объект, ПредыдущееЗначение: СостояниеДокументов.Данные, ПараметрыЗаписи: СостояниеДокументов.ПараметрыЗаписи)
    если ТекущееЗначение.Документ это ДокументыСотрудников.Ссылка
        если ТекущееЗначение.Состояние == СостоянияДокумента.Черновик и ПредыдущееЗначение.Состояние == СостоянияДокумента.Подготовлен
            если ОбменДанными.ЭтоОтправляемыйДокумент(ТекущееЗначение.Документ как ИсходящиеДанные.Ссылка)
                выбросить новый ОбменДанными.ИсключениеДокументУжеОтправлен("Документ уже отправлен", ТекущееЗначение.Документ)
            ;
            пер СписокПодписавших = СогласованияДокументов.СписокПодписавших(ТекущееЗначение.Документ)
            если не СписокПодписавших.Пусто()
                выбросить новый Согласования.ИсключениеДокументУжеПодписан("Документ уже подписан", ТекущееЗначение.Документ)
            ;
        ;
        пер НастройкиОтложеннойОтправки = ОбщегоНазначения.НастройкиОтложеннойОтправкиУведомлений()
        МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
        ЗапланированныеЗадания.Создать(&ПослеИзмененияСостоянияДополнение,
            ТекущееЗначение.Документ как ДокументыСотрудников.Ссылка, ТекущееЗначение.Состояние, ПредыдущееЗначение.Состояние)
            .Настроить(Ключ = МенеджерЗаданий.КлючЗаданияПоСсылке(ТекущееЗначение.Документ, "ИСД"))
            .ЗапланироватьВТранзакции()
            
        ЗапланированныеЗадания.Создать(&ПослеИзмененияСостоянияДополнениеСПаузой,
            ТекущееЗначение.Документ как ДокументыСотрудников.Ссылка, ТекущееЗначение.Состояние, ПредыдущееЗначение.Состояние)
            .Настроить(
                Ключ = (новый Ууид().ВСтроку()) + "ИСДП",
                Задержка = Длительность.ИзСекунд(НастройкиОтложеннойОтправки.Задержка))
            .Запланировать()
    ;
;

@ВПодсистеме
метод ПослеПодписания(Документ: ДокументыСотрудников.Ссылка, ДанныеСогласующего: Согласования.ДанныеСогласующего)
    
    знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Документ, "ФизическоеЛицо")
    пер СостояниеДокумента: СостоянияДокумента = СостДокументов.СостояниеДокумента(Документ)
    // Состояние запроса сотрудника уже изменилось (запрос отозван или, напротив, уже обработан) 
    если (ФизическоеЛицо != ДанныеСогласующего.Согласующий и СостояниеДокумента == СостоянияДокумента.Черновик)
        или СостояниеДокумента == СостоянияДокумента.ПолученОтказ
        
        выбросить новый ОбщегоНазначения.ИсключениеНедопустимоеСостояниеЗапроса("Недопустимое состояние документа при подписании", СостояниеДокумента)
    иначе если СостояниеДокумента == СостоянияДокумента.Выполнен
        возврат
    ;
    
    // Документ уже отправлен донор-приложению
    пер РолиПодписантовESS = Согласования.РолиПодписантовПриложения() 
    если РолиПодписантовESS.Содержит(ДанныеСогласующего.Роль) и ОбменДанными.ЭтоОтправляемыйДокумент(Документ)            
        выбросить новый ОбменДанными.ИсключениеДокументУжеОтправлен("Документ уже отправлен", Документ)
    ;
    
    пер НастройкиОтложеннойОтправки = ОбщегоНазначения.НастройкиОтложеннойОтправкиУведомлений()
    МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
    ЗапланированныеЗадания.Создать(&ПослеПодписанияДополнениеСПаузой,
        Документ, ДанныеСогласующего.Роль, ДанныеСогласующего.НомерШага, ФизическоеЛицо)
        .Настроить(
            Ключ = (новый Ууид().ВСтроку()) + "ОП",
            Задержка = Длительность.ИзСекунд(НастройкиОтложеннойОтправки.Задержка))
        .Запланировать()
;

@ВПроекте
метод ПослеПодписанияДополнениеСПаузой(Документ: ДокументыСотрудников.Ссылка, РольСогласующего: РолиПодписантов.Ссылка,
    НомерШагаСогласования: Число, ФизическоеЛицо: ФизическиеЛица.Ссылка)
    
    знч ТекущиеСогласующие = Согласования.ТекущиеСогласующие(Документ, ПолученныеДокументы.ВидСогласуемогоДокументаСотрудника(Документ),
        ФизическоеЛицо)
        
    если РольСогласующего == Согласования.РольПодписантаИсполнитель()
        СостДокументов.УстановитьСостояниеДокумента(Документ, СостоянияДокумента.Выполнен)
    иначе если ТекущиеСогласующие.Пусто()
        РегистрацияИзменений.ЗарегистрироватьИзменение(Документ, ФизическоеЛицо)
        СогласованияДокументов.ПослеПолногоСогласования(Документ)
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Документ, Истина)
        СогласованияДокументов.ЗарегистрироватьПодписиОтправляемогоДокумента(Документ, Истина)
        ОтправитьУведомлениеОПодписании(Документ)
    иначе если ТекущиеСогласующие.Первый().НомерШага > НомерШагаСогласования
        пер РеквизитыОтпуска = МенеджерСущности.ЗначенияРеквизитовОбъекта(Документ, 
            ["Ссылка", "ФизическоеЛицо", "Дата", "ШаблонДокумента"])
        ОтправитьУведомленияСогласующим(РеквизитыОтпуска, ТекущиеСогласующие)
    ;
;

@ВПроекте
@Реализация
метод ЗаполнитьКартинкиДокументов(ДанныеЗапросов: ЧитаемыйМассив<СостояниеДокументаКомпонентДанных>)
;

// Конец СостояниеДокументовПоставщик

метод ПослеИзмененияСостоянияДополнение(Документ: ДокументыСотрудников.Ссылка, Состояние: СостоянияДокумента, ПрежнееСостояние: СостоянияДокумента?)
    знч ФизическоеЛицо = МенеджерСущности.ЗначениеРеквизитаОбъекта(Документ, "ФизическоеЛицо")
    РегистрацияИзменений.ЗарегистрироватьИзменение(Документ, ФизическоеЛицо)
;

метод ПослеИзмененияСостоянияДополнениеСПаузой(Документ: ДокументыСотрудников.Ссылка, Состояние: СостоянияДокумента, ПрежнееСостояние: СостоянияДокумента?)
    пер ТекущееСостояние = СостДокументов.СостояниеДокумента(Документ)
    если ТекущееСостояние != Состояние
        возврат
    ;
    знч РеквизитыДокумента = МенеджерСущности.ЗначенияРеквизитовОбъекта(Документ, 
            ["Ссылка","ФизическоеЛицо", "ШаблонДокумента", "Дата"])
    знч ШаблонДокумента = РеквизитыДокумента["ШаблонДокумента"] как ШаблоныДокументов.Ссылка
    если не ШаблоныДокументов.НеобходимоСогласованиеИлиПодписание(ШаблонДокумента)
        РегистрацияИзменений.ЗарегистрироватьИзменение(Документ, РеквизитыДокумента["ФизическоеЛицо"] как ФизическиеЛица.Ссылка)
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Документ, Истина)
    ;
    
    ОбщегоНазначения.ПослеИзмененияСотоянияЗаявки(Документ, Состояние, РеквизитыДокумента["ФизическоеЛицо"])
    
    ОтправитьУведомлениеПриИзмененииСостояния(РеквизитыДокумента, Состояние)
;

метод ОтправитьУведомлениеПриИзмененииСостояния(РеквизитыДокумента: ЧитаемоеСоответствие<Строка, Объект?>, Состояние: СостоянияДокумента)
    пер Получатель: ФизическиеЛица.Ссылка? = РеквизитыДокумента["ФизическоеЛицо"] как ФизическиеЛица.Ссылка?
    пер Тема = МенеджерСущности.ПредставлениеСсылки(РеквизитыДокумента["ШаблонДокумента"] как ШаблоныДокументов.Ссылка)
    пер ТекстСообщения: Строка
    если Состояние == СостоянияДокумента.Выполнен
        ТекстСообщения = "Обработано ${РеквизитыДокумента["Ссылка"]}"
    иначе если Состояние == СостоянияДокумента.ПолученОтказ
        знч ДанныеОтказа = СогласованияДокументов.ДанныеПодписейДокумента(РеквизитыДокумента["Ссылка"], Неопределено, [], РезультатыСогласования.Отказано)
        пер КомментарийПриОтказе = ""
        если не ДанныеОтказа.Пусто()
            КомментарийПриОтказе = ДанныеОтказа.Первый().Комментарий
        ;
        если КомментарийПриОтказе.Пусто()
            ТекстСообщения = "Отказано ${РеквизитыДокумента["Ссылка"]}"
        иначе
            ТекстСообщения = "Отказано ${РеквизитыДокумента["Ссылка"]}. %КомментарийПриОтказе."
        ;
    ;
    если не ТекстСообщения.Пусто()
        пер ДанныеУведомления = новый УведомленияСервер.ДанныеУведомления(
            Уведомления.ВидыУведомлений.ПерсональнаяИнформация, РеквизитыДокумента["Ссылка"] как ДокументыСотрудников.Ссылка)
        пер ТекстыУведомлений = новый УведомленияСервер.ТекстыСообщений(Тема, ТекстСообщения, ТекстСообщения, ТекстСообщения)
        УведомленияСервер.ОтправитьУведомление(Получатель, ТекстыУведомлений, ДанныеУведомления)
    ;
;

метод ОтправитьУведомлениеОПодписании(Документ: ДокументыСотрудников.Ссылка)
    знч РеквизитыДокумента: ЧитаемоеСоответствие<Строка, неизвестно> = МенеджерСущности.ЗначенияРеквизитовОбъекта(Документ, 
            ["Ссылка", "ФизическоеЛицо", "ШаблонДокумента"])
    знч Получатель: ФизическиеЛица.Ссылка = РеквизитыДокумента["ФизическоеЛицо"]
    пер Тема = МенеджерСущности.ПредставлениеСсылки(РеквизитыДокумента["ШаблонДокумента"] как ШаблоныДокументов.Ссылка)
    пер ТекстСообщения = "Ваше обращение %Тема подписано"
    пер ДанныеУведомления = новый УведомленияСервер.ДанныеУведомления(
        Уведомления.ВидыУведомлений.ПерсональнаяИнформация, РеквизитыДокумента["Ссылка"] как ДокументыСотрудников.Ссылка)
    пер ТекстыУведомлений = новый УведомленияСервер.ТекстыСообщений(Тема, ТекстСообщения, ТекстСообщения, ТекстСообщения)
    УведомленияСервер.ОтправитьУведомление(Получатель, ТекстыУведомлений, ДанныеУведомления)
;

метод ОтправитьУведомленияСогласующим(РеквизитыДокумента: ЧитаемоеСоответствие<Строка, Объект?>,
    ТекущиеСогласующие: ЧитаемыйМассив<Согласования.ДанныеСогласующего>)
    
    знч Тема = МенеджерСущности.ПредставлениеСсылки(РеквизитыДокумента["ШаблонДокумента"] как Справочник.Ссылка)
    знч ПредставлениеОтправителя = МенеджерСущности.ЗначениеРеквизитаОбъекта(
        РеквизитыДокумента["ФизическоеЛицо"] как ФизическиеЛица.Ссылка, "Представление")
        
    для Согласующий из ТекущиеСогласующие
        знч ТекстСообщения =
            "%ПредставлениеОтправителя: прошу согласовать %Тема от %{МенеджерДат.ФорматДаты(РеквизитыДокумента["Дата"] как Дата)}"
        
        пер ДанныеУведомления = новый УведомленияСервер.ДанныеУведомления(
            Уведомления.ВидыУведомлений.ПерсональнаяИнформация, РеквизитыДокумента["Ссылка"] как ДокументыСотрудников.Ссылка)
        пер ТекстыУведомлений = новый УведомленияСервер.ТекстыСообщений(Тема, ТекстСообщения, ТекстСообщения, ТекстСообщения)
        УведомленияСервер.ОтправитьУведомление(Согласующий.Согласующий, ТекстыУведомлений, ДанныеУведомления)
    ;
;

@ВПодсистеме
метод ФизическиеЛицаДокументов(Документы: ЧитаемыйМассив<ДокументыСотрудников.Ссылка>): ЧитаемоеСоответствие<ДокументыСотрудников.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч ФизическиеЛицаДокументов: Соответствие<ДокументыСотрудников.Ссылка, ЧитаемыйМассив<ФизическиеЛица.Ссылка>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ФизическоеЛицо
        ИЗ
            ДокументыСотрудников
        ГДЕ
            Ссылка в (%Документы)   
    }
    
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ФизическиеЛицаДокументов.Вставить(СтрокаРезультата.Ссылка, [СтрокаРезультата.ФизическоеЛицо])    
    ;
    возврат ФизическиеЛицаДокументов
;

// JSON

@ВПроекте  
метод ГруппаИзмененийВJson_2_2(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"employeeDocuments": ДанныеДокументовСотрудниковВJson_2_2(Ссылки, Сервисы)}
;

@ВПроекте  
метод ГруппаИзмененийВJson_3_0(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"employeeDocuments": ДанныеДокументовСотрудниковВJson_3_0(Ссылки, Сервисы)}
;

метод ДанныеДокументовСотрудниковВJson_2_2(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево = Ложь): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеДокументовСотрудников(Ссылки)
        Данные.Добавить(ДанныеЗаявленияВJson_2_2(КлючИЗначение.Значение, Сервисы, ДляПредставления))
    ;
    возврат Данные            
;

метод ДанныеДокументовСотрудниковВJson_3_0(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ДляПредставления: Булево = Ложь): Массив<Объект?>
    знч Данные: Массив<Объект?>
    для КлючИЗначение из ДанныеДокументовСотрудников(Ссылки)
        Данные.Добавить(ДанныеЗаявленияВJson_3_0(КлючИЗначение.Значение, Сервисы, ДляПредставления))
    ;
    возврат Данные            
;

@ВПроекте
метод ПолучитьДанныеJson(Ссылка: ДокументыСотрудников.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<Объект?>?
    если ВерсияФорматаОбмена != Неопределено
        возврат ПолучитьДанныеJson_2_2(Ссылка, Сервисы)
    иначе если ВерсияФорматаОбмена >= Версия{3.0}
        возврат ПолучитьДанныеJson_3_0(Ссылка, Сервисы)
    иначе если ВерсияФорматаОбмена >= Версия{2.2}
        возврат ПолучитьДанныеJson_2_2(Ссылка, Сервисы)
    ;
    возврат Неопределено
;

метод ПолучитьДанныеJson_2_2(Ссылка: ДокументыСотрудников.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>?
    если Ссылка == Неопределено 
        возврат Неопределено
    ;
    возврат ДанныеДокументовСотрудниковВJson_2_2([Ссылка], Сервисы)
;

метод ПолучитьДанныеJson_3_0(Ссылка: ДокументыСотрудников.Ссылка?, Сервисы: ВебApiСервер.СервисыУпаковкиJson): Массив<Объект?>?
    если Ссылка == Неопределено 
        возврат Неопределено
    ;
    возврат ДанныеДокументовСотрудниковВJson_3_0([Ссылка], Сервисы)
;

@ВПроекте
структура ДокументСотрудника_2_2
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка?
    @JsonСвойство(Имя = "date")
    обз знч Дата: ДатаВремя
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка
    @JsonСвойство(Имя = "employerID")
    обз знч Организация: Строка
    @JsonСвойство(Имя = "personID")
    обз знч ФизическоеЛицо: Строка
    @JsonСвойство(Имя = "templateID")
    обз пер Шаблон: Строка
    @JsonСвойство(Имя = "note")
    обз пер Комментарий: Строка?
    @JsonСвойство(Имя = "document")
    обз пер Документ: Файлы.ЭлектронныйДокументJson_V2_1?
    @JsonСвойство(Имя = "attachments")
    обз пер Вложения: Массив<МенеджерФайлов.ДанныеФайлаJson>?
    @JsonСвойство(Имя = "version")
    обз пер Версия: Число?
;

@ВПроекте
структура ДокументСотрудника_3_0
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка?
    @JsonСвойство(Имя = "date")
    обз знч Дата: ДатаВремя
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка
    @JsonСвойство(Имя = "employerID")
    обз знч Организация: Строка
    @JsonСвойство(Имя = "personID")
    обз знч ФизическоеЛицо: Строка
    @JsonСвойство(Имя = "templateID")
    обз пер Шаблон: Строка
    @JsonСвойство(Имя = "note")
    обз пер Комментарий: Строка?
    @JsonСвойство(Имя = "document")
    обз пер Документ: Файлы.ЭлектронныйДокументJson_V2_1?
    @JsonСвойство(Имя = "attachments")
    обз пер Вложения: Массив<МенеджерФайлов.ДанныеФайлаJson>?
    @JsonСвойство(Имя = "version")
    обз пер Версия: Число?
    @JsonСвойство(Имя = "docAttributes")
    обз пер ДополнительныеРеквизиты: Массив<ЗначенияРеквизитовМакетовДокументов.ДополнительныйРеквизит_3_0>
;

метод ДанныеЗаявленияВJson_2_2(
    ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ДляПредставления: Булево): ДокументСотрудника_2_2
    
    пер Ссылка = ДанныеОбъекта["Ссылка"] как ДокументыСотрудников.Ссылка
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_1(Ссылка, ДляПредставления, Сервисы)
    
    пер Версия: Число?
    если Сервисы.ПолучитьВерсию != Неопределено
        Версия = Сервисы.ПолучитьВерсию(Ссылка)
    ;  
       
    пер ДанныеJson = новый ДокументСотрудника_2_2(
        Ид = (ДанныеОбъекта["Ссылка"] как ДокументыСотрудников.Ссылка).Ид.ВСтроку(),
        Дата = новый ДатаВремя(ДанныеОбъекта["Дата"] как Дата),
        Наименование = ДанныеОбъекта["Наименование"] как Строка,
        Организация = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Организация"] как Организации.Ссылка),
        ФизическоеЛицо = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка),
        Шаблон = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ШаблонДокумента"] как ШаблоныДокументов.Ссылка),
        Комментарий = ДанныеОбъекта["Комментарий"] как Строка,
        Документ = ДанныеФайлов.ЭлектронныйДокумент,
        Вложения = ДанныеФайлов.Вложения,
        Версия = Версия)
        
    возврат ДанныеJson
    
;

метод ДанныеЗаявленияВJson_3_0(
    ДанныеОбъекта: ЧитаемоеСоответствие<Строка, Объект?>,
    Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ДляПредставления: Булево): ДокументСотрудника_3_0
    
    пер Ссылка = ДанныеОбъекта["Ссылка"] как ДокументыСотрудников.Ссылка
    пер ДанныеФайлов = Файлы.ПолучитьДанныеФайловJson_V2_1(Ссылка, ДляПредставления, Сервисы)
    
    пер Версия: Число?
    если Сервисы.ПолучитьВерсию != Неопределено
        Версия = Сервисы.ПолучитьВерсию(Ссылка)
    ;  
       
    пер ДанныеJson = новый ДокументСотрудника_3_0(
        Ид = (ДанныеОбъекта["Ссылка"] как ДокументыСотрудников.Ссылка).Ид.ВСтроку(),
        Дата = новый ДатаВремя(ДанныеОбъекта["Дата"] как Дата),
        Наименование = ДанныеОбъекта["Наименование"] как Строка,
        Организация = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["Организация"] как Организации.Ссылка),
        ФизическоеЛицо = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ФизическоеЛицо"] как ФизическиеЛица.Ссылка),
        Шаблон = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["ШаблонДокумента"] как ШаблоныДокументов.Ссылка),
        Комментарий = ДанныеОбъекта["Комментарий"] как Строка,
        Документ = ДанныеФайлов.ЭлектронныйДокумент,
        Вложения = ДанныеФайлов.Вложения,
        Версия = Версия,
        ДополнительныеРеквизиты =
            ЗначенияРеквизитовМакетовДокументов.ДополнительныеРеквизиты_3_0(ДанныеОбъекта["Ссылка"] как ОбъектСПечатнойФормой.Ссылка))
        
    возврат ДанныеJson
    
;

// Конец

@ВПодсистеме
метод ДанныеДокументовСотрудников(СсылкиНаДокументы: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<ДокументыСотрудников.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч СписокДокументов: Массив<ДокументыСотрудников.Ссылка>
    для СсылкаНаДокумент из СсылкиНаДокументы
        СписокДокументов.Добавить(СсылкаНаДокумент как ДокументыСотрудников.Ссылка)
    ;
    знч ДанныеЗапросов: Соответствие<ДокументыСотрудников.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Дата,
            Наименование,
            Организация,
            ФизическоеЛицо,
            Комментарий,
            ВариантПодписания,
            ШаблонДокумента
        Из
            ДокументыСотрудников
        Где
            Ссылка В (%СписокДокументов) 
            И ФизическоеЛицо != Неопределено
            И Организация != Неопределено}
    исп Результат = Запрос.Выполнить() 
    для РезультатСтрока из Результат
        ДанныеЗапросов.Вставить(
            РезультатСтрока.Ссылка,
            МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат))
    ;
    возврат ДанныеЗапросов
;

метод ДанныеДокументаСотрудника(СсылкаНаДокумент: ДокументыСотрудников.Ссылка): ЧитаемоеСоответствие<Строка, Объект?>
    возврат ДанныеДокументовСотрудников([СсылкаНаДокумент])[СсылкаНаДокумент]
;

@ВПодсистеме
метод ДанныеДокументаДляПечатнойФормы(ДокументСсылка: Объект): Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>
    
    пер ДанныеДокумента = новый Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>()
    знч ДанныеДокументаСотрудника = ДанныеДокументаСотрудника(ДокументСсылка как ДокументыСотрудников.Ссылка)
    если не ДанныеДокументаСотрудника.Пусто()
        пер ПоставляемыеДанные = ПредставленияДокументов.ДанныеПредставленияДокумента(ДанныеДокументаСотрудника)
        ДанныеДокумента.Вставить("", новый ШаблоныДокументовМенеджер.ДанныеПечатныхФорм(Данные = ПоставляемыеДанные))
    ;
    ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента)
    возврат ДанныеДокумента 
;

@ВПодсистеме
метод ДополнитьДанныеДокументаДляПечатнойФормы(ДанныеДокумента: Соответствие<Строка, ШаблоныДокументовМенеджер.ДанныеПечатныхФорм>)
    для ДанныеИдентификатора из ДанныеДокумента
        пер ПоставляемыеДанные = ДанныеИдентификатора.Значение.Данные
        
        ПоставляемыеДанные.Вставить("ДанныеДокументаНаименование", "Заявление")
        пер Текст: Строка
        
        Текст = ПредставленияДокументов.ТекстДокументаДополненныйКомментарием(Текст, ПоставляемыеДанные["ДанныеДокументаКомментарий"] как Строка)
       
        знч ОписаниеВложений = ПрисоединенныеФайлыМенеджер.ТекстОписанияПриложенныхФайлов(ПоставляемыеДанные["ДанныеДокументаСсылка"] как ДокументыСотрудников.Ссылка)
        ПоставляемыеДанные.Вставить("ДанныеДокументаВложения", ОписаниеВложений)
        Текст = ПрисоединенныеФайлыМенеджер.ТекстCОписаниемПриложенныхФайлов(Текст, ОписаниеВложений)
                
        ПоставляемыеДанные.Вставить("ДанныеДокументаТекст", Текст)
            
    ;
;
//КонецОбласти

@ВПроекте
метод ПредставленияИдентификаторовЭлектронныхДокументов(ДокументСсылка: ДокументыСотрудников.Ссылка): Соответствие<Строка, Строка>
    пер ПредставленияДокументов = новый Соответствие<Строка, Строка>()
    ПредставленияДокументов.Вставить("", "")
    возврат ПредставленияДокументов
;

@ВПодсистеме
метод УдалитьДокумент(Документ: ДокументыСотрудников.Ссылка, ФизическоеЛицо: ФизическиеЛица.Ссылка?)
    исп Транзакции.Начать()
    пер СписокПодписавших = СогласованияДокументов.СписокПодписавших(Документ)
    если не СписокПодписавших.Пусто()
        выбросить новый Согласования.ИсключениеДокументУжеПодписан("Документ уже подписан", Документ)
    ;
    СостДокументов.УдалитьСостояниеДокумента(Документ)
    Документ.ЗагрузитьОбъект().Удалить()

    ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(ФизическоеЛицо, Истина)
    пер Руководитель = ОрганизационнаяСтруктура.НепосредственныйРуководительФизическогоЛица(ФизическоеЛицо)
    ВладельцыКабинетов.УстановитьПризнакТребуетсяОбновление(Руководитель, Истина)
;

@ВПодсистеме
метод ПодписываемыйФайлаДокумента(Документ: ДокументыСотрудников.Ссылка): Файлы.Ссылка?
    возврат Файлы.ЭлектронныйДокументОбъекта(Документ)    
;

@ВПодсистеме
метод ОрганизацияДокумента(Документ: ДокументыСотрудников.Ссылка): Организации.Ссылка?
    знч Запрос = Запрос{
        Выбрать Первые 1
            Организация
        Из
            ДокументыСотрудников
        Где
            Ссылка == %Документ
    }
    исп Результат = Запрос.Выполнить()
    возврат Результат.ЕдинственныйИлиУмолчание().Организация
;

@ВПодсистеме
метод ДанныеДокументаДляПодготовкиОписаний(СсылкаНаДокумент: Сущность.Ключ): Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>
    
    пер ДанныеДокумента = новый Соответствие<Строка, Согласования.ДанныеДляПодготовкиОписания>()
    знч ДанныеЗаявления = ДанныеДокументаСотрудника(СсылкаНаДокумент как ДокументыСотрудников.Ссылка)
    знч ДанныеШаблона = ШаблоныДокументов.ДанныеШаблонаДокументов(ДанныеЗаявления["ШаблонДокумента"] как ШаблоныДокументов.Ссылка)
    ДанныеДокумента.Вставить("",
        новый Согласования.ДанныеДляПодготовкиОписания(
            ДанныеЗаявления["Организация"] как Организации.Ссылка,
            ДанныеЗаявления["Дата"] как Дата,
            ДанныеШаблона["Наименование"] как Строка,
            ДанныеШаблона["КодКэдо"] как Строка
        )
    )
    возврат ДанныеДокумента
;
