импорт ИнтерфейсныеКомпонентыСтандартные
импорт ЛичныеКабинетыПользователей
импорт СтандартноеПриложение
импорт УниверсальныеМеханизмы
импорт УниверсальныеМеханизмы::ШаблоныДокументов
импорт Компания
импорт ВладельцыКабинетов
импорт Отпуск
импорт Отсутствия
импорт Криптография
импорт Уведомления

// Контракт ОсновнойИнтерфейсПоставщик
@ВПроекте
@Реализация
метод РазделыПриложения(): ЧитаемаяКоллекция<ОсновнойИнтерфейс.ОписаниеРаздела>
    знч Разделы: Массив<ОсновнойИнтерфейс.ОписаниеРаздела>
    если РазделДокументыДоступен()
        Разделы.Добавить(ОписаниеРазделаДокументыСотрудников())
    ;
    возврат Разделы
;

@ВПроекте
@Реализация
метод Виджеты(): ЧитаемаяКоллекция<ОсновнойИнтерфейс.ОписаниеВиджета>
    знч Виджеты: Массив<ОсновнойИнтерфейс.ОписаниеВиджета>
    если РазделДокументыДоступен()
        Виджеты.Добавить(ОписаниеВиджетаДокументыСотрудников())
    ;
    возврат Виджеты
;

@ВПроекте
@Реализация
метод КомандыВсеФункции(): ЧитаемаяКоллекция<ОсновнойИнтерфейс.ОписательКомандыВсеФункции>
    знч Группа = новый ОсновнойИнтерфейс.ОписательГруппыКомандВсеФункции(ПолученныеДокументы.ИМЯ_РАЗДЕЛА_ДОКУМЕНТЫ_СОТРУДНИКОВ, 3)
    возврат [
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Документы на подпись",
            СоздательФормыСписка = метод()-> возврат новый ДокументыНаПодпись.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ДокументыНаПодпись.АвтоматическаяФормаОбъекта();
            ),
        
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Документы на подпись (физические лица)",
            СоздательФормыСписка = метод()-> возврат новый ДокументыНаПодписьФизическиеЛица.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ДокументыНаПодписьФизическиеЛица.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Настройки полученных документов",
            СоздательФормыСписка = метод()-> возврат новый НастройкиПолученныхДокументов.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый НастройкиПолученныхДокументов.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Сроки напоминаний о полученных документах",
            СоздательФормыСписка = метод()-> возврат новый СрокиНапоминанийОПолученныхДокументах.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый СрокиНапоминанийОПолученныхДокументах.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Документы к обновлению представлений",
            СоздательФормыСписка = метод()-> возврат новый ДокументыКОбновлениюПредставлений.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ДокументыКОбновлениюПредставлений.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Используемая функциональность (Документы)",
            СоздательФормыСписка = метод()-> возврат новый ИспользуемаяФункциональность.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ИспользуемаяФункциональность.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Документы сотрудников",
            СоздательФормыСписка = метод()-> возврат новый ДокументыСотрудников.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый ДокументыСотрудников.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Группа = Группа, 
            Представление = "Новые документы",
            СоздательФормыСписка = метод()-> возврат новый НовыеДокументы.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый НовыеДокументы.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Представление = "Аннулирование",
            СоздательФормыСписка = метод()-> возврат новый Аннулирование.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый Аннулирование.АвтоматическаяФормаОбъекта();
            ),
        новый ОсновнойИнтерфейс.ОписательКомандыВсеФункции(
            Представление = "Аннулирования заявлений",
            СоздательФормыСписка = метод()-> возврат новый АннулированияЗаявлений.АвтоматическаяФормаСписка();,
            СоздательФормыОбъекта = метод()-> возврат новый АннулированияЗаявлений.АвтоматическаяФормаОбъекта();
            )
    ]
;

@ВПроекте
@Реализация
метод ДополнительныеКоманды(): ЧитаемыйМассив<Команда>
    возврат []
;

@ВПроекте
@Реализация
метод КомандыПанелиДействий(): ЧитаемыйМассив<Команда>
    возврат []
;

@ВПроекте
@Реализация
метод ДополнительныеКомандыПанелиГлавное(): ЧитаемыйМассив<Команда>
    возврат []
;
// Конец ОсновнойИнтерфейсПоставщик

@НаКлиенте
метод РазделДокументыДоступен(): Булево
    возврат ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо != Неопределено и 
        (Компания.ПараметрыСеанса().ТекущийПользовательСотрудник
            или ВладельцыКабинетов.ПараметрыСеанса().ДнейДоОтключенияКабинета != Неопределено) и
        ПолученныеДокументы.ПараметрыСеанса().ФункциональныеОпции.ИнформацияОПолученныхДокументах
;

@НаКлиенте
метод ОписаниеРазделаДокументыСотрудников(): ОсновнойИнтерфейс.ОписаниеРаздела
    возврат новый ОсновнойИнтерфейс.ОписаниеРаздела(
        Ид = ПолученныеДокументы.ИД_РАЗДЕЛА_ДОКУМЕНТЫ_СОТРУДНИКОВ,
        Имя = ПолученныеДокументы.ИМЯ_РАЗДЕЛА_ДОКУМЕНТЫ_СОТРУДНИКОВ,
        Пиктограмма = НавигацияДокументыСотрудников.Изображение,
        ЦветПиктограммы = БиблиотекаЦветов.ВидыЦвета.Оранжевый,
        НавигационнаяКомандаРаздела = НавигацияДокументыСотрудников,
        ШиринаДляПанелиНавигации = 144)
;

@НаКлиенте
метод ОписаниеВиджетаДокументыСотрудников(): ОсновнойИнтерфейс.ОписаниеВиджета
    возврат новый ОсновнойИнтерфейс.ОписаниеВиджета(
        Ид = ПолученныеДокументы.ИД_РАЗДЕЛА_ДОКУМЕНТЫ_СОТРУДНИКОВ,
        ИдРаздела = ПолученныеДокументы.ИД_РАЗДЕЛА_ДОКУМЕНТЫ_СОТРУДНИКОВ,
        Имя = ПолученныеДокументы.ИМЯ_РАЗДЕЛА_ДОКУМЕНТЫ_СОТРУДНИКОВ,
        Компонент = новый ПолученныеДокументыВиджетСодержимое())
;

// Контракт ДокументыСотрудниковПоставщик

@ВПроекте
@Реализация
метод КомандыСоздатьЗаявление(): ЧитаемыйМассив<ЭлементСпискаЗначений<Объект?>>
    знч Команды: Массив<ЭлементСпискаЗначений<Объект?>>
    для ЭлементСписка из ШаблоныДокументов.СписокДоступныхШаблонов()
        Команды.Добавить(новый ЭлементСпискаЗначений<Объект?>(
            Значение = ЭлементСписка.Значение,
            Представление = ЭлементСписка.Представление))
    ;
    возврат Команды
;

@ВПроекте
@Реализация
метод КомпонентДокумента(Заявление: ДокументСотрудника.Ссылка): ДокументСотрудникаКомпонент?
    выбор Заявление
    когда это ДокументыСотрудников.Ссылка
        возврат новый ДокументыСотрудниковКомпонент()
    когда это АннулированияЗаявлений.Ссылка
        возврат новый АннулированияЗаявленийКомпонент()
    иначе
        возврат Неопределено
    ;
;

@ВПроекте
@Реализация
метод ОткрытьЗаявлениеМодально(Заявление: ДокументСотрудника.Ссылка): СтандартныеФормы.ДействиеВФорме?
    если Заявление это ДокументыСотрудников.Ссылка
        знч Документ = Заявление как ДокументыСотрудников.Ссылка
        возврат ДокументыСотрудниковФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = Документ)
    иначе если Заявление это АннулированияЗаявлений.Ссылка
        знч Документ = Заявление как АннулированияЗаявлений.Ссылка
        знч ЗаголовокФормы = Документы.ЗаголовокАннулирующего(Документ)
        возврат АннулированияЗаявленийФормаДокумента.ОткрытьВМодальномОкне(КлючОбъекта = Документ, ЗаголовокФормы = ЗаголовокФормы)
    ;
    
    возврат Неопределено
    
;

@ВПроекте
@Реализация
метод ВыполнитьКомандуСоздать(Действие: ЭлементСпискаЗначений<Объект?>)
    если не (Действие.Значение это ШаблоныДокументов.Ссылка) 
        возврат    
    ;
    знч ШаблонДокумента = Действие.Значение как ШаблоныДокументов.Ссылка
    ДокументыСотрудниковФормаДокумента.ОткрытьВМодальномОкне(ШаблонДокумента = ШаблонДокумента)
;

@ВПроекте
@Реализация
метод ПредставленияДокументов(): ЧитаемаяКоллекция<СостояниеДокументаКомпонентДанных>
    возврат ПолученныеДокументы.ПредставленияДокументовСотрудников(ЛичныеКабинетыПользователей.ПараметрыСеанса().ТекущееФизическоеЛицо)
;

// Конец ДокументыСотрудниковПоставщик

// Контракт PushУведомленияОбработчик
@ВПроекте 
@Реализация
метод ВыполнитьДействие(ДанныеPush: PushУведомления.ДанныеPush)
    выбор
    когда ДанныеPush.Ссылка это Отсутствие.Ссылка
        пер Заявление: Отсутствие.Ссылка = ДанныеPush.Ссылка как Отсутствие.Ссылка
        пер ДействиеPushУведомления: ВызовСервера.ДействиеPushУведомленияОбОтсутствии 
            = ВызовСервера.ДействиеPushУведомления(Заявление, ДанныеPush.Действие, ДанныеPush.Текст, Отсутствия.ВидСогласуемогоЗаявленияОтсутствие(), Криптография.ПараметрыСеанса().ПарольЗакрытогоКлючаПользователя)
        если ДействиеPushУведомления == ВызовСервера.ДействиеPushУведомленияОбОтсутствии.ОткрытьФормуРаздела
            и не ВладельцыКабинетов.ЭтоРуководительПодразделения()
            НавигацияДокументыСотрудников.Выполнить()
        ;
    когда ДанныеPush.Ссылка это ЗаявлениеНаОтпуск.Ссылка
        пер Заявление: ЗаявлениеНаОтпуск.Ссылка = ДанныеPush.Ссылка как ЗаявлениеНаОтпуск.Ссылка
        пер ДействиеPushУведомления: ВызовСервера.ДействиеPushУведомленияОбОтсутствии 
            = ВызовСервера.ДействиеPushУведомления(Заявление, ДанныеPush.Действие, ДанныеPush.Текст, Отпуск.ВидСогласуемогоЗаявленияОтпуск(), Криптография.ПараметрыСеанса().ПарольЗакрытогоКлючаПользователя)
        если ДействиеPushУведомления == ВызовСервера.ДействиеPushУведомленияОбОтсутствии.ОткрытьФормуРаздела
            и не ВладельцыКабинетов.ЭтоРуководительПодразделения()
            НавигацияДокументыСотрудников.Выполнить()
        ;
    когда ДанныеPush.Ссылка это ЗаявлениеНаПереносОтпуска.Ссылка
        пер Заявление: ЗаявлениеНаПереносОтпуска.Ссылка = ДанныеPush.Ссылка как ЗаявлениеНаПереносОтпуска.Ссылка
        пер ДействиеPushУведомления: ВызовСервера.ДействиеPushУведомленияОбОтсутствии 
            = ВызовСервера.ДействиеPushУведомления(Заявление, ДанныеPush.Действие, ДанныеPush.Текст, Отпуск.ВидСогласуемогоЗаявленияОтпуск(), Криптография.ПараметрыСеанса().ПарольЗакрытогоКлючаПользователя)
        если ДействиеPushУведомления == ВызовСервера.ДействиеPushУведомленияОбОтсутствии.ОткрытьФормуРаздела
            и не ВладельцыКабинетов.ЭтоРуководительПодразделения()
            НавигацияДокументыСотрудников.Выполнить()
        ;
    ;
;
// Конец PushУведомленияОбработчик

// Контракт АннулирующийИнтерфейсПоставщик
@ВПроекте
@Реализация
метод МетодыПолученияФормыАннулирующего(): ЧитаемоеСоответствие<Тип, (АннулирующийДокумент.Ссылка) -> Форма?>
    возврат {Тип<АннулированияЗаявлений.Ссылка>: &ФормаАннулирующего}
;

@ВПроекте
@Реализация
метод МетодыПолученияТекстаАннулирования(): ЧитаемоеСоответствие<Тип, (АннулирующийДокумент.Ссылка) -> Строка?>
    возврат {:}
;
// Конец АннулирующийИнтерфейсПоставщик

метод ФормаАннулирующего(Документ: АннулирующийДокумент.Ссылка): Форма<неизвестно>?
    знч ЗаголовокФормы = Документы.ЗаголовокАннулирующего(Документ)
    знч Форма = новый АннулированияЗаявленийФормаДокумента(КлючОбъекта = Документ как АннулированияЗаявлений.Ссылка, ЗаголовокФормы = ЗаголовокФормы)
    возврат Форма
;
