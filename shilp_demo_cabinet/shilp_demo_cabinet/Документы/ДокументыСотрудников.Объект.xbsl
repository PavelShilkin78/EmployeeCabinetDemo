импорт ВладельцыКабинетов
импорт Компания
импорт Компания::Согласования
импорт КонтрольДоступа
импорт ОбменДанными
импорт ОбщегоНазначения
импорт ОбщиеСтандартные
импорт УниверсальныеМеханизмы::ШаблоныДокументов
импорт Криптография

// Обработчики событий

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПриЗаполнении()
    ФизическоеЛицо = ПользователиСистемы.ТекущееФизическоеЛицо()
    если ФизическоеЛицо == Неопределено
        возврат
    ;
    пер ЧасовойПояс: ЧасовойПояс = ВладельцыКабинетов.ЧасовойПоясФизическогоЛица(ФизическоеЛицо)    
    Дата = Дата.Сейчас(ЧасовойПояс)
    МоментСоздания = Момент.Сейчас()
    Организация = Сотрудники.ОрганизацияФизическогоЛицаПоОсновномуМестуРаботы(ФизическоеЛицо)
;

@Обработчик
метод ПередЗаписью(До: ДокументыСотрудников.Данные, ПараметрыЗаписи: ДокументыСотрудников.ПараметрыЗаписи)
    Наименование = 
        "$ШаблонДокумента от %{МенеджерДат.ФорматДаты(Дата, "дд.ММ.гггг")}, $ФизическоеЛицо"
;

@Обработчик
метод ПослеЗаписи(ПредыдущееЗначение: ДокументыСотрудников.Данные, ПараметрыЗаписи: ДокументыСотрудников.ПараметрыЗаписи)
    исп КонтекстДоступа.Привилегированный()
    пер ТребуетсяРегистрацияИзменений = РегистрацияИзменений.ТребуетсяРегистрацияИзмененийОбъекта(этот, ПредыдущееЗначение)
    если ТребуетсяРегистрацияИзменений
        РегистрацияИзменений.ЗарегистрироватьИзменение(Ссылка, ФизическоеЛицо)
    ;
    ОбщегоНазначения.ПослеЗаписиОбъектаСЭлектоннымиДокументамиПредставлений(Ссылка, ТребуетсяРегистрацияИзменений)   
;

@Обработчик
@ВыполнятьПриЗагрузкеДанных
метод ПередУдалением(ПараметрыУдаления: ДокументыСотрудников.ПараметрыУдаления)
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<СогласованияДокументов>, "Документ")
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<ПодписиДокументов>, "Документ")
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Ссылка, Тип<ВерсииДанныхОбъектов>, "Объект")
    ШаблоныДокументовМенеджер.УдалитьЗначенияРеквизитовОбъекта(Ссылка)
;

// Конец