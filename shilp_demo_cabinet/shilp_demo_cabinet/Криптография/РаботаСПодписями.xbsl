импорт КриптографияСтандартные
импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт КонтрольДоступаСтандартные
импорт УниверсальныеМеханизмы
импорт СтандартноеПриложение

@ВПроекте
метод СоздатьЦифровойСертификатУдостоверяющегоЦентра(АдресСервиса: Строка)
    МенеджерПравДоступа.ПроверитьПраваАдминистратора()
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч ИнформацияОСубъекте: ОбъектыКриптографии.ИнформацияОСубъекте
    знч Настройки = НастройкиУЦ.НастройкиУЦ()
    
    знч ИдХранилищаСертификата = новый Ууид()
    пер АдресСертификатаИздателя = АдресСертификатаИздателя(АдресСервиса, ИдХранилищаСертификата)
    пер АдресТочкиРаспространенияСпискаОтзыва = АдресТочкиРаспространенияСпискаОтзыва(АдресСервиса, ИдХранилищаСертификата)
    пер АдресаСертификата = новый МенеджерКриптографии.АдресаЦифровогоСертификата(АдресСертификатаИздателя, АдресТочкиРаспространенияСпискаОтзыва, ИдХранилищаСертификата)
    
    ИнформацияОСубъекте.Имя = "Сервис " + ИнформацияОПриложении.ПолучитьСервис().НазваниеПриложения()
    ИнформацияОСубъекте.ИдПользователя = Настройки.ИдСертификата
    пер Сейчас: Момент = Момент.Сейчас()
    пер СрокДействия = Криптография.СрокиДействияСертификатов().КорневойСертификат
    пер ПериодДействия = новый МенеджерДат.Интервал(МенеджерДат.НачалоДня(Сейчас), МенеджерДат.КонецДня(МенеджерДат.ДобавитьГоды(Сейчас, СрокДействия)))
    исп Транзакции.Начать()
    МенеджерКриптографии.СоздатьЦифровойСертификатИздателя(ИнформацияОСубъекте, Настройки.ПарольЗакрытогоКлючаСертификата, ПериодДействия, АдресаСертификата)

    ПривилегированныйРежим.Закрыть()
;

@ВПроекте
метод СертификатУдостоверяющегоЦентра(ХранилищеСертификата: ХранилищеСертификатов.Ссылка? = Неопределено): ЦифровойСертификат?
    // Получение цифрового сертификата с открытым ключом должно быть общедоступным
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч СертификатУдостоверяющегоЦентра: ЦифровойСертификат? = МенеджерКриптографии.ЦифровойСертификатИздателя(ХранилищеСертификата)
    ПривилегированныйРежим.Закрыть()
    возврат СертификатУдостоверяющегоЦентра
;

@ВПроекте
метод СертификатыУдостоверяющегоЦентра(): ЧитаемыйМассив<МенеджерКриптографии.ЦифровойСертификатНумерованный>
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч СертификатУдостоверяющегоЦентраСписок = МенеджерКриптографии.ЦифровыеСертификатыИздателя()
    ПривилегированныйРежим.Закрыть()
    возврат СертификатУдостоверяющегоЦентраСписок
;

@ВПроекте
метод СоздатьЦифровойСертификат(ФизическоеЛицо: ФизическиеЛица.Ссылка, ПарольЗакрытогоКлюча: Строка, АдресСервиса: Строка)
    знч ИнформацияОСубъекте: ОбъектыКриптографии.ИнформацияОСубъекте
    знч ЗапрашиваемыеДанные: ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц
    ЗапрашиваемыеДанные.ЛичныеДанные = Истина
    ЗапрашиваемыеДанные.ПерсональныеДанные = Истина
    знч ДанныеФизлица = ФизЛица.ДанныеФизическогоЛица(ФизическоеЛицо, ЗапрашиваемыеДанные)
    знч ДанныеПодписиИздателя: МенеджерКриптографии.ДанныеЭлектроннойПодписи? = МенеджерКриптографии.ДанныеЭлектроннойПодписиИздателя()
    ДанныеПодписиИздателя.АдресСертификатаИздателя = 
        АдресСертификатаИздателя(АдресСервиса, ДанныеПодписиИздателя.ХранилищеСертификатаИздателя.Ид)
        
    ДанныеПодписиИздателя.АдресТочкиРаспространенияСпискаОтзыва =
        АдресТочкиРаспространенияСпискаОтзыва(АдресСервиса, ДанныеПодписиИздателя.ХранилищеСертификатаИздателя.Ид)
        
    ИнформацияОСубъекте.Имя = ФизЛица.ДанныеФизическогоЛицаВФИО(ДанныеФизлица).ПредставлениеИмени(ФизЛица.ВариантПредставленияИмени.ФамилияИмяОтчество)
    ИнформацияОСубъекте.ИдПользователя = ФизическоеЛицо.Ид.ВСтроку()
    пер НастройкиЭП = Криптография.НастройкиЭлектронныхПодписей()
    если НастройкиЭП.ВключатьПерсональныеДанныеВСертификатСотрудника
        ИнформацияОСубъекте.ИНН = ДанныеФизлица.ПерсональныеДанные.ИНН
        ИнформацияОСубъекте.СНИЛС = ДанныеФизлица.ПерсональныеДанные.СНИЛС
    ;
    пер Сейчас: Момент = Момент.Сейчас()
    пер ПериодДействия = новый МенеджерДат.Интервал(МенеджерДат.НачалоДня(Сейчас), ОкончаниеДействияСертификатаСотрудника(Сейчас))
    исп Транзакции.Начать()
    пер ДанныеЭлектроннойПодписи = МенеджерКриптографии.СоздатьЦифровойСертификат(ИнформацияОСубъекте, ПериодДействия, ДанныеПодписиИздателя)
    знч Сертификат = ДанныеЭлектроннойПодписи.Сертификат
    знч ПсевдонимСертификата = МенеджерКриптографии.ПсевдонимСертификата(ИнформацияОСубъекте)
    знч ХранилищеСертификата = МенеджерКриптографии.НовоеХранилищеЗакрытогоКлюча(ДанныеЭлектроннойПодписи, ПсевдонимСертификата, ПарольЗакрытогоКлюча)
    пер ИнформацияОСертификате = новый ОбъектыКриптографии.ИнформацияОСертификате(Сертификат.Субъект, Сертификат.СерийныйНомер.ВСтроку(), ПериодДействия)
    знч ТекущееХранилищеИздателя = ИнформацияОСертификатах.ХранилищеКорневогоСертификатаФизическогоЛица(ФизическоеЛицо)
    если ТекущееХранилищеИздателя != Неопределено
        МенеджерКриптографии.ОтозватьЦифровойСертификат(ТекущееХранилищеИздателя, ИнформацияОСертификатах.ДействующийСертификат(ФизическоеЛицо))
    ;
    ИнформацияОСертификатах.ПоместитьИнформациюОСертификате(ФизическоеЛицо, МенеджерКриптографии.ПсевдонимСертификата(ИнформацияОСубъекте), ИнформацияОСертификате, ХранилищеСертификата, ДанныеПодписиИздателя.ХранилищеСертификатаИздателя)
;

@ВПодсистеме    
метод ОкончаниеДействияСертификатаСотрудника(Сейчас: Момент): Момент
    пер СрокДействия = Криптография.СрокиДействияСертификатов().СертификатСотрудника
    пер Окончание = МенеджерДат.КонецДня(МенеджерДат.ДобавитьГоды(Сейчас, СрокДействия))
    пер КорневойСертификат = РаботаСПодписями.СертификатУдостоверяющегоЦентра()
    если КорневойСертификат.ДействителенПо < Окончание
        Окончание = КорневойСертификат.ДействителенПо
    ;
    возврат Окончание
;

@ВПроекте
@НаСервере
метод ВидЭлектроннойПодписи(Сотрудник: ФизическиеЛица.Ссылка?): ВидыЭлектронныхПодписей
    
    пер ВидЭлектроннойПодписи: ВидыЭлектронныхПодписей
    знч Сервисы = ПодписаниеДокументовСервис.ПолучитьСервисы()
    для Сервис из Сервисы
        ВидЭлектроннойПодписи = Сервис.ВидЭлектроннойПодписи(Сотрудник)
    ;
    знч ДоступныеВидыЭлектронныхПодписей = Криптография.ДоступныеВидыЭлектронныхПодписей()
    если не ДоступныеВидыЭлектронныхПодписей.Содержит(ВидЭлектроннойПодписи)
        ВидЭлектроннойПодписи = ДоступныеВидыЭлектронныхПодписей.ПервыйИлиУмолчание()
    ;
    возврат ВидЭлектроннойПодписи
;

метод АдресСертификатаИздателя(АдресСервиса: Строка, Ид: Ууид): Строка
    возврат МенеджерСтрок.ДобавитьКонечныйСимвол(АдресСервиса)+"api/v1.0/sertificates-info/%{Ид.ВСтроку()}/root-sert.cer"
;

метод АдресТочкиРаспространенияСпискаОтзыва(АдресСервиса: Строка, Ид: Ууид): Строка
    возврат МенеджерСтрок.ДобавитьКонечныйСимвол(АдресСервиса)+"api/v1.0/sertificates-info/%{Ид.ВСтроку()}/sert-revoc.crl"
;

@ВПроекте
метод ОбновитьИнфомрациюКорневогоСертификата()
    знч Настройки = НастройкиУЦ.НастройкиУЦ()
    знч ПсевдонимСертификата = Настройки.ИдСертификата
    знч ПарольЗакрытогоКлюча = Настройки.ПарольЗакрытогоКлючаСертификата
    МенеджерКриптографии.ОбновитьИнфомрациюКорневогоСертификата(ПсевдонимСертификата, ПарольЗакрытогоКлюча)
;

метод ХранилищеСертификатаСотрудника(ОбщееХранилище: Байты, ПсевдонимыХранилища: ЧитаемыйМассив<Строка>, ПсевдонимСотрудника: Строка): ХранилищеPkcs12
    знч ХранилищеСертификатаСотрудника = новый ХранилищеPkcs12(ОбщееХранилище)
    
    для Псевдоним из ПсевдонимыХранилища
        если Псевдоним != ПсевдонимСотрудника
            ХранилищеСертификатаСотрудника.Удалить(Псевдоним)
        ;
    ;
        
    возврат ХранилищеСертификатаСотрудника
;

метод ОбновитьХранилищаСертификатов(ВладельцыКПересчету: ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, ИнформацияОСертификатах.Объект>, КорневыеСертификатыВладельцев: ЧитаемоеСоответствие<ФизическиеЛица.Ссылка, ЦифровойСертификат>)
    для ВладелецСертификата из ВладельцыКПересчету
        знч ИнформацияОСертификате = ВладелецСертификата.Значение
        знч Данные = ИнформацияОСертификате.ХранилищеPkcs12.Загрузить()
        знч ХранилищеСертификатаСотрудника = новый ХранилищеPkcs12(Данные.ПолучитьБайты())
        знч КорневойСертификат = КорневыеСертификатыВладельцев.ПолучитьИлиУмолчание(ВладелецСертификата.Ключ)
        если КорневойСертификат == Неопределено
            продолжить
        ;
        МенеджерКриптографии.ДобавитьЦифровойСертификат(ХранилищеСертификатаСотрудника, "_Root", КорневойСертификат)
        ИнформацияОСертификате.ХранилищеPkcs12 = ОбъектноеХранилище.ЗагрузитьИзБайт(ХранилищеСертификатаСотрудника.ВБайты()).Ссылка
        ИнформацияОСертификате.Записать()
    ;
;

@ВПодсистеме
метод ОбновитьСписокОтозванныхСертификатов()
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ХранилищеКорневогоСертификата,
            СерийныйНомер,
            Текущий,
            МоментОтзываСертификата,
            ПричинаОтзываСертификата
        Из
            ИнформацияОСертификатах
        Упорядочить по
            ХранилищеКорневогоСертификата
    }
    
    знч СерийныеНомераДействущихСертификатов: Массив<Строка>
    знч ОтозванныеСертификаты: Массив<МенеджерКриптографии.ОтзываемыйСертификат>
    пер ТекущийКорневойСертификат: ХранилищеСертификатов.Ссылка?
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        если ТекущийКорневойСертификат == Неопределено
            ТекущийКорневойСертификат = СтрокаРезультата.ХранилищеКорневогоСертификата
        ;
        
        если ТекущийКорневойСертификат != СтрокаРезультата.ХранилищеКорневогоСертификата
            МенеджерКриптографии.ОбновитьСписокОтозванныхСертификатов(ТекущийКорневойСертификат, ОтозванныеСертификаты, СерийныеНомераДействущихСертификатов)
            ТекущийКорневойСертификат = СтрокаРезультата.ХранилищеКорневогоСертификата
            СерийныеНомераДействущихСертификатов.Очистить()
            ОтозванныеСертификаты.Очистить()
        ;
        
        если СтрокаРезультата.Текущий
            СерийныеНомераДействущихСертификатов.Добавить(СтрокаРезультата.СерийныйНомер)
        иначе
            знч МоментОтзыва = СтрокаРезультата.МоментОтзываСертификата ?? Момент.Сейчас()
            знч ПричинаОтзыва = СтрокаРезультата.ПричинаОтзываСертификата
            ОтозванныеСертификаты.Добавить(новый МенеджерКриптографии.ОтзываемыйСертификат(
                новый Байты(СтрокаРезультата.СерийныйНомер), МоментОтзыва, ПричиныОтзываСертификата.ПричинаОтзываСертификата(ПричинаОтзыва)))
        ;
    ;
    если ТекущийКорневойСертификат != Неопределено
        МенеджерКриптографии.ОбновитьСписокОтозванныхСертификатов(ТекущийКорневойСертификат, ОтозванныеСертификаты, СерийныеНомераДействущихСертификатов)
    ;
;