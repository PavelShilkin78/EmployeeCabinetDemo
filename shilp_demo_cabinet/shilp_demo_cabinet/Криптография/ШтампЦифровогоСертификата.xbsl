импорт ИнтерфейсныеКомпонентыСтандартные
импорт КриптографияСтандартные
импорт ОбщиеСтандартные
импорт УниверсальныеМеханизмы

@ВПроекте
@Реализация
метод Инициализировать()
    ПриУстановкеПодписи()
;

метод ПриУстановкеПодписи()
    попытка
        если Подпись != Неопределено
            ИнформацияОСертификате = ИнформацияОСертификатеПодписи(Подпись)
        ;
    поймать Ошибка: Исключение
        Компоненты.Владелец.ОценкаИнформации = ОценкаИнформации.Отрицательная
    ;
;

метод ВладелецЗаголовок(): Строка
    если ИнформацияОСертификате == Неопределено
        возврат "Не удалось прочитать данные подписи"
    ;
    пер ПредставлениеПодписи = КриптографияСтандартные.ПредставлениеСубъекта(ИнформацияОСертификате)
    если не Криптография.ЭтоПодписьОрганизации(ИнформацияОСертификате)
        если не ИнформацияОСертификате.ИНН.Пусто()
            ПредставлениеПодписи = ПредставлениеПодписи + "\n" + "ИНН: %{ИнформацияОСертификате.ИНН}"
        ;
        если не ИнформацияОСертификате.СНИЛС.Пусто()
            ПредставлениеПодписи = ПредставлениеПодписи + "\n" + "СНИЛС: %{ИнформацияОСертификате.СНИЛС}"
        ;
    ;
    возврат "Владелец: %ПредставлениеПодписи"
;

метод СерийныйНомерЗаголовок(): Строка
    если ИнформацияОСертификате == Неопределено
        возврат ""
    ;
    возврат "Сертификат: %{Криптография.ПредставлениеСерийногоНомера(ИнформацияОСертификате)}"
;

метод ПериодДействияЗаголовок(): Строка
    если ИнформацияОСертификате == Неопределено
        возврат ""
    ;
    возврат "Действителен: %{Криптография.ПредставлениеПериодаДействия(ИнформацияОСертификате)}"
;

метод ШтампЦифровогоСертификатаЦветРамки(): Цвет | Авто
    возврат БиблиотекаЦветов.Цвет(БиблиотекаЦветов.ВидыЦвета.Синий)
;

метод КомандаПроверитьПриНажатии(Источник: Надпись, Событие: СобытиеПриНажатии)
    ПодписьВерна = ПодписьВерна(Документ, Подпись)
    ПодписьПроверена = Истина
;

метод ПанельВидимость(): Булево
    возврат ЭтоПодпись()
;

метод ШтампЦифровогоСертификатаРамка(): Булево
    возврат ЭтоПодпись()
;

метод ШтампЦифровогоСертификатаГруппировка(): ОриентацияСодержимого
    если КлиентскоеУстройство.ВидИнтерфейса == ВидИнтерфейса.Телефон
        возврат ОриентацияСодержимого.Вертикальная
    ;
    возврат ОриентацияСодержимого.Горизонтальная
;

метод ЭтоПодпись(): Булево
    возврат Подпись != Неопределено
;

метод КомандаПроверитьВидимость(): Булево
    возврат не ПодписьПроверена
;

метод ПодписьВернаВидимость(): Булево
    возврат ПодписьПроверена и ПодписьВерна
;

метод НадписьПодписьНеВерна(): Булево
    возврат ПодписьПроверена и не ПодписьВерна
;

метод КомандаПроверитьТолькоЧтение(): Булево
    возврат ИнформацияОСертификате == Неопределено
;

@НаСервере @ДоступноСКлиента
статический метод ПодписьВерна(Документ: неизвестно, Подпись: ДвоичныйОбъект.Ссылка): Булево
    если МенеджерСущности.ЕстьРеквизитСущности(Документ.ПолучитьТип(), "Файл")
        пер Файл = МенеджерСущности.ЗначениеРеквизитаОбъекта(Документ, "Файл")
        пер Данные: Байты = Файлы.ДвоичныеДанныеФайла(Файл).ПолучитьБайты()
        возврат МенеджерКриптографии.ПроверитьПодпись(Данные, Подпись.Загрузить().ПолучитьБайты())
    ;
    возврат Истина
;

@НаСервере @ДоступноСКлиента
статический метод ИнформацияОСертификатеПодписи(Подпись: ДвоичныйОбъект.Ссылка): ОбъектыКриптографии.ИнформацияОСертификате
    пер ИнформацияОСертификате = МенеджерКриптографии.ИнформацияОСертификатеПодписи(Подпись.Загрузить())
    пер НастройкиЭП = Криптография.НастройкиЭлектронныхПодписей()
    если НастройкиЭП.СкрыватьПерсональныеДанныеСотрудникаВПодписи
        ИнформацияОСертификате.ИНН = ""
        ИнформацияОСертификате.СНИЛС = ""
    ;
    возврат ИнформацияОСертификате
;
