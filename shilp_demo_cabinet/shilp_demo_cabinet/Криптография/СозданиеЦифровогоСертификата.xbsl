импорт СтандартноеПриложение
импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт ИнтерфейсныеКомпонентыСтандартные
импорт КонтрольДоступа

@Обработчик
метод ПослеСоздания()
    ОкончаниеДействияСертификата = ОкончаниеДействияСертификатаСотрудника()
;

метод ФИОЗаголовок(): Строка
    если ФизическоеЛицо == Неопределено
        возврат ""
    ;
    возврат ФизическоеЛицо.Представление()
;

метод ПериодДействияЗаголовок(): Строка
    если ОкончаниеДействияСертификата == Неопределено
        возврат ""
    ;
    пер Сейчас = Момент.Сейчас()
    пер Начало = МенеджерДат.ФорматМомента(Сейчас, "д ММММ гггг")
    пер Окончание = МенеджерДат.ФорматМомента(ОкончаниеДействияСертификата, "д ММММ гггг")
    возврат "Электронная подпись будет действительна с %Начало по %Окончание"
;

метод РазрешенныеСимволыЗаголовок(): Строка
    возврат "Можно использовать латинские буквы, цифры, символы !\"#$\%&'()*+,-./:;<=>?@[\\]^_`{|}~"
;

метод ФормаДокументаВысота(): Число
    возврат ОсновнойИнтерфейс.ВысотаФормыДокумента(50)
;

метод ПанельОсновнаяЗаписатьИЗакрыть(Источник: КоманднаяПанельФорм, Событие: СобытиеКомпонента)
    если не ПроверитьЗаполнение() 
        возврат
    ;
    СоздатьЦифровойСертификат(Пароль)
    МенеджерГлобальныхКлиентскихСобытий.Оповестить(Криптография.ОБНОВЛЕНА_ЭЛЕКТРОННАЯ_ПОДПИСЬ)
    Криптография.ПараметрыСеанса().ПользовательИмеетСертификатЭП = Истина
    Закрыть()
;

метод ПанельОсновнаяСохранитьЧерновик(Источник: КоманднаяПанельФорм, Событие: СобытиеКомпонента)
    Закрыть()
;

метод ПарольРезультатПроверкиДанных(): РезультатПроверкиДанных
    возврат ПарольСообщениеОбОшибкеВвода.Пусто() ? РезультатПроверкиДанных.Отсутствует : РезультатПроверкиДанных.Ошибка    
;

метод ПодтверждениеПароляРезультатПроверкиДанных(): РезультатПроверкиДанных
    возврат ПодтверждениеПароляСообщениеОбОшибкеВвода.Пусто() ? РезультатПроверкиДанных.Отсутствует : РезультатПроверкиДанных.Ошибка    
;

метод ПроверитьЗаполнение(): Булево
    пер РезультатПроверки = Истина
    ПарольСообщениеОбОшибкеВвода = ""
    ПодтверждениеПароляСообщениеОбОшибкеВвода = ""
    если Пароль.Пусто()
        РезультатПроверки = Ложь
        ПарольСообщениеОбОшибкеВвода = "Не указан пароль"
    ;
    если ПодтверждениеПароля != Пароль
        РезультатПроверки = Ложь
        ПодтверждениеПароляСообщениеОбОшибкеВвода = "Не совпадает пароль"
    ;
    
    если ЕстьЗапрещенныеСимволы(Пароль)
        РезультатПроверки = Ложь
        ПарольСообщениеОбОшибкеВвода = "Содержит запрещенные символы"
    ;
    возврат РезультатПроверки
;

метод ЕстьЗапрещенныеСимволы(Пароль: Строка): Булево
    для СимволПароля из Пароль
        знч КодСимвола = Символы.ПолучитьКод(СимволПароля)
        если КодСимвола < 33 или КодСимвола > 126
            возврат Истина
        ;
    ;
    
    возврат Ложь
;

@НаСервере @ДоступноСКлиента
статический метод ОкончаниеДействияСертификатаСотрудника(): Момент
    возврат РаботаСПодписями.ОкончаниеДействияСертификатаСотрудника(Момент.Сейчас())
;

@НаСервере @ДоступноСКлиента
статический метод СоздатьЦифровойСертификат(ПарольЗакрытогоКлюча: Строка)
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    РаботаСПодписями.СоздатьЦифровойСертификат(ПользователиСистемы.ТекущееФизическоеЛицо(), ПарольЗакрытогоКлюча, СтандартноеПриложение.НастройкиПриложения().АдресПриложения)
    ПривилегированныйРежим.Закрыть()
;