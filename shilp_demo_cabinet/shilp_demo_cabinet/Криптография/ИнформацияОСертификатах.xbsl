импорт КриптографияСтандартные
импорт ОбщиеСтандартные
импорт ФизическиеЛица
импорт КонтрольДоступа

//Область РазрешенияДоступа
@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат [КонтрольДоступа.ПолныйДоступАутентифицированным(этот)]
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ИнформацияОСертификатах.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ИнформацияОСертификатах.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ИнформацияОСертификатах.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ЧтениеАдминистраторуАбонента(этот))
        РазрешенияЭлемента.ДобавитьВсе(КонтрольДоступа.ЧтениеРедактированиеУдалениеДанныхСправочниковПерсонально([Элемент.Владелец]))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

//КонецОбласти

@ВПодсистеме 
метод ПоместитьИнформациюОСертификате(ФизическоеЛицо: ФизическиеЛица.Ссылка, ПсевдонимСертификата: Строка,
    ИнформацияОСертификате: ОбъектыКриптографии.ИнформацияОСертификате, ХранилищеСертификата: ХранилищеPkcs12, ХранилищеСертификатаИздателя: ХранилищеСертификатов.Ссылка?)
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка
        Из ИнформацияОСертификатах
        Где Владелец == %ФизическоеЛицо
        И Текущий}
    исп Транзакции.Начать()
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        знч ТекущийСертификат = СтрокаРезультата.Ссылка.ЗагрузитьОбъект(Истина)
        ТекущийСертификат.Текущий = Ложь
        если ТекущийСертификат.ДатаОкончанияДействия != Неопределено
            и ТекущийСертификат.ДатаОкончанияДействия > МенеджерДат.НачалоДня(Момент.Сейчас())
            
            ТекущийСертификат.МоментОтзываСертификата = Момент.Сейчас()
            ТекущийСертификат.ПричинаОтзываСертификата = ПричиныОтзываСертификата.Заменен
        ;
        ТекущийСертификат.Записать()
    ;
    ДобавитьНовыйСертификат(ФизическоеЛицо, ПсевдонимСертификата, ИнформацияОСертификате, ХранилищеСертификата, ХранилищеСертификатаИздателя)
;
        
метод ДобавитьНовыйСертификат(ФизическоеЛицо: ФизическиеЛица.Ссылка, ПсевдонимСертификата: Строка,
    ИнформацияОСертификате: ОбъектыКриптографии.ИнформацияОСертификате, ХранилищеСертификата: ХранилищеPkcs12, ХранилищеСертификатаИздателя: ХранилищеСертификатов.Ссылка?)
    
    знч Информация = новый ИнформацияОСертификатах.Объект()
    Информация.Владелец = ФизическоеЛицо
    Информация.ПсевдонимСертификата = ПсевдонимСертификата
    Информация.ИмяСубъекта = ИнформацияОСертификате.ИмяСубъекта    
    Информация.СерийныйНомер = ИнформацияОСертификате.СерийныйНомер
    Информация.ДатаНачалаДействия = ИнформацияОСертификате.ПериодДействия.ДатаНачала
    Информация.ДатаОкончанияДействия = ИнформацияОСертификате.ПериодДействия.ДатаОкончания
    Информация.Текущий = Истина
    Информация.ХранилищеPkcs12 = ОбъектноеХранилище.ЗагрузитьИзБайт(ХранилищеСертификата.ВБайты()).Ссылка
    Информация.ХранилищеКорневогоСертификата = ХранилищеСертификатаИздателя
    Информация.Записать()
;

@ВПроекте
метод ИнформацияОСертификатеФизическогоЛица(ФизическоеЛицо: ФизическиеЛица.Ссылка): ОбъектыКриптографии.ИнформацияОСертификате?
    пер Информация: ОбъектыКриптографии.ИнформацияОСертификате?
    знч Запрос = Запрос{
        Выбрать Первые 1 
            ИмяСубъекта,
            СерийныйНомер,
            ДатаНачалаДействия,
            ДатаОкончанияДействия
        Из ИнформацияОСертификатах
        Где Владелец == %ФизическоеЛицо
        И Текущий
        И МоментОтзываСертификата == Неопределено}
    исп Результат = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        пер ПериодДействия = новый МенеджерДат.Интервал(РезультатСтроки[0].ДатаНачалаДействия, РезультатСтроки[0].ДатаОкончанияДействия)
        Информация = новый ОбъектыКриптографии.ИнформацияОСертификате(РезультатСтроки[0].ИмяСубъекта, РезультатСтроки[0].СерийныйНомер, ПериодДействия)
    ;
    возврат Информация
;

@ВПодсистеме 
метод ДанныеПодписиФизическогоЛица(ФизическоеЛицо: ФизическиеЛица.Ссылка, ПарольЗакрытогоКлюча: Строка): МенеджерКриптографии.ДанныеЭлектроннойПодписи?
    пер ДанныеПодписи: МенеджерКриптографии.ДанныеЭлектроннойПодписи?
    знч Запрос = Запрос{
        Выбрать Первые 1 
            ПсевдонимСертификата,
            ХранилищеPkcs12
        Из ИнформацияОСертификатах
        Где Владелец == %ФизическоеЛицо
        и Текущий
        и МоментОтзываСертификата == Неопределено
        и ХранилищеPkcs12 != Неопределено}
    исп Результат = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        знч Хранилище = новый ХранилищеPkcs12(РезультатСтроки[0].ХранилищеPkcs12.Загрузить().ПолучитьБайты())
        возврат МенеджерКриптографии.ДанныеЭлектроннойПодписи(Хранилище, РезультатСтроки[0].ПсевдонимСертификата, ПарольЗакрытогоКлюча)
    ;
    возврат ДанныеПодписи
;

@ВПодсистеме 
метод ХранилищеКорневогоСертификатаФизическогоЛица(ФизическоеЛицо: ФизическиеЛица.Ссылка): ХранилищеСертификатов.Ссылка?
    знч Запрос = Запрос{
        Выбрать Первые 1 
            ХранилищеКорневогоСертификата
        Из ИнформацияОСертификатах
        Где Владелец == %ФизическоеЛицо
        И Текущий}
    исп Результат = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        возврат РезультатСтроки[0].ХранилищеКорневогоСертификата
    ;
    возврат Неопределено
;

@ВПодсистеме
метод ДействующийСертификат(ФизическоеЛицо: ФизическиеЛица.Ссылка?): ЦифровойСертификат?
    если ФизическоеЛицо == Неопределено
        возврат Неопределено
    ;
    
    знч Запрос = Запрос{
        Выбрать Первые 1 
            ПсевдонимСертификата,
            ХранилищеPkcs12
        Из ИнформацияОСертификатах
        Где Владелец == %ФизическоеЛицо
        и Текущий
        и МоментОтзываСертификата == Неопределено
        и ХранилищеPkcs12 != Неопределено}
    исп Результат = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        знч Хранилище = новый ХранилищеPkcs12(РезультатСтроки[0].ХранилищеPkcs12.Загрузить().ПолучитьБайты())
        возврат МенеджерКриптографии.ЦифровойСертификат(Хранилище, РезультатСтроки[0].ПсевдонимСертификата)
    ;
    
    возврат Неопределено 
;

@ВПодсистеме
метод ЕстьДействующийСертификат(ФизическоеЛицо: ФизическиеЛица.Ссылка?): Булево
    пер ЕстьДействующийСертификат: Булево
    если ФизическоеЛицо == Неопределено
        возврат ЕстьДействующийСертификат
    ;
    знч Запрос = Запрос{
        Выбрать 
            ИнформацияОСертификатах.Владелец Как ФизическоеЛицо,
            ИнформацияОСертификатах.ДатаНачалаДействия Как ДатаНачала,
            ИнформацияОСертификатах.ДатаОкончанияДействия Как ДатаОкончания
        Из 
            ИнформацияОСертификатах Как ИнформацияОСертификатах
        Где
            ИнформацияОСертификатах.Владелец == %ФизическоеЛицо
            И ИнформацияОСертификатах.ДатаНачалаДействия <=| %{МенеджерДат.НачалоДня(Момент.Сейчас())}
            И ИнформацияОСертификатах.ДатаОкончанияДействия >=| %{МенеджерДат.НачалоДня(Момент.Сейчас())}
            И ИнформацияОСертификатах.МоментОтзываСертификата == Неопределено}
    исп РезультатЗапроса = Запрос.Выполнить() 
    знч РезультатЗапросаСтроки = новый ЧитаемыйМассив(РезультатЗапроса)
    если (не РезультатЗапросаСтроки.Пусто())
        ЕстьДействующийСертификат = Истина
    ;
    возврат ЕстьДействующийСертификат
;

@ВПодсистеме
метод КорневойСертификатДействет(ФизическоеЛицо: ФизическиеЛица.Ссылка): Булево
    знч ХранилищеКорневогоСертификата = ХранилищеКорневогоСертификатаФизическогоЛица(ФизическоеЛицо)
    возврат ХранилищеКорневогоСертификата == МенеджерКриптографии.ДействующийСертификатИздателя()
;

@ВПодсистеме
метод ОтозватьСертификатыХранилищаКорневогоСертификата(ХранилищеКорневогоСертификата: ХранилищеСертификатов.Ссылка)
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ХранилищеPkcs12,
            ПсевдонимСертификата
        Из
            ИнформацияОСертификатах
        Где
            ХранилищеКорневогоСертификата == %ХранилищеКорневогоСертификата
            и ПричинаОтзываСертификата == ПричиныОтзываСертификата.НеУказана}
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        МенеджерКриптографии.ОтозватьЦифровойСертификат(
            ХранилищеКорневогоСертификата,
            МенеджерКриптографии.ЦифровойСертификат(
                новый ХранилищеPkcs12(СтрокаРезультата.ХранилищеPkcs12.Загрузить().ПолучитьБайты()),
                СтрокаРезультата.ПсевдонимСертификата))
        знч ОбъектСертификата = СтрокаРезультата.Ссылка.ЗагрузитьОбъект(Истина)
        ОбъектСертификата.Текущий = Ложь
        ОбъектСертификата.МоментОтзываСертификата = Момент.Сейчас()
        ОбъектСертификата.ПричинаОтзываСертификата = ПричиныОтзываСертификата.Заменен
        ОбъектСертификата.Записать()
   ;
;

@ВПроекте
метод ПрекратитьСертификатыПросроченныхКорневых()
    исп Транзакции.Начать()
    знч Запрос = Запрос{
        Выбрать Различные
            ХранилищеСертификатов.Ссылка Как Ссылка
        Из
            ХранилищеСертификатов Как ХранилищеСертификатов
            Внутреннее Соединение ИнформацияОСертификатах Как ИнформацияОСертификатах
            По ХранилищеСертификатов.Ссылка == ИнформацияОСертификатах.ХранилищеКорневогоСертификата
                И ИнформацияОСертификатах.ПричинаОтзываСертификата == ПричиныОтзываСертификата.НеУказана
        Где
            ХранилищеСертификатов.ПричинаОтзываСертификата != ПричиныОтзываСертификата.НеУказана}
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        ОтозватьСертификатыХранилищаКорневогоСертификата(СтрокаРезультата.Ссылка)
    ;
;