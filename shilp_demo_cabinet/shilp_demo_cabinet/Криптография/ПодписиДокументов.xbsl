импорт ВебApi
импорт КонтрольДоступа
импорт КриптографияСтандартные
импорт ОбщиеСтандартные
импорт УниверсальныеМеханизмы

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат КонтрольДоступа.РазрешенияДоступаТаблицыСФизическимЛицомСПравомУдаления()
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<ПодписиДокументов.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<ПодписиДокументов.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч Разрешения: Соответствие<ПодписиДокументов.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    знч РазрешенияДоступаПодписываемыхДокументов: Соответствие<ПодписываемыйДокумент.Ссылка, ЧитаемыйМассив<РазрешениеДоступа>>
    знч ДокументыДляРасчетаРазрешний = ДокументыДляРасчетаРазерешений(Элементы)
    для Сервис из ПодписываемыйДокументПоставщикОграничений.ПолучитьСервисы()
        РазрешенияДоступаПодписываемыхДокументов.ВставитьВсе(Сервис.РазрешенияДоступаПодписываемыхДокументов(ДокументыДляРасчетаРазрешний))
    ;
    для Элемент из Элементы
        знч РазрешенияЭлемента: Множество<РазрешениеДоступа>
        РазрешенияЭлемента.Добавить(КонтрольДоступа.ПолныйДоступИнформационнойСистеме(этот))
        РазрешенияЭлемента.ДобавитьВсе(РазрешенияДоступаПодписываемыхДокументов.ПолучитьИлиУмолчание(Элемент.Документ, []))
        Разрешения.Вставить(Элемент, РазрешенияЭлемента)
    ;
    возврат Разрешения
;

метод ДокументыДляРасчетаРазерешений(Элементы: ЧитаемыйМассив<ПодписиДокументов.ДанныеРасчетаРазрешений>): ЧитаемыйМассив<ПодписываемыйДокумент.Ссылка>
    знч Документы: Массив<ПодписываемыйДокумент.Ссылка>
    для Элемент из Элементы
        Документы.Добавить(Элемент.Документ)
    ;
    возврат Документы
;

//КонецОбласти

@ВПроекте
метод ДобавитьПодпись(Документ: ПодписываемыйДокумент.Ссылка, ДатаПодписи: Момент? = Неопределено, Подпись: ДвоичныйОбъект.Ссылка? = Неопределено,
    МЧД: МашиночитаемыеДоверенности.Ссылка? = Неопределено): ПодписиДокументов.Ссылка
    
    знч ПодписьДокумента = новый ПодписиДокументов.Объект()
    ПодписьДокумента.Документ = Документ
    ПодписьДокумента.Подпись = Подпись
    если ДатаПодписи == Неопределено
        если Подпись == Неопределено
            ПодписьДокумента.Дата = МенеджерДат.ТекущаяДатаВремя()
        иначе
            ПодписьДокумента.Дата = МенеджерКриптографии.МоментПодписи(Подпись)
        ;
    иначе
        ПодписьДокумента.Дата = ДатаПодписи
    ;
    ПодписьДокумента.МЧД = МЧД
    ПодписьДокумента.Записать()
    возврат ПодписьДокумента.Ссылка
;


@ВПроекте
метод ОбновитьПодпись(ПодписьСсылка: ПодписиДокументов.Ссылка, ДатаПодписи: Момент?, Подпись: ДвоичныйОбъект.Ссылка?,
    МЧД: МашиночитаемыеДоверенности.Ссылка?)
 
    знч ПодписьДокумента = ПодписьСсылка.ЗагрузитьОбъект(Истина)
    если ДатаПодписи == Неопределено
        если Подпись == Неопределено
            ПодписьДокумента.Дата = МенеджерДат.ТекущаяДатаВремя()
        иначе
            ПодписьДокумента.Дата = МенеджерКриптографии.МоментПодписи(Подпись)
        ;
    иначе
        ПодписьДокумента.Дата = ДатаПодписи
    ;
    ПодписьДокумента.Подпись = Подпись
    ПодписьДокумента.МЧД = МЧД
    ПодписьДокумента.Записать()
;

@ВПроекте
структура ДанныеJson_V3_0
    пер electronicSignature: Строка?
    пер certificate: Строка?
    пер time: Момент?
    пер powerOfAttorney: Строка?
;

@ВПроекте
структура ДанныеПодписи
    пер Подпись: ДвоичныйОбъект.Ссылка?
    пер МЧД: МашиночитаемыеДоверенности.Ссылка?
;

@ВПроекте
метод ОбъектИзJson(ДанныеJson: ДанныеJson_V3_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson): ДанныеПодписи
    знч ДанныеПодписиИзJson = новый ДанныеПодписи()
    если ДанныеJson.powerOfAttorney != Неопределено
        ДанныеПодписиИзJson.МЧД = Сервисы.ПолучитьСсылку(МашиночитаемыеДоверенности.ВнешняяСсылка(ДанныеJson.powerOfAttorney)) как МашиночитаемыеДоверенности.Ссылка
    ;
    если ДанныеJson.electronicSignature != Неопределено
        знч ДанныеПодписиСтрокой = ДанныеJson.electronicSignature
        если не ДанныеПодписиСтрокой.Пусто()
            ДанныеПодписиИзJson.Подпись = ОбъектноеХранилище.ЗагрузитьИзBase64Строки(ДанныеПодписиСтрокой).Ссылка
        ;
    ;
    возврат ДанныеПодписиИзJson
;

@ВПроекте
метод ЗагрузитьОбъектыИзJson(Документ: ПодписываемыйДокумент.Ссылка, ДанныеJson: Массив<ДанныеJson_V3_0>, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    МенеджерСущности.УдалитьПодчиненныеОбъекты(Документ, Тип<ПодписиДокументов>, "Документ")
    для ДанныеПодписи из ДанныеJson
        ЗагрузитьОбъектИзJson(Документ, ДанныеПодписи, Сервисы)
    ;
;

метод ЗагрузитьОбъектИзJson(Документ: ПодписываемыйДокумент.Ссылка, ДанныеJson: ДанныеJson_V3_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson,
    ПодписьСсылка: ПодписиДокументов.Ссылка? = Неопределено)
    
    исп Транзакции.Начать() 

    знч ДанныеПодписи = ОбъектИзJson(ДанныеJson, Сервисы)
    пер ДатаПодписи: Момент?
    если ДанныеJson.time == Неопределено
        если ДанныеПодписи.Подпись == Неопределено
            ДатаПодписи = МенеджерДат.ТекущаяДатаВремя()
        иначе
            ДатаПодписи = МенеджерКриптографии.МоментПодписи(ДанныеПодписи.Подпись)
        ;
    иначе
        ДатаПодписи = ДанныеJson.time
    ;
    
    исп Транзакции.Начать()
    если ПодписьСсылка == Неопределено
        ДобавитьПодпись(
            Документ,
            ДатаПодписи,
            ДанныеПодписи.Подпись,
            ДанныеПодписи.МЧД)
    иначе
        ОбновитьПодпись(ПодписьСсылка, ДатаПодписи, ДанныеПодписи.Подпись, ДанныеПодписи.МЧД)
    ;
;

метод ДанныеПодписи(Подпись: ПодписиДокументов.Ссылка): ЧитаемоеСоответствие<Строка, Объект?>
    возврат ДанныеПодписей([Подпись])[Подпись]
;

метод ДанныеПодписей(Подписи: ЧитаемыйМассив<ПодписиДокументов.Ссылка>):
    ЧитаемоеСоответствие<ПодписиДокументов.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    
    знч Данные: Соответствие<ПодписиДокументов.Ссылка, ЧитаемоеСоответствие<Строка, Объект?>>
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Документ,
            Дата,
            Подпись,
            МЧД
        Из
            ПодписиДокументов
        Где
            Ссылка В (%Подписи)}
    исп Результат = Запрос.Выполнить()
    для РезультатСтрока из Результат
        Данные.Вставить(РезультатСтрока.Ссылка, МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтрока, Результат))
    ;
    возврат Данные
;

@ВПроекте
метод ДанныеПодписиВJson_V3_0(Подпись: ПодписиДокументов.Ссылка, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДанныеJson_V3_0
    знч ДанныеВJson = новый ДанныеJson_V3_0()
    
    знч ДанныеОбъекта = ДанныеПодписи(Подпись)
    
    ДанныеВJson.time = ДанныеОбъекта["Дата"] как Момент
    если  ДанныеОбъекта["МЧД"] != Неопределено
        ДанныеВJson.powerOfAttorney = Сервисы.ПолучитьИдентификатор(ДанныеОбъекта["МЧД"] как МашиночитаемыеДоверенности.Ссылка)
    ;
    
    если (ДанныеОбъекта["Подпись"] как ДвоичныйОбъект.Ссылка?) != Неопределено
        знч ДанныеПодписи = (ДанныеОбъекта["Подпись"] как ДвоичныйОбъект.Ссылка).Загрузить()
        если ДанныеПодписи.Размер.ВБайтах() > 0
            пер ПодписьСтрокой = Кодировки.Base64.КодироватьВСтроку(ДанныеПодписи.ПолучитьБайты(), ВидBase64.Base64)
            ДанныеВJson.electronicSignature = ПодписьСтрокой
            пер ДанныеСертификата = МенеджерКриптографии.ИнформацияОСертификатеПодписи(ДанныеПодписи)
            если ДанныеСертификата.Данные != Неопределено
                ДанныеВJson.certificate = Кодировки.Base64.КодироватьВСтроку(ДанныеСертификата.Данные, ВидBase64.Base64)
            ;
        ;
    ; 
    возврат ДанныеВJson
;

@ВПроекте
структура ДанныеПодписиДокумента
    знч Дата: Момент
    знч Подпись: ДвоичныйОбъект.Ссылка?
    знч МЧД: ПодписываемыйДокумент.Ссылка?
;

@ВПроекте
метод ДанныеПодписейДокумента(Документ: ПодписываемыйДокумент.Ссылка): Массив<ДанныеПодписиДокумента>
    знч Сведения = новый Массив<ДанныеПодписиДокумента>()
    знч Запрос = Запрос{
        Выбрать
            Дата,
            Подпись,
            МЧД
        Из
            ПодписиДокументов
        Где
            Документ В (%Документ)}
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        Сведения.Добавить(новый ДанныеПодписиДокумента(
            СтрокаРезультата.Дата,
            СтрокаРезультата.Подпись,
            СтрокаРезультата.МЧД
        ))
    ;
    возврат Сведения
;