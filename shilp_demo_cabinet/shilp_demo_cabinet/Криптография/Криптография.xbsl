импорт Компания::Согласования
импорт СтандартноеПриложение
импорт ОбщиеСтандартные
импорт КриптографияСтандартные
импорт УниверсальныеМеханизмы
импорт ФизическиеЛица
импорт КлиентСервисаПодписания
импорт Уведомления
импорт КонтрольДоступа

@ВПроекте
исключение ИсключениеСертификатФизическогоЛицаНеОбнаружен
    обз знч ФизическоеЛицо: ФизическиеЛица.Ссылка
;

@ВПроекте
исключение ИсключениеПодписьФизическогоЛицаНеОбнаружена
    обз знч ФизическоеЛицо: ФизическиеЛица.Ссылка
    обз знч Документ: Справочник.Ссылка
;

@ВПроекте
исключение ИсключениеЭлектроннаяПодписьОтсутствует
;

@ВПроекте
исключение КорневойСертификатОтозван
;

@ВПроекте
исключение ИсключениеНеверныйПарольЭлектроннойПодписи
;

@ВПроекте
исключение ИсключениеНеОбнаруженыНастройкиУЦ
;

@ВПроекте
исключение ИсключениеПодписанныйДокументОтсутствует
    обз знч Документ: ПодписываемыйДокумент.Ссылка
;

@ВПроекте
@НаКлиенте
конст ОБНОВЛЕНА_ЭЛЕКТРОННАЯ_ПОДПИСЬ = "ОбновленаЭлектроннаяПодпись"

@ВПроекте
конст ИД_ПОДСИСТЕМЫ = "Криптография"

@ВПодсистеме
конст ИМЯ_ПОДСИСТЕМЫ = "Криптография"

конст КЛЮЧ_ЗАДАНИЯ_ПРОВЕРКИ_КОРНЕВОГО_СЕРТИФИКАТА = "ПроверкаКорневогоСертификата"

@ВПроекте
@НаСервере @НаКлиенте
структура РезультатПодписания
    пер ЕстьОшибки: Булево
    пер ТекстОшибки: Строка
;

@ВПроекте
@НаКлиенте
метод ТребуетсяПарольЗакрытогоКлюча(): Булево
    
    пер ТребуетсяПароль = Ложь
    
    пер ПараметрыСеанса: ПараметрыСеанса = ПараметрыСеанса()
    если не ПараметрыСеанса.ПользовательИмеетСертификатЭП
        возврат ТребуетсяПароль
    ;
    
    если ПараметрыСеанса.ИспользованиеКЭДО
        пер ПарольЗакрытогоКлюча = ПараметрыСеанса.ПарольЗакрытогоКлючаПользователя
        пер СрокДействияЗакрытогоКлюча = ПараметрыСеанса.СрокДействияЗакрытогоКлючаПользователя
        если ПарольЗакрытогоКлюча.Пусто() или (СрокДействияЗакрытогоКлюча != Неопределено и СрокДействияЗакрытогоКлюча < Момент.Сейчас())
            ТребуетсяПароль = Истина
        ;
    ;
    
    возврат ТребуетсяПароль
    
;

@ВПроекте
@НаКлиенте
метод СброситьПарольЗакрытогоКлючаПриОшибкеВводаПароля(Ошибка: Исключение)
    пер ТипОшибки: Тип = Ошибка.ПолучитьТип()
    пер ТипПричиныОшибки: Тип = Ошибка.Причина.ПолучитьТип()
    знч Исключения = новый Массив<Тип>([
        Тип<ИсключениеНеверныйПарольЭлектроннойПодписи>, 
        Тип<ИсключениеЭлектроннаяПодписьОтсутствует>])

    если не (Исключения.Содержит(ТипОшибки) или Исключения.Содержит(ТипПричиныОшибки))
        возврат
    ;
    пер ПараметрыСеанса: ПараметрыСеанса = ПараметрыСеанса()
    ПараметрыСеанса.ПарольЗакрытогоКлючаПользователя= ""
    ПараметрыСеанса.СрокДействияЗакрытогоКлючаПользователя = Неопределено
;

@ВПроекте
@НаКлиенте
метод ПараметрыСеанса(): ПараметрыСеанса
    возврат ПараметрыСеансаСервис.ПолучитьСервис().ПараметрПоКлючу(КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА) как ПараметрыСеанса
;

@ВПроекте
@НаКлиенте
метод ВвестиПарольЗакрытогоКлюча(ФизическоеЛицо: ФизическиеЛица.Ссылка, ДокументСсылка: Объект): Булево
    пер Результат = Истина
    знч Параметры = ПараметрыСеанса()
    если Параметры.ВидЭлектроннойПодписи == ВидыЭлектронныхПодписей.УНЭПИнформационнойСистемы
        если ТребуетсяПарольЗакрытогоКлюча()
            Результат = ЗапросПароляЗакрытогоКлюча.ОткрытьВМодальномОкне() ?? Ложь
        ;
    ;
    возврат Результат
;

@ВПроекте
@НаКлиенте
метод УстановитьПодписьВСервисеПодписания(ДокументСсылка: Объект, ФизическоеЛицо: ФизическиеЛица.Ссылка,
    РольПодписанта: РолиПодписантов.Ссылка? = Неопределено, НомерШагаСогласования: Число = 0): Булево?
    
    возврат УстановитьПодписиДокументовВСервисеПодписания(
        {ДокументСсылка как ПодписываемыйДокумент.Ссылка},
        ФизическоеЛицо,
        РольПодписанта,
        НомерШагаСогласования)
;

@ВПроекте
@НаКлиенте
метод УстановитьПодписиДокументовВСервисеПодписания(ПодписываемыеДокументы: ЧитаемоеМножество<ПодписываемыйДокумент.Ссылка>,
    ФизическоеЛицо: ФизическиеЛица.Ссылка, РольПодписанта: РолиПодписантов.Ссылка? = Неопределено, НомерШагаСогласования: Число = 0): Булево?
    
    знч Параметры = ПараметрыСеанса()
    если Параметры.ВидЭлектроннойПодписи == ВидыЭлектронныхПодписей.Госключ
        или Параметры.ВидЭлектроннойПодписи == ВидыЭлектронныхПодписей.УнэпАстралПлатформа
        
        знч ПодписываемыеДокументыВСервисе = новый Множество<ДокументПодписываемыйВСервисеПодписания.Ссылка>()
        для ДокументСсылка из ПодписываемыеДокументы
            ПодписываемыеДокументыВСервисе.Добавить(ДокументСсылка как ДокументПодписываемыйВСервисеПодписания.Ссылка)
        ;
        возврат ПодписаниеВСервисеПодписания.ОткрытьВМодальномОкне(
            ПодписываемыеДокументы = ПодписываемыеДокументыВСервисе,
            ВидЭлектроннойПодписи = Параметры.ВидЭлектроннойПодписи,
            ВладелецУнэп = ФизическоеЛицо,
            РольПодписанта = РольПодписанта,
            НомерШагаСогласования = НомерШагаСогласования)
    ;
    возврат Неопределено
;

@ВПроекте
структура ПараметрыСеанса
    пер ИспользованиеКЭДО: Булево
    пер ПользовательИмеетСертификатЭП: Булево
    пер ПарольЗакрытогоКлючаПользователя: Строка
    пер СрокДействияЗакрытогоКлючаПользователя: Момент?
    пер ВидЭлектроннойПодписи: ВидыЭлектронныхПодписей
;

@ВПодсистеме
конст КЛЮЧ_ПАРАМЕТРОВ_СЕАНСА: Строка = "КриптографияПараметрыСеанса" 

метод СостояниеДокумента(ТекущееСостояние: СостоянияДокумента, ВидЭлектроннойПодписи: ВидыЭлектронныхПодписей, МоментОтправки: Момент?): СостоянияДокумента
    если ВидЭлектроннойПодписи != ВидыЭлектронныхПодписей.УНЭПИнформационнойСистемы
        если ТекущееСостояние == СостоянияДокумента.Черновик
            если КлиентСервисаПодписания.ДействующееСостояниеОжиданияДокумента(МоментОтправки, ВидЭлектроннойПодписи)
                возврат СостоянияДокумента.Подготовлен
            ;
        ;
    ;
    возврат ТекущееСостояние
;

@ВПроекте
@НаСервере
структура НастройкиПодписей
    пер ИспользованиеКЭДО: Булево
    пер НапоминатьОбОтсутствииПодписи: Булево
    пер ПериодичностьНапоминанияОбОтсутствииПодписи: Число
    пер ВключатьПерсональныеДанныеВСертификатСотрудника: Булево
    пер СкрыватьПерсональныеДанныеСотрудникаВПодписи: Булево
    пер ИспользованиеУнэпИнформационнойСистемы: Булево
;

@ВПроекте
@НаСервере
метод НастройкиЭлектронныхПодписей(): НастройкиПодписей
    пер Настройки = новый НастройкиПодписей(Ложь, Ложь, 0, Ложь, Ложь, Истина)
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч Запрос = Запрос{
        Выбрать 
            ИспользованиеКЭДО, 
            НапоминатьОбОтсутствииПодписи, 
            ПериодичностьНапоминанияОбОтсутствииПодписи,
            ВключатьПерсональныеДанныеВСертификатСотрудника,
            СкрыватьПерсональныеДанныеСотрудникаВПодписи,
            ИспользованиеУнэпИнформационнойСистемы
        Из 
            НастройкиЭлектронныхПодписей}
        
    исп РезультатЗапроса = Запрос.Выполнить() 
    знч РезультатЗапросаСтроки = новый ЧитаемыйМассив(РезультатЗапроса)
    если (не РезультатЗапросаСтроки.Пусто())
        Настройки.ИспользованиеКЭДО = РезультатЗапросаСтроки[0].ИспользованиеКЭДО
        Настройки.НапоминатьОбОтсутствииПодписи = РезультатЗапросаСтроки[0].НапоминатьОбОтсутствииПодписи
        Настройки.ПериодичностьНапоминанияОбОтсутствииПодписи = РезультатЗапросаСтроки[0].ПериодичностьНапоминанияОбОтсутствииПодписи
        Настройки.ВключатьПерсональныеДанныеВСертификатСотрудника = РезультатЗапросаСтроки[0].ВключатьПерсональныеДанныеВСертификатСотрудника
        Настройки.СкрыватьПерсональныеДанныеСотрудникаВПодписи = РезультатЗапросаСтроки[0].СкрыватьПерсональныеДанныеСотрудникаВПодписи
        Настройки.ИспользованиеУнэпИнформационнойСистемы = РезультатЗапросаСтроки[0].ИспользованиеУнэпИнформационнойСистемы
    ;
    ПривилегированныйРежим.Закрыть()
    возврат Настройки
;

@ВПроекте
@НаСервере
метод СохранитьНастройкиЭлектронныхПодписей(Настройки: НастройкиПодписей)
    пер ЭлементНастроек = новый НастройкиЭлектронныхПодписей.Объект()
    знч Запрос = Запрос{
        Выбрать 
            Ссылка
        Из 
            НастройкиЭлектронныхПодписей}
        
    исп Транзакции.Начать()
    исп РезультатЗапроса = Запрос.Выполнить() 
    знч РезультатЗапросаСтроки = новый ЧитаемыйМассив(РезультатЗапроса)
    если (не РезультатЗапросаСтроки.Пусто())
        ЭлементНастроек = РезультатЗапросаСтроки[0].Ссылка.ЗагрузитьОбъект(Истина)
    ;
    ЭлементНастроек.ИспользованиеКЭДО = Настройки.ИспользованиеКЭДО
    ЭлементНастроек.НапоминатьОбОтсутствииПодписи = Настройки.НапоминатьОбОтсутствииПодписи
    ЭлементНастроек.ПериодичностьНапоминанияОбОтсутствииПодписи = Настройки.ПериодичностьНапоминанияОбОтсутствииПодписи
    ЭлементНастроек.ВключатьПерсональныеДанныеВСертификатСотрудника = Настройки.ВключатьПерсональныеДанныеВСертификатСотрудника
    ЭлементНастроек.СкрыватьПерсональныеДанныеСотрудникаВПодписи = Настройки.СкрыватьПерсональныеДанныеСотрудникаВПодписи
    ЭлементНастроек.ИспользованиеУнэпИнформационнойСистемы = Настройки.ИспользованиеУнэпИнформационнойСистемы
    ЭлементНастроек.Записать()
    знч Сервисы = НастройкиЭПОбработчикСобытий.ПолучитьСервисы()
    для Сервис из Сервисы
        Сервис.СохранениеНастроекЭП()
    ;
;

@ВПроекте
@НаСервере
структура ДействиеСертификатов
    пер КорневойСертификат: Число
    пер СертификатСотрудника: Число
;

@ВПроекте
@НаСервере
метод СрокиДействияСертификатов(): ДействиеСертификатов
    пер СрокиДействия = новый ДействиеСертификатов(5, 1)
    исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
    знч Запрос = Запрос{
        Выбрать 
            КорневойСертификат, 
            СертификатСотрудника
        Из 
            СрокиДействияСертификатов}
        
    исп РезультатЗапроса = Запрос.Выполнить() 
    знч РезультатЗапросаСтроки = новый ЧитаемыйМассив(РезультатЗапроса)
    если (не РезультатЗапросаСтроки.Пусто())
        СрокиДействия.КорневойСертификат = РезультатЗапросаСтроки[0].КорневойСертификат
        СрокиДействия.СертификатСотрудника = РезультатЗапросаСтроки[0].СертификатСотрудника
    ;
    ПривилегированныйРежим.Закрыть()
    возврат СрокиДействия
;

@ВПроекте
@НаСервере
метод СохранитьСрокиДействияСертификатов(СрокиДействия: ДействиеСертификатов)
    пер ЭлементНастроек = новый СрокиДействияСертификатов.Объект()
    знч Запрос = Запрос{
        Выбрать 
            Ссылка
        Из 
            СрокиДействияСертификатов}
        
    исп Транзакции.Начать()
    исп РезультатЗапроса = Запрос.Выполнить() 
    знч РезультатЗапросаСтроки = новый ЧитаемыйМассив(РезультатЗапроса)
    если (не РезультатЗапросаСтроки.Пусто())
        ЭлементНастроек = РезультатЗапросаСтроки[0].Ссылка.ЗагрузитьОбъект(Истина)
    ;
    ЭлементНастроек.КорневойСертификат = СрокиДействия.КорневойСертификат
    ЭлементНастроек.СертификатСотрудника = СрокиДействия.СертификатСотрудника
    ЭлементНастроек.Записать()
;

@ВПроекте
метод ПредставлениеСерийногоНомера(ИнформацияОСертификате: ОбъектыКриптографии.ИнформацияОСертификате): Строка
    пер НомерСертификата = ИнформацияОСертификате.СерийныйНомер.ВВерхнийРегистр()
    пер ЧастиНомера = новый Массив<Строка>()
    пер ПозицияЧастиНомера = 0
    пока ПозицияЧастиНомера < НомерСертификата.Длина()
        если ПозицияЧастиНомера + 2 >= НомерСертификата.Длина()
            ЧастиНомера.Добавить(НомерСертификата.Подстрока(ПозицияЧастиНомера))
        иначе
            ЧастиНомера.Добавить(НомерСертификата.Подстрока(ПозицияЧастиНомера, ПозицияЧастиНомера + 2))
        ;
        ПозицияЧастиНомера += 2
    ;
    возврат Строки.Соединить(ЧастиНомера, Символы.НЕРАЗРЫВНЫЙ_ПРОБЕЛ)
;

@ВПроекте
метод ЭтоПодписьОрганизации(ИнформацияОСертификате: ОбъектыКриптографии.ИнформацияОСертификате): Булево
    пер Атрибуты = ИнформацияОСертификате.ИмяСубъекта.Разделить(",", Истина)
    для Атрибут из Атрибуты
        если Атрибут.НачинаетсяС("O=")
            возврат Истина
        ;
    ;
    возврат Ложь
;

@ВПроекте
метод ПредставлениеПериодаДействия(ИнформацияОСертификате: ОбъектыКриптографии.ИнформацияОСертификате): Строка
    знч Начало = МенеджерДат.ФорматМомента(ИнформацияОСертификате.ПериодДействия.ДатаНачала, "д ММММ гггг")
    знч Окончание = МенеджерДат.ФорматМомента(ИнформацияОСертификате.ПериодДействия.ДатаОкончания, "д ММММ гггг")
    возврат "с %Начало по %Окончание"
;

@ВПроекте
метод ЗначениеАтрибута(ИдентификаторАтрибута: Строка, ИмяСубъекта: Строка): Строка
    пер Значение: Строка
    пер ПодстрокаПоиска = ИдентификаторАтрибута + "=#"
    пер Позиция = ИмяСубъекта.Найти(ПодстрокаПоиска)
    если Позиция != -1
        Значение = ИмяСубъекта.Подстрока(Позиция + ПодстрокаПоиска.Длина() + 4)
        пер ПозицияКонец = Значение.Найти(",")
        если ПозицияКонец != -1
            Значение = Значение.ПодстрокаСНачала(ПозицияКонец)
        ;
        Значение = новый Строка(новый Байты(Значение))
    ;
    возврат Значение
;

@ВПроекте
@НаСервере
метод ЗаполнитьСостоянияКоллекцииДанныхДокументов(ДанныеДокументов: Массив<СостояниеДокументаКомпонентДанных>)
    если ДанныеДокументов.Пусто()
        возврат
    ;
    знч Настройки = НастройкиЭлектронныхПодписей()
    если Настройки.ИспользованиеКЭДО
        возврат
    ;
    пер ДокументыКоллекции = новый Массив<ДокументПодписываемыйВСервисеПодписания.Ссылка>()
    для ЭлементКоллекции из ДанныеДокументов
        ДокументыКоллекции.Добавить(ЭлементКоллекции.Документ как ДокументПодписываемыйВСервисеПодписания.Ссылка)
    ;
    знч ДанныеОтправок = КлиентСервисаПодписания.ДанныеОтправокНаПодписание(ДокументыКоллекции)
    для ЭлементКоллекции из ДанныеДокументов
        если ДанныеОтправок.СодержитКлюч(ЭлементКоллекции.Документ как ДокументПодписываемыйВСервисеПодписания.Ссылка)
            знч ДанныеОтправки = ДанныеОтправок.Получить(ЭлементКоллекции.Документ как ДокументПодписываемыйВСервисеПодписания.Ссылка)
            ЭлементКоллекции.ВидЭлектроннойПодписи = ДанныеОтправки.ВидЭлектроннойПодписи
            ЭлементКоллекции.Состояние = СостояниеДокумента(ЭлементКоллекции.Состояние, ЭлементКоллекции.ВидЭлектроннойПодписи, ДанныеОтправки.МоментОтправки)
        иначе
            ЭлементКоллекции.ВидЭлектроннойПодписи = ВидыЭлектронныхПодписей.УНЭПИнформационнойСистемы
        ;
    ;
;

@ВПроекте
@НаСервере
метод ЕстьДействующийСертификат(ФизическоеЛицо: ФизическиеЛица.Ссылка): Булево
    возврат ИнформацияОСертификатах.ЕстьДействующийСертификат(ФизическоеЛицо)
;

@ВПроекте
@НаСервере
метод ЕстьДействующийСертификатСервисаПодписния(ФизическоеЛицо: ФизическиеЛица.Ссылка, ВидЭлектроннойПодписи: ВидыЭлектронныхПодписей): Булево
    возврат КлиентСервисаПодписания.ЕстьДействующийСертификат(ФизическоеЛицо, ВидЭлектроннойПодписи)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод КорневойСертификатДействет(ФизическоеЛицо: ФизическиеЛица.Ссылка): Булево
    исп КонтекстДоступа.Привилегированный()
    возврат ИнформацияОСертификатах.КорневойСертификатДействет(ФизическоеЛицо)
;

@ВПроекте
@НаСервере
метод ЗаписатьНастройкиУЦ()
    если не НастройкиУЦ.НастройкиУЦЗаполнены()
        ЗаписатьНастройкиУЦ((новый Ууид()).ВСтроку(), (новый Ууид()).ВСтроку())
    ;
;

@ВПроекте
@НаСервере
метод ЗаписатьНастройкиУЦ(ИдСертификата: Строка, ПарольЗакрытогоКлючаСертификата: Строка)
    знч Набор = новый НастройкиУЦ.НаборЗаписей()
    Набор.Фильтр.ИдСертификата.Установить(ИдСертификата)
    Набор.ДобавитьЗапись(
        ИдСертификата = ИдСертификата, 
        ПарольЗакрытогоКлючаСертификата = ПарольЗакрытогоКлючаСертификата)
    Набор.Записать()
;

@ВПроекте
@НаСервере
метод ДанныеПодписиФизическогоЛица(ФизическоеЛицо: ФизическиеЛица.Ссылка, ПарольЗакрытогоКлюча: Строка): МенеджерКриптографии.ДанныеЭлектроннойПодписи?
    возврат ИнформацияОСертификатах.ДанныеПодписиФизическогоЛица(ФизическоеЛицо, ПарольЗакрытогоКлюча)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ДоступныеВидыЭлектронныхПодписей(): Массив<ВидыЭлектронныхПодписей>
    знч ДоступныеВиды = новый Массив<ВидыЭлектронныхПодписей>()
    если НастройкиЭлектронныхПодписей().ИспользованиеУнэпИнформационнойСистемы
        ДоступныеВиды.Добавить(ВидыЭлектронныхПодписей.УНЭПИнформационнойСистемы)
    ;
    ДоступныеВиды.ДобавитьВсе(КлиентСервисаПодписания.ДоступныеВидыЭлектронныхПодписей())
    если ДоступныеВиды.Пусто()
        ДоступныеВиды.Добавить(ВидыЭлектронныхПодписей.УНЭПИнформационнойСистемы)
    ;
    возврат ДоступныеВиды
;

@ВПроекте
@НаСервере
метод УстановитьИспользованиеУнэпИнформационнойСистемы(НовоеЗначение: Булево)
    знч Настройки = НастройкиЭлектронныхПодписей()
    Настройки.ИспользованиеУнэпИнформационнойСистемы = НовоеЗначение
    СохранитьНастройкиЭлектронныхПодписей(Настройки)
;   

@ВПодсистеме
@НаСервере
метод ЗапланироватьПроверкуКорневогоСертификата()
    знч Задание = ЗапланированныеЗадания.ПолучитьПоКлючу(
        КЛЮЧ_ЗАДАНИЯ_ПРОВЕРКИ_КОРНЕВОГО_СЕРТИФИКАТА)
    МенеджерЗаданий.ПроверитьАвтозапускЗапланированныхЗаданийВключен()
    если Задание == Неопределено
        ЗапланированныеЗадания.Создать(&ПроверитьКорневойСертификат)
            .Настроить(
                Ключ = КЛЮЧ_ЗАДАНИЯ_ПРОВЕРКИ_КОРНЕВОГО_СЕРТИФИКАТА,
                Расписание = [Расписание.Ежедневно(Время{1:0:0})],
                ПовторыПриОшибке = СтратегияПовтораЗадания.Интервал(60с),
                Описание = "Проверка корневого сертификата"
            ).Запланировать()
    иначе
        если Задание.Статус == СтатусЗадания.Приостановлено
            ЗапланированныеЗадания.Возобновить(КЛЮЧ_ЗАДАНИЯ_ПРОВЕРКИ_КОРНЕВОГО_СЕРТИФИКАТА)
        иначе если Задание.Статус != СтатусЗадания.Выполняется
            ЗапланированныеЗадания.Изменить(КЛЮЧ_ЗАДАНИЯ_ПРОВЕРКИ_КОРНЕВОГО_СЕРТИФИКАТА)
                .Настроить(
                    Расписание = [Расписание.Ежедневно(Время{1:0:0})],
                    ПовторыПриОшибке = СтратегияПовтораЗадания.Интервал(60с)
                ).Запланировать()
        ;
    ;
;

@ВПодсистеме
@НаСервере
метод ОстановитьПроверкуКорневогоСертификата()
    знч Задание = ЗапланированныеЗадания.ПолучитьПоКлючу(
        КЛЮЧ_ЗАДАНИЯ_ПРОВЕРКИ_КОРНЕВОГО_СЕРТИФИКАТА)
    если Задание != Неопределено
        ЗапланированныеЗадания.Удалить(КЛЮЧ_ЗАДАНИЯ_ПРОВЕРКИ_КОРНЕВОГО_СЕРТИФИКАТА)
    ;
;

@НаСервере
метод ПроверитьКорневойСертификат()
    пер КорневойСертификат = РаботаСПодписями.СертификатУдостоверяющегоЦентра()
    если КорневойСертификат == Неопределено
        возврат
    ;
    знч ОстатокСрокаДействия = КорневойСертификат.ДействителенПо - МенеджерДат.ТекущаяДатаВремя()
    пер ОтправитьУведомление = Ложь
    // За пол года уведомления отправляеются раз в месяц
    если ОстатокСрокаДействия <= 6м и ОстатокСрокаДействия > 1м
        если КорневойСертификат.ДействителенПо.ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий()).День ==
            МенеджерДат.ТекущаяДатаВремя().ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий()).День
                
            ОтправитьУведомление = Истина
        ;
    // За месяц - раз в неделю
    иначе если ОстатокСрокаДействия <= 1м и ОстатокСрокаДействия > 7д
        если КорневойСертификат.ДействителенПо.ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий()).ДеньНедели() ==
            МенеджерДат.ТекущаяДатаВремя().ВДатаВремя(МенеджерДат.ЧасовойПоясТекущий()).ДеньНедели()
            
            ОтправитьУведомление = Истина
        ;
    // Если менее недели - раз в сутки
    иначе если ОстатокСрокаДействия <= 7д
        ОтправитьУведомление = Истина
    ;
    
    если ОтправитьУведомление
        исп ПривилегированныйРежим: КонтекстДоступа = КонтекстДоступа.Привилегированный()
        пер АдминистраторыАбонента = новый Массив<ФизическиеЛица.Ссылка>(КонтрольДоступа.ФизическиеЛицаАдминистраторыАбонента())
        ПривилегированныйРежим.Закрыть()
        если не АдминистраторыАбонента.Пусто()
            пер ДанныеУведомления = новый УведомленияСервер.ДанныеУведомления(
                Уведомления.ВидыУведомлений.ОбщаяИнформация, МенеджерКриптографии.ДействующийСертификатИздателя()) 
            знч Тема = "Истекает срок действия корневого сертификата"
            знч ТекстСообщения =
                "%{МенеджерДат.ФорматМомента(КорневойСертификат.ДействителенПо, "д ММММ гггг", МенеджерДат.ЧасовойПоясТекущий(), Истина)} истекает срок действия корневого сертификата.
                Необходимо заранее позабодиться о его перевыпуске."
            пер ТекстыУведомлений = новый УведомленияСервер.ТекстыСообщений(
                Тема, ТекстСообщения, ТекстСообщения, ТекстСообщения)
            УведомленияСервер.ОтправитьУведомления(
                АдминистраторыАбонента, ТекстыУведомлений, ДанныеУведомления)
        ;
    ;
;