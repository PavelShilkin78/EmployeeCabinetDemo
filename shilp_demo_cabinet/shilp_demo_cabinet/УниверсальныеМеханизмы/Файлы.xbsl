импорт КриптографияСтандартные
импорт ВебApi
импорт ОбменДанными
импорт ОбщиеСтандартные
импорт СтандартноеПриложение

@ВПроекте
исключение ИсключениеФайлПоСсылкеНеНайден
    обз пер ВыбранныйФайл: Файлы.Ссылка
;

@ВПроекте
исключение ИсключениеХранилищеФайлаПустое
    обз пер ВыбранныйФайл: Файлы.Ссылка
;

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат ФайлыПоставщикОграничений.ПолучитьСервис().ФайлыРазрешенияДоступа()
;

@Обработчик
метод ВычислитьРазрешенияДоступаДляОбъектов(Элементы: ЧитаемыйМассив<Файлы.ДанныеРасчетаРазрешений>): ЧитаемоеСоответствие<Файлы.ДанныеРасчетаРазрешений, ЧитаемаяКоллекция<РазрешениеДоступа>>
    возврат ФайлыПоставщикОграничений.ПолучитьСервис().ФайлыРазрешенияДоступаДляОбъектов(Элементы)
;

//КонецОбласти

//Область СлужебныйПрограммныйИнтерфейс

@ВПроекте
метод НовыйФайл(ДанныеФайла: ДвоичныйОбъект, Размер: Число, ВидФайла: ВидыФайла = ВидыФайла.Вложение, ИдентификаторЭлектронногоДокумента: Строка = ""): Файлы.Объект
    пер ФайлОбъект = новый Файлы.Объект().Заполнить()
    ПоместитьДанныеВФайл(ФайлОбъект, ДанныеФайла, Размер, ИдентификаторЭлектронногоДокумента)
    ФайлОбъект.ВидФайла = ВидФайла
    возврат ФайлОбъект
;

@ВПроекте
метод НовыйФайл(ДанныеФайла: ДвоичныйОбъект, ВидФайла: ВидыФайла = ВидыФайла.Вложение, ИдентификаторЭлектронногоДокумента: Строка = ""): Файлы.Объект
    пер ФайлОбъект = новый Файлы.Объект().Заполнить()
    ПоместитьДанныеВФайл(ФайлОбъект, ДанныеФайла, ИдентификаторЭлектронногоДокумента)
    ФайлОбъект.ВидФайла = ВидФайла
    возврат ФайлОбъект
;

@ВПроекте
метод ПоместитьДанныеВФайл(ФайлОбъект: Файлы.Объект, ДанныеФайла: ДвоичныйОбъект, ИдентификаторЭлектронногоДокумента: Строка = "")
    ПоместитьДанныеВФайл(ФайлОбъект, ДанныеФайла, ДанныеФайла.Размер.ВБайтах(), ИдентификаторЭлектронногоДокумента)
;

метод ПоместитьДанныеВФайл(ФайлОбъект: Файлы.Объект, ДанныеФайла: ДвоичныйОбъект, Размер: Число, ИдентификаторЭлектронногоДокумента: Строка = "")
    ФайлОбъект.Хранилище = ДанныеФайла.Ссылка
    ФайлОбъект.Размер = Размер
    ФайлОбъект.ХешДанных = МенеджерКриптографии.ХешДвоичныхДанных(ДанныеФайла)
    ФайлОбъект.ИдентификаторЭлектронногоДокумента = ИдентификаторЭлектронногоДокумента
;

@ВПроекте
метод ЗаписатьФайлыПоВладельцу(ЗаписываемыеФайлы: ЧитаемаяКоллекция<Файлы.Объект>, Владелец: ВладелецФайлы.Ссылка, Замещать: Булево = Истина)
    исп Транзакции.Начать()
    если Замещать
        знч ФайлыПоВладельцу = ФайлыПоВладельцу(Владелец)
        для ДанныеФайла из ФайлыПоВладельцу
            ДанныеФайла.Ссылка.ЗагрузитьОбъект(Истина).Удалить()
        ;
    ;
    для Вложение из ЗаписываемыеФайлы
        Вложение.Владелец = Владелец
        Вложение.Записать()
    ;
;

@ВПроекте
метод УдалитьФайлыПоВладельцу(Владелец: ВладелецФайлы.Ссылка)
    ЗаписатьФайлыПоВладельцу([], Владелец, Замещать = Истина)    
;

@ВПроекте
метод СкопироватьФайл(Файл: Файлы.Ссылка, НовыйВладелец: ВладелецФайлы.Ссылка? = Неопределено): Файлы.Ссылка
    знч КопируемыйФайл = ФайлОбъект(Файл)
    знч НовыйФайл: Файлы.Объект
    если НовыйВладелец == Неопределено
        НовыйФайл.Владелец = КопируемыйФайл.Владелец
    иначе
        НовыйФайл.Владелец = НовыйВладелец
    ;
    НовыйФайл.Наименование = КопируемыйФайл.Наименование
    НовыйФайл.Хранилище = КопируемыйФайл.Хранилище
    НовыйФайл.Размер = КопируемыйФайл.Размер
    НовыйФайл.Расширение = КопируемыйФайл.Расширение
    НовыйФайл.ДатаСоздания = МенеджерДат.ТекущаяДатаВремя()
    НовыйФайл.ХешДанных = КопируемыйФайл.ХешДанных
    НовыйФайл.ВидФайла = КопируемыйФайл.ВидФайла
    НовыйФайл.Записать()
    возврат НовыйФайл.Ссылка
;

@ВПроекте
@НаСервере
метод СкопироватьВсеФайлы(Источник: ВладелецФайлы.Ссылка, Приемник: ВладелецФайлы.Ссылка)
    исп Транзакции.Начать()
    для КопируемыйФайл из ФайлыПоВладельцу(Источник)
        знч НовыйФайл = новый Файлы.Объект().Заполнить()
        НовыйФайл.Владелец = Приемник
        НовыйФайл.Наименование = КопируемыйФайл.Наименование
        НовыйФайл.Хранилище = КопируемыйФайл.Хранилище
        НовыйФайл.Размер = КопируемыйФайл.Размер
        НовыйФайл.Расширение = КопируемыйФайл.Расширение
        НовыйФайл.ДатаСоздания = МенеджерДат.ТекущаяДатаВремя()
        НовыйФайл.ХешДанных = КопируемыйФайл.ХешДанных
        НовыйФайл.ВидФайла = КопируемыйФайл.ВидФайла
        НовыйФайл.Записать()        
    ;
;

//Область JSON

@ВПроекте
метод УдалитьФайл(Файл: Файлы.Ссылка)
    Файл.ЗагрузитьОбъект()?.Удалить()
;

@ВПроекте
метод ЭлектронныйДокументОбъекта(ВладелецФайлов: ВладелецФайлы.Ссылка, ИдентификаторЭлектронногоДокумента: Строка = ""): Файлы.Ссылка?
    возврат ФайлыПоВладельцу(ВладелецФайлов, [ВидыФайла.ЭлектронныйДокумент], ИдентификаторЭлектронногоДокумента)
                .ЕдинственныйИлиУмолчание()?.Ссылка
;

@ВПроекте
метод ВерсияЭлектронногоДокументаОбъекта(ВладелецФайлов: ВладелецФайлы.Ссылка, ИдентификаторЭлектронногоДокумента: Строка = ""): Строка?
    пер ВерсияДокумента: Строка? = Неопределено
    пер ЭлектронныйДокумент = ЭлектронныйДокументОбъекта(ВладелецФайлов, ИдентификаторЭлектронногоДокумента)
    если ЭлектронныйДокумент != Неопределено
        пер ДанныеЭлектронногоДокумента = ДанныеФайла(ЭлектронныйДокумент)
        ВерсияДокумента = ДанныеЭлектронногоДокумента.ХешДанных
    ;
    возврат ВерсияДокумента
;

@ВПроекте 
метод ИдентификаторЭлектронногоДокумента(ВладелецСсылка: Сущность.Ключ,
    ИдентификаторЭлектронногоДокументаОбъект: Сущность.Ключ? = Неопределено): Строка
    
    если ИдентификаторЭлектронногоДокументаОбъект == Неопределено
        возврат ИдСущности(ВладелецСсылка).ВСтроку()
    ;
    возврат "%{ИдСущности(ВладелецСсылка)}%{ИдСущности(ИдентификаторЭлектронногоДокументаОбъект!)}"
;

метод ИдСущности(Сущность: Сущность.Ключ): Ууид
    выбор Сущность
    когда это Справочник.Ссылка
        возврат (Сущность как Справочник.Ссылка).Ид
    когда это Документ.Ссылка
        возврат (Сущность как Документ.Ссылка).Ид
    когда это ПланОбмена.Ссылка
        возврат (Сущность как ПланОбмена.Ссылка).Ид
    иначе
        выбросить новый ИсключениеВыполнения("Сущность не является объектной")
    ;    
;

@ВПроекте
метод ДанныеФайла(ИдентификаторФайла: Ууид): ДвоичныйОбъект
    пер ВыбранныйФайл: Файлы.Ссылка? = СсылкаНаФайл(ИдентификаторФайла)
    возврат ДвоичныеДанныеФайла(ВыбранныйФайл!)
;

метод СсылкаНаФайл(ИдентификаторФайла: Ууид): Файлы.Ссылка
    возврат ПолучитьСсылку(ИдентификаторФайла)
;

@ВПроекте
структура ФайлСРасширением
    обз пер Файл: ДвоичныйОбъект
    обз пер Расширение: Строка
;

@ВПроекте
метод ДвоичныеДанныеФайла(ВыбранныйФайл: Файлы.Ссылка): ДвоичныйОбъект
    пер ФайлОбъект = ФайлОбъект(ВыбранныйФайл)
    возврат ФайлОбъект.Хранилище.Загрузить()
;

@ВПроекте
метод ФайлСРасширением(ВыбранныйФайл: Файлы.Ссылка): ФайлСРасширением
    пер ФайлОбъект = ФайлОбъект(ВыбранныйФайл)
    возврат новый ФайлСРасширением(ФайлОбъект.Хранилище.Загрузить(), ФайлОбъект.Расширение)
;

метод ФайлОбъект(ВыбранныйФайл: Файлы.Ссылка): Файлы.Объект
    пер ФайлОбъект = ВыбранныйФайл.ЗагрузитьОбъект()
    если ФайлОбъект == Неопределено
        выбросить новый ИсключениеФайлПоСсылкеНеНайден("Файл по ссылке не найден (ID = %{ВыбранныйФайл.Ид})", ВыбранныйФайл)
    ;
    если ФайлОбъект.Хранилище == Неопределено
        выбросить новый ИсключениеХранилищеФайлаПустое("Содержимое файла не заполнено", ВыбранныйФайл)
    ;
    возврат ФайлОбъект
;

@ВПроекте
метод ДанныеФайлаJson(Файл: Файлы.Ссылка, Сервисы: ВебApiСервер.СервисыУпаковкиJson): МенеджерФайлов.ДанныеФайлаJson
    возврат ФайлВJson(ДанныеФайла(Файл), Сервисы)
;

@ВПроекте
структура ЭлектронныйДокументJson
    обз пер originalDocument: МенеджерФайлов.ДанныеФайлаJson
    пер additionalPresentations: Массив<МенеджерФайлов.ДанныеФайлаJson>?
;

@ВПроекте
структура ЭлектронныйДокументJson_V2_0
    обз пер originalDocument: МенеджерФайлов.ДанныеФайлаJson
    пер originalMxl: МенеджерФайлов.ДанныеФайлаJson?
    пер additionalPresentations: Массив<МенеджерФайлов.ДанныеФайлаJson>?
;

@ВПроекте
структура ЭлектронныйДокументJson_V2_1
    обз пер originalDocument: МенеджерФайлов.ДанныеФайлаJson
    пер originalMxl: МенеджерФайлов.ДанныеФайлаJson?
    пер additionalPresentations: Массив<МенеджерФайлов.ДанныеФайлаJson>?
    пер signatureRequirements: ВариантыПодписанияДокументовJson?
;

@ВПроекте
структура ДанныеФайловJson
    пер ЭлектронныйДокумент: ЭлектронныйДокументJson?
    пер Вложения: Массив<МенеджерФайлов.ДанныеФайлаJson>?
;

@ВПроекте
структура ДанныеФайловJson_V2_0
    пер ЭлектронныйДокумент: ЭлектронныйДокументJson_V2_0?
    пер Вложения: Массив<МенеджерФайлов.ДанныеФайлаJson>?
;

@ВПроекте
структура ДанныеФайловJson_V2_1
    пер ЭлектронныйДокумент: ЭлектронныйДокументJson_V2_1?
    пер Вложения: Массив<МенеджерФайлов.ДанныеФайлаJson>?
;

@ВПодсистеме
перечисление ВариантыПодписанияДокументовJson
    electronicSignature умолчание,
    notRequired,
    regularSignature
;

@ВПроекте
метод ПолучитьДанныеФайловJson(ВладелецФайлов: ВладелецФайлы.Ссылка, ДляПредставления: Булево, Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ИдентификаторЭлектронногоДокумента: Строка = ""): ДанныеФайловJson

    знч ДанныеФайловJson_V2_1 = ПолучитьДанныеФайловJson_V2_1(ВладелецФайлов, ДляПредставления, Сервисы)
    пер ЭлектронныйДокументJson: ЭлектронныйДокументJson?
    если ДанныеФайловJson_V2_1.ЭлектронныйДокумент != Неопределено
        ЭлектронныйДокументJson = новый ЭлектронныйДокументJson(
            originalDocument = ДанныеФайловJson_V2_1.ЭлектронныйДокумент!.originalDocument,
            additionalPresentations = ДанныеФайловJson_V2_1.ЭлектронныйДокумент!.additionalPresentations
        )
    ;
    возврат новый ДанныеФайловJson(
        ЭлектронныйДокумент = ЭлектронныйДокументJson,
        Вложения = ДанныеФайловJson_V2_1.Вложения    
    )
;

@ВПроекте
метод ПолучитьДанныеФайловJson_V2_0(ВладелецФайлов: ВладелецФайлы.Ссылка, ДляПредставления: Булево, Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ИдентификаторЭлектронногоДокумента: Строка = ""): ДанныеФайловJson_V2_0
    
    знч ДанныеФайловJson_V2_1 = ПолучитьДанныеФайловJson_V2_1(ВладелецФайлов, ДляПредставления, Сервисы)
    пер ЭлектронныйДокументJson_V2_0: ЭлектронныйДокументJson_V2_0?
    если ДанныеФайловJson_V2_1.ЭлектронныйДокумент != Неопределено
        ЭлектронныйДокументJson_V2_0 = новый ЭлектронныйДокументJson_V2_0(
            originalDocument = ДанныеФайловJson_V2_1.ЭлектронныйДокумент!.originalDocument,
            originalMxl = ДанныеФайловJson_V2_1.ЭлектронныйДокумент!.originalMxl,
            additionalPresentations = ДанныеФайловJson_V2_1.ЭлектронныйДокумент!.additionalPresentations
        )
    ;
    возврат новый ДанныеФайловJson_V2_0(
        ЭлектронныйДокумент = ЭлектронныйДокументJson_V2_0,
        Вложения = ДанныеФайловJson_V2_1.Вложения    
    )
;

@ВПроекте
метод ПолучитьДанныеФайловJson_V2_1(ВладелецФайлов: ВладелецФайлы.Ссылка, ДляПредставления: Булево, Сервисы: ВебApiСервер.СервисыУпаковкиJson,
    ИдентификаторЭлектронногоДокумента: Строка = ""): ДанныеФайловJson_V2_1
    
    пер ДанныеФайлов = новый ДанныеФайловJson_V2_1()
    знч ДанныеФайловВладельца = ФайлыПоВладельцу(ВладелецФайлов)
    если не ДанныеФайловВладельца.Пусто()
        пер ФайлыJson: Массив<МенеджерФайлов.ДанныеФайлаJson>
        пер ЭлектронныйДокументКоллекции: ЭлектронныйДокументJson_V2_1?
        пер ТабличныйДокументОригинала: МенеджерФайлов.ДанныеФайлаJson?
        пер ПредставленияЭлектронногоДокумента = новый Массив<МенеджерФайлов.ДанныеФайлаJson>()
        для ДанныеФайла из ДанныеФайловВладельца
            если ДанныеФайла.ВидФайла == ВидыФайла.ЭлектронныйДокумент
                если ИдентификаторЭлектронногоДокумента.Пусто()
                    ЭлектронныйДокументКоллекции = новый ЭлектронныйДокументJson_V2_1(ФайлВJson(ДанныеФайла, Сервисы))
                иначе если ИдентификаторЭлектронногоДокумента == ДанныеФайла.ИдентификаторЭлектронногоДокумента
                    ЭлектронныйДокументКоллекции = новый ЭлектронныйДокументJson_V2_1(ФайлВJson(ДанныеФайла, Сервисы))
                ;
            иначе если ДанныеФайла.ВидФайла == ВидыФайла.ДополнительноеПредставлениеЭлектронногоДокумента
                если ИдентификаторЭлектронногоДокумента.Пусто()
                    ПредставленияЭлектронногоДокумента.Добавить(ФайлВJson(ДанныеФайла, Сервисы))
                иначе если ИдентификаторЭлектронногоДокумента == ДанныеФайла.ИдентификаторЭлектронногоДокумента
                    ПредставленияЭлектронногоДокумента.Добавить(ФайлВJson(ДанныеФайла, Сервисы))
                ;
            иначе если ДанныеФайла.ВидФайла == ВидыФайла.ТабличныйДокументОригинала
                если ИдентификаторЭлектронногоДокумента.Пусто()
                    ТабличныйДокументОригинала = ФайлВJson(ДанныеФайла, Сервисы)
                иначе если ИдентификаторЭлектронногоДокумента == ДанныеФайла.ИдентификаторЭлектронногоДокумента
                    ТабличныйДокументОригинала = ФайлВJson(ДанныеФайла, Сервисы)
                ;
            иначе
                ФайлыJson.Добавить(ФайлВJson(ДанныеФайла, Сервисы))
            ;
        ;
        если не ДляПредставления
            если ЭлектронныйДокументКоллекции != Неопределено
                ДанныеФайлов.ЭлектронныйДокумент = ЭлектронныйДокументКоллекции
                если не ПредставленияЭлектронногоДокумента.Пусто()
                    если ДанныеФайлов.ЭлектронныйДокумент.additionalPresentations == Неопределено
                        ДанныеФайлов.ЭлектронныйДокумент.additionalPresentations = новый Массив<МенеджерФайлов.ДанныеФайлаJson>()
                    ;
                    ДанныеФайлов.ЭлектронныйДокумент.additionalPresentations.ДобавитьВсе(ПредставленияЭлектронногоДокумента)
                ;
                ДанныеФайлов.ЭлектронныйДокумент.originalMxl = ТабличныйДокументОригинала
            ;
        ;
        если не ФайлыJson.Пусто()
            ДанныеФайлов.Вложения = ФайлыJson
        ;
    ;
    
    возврат ДанныеФайлов
;

@ВПроекте
исключение ИсключениеНеНайденФайл
    обз пер ИмяПоля: Строка
    обз пер Идентификатор: Строка
;

метод ФайлВложенияИзJson(ДанныеФайлаJSON: МенеджерФайлов.ДанныеФайлаJson, Сервисы: ВебApiСервер.СервисыЗагрузкиJson,
    ВидФайла: ВидыФайла = ВидыФайла.Вложение): Файлы.Объект

    пер ИдЗагруженногоФайла: Строка
    если Сервисы.ИнструментыМенеджераОбъекта.ИдЗагруженногоФайла != Неопределено
        ИдЗагруженногоФайла = Сервисы.ИнструментыМенеджераОбъекта.ИдЗагруженногоФайла(ДанныеФайлаJSON.ID)
    иначе
        ИдЗагруженногоФайла = ДанныеФайлаJSON.ID
    ;
    пер ЗагруженныйФайл = ЗагруженныеФайлы.ПолучитьСсылку(
        новый Ууид(ИдЗагруженногоФайла)).ЗагрузитьОбъект()
    если ЗагруженныйФайл == Неопределено
        выбросить новый ИсключениеНеНайденФайл(
            Строки.Шаблон(
                "Не найден загруженный файл $0 по ID = $1", 
                [ДанныеФайлаJSON.name, ДанныеФайлаJSON.ID]), 
            "ID", 
            ДанныеФайлаJSON.ID)
    ;
    знч ДвоичныеДанныеФайла: ДвоичныйОбъект = ЗагруженныйФайл.Хранилище.Загрузить()
    знч ФайлОбъект = НовыйФайл(ДвоичныеДанныеФайла, ЗагруженныйФайл.Размер, ВидФайла)
    ЗаполнитьОбъектФайлаИзJson(ФайлОбъект, ДанныеФайлаJSON)
    возврат ФайлОбъект
;



метод ЗаполнитьОбъектФайлаИзJson(ФайлОбъект: Файлы.Объект, ДанныеФайлаJson: МенеджерФайлов.ДанныеФайлаJson)
    
    ФайлОбъект.Наименование = ДанныеФайлаJson.name
    ФайлОбъект.Расширение = ДанныеФайлаJson.extension
    ФайлОбъект.ИдентификаторЭлектронногоДокумента = ДанныеФайлаJson.electronicDocumentID ?? ""
;

@ВПроекте
метод ВложенияИзJson(
        ДанныеJson: Массив<МенеджерФайлов.ДанныеФайлаJson>, 
        Сервисы: ВебApiСервер.СервисыЗагрузкиJson,
        Владелец: ВладелецФайлы.Ссылка): Массив<Файлы.Объект>

    пер Вложения: Массив<Файлы.Объект>
    для ДанныеФайла из ДанныеJson
        пер ОбъектФайла = ФайлВложенияИзJson(ДанныеФайла, Сервисы, ВидыФайла.Вложение)
        ОбъектФайла.Владелец = Владелец
        Вложения.Добавить(ОбъектФайла)
    ;
    возврат Вложения
;

@ВПроекте
метод ВложенияИзJson(ДанныеJson: ЭлектронныйДокументJson?, Сервисы: ВебApiСервер.СервисыЗагрузкиJson, Владелец: ВладелецФайлы.Ссылка): Массив<Файлы.Объект>
    пер Вложения: Массив<Файлы.Объект>
    если ДанныеJson != Неопределено
        пер ОбъектФайла = ФайлВложенияИзJson(ДанныеJson.originalDocument, Сервисы, ВидыФайла.ЭлектронныйДокумент)
        ОбъектФайла.Владелец = Владелец
        Вложения.Добавить(ОбъектФайла)
        если ДанныеJson.additionalPresentations != Неопределено
            для ДанныеФайла из ДанныеJson.additionalPresentations
                ОбъектФайла = ФайлВложенияИзJson(ДанныеФайла, Сервисы, ВидыФайла.ДополнительноеПредставлениеЭлектронногоДокумента)
                ОбъектФайла.Владелец = Владелец
                Вложения.Добавить(ОбъектФайла)
            ;
        ;
     ;
     возврат Вложения
;

@ВПроекте
метод ВложенияИзJson_V2_0(ДанныеJson: ЭлектронныйДокументJson_V2_0?, Сервисы: ВебApiСервер.СервисыЗагрузкиJson, Владелец: ВладелецФайлы.Ссылка): Массив<Файлы.Объект>
    пер Вложения: Массив<Файлы.Объект>
    если ДанныеJson != Неопределено
        пер ОбъектФайла = ФайлВложенияИзJson(ДанныеJson.originalDocument, Сервисы, ВидыФайла.ЭлектронныйДокумент)
        ОбъектФайла.Владелец = Владелец
        Вложения.Добавить(ОбъектФайла)
        если ДанныеJson.additionalPresentations != Неопределено
            для ДанныеФайла из ДанныеJson.additionalPresentations
                ОбъектФайла = ФайлВложенияИзJson(ДанныеФайла, Сервисы, ВидыФайла.ДополнительноеПредставлениеЭлектронногоДокумента)
                ОбъектФайла.Владелец = Владелец
                Вложения.Добавить(ОбъектФайла)
            ;
        ;
     ;
     возврат Вложения
;

@ВПроекте
метод ВложенияИзJson_V2_1(ДанныеJson: ЭлектронныйДокументJson_V2_1?, Сервисы: ВебApiСервер.СервисыЗагрузкиJson, Владелец: ВладелецФайлы.Ссылка): Массив<Файлы.Объект>
    пер Вложения: Массив<Файлы.Объект>
    если ДанныеJson != Неопределено
        пер ОбъектФайла = ФайлВложенияИзJson(ДанныеJson.originalDocument, Сервисы, ВидыФайла.ЭлектронныйДокумент)
        ОбъектФайла.Владелец = Владелец
        Вложения.Добавить(ОбъектФайла)
        если ДанныеJson.additionalPresentations != Неопределено
            для ДанныеФайла из ДанныеJson.additionalPresentations
                ОбъектФайла = ФайлВложенияИзJson(ДанныеФайла, Сервисы, ВидыФайла.ДополнительноеПредставлениеЭлектронногоДокумента)
                ОбъектФайла.Владелец = Владелец
                Вложения.Добавить(ОбъектФайла)
            ;
        ;
     ;
     возврат Вложения
;

@ВПроекте
метод ВариантПодписанияДокументаИзJson(ДанныеJson: ЭлектронныйДокументJson_V2_1?): ВариантыПодписанияДокументов
    если ДанныеJson != Неопределено и ДанныеJson.signatureRequirements != Неопределено
        выбор ДанныеJson.signatureRequirements
        когда ВариантыПодписанияДокументовJson.notRequired
            возврат ВариантыПодписанияДокументов.НеТребуется
        когда ВариантыПодписанияДокументовJson.regularSignature
            возврат ВариантыПодписанияДокументов.НеобходимаСобственноручнаяПодпись
        ;
    ; 
    возврат ВариантыПодписанияДокументов.Требуется
;

метод ФайлВJson(ДанныеФайла: Файлы.ДанныеФайла, Сервисы: ВебApiСервер.СервисыУпаковкиJson): МенеджерФайлов.ДанныеФайлаJson

    знч ДанныеJson = новый МенеджерФайлов.ДанныеФайлаJson(
        Сервисы.ПолучитьИдФайла(ДанныеФайла),
        ДанныеФайла.Наименование,
        ДанныеФайла.ХешДанных)
    ДанныеJson.extension = ДанныеФайла.Расширение
    если ДанныеФайла.Размер > 0
        ДанныеJson.size = ДанныеФайла.Размер
    ;
    если не ДанныеФайла.ИдентификаторЭлектронногоДокумента.Пусто()
        ДанныеJson.electronicDocumentID = ДанныеФайла.ИдентификаторЭлектронногоДокумента
    ;
    возврат ДанныеJson
;

//КонецОбласти

@ВПроекте
@НаКлиенте
метод СсылкаНаСкачивание(Файл: Файлы.Ссылка): Строка
    возврат СсылкаНаСкачивание(СтандартноеПриложение.ПараметрыСеанса().АдресПриложения, Файл)
;

@ВПроекте
@НаСервере @НаКлиенте
метод СсылкаНаСкачивание(АдресПриложения: Строка, Файл: Файлы.Ссылка): Строка
    возврат "%АдресПриложения/api/attachments/%{Файл.Ид.ВСтроку()}"
;

//КонецОбласти

//Область СлужебныеПроцедурыИФункции

@ВПроекте
структура ДанныеФайла
    обз пер Ссылка: Файлы.Ссылка
    обз пер Наименование: Строка
    обз пер Расширение: Строка 
    обз пер Размер: Число
    обз пер ДатаСоздания: Момент?
    обз пер ХешДанных: Строка
    обз пер Хранилище: ДвоичныйОбъект.Ссылка?
    обз пер ВидФайла: ВидыФайла
    обз пер ИдентификаторЭлектронногоДокумента: Строка
;

@ВПроекте
метод ФайлыВладельцев(ВладельцыФайлов: Массив<ВладелецФайлы.Ссылка>, ВидыФайлов: Массив<ВидыФайла>? = Неопределено,
    ИдентификаторЭлектронногоДокумента: Строка = ""): Соответствие<ВладелецФайлы.Ссылка, Массив<ДанныеФайла>>
    
    пер ФайлыПоВладельцам = новый Соответствие<ВладелецФайлы.Ссылка, Массив<ДанныеФайла>>()
    знч Запрос = Запрос{
        Выбрать
            Владелец,
            Ссылка, 
            Наименование, 
            Расширение, 
            Размер,
            ДатаСоздания,
            ХешДанных,
            Хранилище,
            ВидФайла,
            ИдентификаторЭлектронногоДокумента
        Из 
            Файлы 
        Где 
            Владелец В (%ВладельцыФайлов)
            И (%{ВидыФайлов == Неопределено}
                Или ВидФайла В (%ВидыФайлов))
            И (%{ИдентификаторЭлектронногоДокумента.Пусто()}
                Или ИдентификаторЭлектронногоДокумента == (%ИдентификаторЭлектронногоДокумента))
        Упорядочить По
            Владелец}
    
    для СтрокаРезультата из Запрос.Выполнить()
        пер ФайлыПоВладельцу = ФайлыПоВладельцам.ПолучитьИлиУмолчание(СтрокаРезультата.Владелец, новый Массив<ДанныеФайла>())
        знч ДанныеФайла = новый ДанныеФайла(
                Ссылка = СтрокаРезультата.Ссылка, 
                Наименование = СтрокаРезультата.Наименование, 
                Расширение = СтрокаРезультата.Расширение, 
                Размер = СтрокаРезультата.Размер,
                ДатаСоздания = СтрокаРезультата.ДатаСоздания, 
                ХешДанных = СтрокаРезультата.ХешДанных, 
                Хранилище = СтрокаРезультата.Хранилище, 
                ВидФайла = СтрокаРезультата.ВидФайла, 
                ИдентификаторЭлектронногоДокумента = СтрокаРезультата.ИдентификаторЭлектронногоДокумента)
        ФайлыПоВладельцу.Добавить(ДанныеФайла)
        ФайлыПоВладельцам.Вставить(СтрокаРезультата.Владелец, ФайлыПоВладельцу)
    ;
    возврат ФайлыПоВладельцам
;

@ВПроекте
метод ФайлыПоВладельцу(
        ВладелецФайлов: ВладелецФайлы.Ссылка, 
        ВидыФайлов: Массив<ВидыФайла>? = Неопределено,
        ИдентификаторЭлектронногоДокумента: Строка = ""): ЧитаемыйМассив<ДанныеФайла>
        
    знч ФайлыПоВладельцам = ФайлыВладельцев([ВладелецФайлов], ВидыФайлов, ИдентификаторЭлектронногоДокумента)
    знч ФайлыПоВладельцу = ФайлыПоВладельцам.ПолучитьИлиУмолчание(ВладелецФайлов, новый Массив<ДанныеФайла>())
    возврат ФайлыПоВладельцу
;

метод ДанныеФайла(Файл: Файлы.Ссылка): ДанныеФайла
    знч Запрос = Запрос{
        Выбрать
            Ссылка, 
            Наименование, 
            Расширение, 
            Размер,
            ДатаСоздания,
            ХешДанных,
            Хранилище,
            ВидФайла,
            ИдентификаторЭлектронногоДокумента
         Из 
            Файлы 
         Где 
            Ссылка == %Файл}
    пер ДанныеФайла: ДанныеФайла?
    исп РезультатЗапроса = Запрос.Выполнить()
    для РезультатЗапросаСтрока из РезультатЗапроса
        ДанныеФайла = новый ДанныеФайла(
            Ссылка = РезультатЗапросаСтрока.Ссылка, 
            Наименование = РезультатЗапросаСтрока.Наименование,
            Расширение = РезультатЗапросаСтрока.Расширение,
            Размер = РезультатЗапросаСтрока.Размер,
            ДатаСоздания = РезультатЗапросаСтрока.ДатаСоздания,
            ХешДанных = РезультатЗапросаСтрока.ХешДанных,
            Хранилище = РезультатЗапросаСтрока.Хранилище,
            ВидФайла = РезультатЗапросаСтрока.ВидФайла,
            ИдентификаторЭлектронногоДокумента = РезультатЗапросаСтрока.ИдентификаторЭлектронногоДокумента)
        прервать
    ;
    возврат ДанныеФайла
;

//КонецОбласти

@ВПроекте
метод СведенияОФайле(ПрисоединенныйФайл: Файлы.Ссылка?): УниверсальныеМеханизмы.СведенияОФайле
    пер ДанныеФайла = новый УниверсальныеМеханизмы.СведенияОФайле()
    знч Запрос = Запрос{
        Выбрать
            Наименование,
            Расширение,
            Размер,
            Хранилище,
            ВидФайла,
            ИдентификаторЭлектронногоДокумента,
            ХешДанных
         Из
            Файлы 
         Где
            Ссылка == %ПрисоединенныйФайл}
    исп Результат = Запрос.Выполнить() 
    знч РезультатСтроки = новый ЧитаемыйМассив(Результат)
    если (не РезультатСтроки.Пусто())
        ДанныеФайла.Наименование = РезультатСтроки[0].Наименование        
        ДанныеФайла.Расширение = РезультатСтроки[0].Расширение        
        ДанныеФайла.Размер = РезультатСтроки[0].Размер        
        ДанныеФайла.Хранилище = РезультатСтроки[0].Хранилище        
        ДанныеФайла.ВидФайла = РезультатСтроки[0].ВидФайла
        ДанныеФайла.ИдентификаторЭлектронногоДокумента = РезультатСтроки[0].ИдентификаторЭлектронногоДокумента
        ДанныеФайла.ХешДанных = РезультатСтроки[0].ХешДанных
    ;
    ДанныеФайла.АдресКартинкиРасширения =
        ПрисоединенныеФайлыМенеджер.АдресКартинкиРасширения(ДанныеФайла.Расширение)
    возврат ДанныеФайла
;

конст ДЛИНА_ИМЕНИ_ФАЙЛА_БЕЗ_РАСШИРЕНИЯ = 146

@ВПроекте
метод НаименованиеФайлаИзПредставления(Представление: Строка): Строка
    пер НаименованиеФайла = ""
    знч ПредставлениеСДопустимымиСимволами =
        Строки.Соединить(Представление.Сократить().Разделить("\"/\\[]:;|=?*<>"), "").Сократить()
    для ИндексСимвола = 0 по ПредставлениеСДопустимымиСимволами.Длина() - 1
        знч СимволИмени = ПредставлениеСДопустимымиСимволами.Символ(ИндексСимвола)
		если СимволИмени.ТолькоБуквыИлиЦифры()
			или СимволИмени == " "
			или СимволИмени == "_"
			
			НаименованиеФайла = "%НаименованиеФайла%СимволИмени"
		;
    ;
    НаименованиеФайла = НаименованиеФайла.Сократить().Заменить(" ", "_")
    пока НаименованиеФайла.Содержит("__")
        НаименованиеФайла = НаименованиеФайла.Заменить("__", "_")
    ;
    если НаименованиеФайла.Длина() > ДЛИНА_ИМЕНИ_ФАЙЛА_БЕЗ_РАСШИРЕНИЯ
        НаименованиеФайла = МенеджерСтрок.ПодстрокаСНачала(НаименованиеФайла, ДЛИНА_ИМЕНИ_ФАЙЛА_БЕЗ_РАСШИРЕНИЯ).СократитьСКонца()
    ;
    если НаименованиеФайла.ЗаканчиваетсяНа("_")
        НаименованиеФайла = НаименованиеФайла.ПодстрокаСНачала(НаименованиеФайла.Длина() - 1)
    ;
    возврат НаименованиеФайла
;

@ВПроекте
метод ИзмененЭлектронныйДокумент(ВладелецФайлов: ВладелецФайлы.Ссылка, ЭлектронныйДокумент: Файлы.Объект): Булево
    возврат СведенияОФайле(ЭлектронныйДокументОбъекта(ВладелецФайлов)).ХешДанных != ЭлектронныйДокумент.ХешДанных
;

@ВПроекте
метод ЭлектронныеДокументыОбъекта(ОбъектСсылка: ВладелецФайлы.Ссылка, ТолькоСПредставлениями: Булево = Ложь): Соответствие<Строка, ПрисоединенныеФайлыКлиентСервер.ЭлектронныйДокумент>
    пер ФайлыПредставлений = новый Соответствие<Строка, ПрисоединенныеФайлыКлиентСервер.ЭлектронныйДокумент>()
    знч ВсеФайлыОбъекта = ПрисоединенныеФайлыМенеджер.ФайлыОбъекта(ОбъектСсылка)
    для ДанныеФайла из ВсеФайлыОбъекта
        если ДанныеФайла.ВидФайла == ВидыФайла.ЭлектронныйДокумент
            или ДанныеФайла.ВидФайла == ВидыФайла.ДополнительноеПредставлениеЭлектронногоДокумента
            или  ДанныеФайла.ВидФайла == ВидыФайла.ТабличныйДокументОригинала
            
            пер ФайлыИдентификатора: ПрисоединенныеФайлыКлиентСервер.ЭлектронныйДокумент?
            если ФайлыПредставлений.СодержитКлюч(ДанныеФайла.ИдентификаторЭлектронногоДокумента)
                ФайлыИдентификатора = ФайлыПредставлений.Получить(ДанныеФайла.ИдентификаторЭлектронногоДокумента)
            иначе
                ФайлыИдентификатора = новый ПрисоединенныеФайлыКлиентСервер.ЭлектронныйДокумент()
                ФайлыИдентификатора.Представления = новый Массив<ПрисоединенныйФайл>()
                ФайлыПредставлений.Вставить(ДанныеФайла.ИдентификаторЭлектронногоДокумента, ФайлыИдентификатора)
            ;
            если ДанныеФайла.ВидФайла == ВидыФайла.ЭлектронныйДокумент
                ФайлыИдентификатора.Оригинал = ДанныеФайла
            иначе если ДанныеФайла.ВидФайла == ВидыФайла.ТабличныйДокументОригинала
                ФайлыИдентификатора.ТабличныйДокументОригинала = ДанныеФайла
            иначе
                ФайлыИдентификатора.Представления.Добавить(ДанныеФайла)
            ;
        ;
    ;
    если ТолькоСПредставлениями
        пер ИдентификаторыКУдалению = новый Массив<Строка>()
        для ДанныеИдентификатора из ФайлыПредставлений
            если ДанныеИдентификатора.Значение.Представления.Пусто()
                и не ЭтоРасширениеФайлаЧеловекоЧитаемогоПредставления(ДанныеИдентификатора.Значение.Оригинал.Расширение)
                
                ИдентификаторыКУдалению.Добавить(ДанныеИдентификатора.Ключ)
            иначе
                пер ПредставленияКУдалению = новый Массив<ПрисоединенныйФайл>()
                для ДанныеПредставления из ДанныеИдентификатора.Значение.Представления
                    если не ЭтоРасширениеФайлаЧеловекоЧитаемогоПредставления(ДанныеПредставления.Расширение)
                        ПредставленияКУдалению.Добавить(ДанныеПредставления)
                    ;
                ;
                если ПредставленияКУдалению.Размер() == ДанныеИдентификатора.Значение.Представления.Размер()
                    ИдентификаторыКУдалению.Добавить(ДанныеИдентификатора.Ключ)
                иначе
                    для УдаляемоеПредставление из ПредставленияКУдалению
                        ДанныеИдентификатора.Значение.Представления.Удалить(УдаляемоеПредставление)
                    ;
                ;
            ;
        ;
        для УдаляемыйИдентификатор из ИдентификаторыКУдалению
            ФайлыПредставлений.Удалить(УдаляемыйИдентификатор)
        ;
    ;
    
    возврат ФайлыПредставлений
;

метод ЭтоРасширениеФайлаЧеловекоЧитаемогоПредставления(Расширение: Строка): Булево
    возврат РасширенияФайловЧеловекоЧитаемыхПредставлений().Содержит(Расширение.ВВерхнийРегистр())
;

метод РасширенияФайловЧеловекоЧитаемыхПредставлений(): Массив<Строка>
    возврат ["TXT", "HTML", "PDF"]
;

@ВПроекте
метод СодержимоеТекстовогоФайла(Файл: Файлы.Ссылка): Строка
    возврат новый Строка(СодержимоеФайла(Файл))
;

@ВПроекте
метод СодержимоеФайла(Файл: Файлы.Ссылка): Байты
    возврат ДвоичныеДанныеФайла(Файл).ПолучитьБайты()
;

@ВПроекте
метод ДобавитьИзображениеВладельца(Изображение: ДвоичныйОбъект.Ссылка, Владелец: ВладелецФайлы.Ссылка, 
        Настройки: МенеджерФайлов.ОбработкаИзображения): Файлы.Ссылка    
    знч ПодготовленноеИзображение = МенеджерФайлов.ОбработатьИзображение(Изображение.Загрузить(), Настройки)
    пер ФайлОбъект = Файлы.НовыйФайл(ПодготовленноеИзображение, ВидыФайла.Вложение)
    ФайлОбъект.Владелец = Владелец
    ФайлОбъект.Записать()
    возврат ФайлОбъект.Ссылка
;

@ВПроекте
метод ЗаписатьИзображениеВладельца(ФайлИзображения: Файлы.Ссылка, Изображение: ДвоичныйОбъект.Ссылка,
        Настройки: МенеджерФайлов.ОбработкаИзображения)    
    знч ПодготовленноеИзображение = МенеджерФайлов.ОбработатьИзображение(Изображение.Загрузить(), Настройки)
    знч ФайлОбъект = ФайлИзображения.ЗагрузитьОбъект()
    Файлы.ПоместитьДанныеВФайл(ФайлОбъект, ПодготовленноеИзображение)
    ФайлОбъект.Записать()
;
