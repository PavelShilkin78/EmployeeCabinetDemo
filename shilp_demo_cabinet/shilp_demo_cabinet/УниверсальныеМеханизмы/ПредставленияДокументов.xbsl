импорт ОбщиеСтандартные
импорт УниверсальныеМеханизмы
импорт Компания::Согласования
импорт УниверсальныеМеханизмы::ШаблоныДокументов
импорт ФизическиеЛица
импорт Криптография
импорт КриптографияСтандартные
импорт СтандартноеПриложение

@ВПодсистеме
конст МИНИМАЛЬНАЯ_ШИРИНА_ЗАЯВЛЕНИЯ: Число = 440

@ВПроекте
@НаСервере
метод ДанныеПредставленияДокумента(ДанныеДокумента: ЧитаемоеСоответствие<Строка, Объект?>): Соответствие<Строка, Объект?>
    пер ПоставляемыеДанные = новый Соответствие<Строка, Объект?>()
    для СвойствоДокумента из ДанныеДокумента
        если СвойствоДокумента.Ключ != "ИдентификаторыЭлектронныхДокументов" 
            ПоставляемыеДанные.Вставить("ДанныеДокумента%{СвойствоДокумента.Ключ}", СвойствоДокумента.Значение)
            если СвойствоДокумента.Ключ == "ФизическоеЛицо" 
                ПоставляемыеДанные.Вставить("ФизическоеЛицо", СвойствоДокумента.Значение как ФизическиеЛица.Ссылка)
            ;
        ;
    ;
    возврат ПоставляемыеДанные
;

@ВПроекте
@НаСервере
метод СформироватьПредставленияДокумента(ДокументСсылка: Справочник.Ссылка, ФормироватьОригинал: Булево)
    пер ДанныеДокумента = ШаблоныДокументовМенеджер.ДанныеШаблонаДокумента(ДокументСсылка)
    ОбновитьФайлыПредставленийДокумента(ДокументСсылка, ФормироватьОригинал, ДанныеДокумента)
;

@НаСервере
метод ОбновитьФайлыПредставленийДокумента(
        ДокументСсылка: Справочник.Ссылка, 
        ФормироватьОригинал: Булево,
        ДанныеДокумента: ШаблоныДокументовМенеджер.ДанныеДляШаблонаПечатнойФормы): Соответствие<Строка, ПрисоединенныеФайлыКлиентСервер.ЭлектронныйДокумент>
    
    пер СогласованияИдентификаторов: Соответствие<Строка, Массив<Согласования.ДанныеПодписиДокумента>>
    если ФормироватьОригинал
        МенеджерСущности.УдалитьПодчиненныеОбъекты(ДокументСсылка, Тип<СогласованияДокументов>, "Документ")
        СогласованияИдентификаторов = новый Соответствие<Строка, Массив<Согласования.ДанныеПодписиДокумента>>()
    иначе
        СогласованияИдентификаторов = СогласованияИдентификаторовЭлектронногоДокумента(ДокументСсылка)
    ;
    пер ФайлыПредставлений = Файлы.ЭлектронныеДокументыОбъекта(ДокументСсылка как ВладелецФайлы.Ссылка)
    пер ИдентификаторыФайловДокумента = новый Массив<Строка>()
    знч ИменаФайловСодержатИдентификаторы = ДанныеДокумента.ДанныеОбъекта.Размер() > 1
    для ОписаниеДанныхИдентификатора из ДанныеДокумента.ДанныеОбъекта
        знч ДанныеИдентификатора = ОписаниеДанныхИдентификатора.Значение
        ИдентификаторыФайловДокумента.Добавить(ДанныеИдентификатора.ИдентификаторЭлектронногоДокумента)
        пер ФайлыИдентификатора: ПрисоединенныеФайлыКлиентСервер.ЭлектронныйДокумент
        если ФайлыПредставлений.СодержитКлюч(ДанныеИдентификатора.ИдентификаторЭлектронногоДокумента)
            ФайлыИдентификатора = ФайлыПредставлений.Получить(ДанныеИдентификатора.ИдентификаторЭлектронногоДокумента)
        иначе
            ФайлыИдентификатора = новый ПрисоединенныеФайлыКлиентСервер.ЭлектронныйДокумент()
            ФайлыПредставлений.Вставить(ДанныеИдентификатора.ИдентификаторЭлектронногоДокумента, ФайлыИдентификатора)
        ;
        пер ПредставлениеДокумента: Строка = ДокументСсылка.Представление()
        если ДанныеИдентификатора.Данные.СодержитКлюч("ДанныеДокументаФизическоеЛицо")
            знч ФизическоеЛицо = ДанныеИдентификатора.Данные.Получить("ДанныеДокументаФизическоеЛицо")
            если ФизическоеЛицо != Неопределено
                если ПредставлениеДокумента.Содержит(ФизическоеЛицо.Представление())
                    знч ЗапрашиваемыеДанные: ФизЛица.ЗапрашиваемыеДанныеФизическихЛиц
                    ЗапрашиваемыеДанные.ЛичныеДанные = Истина
                    знч ДанныеФизическогоЛица = ФизЛица.ДанныеФизическогоЛица(ФизическоеЛицо как ФизическиеЛица.Ссылка, ЗапрашиваемыеДанные)
                    знч ФамилияИИнициалы: Строка = ДанныеФизическогоЛица.ЛичныеДанные.ФИО.ПредставлениеИмени(ФизЛица.ВариантПредставленияИмени.ФамилияИОРаздельно)
                    ПредставлениеДокумента = ПредставлениеДокумента.Заменить(ФизическоеЛицо.Представление(), ФамилияИИнициалы)
                ;
            ;
        ;
        пер ДополнениеНаименования = ""
        если ИменаФайловСодержатИдентификаторы
            если ДанныеИдентификатора.Данные.СодержитКлюч("Организация")
                и ДанныеИдентификатора.Данные["Организация"] != Неопределено
                ДополнениеНаименования = ДанныеИдентификатора.Данные["Организация"].Представление()
            ;
        ;
        пер Оригинал: Строка|ТабличныйДокумент?
        если ФормироватьОригинал или ФайлыИдентификатора.Оригинал == Неопределено
            Оригинал = ОригиналДокументаВMXL(ДанныеДокумента, ДанныеИдентификатора.ИдентификаторЭлектронногоДокумента)
            СогласованияИдентификаторов.Вставить(ДанныеИдентификатора.ИдентификаторЭлектронногоДокумента,
                новый Массив<Согласования.ДанныеПодписиДокумента>())
            пер ФайлОбъект: Файлы.Объект?
            если ФайлыИдентификатора.ТабличныйДокументОригинала == Неопределено
                ФайлОбъект = Файлы.НовыйФайл(ОбъектноеХранилище.ЗагрузитьИзБайт((Оригинал как ТабличныйДокумент).ВБайты()),
                    ВидыФайла.ТабличныйДокументОригинала, ДанныеИдентификатора.ИдентификаторЭлектронногоДокумента)
                ФайлОбъект.Наименование = НаименованиеОригинала(ПредставлениеДокумента, ДополнениеНаименования)
                ФайлОбъект.Владелец = ДокументСсылка как неизвестно
                ФайлОбъект.Расширение = "mxl"
            иначе
                ФайлОбъект = ФайлыИдентификатора.ТабличныйДокументОригинала!.Ссылка!.ЗагрузитьОбъект()
                Файлы.ПоместитьДанныеВФайл(ФайлОбъект, ОбъектноеХранилище.ЗагрузитьИзБайт((Оригинал как ТабличныйДокумент).ВБайты()),
                    ДанныеИдентификатора.ИдентификаторЭлектронногоДокумента)
            ;
            ФайлОбъект.Записать()
            если ФайлыИдентификатора.ТабличныйДокументОригинала == Неопределено
                ФайлыИдентификатора.ТабличныйДокументОригинала = ПрисоединенныеФайлыМенеджер.ПрисоединенныйФайл(ФайлОбъект)
            ;
            
            если ФайлыИдентификатора.Оригинал == Неопределено
                ФайлОбъект = Файлы.НовыйФайл(
                    ОбъектноеХранилище.ЗагрузитьИзБайт((Оригинал как ТабличныйДокумент).ЭкспортироватьВБайты(ФорматЭкспортаТабличногоДокумента.PdfA1)),
                    ВидыФайла.ЭлектронныйДокумент, 
                    ДанныеИдентификатора.ИдентификаторЭлектронногоДокумента)
                ФайлОбъект.Наименование = НаименованиеОригинала(ПредставлениеДокумента, ДополнениеНаименования)
                ФайлОбъект.Владелец = ДокументСсылка как неизвестно
            иначе
                ФайлОбъект = ФайлыИдентификатора.Оригинал!.Ссылка!.ЗагрузитьОбъект()
                Файлы.ПоместитьДанныеВФайл(ФайлОбъект, ОбъектноеХранилище.ЗагрузитьИзБайт(
                    (Оригинал как ТабличныйДокумент).ЭкспортироватьВБайты(ФорматЭкспортаТабличногоДокумента.PdfA1)),
                    ДанныеИдентификатора.ИдентификаторЭлектронногоДокумента)
            ;
            ФайлОбъект.Расширение = "pdf"
            ФайлОбъект.Записать()
            если ФайлыИдентификатора.Оригинал == Неопределено
                ФайлыИдентификатора.Оригинал = ПрисоединенныеФайлыМенеджер.ПрисоединенныйФайл(ФайлОбъект)
            иначе
                ФайлыИдентификатора.Оригинал.Расширение = "pdf"
            ;
        иначе
            если ФайлыИдентификатора.Оригинал.Расширение == "pdf"
                Оригинал = ТабличныйДокумент.Прочитать(ФайлыИдентификатора.ТабличныйДокументОригинала.Хранилище.Загрузить().ПолучитьБайты())
            иначе
                Оригинал = новый Строка(ФайлыИдентификатора.Оригинал.Хранилище.Загрузить().ПолучитьБайты())
            ;
        ;
        если СогласованияИдентификаторов.СодержитКлюч(ДанныеИдентификатора.ИдентификаторЭлектронногоДокумента)
            пер ДанныеПодписейИдентификатора = СогласованияИдентификаторов.Получить(ДанныеИдентификатора.ИдентификаторЭлектронногоДокумента)
            пер ОригиналСоШтампами: ДвоичныйОбъект?
            пер Расширение = ""
            если ФайлыИдентификатора.Оригинал.Расширение == "pdf"
                ОригиналСоШтампами = ОбъектноеХранилище.ЗагрузитьИзБайт(
                    ОригиналДокументаВMXLСоШтампамиПодписей(
                        Оригинал как ТабличныйДокумент, ДанныеПодписейИдентификатора).ЭкспортироватьВБайты(ФорматЭкспортаТабличногоДокумента.PdfA1))
                Расширение = "pdf"
            иначе
                ОригиналСоШтампами = ОбъектноеХранилище.ЗагрузитьИзСтроки(
                    ОригиналДокументаСоШтампамиПодписей(Оригинал как Строка, ДанныеПодписейИдентификатора))
                Расширение = "html"
            ;
            пер ФайлОбъект: Файлы.Объект?
            если ФайлыИдентификатора.Представления == Неопределено
                или ФайлыИдентификатора.Представления.Пусто()
                
                ФайлОбъект = Файлы.НовыйФайл(ОригиналСоШтампами, ВидыФайла.ДополнительноеПредставлениеЭлектронногоДокумента, ДанныеИдентификатора.ИдентификаторЭлектронногоДокумента)
                ФайлОбъект.Наименование = НаименованиеПредставления(ПредставлениеДокумента, ДополнениеНаименования)
                ФайлОбъект.Владелец = ДокументСсылка как неизвестно
                ФайлОбъект.Расширение = Расширение
            иначе
                ФайлОбъект = ФайлыИдентификатора.Представления![0].Ссылка!.ЗагрузитьОбъект()
                Файлы.ПоместитьДанныеВФайл(ФайлОбъект, ОригиналСоШтампами, ДанныеИдентификатора.ИдентификаторЭлектронногоДокумента)
            ;
            ФайлОбъект.Записать()
            если ФайлыИдентификатора.Представления == Неопределено
                или ФайлыИдентификатора.Представления.Пусто()
                
                если ФайлыИдентификатора.Представления == Неопределено
                    ФайлыИдентификатора.Представления = новый Массив<ПрисоединенныйФайл>()
                ;
                ФайлыИдентификатора.Представления.Добавить(
                    ПрисоединенныеФайлыМенеджер.ПрисоединенныйФайл(ФайлОбъект))
            ;
        ;
    ;
    пер УдаляемыеИдентификаторы = новый Массив<Строка>()
    для ФайлыИдентификатора из ФайлыПредставлений
        если не ИдентификаторыФайловДокумента.Содержит(ФайлыИдентификатора.Ключ)
            Файлы.УдалитьФайл(ФайлыИдентификатора.Значение.Оригинал.Ссылка)
            для ФайлПредставления из ФайлыИдентификатора.Значение.Представления
                Файлы.УдалитьФайл(ФайлПредставления.Ссылка)
            ;
            УдаляемыеИдентификаторы.Добавить(ФайлыИдентификатора.Ключ)
        ;
    ;
    для УдаляемыйИднтификатор из УдаляемыеИдентификаторы
        ФайлыПредставлений.Удалить(УдаляемыйИднтификатор)
    ;
    возврат ФайлыПредставлений
;

@НаСервере
метод СогласованияИдентификаторовЭлектронногоДокумента(ДокументСсылка: Объект): Соответствие<Строка, Массив<Согласования.ДанныеПодписиДокумента>>
    пер Согласования = СогласованияДокументов.ДанныеПодписейДокумента(ДокументСсылка)
    пер СогласованияИдентификаторов = новый Соответствие<Строка, Массив<Согласования.ДанныеПодписиДокумента>>()
    для Согласование из Согласования
        пер ДанныеПодписейИдентификатора: Массив<Согласования.ДанныеПодписиДокумента>
        если СогласованияИдентификаторов.СодержитКлюч(Согласование.ИдентификаторЭлектронногоДокумента)
            ДанныеПодписейИдентификатора = СогласованияИдентификаторов.Получить(Согласование.ИдентификаторЭлектронногоДокумента)
        иначе
            ДанныеПодписейИдентификатора = новый Массив<Согласования.ДанныеПодписиДокумента>()
            СогласованияИдентификаторов.Вставить(Согласование.ИдентификаторЭлектронногоДокумента, ДанныеПодписейИдентификатора)
        ;
        ДанныеПодписейИдентификатора.Добавить(Согласование)
    ;
    возврат СогласованияИдентификаторов
;

@НаСервере
метод НаименованиеОригинала(ПредставлениеДокумента: Строка, ДополнениеНаименования: Строка): Строка
    если ДополнениеНаименования.Пусто()
        возврат Файлы.НаименованиеФайлаИзПредставления(ПредставлениеДокумента)
    ;
    пер ПредставлениеОбъекта = "%ПредставлениеДокумента (%ДополнениеНаименования)"
    возврат Файлы.НаименованиеФайлаИзПредставления(ПредставлениеОбъекта)
;

@НаСервере
метод НаименованиеПредставления(ПредставлениеДокумента: Строка, ДополнениеНаименования: Строка): Строка
    пер ПредставлениеОбъекта = "%{НаименованиеОригинала(ПредставлениеДокумента, ДополнениеНаименования)}_для_печати"
    возврат Файлы.НаименованиеФайлаИзПредставления(ПредставлениеОбъекта)
;

@НаСервере
метод БланкТекстовогоОригиналаВHtml(БланкОригинала: Строка): Строка
    знч МинимальнаяШирина: Строка = МИНИМАЛЬНАЯ_ШИРИНА_ЗАЯВЛЕНИЯ.ВСтроку()
    знч ШаблонОбертки =
        "<html lang=\"ru\">
        <head>
        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"> 
        </head>
        <body>
        <p>[ТекстБланка]
        </p>
        <table align=center width=1900
        style=
            'margin-top:24pt;border-collapse:collapse;border:none;
            font: 12pt/22px Roboto;
            min-width: %{МинимальнаяШирина}px;max-width: 98%'>
        <tr>
        <td>
        <!-- Место для штампов подписей -->
        </td>
        </tr>
        </table>
        </body>
        </html>"
    пер ПодготовленныйБланкОригинала = БланкОригинала
    ПодготовленныйБланкОригинала = БланкОригинала.Заменить(Символы.НОВАЯ_СТРОКА, "<br/>")
    ПодготовленныйБланкОригинала = ПодготовленныйБланкОригинала.Заменить(" ", "&nbsp;")
    возврат ЗаполнитьПараметры(ШаблонОбертки, {"ТекстБланка": ПодготовленныйБланкОригинала})
;

@НаСервере
метод ОригиналДокументаСоШтампамиПодписей(БланкОригинала: Строка, Подписи: Массив<Согласования.ДанныеПодписиДокумента>): Строка
    пер Оригинал: Строка
    Оригинал = БланкТекстовогоОригиналаВHtml(БланкОригинала)
    если не Подписи.Пусто()
        пер ИндексПервойПодписи = 0
        если Оригинал.Найти("<!-- Место для штампа подписи -->") > 0
            и Подписи[0].Подпись != Неопределено
            
            Оригинал = Оригинал.Заменить("<!-- Место для штампа подписи -->", ШтампПодписи(Подписи[0]))
            ИндексПервойПодписи = 1
        ;
        пер ШтампыПодписей = ""
        пер ПраваяКолонка = ""
        пер ЛеваяКолонка = ""
        пер НомерПоПорядку = 0
        для Индекс = ИндексПервойПодписи по Подписи.Граница() 
            если Подписи[Индекс].Подпись == Неопределено
                продолжить
            ;
            если (НомерПоПорядку / 2).ЦелаяЧасть() == НомерПоПорядку / 2
                и ИндексПервойПодписи == 1
                
                ПраваяКолонка = ПраваяКолонка + ШтампПодписи(Подписи[Индекс])
            иначе
                ЛеваяКолонка = ЛеваяКолонка + ШтампПодписи(Подписи[Индекс])
            ;
            НомерПоПорядку += 1
        ;
        если не ЛеваяКолонка.Пусто()
            или не ПраваяКолонка.Пусто()
            
            ШтампыПодписей = ШаблонШтамповПодписей()
            ШтампыПодписей = ШтампыПодписей.Заменить("<!-- Левая колонка штампов -->", ЛеваяКолонка)
            ШтампыПодписей = ШтампыПодписей.Заменить("<!-- Правая колонка штампов -->", ПраваяКолонка)
        ;
        Оригинал = Оригинал.Заменить("<!-- Место для штампов подписей -->", ШтампыПодписей)
    ;
    возврат Оригинал
;

@НаСервере
метод ШтампПодписи(Подпись: Согласования.ДанныеПодписиДокумента): Строка
    пер ШаблонШтампа = ШаблонШтампаПодписи()
    пер ПараметрыШтампа = СписокПараметров(ШаблонШтампа)
    ЗаполнитьПараметрыПредставления(ПараметрыШтампа, Подпись)
    возврат ЗаполнитьПараметры(ШаблонШтампа, ПараметрыШтампа)
;

@НаСервере
метод ЗаполнитьПараметрыПредставления(ПараметрыШтампа: Соответствие<Строка, Объект?>, Подпись: Согласования.ДанныеПодписиДокумента)
    если Подпись.Подпись == Неопределено
        возврат
    ;
    знч ДанныеПодписи = МенеджерКриптографии.ИнформацияОСертификатеПодписи(Подпись.Подпись.Загрузить())
    если ПараметрыШтампа.СодержитКлюч("ИмяВладельцаСертификата")
        ПараметрыШтампа.Вставить("ИмяВладельцаСертификата",
            КриптографияСтандартные.ПредставлениеСубъекта(ДанныеПодписи))
    ;    
    если ПараметрыШтампа.СодержитКлюч("НомерСертификата")
        ПараметрыШтампа.Вставить("НомерСертификата",
            Криптография.ПредставлениеСерийногоНомера(ДанныеПодписи))
        
    ;    
    если ПараметрыШтампа.СодержитКлюч("ДатыДействияСертификата")
        ПараметрыШтампа.Вставить("ДатыДействияСертификата",
            Криптография.ПредставлениеПериодаДействия(ДанныеПодписи))
    ;    
;

@НаСервере
метод ПодстрокиНужнойДлины(ИсходнаяСтрока: Строка, ДлинаПодстроки: Число): Массив<Строка>
    пер Подстроки = новый Массив<Строка>()
    пер РазбиваемаяСтрока = ИсходнаяСтрока
    пока Истина
        пер Разрыв = ПозицияРазрываСтроки(РазбиваемаяСтрока, ДлинаПодстроки)
        Подстроки.Добавить(РазбиваемаяСтрока.Подстрока(0, Разрыв).СократитьСКонца())
        если Разрыв < РазбиваемаяСтрока.Длина() и РазбиваемаяСтрока.Символ(Разрыв) == Символы.НОВАЯ_СТРОКА
            РазбиваемаяСтрока = РазбиваемаяСтрока.Подстрока(Разрыв + 1)
        иначе
            РазбиваемаяСтрока = РазбиваемаяСтрока.Подстрока(Разрыв)
        ;
        если РазбиваемаяСтрока.Длина() <= ДлинаПодстроки
            если не РазбиваемаяСтрока.Пусто()
                Подстроки.Добавить(РазбиваемаяСтрока)
            ;
            прервать
        ;
    ;
    возврат Подстроки
;

@НаСервере
метод ПозицияРазрываСтроки(СтрокаДокумента: Строка, ШиринаСтроки: Число): Число
    знч РазделителиСлов = [" ", "-"]
    пер ПозицияРазрыва = 0
    если СтрокаДокумента.Длина() <= ШиринаСтроки
        ПозицияРазрыва = СтрокаДокумента.Длина()
    иначе
        знч ПозицияПереводаСтроки = СтрокаДокумента.Найти(Символы.НОВАЯ_СТРОКА)
        если ПозицияПереводаСтроки > -1 и ПозицияПереводаСтроки <= ШиринаСтроки
            возврат ПозицияПереводаСтроки
        ;
        для РазделительСлова из РазделителиСлов
            пер НайденныйРазрыв = СтрокаДокумента.НайтиСКонца(
                РазделительСлова, 0, Мин(ШиринаСтроки, СтрокаДокумента.Длина()))
            если НайденныйРазрыв > 0 и НайденныйРазрыв < ШиринаСтроки и НайденныйРазрыв > ПозицияРазрыва
                ПозицияРазрыва = НайденныйРазрыв + 1
            ;
        ;
        если ПозицияРазрыва == 0
            ПозицияРазрыва = ШиринаСтроки
        ;
    ;
    возврат ПозицияРазрыва
;

@НаСервере
метод ШаблонШтампаПодписи(): Строка
    возврат
        "<table width=285 style='border-collapse:collapse'>
            <tr>
                <td style='border: solid #2E74B6 2pt; border-bottom: none; border-right: none'></td>
                <td style='border: solid #2E74B6 2pt; border-bottom: none; border-left: none'>
                    <p align=center style='padding:0cm 1pt 0cm 1pt; color:#2E74B6; margin:3pt 10pt 3pt 10pt;font: 8pt/14px Roboto'>
                    ДОКУМЕНТ ПОДПИСАН<br>ЭЛЕКТРОННОЙ ПОДПИСЬЮ
                    </p>
                </td>
            </tr>
            <tr>
                <td height=12 style='border: solid #2E74B6 2pt; border-top: none; border-bottom: none; border-right: none'>
                    <p style='padding:0cm 1pt 0cm 1pt; font: 7pt/12px Roboto; color:#2E74B6; margin:1pt 0pt 1pt 0pt'>
                    Сертификат:
                    </p>
                </td>
                <td height=12 style='border: solid #2E74B6 2pt; border-top: none; border-bottom: none; border-left: none'>
                    <p style='padding:0cm 1pt 0cm 1pt; font: 7pt/12px Roboto; color:#2E74B6; margin:1pt 0pt 1pt 0pt'>
                    [НомерСертификата]
                    </p>
                </td>
            </tr>
            <tr>
                <td height=12 style='border: solid #2E74B6 2pt; border-top: none; border-bottom: none; border-right: none'>
                    <p style='padding:0cm 1pt 0cm 1pt; font: 7pt/12px Roboto; color:#2E74B6; margin:1pt 0pt 1pt 0pt'>
                    Владелец:
                    </p>
                </td>
                <td height=12 style='border: solid #2E74B6 2pt; border-top: none; border-bottom: none; border-left: none'>
                    <p style='padding:0cm 1pt 0cm 1pt; font: 7pt/12px Roboto; color:#2E74B6; margin:1pt 0pt 1pt 0pt'>
                    [ИмяВладельцаСертификата]
                    </p>
                </td>
            </tr>
            <tr>
                <td height=12 style='border: solid #2E74B6 2pt; border-top: none; border-right: none'>
                    <p style='padding:0cm 1pt 0cm 1pt; font: 7pt/12px Roboto; color:#2E74B6; margin:1pt 0pt 1pt 0pt'>
                    Действителен:
                    </p>
                </td>
                <td height=12 style='border: solid #2E74B6 2pt; border-top: none; border-left: none'>
                    <p style='padding:0cm 1pt 0cm 1pt; font: 7pt/12px Roboto; color:#2E74B6; margin:1pt 0pt 1pt 0pt'>
                    [ДатыДействияСертификата]
                    </p>
                </td>
            </tr>
        </table>"
;

@НаСервере
метод ШаблонШтамповПодписей(): Строка
    возврат
        "<table>
            <tr>
                <td align='center'>
                    <!-- Левая колонка штампов -->
                </td>
                <td align='center'>
                    <!-- Правая колонка штампов -->
                </td>
            </tr>
        </table>"
;

@НаСервере
метод СписокПараметров(ТелоБланка: Строка): Соответствие<Строка, Объект?>
    пер ПараметрыБланка = новый Соответствие<Строка, Объект?>()
    знч КоличествоПараметров = ТелоБланка.КоличествоВхождений("[")
    пер НачальнаяПозицияПоиска = 0
    для НомерПарамтера = 1 по КоличествоПараметров
        знч НачалоПараметра = ТелоБланка.Найти("[", НачальнаяПозицияПоиска)
        знч КонецПараметра = ТелоБланка.Найти("]", НачалоПараметра)
        если КонецПараметра > НачалоПараметра
            знч Параметр = ТелоБланка.Подстрока(НачалоПараметра + 1, КонецПараметра)
            ПараметрыБланка.Вставить(Параметр, "")
            НачальнаяПозицияПоиска = КонецПараметра + 1
        иначе
            прервать
        ;
    ;
    возврат ПараметрыБланка
;

@НаСервере
метод ЗаполнитьПараметры(ТелоБланка: Строка, Параметры: Соответствие<Строка, Объект?>): Строка
    для Параметр из Параметры
        если Параметр.Значение != Неопределено
            пер ЗначениеПараметра = ""
            если Параметр.Значение это Сущность.Ключ
                ЗначениеПараметра = МенеджерСущности.ПредставлениеСсылки(Параметр.Значение как Сущность.Ключ)
            иначе если Параметр.Значение это Перечисление
                ЗначениеПараметра = Параметр.Значение.Представление()
            иначе если Параметр.Значение это Дата
                ЗначениеПараметра = МенеджерДат.ФорматДаты(Параметр.Значение как Дата)
            иначе
                ЗначениеПараметра = Параметр.Значение.ВСтроку()
            ;
            ТелоБланка = ТелоБланка.Заменить("[" + Параметр.Ключ + "]", ЗначениеПараметра)
        ;
    ;
    возврат ТелоБланка
;

@НаСервере
метод ТекстБезПараметров(ТелоБланка: Строка): Строка
    знч НеУстановленныеПарараметры = СписокПараметров(ТелоБланка)
    для Параметр из НеУстановленныеПарараметры
        ТелоБланка = ТелоБланка.Заменить("[" + Параметр.Ключ + "]", "")
    ;
    возврат ТелоБланка
;

@ВПроекте
@НаСервере  @ДоступноСКлиента
метод ПредставленияДокумента(ДокументСсылка: Справочник.Ссылка, ТекущиеДанные: Соответствие<Строка, Объект?>,
        ДополнительныеПараметры: Соответствие<Строка, Объект>? = Неопределено): Соответствие<Строка, ПрисоединенныеФайлыКлиентСервер.ЭлектронныйДокумент>
    
    пер ДанныеДокумента = ШаблоныДокументовМенеджер.ДанныеШаблонаДокумента(ДокументСсылка, ДополнительныеПараметры)
    для ДанныеВерсии из ДанныеДокумента.ДанныеОбъекта
        для ПолеДанных из ТекущиеДанные
            ДанныеВерсии.Значение.Данные.Вставить(ПолеДанных.Ключ, ПолеДанных.Значение)
        ;
    ;
    для Сервис из ПоставщикШаблонов.ПолучитьСервисы()
        если Сервис.ДополнитьДанныеШаблонаДокумента(ДокументСсылка, ДанныеДокумента.ДанныеОбъекта)
            прервать
        ;
    ;
    возврат ОбновитьФайлыПредставленийДокумента(ДокументСсылка, Истина, ДанныеДокумента)
;

@НаСервере
метод ОригиналДокументаВMXL(ДанныеДокумента: ШаблоныДокументовМенеджер.ДанныеДляШаблонаПечатнойФормы, ИдентификаторЭлектронногоДокумента: Строка): ТабличныйДокумент
    пер ДанныеДляПечати = ДанныеДокумента.ДанныеОбъекта.Получить(ИдентификаторЭлектронногоДокумента)
    пер Шаблон: ТабличныйДокумент?
    попытка
        Шаблон = ТабличныйДокумент.Прочитать(ДанныеДокумента.Шаблон.Загрузить().ПолучитьБайты())
    поймать Ошибка: Исключение
        Журналирование.ЗарегистрироватьОшибку("ПредставленияДокументов.ЧтениеШаблонаДокумента",
                Описание = "Применяется макет документа по умолчанию")
        Шаблон = ТабличныйДокумент.Прочитать(Ресурс{МакетДокументаПоУмолчанию.mxl}.Ссылка.Загрузить().ПолучитьБайты())
    ;
    
    знч ЗначенияПараметров = ЗначенияПараметровДанныхДляПечати(ДанныеДляПечати.Данные)
    для НомерСтроки = 1 по Шаблон.КоличествоСтрок()
        для НомерКолонки = 1 по Шаблон.КоличествоКолонок()
            знч Ячейка = Шаблон.ПолучитьОбласть(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки)
            знч ТекстЯчейки = Ячейка.ПолучитьТекст()
            если не ТекстЯчейки.Пусто() и ТекстЯчейки.Содержит("[")
                Ячейка.УстановитьТекст(ТекстЯчейки, Истина)
            ;
        ;
    ;

    знч ИменаОбластей = ОбластиТабличногоДокумента(Шаблон)
    пер Оригинал = новый ТабличныйДокумент()
    пер ИменаОтластейТабличныхЧастей = ОбластиТабличныхЧастей(Шаблон)
    пер ИмяВыводимойТабличнойЧасти: Строка
    для ИмяОбласти из ИменаОбластей
        если не ИмяВыводимойТабличнойЧасти.Пусто()
            если ЭтоОбластьСтрокиТабличнойЧасти(ИмяОбласти)
                и ИмяВыводимойТабличнойЧасти == ИмяТабличнойЧатстиИзИмениОбласти(ИмяОбласти)
                
                продолжить
            ;
            ИмяВыводимойТабличнойЧасти = ""
        ;
        если ЭтоОбластьСтрокиТабличнойЧасти(ИмяОбласти)
            ИмяВыводимойТабличнойЧасти = ИмяТабличнойЧатстиИзИмениОбласти(ИмяОбласти)
            знч ДанныеТабличнойЧасти = ДанныеДляПечати.Данные.ПолучитьИлиУмолчание(ИмяВыводимойТабличнойЧасти)
            знч ПараметрыТабличнойЧасти = ЗначенияПараметров.ПолучитьИлиУмолчание(ИмяВыводимойТабличнойЧасти)
            если ДанныеТабличнойЧасти != Неопределено и ПараметрыТабличнойЧасти != Неопределено
                для ДанныеСтроки из ДанныеТабличнойЧасти как Массив<ЧитаемоеСоответствие<Строка, Объект?>>
                    знч ДанныеСтрокиСНомером = новый Соответствие<Строка, Объект?>(ДанныеДляПечати.Данные) 
                    знч ПараметрыСтрокиСНомером = новый Соответствие<Строка, Объект?>(ЗначенияПараметров) 
                    ДанныеСтрокиСНомером.ВставитьВсе(ДанныеСтроки)
                    ПараметрыСтрокиСНомером.ВставитьВсе(
                        (ПараметрыТабличнойЧасти как Массив<ЧитаемоеСоответствие<Строка, Объект?>>)[(ДанныеТабличнойЧасти как Массив<ЧитаемоеСоответствие<Строка, Объект?>>).Найти(ДанныеСтроки)])
                    для ИмяОбластиСтроки из ИменаОтластейТабличныхЧастей.Получить(ИмяВыводимойТабличнойЧасти)
                        если ДанныеДокумента.УсловияВывода.СодержитКлюч(ИмяОбластиСтроки)
                            если не ШаблоныДокументовМенеджер.ВыполняютсяУсловияВывода(
                                ДанныеДокумента.УсловияВывода.Получить(ИмяОбластиСтроки), ДанныеСтрокиСНомером, ДанныеДокумента.ЗначенияПеречислений)
                                продолжить
                            ;
                        ;
                        ВывестиОбластьВТабличныйДокумент(Оригинал, Шаблон, ИмяОбластиСтроки, ПараметрыСтрокиСНомером)
                    ;
                ;
            ;
            продолжить
        ;
        если ДанныеДокумента.УсловияВывода.СодержитКлюч(ИмяОбласти)
            если не ШаблоныДокументовМенеджер.ВыполняютсяУсловияВывода(
                ДанныеДокумента.УсловияВывода.Получить(ИмяОбласти), ДанныеДляПечати.Данные, ДанныеДокумента.ЗначенияПеречислений)
                продолжить
            ;
        ;
        ВывестиОбластьВТабличныйДокумент(Оригинал, Шаблон, ИмяОбласти, ЗначенияПараметров)
    ;
    возврат Оригинал
;

@НаСервере
метод ЗначенияПараметровДанныхДляПечати(ДанныеДляПечати: ЧитаемоеСоответствие<Строка, Объект?>): Соответствие<Строка, Объект?>
    пер ЗначенияПараметров = новый Соответствие<Строка, Объект?>()
    для КлючИЗначение из ДанныеДляПечати
        выбор КлючИЗначение.Значение
            когда  это Сущность.Ключ
                ЗначенияПараметров.Вставить(КлючИЗначение.Ключ, МенеджерСущности.ПредставлениеСсылки(КлючИЗначение.Значение как Сущность.Ключ))
            когда это Перечисление
                ЗначенияПараметров.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.Представление())
            когда это Дата
                ЗначенияПараметров.Вставить(КлючИЗначение.Ключ, МенеджерДат.ФорматДаты(КлючИЗначение.Значение как Дата))
                ЗначенияПараметров.Вставить("%{КлючИЗначение.Ключ}ЧастиДатДень", МенеджерДат.ФорматДаты(КлючИЗначение.Значение как Дата, "дд"))
                ЗначенияПараметров.Вставить("%{КлючИЗначение.Ключ}ЧастиДатМесяц", МенеджерДат.ФорматДаты(КлючИЗначение.Значение как Дата, "ММ"))
                ЗначенияПараметров.Вставить("%{КлючИЗначение.Ключ}ЧастиДатГод", МенеджерДат.ФорматДаты(КлючИЗначение.Значение как Дата, "гггг"))
            когда это Соответствие<Строка, Объект?>
                ЗначенияПараметров.Вставить(КлючИЗначение.Ключ, ЗначенияПараметровДанныхДляПечати(КлючИЗначение.Значение как Соответствие<Строка, Объект?>))
            когда это Массив<ЧитаемоеСоответствие<Строка, Объект?>>
                пер КоллекцияПараметров = новый Массив<ЧитаемоеСоответствие<Строка, Объект?>>()
                для ЭлементДанных из КлючИЗначение.Значение как Массив<ЧитаемоеСоответствие<Строка, Объект?>>
                    КоллекцияПараметров.Добавить(ЗначенияПараметровДанныхДляПечати(ЭлементДанных))
                ;
                ЗначенияПараметров.Вставить(КлючИЗначение.Ключ, КоллекцияПараметров)
            иначе
                ЗначенияПараметров.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ВСтроку())
        ;
    ;
    возврат ЗначенияПараметров
;

@НаСервере
метод ОбластиТабличныхЧастей(Макет: ТабличныйДокумент): Соответствие<Строка, Массив<Строка>>
    пер ИменаОбластейТабличныхЧастей = новый Соответствие<Строка, Массив<Строка>>()
    знч ИменаОбластей = ОбластиТабличногоДокумента(Макет)
    пер ОбластиТабличнойЧасти: Массив<Строка>
    для ИмяОбласти из ИменаОбластей
        если ЭтоОбластьСтрокиТабличнойЧасти(ИмяОбласти)
            знч ИмяТабличнойЧасти = ИмяТабличнойЧатстиИзИмениОбласти(ИмяОбласти)
            если ИменаОбластейТабличныхЧастей.СодержитКлюч(ИмяТабличнойЧасти)
                ОбластиТабличнойЧасти = ИменаОбластейТабличныхЧастей.Получить(ИмяТабличнойЧасти)
            иначе
                ОбластиТабличнойЧасти = новый Массив<Строка>()
                ИменаОбластейТабличныхЧастей.Вставить(ИмяТабличнойЧасти, ОбластиТабличнойЧасти)
            ;
            ОбластиТабличнойЧасти.Добавить(ИмяОбласти)
        ;
    ;
    возврат ИменаОбластейТабличныхЧастей
;

@НаСервере
метод ЭтоОбластьСтрокиТабличнойЧасти(ИмяОбласти: Строка): Булево
    если ИмяОбласти.НачинаетсяС("Строка_")
        знч ПодстрокиИмениОбласти = ИмяОбласти.Разделить("_")
        возврат ПодстрокиИмениОбласти.Размер() >= 3
    ;
    возврат Ложь
;

@НаСервере
метод ИмяТабличнойЧатстиИзИмениОбласти(ИмяОбласти: Строка): Строка
    возврат ИмяОбласти.Разделить("_")[1]
;

@НаСервере
метод ВывестиОбластьВТабличныйДокумент(Бланк: ТабличныйДокумент, Макет: ТабличныйДокумент, ИмяОбласти: Строка, Параметры: Соответствие<Строка, Объект?>? = Неопределено)
    знч Область = Макет.ПолучитьОбласть(ИмяОбласти)
    знч ВыводимаяОбласть = Область.ВВыводимуюОбласть()
    если Параметры != Неопределено
        ВыводимаяОбласть.ЗаполнитьПараметры(Параметры)
    ;
    Бланк.Запись.ВывестиВертикально(ВыводимаяОбласть)
;

@НаСервере
метод ОбластиТабличногоДокумента(Бланк: ТабличныйДокумент): Массив<Строка>
    пер ИменаОбластей = новый Массив<Строка>()
    пер НачалоПоиска = 1
    пер ВысотаОбласти = 0
    пока ВысотаОбласти  < 300 
        пер АдресОбласти = "R%НачалоПоиска"
        если ВысотаОбласти > 0
            АдресОбласти = "%АдресОбласти:R%{НачалоПоиска + ВысотаОбласти}"
        ;
        знч ОбластьДокумента = Бланк.ПолучитьОбласть(АдресОбласти)
        если ОбластьДокумента.Имя != АдресОбласти
            ИменаОбластей.Добавить(ОбластьДокумента.Имя)
            НачалоПоиска = НачалоПоиска + ВысотаОбласти + 1
            ВысотаОбласти = 0
        иначе
            ВысотаОбласти += 1
        ;
    ;
    возврат ИменаОбластей
;

@НаСервере
метод ОригиналДокументаВMXLСоШтампамиПодписей(Оригинал: ТабличныйДокумент, Подписи: Массив<Согласования.ДанныеПодписиДокумента>): ТабличныйДокумент
    
    пер ОригиналСоШтампами = новый ТабличныйДокумент()
    ОригиналСоШтампами.Запись.ВывестиВертикально(Оригинал)
    если не Подписи.Пусто()
        пер НомерПоПорядку = 1
        для Индекс = 0 по Подписи.Граница() 
            если Подписи[Индекс].Подпись == Неопределено
                продолжить
            ;
            знч ШтампПодписи = ШтампПодписиВMXL(Подписи[Индекс])
            если  (НомерПоПорядку / 2).ЦелаяЧасть() == НомерПоПорядку / 2
                ОригиналСоШтампами.Запись.ВывестиГоризонтально(ШтампПодписи)
            иначе
                знч ДокументШатмпа = новый ТабличныйДокумент()
                ДокументШатмпа.Запись.ВывестиВертикально(ШтампПодписи)
                если не ОригиналСоШтампами.Запись.ПроверитьВместимостьПоВертикали([ДокументШатмпа])
                    ОригиналСоШтампами.Запись.ВывестиГоризонтальныйРазрывСтраницы()
                ;
                ОригиналСоШтампами.Запись.ВывестиВертикально(ШтампПодписи)
            ;
            НомерПоПорядку += 1
        ;
    ;
    возврат ОригиналСоШтампами
;

структура ПараметрыШтампаПодписи
    обз пер НомерСертификата: Строка
    обз пер ИмяВладельцаСертификата: Строка
    обз пер ДатыДействияСертификата: Строка
;

@НаСервере
метод ШтампПодписиВMXL(Подпись: Согласования.ДанныеПодписиДокумента): ВыводимаяОбластьТабличногоДокумента
    пер ШаблонШтампа = ТабличныйДокумент.Прочитать(Ресурс{МакетШтампаЦифровойПодписи.mxl}.Ссылка.Загрузить().ПолучитьБайты())
    знч Область = ШаблонШтампа.ПолучитьОбласть("Бланк|ШиринаБланка")
    знч ВыводимаяОбласть = Область.ВВыводимуюОбласть()
    
    знч ДанныеПодписи = МенеджерКриптографии.ИнформацияОСертификатеПодписи(Подпись.Подпись.Загрузить())
    пер ПараметрыШтампа = новый ПараметрыШтампаПодписи(
        НомерСертификата = Криптография.ПредставлениеСерийногоНомера(ДанныеПодписи),
        ИмяВладельцаСертификата = КриптографияСтандартные.ПредставлениеСубъекта(ДанныеПодписи),
        ДатыДействияСертификата = Криптография.ПредставлениеПериодаДействия(ДанныеПодписи)
    )
    ВыводимаяОбласть.ЗаполнитьПараметры(ПараметрыШтампа)
    возврат ВыводимаяОбласть
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ТекущиеОбъект(Объект: Соответствие<Строка, Объект?>): Соответствие<Строка, Объект?>
    пер ТекущиеДанные = новый Соответствие<Строка, Объект?>()
    для ПолеДанных из Объект
        ТекущиеДанные.Вставить("ДанныеДокумента%{ПолеДанных.Ключ}", ПолеДанных.Значение)
    ;
    возврат ТекущиеДанные
;

@ВПроекте
@НаСервере
метод ТекстДокументаДополненныйКомментарием(Текст: Строка, Комментарий: Строка): Строка
    если не Комментарий.Пусто()
        Текст = "%Текст %Комментарий"
   ;
   если не Текст.ЗаканчиваетсяНа(".")
        Текст = "%Текст."
   ;
   возврат Текст
;