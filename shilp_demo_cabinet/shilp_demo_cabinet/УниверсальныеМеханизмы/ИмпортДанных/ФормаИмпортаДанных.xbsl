конст НЕЗАПОЛНЕННОЕ_ЗНАЧЕНИЕ = "Незаполненное значение"

@НаСервере @ДоступноСКлиента
статический метод СписокИмпортируемыхДанных(): Массив<ЭлементСпискаЗначений<Ууид>>
    возврат ИмпортируемыеДанные.ПолучитьСервисы().Преобразовать(Сервис -> Сервис.ИдентификаторИмпортируемыхДанных())
;

метод ТипДанныхВыбран(): Булево
    возврат ИдентификаторСервиса != Ууид{}
;

метод СформироватьШаблон(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ИмпортДанных.СформироватьШаблон(ИдентификаторСервиса)
;

метод ЗагрузитьДанные(Источник: ВыборФайлов, Событие: СобытиеПриИзменении<ЧитаемыйМассив<ВыбранныйФайл>>)
    если Событие.НовоеЗначение.Пусто() или не ВопросПодготовитьНовыйИмпорт()
        возврат
    ;
    
    знч ВыбранныйФайл = Событие.НовоеЗначение.Первый()
    
    попытка 
        ДанныеДляИмпорта = ИмпортДанных.ПрочитатьИмпортируемыеДанные(
            Идентификатор = ИдентификаторСервиса,
            Данные = ЗагрузкаФайлов.НачатьЗагрузку(ВыбранныйФайл).ПолучитьРезультат()
        )
        
        ЗаполнитьСопоставляемыеСвойства()
    поймать Ошибка: Исключение
        Диалог.Вопрос(
            Заголовок = "Ошибка при загрузке данных.",
            Текст = Ошибка.Описание,
            Кнопки = [КнопкаДиалога.Ок]
        )
        ДанныеДляИмпорта.Очистить()
        возврат
    ;
    
    Компоненты.Страницы.ТекущаяСтраница = Компоненты.Сопоставление
;

метод ИмпортируемыеДанныеПриИзменении(Источник: ГруппаРадиоКнопок<Ууид>, Событие: СобытиеПриИзменении<Ууид>)
    если Событие.НовоеЗначение != Событие.СтароеЗначение и ВопросПодготовитьНовыйИмпорт()
        ИдентификаторСервиса = Событие.НовоеЗначение
        ЗаполнитьСопоставляемыеСвойства()
    ;
;

метод ВопросПодготовитьНовыйИмпорт(): Булево
    если не ДанныеДляИмпорта.Пусто()
        знч Ответ = Диалог.Вопрос(
            Текст = "Результат предыдущей загрузки будет очищен. Продолжить?",
            Кнопки =[КнопкаДиалога.Да, КнопкаДиалога.Нет]
        )
        если Ответ == КнопкаДиалога.Да
            ПодготовитьНовыйИмпорт()
        иначе
            возврат Ложь
        ;
    ;
    
    возврат Истина
;

метод ПодготовитьНовыйИмпорт()
    ДанныеДляИмпорта.Очистить()
    Компоненты.ЗагруженныеДанные.Источник.Данные.Очистить()
    Ошибки.Данные.Очистить()
    ТекущаяКолонка = Неопределено
    КоличествоЗагруженныхОбъектов = 0
    Компоненты.РезультатУспешно.Содержимое.Очистить()
;

метод СоздатьОбъектПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии, ДанныеСтроки: ФормаИмпортаДанных.СопоставляемыеСвойстваДанные)
;

метод ЗаполнитьСопоставляемыеСвойства()
    ДанныеСопоставляемыхСвойств.Данные.Очистить()
    
    знч СопоставляемыеСвойстваСТипами = ИмпортДанных.СопоставляемыеСвойстваСТипами(
        Идентификатор = ИдентификаторСервиса,
        Данные = ДанныеДляИмпорта
    )
    
    для Свойство из СопоставляемыеСвойстваСТипами
        // Заполним данные для сопоставления
        знч ДанныеИсточник = новый ИсточникДанныхМассив<СопоставляемыеСвойстваДанные>()
        для КлючИЗначение из Свойство.Значение
            если КлючИЗначение.Ключ == ""
                ДанныеИсточник.Данные.Вставить(0, новый СопоставляемыеСвойстваДанные(
                    ИсходноеЗначение = НЕЗАПОЛНЕННОЕ_ЗНАЧЕНИЕ,
                    ТипДанных = {КлючИЗначение.Значение.Ключ, Тип<Неопределено>},
                    НайденноеЗначение = КлючИЗначение.Значение.Значение
                ))
            иначе
                ДанныеИсточник.Данные.Добавить(новый СопоставляемыеСвойстваДанные(
                    ИсходноеЗначение = КлючИЗначение.Ключ,
                    ТипДанных = {КлючИЗначение.Значение.Ключ, Тип<Неопределено>},
                    НайденноеЗначение = КлючИЗначение.Значение.Значение
                ))
            ;
        ;
        
        ДанныеСопоставляемыхСвойств.Данные.Добавить(новый СопоставляемыеСвойстваДанныеСтроки(Свойство.Ключ, ДанныеИсточник))
    ;
;

метод ПроверитьПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    ПроверитьЗаполнение()
;

метод ПроверитьЗаполнение(): Булево
    попытка 
        ДанныеДляИмпорта = ИмпортДанных.ПроверитьЗаполнение(ИдентификаторСервиса, ДанныеДляИмпорта)
        ОбновитьТаблицуЗагруженныхДанных()
    поймать Ошибка: Исключение
        Диалог.Вопрос(
            Заголовок = "Ошибка при проверке данных.",
            Текст = Ошибка.Описание,
            Кнопки = [КнопкаДиалога.Ок]
        )
        возврат Ложь
    ;
    
    возврат Истина
;

метод СохранитьПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    если не ПроверитьЗаполнение()
        возврат
    ;
    
    если ЕстьСтрокиСОшибками()
        Диалог.Вопрос(
            Текст = "В таблице есть строки с ошибками. Исправьте ошибки или удалите эти строки.",
            Кнопки = [КнопкаДиалога.Ок]
        )
        возврат
    ;
    
    если ЕстьСтрокиСПредупреждениями()
        знч Ответ = Диалог.Вопрос(
            Текст = "В таблице есть строки с предупреждениями. Все равно сохранить загруженные объекты?",
            Кнопки = [КнопкаДиалога.Да, КнопкаДиалога.Нет]
        )
        
        если Ответ != КнопкаДиалога.Да
            возврат
        ;
    ;
    
    Компоненты.Страницы.ТекущаяСтраница = Компоненты.Результат
    СобственнаяМодифицированность = Ложь
    
    знч Результат = ИмпортДанных.ИмпортироватьДанные(ИдентификаторСервиса, ДанныеДляИмпорта)
    знч ИмпортированныеОбъекты = ИмпортДанных.РезультатЗагрузки.ЗагруженныеОбъекты(Результат)
    КоличествоЗагруженныхОбъектов = ИмпортированныеОбъекты.Размер()
    
    знч ФормаСписка = ИмпортДанных.ФормаСписка(ИмпортированныеОбъекты)
    если ФормаСписка != Неопределено
        Компоненты.РезультатУспешно.Содержимое.Очистить()
        Компоненты.РезультатУспешно.Содержимое.Добавить(ФормаСписка)
    ;
    
    Ошибки.Данные.Очистить()
    Ошибки.Данные.ДобавитьВсе(ИмпортДанных.РезультатЗагрузки.Ошибки(Результат))
;

метод ЕстьСтрокиСОшибками(): Булево
    для Строка из ДанныеДляИмпорта
        если Строка.Состояние.Статус == ИмпортДанных.СтатусыПроверки.Ошибка
            возврат Истина
        ;
    ;
    
    возврат Ложь
;

метод ЕстьСтрокиСПредупреждениями(): Булево
    для Строка из ДанныеДляИмпорта
        если Строка.Состояние.Статус == ИмпортДанных.СтатусыПроверки.Предупреждение
            возврат Истина
        ;
    ;
    
    возврат Ложь
;

метод ПодготовитьДанныеДляИмпорта()
    для ДанныеСтроки из ДанныеДляИмпорта
        для СопоставляемоеСвойство из ДанныеСопоставляемыхСвойств.Данные
            ЗаполнитьСопоставленноеСвойство(ДанныеСтроки.Данные, СопоставляемоеСвойство)
        ;
    ;
;

метод ЗаполнитьСопоставленноеСвойство(ДанныеОбъекта: Соответствие<Строка, Объект?>, Свойство: СопоставляемыеСвойстваДанныеСтроки)
    знч СопоставленныеЗначения = Свойство.Данные.Данные
    знч ЧастиИмени = Свойство.ИмяСвойства.Разделить(".")
    пер СопоставленноеЗначение: Объект?
    
    если ЧастиИмени.Размер() == 1
        СопоставленноеЗначение = СопоставленноеЗначение(СопоставленныеЗначения, ДанныеОбъекта[ЧастиИмени[0]])
        ДанныеОбъекта[ЧастиИмени[0]] = СопоставленноеЗначение ?? ДанныеОбъекта[ЧастиИмени[0]]
    иначе
        для СтрокаТаблицы из ДанныеОбъекта[ЧастиИмени[0]] как Массив<Соответствие<Строка, Объект?>>
            СопоставленноеЗначение = СопоставленноеЗначение(СопоставленныеЗначения, СтрокаТаблицы[ЧастиИмени[1]])
            СтрокаТаблицы[ЧастиИмени[1]] = СопоставленноеЗначение ?? СтрокаТаблицы[ЧастиИмени[1]]
        ;
    ;
;

метод СопоставленноеЗначение(СопоставленныеЗначения: Массив<СопоставляемыеСвойстваДанные>, ЗначениеСвойства: Объект?): Объект?
    пер Результат: Объект?
    если ЗначениеСвойства это Строка
        для СопоставленноеЗначения из СопоставленныеЗначения
            знч ИсходноеЗначение =
                СопоставленноеЗначения.ИсходноеЗначение == НЕЗАПОЛНЕННОЕ_ЗНАЧЕНИЕ ? "" : СопоставленноеЗначения.ИсходноеЗначение
            если ИсходноеЗначение == ЗначениеСвойства
                Результат = СопоставленноеЗначения.НайденноеЗначение
            ;
        ;
    иначе
        Результат = ЗначениеСвойства
    ;
    
    возврат Результат
;

метод ОбновитьТаблицуЗагруженныхДанных()
    Компоненты.ЗагруженныеДанные.Источник.Данные.Очистить()
    Компоненты.ЗагруженныеДанные.Колонки.Очистить()
    Компоненты.ЗагруженныеДанные.Источник.Данные.ДобавитьВсе(ИмпортДанных.ЗагруженныеДанные.Данные(ДанныеДляИмпорта))
    
    знч Описание = ИмпортДанных.ОписаниеПоИдентификатору(ИдентификаторСервиса)
    
    для Свойство из Описание.ПсевдонимыСвойств(Истина)
        Компоненты.ЗагруженныеДанные.Колонки.Добавить(КолонкаСПолем(Свойство.Ключ, Свойство.Значение))
    ;
    
    для Таблица из Описание.ПсевдонимыТаблиц()
        Компоненты.ЗагруженныеДанные.Колонки.Добавить(КолонкаСТаблицей(Таблица.Ключ, Таблица.Значение))
    ;
    
    Компоненты.ЗагруженныеДанные.Колонки.Добавить(КолонкаСостояния())
;

метод КолонкаСостояния(): ПроизвольнаяКолонкаТаблицы<Объект?>
    возврат новый КолонкаСостояния()
;

метод КолонкаСПолем(ПолеЗначения: Строка, Заголовок: Строка): СтандартнаяКолонкаТаблицы<Объект?>
    возврат новый СтандартнаяКолонкаТаблицы<Объект?>(
        Заголовок = Заголовок,
        ПолеЗначения = ПолеЗначения
    )
;

метод КолонкаСТаблицей(Ссылка: Строка, Заголовок: Строка): ПроизвольнаяКолонкаТаблицы<Объект?>
    возврат новый ПроизвольнаяКолонкаТаблицы<Объект?>(
        Заголовок = Заголовок,
        ПриНаведении = &КолонкаСТаблицейПриНаведении,
        ПриПотереНаведения = &КолонкаСТаблицейПриПотереНаведения,
        Содержимое = новый Надпись(
            ОбрабатыватьНажатие = Ложь,
            Ссылка = Ссылка,
            Значение = "Открыть"
        )
    )
;

метод КолонкаСТаблицейПриНаведении(Источник: Компонент, Событие: СобытиеКомпонента)
    ТекущаяКолонка = ((Источник как ПроизвольнаяКолонкаТаблицы<Объект?>).Содержимое как Надпись).Ссылка как Строка
;

метод КолонкаСТаблицейПриПотереНаведения(Источник: Компонент, Событие: СобытиеКомпонента)
    ТекущаяКолонка = Неопределено
;

метод ЗагруженныеДанныеПриНажатииСтроки(Источник: Список<ИсточникДанныхМассив<Объект?>>, Событие: СобытиеСДанными<СтрокаСписка<Объект?>>)
    если ТекущаяКолонка != Неопределено
        Источник.ВыделитьСтроку(Событие.Данные.ДанныеСтроки)
        ФормаТаблицы(ТекущаяКолонка).ОткрытьВМодальномОкне()
    ;
;

метод ФормаТаблицы(ИмяТаблицы: Строка): Форма
    знч ДанныеСтроки = (Компоненты.ЗагруженныеДанные.ВыделеннаяСтрока как Соответствие<Строка, Объект?>)
    знч Данные = ДанныеСтроки[ИмяТаблицы] как Массив<Соответствие<Строка, Объект?>>
    знч Источник = новый ИсточникДанныхМассив<Объект?>()
    Источник.Данные.ДобавитьВсе(Данные)
    
    знч Описание = ИмпортДанных.ОписаниеПоИдентификатору(ИдентификаторСервиса)
    знч СвойстваТаблицы = Описание.ПсевдонимыСвойствТаблиц(Истина)[Описание.ПсевдонимыТаблиц()[ИмяТаблицы]]
    знч Колонки = <КолонкаТаблицы<Объект?>>[]
    для Свойство из СвойстваТаблицы
        Колонки.Добавить(КолонкаСПолем(Свойство.Ключ, Свойство.Значение))
    ;
    
    возврат новый Форма(
        Содержимое = новый ПроизвольныйШаблонФормы(
            Содержимое = новый Таблица<ИсточникДанныхМассив<Объект?>>(
                Колонки = Колонки,
                Источник = Источник
            )
        )
    )
;

@ВПодсистеме
структура СопоставляемыеСвойстваДанные
    знч ИсходноеЗначение: Строка
    знч ТипДанных: Множество<Тип>
    пер НайденноеЗначение: Объект?
    знч СоздаватьНовый: Булево
;

@ВПодсистеме
структура СопоставляемыеСвойстваДанныеСтроки
    знч ИмяСвойства: Строка
    знч Данные: ИсточникДанныхМассив<СопоставляемыеСвойстваДанные>
;

метод ВсеДанныеСопоставленыПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    Компоненты.Страницы.ТекущаяСтраница = Компоненты.Проверка
    ПодготовитьДанныеДляИмпорта()
    ОбновитьТаблицуЗагруженныхДанных()
;

метод НазадКСопоставлениюПриНажатии(Источник: Кнопка, Событие: СобытиеПриНажатии)
    Компоненты.Страницы.ТекущаяСтраница = Компоненты.Сопоставление
;

метод ЕстьНесопоставленныеЗначения(Данные: Массив<СопоставляемыеСвойстваДанные>): Булево
    для Строка из Данные
        если Строка.НайденноеЗначение == Неопределено
            возврат Истина
        ;
    ;
    
    возврат Ложь
;

метод ИзображениеЕстьНесопоставленныеЗначения(ДанныеСтроки: СопоставляемыеСвойстваДанныеСтроки): ДвоичныйОбъект.Ссылка?
    возврат ЕстьНесопоставленныеЗначения(ДанныеСтроки.Данные.Данные) ?
        Ресурс{ПредупреждениеКонтур.svg}.Ссылка :
        Ресурс{Галочка.svg}.Ссылка
;

метод ОценкаИнформацииЕстьНесопоставленныеЗначения(ДанныеСтроки: СопоставляемыеСвойстваДанныеСтроки): ОценкаИнформации?
    возврат ЕстьНесопоставленныеЗначения(ДанныеСтроки.Данные.Данные) ?
        ОценкаИнформации.Предупреждающая :
        ОценкаИнформации.Положительная
;

метод ПодсказкаЕстьНесопоставленныеЗначения(ДанныеСтроки: СопоставляемыеСвойстваДанныеСтроки): Строка?
    возврат ЕстьНесопоставленныеЗначения(ДанныеСтроки.Данные.Данные) ?
        "Есть несопоставленные значения" :
        "Все значения сопоставлены"
;

метод Пояснение(): Строка
    возврат
    "Порядок работы:
    1) Выберите тип импортируемых данных
    2) Нажмите «Сформировать шаблон». Будет скачан .zip архив с набором файлов .csv
    3) Распакуйте архив и заполните файлы шаблона данными
        ВАЖНО:
        - Основная информация содержится в файле с таким же именем как у архива
        - В остальных файлах содержатся множественные данные объекта
        - Обязательные для заполнения поля отмечены знаком (*)
        - В каждом из файлов есть колонка «Идентификатор». Этот идентификатор нужен только для связи данных в файлах. Он не будет сохранен в приложении
        - Идентификатор должен быть уникален для каждого загружаемого объекта
        - Если для загружаемого объекта доступно присоединение файлов, то в архиве будет папка «files» с файлом «files.csv»
        - Все файлы, которые нужно загрузить должны находиться в папке «files»
        - В файле «files.csv» нужно указать соответствие идентификатора загружаемого объекта и имени файла
        
        Пример:
            В основном файле есть одна строка с идентификатором «123».
            В файле «Контакты.csv» есть две строки с идентификатором «123».
            В папке «files» находятся файлы «Фото.jpg» и «Резюме.pdf».
            В файле «files.csv» есть две строки с идентификатором «123» и именами файлов «Фото.jpg» и «Резюме.pdf» соответственно.
            После загрузки будет создан один объект с двумя строками, содержащими контактную информацию и двумя присоединенными файлами.
    4) Упакуйте папку с заполненными по шаблону данными в .zip архив
    5) Нажмите «Загрузить данные» и выберите архив из п.4
    6) На вкладке «Сопоставление»:
        - В левой части будут отображены поля, в которых содержатся ссылочные данные
        - В правой - соответствие данных из файлов и ссылок на объекты приложения
        - Некоторые значения будут сопоставлены автоматически, остальные можно заполнить вручную
        - После того как все необходимые данные будут сопоставлены нажмите «Все данные сопоставлены»
    7) На вкладке «Проверка»:
        - Будут отображены предварительно загруженные данные
        - Есть возможность вручную изменить данные
        - По кнопке «Назад к сопоставлению» можно вернуться на вкладку «Сопоставление» и дозаполнить данные
        - По кнопке «Проверить» можно выполнить предварительную проверку загружаемых данных. В строках появится информация о статусе проверки
    8) Нажмите «Сохранить загруженные объекты» чтобы сохранить данные из таблицы в приложении
    9) На вкладке «Результат» будут отображены загруженные объекты"
;
