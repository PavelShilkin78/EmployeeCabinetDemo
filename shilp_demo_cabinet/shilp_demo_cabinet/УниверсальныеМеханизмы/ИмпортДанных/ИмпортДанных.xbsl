импорт ОбменДанными
импорт ОбщиеСтандартные

@ВПроекте конст ИМЯ_СВОЙСТВА_ПРИСОЕДИНЕННЫЕ_ФАЙЛЫ = "ПрисоединенныеФайлы"
@ВПодсистеме конст ИМЯ_ПОЛЯ_СОСТОЯНИЕ_СТРОКИ = "@СостояниеСтроки@"
конст ФОРМАТ_ФАЙЛОВ = "csv"
конст ИМЯ_СВОЙСТВА_ИДЕНТИФИКАТОРА = "Идентификатор"
конст КАТАЛОГ_ПРИСОЕДИНЕННЫХ_ФАЙЛОВ = "files"

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ОписаниеПоИдентификатору(Идентификатор: Ууид): ОписаниеИмпортируемыхДанных
    возврат СервисПоИдентификатору(Идентификатор).ОписаниеИмпортируемыхДанных()
;

@ВПодсистеме
@НаСервере
метод СервисПоИдентификатору(Идентификатор: Ууид): ИмпортируемыеДанные
    для Сервис из ИмпортируемыеДанные.ПолучитьСервисы()
        если Сервис.ИдентификаторИмпортируемыхДанных().Значение == Идентификатор
            возврат Сервис
        ;
    ;
;

@ВПодсистеме
@НаКлиенте
метод ФормаСписка(Сущности: Массив<ЭлементСпискаВыбора>): Форма?
    для Сервис из ИмпортируемыеДанные.ПолучитьСервисы()
        знч Форма = Сервис.ФормаСписка(Сущности)
        если Форма != Неопределено
            возврат Форма
        ;
    ;
    
    возврат Неопределено
;

@ВПодсистеме
@НаКлиенте
метод СформироватьШаблон(Идентификатор: Ууид)
    знч Описание = ОписаниеПоИдентификатору(Идентификатор)
    ВыгрузкаФайлов.НачатьВыгрузку(СформироватьАрхивШаблона(Идентификатор), "%{Описание.Наименование}.zip")
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод СформироватьАрхивШаблона(Идентификатор: Ууид): ДвоичныйОбъект.Ссылка
    знч Описание = ОписаниеПоИдентификатору(Идентификатор)
    исп ПотокЗаписи = новый ВременныйПотокЗаписи()
    знч ЗаписьZip = новый ЗаписьZip(ПотокЗаписи)
    
    знч Свойства = Описание.ПсевдонимыСвойств().Преобразовать(КлючИЗначение -> КлючИЗначение.Значение)
    ЗаписьZip.Добавить(
        СформироватьCsv([Свойства]).Загрузить().ОткрытьПотокЧтения(),
        "%{Описание.Наименование}.%{ФОРМАТ_ФАЙЛОВ}"
    )
    
    для Таблица из Описание.ПсевдонимыСвойствТаблиц()
        знч СвойстваТаблицы = Таблица.Значение.Преобразовать(КлючИЗначение -> КлючИЗначение.Значение)
        ЗаписьZip.Добавить(
            СформироватьCsv([СвойстваТаблицы]).Загрузить().ОткрытьПотокЧтения(),
            "%{Таблица.Ключ}.%{ФОРМАТ_ФАЙЛОВ}"
        )
    ;
    
    если Описание.ЕстьПрисоединенныеФайлы
        ЗаписьZip.Добавить(
            СформироватьCsv([["Идентификатор", "Имя файла"]]).Загрузить().ОткрытьПотокЧтения(),
            "%{КАТАЛОГ_ПРИСОЕДИНЕННЫХ_ФАЙЛОВ}/%{КАТАЛОГ_ПРИСОЕДИНЕННЫХ_ФАЙЛОВ}.%{ФОРМАТ_ФАЙЛОВ}"
        )
    ;
    
    ЗаписьZip.Записать()
    исп ПотокЧтения = ПотокЗаписи.ОткрытьПотокЧтения()
    
    возврат ОбъектноеХранилище.Загрузить(ПотокЧтения, ПотокЗаписи.Размер()).Ссылка
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ПрочитатьИмпортируемыеДанные(Идентификатор: Ууид, Данные: ДвоичныйОбъект.Ссылка): Массив<ЗагруженныеДанные>
    пер Свойства: Массив<Массив<Строка>>
    знч Таблицы: Соответствие<Строка, Массив<Массив<Строка>>>
    пер ОписаниеФайлов: Массив<Массив<Строка>>
    знч ФайлыСИменами: Соответствие<Строка, ЗагруженныеФайлы.Ссылка>
    знч Описание = ОписаниеПоИдентификатору(Идентификатор)
    знч ПсевдонимыСвойствТаблиц = Описание.ПсевдонимыСвойствТаблиц()
    исп Поток = Данные.Загрузить().ОткрытьПотокЧтения()
    знч Читатель = новый ЧтениеZip(Поток, "", Кодировка.Cp866)
    
    // Прочитаем архив
    пока Читатель.Следующий()
        знч Элемент = Читатель.ПолучитьЭлемент()
        если не Элемент.ЭтоКаталог()
            попытка 
                если Элемент.ПутьВАрхиве.Содержит("%{КАТАЛОГ_ПРИСОЕДИНЕННЫХ_ФАЙЛОВ}\\")
                    если Элемент.ПутьВАрхиве.Содержит("%{КАТАЛОГ_ПРИСОЕДИНЕННЫХ_ФАЙЛОВ}\\%{КАТАЛОГ_ПРИСОЕДИНЕННЫХ_ФАЙЛОВ}.%{ФОРМАТ_ФАЙЛОВ}")
                        // Описание Файлов
                        ОписаниеФайлов = ПрочитатьCsv(Читатель.ПолучитьПотокЭлемента())
                    иначе
                        // Файлы
                        ФайлыСИменами.Вставить(Элемент.Имя,
                            ЗагруженныеФайлы.НовыйЗагруженныйФайл(
                                ОбъектноеХранилище.ЗагрузитьИзБайт(Читатель.ПолучитьПотокЭлемента().ПрочитатьКакБайты())))
                    ;
                иначе
                    если Описание.Наименование == Элемент.ИмяБезРасширения // Свойства
                        Свойства = ПрочитатьCsv(Читатель.ПолучитьПотокЭлемента())
                    иначе если ПсевдонимыСвойствТаблиц.СодержитКлюч(Элемент.ИмяБезРасширения) // Таблицы
                        Таблицы.Вставить(Элемент.ИмяБезРасширения, ПрочитатьCsv(Читатель.ПолучитьПотокЭлемента()))
                    ;
                ;
            поймать Ошибка: Исключение
                выбросить новый ИсключениеВыполнения("Не удалось прочитать файл архива %{Элемент.ПутьВАрхиве}", Ошибка)
            ;
        ;
    ;
    
    // Прочитаем данные из архива
    пер СырыеДанные: Соответствие<Строка, Соответствие<Строка, Объект?>>
    попытка 
        СырыеДанные = СформироватьИмпортируемыеДанные(Описание, Свойства, Таблицы, ОписаниеФайлов, ФайлыСИменами)
    поймать Ошибка: Исключение
        выбросить новый ИсключениеВыполнения("Данные не соответствуют шаблону", Ошибка)
    ;
    
    // Подготовим данные
    знч Ошибки: Массив<Строка>
    знч ИмпортируемыеДанные = ПодготовитьИмпортируемыеДанные(СырыеДанные, Описание, Ошибки)
    
    если не Ошибки.Пусто()
        выбросить новый ИсключениеВыполнения(
            "Некорректный формат данных в полях:
            %{Ошибки.Соединить("\н")}")
    ;
    
    возврат ИмпортируемыеДанные
;

@НаСервере
метод СформироватьИмпортируемыеДанные(
    Описание: ОписаниеИмпортируемыхДанных,
    Свойства: Массив<Массив<Строка>>,
    Таблицы: Соответствие<Строка, Массив<Массив<Строка>>>,
    ОписаниеФайлов: Массив<Массив<Строка>>,
    Файлы: Соответствие<Строка, ЗагруженныеФайлы.Ссылка>): Соответствие<Строка, Соответствие<Строка, Объект?>>
    
    знч Данные: Соответствие<Строка, Соответствие<Строка, Объект?>>
    знч ИменаСвойств: Массив<Строка>
    знч ИменаСвойствТаблиц: Соответствие<Строка, Массив<Строка>>
    знч ОписаниеТаблиц = Описание.ОписаниеТаблиц()
    
    // Запоминаем порядок колонок и удаляем шапку
    для ПсевдонимСвойства из Свойства[0]
        знч ИмяСвойства = Описание.Свойства[ПсевдонимСвойства]
        если ИмяСвойства != ИМЯ_СВОЙСТВА_ИДЕНТИФИКАТОРА
            ИменаСвойств.Добавить(ИмяСвойства)
        ;
    ;
    Свойства.УдалитьПоИндексу(0)
    
    для Таблица из Таблицы
        знч ИменаСвойствТаблицы: Массив<Строка>
        для ПсевдонимСвойства из Таблица.Значение[0]
            знч ИмяСвойства = Описание.Таблицы[Таблица.Ключ][ПсевдонимСвойства]
            если ИмяСвойства != ИМЯ_СВОЙСТВА_ИДЕНТИФИКАТОРА
                ИменаСвойствТаблицы.Добавить(ИмяСвойства)
            ;
        ;
        Таблица.Значение.УдалитьПоИндексу(0)
        
        ИменаСвойствТаблиц.Вставить(ОписаниеТаблиц[Таблица.Ключ], ИменаСвойствТаблицы)
    ;
    
    // Заполняем свойства
    для СтрокаСвойств из Свойства
        если СтрокаСвойств.Размер() < 2
            продолжить
        ;
        
        знч Идентификатор = СтрокаСвойств[0]
        Данные.ВставитьЕслиОтсутствует(Идентификатор, <Строка, Объект?>{:})
        
        для Индекс = 1 по СтрокаСвойств.Граница()
            Данные[Идентификатор].Вставить(ИменаСвойств[Индекс - 1], СтрокаСвойств[Индекс])
        ;
    ;
    
    // Заполняем таблицы
    для Таблица из Таблицы
        знч ИмяТаблицы = ОписаниеТаблиц[Таблица.Ключ]
        
        // Инициализируем таблицы
        для ДанныеОбъекта из Данные
            ДанныеОбъекта.Значение.Вставить(ИмяТаблицы, новый Массив<Соответствие<Строка, Строка>>())
        ;
        
        // Заполним таблицы
        для СтрокаСвойств из Таблица.Значение
            если СтрокаСвойств.Размер() < 2
                продолжить
            ;
            
            знч Идентификатор = СтрокаСвойств[0]
            если не Данные.СодержитКлюч(Идентификатор)
                продолжить
            ;
            
            знч СтрокаТаблицы = <Строка, Строка>{:}
            
            для Индекс = 1 по СтрокаСвойств.Граница()
                СтрокаТаблицы.Вставить(ИменаСвойствТаблиц[ИмяТаблицы][Индекс - 1], СтрокаСвойств[Индекс])
            ;
            
            (Данные[Идентификатор][ИмяТаблицы] как Массив<Соответствие<Строка, Строка>>).Добавить(СтрокаТаблицы)
        ;
    ;
    
    // Добавляем файлы
    если Описание.ЕстьПрисоединенныеФайлы
        для Элемент из Данные
            Элемент.Значение.Вставить(ИМЯ_СВОЙСТВА_ПРИСОЕДИНЕННЫЕ_ФАЙЛЫ, новый Соответствие<Строка, ЗагруженныеФайлы.Ссылка>())
        ;
        
        для Индекс = 1 по ОписаниеФайлов.Граница()
            знч ОписаниеФайла = ОписаниеФайлов[Индекс]
            если ОписаниеФайла.Размер() < 2
                продолжить
            ;
            
            знч Файл = Файлы.ПолучитьИлиУмолчание(ОписаниеФайла[1])
            если Файл == Неопределено
                продолжить
            ;
            
            знч ПрисоединенныеФайлы =
                Данные[ОписаниеФайла[0]][ИМЯ_СВОЙСТВА_ПРИСОЕДИНЕННЫЕ_ФАЙЛЫ] как Соответствие<Строка, ЗагруженныеФайлы.Ссылка>
            
            ПрисоединенныеФайлы.Вставить(ОписаниеФайла[1], Файл)
        ;
    ;
    
    возврат Данные
;

@НаСервере
метод ПодготовитьИмпортируемыеДанные(
    СырыеДанные: Соответствие<Строка, Соответствие<Строка, Объект?>>,
    Описание: ОписаниеИмпортируемыхДанных,
    Ошибки: Массив<Строка>): Массив<ЗагруженныеДанные>
    
    знч Результат = <ЗагруженныеДанные>[]
    знч Таблицы = Описание.ОписаниеТаблиц().Преобразовать(КлючИЗначение -> КлючИЗначение.Значение)
    
    пер НомерСтроки = 0
    для КлючИЗначение из СырыеДанные
        НомерСтроки += 1
        знч ПодготовленныеДанные = <Строка, Объект?>{:}
        знч ДанныеОбъекта = КлючИЗначение.Значение
        
        для Свойство из ДанныеОбъекта
            знч ИмяСвойства = Свойство.Ключ
            
            если ИмяСвойства == ИМЯ_СВОЙСТВА_ПРИСОЕДИНЕННЫЕ_ФАЙЛЫ
                ПодготовленныеДанные.Вставить(ИмяСвойства, новый Соответствие<Строка, Строка>())
                для ПрисоединенныйФайл из Свойство.Значение как Соответствие<Строка, ЗагруженныеФайлы.Ссылка>
                    (ПодготовленныеДанные[ИмяСвойства] как Соответствие<Строка, Строка>)
                        .Вставить(ПрисоединенныйФайл.Ключ, ПрисоединенныйФайл.Значение.Ид.ВСтроку())
                ;
            иначе если Таблицы.Содержит(ИмяСвойства)
                знч ПодготовленныеДанныеТаблицы = <Соответствие<Строка, Объект?>>[]
                знч ДанныеТаблицы = Свойство.Значение как Массив<Соответствие<Строка, Строка>>
                
                для Строка из ДанныеТаблицы
                    знч ДанныеСтроки = <Строка, Объект?>{:}
                    
                    для СвойствоСтроки из Строка
                        знч ЗначениеСвойства = СвойствоСтроки.Значение
                        знч ТипСвойства = Описание.ТипыСвойств["%ИмяСвойства.%{СвойствоСтроки.Ключ}"]
                        ДанныеСтроки.Вставить(СвойствоСтроки.Ключ, ПривестиЗначение(ЗначениеСвойства, ТипСвойства))
                    ;
                    
                    ПодготовленныеДанныеТаблицы.Добавить(ДанныеСтроки)
                ;
                
                ПодготовленныеДанные.Вставить(ИмяСвойства, ПодготовленныеДанныеТаблицы)
            иначе
                знч ЗначениеСвойства = Свойство.Значение как Строка
                знч ТипСвойства = Описание.ТипыСвойств[ИмяСвойства]
                ПодготовленныеДанные.Вставить(ИмяСвойства, ПривестиЗначение(ЗначениеСвойства, ТипСвойства))
            ;
        ;
        Результат.Добавить(новый ЗагруженныеДанные(
            Идентификатор = КлючИЗначение.Ключ,
            НомерСтроки = НомерСтроки,
            Состояние = новый СостояниеСтроки(),
            Данные = ПодготовленныеДанные
        ))
    ;
    
    возврат Результат
;

@НаСервере
метод ПривестиЗначение(Значение: Строка, Тип: Тип): Объект?
    попытка 
        выбор Тип
        когда Тип<Число>
            если Значение.Пусто()
                возврат 0
            иначе
                возврат новый Число(Значение)
            ;
        когда Тип<Дата>
            если Значение.Пусто()
                возврат Дата{}
            иначе
                возврат новый Дата(Значение)
            ;
        когда Тип<ДатаВремя>
            если Значение.Пусто()
                возврат ДатаВремя{}
            иначе
                возврат новый ДатаВремя(Значение)
            ;
        когда Тип<Булево>
            если Значение.Пусто()
                возврат Ложь
            иначе
                возврат ["ДА", "ИСТИНА", "+"].Содержит(Значение.ВВерхнийРегистр())
            ;
        когда Тип<Ууид>
            если Значение.Пусто()
                возврат Ууид{}
            иначе
                возврат новый Ууид(Значение)
            ;
        иначе
            возврат Значение
        ;
    поймать Ошибка: Исключение
        выбросить новый ИсключениеВыполнения("Не удалось привести значение \"%Значение\" к типу %{Тип.ВСтроку()}", Ошибка)
    ;
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод СформироватьCsv(Данные: Массив<Массив<Строка>>, Разделитель = ";"): ДвоичныйОбъект.Ссылка
    исп ПотокЗаписи = новый ВременныйПотокЗаписи()
    знч НастройкиЗаписи = новый НастройкиЗаписиДанных()
    НастройкиЗаписи.Кодировка = "windows-1251"
    знч ЗаписьДанных = новый ЗаписьДанных(ПотокЗаписи, НастройкиЗаписи)
    
    для Строка из Данные
        ЗаписьДанных.ЗаписатьСтроку(Строка.Соединить(Разделитель))
    ;
    
    исп ПотокЧтения = ПотокЗаписи.ОткрытьПотокЧтения()
    
    возврат ОбъектноеХранилище.Загрузить(ПотокЧтения, ПотокЗаписи.Размер()).Ссылка
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ПрочитатьCsv(Данные: ДвоичныйОбъект.Ссылка, Разделитель = ";"): Массив<Массив<Строка>>
    знч Результат: Массив<Массив<Строка>>
    знч Читатель = новый ЧтениеДанных(Данные.Загрузить().ОткрытьПотокЧтения())
    
    пока не Читатель.ЧтениеЗавершено()
        Результат.Добавить(Читатель.ПрочитатьСтроку().Разделить(Разделитель))
    ;
    
    возврат Результат
;

@ВПроекте
@НаСервере
метод ПрочитатьCsv(Данные: ПотокЧтения, Разделитель = ";"): Массив<Массив<Строка>>
    знч Результат: Массив<Массив<Строка>>
    знч Читатель = новый ЧтениеДанных(Данные)
    
    пока не Читатель.ЧтениеЗавершено()
        Результат.Добавить(Читатель.ПрочитатьСтроку(Кодировка.Windows1251).Разделить(Разделитель, Истина))
    ;
    
    возврат Результат
;

@ВПроекте
@НаКлиенте @НаСервере
метод ЗначениеПеречисления(Тип: ТипПеречисление<Перечисление>, Значение: Строка): Перечисление?
    для Элемент из Тип.Элементы()
        если Элемент.ВСтроку() == Значение или Элемент.Представление() == Значение
            возврат Элемент
        ;
    ;
    
    возврат ЗначениеПеречисленияПоУмолчанию(Тип)
;

@ВПроекте
@НаСервере @ДоступноСКлиента
метод ЗначениеПеречисленияПоУмолчанию(Тип: ТипПеречисление<Перечисление>): Перечисление?
    для Элемент из (ОтражениеЭлементаПроекта.ПоТипу(Тип) как ОтражениеЭлементаПроектаПеречисление).Элементы
        если Элемент.ПоУмолчанию
            возврат Элемент.Значение
        ;
    ;
    
    возврат Неопределено
;

@ВПроекте
@НаСервере
метод ЗаписатьПрисоединенныеФайлы(Владелец: ВладелецФайлы.Ссылка, ДанныеФайлов: Соответствие<Строка, Строка>): Соответствие<Строка, Файлы.Ссылка>
    возврат ЗаписатьПрисоединенныеФайлы({Владелец : ДанныеФайлов})[Владелец]
;

@ВПроекте
@НаСервере
метод ЗаписатьПрисоединенныеФайлы(
    ПрисоединенныеФайлыОбъектов: Соответствие<ВладелецФайлы.Ссылка, Соответствие<Строка, Строка>>
    ): Соответствие<ВладелецФайлы.Ссылка, Соответствие<Строка, Файлы.Ссылка>>
    
    знч Результат = <ВладелецФайлы.Ссылка, Соответствие<Строка, Файлы.Ссылка>>{:}
    
    для КлючИЗначение из ПрисоединенныеФайлыОбъектов
        знч ФайлыСИменами = <Строка, Файлы.Ссылка>{:}
        для ФайлСИменем из КлючИЗначение.Значение
            знч ЗагруженныйФайл = ЗагруженныеФайлы.ПолучитьСсылку(новый Ууид(ФайлСИменем.Значение)).ЗагрузитьОбъект()
            если ЗагруженныйФайл == Неопределено
                продолжить
            ;
            
            знч ФайлОбъект = Файлы.НовыйФайл(ЗагруженныйФайл.Хранилище.Загрузить())
            ФайлОбъект.Владелец = КлючИЗначение.Ключ
            ФайлОбъект.Наименование = ИмяФайлаБезРасширения(ФайлСИменем.Ключ)
            ФайлОбъект.Расширение = РасширениеПоИмениФайла(ФайлСИменем.Ключ)
            ФайлОбъект.Записать()
            
            ФайлыСИменами.Вставить(
                "%{ФайлОбъект.Наименование}.%{ФайлОбъект.Расширение}",
                ФайлОбъект.Ссылка
            )
        ;
        
        Результат.Вставить(КлючИЗначение.Ключ, ФайлыСИменами)
    ;
    
    возврат Результат
;

@ВПроекте
@НаКлиенте @НаСервере
метод РасширениеПоИмениФайла(ИмяФайла: Строка): Строка
    пер Результат = ""
    для Совпадеине из '\.\w+$'.НайтиСовпадения(ИмяФайла)
        Результат = Совпадеине.Значение().УдалитьДиапазон(0, 1)
    ;
    
    возврат Результат
;


@ВПроекте
@НаКлиенте @НаСервере
метод ИмяФайлаБезРасширения(ИмяФайла: Строка): Строка
    возврат ИмяФайла.Заменить('\.\w+$', "")
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод СопоставляемыеСвойстваСТипами(
    Идентификатор: Ууид,
    Данные: Массив<ЗагруженныеДанные>): Соответствие<Строка, Соответствие<Строка, КлючИЗначение<Тип, Объект?>>>
    
    знч Результат = <Строка, Соответствие<Строка, КлючИЗначение<Тип, Объект?>>>{:}
    знч НастройкиСопоставления = СервисПоИдентификатору(Идентификатор).НастройкиСопоставления()
    
    для НастройкаСИменем из НастройкиСопоставления
        знч ИмяПоля = НастройкаСИменем.Ключ
        знч ЧастиИмениПоля = ИмяПоля.Разделить(".")
        знч Настройка = НастройкаСИменем.Значение
        знч ЗначенияПолей = <Строка, КлючИЗначение<Тип, Объект?>>{:}
        пер СвойстваДляПоиска = <Строка>[]
        
        для ЗагруженныеДанные из Данные
            знч ДанныеОбъекта = ЗагруженныеДанные.Данные
            если ЧастиИмениПоля.Размер() == 2
                если ДанныеОбъекта.СодержитКлюч(ЧастиИмениПоля[0])
                    для СтрокаТаблицы из ДанныеОбъекта[ЧастиИмениПоля[0]] как Массив<Соответствие<Строка, Объект?>>
                        СвойстваДляПоиска.Добавить(СтрокаТаблицы[ЧастиИмениПоля[1]] как Строка)
                    ;
                ;
            иначе если ЧастиИмениПоля.Размер() == 1
                СвойстваДляПоиска.Добавить(ДанныеОбъекта[ЧастиИмениПоля[0]] как Строка)
            ;
        ;
        СвойстваДляПоиска = СвойстваДляПоиска.Уникальные()
        
        если Настройка.ФункцияПоиска != Неопределено
            знч НайденныеЗначения = Настройка.ФункцияПоиска(СвойстваДляПоиска)
            для Свойство из СвойстваДляПоиска
                пер НайденноеСвойство: Объект?
                если НайденныеЗначения.СодержитКлюч(Свойство)
                    // Добавить предупреждение о неуникальности найденного
                    НайденноеСвойство = НайденныеЗначения[Свойство][0]
                ;
                
                ЗначенияПолей.Вставить(Свойство, новый КлючИЗначение(Настройка.ТипПоля, НайденноеСвойство))
            ;
        иначе если Настройка.ТипПоля.МожетБытьПрисвоенВ(Тип<Перечисление>)
            знч ЗначенияПеречисленияПоИменам = ЗначенияПеречисленияПоИменам(Настройка.ТипПоля как ТипПеречисление<Перечисление>, СвойстваДляПоиска)
            для Свойство из СвойстваДляПоиска
                ЗначенияПолей.Вставить(Свойство, новый КлючИЗначение(Настройка.ТипПоля, ЗначенияПеречисленияПоИменам[Свойство]))
            ;
        иначе
            для Свойство из СвойстваДляПоиска
                ЗначенияПолей.Вставить(Свойство, новый КлючИЗначение(Настройка.ТипПоля, Неопределено))
            ;
        ;
        
        Результат.Вставить(ИмяПоля, ЗначенияПолей)
    ;
    
    возврат Результат
;

метод ЗначенияПеречисленияПоИменам(ТипПеречисления: ТипПеречисление<Перечисление>, Имена: Массив<Строка>): Соответствие<Строка, Перечисление?>
    знч Результат = <Строка, Перечисление?>{:}
    для Имя из Имена
        Результат.Вставить(Имя, Неопределено)
        для ЭлементПеречисления из ТипПеречисления.Элементы()
            если ЭлементПеречисления.ВСтроку() == Имя или ЭлементПеречисления.Представление() == Имя
                Результат.Вставить(Имя, ЭлементПеречисления)
            ;
        ;
    ;
    
    возврат Результат
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ИмпортироватьДанные(Идентификатор: Ууид, Данные: Массив<ЗагруженныеДанные>): Массив<РезультатЗагрузки>
    знч Сервис = СервисПоИдентификатору(Идентификатор)
    
    // Заменим ссылки на Ууид
    ЗаменитьСсылки(Сервис, Данные)
    
    // Импортируем загруженные данные
    пер Результат: Массив<РезультатЗагрузки>
    исп Транзакция = Транзакции.Начать()
    попытка 
        Результат = Сервис.ИмпортироватьДанные(Данные)
    поймать Ошибка: Исключение
        Транзакция.Откатить()
        выбросить новый ИсключениеВыполнения("Ошибка при импорте объекта", Ошибка)
    ;
    Транзакция.Фиксировать()
    
    возврат Результат
;

@НаСервере
метод ЗаменитьСсылки(Сервис: ИмпортируемыеДанные, Данные: Массив<ЗагруженныеДанные>)
    знч Свойства = Сервис.НастройкиСопоставления().Преобразовать(КлючИЗначение -> КлючИЗначение.Ключ)
    для ИмяСвойства из Свойства
        знч ЧастиИмени = ИмяСвойства.Разделить(".")
        
        для ДанныеСтроки из Данные
            знч ДанныеОбъекта = ДанныеСтроки.Данные
            если ЧастиИмени.Размер() == 1
                знч Тип = ДанныеОбъекта[ЧастиИмени[0]].ПолучитьТип()
                если Тип.МожетБытьПрисвоенВ(Тип<Справочник.Ссылка>)
                    ДанныеОбъекта[ЧастиИмени[0]] = (ДанныеОбъекта[ЧастиИмени[0]] как Справочник.Ссылка).Ид.ВСтроку()
                ;
            иначе
                для Строка из ДанныеОбъекта[ЧастиИмени[0]] как Массив<Соответствие<Строка, Объект?>>
                    знч Тип = Строка[ЧастиИмени[1]].ПолучитьТип()
                    если Тип.МожетБытьПрисвоенВ(Тип<Справочник.Ссылка>)
                        Строка[ЧастиИмени[1]] = (Строка[ЧастиИмени[1]] как Справочник.Ссылка).Ид.ВСтроку()
                    ;
                ;
            ;
        ;
    ;
;

@ВПодсистеме
@НаКлиенте
метод ОценкаИнформации(Статус: СтатусыПроверки?): ОценкаИнформации
    выбор Статус
    когда Предупреждение
        возврат ОценкаИнформации.Предупреждающая
    когда Ошибка
        возврат ОценкаИнформации.Отрицательная
    когда Ок
        возврат ОценкаИнформации.Положительная
    иначе
        возврат ОценкаИнформации.Обычная
    ;
;

@ВПодсистеме
@НаСервере @ДоступноСКлиента
метод ПроверитьЗаполнение(Идентификатор: Ууид, ДанныеДляИмпорта: Массив<ЗагруженныеДанные>): Массив<ЗагруженныеДанные>
    знч Сервис = СервисПоИдентификатору(Идентификатор)
    знч Описание = Сервис.ОписаниеИмпортируемыхДанных()
    знч СтрокиБезОшибок = <ЗагруженныеДанные>[]
    
    для Строка из ДанныеДляИмпорта
        если ПроверитьЗаполнениеСтроки(Описание, Строка)
            СтрокиБезОшибок.Добавить(Строка)
        ;
    ;
    
    знч КопияДанных = новый Массив<ЗагруженныеДанные>(СтрокиБезОшибок)
    ЗаменитьСсылки(Сервис, КопияДанных)
    
    Сервис.ПроверитьЗаполнение(КопияДанных)
    
    СостояниеСтроки.ОбновитьСтатусы(ДанныеДляИмпорта)
    
    возврат ДанныеДляИмпорта
;

@НаСервере
метод ПроверитьЗаполнениеСтроки(Описание: ОписаниеИмпортируемыхДанных, Строка: ЗагруженныеДанные): Булево
    пер Результат = Истина
    знч Данные = Строка.Данные
    
    Строка.Состояние.Очистить()
    
    для ИмяСвойства из Описание.ОбязательныеСвойства()
        если не ПолеЗаполнено(Данные[ИмяСвойства], Описание.ТипыСвойств[ИмяСвойства])
            знч СостояниеПоля = новый СостояниеПоля(
                Статус = СтатусыПроверки.Ошибка,
                Описание = "Не заполнено обязательное поле"
            )
            Строка.Состояние.СостоянияПолей.Вставить(ИмяСвойства, СостояниеПоля)
            Результат = Ложь
        ;
    ;
    
    для Таблица из Описание.ОбязательныеСвойстваТаблиц()
        знч СостояниеТаблицы = новый СостояниеТаблицы()
        
        для СтрокаТаблицы из Данные[Таблица.Ключ] как Массив<Соответствие<Строка, Объект?>>
            для ИмяСвойства из Таблица.Значение
                если не ПолеЗаполнено(СтрокаТаблицы[ИмяСвойства], Описание.ТипыСвойств["%{Таблица.Ключ}.%{ИмяСвойства}"])
                    СостояниеТаблицы.СостоянияПолей.Вставить(ИмяСвойства, новый СостояниеПоля(
                        Статус = СтатусыПроверки.Ошибка,
                        Описание = "Не заполнено обязательное поле"
                    ))
                    СостояниеТаблицы.Описание = "Некоректно заполнены данные в таблице"
                    Результат = Ложь
                ;
            ;
        ;
        
        Строка.Состояние.СостоянияТаблиц.Вставить(Таблица.Ключ, СостояниеТаблицы)
    ;
    
    возврат Результат
;

метод ПолеЗаполнено(Значение: Объект?, Тип: Тип): Булево
    если Значение == Неопределено
        возврат Ложь
    ;
    
    выбор Тип
    когда Тип<Строка>
        возврат не Значение.ВСтроку().Пусто()
    когда Тип<Число>
        возврат (Значение как Число) != 0
    когда Тип<ДатаВремя>
        возврат (Значение как ДатаВремя) != ДатаВремя{}
    когда Тип<Дата>
        возврат (Значение как Дата) != Дата{}
    когда Тип<Ууид>
        возврат (Значение как Ууид) != Ууид{}
    иначе
        возврат Истина
    ;
;

@ВПроекте
@НаКлиенте @НаСервере
структура ОписаниеИмпортируемыхДанных
    обз знч Идентификатор: Ууид // Идентификатор сервиса
    обз знч Наименование: Строка // Имя, используемое при именовании файлов шаблона
    обз знч ТипДанных: Тип // Тип данных, в который можно будет десериализовать импортированные данные из JSON
    знч Свойства: Соответствие<Строка, Строка> // Свойства импортируемых данных (формируются автоматически)
    знч Таблицы: Соответствие<Строка, Соответствие<Строка, Строка>> // Свойства импортируемых данных (формируются автоматически)
    знч ТипыСвойств: Соответствие<Строка, Тип> // Типы свойств импортируемых данных (формируются автоматически)
    знч ЕстьПрисоединенныеФайлы: Булево // Признак, определяющий возможность импорта присоединенных файлов
    
    @ВПроекте
    @НаКлиенте @НаСервере
    метод СвойстваПоПорядку(): Соответствие<Строка, Число>
        возврат ОтсортированныеСвойства(ТипДанных)
    ;
    
    @ВПроекте
    @НаКлиенте @НаСервере
    метод СвойстваТаблицПоПорядку(): Соответствие<Строка, Соответствие<Строка, Число>>
        знч Результат: Соответствие<Строка, Соответствие<Строка, Число>>
        для Свойство из ТипДанных.ПолучитьСвойства()
            знч Тип = Свойство.Типы.Единственный()
            если Тип.МожетБытьПрисвоенВ(Тип<ЧитаемыйМассив<Объект>>)
                Результат.Вставить(Свойство.Имя.Представление(), ОтсортированныеСвойства(ТипСтрокиТаблицы(Свойство)))
            ;
        ;
        
        возврат Результат
    ;
    
    @НаКлиенте @НаСервере
    статический метод ОтсортированныеСвойства(Тип: Тип): Соответствие<Строка, Число>
        знч Результат: Соответствие<Строка, Число>
        знч ИнициализированныеСвойства =
            Тип.СоздатьЭкземпляр(<Строка, Объект?>{:}).Представление().УдалитьДиапазон(0, 1).Разделить(", ")
        
        для Индекс = 0 по ИнициализированныеСвойства.Граница()
            Результат.Вставить(ИнициализированныеСвойства[Индекс].Заменить('=.*$', ""), Индекс)
        ;
        
        возврат Результат
    ;
    
    @ВПроекте
    @НаКлиенте @НаСервере
    // Ключ - Имя, Значение - Представление
    метод ПсевдонимыСвойств(БезИдентификатора = Ложь): Соответствие<Строка, Строка>
        знч КопияСвойств = КопияСвойств(Свойства)
        для Свойство из КопияСвойств
            если Свойство.Значение == ИМЯ_СВОЙСТВА_ПРИСОЕДИНЕННЫЕ_ФАЙЛЫ
                КопияСвойств.Удалить(Свойство.Ключ)
                прервать
            ;
        ;
        
        если БезИдентификатора
            для Свойство из КопияСвойств
                если Свойство.Значение == ИМЯ_СВОЙСТВА_ИДЕНТИФИКАТОРА
                    КопияСвойств.Удалить(Свойство.Ключ)
                    прервать
                ;
            ;
        ;
        
        возврат КопияСвойств.ВСоответствие(Свойство -> Свойство.Значение, Свойство -> Свойство.Ключ)
    ;
    
    @ВПроекте
    @НаКлиенте @НаСервере
    // Ключ - Имя, Значение - Представление
    метод ПсевдонимыТаблиц(): Соответствие<Строка, Строка>
        знч ОписаниеТаблиц = ОписаниеТаблиц()
        возврат Таблицы.ВСоответствие(Таблица -> ОписаниеТаблиц[Таблица.Ключ], Таблица -> Таблица.Ключ)
    ;
    
    @ВПроекте
    @НаКлиенте @НаСервере
    // Ключ - Имя, Значение - Представление
    метод ПсевдонимыСвойствТаблиц(БезИдентификатора = Ложь): Соответствие<Строка, Соответствие<Строка, Строка>>
        знч Результат = <Строка, Соответствие<Строка, Строка>>{:}
        Таблицы.ДляКаждого(Таблица ->
            Результат.Вставить(Таблица.Ключ,
                Таблица.Значение.ВСоответствие(Свойство -> Свойство.Значение, Свойство -> Свойство.Ключ)))
               
        если БезИдентификатора
            для Таблица из Результат
                Таблица.Значение.Удалить(ИМЯ_СВОЙСТВА_ИДЕНТИФИКАТОРА)
            ;
        ;
        
        возврат Результат
    ;
    
    // Ключ - Представление, Значение - Имя
    метод ОписаниеТаблиц(): Соответствие<Строка, Строка>
        знч Результат = <Строка, Строка>{:}
        
        для Свойство из ТипДанных.ПолучитьСвойства()
            знч Тип = Свойство.Типы.Единственный()
            если Тип.МожетБытьПрисвоенВ(Тип<ЧитаемыйМассив<Объект>>)
                знч Имя = Свойство.Имя.Представление()
                знч Псевдоним = МенеджерСтрок.ВОбычныйРегистр(Имя)
                Результат.Вставить(Псевдоним, Имя)
            ;
        ;
        
        возврат Результат
    ;
    
    статический метод ТипСтрокиТаблицы(Свойство: ОтражениеСвойства): Тип
        // Заменить на ПараметрыТипа после перехода на 6.0
        знч Тип = Свойство.Типы.Единственный()
        знч Массив = Тип.СоздатьЭкземпляр([]) как Массив<неизвестно>
        Массив.ДобавитьНовый()
        
        возврат Массив[0].ПолучитьТип()
    ;
    
    статический метод КопияСвойств(Свойства: Соответствие<Строка, Строка>): Соответствие<Строка, Строка>
        знч Результат = <Строка, Строка>{:}
        Свойства.ДляКаждого(Свойство -> Результат.Вставить(Свойство))
        
        возврат Результат
    ;
    
    @НаСервере
    метод ОбязательныеСвойства(): Массив<Строка>
        знч Результат: Массив<Строка>
        для Свойство из ПсевдонимыСвойств(Истина)
            если Свойство.Значение.ПолноеСовпадение('.*\*$')
                Результат.Добавить(Свойство.Ключ)
            ;
        ;
        
        возврат Результат
    ;
    
    @НаСервере
    метод ОбязательныеСвойстваТаблиц(): Соответствие<Строка, Массив<Строка>>
        знч Результат: Соответствие<Строка, Массив<Строка>>
        знч ПсевдонимыТаблиц = ОписаниеТаблиц()
        
        для Таблица из ПсевдонимыСвойствТаблиц(Истина)
            знч СвойстваТаблицы: Массив<Строка>
            для Свойство из Таблица.Значение
                если Свойство.Значение.ПолноеСовпадение('.*\*$')
                    СвойстваТаблицы.Добавить(Свойство.Ключ)
                ;
            ;
            
            Результат.Вставить(ПсевдонимыТаблиц[Таблица.Ключ], СвойстваТаблицы)
        ;
        
        возврат Результат
    ;
    
    @ВПроекте
    @НаСервере
    статический метод НовоеОписание(Идентификатор: Ууид, Наименование: Строка, ТипДанных: Тип, ЕстьПрисоединенныеФайлы = Ложь): ОписаниеИмпортируемыхДанных
        знч Результат = новый ОписаниеИмпортируемыхДанных(
            Идентификатор = Идентификатор,
            Наименование = Наименование,
            ТипДанных = ТипДанных,
            ЕстьПрисоединенныеФайлы = ЕстьПрисоединенныеФайлы
        )
        
        Результат.Свойства.Вставить("%{ИМЯ_СВОЙСТВА_ИДЕНТИФИКАТОРА}*", ИМЯ_СВОЙСТВА_ИДЕНТИФИКАТОРА)
        
        знч ПорядокСвойств = Результат.СвойстваПоПорядку()
        знч ПорядокСвойствТаблиц = Результат.СвойстваТаблицПоПорядку()
        знч ОтсортированныеСвойства = ТипДанных.ПолучитьСвойства().СортироватьПо(Свойство -> (ПорядокСвойств[Свойство.Имя.Представление()]))
        для Свойство из ОтсортированныеСвойства
            знч Тип = Свойство.Типы.Единственный()
            знч ЭтоТаблица = Тип.МожетБытьПрисвоенВ(Тип<ЧитаемыйМассив<Объект>>)
            знч Имя = Свойство.Имя.Представление()
            знч Псевдоним = МенеджерСтрок.ВОбычныйРегистр(Имя)
            
            если ЭтоТаблица
                знч СвойстваТаблицы = <Строка, Строка>{"%{ИМЯ_СВОЙСТВА_ИДЕНТИФИКАТОРА}*" : ИМЯ_СВОЙСТВА_ИДЕНТИФИКАТОРА}
                знч ОтсортированныеСвойстваТаблицы =
                    ТипСтрокиТаблицы(Свойство).ПолучитьСвойства().СортироватьПо(
                        СвойствоТаблицы -> (ПорядокСвойствТаблиц[Имя][СвойствоТаблицы.Имя.Представление()]))
                для СвойствоТаблицы из ОтсортированныеСвойстваТаблицы
                    Результат.ТипыСвойств.Вставить("%Имя.%{СвойствоТаблицы.Имя.Представление()}", СвойствоТаблицы.Типы.Единственный())
                    СвойстваТаблицы.Вставить(МенеджерСтрок.ВОбычныйРегистр(СвойствоТаблицы.Имя.Представление()), СвойствоТаблицы.Имя.Представление())
                ;
                Результат.Таблицы.Вставить(Псевдоним, СвойстваТаблицы)
            иначе
                Результат.ТипыСвойств.Вставить(Имя, Тип)
                Результат.Свойства.Вставить(Псевдоним + (Свойство.ТолькоЧтение ? "*" : ""), Имя)
            ;
        ;
        
        возврат Результат
    ;
;

@ВПроекте
@НаСервере
структура НастройкаСопоставления
    обз знч ТипПоля: Тип
    знч ФункцияПоиска: ((Массив<Строка>) -> Соответствие<Строка, Массив<Объект?>>)?
    знч СоздаватьНовый: Булево
;

@ВПроекте
@НаКлиенте @НаСервере
структура ЗагруженныеДанные
    обз знч Идентификатор: Строка
    обз знч НомерСтроки: Число
    обз знч Состояние: СостояниеСтроки
    обз знч Данные: Соответствие<Строка, Объект?>
    
    @ВПроекте
    @НаКлиенте @НаСервере
    статический метод Данные(Данные: Массив<ЗагруженныеДанные>): Массив<Соответствие<Строка, Объект?>>
        знч Результат = <Соответствие<Строка, Объект?>>[]
        Данные.ДляКаждого(Элемент -> Результат.Добавить(Элемент.Данные))
        
        возврат Результат
    ;
    
    @ВПроекте
    @НаСервере
    метод ДесериализованныйОбъект(Тип: Тип): Объект?
        знч НастройкиЧтения = новый НастройкиЧтенияОбъектовJson()
        НастройкиЧтения.ИнициализироватьПустыеКоллекции = Истина
        НастройкиЧтения.ИгнорироватьНеизвестныеСвойства = Истина
        
        возврат СериализацияJson.ПрочитатьОбъект(СериализацияJson.ЗаписатьОбъект(Данные), Тип, НастройкиЧтения)
    ;
;

@ВПроекте
@НаКлиенте @НаСервере
перечисление СтатусыПроверки
    Ок, Предупреждение, Ошибка
;

@ВПроекте
@НаКлиенте @НаСервере
структура РезультатПроверки
    пер Статус = СтатусыПроверки.Ок
    пер Пояснение: Строка
;

@ВПодсистеме
структура СостояниеСтроки
    пер Статус = СтатусыПроверки.Ок
    знч СостоянияПолей: Соответствие<Строка, СостояниеПоля>
    знч СостоянияТаблиц: Соответствие<Строка, СостояниеТаблицы>
    знч РезультатПроверок: Массив<РезультатПроверки>
    
    метод Очистить()
        Статус = СтатусыПроверки.Ок
        СостоянияПолей.Очистить()
        СостоянияТаблиц.Очистить()
        РезультатПроверок.Очистить()
    ;
    
    @ВПодсистеме
    статический метод ОбновитьСтатусы(Данные: Массив<ЗагруженныеДанные>)
        для ДанныеСтроки из Данные
            ДанныеСтроки.Состояние.ОбновитьСтатус()
            ДанныеСтроки.Данные.Вставить(ИМЯ_ПОЛЯ_СОСТОЯНИЕ_СТРОКИ, ДанныеСтроки.Состояние)
        ;
    ;
    
    @ВПодсистеме
    метод ОбновитьСтатус()
        пер ЕстьОшибка = Ложь
        пер ЕстьПредупреждение = Ложь
        
        для СостояниеПоля из СостоянияПолей
            если СостояниеПоля.Значение.Статус == СтатусыПроверки.Ошибка
                ЕстьОшибка = Истина
                прервать
            иначе если СостояниеПоля.Значение.Статус == СтатусыПроверки.Предупреждение
                ЕстьПредупреждение = Истина
            ;
        ;
        
        для СостояниеТаблицы из СостоянияТаблиц
            если СостояниеТаблицы.Значение.Статус == СтатусыПроверки.Ошибка
                ЕстьОшибка = Истина
                прервать
            иначе если СостояниеТаблицы.Значение.Статус == СтатусыПроверки.Предупреждение
                ЕстьПредупреждение = Истина
            ;
        ;
        
        для РезультатПроверки из РезультатПроверок
            если РезультатПроверки.Статус == СтатусыПроверки.Ошибка
                ЕстьОшибка = Истина
            иначе если РезультатПроверки.Статус == СтатусыПроверки.Предупреждение
                ЕстьПредупреждение = Истина
            ;
        ;
        
        если ЕстьОшибка
            Статус = СтатусыПроверки.Ошибка
        иначе если ЕстьПредупреждение
            Статус = СтатусыПроверки.Предупреждение
        иначе
            Статус = СтатусыПроверки.Ок
        ;
    ;
    
    @ВПодсистеме
    метод Пояснение(): Строка
        знч Результат = <Строка>[]
        для СостояниеПоля из СостоянияПолей
            если не СостояниеПоля.Значение.Описание.Пусто()
                Результат.Добавить("- %{СостояниеПоля.Ключ} : %{СостояниеПоля.Значение.Описание}")
            ;
        ;
        
        для СостояниеТаблицы из СостоянияТаблиц
            если не СостояниеТаблицы.Значение.Описание.Пусто()
                Результат.Добавить("- %{СостояниеТаблицы.Ключ} : %{СостояниеТаблицы.Значение.Описание}")
            ;
        ;
        
        для РезультатПроверки из РезультатПроверок
            если не РезультатПроверки.Пояснение.Пусто()
                Результат.Добавить("- %{РезультатПроверки.Пояснение}")
            ;
        ;
        
        возврат Результат.Соединить("\n")
    ;
;

@ВПодсистеме
структура СостояниеПоля
    пер Статус = СтатусыПроверки.Ок
    пер ОценкаИнформации = ОценкаИнформации.Обычная
    пер Описание: Строка
;

@ВПодсистеме
структура СостояниеТаблицы
    пер Статус = СтатусыПроверки.Ок
    пер ОценкаИнформации = ОценкаИнформации.Обычная
    пер Описание: Строка
    знч СостоянияПолей: Соответствие<Строка, СостояниеПоля>
;

@ВПроекте
@НаКлиенте @НаСервере
структура РезультатЗагрузки
    знч Объект: ЭлементСпискаВыбора?
    знч Состояние: РезультатПроверки
    
    @ВПроекте
    статический метод ЗагруженныеОбъекты(Результат: Массив<РезультатЗагрузки>): Массив<ЭлементСпискаВыбора>
        знч ЗагруженныеОбъекты = <ЭлементСпискаВыбора>[]
        
        для Элемент из Результат
            если Элемент.Объект != Неопределено
                ЗагруженныеОбъекты.Добавить(Элемент.Объект)
            ;
        ;
        
        возврат ЗагруженныеОбъекты
    ;
    
    @ВПроекте
    статический метод Ошибки(Результат: Массив<РезультатЗагрузки>): Массив<Строка>
        знч Ошибки = <Строка>[]
        
        пер НомерСтроки = 0
        для Элемент из Результат
            НомерСтроки += 1
            если Элемент.Состояние.Статус == СтатусыПроверки.Ошибка
                Ошибки.Добавить("Строка %НомерСтроки. %{Элемент.Состояние.Пояснение}")
            ;
        ;
    
        возврат Ошибки
    ;
;