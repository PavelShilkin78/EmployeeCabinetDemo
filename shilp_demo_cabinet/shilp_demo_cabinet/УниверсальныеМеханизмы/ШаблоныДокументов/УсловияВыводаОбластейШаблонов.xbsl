импорт УниверсальныеМеханизмы
импорт ОбщиеСтандартные
импорт ВебApi

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат ШаблоныДокументовПоставщикОграничений.ПолучитьСервис().УсловияВыводаОбластейШаблоновРазрешенияДоступа()
;

//КонецОбласти

// JSON

@ВПроекте
структура УсловияОбластейJson_V2_1
    обз знч name: Строка
    обз знч Conditions: Массив<ГруппаУсловийJson_V2_1 | ЭлементУсловийJson_V2_1> 
;

@ВПроекте
структура ГруппаУсловийJson_V2_1
    обз знч groupType: Строка
    обз знч items: Массив<ГруппаУсловийJson_V2_1 | ЭлементУсловийJson_V2_1> 
;

@ВПроекте
структура ЭлементУсловийJson_V2_1
    обз знч leftValue: Строка
    обз знч comparisonType: Строка 
    обз знч rightValue: Строка|Число|Булево|Дата?
    обз знч referenceValueType: Строка?
;

метод ВидГруппыЭлементаУсловийИзJson(ВидГруппыЭлементаУсловийВJson: Строка): ВидыЭлементовУсловий
    выбор ВидГруппыЭлементаУсловийВJson
    когда "noGroup"
        возврат ВидыЭлементовУсловий.ГруппаНе
    когда "orGroup"
        возврат ВидыЭлементовУсловий.ГруппаИли
    ;
    возврат ВидыЭлементовУсловий.ГруппаИ
;

метод ВидСравненияИзJson(ВидСравненияВJson: Строка): ВидыСравнения
    выбор ВидСравненияВJson
    когда "greater"
        возврат ВидыСравнения.Больше
    когда "greaterOrEqual"
        возврат ВидыСравнения.БольшеИлиРавно
    когда "inHierarchy"
        возврат ВидыСравнения.ВИерархии
    когда "inList"
        возврат ВидыСравнения.ВСписке
    когда "inListByHierarchy"
        возврат ВидыСравнения.ВСпискеПоИерархии
    когда "filled"
        возврат ВидыСравнения.Заполнено
    когда "less"
        возврат ВидыСравнения.Меньше
    когда "lessOrEqual"
        возврат ВидыСравнения.МеньшеИлиРавно
    когда "beginsWith"
        возврат ВидыСравнения.НачинаетсяС
    когда "notInHierarchy"
        возврат ВидыСравнения.НеВИерархии
    когда "notInList"
        возврат ВидыСравнения.НеВСписке
    когда "notInListByHierarchy"
        возврат ВидыСравнения.НеВСпискеПоИерархии
    когда "notFilled"
        возврат ВидыСравнения.НеЗаполнено
    когда "notBeginsWith"
        возврат ВидыСравнения.НеНачинаетсяС
    когда "notLike"
        возврат ВидыСравнения.НеПодобно
    когда "notEqual"
        возврат ВидыСравнения.НеРавно
    когда "notContains"
        возврат ВидыСравнения.НеСодержит
    когда "like"
        возврат ВидыСравнения.Подобно
    когда "contains"
        возврат ВидыСравнения.Содержит
    ;
    возврат ВидыСравнения.Равно
;

@ВПроекте
метод ЗагрузитьУсловияВыводаИзJson(Подсистема: Строка, ИмяРесурса: Строка, УсловияВыводаОбластей: Массив<УсловияОбластейJson_V2_1>?,
    Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    
    знч Ид = УниверсальныеМеханизмы.Ид(Подсистема, ИмяРесурса)
    знч ПрежниеУсловия = УсловияВыводаОбластейИдентификатора(Ид)
    для ПрежнееУсловие из ПрежниеУсловия
        знч ПрежнееУсловиеОбъект = (ПрежнееУсловие["Ссылка"] как УсловияВыводаОбластейШаблонов.Ссылка).ЗагрузитьОбъект(Истина)
        если ПрежнееУсловиеОбъект != Неопределено
            ПрежнееУсловиеОбъект.Удалить()
        ;
    ;
    если УсловияВыводаОбластей == Неопределено
        возврат
    ;
    для УсловияВыводаОбласти из УсловияВыводаОбластей
        пер Родитель: УсловияВыводаОбластейШаблонов.Ссылка?
        если не УсловияВыводаОбласти.name.Пусто()
            Родитель = НоваяГруппаУсловий(
                Ид,
                УсловияВыводаОбласти.name,
                ВидыЭлементовУсловий.ГруппаИ)
        ;
        ЗагрузитьУсловияИзJson(Ид, УсловияВыводаОбласти.name, УсловияВыводаОбласти.Conditions, Родитель, Сервисы)
    ;
;

метод ЗагрузитьУсловияИзJson(Ид: Строка, ИмяОбласти: Строка, УсловияВывода: Массив<ГруппаУсловийJson_V2_1 | ЭлементУсловийJson_V2_1>,
    Родитель: УсловияВыводаОбластейШаблонов.Ссылка?, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    
    для ЭлементУсловия из УсловияВывода
        если ЭлементУсловия это ГруппаУсловийJson_V2_1
            ЗагрузитьГруппуУсловийИзJson(Ид, ИмяОбласти, ЭлементУсловия как ГруппаУсловийJson_V2_1, Родитель, Сервисы)
        иначе
            ЗагрузитьЭлементУсловияИзJson(Ид, ИмяОбласти, ЭлементУсловия как ЭлементУсловийJson_V2_1, Родитель, Сервисы)
        ;
    ;
;

метод ЗагрузитьГруппуУсловийИзJson(Ид: Строка, ИмяОбласти: Строка, ГруппаУсловийВJson: ГруппаУсловийJson_V2_1,
    Родитель: УсловияВыводаОбластейШаблонов.Ссылка?, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    
    пер УсловиеОбласти = НоваяГруппаУсловий(Ид, ИмяОбласти, ВидГруппыЭлементаУсловийИзJson(ГруппаУсловийВJson.groupType), Родитель)
    ЗагрузитьУсловияИзJson(Ид, ИмяОбласти, ГруппаУсловийВJson.items, УсловиеОбласти, Сервисы)
;

метод ЗагрузитьЭлементУсловияИзJson(Ид: Строка, ИмяОбласти: Строка, ЭлементУсловийВJson: ЭлементУсловийJson_V2_1, Родитель: УсловияВыводаОбластейШаблонов.Ссылка?,
    Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    
    пер УсловиеОбласти = новый УсловияВыводаОбластейШаблонов.Объект()
    УсловиеОбласти.Ид = Ид
    УсловиеОбласти.Наименование = Родитель.Представление()
    УсловиеОбласти.Родитель = Родитель
    УсловиеОбласти.Вид = ВидыЭлементовУсловий.Элемент
    УсловиеОбласти.ЛевоеЗначение = ЭлементУсловийВJson.leftValue
    УсловиеОбласти.ВидСравнения = ВидСравненияИзJson(ЭлементУсловийВJson.comparisonType)
    если ЭлементУсловийВJson.referenceValueType == Неопределено
        УсловиеОбласти.ПравоеЗначение = ЭлементУсловийВJson.rightValue
    иначе
        для Сервис из ПоставщикЗначенийДляШаблонов.ПолучитьСервисы()
            пер ПравоеЗначение = Сервис.ЗначениеСсылкиПоИдентификатору(
                   ЭлементУсловийВJson.referenceValueType, ЭлементУсловийВJson.rightValue как Строка, Сервисы)
            если ПравоеЗначение != Неопределено
                УсловиеОбласти.ПравоеЗначение = ПравоеЗначение
                прервать
            ;
        ;
        если УсловиеОбласти.ПравоеЗначение == Неопределено
            УсловиеОбласти.ПравоеЗначение = "%{ЭлементУсловийВJson.referenceValueType}.%{ЭлементУсловийВJson.rightValue}"
        ;
    ;
    УсловиеОбласти.Записать()
;

// Конец

метод НоваяГруппаУсловий(Ид: Строка, ИмяОбласти: Строка, ВидГруппы: ВидыЭлементовУсловий,
    Родитель: УсловияВыводаОбластейШаблонов.Ссылка? = Неопределено): УсловияВыводаОбластейШаблонов.Ссылка
    
    пер УсловиеОбласти = новый УсловияВыводаОбластейШаблонов.Объект()
    УсловиеОбласти.Ид = Ид
    УсловиеОбласти.Наименование = ИмяОбласти
    УсловиеОбласти.Родитель = Родитель
    УсловиеОбласти.Вид = ВидГруппы
    УсловиеОбласти.Записать()
    возврат УсловиеОбласти.Ссылка
;

@ВПодсистеме
метод УсловияВыводаОбластейИдентификаторов(Идентификаторы: ЧитаемаяКоллекция<Строка>? = Неопределено):
    Соответствие<Строка, Массив<ЧитаемоеСоответствие<Строка, Объект?>>>
    
    знч ФильтрПоИдентификаторамЗадан = Идентификаторы != Неопределено
    пер УсловияВывода = новый Соответствие<Строка, Массив<ЧитаемоеСоответствие<Строка, Объект?>>>()
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            Ид,
            Наименование,
            Родитель,
            Вид,
            ЛевоеЗначение,
            ВидСравнения,
            ПравоеЗначение
        Из  
            УсловияВыводаОбластейШаблонов
        Где
            (Не %ФильтрПоИдентификаторамЗадан
                Или Ид В (%Идентификаторы))
        Упорядочить По
            Ид,
            Наименование,
            Родитель}
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        пер УсловияИдентификатора: Массив<ЧитаемоеСоответствие<Строка, Объект?>>?
        если УсловияВывода.СодержитКлюч(СтрокаРезультата.Ид)
            УсловияИдентификатора = УсловияВывода.Получить(СтрокаРезультата.Ид)
        иначе
            УсловияИдентификатора = новый Массив<ЧитаемоеСоответствие<Строка, Объект?>>()
            УсловияВывода.Вставить(СтрокаРезультата.Ид, УсловияИдентификатора)
        ;
        УсловияИдентификатора.Добавить(МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(СтрокаРезультата, Результат))
    ;
    возврат УсловияВывода
;

метод УсловияВыводаОбластейИдентификатора(Ид: Строка): Массив<ЧитаемоеСоответствие<Строка, Объект?>>?
    возврат УсловияВыводаОбластейИдентификаторов([Ид]).ПолучитьИлиУмолчание(Ид, новый Массив<ЧитаемоеСоответствие<Строка, Объект?>>())
;

@ВПроекте
метод УсловияВыводаОбластей(Ид: Строка): Соответствие<Строка, ГруппаУсловий>
    знч УсловияИдентификатора = УсловияВыводаОбластейИдентификатора(Ид)
    возврат УсловияВыводаОбластей(УсловияИдентификатора)
;

@ВПроекте
метод УсловияВыводаОбластей(УсловияИдентификатора: Массив<ЧитаемоеСоответствие<Строка, Объект?>>?): Соответствие<Строка, ГруппаУсловий>
    пер УсловияВывода = новый Соответствие<Строка, ГруппаУсловий>()
    если УсловияИдентификатора != Неопределено
        
        пер ГруппыРодителей = новый Соответствие<УсловияВыводаОбластейШаблонов.Ссылка?, ГруппаУсловий>()
        
        // Группа условий на всю печатную форму
        пер ЭлементГруппы: ЭлементУсловия|ГруппаУсловий|?
        ЭлементГруппы = новый ГруппаУсловий()
        (ЭлементГруппы как ГруппаУсловий).Вид = ВидыЭлементовУсловий.ГруппаИ
        УсловияВывода.Вставить("", ЭлементГруппы как ГруппаУсловий)
        ГруппыРодителей.Вставить(Неопределено, ЭлементГруппы как ГруппаУсловий)
    
        для УсловияОбласти из УсловияИдентификатора
            если УсловияОбласти["Вид"] == ВидыЭлементовУсловий.Элемент
                ЭлементГруппы = новый ЭлементУсловия()
                (ЭлементГруппы как ЭлементУсловия).ЛевоеЗначение   = УсловияОбласти["ЛевоеЗначение"] как Строка
                (ЭлементГруппы как ЭлементУсловия).ВидСравнения    = УсловияОбласти["ВидСравнения"] как ВидыСравнения
                (ЭлементГруппы как ЭлементУсловия).ПравоеЗначение  = УсловияОбласти["ПравоеЗначение"] как неизвестно
            иначе
                ЭлементГруппы = новый ГруппаУсловий()
                (ЭлементГруппы как ГруппаУсловий).Вид = УсловияОбласти["Вид"] как ВидыЭлементовУсловий
                ГруппыРодителей.Вставить(УсловияОбласти["Ссылка"] как УсловияВыводаОбластейШаблонов.Ссылка, ЭлементГруппы как ГруппаУсловий)
                знч УсловияГруппы = УсловияВывода.ПолучитьИлиУмолчание(УсловияОбласти["Наименование"] как Строка)
                если УсловияГруппы == Неопределено
                    УсловияВывода.Вставить(УсловияОбласти["Наименование"] как Строка, ЭлементГруппы как ГруппаУсловий)
                    продолжить
                ;
            ;
            пер ГруппаРодителя = ГруппыРодителей.Получить(УсловияОбласти["Родитель"] как УсловияВыводаОбластейШаблонов.Ссылка?)
            ГруппаРодителя.Элементы.Добавить(ЭлементГруппы)
        ;
    ;
    возврат УсловияВывода
;
