импорт ВебApi
импорт Компания::Согласования
импорт ОбщиеСтандартные

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат ШаблоныДокументовПоставщикОграничений.ПолучитьСервис().ШаблоныДокументовРазрешенияДоступа()
;

//КонецОбласти

@ВПроекте
конст ИД_ПОДСИСТЕМЫ = "ШаблоныДокументов"

@ВПроекте
конст КОД_ДОКУМЕНТА_КЭДО_ПРОЧЕЕ = "12.999"

// JSON

@ВПроекте
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена >= Версия{3.0}
        возврат Тип<ШаблонДокумента_3_0>
    иначе если ВерсияФорматаОбмена >= Версия{2.2}
        возврат Тип<ШаблонДокумента_2_2>
    ;
;

@ВПроекте
метод ТипКоллекцииДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена >= Версия{3.0}
        возврат Тип<Массив<ШаблонДокумента_3_0>>
    иначе если ВерсияФорматаОбмена >= Версия{2.2}
        возврат Тип<Массив<ШаблонДокумента_2_2>>
    ;
;

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "documentTemplates"
;

@ВПроекте
структура ШаблонДокумента_2_2
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка
    @JsonСвойство(Имя = "IDTemplate")
    обз знч ИмяШаблона: Строка?
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка
    @JsonСвойство(Имя = "approvalRequired")
    обз знч НеобходимоСогласование: Булево
    @JsonСвойство(Имя = "notUsed")
    обз знч Архивирован: Булево
    @JsonСвойство(Имя = "personnelEventCode")
    обз знч КодКэдо: Строка?
    @JsonСвойство(Имя = "templateBody")
    обз пер ТелоШаблона: Строка
    @JsonСвойство(Имя = "regionsConditions")
    обз пер УсловияОбластей: Массив<УсловияВыводаОбластейШаблонов.УсловияОбластейJson_V2_1>?    
    @JsonСвойство(Имя = "attributes")
    обз пер Реквизиты: Массив<РеквизитыШаблонов.РеквизитДанных_2_1>?    
;

@ВПроекте
структура ШаблонДокумента_3_0
    @JsonСвойство(Имя = "ID")
    обз знч Ид: Строка
    @JsonСвойство(Имя = "IDTemplate")
    обз знч ИмяШаблона: Строка?
    @JsonСвойство(Имя = "name")
    обз знч Наименование: Строка
    @JsonСвойство(Имя = "approvalRequired")
    обз знч НеобходимоСогласование: Булево
    @JsonСвойство(Имя = "notUsed")
    обз знч Архивирован: Булево
    @JsonСвойство(Имя = "personnelEventCode")
    обз знч КодКэдо: Строка?
    @JsonСвойство(Имя = "templateBody")
    обз пер ТелоШаблона: Строка
    @JsonСвойство(Имя = "regionsConditions")
    обз пер УсловияОбластей: Массив<УсловияВыводаОбластейШаблонов.УсловияОбластейJson_V2_1>?    
    @JsonСвойство(Имя = "attributes")
    обз пер Реквизиты: Массив<РеквизитыШаблонов.РеквизитДанных_3_0>?    
    @JsonСвойство(Имя = "signingRequired")
    обз знч НеобходимоПодписание: Булево
    @JsonСвойство(Имя = "attachmentsRequired")
    обз знч НеобходимоНаличиеВложений: Булево
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ШаблонДокумента_2_2, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    
    исп Транзакции.Начать()

    знч ШаблонДокумента = Сервисы.ПрочитатьОбъект(
        ДанныеJson.Ид,
        &УниверсальныеМеханизмы::ШаблоныДокументов::ШаблоныДокументов.Объект.новый(Ууид), Тип<ШаблоныДокументов.Ссылка>) как ШаблоныДокументов.Объект
    
    ШаблонДокумента.Наименование = ДанныеJson.Наименование
    ШаблонДокумента.НеобходимоСогласование = ДанныеJson.НеобходимоСогласование
    ШаблонДокумента.НеобходимоПодписание = ШаблонДокумента.НеобходимоСогласование
    ШаблонДокумента.Архивирован = ДанныеJson.Архивирован
    если ДанныеJson.КодКэдо == Неопределено
        или ДанныеJson.КодКэдо!.Пусто()
        
        ШаблонДокумента.КодКэдо = КОД_ДОКУМЕНТА_КЭДО_ПРОЧЕЕ
    иначе
        ШаблонДокумента.КодКэдо = ДанныеJson.КодКэдо
    ;
    если ШаблонДокумента.ИдентификаторОбъекта.Пусто()
        ШаблонДокумента.ИдентификаторОбъекта = ШаблонДокумента.Ссылка.Ид.ВСтроку()
    ;
    
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ШаблонДокумента, ДанныеJson.Ид), Сервисы.ИнструментыМенеджераОбъекта)
    ШаблоныДокументовМенеджер.ЗаписатьШаблонДокумента(
        ИД_ПОДСИСТЕМЫ,
        ШаблонДокумента.ИдентификаторОбъекта,
        ДанныеJson.ТелоШаблона)
    РеквизитыШаблонов.ЗагрузитьПараметрыИзJson(
        ИД_ПОДСИСТЕМЫ,
        ШаблонДокумента.ИдентификаторОбъекта,
        ДанныеJson.Реквизиты)
    УсловияВыводаОбластейШаблонов.ЗагрузитьУсловияВыводаИзJson(
        ИД_ПОДСИСТЕМЫ,
        ШаблонДокумента.ИдентификаторОбъекта,
        ДанныеJson.УсловияОбластей,
        Сервисы)
;

@ВПроекте
метод ЗагрузитьОбъектИзJson(ДанныеJson: ШаблонДокумента_3_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    
    исп Транзакции.Начать()

    знч ШаблонДокумента = Сервисы.ПрочитатьОбъект(
        ДанныеJson.Ид,
        &УниверсальныеМеханизмы::ШаблоныДокументов::ШаблоныДокументов.Объект.новый(Ууид), Тип<ШаблоныДокументов.Ссылка>) как ШаблоныДокументов.Объект
    
    ШаблонДокумента.Наименование = ДанныеJson.Наименование
    ШаблонДокумента.НеобходимоСогласование = ДанныеJson.НеобходимоСогласование
    ШаблонДокумента.НеобходимоПодписание = ДанныеJson.НеобходимоПодписание
    ШаблонДокумента.НеобходимоНаличиеВложений = ДанныеJson.НеобходимоНаличиеВложений
    ШаблонДокумента.Архивирован = ДанныеJson.Архивирован
    если ДанныеJson.КодКэдо == Неопределено
        или ДанныеJson.КодКэдо!.Пусто()
        
        ШаблонДокумента.КодКэдо = КОД_ДОКУМЕНТА_КЭДО_ПРОЧЕЕ
    иначе
        ШаблонДокумента.КодКэдо = ДанныеJson.КодКэдо
    ;
    если ШаблонДокумента.ИдентификаторОбъекта.Пусто()
        ШаблонДокумента.ИдентификаторОбъекта = ШаблонДокумента.Ссылка.Ид.ВСтроку()
    ;
    
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(ШаблонДокумента, ДанныеJson.Ид), Сервисы.ИнструментыМенеджераОбъекта)
    ШаблоныДокументовМенеджер.ЗаписатьШаблонДокумента(
        ИД_ПОДСИСТЕМЫ,
        ШаблонДокумента.ИдентификаторОбъекта,
        ДанныеJson.ТелоШаблона)
    РеквизитыШаблонов.ЗагрузитьПараметрыИзJson(
        ИД_ПОДСИСТЕМЫ,
        ШаблонДокумента.ИдентификаторОбъекта,
        ДанныеJson.Реквизиты)
    УсловияВыводаОбластейШаблонов.ЗагрузитьУсловияВыводаИзJson(
        ИД_ПОДСИСТЕМЫ,
        ШаблонДокумента.ИдентификаторОбъекта,
        ДанныеJson.УсловияОбластей,
        Сервисы)
;

@ВПодсистеме
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> ШаблоныДокументов.ПолучитьСсылку(Ууид))
;

// Конец

@ВПроекте
@НаСервере
метод ДанныеШаблонаДокументов(СсылкаНаШаблон: ШаблоныДокументов.Ссылка): ЧитаемоеСоответствие<Строка, Объект?>
    знч Запрос = Запрос{
        Выбрать
            Ссылка Как Ссылка,
            Наименование Как Наименование,
            ИдентификаторОбъекта Как ИдентификаторОбъекта,
            НеобходимоСогласование Как НеобходимоСогласование,
            Архивирован Как Архивирован,
            КодКэдо Как КодКэдо
        Из
            ШаблоныДокументов
        Где
            Ссылка == %СсылкаНаШаблон}
    исп РезультатЗапроса = Запрос.Выполнить()
    знч РезультатСтроки = новый ЧитаемыйМассив(РезультатЗапроса)
    возврат МенеджерЗапросов.СтрокаРезультатаЗапросаВСоответствие(РезультатСтроки[0], РезультатЗапроса)
;

@ВПроекте
@НаСервере
метод НеобходимоСогласованиеИлиПодписание(Шаблон: ШаблоныДокументов.Ссылка): Булево
    знч Запрос = Запрос{
        Выбрать
            НеобходимоСогласование Как НеобходимоСогласование,
            НеобходимоПодписание Как НеобходимоПодписание
        Из
            ШаблоныДокументов
        Где
            Ссылка == %Шаблон
    }
    знч СтрокаРезультата = Запрос.Выполнить().ЕдинственныйИлиУмолчание()
    возврат (СтрокаРезультата?.НеобходимоСогласование ?? Ложь)
        или (СтрокаРезультата?.НеобходимоПодписание ?? Ложь)
;

@ВПроекте
@НаСервере @ДоступноСКлиента 
метод СписокДоступныхШаблонов(): Массив<ЭлементСпискаЗначений<ШаблоныДокументов.Ссылка>>
    
    знч УсловияВывода = УсловияВыводаОбластейШаблонов.УсловияВыводаОбластейИдентификаторов()
    пер СписокШаблонов = новый Массив<ЭлементСпискаЗначений<ШаблоныДокументов.Ссылка>>()
    знч Запрос = Запрос{
        Выбрать
           Ссылка,
           Наименование,
           ИдентификаторОбъекта
        Из
            ШаблоныДокументов
        Где
            Архивирован == Ложь}
    исп РезультатЗапроса = Запрос.Выполнить()
    пер ОбщиеДанные: ШаблоныДокументовМенеджер.ОбщиеДанныеШаблонов?
    для СтрокаРезультата из РезультатЗапроса
        знч Ид = УниверсальныеМеханизмы.Ид(ИД_ПОДСИСТЕМЫ, СтрокаРезультата.ИдентификаторОбъекта)
        знч УсловияШаблона = УсловияВывода.ПолучитьИлиУмолчание(Ид)
        если УсловияШаблона != Неопределено
            знч УсловияПоОбластям = УсловияВыводаОбластейШаблонов.УсловияВыводаОбластей(УсловияШаблона)
            если УсловияПоОбластям.СодержитКлюч("")
                знч УсловияНаДокумент = УсловияПоОбластям.Получить("")
                если не УсловияНаДокумент.Элементы.Пусто()
                    если ОбщиеДанные == Неопределено
                        ОбщиеДанные = ОбщиеДанныеШаблонов()
                    ;
                    если не ШаблоныДокументовМенеджер.ВыполняютсяУсловияВывода(
                        УсловияНаДокумент,
                        ОбщиеДанные.Данные,
                        ОбщиеДанные.ЗначенияПеречислений)
                        
                        продолжить
                    ;
                ;
            ;
        ;
        СписокШаблонов.Добавить(новый ЭлементСпискаЗначений(
            Представление = СтрокаРезультата.Наименование,
            Значение = СтрокаРезультата.Ссылка))
    ;
    возврат СписокШаблонов
;

метод ОбщиеДанныеШаблонов(): ШаблоныДокументовМенеджер.ОбщиеДанныеШаблонов
    пер ДанныеШаблона = ШаблоныДокументовМенеджер.НовыеДанныеДляШаблонаПечатнойФормы()
    ДанныеШаблона.ДанныеОбъекта.Вставить(
        "",
        новый ШаблоныДокументовМенеджер.ДанныеПечатныхФорм(
            "",
            новый Соответствие<Строка,Объект?>()))
    для Сервис из ПоставщикОбщихДанныхДляПечатныхФорм.ПолучитьСервисы()
        Сервис.ДополнитьДанныеДокументаОбщимиДанными(ДанныеШаблона)
    ;
    знч ДанныеОбъекта = ДанныеШаблона.ДанныеОбъекта.ПервыйИлиУмолчание()
    возврат новый ШаблоныДокументовМенеджер.ОбщиеДанныеШаблонов(
        ДанныеОбъекта?.Значение.Данные ?? новый Соответствие<Строка, Объект?>(),
        ДанныеШаблона.ЗначенияПеречислений)
;

@ВПроекте
метод ЗаполнитьНеобходимоПодписание()
    знч Запрос = Запрос{
        Выбрать
            Ссылка
        Из
            ШаблоныДокументов
        Где
            НеобходимоСогласование
            И Не НеобходимоПодписание}
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        знч ШаблоныДокументовОбъект = СтрокаРезультата.Ссылка.ЗагрузитьОбъект()
        ШаблоныДокументовОбъект.НеобходимоПодписание = Истина
        ШаблоныДокументовОбъект.Записать()
    ;
;

@ВПодсистеме
метод ПравилоСогласованияПоУмолчанию(ВидОбращения: ВидыСогласуемыхЗаявлений.Ссылка): Согласования.ПравилоСогласования
    знч ПравилоСогласования = новый Согласования.ПравилоСогласования(
        ВидСогласуемогоЗаявления = ВидОбращения,
        ТипПравила = ТипыПравилСогласования.ДляВсех,
        ПоУмолчанию = Истина)
    ПравилоСогласования.ШагиПравила.Добавить(
        новый Согласования.ШагПравилаСогласования(
            1,
            ТипыШаговСогласования.ВсеСогласующие,
            [Согласования.РольПодписантаНепосредственныйРуководитель()]
        )
    )
    возврат ПравилоСогласования
;

@ВПроекте
метод НовыйВидОбращения(Наименование: Строка, Используется: Булево): ВидыСогласуемыхЗаявлений.Ссылка
    возврат ВидыСогласуемыхЗаявлений.ДобавитьВидСогласуемогоЗаявления(
            Наименование, "employeeDocuments", Используется, Истина)
;