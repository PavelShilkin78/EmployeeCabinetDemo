импорт ОбщиеСтандартные
импорт ВебApi

@ВПроекте
структура ДанныеПечатныхФорм
    знч ИдентификаторЭлектронногоДокумента: Строка
    обз знч Данные: Соответствие<Строка, Объект?>
;

@ВПроекте
структура ДанныеДляШаблонаПечатнойФормы
    обз пер Шаблон: ДвоичныйОбъект.Ссылка?
    обз пер УсловияВывода: Соответствие<Строка, ГруппаУсловий>
    обз пер ДанныеОбъекта: Соответствие<Строка, ДанныеПечатныхФорм>
    пер ЗначенияПеречислений: Соответствие<Строка, Объект>
;

@ВПроекте
структура ОбщиеДанныеШаблонов
    пер Данные: Соответствие<Строка, Объект?>
    пер ЗначенияПеречислений: Соответствие<Строка, Объект>
;

@ВПроекте
метод ДанныеШаблонаДокумента(ДокументСсылка: Справочник.Ссылка, ДополнительныеПараметры: Соответствие<Строка, Объект>? = Неопределено): ДанныеДляШаблонаПечатнойФормы
    
    пер ДанныеШаблона:  ШаблоныДокументовМенеджер.ДанныеДляШаблонаПечатнойФормы?
    для Сервис из ПоставщикШаблонов.ПолучитьСервисы()
        ДанныеШаблона = Сервис.ДанныеШаблонаДокумента(ДокументСсылка, ДополнительныеПараметры)
        если ДанныеШаблона != Неопределено
            прервать
        ;
    ;
    если ДанныеШаблона == Неопределено
        ДанныеШаблона = НовыеДанныеДляШаблонаПечатнойФормы()
    ;
    для Сервис из ПоставщикОбщихДанныхДляПечатныхФорм.ПолучитьСервисы()
        Сервис.ДополнитьДанныеДокументаОбщимиДанными(ДанныеШаблона)
    ;
    возврат ДанныеШаблона
;

@ВПодсистеме
@НаСервере
метод НовыеДанныеДляШаблонаПечатнойФормы(): ДанныеДляШаблонаПечатнойФормы
    возврат новый ШаблоныДокументовМенеджер.ДанныеДляШаблонаПечатнойФормы(
        Ресурс{МакетДокументаПоУмолчанию.mxl}.Ссылка,
        УсловияВыводаОбластейШаблонов.УсловияВыводаОбластей(""),
        новый Соответствие<Строка, ДанныеПечатныхФорм>())
;

@ВПроекте
@НаСервере
метод РеквизитыШаблона(Владелец: ОбъектСПечатнойФормой.Ссылка?, ИдШаблона: Строка): РеквизитыШаблона
    пер РеквизитыШаблонаОбъекта = новый РеквизитыШаблона()
    РеквизитыШаблонаОбъекта.Владелец = Владелец
    РеквизитыШаблонаОбъекта.Ид = ИдШаблона
    если Владелец == Неопределено
        РеквизитыШаблонаОбъекта.Реквизиты.ДобавитьВсе(РеквизитыШаблонов.РеквизитыШаблона(ИдШаблона))
    иначе
        исп ПривилегированныйРежим = КонтекстДоступа.Привилегированный()
        РеквизитыШаблонаОбъекта.Реквизиты.ДобавитьВсе(ЗначенияРеквизитовМакетовДокументов.РеквизитыОбъекта(Владелец, ИдШаблона))
        ПривилегированныйРежим.Закрыть()
    ;
    возврат РеквизитыШаблонаОбъекта
;

@ВПроекте
@НаСервере
метод СохранитьРеквизиты(РеквизитыОбъекта: РеквизитыШаблона?)
    если РеквизитыОбъекта == Неопределено
        возврат
    ;
    исп ПривилегированныйРежим = КонтекстДоступа.Привилегированный()
    ЗначенияРеквизитовМакетовДокументов.СохранитьРеквизитыОбъекта(РеквизитыОбъекта.Владелец, РеквизитыОбъекта.Реквизиты)
    ПривилегированныйРежим.Закрыть()
;

@ВПроекте
@НаСервере
метод ВыполняютсяУсловияВывода(УсловияВывода: ГруппаУсловий,
    ДанныеДляПечати: Соответствие<Строка, Объект?>, ЗначенияПеречислений: Соответствие<Строка, Объект>): Булево
    
    пер Результат = Истина
    для УсловиеВывода из УсловияВывода.Элементы
        пер РезультатВыполненияУсловия = Истина
        если УсловиеВывода это ЭлементУсловия
            если не ВыполняетсяУсловиеЭлемента(УсловиеВывода как ЭлементУсловия, ДанныеДляПечати, ЗначенияПеречислений)
                РезультатВыполненияУсловия = Ложь
            ;
        иначе если не ВыполняютсяУсловияВывода(УсловиеВывода как ГруппаУсловий, ДанныеДляПечати, ЗначенияПеречислений)
            РезультатВыполненияУсловия = Ложь
        ;
        // По или прерываем по первому значению Истина
        если УсловияВывода.Вид == ВидыЭлементовУсловий.ГруппаИли
            и РезультатВыполненияУсловия
            
            Результат = Истина
            прервать
        // Группы И и Не по первому результату Ложь
        иначе если не РезультатВыполненияУсловия
            Результат = Ложь
            если УсловияВывода.Вид != ВидыЭлементовУсловий.ГруппаИли
                прервать
            ;
        ;
    ;
    если УсловияВывода.Вид == ВидыЭлементовУсловий.ГруппаНе
        Результат = не Результат
    ;
    возврат Результат
;

метод ВыполняетсяУсловиеЭлемента(ЭлементУсловий: ЭлементУсловия, ДанныеДляПечати: Соответствие<Строка, Объект?>, ЗначенияПеречислений: Соответствие<Строка, Объект>): Булево
    пер Результат = Ложь
    знч ЛевоеЗначение = ЭлементУсловий.ЛевоеЗначение.Заменить(".", "")
    пер ЛевоеЗначениеNull = не ДанныеДляПечати.СодержитКлюч(ЛевоеЗначение)
    если не ЛевоеЗначениеNull
        знч ЗначениеОбъекта = ДанныеДляПечати.ПолучитьИлиУмолчание(ЛевоеЗначение, Null)
        если ЗначениеОбъекта != Null
        
            знч ПравоеЗначениеСтрокой = ЗначениеОбъектаСтрокой(ЭлементУсловий.ПравоеЗначение)
            знч ПравоеЗначение = ПравоеЗначениеОбъекта(ЭлементУсловий.ПравоеЗначение, ЗначенияПеречислений, ЗначениеОбъекта.ПолучитьТип())
            выбор ЭлементУсловий.ВидСравнения
            когда ВидыСравнения.Больше
                Результат = (ЗначениеОбъекта как Сравнимое<неизвестно>) > (ПравоеЗначение как Сравнимое<неизвестно>)
            когда ВидыСравнения.БольшеИлиРавно
                Результат = (ЗначениеОбъекта как Сравнимое<неизвестно>) >= (ПравоеЗначение как Сравнимое<неизвестно>)
            когда ВидыСравнения.ВИерархии
                Результат = ЗначениеВИерархии(ЗначениеОбъекта, ПравоеЗначение)
            когда ВидыСравнения.ВСписке
                Результат = ВСписке(ЗначениеОбъекта, ПравоеЗначение)
            когда ВидыСравнения.ВСпискеПоИерархии
                Результат = ЗначениеВИерархии(ЗначениеОбъекта, ПравоеЗначение)
            когда ВидыСравнения.Заполнено
                Результат = ЗначениеЗаполнено(ЗначениеОбъекта)
            когда ВидыСравнения.Меньше
                Результат = (ЗначениеОбъекта как Сравнимое<неизвестно>) < (ПравоеЗначение как Сравнимое<неизвестно>)
            когда ВидыСравнения.МеньшеИлиРавно
                Результат = (ЗначениеОбъекта как Сравнимое<неизвестно>) <= (ПравоеЗначение как Сравнимое<неизвестно>)
            когда ВидыСравнения.НачинаетсяС
                Результат = СтрокаНачинаетсяС(ЗначениеОбъекта, ПравоеЗначениеСтрокой)
            когда ВидыСравнения.НеВИерархии
                Результат = не ЗначениеВИерархии(ЗначениеОбъекта, ПравоеЗначение)
            когда ВидыСравнения.НеВСписке
                Результат = не ВСписке(ЗначениеОбъекта, ПравоеЗначение)
            когда ВидыСравнения.НеВСпискеПоИерархии
                Результат = не ЗначениеВИерархии(ЗначениеОбъекта, ПравоеЗначение)
            когда ВидыСравнения.НеЗаполнено
                Результат = не ЗначениеЗаполнено(ЗначениеОбъекта)
            когда ВидыСравнения.НеНачинаетсяС
                Результат = не СтрокаНачинаетсяС(ЗначениеОбъекта, ПравоеЗначениеСтрокой)
            когда ВидыСравнения.НеПодобно
                Результат = не СтрокаПодобна(ЗначениеОбъекта, ПравоеЗначениеСтрокой)
            когда ВидыСравнения.НеРавно
                Результат = (ЗначениеОбъекта != ПравоеЗначение)
            когда ВидыСравнения.НеСодержит
                Результат = не ЗначениеСодержит(ЗначениеОбъекта, ПравоеЗначение)
            когда ВидыСравнения.Подобно
                Результат = СтрокаПодобна(ЗначениеОбъекта, ПравоеЗначениеСтрокой)
            когда ВидыСравнения.Равно
                Результат = (ЗначениеОбъекта == ПравоеЗначение)
            когда ВидыСравнения.Содержит
                Результат = ЗначениеСодержит(ЗначениеОбъекта, ПравоеЗначение)
            ;
        иначе
            ЛевоеЗначениеNull = Истина
        ;
    ;
    если ЛевоеЗначениеNull и ЭлементУсловий.ВидСравнения == ВидыСравнения.НеЗаполнено
        Результат = Истина
    ;
    возврат Результат
;

метод ЗначениеВИерархии(ЗначениеОбъекта: Объект?, ЗначениеИерархии: Объект?): Булево
    знч Сервисы = ПоставщикЗначенийДляШаблонов.ПолучитьСервисы()
    для Сервис из Сервисы
        знч ЗначениеВИерархии = Сервис.ЗначениеВИерархии(ЗначениеОбъекта, ЗначениеИерархии)
        если ЗначениеВИерархии != Неопределено
            возврат ЗначениеВИерархии
        ;
    ;
    возврат Ложь
;

метод ЗначениеЗаполнено(ЗначениеОбъекта: неизвестно): Булево
    выбор ЗначениеОбъекта
        когда это Строка
            возврат  не (ЗначениеОбъекта как Строка).Пусто()
        когда это Число
            возврат (ЗначениеОбъекта как Число) != 0
        когда это Массив<неизвестно>
            возврат (ЗначениеОбъекта как Массив<неизвестно>).Размер() > 0
        когда это Дата
            возврат (ЗначениеОбъекта как Дата) != Дата{}
        когда это Неопределено
            возврат Ложь
    ;
    возврат Истина
;

метод СтрокаНачинаетсяС(ЗначениеОбъекта: неизвестно, ПравоеЗначение: Строка): Булево
    если ЗначениеОбъекта != Неопределено
        знч ТестируемоеЗначение = ЗначениеОбъектаСтрокой(ЗначениеОбъекта)
        возврат ТестируемоеЗначение.НачинаетсяС(ПравоеЗначение)
    ;
    возврат Ложь
;

метод СтрокаПодобна(ЗначениеОбъекта: неизвестно, ПравоеЗначение: Строка): Булево
    если ЗначениеОбъекта != Неопределено
        знч ТестируемоеЗначение = ЗначениеОбъектаСтрокой(ЗначениеОбъекта)
        возврат ТестируемоеЗначение.Найти(ПравоеЗначение) > 0
    ;
    возврат Ложь
;

метод ЗначениеСодержит(ЗначениеОбъекта: неизвестно, ПравоеЗначение: неизвестно): Булево
    если ЗначениеОбъекта != Неопределено
        если ЗначениеОбъекта это Строка
            возврат СтрокаПодобна(ЗначениеОбъекта, ПравоеЗначение)
        иначе если ЗначениеОбъекта это Справочник.Ссылка
            возврат ЗначениеОбъекта == ПравоеЗначение
        иначе
            возврат ВСписке(ЗначениеОбъекта, ПравоеЗначение)
        ;
    ;
    возврат Ложь
;

метод ВСписке(ЗначениеОбъекта: неизвестно, ПравоеЗначение: неизвестно): Булево
    если ПравоеЗначение это Массив<неизвестно>
        возврат (ПравоеЗначение как Массив<неизвестно>).Содержит(ЗначениеОбъекта)
    иначе если ПравоеЗначение это Множество<неизвестно>
        возврат (ПравоеЗначение как Множество<неизвестно>).Содержит(ЗначениеОбъекта)
    ;
    возврат Ложь
;

метод ЗначениеОбъектаСтрокой(ЗначениеОбъекта: неизвестно): Строка
    если ЗначениеОбъекта это Справочник.Ссылка
        возврат МенеджерСущности.ПредставлениеСсылки(ЗначениеОбъекта)
    иначе если не (ЗначениеОбъекта это Строка)
        возврат ЗначениеОбъекта.ВСтроку()
    ;
    возврат ЗначениеОбъекта как Строка
;

метод ПравоеЗначениеОбъекта(ПравоеЗначение: Объект?, ЗначенияПеречислений: Соответствие<Строка, Объект>, ТипЛевогоЗначения: Тип): Объект?
    если ПравоеЗначение это Строка
        если ЗначенияПеречислений.СодержитКлюч(ПравоеЗначение как Строка)
            возврат ЗначенияПеречислений.Получить(ПравоеЗначение как Строка)
        иначе 
            знч Сервисы = ПоставщикЗначенийДляШаблонов.ПолучитьСервисы()
            для Сервис из Сервисы
                знч Значение = Сервис.ЗначениеСсылкиПоИдентификатору(ПравоеЗначение как Строка)
                если Значение != Неопределено
                    возврат Значение
                ;
            ;
        ;
    иначе если ПравоеЗначение == Неопределено
        выбор ТипЛевогоЗначения
            когда Тип<Строка>
                ПравоеЗначение = ""
            когда Тип<Число>
                ПравоеЗначение = 0
            когда Тип<Дата>
                ПравоеЗначение = Дата{}
            иначе
                ПравоеЗначение = ""
        ;
    ;
    возврат ПравоеЗначение
;

@ВПроекте
метод ДополнитьДанныеДополнительнымиРеквизитами(ДанныеШаблона: ШаблоныДокументовМенеджер.ДанныеДляШаблонаПечатнойФормы, ДокументСсылка: Справочник.Ссылка?, Ид: Строка)
    пер ДополнительныеРеквизиты: РеквизитыШаблона?
    если ДокументСсылка == Неопределено
        ДополнительныеРеквизиты = РеквизитыШаблона(Неопределено, Ид)
    иначе
        ДополнительныеРеквизиты = РеквизитыШаблона(ДокументСсылка как ОбъектСПечатнойФормой.Ссылка, Ид)
    ;
    для ОписаниеРеквизита из ДополнительныеРеквизиты.Реквизиты
        для ДанныеИдентификатора из ДанныеШаблона.ДанныеОбъекта
            если ОписаниеРеквизита.ТипЗначения == ТипыПользовательскихПолей.Период
                пер ПериодСтрокой: Строка
                знч Начало = МенеджерДат.ФорматДаты(ОписаниеРеквизита.Значение как Дата?, "д ММММ гггг")
                если ОписаниеРеквизита.Значение == ОписаниеРеквизита.ЗначениеВторое
                    ПериодСтрокой = Начало
                иначе
                    знч Окончание = МенеджерДат.ФорматДаты(ОписаниеРеквизита.ЗначениеВторое, "д ММММ гггг")
                    ПериодСтрокой = "с %{Начало} по %{Окончание}"
                ;
                ДанныеИдентификатора.Значение.Данные.Вставить(ОписаниеРеквизита.Имя, ПериодСтрокой)
            иначе
                ДанныеИдентификатора.Значение.Данные.Вставить(ОписаниеРеквизита.Имя, ОписаниеРеквизита.Значение)
            ;
        ;
    ;
;

@ВПроекте
метод УдалитьЗначенияРеквизитовОбъекта(СсылкаНаОбъект: ОбъектСПечатнойФормой.Ссылка)
    исп КонтекстДоступа.Привилегированный()
    ЗначенияРеквизитовМакетовДокументов.УдалитьЗначенияРеквизитовОбъекта(СсылкаНаОбъект)
;

@ВПроекте
метод ЗаписатьШаблонДокумента(Подсистема: Строка, ИмяРесурса: Строка, ЗапросHttp: HttpСервисЗапрос)
    
    знч ПроверкаФорматаОбмена = ВебApiСервер.ПроверитьФорматОбмена(ЗапросHttp)
    если ПроверкаФорматаОбмена.ФорматОбмена >= Версия{3.0}
        ЗаписатьШаблонДокумента_3_0(Подсистема, ИмяРесурса, ЗапросHttp)
    иначе если ПроверкаФорматаОбмена.ФорматОбмена >= Версия{2.2}
        ЗаписатьШаблонДокумента_2_2(Подсистема, ИмяРесурса, ЗапросHttp)
    ;
;

метод ЗаписатьШаблонДокумента_2_2(Подсистема: Строка, ИмяРесурса: Строка, ЗапросHttp: HttpСервисЗапрос)
    
    исп Транзакции.Начать()
    
    знч СервисыЗагрузкиСсылокJson = ВебApiСервер.СервисыЗагрузкиJson()
    
    пер НастройкиЧтения = новый НастройкиЧтенияОбъектовJson()
    НастройкиЧтения.ИгнорироватьНеизвестныеСвойства = Истина
    НастройкиЧтения.ИгнорироватьЛишниеЧастиДатыВремени = Истина
    знч ДанныеЗапроса = СериализацияJson.ПрочитатьОбъект(ЗапросHttp.Тело, Тип<ШаблоныДокументов.ШаблонДокумента_2_2>, НастройкиЧтения)
    ЗаписатьШаблонДокумента(Подсистема, ИмяРесурса, ДанныеЗапроса.ТелоШаблона)
    РеквизитыШаблонов.ЗагрузитьПараметрыИзJson(
        Подсистема,
        ИмяРесурса,
        ДанныеЗапроса.Реквизиты)

    УсловияВыводаОбластейШаблонов.ЗагрузитьУсловияВыводаИзJson(
        Подсистема,
        ИмяРесурса,
        ДанныеЗапроса.УсловияОбластей,
        СервисыЗагрузкиСсылокJson) 
;

метод ЗаписатьШаблонДокумента_3_0(Подсистема: Строка, ИмяРесурса: Строка, ЗапросHttp: HttpСервисЗапрос)
    
    исп Транзакции.Начать()
    
    знч СервисыЗагрузкиСсылокJson = ВебApiСервер.СервисыЗагрузкиJson()
    
    пер НастройкиЧтения = новый НастройкиЧтенияОбъектовJson()
    НастройкиЧтения.ИгнорироватьНеизвестныеСвойства = Истина
    НастройкиЧтения.ИгнорироватьЛишниеЧастиДатыВремени = Истина
    знч ДанныеЗапроса = СериализацияJson.ПрочитатьОбъект(ЗапросHttp.Тело, Тип<ШаблоныДокументов.ШаблонДокумента_3_0>, НастройкиЧтения)
    ЗаписатьШаблонДокумента(Подсистема, ИмяРесурса, ДанныеЗапроса.ТелоШаблона)
    РеквизитыШаблонов.ЗагрузитьПараметрыИзJson(
        Подсистема,
        ИмяРесурса,
        ДанныеЗапроса.Реквизиты)

    УсловияВыводаОбластейШаблонов.ЗагрузитьУсловияВыводаИзJson(
        Подсистема,
        ИмяРесурса,
        ДанныеЗапроса.УсловияОбластей,
        СервисыЗагрузкиСсылокJson) 
;

@ВПроекте
метод ЗаписатьШаблонДокумента(Подсистема: Строка, ИмяРесурса: Строка, ТелоШаблона: Строка)
    пер Хранилище = ОбъектноеХранилище.ЗагрузитьИзBase64Строки(ТелоШаблона)
    УниверсальныеМеханизмы.ЗаписатьДвоичныеДанные(Подсистема, ИмяРесурса, Хранилище.Ссылка)
;