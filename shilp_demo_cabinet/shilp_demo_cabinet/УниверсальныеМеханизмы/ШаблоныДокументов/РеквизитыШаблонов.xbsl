импорт УниверсальныеМеханизмы

//Область РазрешенияДоступа

@Обработчик
метод ВычислитьРазрешенияДоступа(): Массив<РазрешениеДоступа>
    возврат ШаблоныДокументовПоставщикОграничений.ПолучитьСервис().РеквизитыШаблоновРазрешенияДоступа()
;

//КонецОбласти

@ВПроекте
структура РеквизитДанных_2_1
    @JsonСвойство(Имя = "name")
    обз знч Имя: Строка
    @JsonСвойство(Имя = "presentations")
    обз знч Заголовок: Строка 
    @JsonСвойство(Имя = "attributeType")
    обз знч ТипЗначения: Строка
;

@ВПроекте
структура РеквизитДанных_3_0
    @JsonСвойство(Имя = "name")
    обз знч Имя: Строка
    @JsonСвойство(Имя = "presentations")
    обз знч Заголовок: Строка 
    @JsonСвойство(Имя = "attributeType")
    обз знч ТипЗначения: Строка
    @JsonСвойство(Имя = "denyIncompleteValues")
    обз знч Обязательный: Булево
    @JsonСвойство(Имя = "defaultValue")
    обз знч ЗначениеПоУмолчанию: Булево|Число|Строка|Дата|?
    @JsonСвойство(Имя = "secondDefaultValue")
    обз знч ЗначениеПоУмолчаниюВторое: Дата?
    @JsonСвойство(Имя = "availableValues")
    обз знч ДоступныеЗначения: Массив<ЗначенияПеречислений.ДоступноеЗначение_3_0>?
;

метод ТипЗначенияИзJson(ТипРеквизита: Строка): ТипыПользовательскихПолей
    выбор ТипРеквизита
    когда "text"
        возврат ТипыПользовательскихПолей.Текст
    когда "integerNumber"
        возврат ТипыПользовательскихПолей.ЦелоеЧисло
    когда "numberIs2DecimalPlaces"
        возврат ТипыПользовательскихПолей.Число2ЗнакаПослеЗапятой
    когда "date"
        возврат ТипыПользовательскихПолей.Дата
    когда "period"
        возврат ТипыПользовательскихПолей.Период
    когда "bool"
        возврат ТипыПользовательскихПолей.Булево
    когда "enumeration"
        возврат ТипыПользовательскихПолей.Перечисление
    ;
    возврат ТипыПользовательскихПолей.Строка
;

@ВПроекте
метод ЗагрузитьПараметрыИзJson(Подсистема: Строка, ИмяРесурса: Строка, РеквизитыДанных: Массив<РеквизитДанных_2_1>?)
    
    если РеквизитыДанных == Неопределено
        возврат
    ;
    знч НаборЗаписей = новый РеквизитыШаблонов.НаборЗаписей()
	НаборЗаписей.Фильтр.Ид.Установить(УниверсальныеМеханизмы.Ид(Подсистема, ИмяРесурса))
    пер Порядок = 1
    для ПараметрДанных из РеквизитыДанных
        НаборЗаписей.ДобавитьЗапись(
            Порядок = Порядок,
            Имя = ПараметрДанных.Имя,
            Заголовок = ПараметрДанных.Заголовок,
            ТипЗначения = ТипЗначенияИзJson(ПараметрДанных.ТипЗначения))
    ;
    НаборЗаписей.Записать()
;

@ВПроекте
метод ЗагрузитьПараметрыИзJson(Подсистема: Строка, ИмяРесурса: Строка, РеквизитыДанных: Массив<РеквизитДанных_3_0>)
    
    знч НаборЗаписей = новый РеквизитыШаблонов.НаборЗаписей()
	НаборЗаписей.Фильтр.Ид.Установить(УниверсальныеМеханизмы.Ид(Подсистема, ИмяРесурса))
    пер Порядок = 1
    для ПараметрДанных из РеквизитыДанных
        знч ТипЗначения = ТипЗначенияИзJson(ПараметрДанных.ТипЗначения)
        если ТипЗначения == ТипыПользовательскихПолей.Дата
            пер ЗначениеПоУмолчанию = ПараметрДанных.ЗначениеПоУмолчанию
            если ЗначениеПоУмолчанию это Строка
                ЗначениеПоУмолчанию = (новый ДатаВремя(ЗначениеПоУмолчанию как Строка)).Дата
            иначе если не (ЗначениеПоУмолчанию это Дата)
                ЗначениеПоУмолчанию = Неопределено
            ;
            НаборЗаписей.ДобавитьЗапись(
                Порядок = Порядок,
                Имя            = ПараметрДанных.Имя,
                Заголовок      = ПараметрДанных.Заголовок,
                ТипЗначения    = ТипЗначенияИзJson(ПараметрДанных.ТипЗначения),
                Обязательный   = ПараметрДанных.Обязательный,
                ЗначениеПоУмолчанию       = ЗначениеПоУмолчанию)
        иначе если ТипЗначения == ТипыПользовательскихПолей.Период
            пер ЗначениеПоУмолчанию = ПараметрДанных.ЗначениеПоУмолчанию
            если ЗначениеПоУмолчанию это Строка
                ЗначениеПоУмолчанию = (новый ДатаВремя(ЗначениеПоУмолчанию как Строка)).Дата
            иначе если не (ЗначениеПоУмолчанию это Дата)
                ЗначениеПоУмолчанию = Неопределено
            ;
            НаборЗаписей.ДобавитьЗапись(
                Порядок = Порядок,
                Имя            = ПараметрДанных.Имя,
                Заголовок      = ПараметрДанных.Заголовок,
                ТипЗначения    = ТипЗначенияИзJson(ПараметрДанных.ТипЗначения),
                Обязательный   = ПараметрДанных.Обязательный,
                ЗначениеПоУмолчанию       = ЗначениеПоУмолчанию,
                ЗначениеПоУмолчаниюВторое = ПараметрДанных.ЗначениеПоУмолчаниюВторое)
        иначе
            НаборЗаписей.ДобавитьЗапись(
                Порядок = Порядок,
                Имя            = ПараметрДанных.Имя,
                Заголовок      = ПараметрДанных.Заголовок,
                ТипЗначения    = ТипЗначенияИзJson(ПараметрДанных.ТипЗначения),
                Обязательный   = ПараметрДанных.Обязательный,
                ЗначениеПоУмолчанию       = ПараметрДанных.ЗначениеПоУмолчанию как Булево|Число|Строка|?)
        ;
        ЗначенияПеречислений.ЗагрузитьДоступныеЗначенияИзJson(УниверсальныеМеханизмы.Ид(Подсистема, ИмяРесурса), ПараметрДанных.Имя, ПараметрДанных.ДоступныеЗначения)
        Порядок += 1
    ;
    НаборЗаписей.Записать()
;

@ВПроекте
метод РеквизитыШаблона(Ид: Строка): Массив<РеквизитШаблона>
    пер Реквизиты = новый Массив<РеквизитШаблона>()
    знч Запрос = Запрос{
        Выбрать
            Ид,
            Имя,
            Заголовок,
            ТипЗначения,
            Обязательный,
            ЗначениеПоУмолчанию Как Значение,
            ЗначениеПоУмолчаниюВторое Как ЗначениеВторое
        Из
            РеквизитыШаблонов
        Где
            Ид == %Ид
        Упорядочить По
            Порядок}
    исп Результат = Запрос.Выполнить()
    для СтрокаРезультата из Результат
        пер НовыйРеквизит = новый РеквизитШаблона()
        НовыйРеквизит.Имя = СтрокаРезультата.Имя
        НовыйРеквизит.Заголовок = СтрокаРезультата.Заголовок
        НовыйРеквизит.ТипЗначения = СтрокаРезультата.ТипЗначения
        НовыйРеквизит.Обязательный = СтрокаРезультата.Обязательный
        НовыйРеквизит.Значение = СтрокаРезультата.Значение
        НовыйРеквизит.ЗначениеВторое = СтрокаРезультата.ЗначениеВторое
        если НовыйРеквизит.ТипЗначения == ТипыПользовательскихПолей.Перечисление
            ЗначенияПеречислений.ЗаполнитьДоступныеЗначения(Ид, НовыйРеквизит)
        ;
        Реквизиты.Добавить(НовыйРеквизит)
    ;
    возврат Реквизиты
;