импорт ОбменДанными
импорт ВебApi
импорт ОбщиеСтандартные
импорт ФизическиеЛица

@ВПроекте
метод ЗарегистрироватьЗаметкиПоВладельцу(ОбъектСохраненияЗаметки: ОбъектСохраненияЗаметки.Ссылка)
    пер ТребуетсяРегистрация: Булево
    для Сервис из ЗаметкиРегистрацияИзменений.ПолучитьСервисы()
        если Сервис.ТребуетсяРегистрация(ОбъектСохраненияЗаметки)
            ТребуетсяРегистрация = Истина
            прервать
        ;    
    ;
    
    если не ТребуетсяРегистрация
        возврат
    ;
    
    исп Результат = Запрос{
        Выбрать
            Ссылка 
        Из
            ЗаметкиКОбъектам
        Где 
            ОбъектСохраненияЗаметки == %ОбъектСохраненияЗаметки
    }.Выполнить()
    
    для Элемент из Результат
        ОбменДанными.ЗарегистрироватьОтправляемыйДокумент(Элемент.Ссылка, Истина)
        РегистрацияИзменений.ЗарегистрироватьИзменение(Элемент.Ссылка, Неопределено)
    ;
;


// JSON

@ВПроекте
метод ТипОбъектаJson(): Строка
    возврат "notes"
;

@ВПроекте
структура ДанныеJson_V2_0
    обз знч ID: Строка
    пер object: ОбменДанными.ЭлементКонтрактаСущностиJson?
    пер author: Строка?
    пер noteText: Строка
    пер dateCreate: Момент?
    пер dateUpdate: Момент?
;

@ВПроекте
структура ДанныеJson_V3_0
    обз знч ID: Строка
    обз знч object: ОбменДанными.ЭлементКонтрактаСущностиJson?
    обз знч author: Строка?
    обз знч noteText: Строка
    обз знч dateCreate: Момент
    обз знч dateUpdate: Момент?
    обз знч attachments: Массив<МенеджерФайлов.ДанныеФайлаJson>
;

@ВПодсистеме
метод ТипДанныхJson(ВерсияФорматаОбмена: Версия?): Тип
    если ВерсияФорматаОбмена == Неопределено
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    
    если ВерсияФорматаОбмена >= Версия{3.0}
        возврат Тип<ДанныеJson_V3_0>
    иначе если ВерсияФорматаОбмена >= Версия{2.0}
        возврат Тип<ДанныеJson_V2_0>
    иначе
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson_V2_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    
    исп Транзакции.Начать()
    
    знч Заметка = Сервисы.ПрочитатьОбъект(ДанныеJson.ID, &ЗаметкиКОбъектам.Объект.новый(Ууид), Тип<ЗаметкиКОбъектам.Ссылка>) как ЗаметкиКОбъектам.Объект
    
    знч СервисыКонтракта = ОбъектыСохраненияЗаметокApi.ПолучитьСервисы()
    пер ВнешняяСсылка: ВебApiСервер.ВнешняяСсылка?
    
    если ДанныеJson.object != Неопределено
        для СервисКонтракта из СервисыКонтракта
        ВнешняяСсылка = СервисКонтракта.ВнешняяСсылка(ДанныеJson.object)
            если ВнешняяСсылка != Неопределено
                Заметка.ОбъектСохраненияЗаметки = Сервисы.ПолучитьСсылку(ВнешняяСсылка) как ОбъектСохраненияЗаметки.Ссылка
                прервать
            ;    
        ; 
        если ВнешняяСсылка == Неопределено
            Заметка.ОбъектСохраненияЗаметки = ОбменДанными.ИдентификаторыЛокальныхОбъектов([ДанныеJson.object.ID])
                            .ПолучитьИлиУмолчание(ДанныеJson.object.ID) как ОбъектСохраненияЗаметки.Ссылка?    
        ;  
    ;
     
    если ДанныеJson.dateCreate != Неопределено
        Заметка.МоментСоздания = ДанныеJson.dateCreate
    иначе
        Заметка.МоментСоздания = Момент.Сейчас()
    ;
    
    если ДанныеJson.dateUpdate != Неопределено
        Заметка.МоментРедактирования = ДанныеJson.dateUpdate
    иначе
        Заметка.МоментРедактирования = Момент.Сейчас()
    ;
    
    если ДанныеJson.author != Неопределено
        Заметка.Автор = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.author)) как ФизическиеЛица.Ссылка
    ;
    
    Заметка.ТекстЗаметки = ДанныеJson.noteText
    
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(Заметка, ДанныеJson.ID), Сервисы.ИнструментыМенеджераОбъекта)
;

@ВПодсистеме
метод ЗагрузитьОбъектИзJson(ДанныеJson: ДанныеJson_V3_0, Сервисы: ВебApiСервер.СервисыЗагрузкиJson)
    
    исп Транзакции.Начать()
    
    знч Заметка = Сервисы.ПрочитатьОбъект(ДанныеJson.ID, &ЗаметкиКОбъектам.Объект.новый(Ууид), Тип<ЗаметкиКОбъектам.Ссылка>) как ЗаметкиКОбъектам.Объект
    
    знч СервисыКонтракта = ОбъектыСохраненияЗаметокApi.ПолучитьСервисы()
    пер ВнешняяСсылка: ВебApiСервер.ВнешняяСсылка?
    
    если ДанныеJson.object != Неопределено
        для СервисКонтракта из СервисыКонтракта
        ВнешняяСсылка = СервисКонтракта.ВнешняяСсылка(ДанныеJson.object)
            если ВнешняяСсылка != Неопределено
                Заметка.ОбъектСохраненияЗаметки = Сервисы.ПолучитьСсылку(ВнешняяСсылка) как ОбъектСохраненияЗаметки.Ссылка
                прервать
            ;    
        ; 
        если ВнешняяСсылка == Неопределено
            Заметка.ОбъектСохраненияЗаметки = ОбменДанными.ИдентификаторыЛокальныхОбъектов([ДанныеJson.object.ID])
                            .ПолучитьИлиУмолчание(ДанныеJson.object.ID) как ОбъектСохраненияЗаметки.Ссылка?    
        ;
    ;
     
    Заметка.МоментСоздания = ДанныеJson.dateCreate
    Заметка.МоментРедактирования = ДанныеJson.dateUpdate
    
    если ДанныеJson.author != Неопределено
        Заметка.Автор = Сервисы.ПолучитьСсылку(ФизическиеЛица.ВнешняяСсылка(ДанныеJson.author)) как ФизическиеЛица.Ссылка
    ;
    
    Заметка.ТекстЗаметки = ДанныеJson.noteText
    
    Сервисы.ЗаписатьОбъект(новый ВебApiСервер.ПараметрыЗаписиВходящихДанных(Заметка, ДанныеJson.ID), Сервисы.ИнструментыМенеджераОбъекта)
    
    знч Вложения = Файлы.ВложенияИзJson(ДанныеJson.attachments, Сервисы, Заметка.Ссылка)
    Файлы.ЗаписатьФайлыПоВладельцу(Вложения, Заметка.Ссылка) 
    
;

@ВПодсистеме
метод ГруппаИзмененийВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, 
        Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): ЧитаемоеСоответствие<Строка, Массив<Объект?>>
    возврат {"notes": ДанныеЗаметокВJson(Ссылки, Сервисы, ВерсияФорматаОбмена)}
;

метод ДанныеЗаметокВJson(Ссылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>, 
        Сервисы: ВебApiСервер.СервисыУпаковкиJson, ВерсияФорматаОбмена: Версия?): Массив<Объект?>
        
    знч Данные: Массив<Объект?>
    если ВерсияФорматаОбмена >= Версия{3.0}
        для КлючИЗначение из ДанныеЗаметок(Ссылки)
            Данные.Добавить(ДанныеЗаметкиВJson_V3_0(КлючИЗначение.Значение, Сервисы))
        ;
    иначе если ВерсияФорматаОбмена >= Версия{2.0}
        для КлючИЗначение из ДанныеЗаметок(Ссылки)
            Данные.Добавить(ДанныеЗаметкиВJson_V2_0(КлючИЗначение.Значение, Сервисы))
        ;
    иначе
        выбросить новый ИсключениеВыполнения("Неверный формат")
    ;
    
    
    
    возврат Данные
;

@ВПроекте
метод ДанныеЗаметок(ЗаметкиСсылки: ЧитаемаяКоллекция<ИсходящиеДанные.Ссылка>): ЧитаемоеСоответствие<ЗаметкиКОбъектам.Ссылка, ДанныеЗаметки>
    
    знч ДанныеЗаметок: Соответствие<ЗаметкиКОбъектам.Ссылка, ДанныеЗаметки>
    
    если ЗаметкиСсылки.Пусто()
        возврат ДанныеЗаметок
    ;
    
    знч Запрос = Запрос{
        Выбрать
            Ссылка,
            ОбъектСохраненияЗаметки,
            Автор,
            ТекстЗаметки,
            МоментСоздания,
            МоментРедактирования
        Породить ДанныеЗаметки
        Из
            ЗаметкиКОбъектам
        Где
            Ссылка В (%ЗаметкиСсылки)
    }
    исп Результат = Запрос.Выполнить()
    
    для СтрокаРезультата из Результат
        ДанныеЗаметок.Вставить(
            СтрокаРезультата.Ссылка,
            СтрокаРезультата)        
    ;
    
    возврат ДанныеЗаметок   
;

метод ДанныеЗаметкиВJson_V2_0(ДанныеЗаметки: ДанныеЗаметки, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДанныеJson_V2_0
    
    знч ДанныеJson = новый ДанныеJson_V2_0(
        Сервисы.ПолучитьИдентификатор(ДанныеЗаметки.Ссылка)
    )
    если ДанныеЗаметки.ОбъектСохраненияЗаметки != Неопределено
        знч СервисыКонтракта = ОбъектыСохраненияЗаметокApi.ПолучитьСервисы()
        пер ОписаниеЭлемента: ОбменДанными.ЭлементКонтрактаСущностиJson?
        для СервисКонтракта из СервисыКонтракта
            ОписаниеЭлемента = СервисКонтракта.ОписаниеЭлемента(
                ДанныеЗаметки.ОбъектСохраненияЗаметки,
                Сервисы    
            )
            если ОписаниеЭлемента != Неопределено
                ДанныеJson.object = ОписаниеЭлемента
            ;
        ;
    ;
    ДанныеJson.noteText = ДанныеЗаметки.ТекстЗаметки
    ДанныеJson.dateCreate = ДанныеЗаметки.МоментСоздания
    ДанныеJson.dateUpdate = ДанныеЗаметки.МоментРедактирования
    
    
    если ДанныеЗаметки.Автор != Неопределено
        ДанныеJson.author = Сервисы.ПолучитьИдентификатор(ДанныеЗаметки.Автор)
    ;
    
    возврат ДанныеJson
;

метод ДанныеЗаметкиВJson_V3_0(ДанныеЗаметки: ДанныеЗаметки, Сервисы: ВебApiСервер.СервисыУпаковкиJson): ДанныеJson_V3_0
    
    пер ОписаниеЭлемента: ОбменДанными.ЭлементКонтрактаСущностиJson?
    если ДанныеЗаметки.ОбъектСохраненияЗаметки != Неопределено
        знч СервисыКонтракта = ОбъектыСохраненияЗаметокApi.ПолучитьСервисы()
        для СервисКонтракта из СервисыКонтракта
            ОписаниеЭлемента = СервисКонтракта.ОписаниеЭлемента(
                ДанныеЗаметки.ОбъектСохраненияЗаметки,
                Сервисы    
            )
        ;
    ;

    пер АвторИд: Строка?
    если ДанныеЗаметки.Автор != Неопределено
        АвторИд = Сервисы.ПолучитьИдентификатор(ДанныеЗаметки.Автор)
    ;
    
    возврат новый ДанныеJson_V3_0(
        ID = Сервисы.ПолучитьИдентификатор(ДанныеЗаметки.Ссылка),
        object = ОписаниеЭлемента,
        noteText = ДанныеЗаметки.ТекстЗаметки,
        dateCreate = ДанныеЗаметки.МоментСоздания,
        dateUpdate = ДанныеЗаметки.МоментРедактирования,
        author = АвторИд,
        attachments = Файлы.ПолучитьДанныеФайловJson(ДанныеЗаметки.Ссылка, Ложь, Сервисы).Вложения ?? []
    )
;

@ВПроекте
метод ВнешняяСсылка(Идентификатор: Строка): ВебApiСервер.ВнешняяСсылка
    возврат новый ВебApiСервер.ВнешняяСсылка(Идентификатор, (Ууид) -> ЗаметкиКОбъектам.ПолучитьСсылку(Ууид))
;

// Конец JSON